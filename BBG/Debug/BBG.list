
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c988  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ac0  0800cb38  0800cb38  0001cb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105f8  080105f8  00030108  2**0
                  CONTENTS
  4 .ARM          00000008  080105f8  080105f8  000205f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010600  08010600  00030108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010600  08010600  00020600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010604  08010604  00020604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08010608  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  20000108  08010710  00030108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  08010710  00030a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ffdb  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007547  00000000  00000000  00070113  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027c8  00000000  00000000  00077660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024b8  00000000  00000000  00079e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030773  00000000  00000000  0007c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a773  00000000  00000000  000aca53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6dca  00000000  00000000  000d71c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cdf90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a660  00000000  00000000  001ce00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cb20 	.word	0x0800cb20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	0800cb20 	.word	0x0800cb20

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
////	bbg->kulka = kulka;
////	rysuj_kulke(bbg->kulka);
//}

void BBG_init(BBG *bbg, Platforma *platforma, Klocek **klocki, Kulka *kulka, int lkl)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	60da      	str	r2, [r3, #12]

    bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
    rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fab6 	bl	8001a80 <rysuj_platforme>

    bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++)
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e00b      	b.n	8000538 <BBG_init+0x48>
    {
        rysuj_klocek(bbg->klocki[i]);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fd97 	bl	8001060 <rysuj_klocek>
    for (int i = 0; i < bbg->liczba_klockow; i++)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbee      	blt.n	8000520 <BBG_init+0x30>
    }

    bbg->kulka = kulka;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	609a      	str	r2, [r3, #8]
    rysuj_kulke(bbg->kulka);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fdc1 	bl	80010d4 <rysuj_kulke>
    rysuj_platforme(bbg->platforma);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fa92 	bl	8001a80 <rysuj_platforme>
}
 800055c:	bf00      	nop
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <BBG_obsluga_zbicia_klocka>:

void BBG_obsluga_zbicia_klocka(BBG *bbg)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e101      	b.n	8000776 <BBG_obsluga_zbicia_klocka+0x212>
    {
        // Sprawdź, czy kulka zderzyła się z klockiem
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	4413      	add	r3, r2
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	6851      	ldr	r1, [r2, #4]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	0092      	lsls	r2, r2, #2
 8000588:	440a      	add	r2, r1
 800058a:	6812      	ldr	r2, [r2, #0]
 800058c:	7852      	ldrb	r2, [r2, #1]
 800058e:	4293      	cmp	r3, r2
 8000590:	f2c0 80ee 	blt.w	8000770 <BBG_obsluga_zbicia_klocka+0x20c>
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	1ad2      	subs	r2, r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6859      	ldr	r1, [r3, #4]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	4618      	mov	r0, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6859      	ldr	r1, [r3, #4]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	440b      	add	r3, r1
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	78db      	ldrb	r3, [r3, #3]
 80005c0:	4403      	add	r3, r0
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 80005c2:	429a      	cmp	r2, r3
 80005c4:	f300 80d4 	bgt.w	8000770 <BBG_obsluga_zbicia_klocka+0x20c>
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	4413      	add	r3, r2
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	6851      	ldr	r1, [r2, #4]
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	440a      	add	r2, r1
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	7812      	ldrb	r2, [r2, #0]
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005e4:	4293      	cmp	r3, r2
 80005e6:	f2c0 80c3 	blt.w	8000770 <BBG_obsluga_zbicia_klocka+0x20c>
            bbg->kulka->polozenie_x - bbg->kulka->promien <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	1ad2      	subs	r2, r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6859      	ldr	r1, [r3, #4]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	440b      	add	r3, r1
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6859      	ldr	r1, [r3, #4]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	4403      	add	r3, r0
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 8000618:	429a      	cmp	r2, r3
 800061a:	f300 80a9 	bgt.w	8000770 <BBG_obsluga_zbicia_klocka+0x20c>
        {
            bbg->kulka->predkosc_x *= -1;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	68da      	ldr	r2, [r3, #12]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	4252      	negs	r2, r2
 800062a:	60da      	str	r2, [r3, #12]
            bbg->kulka->predkosc_y *= -1;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	691a      	ldr	r2, [r3, #16]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	4252      	negs	r2, r2
 8000638:	611a      	str	r2, [r3, #16]

            // Odwróć kierunek prędkości kulki
            if (bbg->kulka->polozenie_x >= bbg->klocki[i]->pozycja_x &&
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	6851      	ldr	r1, [r2, #4]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	0092      	lsls	r2, r2, #2
 8000648:	440a      	add	r2, r1
 800064a:	6812      	ldr	r2, [r2, #0]
 800064c:	7812      	ldrb	r2, [r2, #0]
 800064e:	4293      	cmp	r3, r2
 8000650:	db1b      	blt.n	800068a <BBG_obsluga_zbicia_klocka+0x126>
                bbg->kulka->polozenie_x <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6859      	ldr	r1, [r3, #4]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	440b      	add	r3, r1
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6859      	ldr	r1, [r3, #4]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	4403      	add	r3, r0
            if (bbg->kulka->polozenie_x >= bbg->klocki[i]->pozycja_x &&
 8000678:	429a      	cmp	r2, r3
 800067a:	dc06      	bgt.n	800068a <BBG_obsluga_zbicia_klocka+0x126>
            {
                bbg->kulka->predkosc_x *= -1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	4252      	negs	r2, r2
 8000688:	60da      	str	r2, [r3, #12]
            }
            if (bbg->kulka->polozenie_y >= bbg->klocki[i]->pozycja_y &&
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	6851      	ldr	r1, [r2, #4]
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	440a      	add	r2, r1
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	7852      	ldrb	r2, [r2, #1]
 800069e:	4293      	cmp	r3, r2
 80006a0:	db1b      	blt.n	80006da <BBG_obsluga_zbicia_klocka+0x176>
                bbg->kulka->polozenie_y <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6859      	ldr	r1, [r3, #4]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	4618      	mov	r0, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6859      	ldr	r1, [r3, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	78db      	ldrb	r3, [r3, #3]
 80006c6:	4403      	add	r3, r0
            if (bbg->kulka->polozenie_y >= bbg->klocki[i]->pozycja_y &&
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dc06      	bgt.n	80006da <BBG_obsluga_zbicia_klocka+0x176>
            {
                bbg->kulka->predkosc_y *= -1;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	691a      	ldr	r2, [r3, #16]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	4252      	negs	r2, r2
 80006d8:	611a      	str	r2, [r3, #16]
            }

            // zamaluj miejsce zbitego klocka
            BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80006da:	482d      	ldr	r0, [pc, #180]	; (8000790 <BBG_obsluga_zbicia_klocka+0x22c>)
 80006dc:	f002 ffda 	bl	8003694 <BSP_LCD_SetBackColor>
            BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80006e0:	482b      	ldr	r0, [pc, #172]	; (8000790 <BBG_obsluga_zbicia_klocka+0x22c>)
 80006e2:	f002 ffbf 	bl	8003664 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b298      	uxth	r0, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	b299      	uxth	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	b29c      	uxth	r4, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	78db      	ldrb	r3, [r3, #3]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4622      	mov	r2, r4
 8000728:	f003 fa3c 	bl	8003ba4 <BSP_LCD_FillRect>

            // Usuń trafiony klocek z tablicy klocków
            // free(bbg->klocki[i]);

            // Przesuń pozostałe klocki w tablicy, aby zapełnić lukę po usuniętym klocku
            for (int j = i; j < bbg->liczba_klockow - 1; j++)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	e00f      	b.n	8000752 <BBG_obsluga_zbicia_klocka+0x1ee>
            {
                bbg->klocki[j] = bbg->klocki[j + 1];
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	3301      	adds	r3, #1
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	441a      	add	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6859      	ldr	r1, [r3, #4]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	440b      	add	r3, r1
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	601a      	str	r2, [r3, #0]
            for (int j = i; j < bbg->liczba_klockow - 1; j++)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	3301      	adds	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	3b01      	subs	r3, #1
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	429a      	cmp	r2, r3
 800075c:	dbe9      	blt.n	8000732 <BBG_obsluga_zbicia_klocka+0x1ce>
            }

            // Zmniejsz liczbę klocków o 1
            bbg->liczba_klockow--;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	60da      	str	r2, [r3, #12]

            // Przerwij pętlę, gdy trafiony zostanie tylko jeden klocek
            if (bbg->liczba_klockow == 0)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d009      	beq.n	8000784 <BBG_obsluga_zbicia_klocka+0x220>
    for (int i = 0; i < bbg->liczba_klockow; i++)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3301      	adds	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	f6ff aef8 	blt.w	8000572 <BBG_obsluga_zbicia_klocka+0xe>
            {
                break;
            }
        }
    }
}
 8000782:	e000      	b.n	8000786 <BBG_obsluga_zbicia_klocka+0x222>
                break;
 8000784:	bf00      	nop
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	bf00      	nop
 8000790:	ffff0000 	.word	0xffff0000

08000794 <BBG_obsluzDotykEkranu>:

// Obsługa dotyku ekranu (przykładowa implementacja)
void BBG_obsluzDotykEkranu(BBG *bbg, TS_StateTypeDef TS_State)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b08b      	sub	sp, #44	; 0x2c
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	e883 0006 	stmia.w	r3, {r1, r2}
    if (TS_State.TouchDetected)
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d067      	beq.n	8000878 <BBG_obsluzDotykEkranu+0xe4>
    {
        int platforma_x = Platforma_getPolozenieX(bbg->platforma);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f990 	bl	8001ad2 <Platforma_getPolozenieX>
 80007b2:	6278      	str	r0, [r7, #36]	; 0x24
        int platforma_szerokosc = Platforma_getSzerokosc(bbg->platforma);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 f996 	bl	8001aea <Platforma_getSzerokosc>
 80007be:	6238      	str	r0, [r7, #32]
        int platforma_krok = Platforma_getKrok(bbg->platforma);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 f99c 	bl	8001b02 <Platforma_getKrok>
 80007ca:	61f8      	str	r0, [r7, #28]

        uint32_t x = Calibration_GetX(TS_State.X);
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fd7a 	bl	80022c8 <Calibration_GetX>
 80007d4:	4603      	mov	r3, r0
 80007d6:	61bb      	str	r3, [r7, #24]
        uint32_t y = Calibration_GetY(TS_State.Y);
 80007d8:	893b      	ldrh	r3, [r7, #8]
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fd98 	bl	8002310 <Calibration_GetY>
 80007e0:	4603      	mov	r3, r0
 80007e2:	617b      	str	r3, [r7, #20]
        if ((x < BSP_LCD_GetXSize() / 2) & (x > 0))
 80007e4:	f002 fe74 	bl	80034d0 <BSP_LCD_GetXSize>
 80007e8:	4603      	mov	r3, r0
 80007ea:	085b      	lsrs	r3, r3, #1
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	bf34      	ite	cc
 80007f2:	2301      	movcc	r3, #1
 80007f4:	2300      	movcs	r3, #0
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4013      	ands	r3, r2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d006      	beq.n	800081a <BBG_obsluzDotykEkranu+0x86>
        {
            platforma_x = max(0, platforma_x - platforma_krok); // Move left
 800080c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
 8000818:	e02a      	b.n	8000870 <BBG_obsluzDotykEkranu+0xdc>
        }
        else if ((x > BSP_LCD_GetXSize() / 2) & (x < BSP_LCD_GetXSize()))
 800081a:	f002 fe59 	bl	80034d0 <BSP_LCD_GetXSize>
 800081e:	4603      	mov	r3, r0
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	429a      	cmp	r2, r3
 8000826:	bf8c      	ite	hi
 8000828:	2301      	movhi	r3, #1
 800082a:	2300      	movls	r3, #0
 800082c:	b2dc      	uxtb	r4, r3
 800082e:	f002 fe4f 	bl	80034d0 <BSP_LCD_GetXSize>
 8000832:	4602      	mov	r2, r0
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	4293      	cmp	r3, r2
 8000838:	bf34      	ite	cc
 800083a:	2301      	movcc	r3, #1
 800083c:	2300      	movcs	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4023      	ands	r3, r4
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d013      	beq.n	8000870 <BBG_obsluzDotykEkranu+0xdc>
        {
            platforma_x = min(BSP_LCD_GetXSize() - platforma_szerokosc, platforma_x + platforma_krok); // Move right
 8000848:	f002 fe42 	bl	80034d0 <BSP_LCD_GetXSize>
 800084c:	4602      	mov	r2, r0
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000854:	69fa      	ldr	r2, [r7, #28]
 8000856:	440a      	add	r2, r1
 8000858:	4293      	cmp	r3, r2
 800085a:	d205      	bcs.n	8000868 <BBG_obsluzDotykEkranu+0xd4>
 800085c:	f002 fe38 	bl	80034d0 <BSP_LCD_GetXSize>
 8000860:	4602      	mov	r2, r0
 8000862:	6a3b      	ldr	r3, [r7, #32]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	e002      	b.n	800086e <BBG_obsluzDotykEkranu+0xda>
 8000868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	4413      	add	r3, r2
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        BBG_ruchPlatformy(bbg, platforma_x);
 8000870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f000 f84b 	bl	800090e <BBG_ruchPlatformy>
    }
}
 8000878:	bf00      	nop
 800087a:	372c      	adds	r7, #44	; 0x2c
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}

08000880 <BBG_ruchKulki>:

// Ruch kulki (przykładowa implementacja)
int BBG_ruchKulki(BBG *bbg)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

    if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->platforma->polozenie_y &&
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	441a      	add	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	db27      	blt.n	80008f0 <BBG_ruchKulki+0x70>
        bbg->kulka->polozenie_x < bbg->platforma->polozenie_x + bbg->platforma->szerokosc &&
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	440b      	add	r3, r1
    if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->platforma->polozenie_y &&
 80008b4:	429a      	cmp	r2, r3
 80008b6:	da1b      	bge.n	80008f0 <BBG_ruchKulki+0x70>
        bbg->kulka->polozenie_x > bbg->platforma->polozenie_x)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
        bbg->kulka->polozenie_x < bbg->platforma->polozenie_x + bbg->platforma->szerokosc &&
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dd13      	ble.n	80008f0 <BBG_ruchKulki+0x70>
    {
        if (!(bbg->kulka->polozenie_y > bbg->platforma->polozenie_y))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	685a      	ldr	r2, [r3, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dc0b      	bgt.n	80008f0 <BBG_ruchKulki+0x70>
        {
            bbg->kulka->predkosc_y *= -1;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	691a      	ldr	r2, [r3, #16]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	4252      	negs	r2, r2
 80008e4:	611a      	str	r2, [r3, #16]
            rysuj_platforme(bbg->platforma);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 f8c8 	bl	8001a80 <rysuj_platforme>
        }
    }

    if (Kulka_ruch(bbg->kulka) == 1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fc07 	bl	8001108 <Kulka_ruch>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d101      	bne.n	8000904 <BBG_ruchKulki+0x84>
    {
        return 1;
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <BBG_ruchKulki+0x86>
    }

    // Obsługa odbicia od platformy
    return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <BBG_ruchPlatformy>:

// Ruch platformy (przykładowa implementacja)
void BBG_ruchPlatformy(BBG *bbg, int x)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
    zmaz_platforme(bbg->platforma);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f001 f893 	bl	8001a48 <zmaz_platforme>
    Platforma_przesunDo(bbg->platforma, x);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6839      	ldr	r1, [r7, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f8c4 	bl	8001ab6 <Platforma_przesunDo>
    rysuj_platforme(bbg->platforma);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f8a4 	bl	8001a80 <rysuj_platforme>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_CRC_Init+0x20>)
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <MX_CRC_Init+0x24>)
 8000948:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_CRC_Init+0x20>)
 800094c:	f004 f81e 	bl	800498c <HAL_CRC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000956:	f001 f851 	bl	80019fc <Error_Handler>
  }

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000400 	.word	0x20000400
 8000964:	40023000 	.word	0x40023000

08000968 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <HAL_CRC_MspInit+0x3c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d10d      	bne.n	8000996 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_CRC_MspInit+0x40>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <HAL_CRC_MspInit+0x40>)
 8000984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <HAL_CRC_MspInit+0x40>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023000 	.word	0x40023000
 80009a8:	40023800 	.word	0x40023800

080009ac <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <MX_DMA2D_Init+0x60>)
 80009b4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009e2:	f004 f9ab 	bl	8004d3c <HAL_DMA2D_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009ec:	f001 f806 	bl	80019fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009f0:	2101      	movs	r1, #1
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_DMA2D_Init+0x5c>)
 80009f4:	f004 fc10 	bl	8005218 <HAL_DMA2D_ConfigLayer>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009fe:	f000 fffd 	bl	80019fc <Error_Handler>
  }

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000408 	.word	0x20000408
 8000a0c:	4002b000 	.word	0x4002b000

08000a10 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_DMA2D_MspInit+0x48>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d115      	bne.n	8000a4e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_DMA2D_MspInit+0x4c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <HAL_DMA2D_MspInit+0x4c>)
 8000a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_DMA2D_MspInit+0x4c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2105      	movs	r1, #5
 8000a42:	205a      	movs	r0, #90	; 0x5a
 8000a44:	f003 ff78 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a48:	205a      	movs	r0, #90	; 0x5a
 8000a4a:	f003 ff91 	bl	8004970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	4002b000 	.word	0x4002b000
 8000a5c:	40023800 	.word	0x40023800

08000a60 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_FMC_Init+0x98>)
 8000a7a:	4a20      	ldr	r2, [pc, #128]	; (8000afc <MX_FMC_Init+0x9c>)
 8000a7c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_FMC_Init+0x98>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_FMC_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_FMC_Init+0x98>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_FMC_Init+0x98>)
 8000a92:	2210      	movs	r2, #16
 8000a94:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_FMC_Init+0x98>)
 8000a98:	2240      	movs	r2, #64	; 0x40
 8000a9a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_FMC_Init+0x98>)
 8000a9e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000aa2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_FMC_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_FMC_Init+0x98>)
 8000aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ab0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_FMC_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_FMC_Init+0x98>)
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000acc:	2307      	movs	r3, #7
 8000ace:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_FMC_Init+0x98>)
 8000ae2:	f008 fbcf 	bl	8009284 <HAL_SDRAM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000aec:	f000 ff86 	bl	80019fc <Error_Handler>
  }

}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000448 	.word	0x20000448
 8000afc:	a0000140 	.word	0xa0000140

08000b00 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b14:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <HAL_FMC_MspInit+0x104>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d16f      	bne.n	8000bfc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000b1c:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <HAL_FMC_MspInit+0x104>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <HAL_FMC_MspInit+0x108>)
 8000b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2a:	4a37      	ldr	r2, [pc, #220]	; (8000c08 <HAL_FMC_MspInit+0x108>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6393      	str	r3, [r2, #56]	; 0x38
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <HAL_FMC_MspInit+0x108>)
 8000b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000b3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b42:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b50:	230c      	movs	r3, #12
 8000b52:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	482c      	ldr	r0, [pc, #176]	; (8000c0c <HAL_FMC_MspInit+0x10c>)
 8000b5a:	f004 fc8b 	bl	8005474 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4826      	ldr	r0, [pc, #152]	; (8000c10 <HAL_FMC_MspInit+0x110>)
 8000b78:	f004 fc7c 	bl	8005474 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000b7c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b80:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	481f      	ldr	r0, [pc, #124]	; (8000c14 <HAL_FMC_MspInit+0x114>)
 8000b98:	f004 fc6c 	bl	8005474 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000b9c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ba0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <HAL_FMC_MspInit+0x118>)
 8000bb8:	f004 fc5c 	bl	8005474 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000bbc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000bc0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <HAL_FMC_MspInit+0x11c>)
 8000bd8:	f004 fc4c 	bl	8005474 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bdc:	2360      	movs	r3, #96	; 0x60
 8000bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bec:	230c      	movs	r3, #12
 8000bee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <HAL_FMC_MspInit+0x120>)
 8000bf6:	f004 fc3d 	bl	8005474 <HAL_GPIO_Init>
 8000bfa:	e000      	b.n	8000bfe <HAL_FMC_MspInit+0xfe>
    return;
 8000bfc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000124 	.word	0x20000124
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40021400 	.word	0x40021400
 8000c10:	40020800 	.word	0x40020800
 8000c14:	40021800 	.word	0x40021800
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000c2c:	f7ff ff68 	bl	8000b00 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
 8000c6a:	4b7a      	ldr	r3, [pc, #488]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a79      	ldr	r2, [pc, #484]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b77      	ldr	r3, [pc, #476]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	623b      	str	r3, [r7, #32]
 8000c80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	4b73      	ldr	r3, [pc, #460]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a72      	ldr	r2, [pc, #456]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b70      	ldr	r3, [pc, #448]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	61fb      	str	r3, [r7, #28]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	4b6c      	ldr	r3, [pc, #432]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a6b      	ldr	r2, [pc, #428]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b69      	ldr	r3, [pc, #420]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	4b65      	ldr	r3, [pc, #404]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a64      	ldr	r2, [pc, #400]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b62      	ldr	r3, [pc, #392]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b5e      	ldr	r3, [pc, #376]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a5d      	ldr	r2, [pc, #372]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b5b      	ldr	r3, [pc, #364]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a56      	ldr	r2, [pc, #344]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b54      	ldr	r3, [pc, #336]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a48      	ldr	r2, [pc, #288]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <MX_GPIO_Init+0x204>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2116      	movs	r1, #22
 8000d4a:	4843      	ldr	r0, [pc, #268]	; (8000e58 <MX_GPIO_Init+0x208>)
 8000d4c:	f004 fe46 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4841      	ldr	r0, [pc, #260]	; (8000e5c <MX_GPIO_Init+0x20c>)
 8000d56:	f004 fe41 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d60:	483f      	ldr	r0, [pc, #252]	; (8000e60 <MX_GPIO_Init+0x210>)
 8000d62:	f004 fe3b 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d6c:	483d      	ldr	r0, [pc, #244]	; (8000e64 <MX_GPIO_Init+0x214>)
 8000d6e:	f004 fe35 	bl	80059dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d72:	2316      	movs	r3, #22
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4833      	ldr	r0, [pc, #204]	; (8000e58 <MX_GPIO_Init+0x208>)
 8000d8a:	f004 fb73 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d8e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	482e      	ldr	r0, [pc, #184]	; (8000e5c <MX_GPIO_Init+0x20c>)
 8000da4:	f004 fb66 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4827      	ldr	r0, [pc, #156]	; (8000e5c <MX_GPIO_Init+0x20c>)
 8000dc0:	f004 fb58 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4820      	ldr	r0, [pc, #128]	; (8000e58 <MX_GPIO_Init+0x208>)
 8000dd8:	f004 fb4c 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	481f      	ldr	r0, [pc, #124]	; (8000e6c <MX_GPIO_Init+0x21c>)
 8000df0:	f004 fb40 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	4815      	ldr	r0, [pc, #84]	; (8000e60 <MX_GPIO_Init+0x210>)
 8000e0a:	f004 fb33 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <MX_GPIO_Init+0x210>)
 8000e28:	f004 fb24 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e2c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <MX_GPIO_Init+0x214>)
 8000e46:	f004 fb15 	bl	8005474 <HAL_GPIO_Init>

}
 8000e4a:	bf00      	nop
 8000e4c:	3738      	adds	r7, #56	; 0x38
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40021800 	.word	0x40021800
 8000e68:	10120000 	.word	0x10120000
 8000e6c:	40020400 	.word	0x40020400

08000e70 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <MX_I2C3_Init+0x78>)
 8000e78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <MX_I2C3_Init+0x7c>)
 8000e7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e92:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000eae:	f005 ff99 	bl	8006de4 <HAL_I2C_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000eb8:	f000 fda0 	bl	80019fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000ec0:	f006 ff81 	bl	8007dc6 <HAL_I2CEx_ConfigAnalogFilter>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000eca:	f000 fd97 	bl	80019fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_I2C3_Init+0x74>)
 8000ed2:	f006 ffb4 	bl	8007e3e <HAL_I2CEx_ConfigDigitalFilter>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000edc:	f000 fd8e 	bl	80019fc <Error_Handler>
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000047c 	.word	0x2000047c
 8000ee8:	40005c00 	.word	0x40005c00
 8000eec:	000186a0 	.word	0x000186a0

08000ef0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_I2C_MspInit+0xc4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d14b      	bne.n	8000faa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4815      	ldr	r0, [pc, #84]	; (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000f68:	f004 fa84 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f72:	2312      	movs	r3, #18
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <HAL_I2C_MspInit+0xd0>)
 8000f8a:	f004 fa73 	bl	8005474 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40005c00 	.word	0x40005c00
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_I2C_MspDeInit+0x3c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10f      	bne.n	8000ff6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_I2C_MspDeInit+0x40>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_I2C_MspDeInit+0x40>)
 8000fdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe6:	4808      	ldr	r0, [pc, #32]	; (8001008 <HAL_I2C_MspDeInit+0x44>)
 8000fe8:	f004 fbee 	bl	80057c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <HAL_I2C_MspDeInit+0x48>)
 8000ff2:	f004 fbe9 	bl	80057c8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40005c00 	.word	0x40005c00
 8001004:	40023800 	.word	0x40023800
 8001008:	40020800 	.word	0x40020800
 800100c:	40020000 	.word	0x40020000

08001010 <Klocek_init>:
#include "klocek.h"
#include "main.h"

// Inicjalizacja struktury Klocek
void Klocek_init(Klocek *k, int x, int y, int w, int h, uint32_t kol, uint8_t brk, uint8_t thr)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	701a      	strb	r2, [r3, #0]
    k->pozycja_y = y;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	705a      	strb	r2, [r3, #1]
    k->szerokosc = w;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	709a      	strb	r2, [r3, #2]
    k->wysokosc = h;
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	70da      	strb	r2, [r3, #3]
    k->kolor = kol;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	605a      	str	r2, [r3, #4]
    k->is_breakable = brk; // Jak 1 to da się zepuć, jak 0 to nie
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f897 2020 	ldrb.w	r2, [r7, #32]
 800104a:	725a      	strb	r2, [r3, #9]
    k->is_there = thr; // Jak jest 1 to jest obecny na planszy, jak 0 to nie istnieje
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001052:	721a      	strb	r2, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <rysuj_klocek>:

void rysuj_klocek(Klocek *k)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(k->kolor);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	f002 faf9 	bl	8003664 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b298      	uxth	r0, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	b299      	uxth	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	789b      	ldrb	r3, [r3, #2]
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	78db      	ldrb	r3, [r3, #3]
 8001088:	b29b      	uxth	r3, r3
 800108a:	f002 fd8b 	bl	8003ba4 <BSP_LCD_FillRect>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <Kulka_init>:
#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka *kulka, int x, int y, int r, int vx, int vy, uint32_t kol)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	603b      	str	r3, [r7, #0]
	kulka->polozenie_x = x;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = y;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	605a      	str	r2, [r3, #4]
	kulka->promien = r;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	609a      	str	r2, [r3, #8]
	kulka->predkosc_x = vx;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
	kulka->predkosc_y = vy;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	611a      	str	r2, [r3, #16]
	kulka->kolor = kol;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6a3a      	ldr	r2, [r7, #32]
 80010c6:	615a      	str	r2, [r3, #20]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <rysuj_kulke>:

void rysuj_kulke(Kulka *kulka)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fabf 	bl	8003664 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b298      	uxth	r0, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	b299      	uxth	r1, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	f002 fdad 	bl	8003c58 <BSP_LCD_FillCircle>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <Kulka_ruch>:
int Kulka_ruch(Kulka *kulka)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	// Zamaluj stary stan kulki
	BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8001110:	483d      	ldr	r0, [pc, #244]	; (8001208 <Kulka_ruch+0x100>)
 8001112:	f002 faa7 	bl	8003664 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b298      	uxth	r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	b299      	uxth	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	f002 fd95 	bl	8003c58 <BSP_LCD_FillCircle>

	// Oblicz nowe położenie kulki
	int nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
	int nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4413      	add	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]

	// Sprawdź zderzenie z lewą i prawą krawędzią ekranu
	if (nowe_polozenie_x - kulka->promien < 0 || nowe_polozenie_x + kulka->promien > BSP_LCD_GetXSize())
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	db09      	blt.n	8001166 <Kulka_ruch+0x5e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	461c      	mov	r4, r3
 800115c:	f002 f9b8 	bl	80034d0 <BSP_LCD_GetXSize>
 8001160:	4603      	mov	r3, r0
 8001162:	429c      	cmp	r4, r3
 8001164:	d910      	bls.n	8001188 <Kulka_ruch+0x80>
	{
		// Zderzenie z lewą lub prawą krawędzią, zmień kierunek prędkości poziomej
		kulka->predkosc_x = -kulka->predkosc_x;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	425a      	negs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
		nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4413      	add	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
		nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	4413      	add	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
	}

	// Sprawdź zderzenie z górną i dolną krawędzią ekranu
	if (nowe_polozenie_y - kulka->promien < 0)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	da10      	bge.n	80011b6 <Kulka_ruch+0xae>
	{
		// Zderzenie z górną lub dolną krawędzią, zmień kierunek prędkości pionowej
		kulka->predkosc_y = -kulka->predkosc_y;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	425a      	negs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	611a      	str	r2, [r3, #16]
		nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
		nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	4413      	add	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
	}
	if (nowe_polozenie_y + kulka->promien > BSP_LCD_GetYSize())
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	461c      	mov	r4, r3
 80011c0:	f002 f992 	bl	80034e8 <BSP_LCD_GetYSize>
 80011c4:	4603      	mov	r3, r0
 80011c6:	429c      	cmp	r4, r3
 80011c8:	d901      	bls.n	80011ce <Kulka_ruch+0xc6>
	{
		return 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e017      	b.n	80011fe <Kulka_ruch+0xf6>
	}

	// Aktualizuj położenie kulki na nowe pozycje
	kulka->polozenie_x = nowe_polozenie_x;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = nowe_polozenie_y;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	605a      	str	r2, [r3, #4]

	// Narysuj kulke na nowej pozycji
	BSP_LCD_SetTextColor(kulka->kolor);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 fa40 	bl	8003664 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b298      	uxth	r0, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	b299      	uxth	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	f002 fd2e 	bl	8003c58 <BSP_LCD_FillCircle>
	return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	bf00      	nop
 8001208:	ffff0000 	.word	0xffff0000

0800120c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09a      	sub	sp, #104	; 0x68
 8001210:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001212:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001216:	2234      	movs	r2, #52	; 0x34
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f00b fbd7 	bl	800c9ce <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2234      	movs	r2, #52	; 0x34
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f00b fbd1 	bl	800c9ce <memset>

  hltdc.Instance = LTDC;
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <MX_LTDC_Init+0x160>)
 800122e:	4a50      	ldr	r2, [pc, #320]	; (8001370 <MX_LTDC_Init+0x164>)
 8001230:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001232:	4b4e      	ldr	r3, [pc, #312]	; (800136c <MX_LTDC_Init+0x160>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001238:	4b4c      	ldr	r3, [pc, #304]	; (800136c <MX_LTDC_Init+0x160>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800123e:	4b4b      	ldr	r3, [pc, #300]	; (800136c <MX_LTDC_Init+0x160>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <MX_LTDC_Init+0x160>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800124a:	4b48      	ldr	r3, [pc, #288]	; (800136c <MX_LTDC_Init+0x160>)
 800124c:	2209      	movs	r2, #9
 800124e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001250:	4b46      	ldr	r3, [pc, #280]	; (800136c <MX_LTDC_Init+0x160>)
 8001252:	2201      	movs	r2, #1
 8001254:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <MX_LTDC_Init+0x160>)
 8001258:	221d      	movs	r2, #29
 800125a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <MX_LTDC_Init+0x160>)
 800125e:	2203      	movs	r2, #3
 8001260:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <MX_LTDC_Init+0x160>)
 8001264:	f240 120d 	movw	r2, #269	; 0x10d
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800126a:	4b40      	ldr	r3, [pc, #256]	; (800136c <MX_LTDC_Init+0x160>)
 800126c:	f240 1243 	movw	r2, #323	; 0x143
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001272:	4b3e      	ldr	r3, [pc, #248]	; (800136c <MX_LTDC_Init+0x160>)
 8001274:	f240 1217 	movw	r2, #279	; 0x117
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <MX_LTDC_Init+0x160>)
 800127c:	f240 1247 	movw	r2, #327	; 0x147
 8001280:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <MX_LTDC_Init+0x160>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <MX_LTDC_Init+0x160>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <MX_LTDC_Init+0x160>)
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800129a:	4834      	ldr	r0, [pc, #208]	; (800136c <MX_LTDC_Init+0x160>)
 800129c:	f006 fe0e 	bl	8007ebc <HAL_LTDC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80012a6:	f000 fba9 	bl	80019fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 80012ae:	23f0      	movs	r3, #240	; 0xf0
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 80012b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012bc:	2302      	movs	r3, #2
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80012c0:	23ff      	movs	r3, #255	; 0xff
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80012c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012cc:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80012ce:	2307      	movs	r3, #7
 80012d0:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 80012d2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80012d6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 80012d8:	23f0      	movs	r3, #240	; 0xf0
 80012da:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 80012dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012e0:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	481b      	ldr	r0, [pc, #108]	; (800136c <MX_LTDC_Init+0x160>)
 80012fe:	f006 ff6f 	bl	80081e0 <HAL_LTDC_ConfigLayer>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001308:	f000 fb78 	bl	80019fc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001328:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800132a:	2305      	movs	r3, #5
 800132c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2201      	movs	r2, #1
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_LTDC_Init+0x160>)
 8001354:	f006 ff44 	bl	80081e0 <HAL_LTDC_ConfigLayer>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 800135e:	f000 fb4d 	bl	80019fc <Error_Handler>
  }

}
 8001362:	bf00      	nop
 8001364:	3768      	adds	r7, #104	; 0x68
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200004d0 	.word	0x200004d0
 8001370:	40016800 	.word	0x40016800

08001374 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	; 0x38
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7b      	ldr	r2, [pc, #492]	; (8001580 <HAL_LTDC_MspInit+0x20c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	f040 80f0 	bne.w	8001578 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
 800139c:	4b79      	ldr	r3, [pc, #484]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	4a78      	ldr	r2, [pc, #480]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013a6:	6453      	str	r3, [r2, #68]	; 0x44
 80013a8:	4b76      	ldr	r3, [pc, #472]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	4b72      	ldr	r3, [pc, #456]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a71      	ldr	r2, [pc, #452]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b6f      	ldr	r3, [pc, #444]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	4b6b      	ldr	r3, [pc, #428]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a6a      	ldr	r2, [pc, #424]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b68      	ldr	r3, [pc, #416]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	4b64      	ldr	r3, [pc, #400]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a63      	ldr	r2, [pc, #396]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b61      	ldr	r3, [pc, #388]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	4b5d      	ldr	r3, [pc, #372]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a5c      	ldr	r2, [pc, #368]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 8001412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <HAL_LTDC_MspInit+0x210>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800145c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800146e:	230e      	movs	r3, #14
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4843      	ldr	r0, [pc, #268]	; (8001588 <HAL_LTDC_MspInit+0x214>)
 800147a:	f003 fffb 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800147e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001490:	230e      	movs	r3, #14
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	483c      	ldr	r0, [pc, #240]	; (800158c <HAL_LTDC_MspInit+0x218>)
 800149c:	f003 ffea 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80014a0:	2303      	movs	r3, #3
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014b0:	2309      	movs	r3, #9
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4835      	ldr	r0, [pc, #212]	; (8001590 <HAL_LTDC_MspInit+0x21c>)
 80014bc:	f003 ffda 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80014c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d2:	230e      	movs	r3, #14
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	482c      	ldr	r0, [pc, #176]	; (8001590 <HAL_LTDC_MspInit+0x21c>)
 80014de:	f003 ffc9 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80014e2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014f4:	230e      	movs	r3, #14
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	4825      	ldr	r0, [pc, #148]	; (8001594 <HAL_LTDC_MspInit+0x220>)
 8001500:	f003 ffb8 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001504:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001516:	230e      	movs	r3, #14
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	481d      	ldr	r0, [pc, #116]	; (8001598 <HAL_LTDC_MspInit+0x224>)
 8001522:	f003 ffa7 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001526:	2348      	movs	r3, #72	; 0x48
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001536:	230e      	movs	r3, #14
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4816      	ldr	r0, [pc, #88]	; (800159c <HAL_LTDC_MspInit+0x228>)
 8001542:	f003 ff97 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001546:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001558:	2309      	movs	r3, #9
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <HAL_LTDC_MspInit+0x220>)
 8001564:	f003 ff86 	bl	8005474 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2105      	movs	r1, #5
 800156c:	2058      	movs	r0, #88	; 0x58
 800156e:	f003 f9e3 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001572:	2058      	movs	r0, #88	; 0x58
 8001574:	f003 f9fc 	bl	8004970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001578:	bf00      	nop
 800157a:	3738      	adds	r7, #56	; 0x38
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40016800 	.word	0x40016800
 8001584:	40023800 	.word	0x40023800
 8001588:	40021400 	.word	0x40021400
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40021800 	.word	0x40021800
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b0a3      	sub	sp, #140	; 0x8c
 80015a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a6:	f003 f8ab 	bl	8004700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015aa:	f000 f943 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ae:	f7ff fb4f 	bl	8000c50 <MX_GPIO_Init>
  MX_CRC_Init();
 80015b2:	f7ff f9c5 	bl	8000940 <MX_CRC_Init>
  MX_DMA2D_Init();
 80015b6:	f7ff f9f9 	bl	80009ac <MX_DMA2D_Init>
  MX_FMC_Init();
 80015ba:	f7ff fa51 	bl	8000a60 <MX_FMC_Init>
  MX_I2C3_Init();
 80015be:	f7ff fc57 	bl	8000e70 <MX_I2C3_Init>
  MX_LTDC_Init();
 80015c2:	f7ff fe23 	bl	800120c <MX_LTDC_Init>
  MX_SPI5_Init();
 80015c6:	f000 faa9 	bl	8001b1c <MX_SPI5_Init>
  MX_TIM1_Init();
 80015ca:	f000 fc5f 	bl	8001e8c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80015ce:	f000 fec3 	bl	8002358 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  int odswiezanie = 16;
 80015d2:	2310      	movs	r3, #16
 80015d4:	66bb      	str	r3, [r7, #104]	; 0x68
  BSP_LCD_Init();
 80015d6:	f001 ff11 	bl	80033fc <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80015da:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80015de:	2001      	movs	r0, #1
 80015e0:	f001 ff8e 	bl	8003500 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f001 ffef 	bl	80035c8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 80015ea:	488a      	ldr	r0, [pc, #552]	; (8001814 <main+0x274>)
 80015ec:	f002 f886 	bl	80036fc <BSP_LCD_Clear>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 80015f0:	2100      	movs	r1, #0
 80015f2:	2001      	movs	r0, #1
 80015f4:	f001 fff8 	bl	80035e8 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 80015f8:	4987      	ldr	r1, [pc, #540]	; (8001818 <main+0x278>)
 80015fa:	2000      	movs	r0, #0
 80015fc:	f001 ff80 	bl	8003500 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8001600:	2000      	movs	r0, #0
 8001602:	f001 ffe1 	bl	80035c8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001606:	4883      	ldr	r0, [pc, #524]	; (8001814 <main+0x274>)
 8001608:	f002 f878 	bl	80036fc <BSP_LCD_Clear>

  BSP_LCD_DisplayOn();
 800160c:	f002 fbc4 	bl	8003d98 <BSP_LCD_DisplayOn>

  Touchscreen_Calibration();
 8001610:	f000 fcae 	bl	8001f70 <Touchscreen_Calibration>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001614:	487f      	ldr	r0, [pc, #508]	; (8001814 <main+0x274>)
 8001616:	f002 f871 	bl	80036fc <BSP_LCD_Clear>


  menu_bbg();
 800161a:	f000 f98f 	bl	800193c <menu_bbg>
  Address=ADDR_FLASH_SECTOR_5;
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <main+0x27c>)
 8001620:	4a7f      	ldr	r2, [pc, #508]	; (8001820 <main+0x280>)
 8001622:	601a      	str	r2, [r3, #0]
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001624:	487b      	ldr	r0, [pc, #492]	; (8001814 <main+0x274>)
 8001626:	f002 f869 	bl	80036fc <BSP_LCD_Clear>

                        // Liczba klocków
  int klocek_szerokosc = BSP_LCD_GetXSize() / 12; // Klocki są szersze niż wyższe
 800162a:	f001 ff51 	bl	80034d0 <BSP_LCD_GetXSize>
 800162e:	4602      	mov	r2, r0
 8001630:	4b7c      	ldr	r3, [pc, #496]	; (8001824 <main+0x284>)
 8001632:	fba3 2302 	umull	r2, r3, r3, r2
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	667b      	str	r3, [r7, #100]	; 0x64
  int klocek_wysokosc = BSP_LCD_GetYSize() / 24; // Zakładamy 4 rzędy klocków
 800163a:	f001 ff55 	bl	80034e8 <BSP_LCD_GetYSize>
 800163e:	4602      	mov	r2, r0
 8001640:	4b78      	ldr	r3, [pc, #480]	; (8001824 <main+0x284>)
 8001642:	fba3 2302 	umull	r2, r3, r3, r2
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	663b      	str	r3, [r7, #96]	; 0x60
  int liczba_klockow = COLLUMNS_BBG*ROWS_BBG; // Liczba klocków
 800164a:	23b4      	movs	r3, #180	; 0xb4
 800164c:	65fb      	str	r3, [r7, #92]	; 0x5c

  Platforma *platforma = (Platforma *)malloc(sizeof(Platforma));
 800164e:	2018      	movs	r0, #24
 8001650:	f00b f9aa 	bl	800c9a8 <malloc>
 8001654:	4603      	mov	r3, r0
 8001656:	65bb      	str	r3, [r7, #88]	; 0x58
  Kulka *kulka = (Kulka *)malloc(sizeof(Kulka));
 8001658:	2018      	movs	r0, #24
 800165a:	f00b f9a5 	bl	800c9a8 <malloc>
 800165e:	4603      	mov	r3, r0
 8001660:	657b      	str	r3, [r7, #84]	; 0x54
  Klocek **klocki = (Klocek **)malloc(liczba_klockow * sizeof(Klocek *));
 8001662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4618      	mov	r0, r3
 8001668:	f00b f99e 	bl	800c9a8 <malloc>
 800166c:	4603      	mov	r3, r0
 800166e:	653b      	str	r3, [r7, #80]	; 0x50
  int licznik = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	677b      	str	r3, [r7, #116]	; 0x74

  for (int kk = 0; kk < COLLUMNS_BBG; kk++)
 8001674:	2300      	movs	r3, #0
 8001676:	673b      	str	r3, [r7, #112]	; 0x70
 8001678:	e04e      	b.n	8001718 <main+0x178>
  { // Zakładając 4 rzędy klocków
    for (int k = 0; k < ROWS_BBG; k++, licznik++)
 800167a:	2300      	movs	r3, #0
 800167c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800167e:	e045      	b.n	800170c <main+0x16c>
    { // 8 kolumn klocków
      klocki[licznik] = (Klocek *)malloc(sizeof(Klocek));
 8001680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001686:	18d4      	adds	r4, r2, r3
 8001688:	200c      	movs	r0, #12
 800168a:	f00b f98d 	bl	800c9a8 <malloc>
 800168e:	4603      	mov	r3, r0
 8001690:	6023      	str	r3, [r4, #0]
      uint32_t kolor_klocka = ((k % 2 == 0 && kk % 2 == 0) || (k % 2 == 1 && kk % 2 == 1)) ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 8001692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <main+0x106>
 800169c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00f      	beq.n	80016c6 <main+0x126>
 80016a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	bfb8      	it	lt
 80016b0:	425b      	neglt	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d109      	bne.n	80016ca <main+0x12a>
 80016b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	bfb8      	it	lt
 80016c0:	425b      	neglt	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <main+0x12a>
 80016c6:	4b58      	ldr	r3, [pc, #352]	; (8001828 <main+0x288>)
 80016c8:	e001      	b.n	80016ce <main+0x12e>
 80016ca:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80016ce:	61fb      	str	r3, [r7, #28]
      Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka, 1, 1);
 80016d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80016d6:	4413      	add	r3, r2
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016de:	fb02 f103 	mul.w	r1, r2, r3
 80016e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016e6:	fb02 f203 	mul.w	r2, r2, r3
 80016ea:	2301      	movs	r3, #1
 80016ec:	9303      	str	r3, [sp, #12]
 80016ee:	2301      	movs	r3, #1
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016fc:	f7ff fc88 	bl	8001010 <Klocek_init>
    for (int k = 0; k < ROWS_BBG; k++, licznik++)
 8001700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001702:	3301      	adds	r3, #1
 8001704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001708:	3301      	adds	r3, #1
 800170a:	677b      	str	r3, [r7, #116]	; 0x74
 800170c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800170e:	2b0b      	cmp	r3, #11
 8001710:	ddb6      	ble.n	8001680 <main+0xe0>
  for (int kk = 0; kk < COLLUMNS_BBG; kk++)
 8001712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001714:	3301      	adds	r3, #1
 8001716:	673b      	str	r3, [r7, #112]	; 0x70
 8001718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800171a:	2b0e      	cmp	r3, #14
 800171c:	ddad      	ble.n	800167a <main+0xda>
      //WriteRecord(klocki[licznik], Address + 12*licznik);
      //ReadRecord(klocki[licznik], Address + 12*licznik);
    }
  }

  int platforma_x = 50;
 800171e:	2332      	movs	r3, #50	; 0x32
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
  int platforma_y = BSP_LCD_GetYSize() - 20;
 8001722:	f001 fee1 	bl	80034e8 <BSP_LCD_GetYSize>
 8001726:	4603      	mov	r3, r0
 8001728:	3b14      	subs	r3, #20
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  int platforma_szerokosc = 80;
 800172c:	2350      	movs	r3, #80	; 0x50
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
  int platforma_wysokosc = 8;
 8001730:	2308      	movs	r3, #8
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
  int platforma_krok = 5;
 8001734:	2305      	movs	r3, #5
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t platforma_kolor = LCD_COLOR_WHITE;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 800173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800174e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001750:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001752:	f000 f959 	bl	8001a08 <Platforma_init>
  int kulka_pocz_x = 10 + (rand() % (BSP_LCD_GetXSize() - 20));
 8001756:	f00b f99d 	bl	800ca94 <rand>
 800175a:	4603      	mov	r3, r0
 800175c:	461c      	mov	r4, r3
 800175e:	f001 feb7 	bl	80034d0 <BSP_LCD_GetXSize>
 8001762:	4603      	mov	r3, r0
 8001764:	3b14      	subs	r3, #20
 8001766:	fbb4 f2f3 	udiv	r2, r4, r3
 800176a:	fb03 f302 	mul.w	r3, r3, r2
 800176e:	1ae3      	subs	r3, r4, r3
 8001770:	330a      	adds	r3, #10
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
  int kulka_pocz_y = platforma_y-10;
 8001774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001776:	3b0a      	subs	r3, #10
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  int kulka_r = 4;
 800177a:	2304      	movs	r3, #4
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int kulka_vx = 2;
 800177e:	2302      	movs	r3, #2
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  int kulka_vy = -2;
 8001782:	f06f 0301 	mvn.w	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t kulka_kolor = LCD_COLOR_WHITE;
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	623b      	str	r3, [r7, #32]

  Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800179e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80017a2:	f7ff fc78 	bl	8001096 <Kulka_init>

  BBG bbg;
  BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 80017a6:	f107 0008 	add.w	r0, r7, #8
 80017aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80017b4:	f7fe fe9c 	bl	80004f0 <BBG_init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (BBG_ruchKulki(&bbg) == 1)
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f85f 	bl	8000880 <BBG_ruchKulki>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d110      	bne.n	80017ea <main+0x24a>
    {
      BSP_LCD_SetFont(&Font20);
 80017c8:	4818      	ldr	r0, [pc, #96]	; (800182c <main+0x28c>)
 80017ca:	f001 ff7d 	bl	80036c8 <BSP_LCD_SetFont>
      BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 80017ce:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80017d2:	f001 ff5f 	bl	8003694 <BSP_LCD_SetBackColor>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80017d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80017da:	f001 ff43 	bl	8003664 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(0, 100, "Game Over", CENTER_MODE);
 80017de:	2301      	movs	r3, #1
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <main+0x290>)
 80017e2:	2164      	movs	r1, #100	; 0x64
 80017e4:	2000      	movs	r0, #0
 80017e6:	f001 fff5 	bl	80037d4 <BSP_LCD_DisplayStringAt>
      // return;
    }
    BBG_obsluga_zbicia_klocka(&bbg);
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feb8 	bl	8000564 <BBG_obsluga_zbicia_klocka>

    // 		Get touch state
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 80017f4:	463b      	mov	r3, r7
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fed0 	bl	800459c <BSP_TS_GetState>
    BBG_obsluzDotykEkranu(&bbg, TS_State);
 80017fc:	f107 0008 	add.w	r0, r7, #8
 8001800:	463b      	mov	r3, r7
 8001802:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001806:	f7fe ffc5 	bl	8000794 <BBG_obsluzDotykEkranu>
    HAL_Delay(odswiezanie);
 800180a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800180c:	4618      	mov	r0, r3
 800180e:	f002 ffb9 	bl	8004784 <HAL_Delay>
  {
 8001812:	e7d1      	b.n	80017b8 <main+0x218>
 8001814:	ffff0000 	.word	0xffff0000
 8001818:	d0130000 	.word	0xd0130000
 800181c:	2000057c 	.word	0x2000057c
 8001820:	08020000 	.word	0x08020000
 8001824:	aaaaaaab 	.word	0xaaaaaaab
 8001828:	ff0000ff 	.word	0xff0000ff
 800182c:	2000007c 	.word	0x2000007c
 8001830:	0800cb38 	.word	0x0800cb38

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0a0      	sub	sp, #128	; 0x80
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f00b f8c3 	bl	800c9ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2230      	movs	r2, #48	; 0x30
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f00b f8b4 	bl	800c9ce <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <SystemClock_Config+0x100>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <SystemClock_Config+0x100>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <SystemClock_Config+0x100>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <SystemClock_Config+0x104>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800188e:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <SystemClock_Config+0x104>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <SystemClock_Config+0x104>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a2:	2301      	movs	r3, #1
 80018a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ac:	2302      	movs	r3, #2
 80018ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018b6:	2304      	movs	r3, #4
 80018b8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018ba:	2348      	movs	r3, #72	; 0x48
 80018bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018be:	2302      	movs	r3, #2
 80018c0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018c2:	2303      	movs	r3, #3
 80018c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ca:	4618      	mov	r0, r3
 80018cc:	f006 fe88 	bl	80085e0 <HAL_RCC_OscConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018d6:	f000 f891 	bl	80019fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018da:	230f      	movs	r3, #15
 80018dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018de:	2302      	movs	r3, #2
 80018e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018f4:	2102      	movs	r1, #2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f007 f8e2 	bl	8008ac0 <HAL_RCC_ClockConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001902:	f000 f87b 	bl	80019fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001906:	2308      	movs	r3, #8
 8001908:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800190a:	2332      	movs	r3, #50	; 0x32
 800190c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800190e:	2302      	movs	r3, #2
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001912:	2300      	movs	r3, #0
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4618      	mov	r0, r3
 800191c:	f007 faf4 	bl	8008f08 <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001926:	f000 f869 	bl	80019fc <Error_Handler>
  }
}
 800192a:	bf00      	nop
 800192c:	3780      	adds	r7, #128	; 0x80
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40007000 	.word	0x40007000

0800193c <menu_bbg>:

/* USER CODE BEGIN 4 */

void menu_bbg()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001942:	481f      	ldr	r0, [pc, #124]	; (80019c0 <menu_bbg+0x84>)
 8001944:	f001 feda 	bl	80036fc <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font20);
 8001948:	481e      	ldr	r0, [pc, #120]	; (80019c4 <menu_bbg+0x88>)
 800194a:	f001 febd 	bl	80036c8 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 800194e:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001952:	f001 fe9f 	bl	8003694 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001956:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800195a:	f001 fe83 	bl	8003664 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, "BBG", CENTER_MODE);
 800195e:	f001 fdc3 	bl	80034e8 <BSP_LCD_GetYSize>
 8001962:	4603      	mov	r3, r0
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	b299      	uxth	r1, r3
 8001968:	2301      	movs	r3, #1
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <menu_bbg+0x8c>)
 800196c:	2000      	movs	r0, #0
 800196e:	f001 ff31 	bl	80037d4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8001972:	4816      	ldr	r0, [pc, #88]	; (80019cc <menu_bbg+0x90>)
 8001974:	f001 fea8 	bl	80036c8 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, "Touch screen to begin", CENTER_MODE);
 8001978:	f001 fdb6 	bl	80034e8 <BSP_LCD_GetYSize>
 800197c:	4603      	mov	r3, r0
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	b29b      	uxth	r3, r3
 8001982:	3314      	adds	r3, #20
 8001984:	b299      	uxth	r1, r3
 8001986:	2301      	movs	r3, #1
 8001988:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <menu_bbg+0x94>)
 800198a:	2000      	movs	r0, #0
 800198c:	f001 ff22 	bl	80037d4 <BSP_LCD_DisplayStringAt>

  while (1)
  {
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 8001990:	463b      	mov	r3, r7
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fe02 	bl	800459c <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 8001998:	883b      	ldrh	r3, [r7, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f8      	beq.n	8001990 <menu_bbg+0x54>
    {
      BSP_LCD_SetFont(&Font20);
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <menu_bbg+0x88>)
 80019a0:	f001 fe92 	bl	80036c8 <BSP_LCD_SetFont>

      BSP_LCD_DisplayStringAt(0, 20, "TOUCHED!", CENTER_MODE);
 80019a4:	2301      	movs	r3, #1
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <menu_bbg+0x98>)
 80019a8:	2114      	movs	r1, #20
 80019aa:	2000      	movs	r0, #0
 80019ac:	f001 ff12 	bl	80037d4 <BSP_LCD_DisplayStringAt>
      HAL_Delay(500);
 80019b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b4:	f002 fee6 	bl	8004784 <HAL_Delay>
      return;
 80019b8:	bf00      	nop
    }
  }
}
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	ffff0000 	.word	0xffff0000
 80019c4:	2000007c 	.word	0x2000007c
 80019c8:	0800cb44 	.word	0x0800cb44
 80019cc:	20000084 	.word	0x20000084
 80019d0:	0800cb48 	.word	0x0800cb48
 80019d4:	0800cb60 	.word	0x0800cb60

080019d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ea:	f002 feab 	bl	8004744 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40001000 	.word	0x40001000

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	  BSP_LED_On(LED4);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f001 f96b 	bl	8002cdc <BSP_LED_On>
	  while(1)
 8001a06:	e7fe      	b.n	8001a06 <Error_Handler+0xa>

08001a08 <Platforma_init>:
#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma *platforma, int x, int y, int w, int h, int k, uint32_t kol)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	615a      	str	r2, [r3, #20]
    rysuj_platforme(platforma);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f820 	bl	8001a80 <rysuj_platforme>
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <zmaz_platforme>:

void zmaz_platforme(Platforma *platforma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <zmaz_platforme+0x34>)
 8001a52:	f001 fe07 	bl	8003664 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b298      	uxth	r0, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	b299      	uxth	r1, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f002 f899 	bl	8003ba4 <BSP_LCD_FillRect>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	ffff0000 	.word	0xffff0000

08001a80 <rysuj_platforme>:

void rysuj_platforme(Platforma *platforma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(platforma->kolor);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fde9 	bl	8003664 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b298      	uxth	r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	b299      	uxth	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f002 f87b 	bl	8003ba4 <BSP_LCD_FillRect>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <Platforma_przesunDo>:

void Platforma_przesunDo(Platforma *platforma, int x)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
    platforma->polozenie_x = x;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <Platforma_getPolozenieX>:
    platforma->polozenie_x += platforma->krok;
}

// Pobranie położenia X platformy
int Platforma_getPolozenieX(const Platforma *platforma)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
    return platforma->polozenie_x;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <Platforma_getSzerokosc>:
    return platforma->polozenie_y;
}

// Pobranie szerokości platformy
int Platforma_getSzerokosc(const Platforma *platforma)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
    return platforma->szerokosc;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <Platforma_getKrok>:
{
    return platforma->wysokosc;
}

int Platforma_getKrok(const Platforma *platforma)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
    return platforma->krok;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b22:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <MX_SPI5_Init+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b2c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b50:	2218      	movs	r2, #24
 8001b52:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b68:	220a      	movs	r2, #10
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_SPI5_Init+0x64>)
 8001b6e:	f007 fc08 	bl	8009382 <HAL_SPI_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001b78:	f7ff ff40 	bl	80019fc <Error_Handler>
  }

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000580 	.word	0x20000580
 8001b84:	40015000 	.word	0x40015000

08001b88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_SPI_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12c      	bne.n	8001c04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bd0:	f043 0320 	orr.w	r3, r3, #32
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001be2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <HAL_SPI_MspInit+0x8c>)
 8001c00:	f003 fc38 	bl	8005474 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40015000 	.word	0x40015000
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40021400 	.word	0x40021400

08001c18 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_SPI_MspDeInit+0x30>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10a      	bne.n	8001c40 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_SPI_MspDeInit+0x34>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_SPI_MspDeInit+0x34>)
 8001c30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001c36:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <HAL_SPI_MspDeInit+0x38>)
 8001c3c:	f003 fdc4 	bl	80057c8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40015000 	.word	0x40015000
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40021400 	.word	0x40021400

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_MspInit+0x54>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	210f      	movs	r1, #15
 8001c96:	f06f 0001 	mvn.w	r0, #1
 8001c9a:	f002 fe4d 	bl	8004938 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2036      	movs	r0, #54	; 0x36
 8001cc2:	f002 fe39 	bl	8004938 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cc6:	2036      	movs	r0, #54	; 0x36
 8001cc8:	f002 fe52 	bl	8004970 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_InitTick+0xa4>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <HAL_InitTick+0xa4>)
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_InitTick+0xa4>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ce8:	f107 0210 	add.w	r2, r7, #16
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f007 f8d6 	bl	8008ea4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cf8:	f007 f8ac 	bl	8008e54 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9b      	lsrs	r3, r3, #18
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_InitTick+0xac>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <HAL_InitTick+0xb0>)
 8001d14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_InitTick+0xac>)
 8001d18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <HAL_InitTick+0xac>)
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_InitTick+0xac>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_InitTick+0xac>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d30:	4809      	ldr	r0, [pc, #36]	; (8001d58 <HAL_InitTick+0xac>)
 8001d32:	f008 f8b1 	bl	8009e98 <HAL_TIM_Base_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d3c:	4806      	ldr	r0, [pc, #24]	; (8001d58 <HAL_InitTick+0xac>)
 8001d3e:	f008 f8d6 	bl	8009eee <HAL_TIM_Base_Start_IT>
 8001d42:	4603      	mov	r3, r0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3730      	adds	r7, #48	; 0x30
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	200005d8 	.word	0x200005d8
 8001d5c:	40001000 	.word	0x40001000

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_Clear(0xFF000000); // czarny
 8001d72:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001d76:	f001 fcc1 	bl	80036fc <BSP_LCD_Clear>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0xc>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  BSP_LCD_Clear(0xFFFFFF00); // zolty
 8001d80:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001d84:	f001 fcba 	bl	80036fc <BSP_LCD_Clear>
 8001d88:	e7fa      	b.n	8001d80 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM6_DAC_IRQHandler+0x10>)
 8001daa:	f008 f8c4 	bl	8009f36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200005d8 	.word	0x200005d8

08001db8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <OTG_HS_IRQHandler+0x10>)
 8001dbe:	f003 fe26 	bl	8005a0e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000079c 	.word	0x2000079c

08001dcc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <LTDC_IRQHandler+0x10>)
 8001dd2:	f006 f943 	bl	800805c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200004d0 	.word	0x200004d0

08001de0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <DMA2D_IRQHandler+0x10>)
 8001de6:	f003 f906 	bl	8004ff6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000408 	.word	0x20000408

08001df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <_sbrk+0x5c>)
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <_sbrk+0x60>)
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <_sbrk+0x64>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <_sbrk+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d207      	bcs.n	8001e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e24:	f00a fd96 	bl	800c954 <__errno>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e009      	b.n	8001e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <_sbrk+0x64>)
 8001e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e46:	68fb      	ldr	r3, [r7, #12]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20030000 	.word	0x20030000
 8001e54:	00000400 	.word	0x00000400
 8001e58:	20000128 	.word	0x20000128
 8001e5c:	20000a68 	.word	0x20000a68

08001e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <SystemInit+0x28>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6a:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <SystemInit+0x28>)
 8001e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SystemInit+0x28>)
 8001e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e7a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <MX_TIM1_Init+0x9c>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ed4:	4813      	ldr	r0, [pc, #76]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001ed6:	f007 ffdf 	bl	8009e98 <HAL_TIM_Base_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ee0:	f7ff fd8c 	bl	80019fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480c      	ldr	r0, [pc, #48]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001ef2:	f008 f928 	bl	800a146 <HAL_TIM_ConfigClockSource>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001efc:	f7ff fd7e 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f08:	463b      	mov	r3, r7
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_TIM1_Init+0x98>)
 8001f0e:	f008 fb33 	bl	800a578 <HAL_TIMEx_MasterConfigSynchronization>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f18:	f7ff fd70 	bl	80019fc <Error_Handler>
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000618 	.word	0x20000618
 8001f28:	40010000 	.word	0x40010000

08001f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <HAL_TIM_Base_MspInit+0x3c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_TIM_Base_MspInit+0x40>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_TIM_Base_MspInit+0x40>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <HAL_TIM_Base_MspInit+0x40>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40023800 	.word	0x40023800

08001f70 <Touchscreen_Calibration>:
 * @brief  Performs the TS calibration
 * @param  None
 * @retval None
 */
void Touchscreen_Calibration(void)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	71fb      	strb	r3, [r7, #7]

  TouchscreenCalibration_SetHint();
 8001f7e:	f000 f8f1 	bl	8002164 <TouchscreenCalibration_SetHint>

  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001f82:	f001 faa5 	bl	80034d0 <BSP_LCD_GetXSize>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b29c      	uxth	r4, r3
 8001f8a:	f001 faad 	bl	80034e8 <BSP_LCD_GetYSize>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4619      	mov	r1, r3
 8001f94:	4620      	mov	r0, r4
 8001f96:	f002 fac7 	bl	8004528 <BSP_TS_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71bb      	strb	r3, [r7, #6]

  if (status != TS_OK)
 8001f9e:	79bb      	ldrb	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01c      	beq.n	8001fde <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f001 fb74 	bl	8003694 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001fac:	4861      	ldr	r0, [pc, #388]	; (8002134 <Touchscreen_Calibration+0x1c4>)
 8001fae:	f001 fb59 	bl	8003664 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 8001fb2:	f001 fa99 	bl	80034e8 <BSP_LCD_GetYSize>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b5f      	subs	r3, #95	; 0x5f
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <Touchscreen_Calibration+0x1c8>)
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f001 fc06 	bl	80037d4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 8001fc8:	f001 fa8e 	bl	80034e8 <BSP_LCD_GetYSize>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b50      	subs	r3, #80	; 0x50
 8001fd2:	b299      	uxth	r1, r3
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	4a59      	ldr	r2, [pc, #356]	; (800213c <Touchscreen_Calibration+0x1cc>)
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f001 fbfb 	bl	80037d4 <BSP_LCD_DisplayStringAt>
  }

  while (1)
  {
    if (status == TS_OK)
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 80a0 	bne.w	8002126 <Touchscreen_Calibration+0x1b6>
    {
      aLogX[0] = 15;
 8001fe6:	4b56      	ldr	r3, [pc, #344]	; (8002140 <Touchscreen_Calibration+0x1d0>)
 8001fe8:	220f      	movs	r2, #15
 8001fea:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 8001fec:	4b55      	ldr	r3, [pc, #340]	; (8002144 <Touchscreen_Calibration+0x1d4>)
 8001fee:	220f      	movs	r2, #15
 8001ff0:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 8001ff2:	f001 fa6d 	bl	80034d0 <BSP_LCD_GetXSize>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b0f      	subs	r3, #15
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <Touchscreen_Calibration+0x1d0>)
 8002002:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8002004:	f001 fa70 	bl	80034e8 <BSP_LCD_GetYSize>
 8002008:	4603      	mov	r3, r0
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b0f      	subs	r3, #15
 800200e:	b29b      	uxth	r3, r3
 8002010:	b21a      	sxth	r2, r3
 8002012:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <Touchscreen_Calibration+0x1d4>)
 8002014:	805a      	strh	r2, [r3, #2]

      for (i = 0; i < 2; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	e015      	b.n	8002048 <Touchscreen_Calibration+0xd8>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4a48      	ldr	r2, [pc, #288]	; (8002140 <Touchscreen_Calibration+0x1d0>)
 8002020:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	4a47      	ldr	r2, [pc, #284]	; (8002144 <Touchscreen_Calibration+0x1d4>)
 8002028:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4a45      	ldr	r2, [pc, #276]	; (8002148 <Touchscreen_Calibration+0x1d8>)
 8002032:	189c      	adds	r4, r3, r2
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4a44      	ldr	r2, [pc, #272]	; (800214c <Touchscreen_Calibration+0x1dc>)
 800203a:	4413      	add	r3, r2
 800203c:	4622      	mov	r2, r4
 800203e:	f000 f8d1 	bl	80021e4 <GetPhysValues>
      for (i = 0; i < 2; i++)
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	3301      	adds	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d9e6      	bls.n	800201c <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * (aLogX[1] - aLogX[0])) / (aPhysX[1] - aPhysX[0]);
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <Touchscreen_Calibration+0x1d0>)
 8002050:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002054:	461a      	mov	r2, r3
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <Touchscreen_Calibration+0x1d0>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002062:	fb02 f203 	mul.w	r2, r2, r3
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <Touchscreen_Calibration+0x1d8>)
 8002068:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800206c:	4619      	mov	r1, r3
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <Touchscreen_Calibration+0x1d8>)
 8002070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002074:	1acb      	subs	r3, r1, r3
 8002076:	fb92 f3f3 	sdiv	r3, r2, r3
 800207a:	b21a      	sxth	r2, r3
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <Touchscreen_Calibration+0x1e0>)
 800207e:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0];
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <Touchscreen_Calibration+0x1d0>)
 8002082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	0152      	lsls	r2, r2, #5
 800208c:	1ad2      	subs	r2, r2, r3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <Touchscreen_Calibration+0x1d8>)
 8002098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209c:	b299      	uxth	r1, r3
 800209e:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <Touchscreen_Calibration+0x1e0>)
 80020a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	fb11 f303 	smulbb	r3, r1, r3
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b21a      	sxth	r2, r3
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <Touchscreen_Calibration+0x1e4>)
 80020b4:	801a      	strh	r2, [r3, #0]

      A2 = (1000 * (aLogY[1] - aLogY[0])) / (aPhysY[1] - aPhysY[0]);
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <Touchscreen_Calibration+0x1d4>)
 80020b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <Touchscreen_Calibration+0x1d4>)
 80020c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ca:	fb02 f203 	mul.w	r2, r2, r3
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <Touchscreen_Calibration+0x1dc>)
 80020d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <Touchscreen_Calibration+0x1dc>)
 80020d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020dc:	1acb      	subs	r3, r1, r3
 80020de:	fb92 f3f3 	sdiv	r3, r2, r3
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <Touchscreen_Calibration+0x1e8>)
 80020e6:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0];
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <Touchscreen_Calibration+0x1d4>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	0152      	lsls	r2, r2, #5
 80020f4:	1ad2      	subs	r2, r2, r3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <Touchscreen_Calibration+0x1dc>)
 8002100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002104:	b299      	uxth	r1, r3
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <Touchscreen_Calibration+0x1e8>)
 8002108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210c:	b29b      	uxth	r3, r3
 800210e:	fb11 f303 	smulbb	r3, r1, r3
 8002112:	b29b      	uxth	r3, r3
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b29b      	uxth	r3, r3
 8002118:	b21a      	sxth	r2, r3
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <Touchscreen_Calibration+0x1ec>)
 800211c:	801a      	strh	r2, [r3, #0]

      Calibration_Done = 1;
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <Touchscreen_Calibration+0x1f0>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
      return;
 8002124:	e003      	b.n	800212e <Touchscreen_Calibration+0x1be>
    }

    HAL_Delay(5);
 8002126:	2005      	movs	r0, #5
 8002128:	f002 fb2c 	bl	8004784 <HAL_Delay>
    if (status == TS_OK)
 800212c:	e757      	b.n	8001fde <Touchscreen_Calibration+0x6e>
  }
}
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bd90      	pop	{r4, r7, pc}
 8002134:	ffff0000 	.word	0xffff0000
 8002138:	0800cb6c 	.word	0x0800cb6c
 800213c:	0800cb74 	.word	0x0800cb74
 8002140:	20000148 	.word	0x20000148
 8002144:	2000014c 	.word	0x2000014c
 8002148:	20000140 	.word	0x20000140
 800214c:	20000144 	.word	0x20000144
 8002150:	20000136 	.word	0x20000136
 8002154:	2000013a 	.word	0x2000013a
 8002158:	20000138 	.word	0x20000138
 800215c:	2000013c 	.word	0x2000013c
 8002160:	20000134 	.word	0x20000134

08002164 <TouchscreenCalibration_SetHint>:
 * @brief  Display calibration hint
 * @param  None
 * @retval None
 */
static void TouchscreenCalibration_SetHint(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f001 fac6 	bl	80036fc <BSP_LCD_Clear>

  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002170:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002174:	f001 fa76 	bl	8003664 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f001 fa8a 	bl	8003694 <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 8002180:	4814      	ldr	r0, [pc, #80]	; (80021d4 <TouchscreenCalibration_SetHint+0x70>)
 8002182:	f001 faa1 	bl	80036c8 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 27, (uint8_t *)"Before using the Touchscreen", CENTER_MODE);
 8002186:	f001 f9af 	bl	80034e8 <BSP_LCD_GetYSize>
 800218a:	4603      	mov	r3, r0
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b1b      	subs	r3, #27
 8002192:	b299      	uxth	r1, r3
 8002194:	2301      	movs	r3, #1
 8002196:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <TouchscreenCalibration_SetHint+0x74>)
 8002198:	2000      	movs	r0, #0
 800219a:	f001 fb1b 	bl	80037d4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 12, (uint8_t *)"you need to calibrate it.", CENTER_MODE);
 800219e:	f001 f9a3 	bl	80034e8 <BSP_LCD_GetYSize>
 80021a2:	4603      	mov	r3, r0
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b0c      	subs	r3, #12
 80021aa:	b299      	uxth	r1, r3
 80021ac:	2301      	movs	r3, #1
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <TouchscreenCalibration_SetHint+0x78>)
 80021b0:	2000      	movs	r0, #0
 80021b2:	f001 fb0f 	bl	80037d4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 3, (uint8_t *)"Press on the black circles", CENTER_MODE);
 80021b6:	f001 f997 	bl	80034e8 <BSP_LCD_GetYSize>
 80021ba:	4603      	mov	r3, r0
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3303      	adds	r3, #3
 80021c2:	b299      	uxth	r1, r3
 80021c4:	2301      	movs	r3, #1
 80021c6:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <TouchscreenCalibration_SetHint+0x7c>)
 80021c8:	2000      	movs	r0, #0
 80021ca:	f001 fb03 	bl	80037d4 <BSP_LCD_DisplayStringAt>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000008c 	.word	0x2000008c
 80021d8:	0800cb98 	.word	0x0800cb98
 80021dc:	0800cbb8 	.word	0x0800cbb8
 80021e0:	0800cbd4 	.word	0x0800cbd4

080021e4 <GetPhysValues>:
 * @param  pPhysX : Physical X position
 * @param  pPhysY : Physical Y position
 * @retval None
 */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t *pPhysX, int16_t *pPhysY)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60ba      	str	r2, [r7, #8]
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4603      	mov	r3, r0
 80021f0:	81fb      	strh	r3, [r7, #14]
 80021f2:	460b      	mov	r3, r1
 80021f4:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80021f6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80021fa:	f001 fa33 	bl	8003664 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	89b9      	ldrh	r1, [r7, #12]
 8002202:	2205      	movs	r2, #5
 8002204:	4618      	mov	r0, r3
 8002206:	f001 fd27 	bl	8003c58 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800220a:	f04f 30ff 	mov.w	r0, #4294967295
 800220e:	f001 fa29 	bl	8003664 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 8002212:	89fb      	ldrh	r3, [r7, #14]
 8002214:	89b9      	ldrh	r1, [r7, #12]
 8002216:	2202      	movs	r2, #2
 8002218:	4618      	mov	r0, r3
 800221a:	f001 fd1d 	bl	8003c58 <BSP_LCD_FillCircle>

  /* Wait until touch is pressed */
  WaitForPressedState(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f000 f820 	bl	8002264 <WaitForPressedState>

  BSP_TS_GetState(&TS_State);
 8002224:	480e      	ldr	r0, [pc, #56]	; (8002260 <GetPhysValues+0x7c>)
 8002226:	f002 f9b9 	bl	800459c <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <GetPhysValues+0x7c>)
 800222c:	885b      	ldrh	r3, [r3, #2]
 800222e:	b21a      	sxth	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y;
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <GetPhysValues+0x7c>)
 8002236:	889b      	ldrh	r3, [r3, #4]
 8002238:	b21a      	sxth	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	801a      	strh	r2, [r3, #0]

  /* Wait until touch is released */
  WaitForPressedState(0);
 800223e:	2000      	movs	r0, #0
 8002240:	f000 f810 	bl	8002264 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f001 fa0c 	bl	8003664 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 800224c:	89fb      	ldrh	r3, [r7, #14]
 800224e:	89b9      	ldrh	r1, [r7, #12]
 8002250:	2205      	movs	r2, #5
 8002252:	4618      	mov	r0, r3
 8002254:	f001 fd00 	bl	8003c58 <BSP_LCD_FillCircle>
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000012c 	.word	0x2000012c

08002264 <WaitForPressedState>:
 * @brief  Wait For Pressed State
 * @param  Pressed: Pressed State
 * @retval None
 */
static void WaitForPressedState(uint8_t Pressed)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef State;

  do
  {
    BSP_TS_GetState(&State);
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4618      	mov	r0, r3
 8002274:	f002 f992 	bl	800459c <BSP_TS_GetState>
    HAL_Delay(10);
 8002278:	200a      	movs	r0, #10
 800227a:	f002 fa83 	bl	8004784 <HAL_Delay>
    if (State.TouchDetected == Pressed)
 800227e:	89ba      	ldrh	r2, [r7, #12]
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	b29b      	uxth	r3, r3
 8002284:	429a      	cmp	r2, r3
 8002286:	d1f2      	bne.n	800226e <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 8002288:	f002 fa70 	bl	800476c <HAL_GetTick>
 800228c:	4603      	mov	r3, r0
 800228e:	82fb      	strh	r3, [r7, #22]
      do
      {
        BSP_TS_GetState(&State);
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	4618      	mov	r0, r3
 8002296:	f002 f981 	bl	800459c <BSP_TS_GetState>
        HAL_Delay(10);
 800229a:	200a      	movs	r0, #10
 800229c:	f002 fa72 	bl	8004784 <HAL_Delay>
        if (State.TouchDetected != Pressed)
 80022a0:	89ba      	ldrh	r2, [r7, #12]
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d108      	bne.n	80022bc <WaitForPressedState+0x58>
        {
          break;
        }
        else if ((HAL_GetTick() - 100) > TimeStart)
 80022aa:	f002 fa5f 	bl	800476c <HAL_GetTick>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80022b4:	8afb      	ldrh	r3, [r7, #22]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d802      	bhi.n	80022c0 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);
 80022ba:	e7e9      	b.n	8002290 <WaitForPressedState+0x2c>
          break;
 80022bc:	bf00      	nop
    BSP_TS_GetState(&State);
 80022be:	e7d6      	b.n	800226e <WaitForPressedState+0xa>
        {
          return;
 80022c0:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <Calibration_GetX>:
 * @brief  Calibrate X position
 * @param  x: X position
 * @retval calibrated x
 */
uint16_t Calibration_GetX(uint16_t x)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
  return (((A1 * x) + B1) / 1000);
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <Calibration_GetX+0x3c>)
 80022d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d8:	461a      	mov	r2, r3
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	fb03 f302 	mul.w	r3, r3, r2
 80022e0:	4a09      	ldr	r2, [pc, #36]	; (8002308 <Calibration_GetX+0x40>)
 80022e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <Calibration_GetX+0x44>)
 80022ea:	fb82 1203 	smull	r1, r2, r2, r3
 80022ee:	1192      	asrs	r2, r2, #6
 80022f0:	17db      	asrs	r3, r3, #31
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	b29b      	uxth	r3, r3
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000136 	.word	0x20000136
 8002308:	2000013a 	.word	0x2000013a
 800230c:	10624dd3 	.word	0x10624dd3

08002310 <Calibration_GetY>:
 * @brief  Calibrate Y position
 * @param  y: Y position
 * @retval calibrated y
 */
uint16_t Calibration_GetY(uint16_t y)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  return (((A2 * y) + B2) / 1000);
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <Calibration_GetY+0x3c>)
 800231c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002320:	461a      	mov	r2, r3
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	fb03 f302 	mul.w	r3, r3, r2
 8002328:	4a09      	ldr	r2, [pc, #36]	; (8002350 <Calibration_GetY+0x40>)
 800232a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800232e:	4413      	add	r3, r2
 8002330:	4a08      	ldr	r2, [pc, #32]	; (8002354 <Calibration_GetY+0x44>)
 8002332:	fb82 1203 	smull	r1, r2, r2, r3
 8002336:	1192      	asrs	r2, r2, #6
 8002338:	17db      	asrs	r3, r3, #31
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	b29b      	uxth	r3, r3
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000138 	.word	0x20000138
 8002350:	2000013c 	.word	0x2000013c
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <MX_USART1_UART_Init+0x50>)
 8002360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 8002364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_USART1_UART_Init+0x4c>)
 8002390:	f008 f982 	bl	800a698 <HAL_UART_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800239a:	f7ff fb2f 	bl	80019fc <Error_Handler>
  }

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000658 	.word	0x20000658
 80023a8:	40011000 	.word	0x40011000

080023ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_UART_MspInit+0x84>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d12c      	bne.n	8002428 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b18      	ldr	r3, [pc, #96]	; (8002434 <HAL_UART_MspInit+0x88>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a17      	ldr	r2, [pc, #92]	; (8002434 <HAL_UART_MspInit+0x88>)
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_UART_MspInit+0x88>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_UART_MspInit+0x88>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_UART_MspInit+0x88>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_UART_MspInit+0x88>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002418:	2307      	movs	r3, #7
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <HAL_UART_MspInit+0x8c>)
 8002424:	f003 f826 	bl	8005474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40011000 	.word	0x40011000
 8002434:	40023800 	.word	0x40023800
 8002438:	40020000 	.word	0x40020000

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002442:	e003      	b.n	800244c <LoopCopyDataInit>

08002444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800244a:	3104      	adds	r1, #4

0800244c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002454:	d3f6      	bcc.n	8002444 <CopyDataInit>
  ldr  r2, =_sbss
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002458:	e002      	b.n	8002460 <LoopFillZerobss>

0800245a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800245a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800245c:	f842 3b04 	str.w	r3, [r2], #4

08002460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002464:	d3f9      	bcc.n	800245a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002466:	f7ff fcfb 	bl	8001e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246a:	f00a fa79 	bl	800c960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7ff f897 	bl	80015a0 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002474:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002478:	08010608 	.word	0x08010608
  ldr  r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002480:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 8002484:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 8002488:	20000a64 	.word	0x20000a64

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>

0800248e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002492:	f000 fe65 	bl	8003160 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002496:	20ca      	movs	r0, #202	; 0xca
 8002498:	f000 f95d 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800249c:	20c3      	movs	r0, #195	; 0xc3
 800249e:	f000 f967 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80024a2:	2008      	movs	r0, #8
 80024a4:	f000 f964 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80024a8:	2050      	movs	r0, #80	; 0x50
 80024aa:	f000 f961 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80024ae:	20cf      	movs	r0, #207	; 0xcf
 80024b0:	f000 f951 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 f95b 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80024ba:	20c1      	movs	r0, #193	; 0xc1
 80024bc:	f000 f958 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80024c0:	2030      	movs	r0, #48	; 0x30
 80024c2:	f000 f955 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80024c6:	20ed      	movs	r0, #237	; 0xed
 80024c8:	f000 f945 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80024cc:	2064      	movs	r0, #100	; 0x64
 80024ce:	f000 f94f 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80024d2:	2003      	movs	r0, #3
 80024d4:	f000 f94c 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80024d8:	2012      	movs	r0, #18
 80024da:	f000 f949 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80024de:	2081      	movs	r0, #129	; 0x81
 80024e0:	f000 f946 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80024e4:	20e8      	movs	r0, #232	; 0xe8
 80024e6:	f000 f936 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80024ea:	2085      	movs	r0, #133	; 0x85
 80024ec:	f000 f940 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f000 f93d 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80024f6:	2078      	movs	r0, #120	; 0x78
 80024f8:	f000 f93a 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80024fc:	20cb      	movs	r0, #203	; 0xcb
 80024fe:	f000 f92a 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002502:	2039      	movs	r0, #57	; 0x39
 8002504:	f000 f934 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002508:	202c      	movs	r0, #44	; 0x2c
 800250a:	f000 f931 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800250e:	2000      	movs	r0, #0
 8002510:	f000 f92e 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002514:	2034      	movs	r0, #52	; 0x34
 8002516:	f000 f92b 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800251a:	2002      	movs	r0, #2
 800251c:	f000 f928 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002520:	20f7      	movs	r0, #247	; 0xf7
 8002522:	f000 f918 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002526:	2020      	movs	r0, #32
 8002528:	f000 f922 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800252c:	20ea      	movs	r0, #234	; 0xea
 800252e:	f000 f912 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f91c 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f000 f919 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800253e:	20b1      	movs	r0, #177	; 0xb1
 8002540:	f000 f909 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f000 f913 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800254a:	201b      	movs	r0, #27
 800254c:	f000 f910 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002550:	20b6      	movs	r0, #182	; 0xb6
 8002552:	f000 f900 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002556:	200a      	movs	r0, #10
 8002558:	f000 f90a 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800255c:	20a2      	movs	r0, #162	; 0xa2
 800255e:	f000 f907 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002562:	20c0      	movs	r0, #192	; 0xc0
 8002564:	f000 f8f7 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002568:	2010      	movs	r0, #16
 800256a:	f000 f901 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800256e:	20c1      	movs	r0, #193	; 0xc1
 8002570:	f000 f8f1 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002574:	2010      	movs	r0, #16
 8002576:	f000 f8fb 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800257a:	20c5      	movs	r0, #197	; 0xc5
 800257c:	f000 f8eb 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002580:	2045      	movs	r0, #69	; 0x45
 8002582:	f000 f8f5 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002586:	2015      	movs	r0, #21
 8002588:	f000 f8f2 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800258c:	20c7      	movs	r0, #199	; 0xc7
 800258e:	f000 f8e2 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002592:	2090      	movs	r0, #144	; 0x90
 8002594:	f000 f8ec 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002598:	2036      	movs	r0, #54	; 0x36
 800259a:	f000 f8dc 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800259e:	20c8      	movs	r0, #200	; 0xc8
 80025a0:	f000 f8e6 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80025a4:	20f2      	movs	r0, #242	; 0xf2
 80025a6:	f000 f8d6 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f000 f8e0 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80025b0:	20b0      	movs	r0, #176	; 0xb0
 80025b2:	f000 f8d0 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80025b6:	20c2      	movs	r0, #194	; 0xc2
 80025b8:	f000 f8da 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80025bc:	20b6      	movs	r0, #182	; 0xb6
 80025be:	f000 f8ca 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80025c2:	200a      	movs	r0, #10
 80025c4:	f000 f8d4 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80025c8:	20a7      	movs	r0, #167	; 0xa7
 80025ca:	f000 f8d1 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80025ce:	2027      	movs	r0, #39	; 0x27
 80025d0:	f000 f8ce 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80025d4:	2004      	movs	r0, #4
 80025d6:	f000 f8cb 	bl	8002770 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80025da:	202a      	movs	r0, #42	; 0x2a
 80025dc:	f000 f8bb 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f000 f8c5 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f8c2 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f000 f8bf 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80025f2:	20ef      	movs	r0, #239	; 0xef
 80025f4:	f000 f8bc 	bl	8002770 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80025f8:	202b      	movs	r0, #43	; 0x2b
 80025fa:	f000 f8ac 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f000 f8b6 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002604:	2000      	movs	r0, #0
 8002606:	f000 f8b3 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800260a:	2001      	movs	r0, #1
 800260c:	f000 f8b0 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002610:	203f      	movs	r0, #63	; 0x3f
 8002612:	f000 f8ad 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002616:	20f6      	movs	r0, #246	; 0xf6
 8002618:	f000 f89d 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800261c:	2001      	movs	r0, #1
 800261e:	f000 f8a7 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f000 f8a4 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002628:	2006      	movs	r0, #6
 800262a:	f000 f8a1 	bl	8002770 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800262e:	202c      	movs	r0, #44	; 0x2c
 8002630:	f000 f891 	bl	8002756 <ili9341_WriteReg>
  LCD_Delay(200);
 8002634:	20c8      	movs	r0, #200	; 0xc8
 8002636:	f000 fe81 	bl	800333c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800263a:	2026      	movs	r0, #38	; 0x26
 800263c:	f000 f88b 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002640:	2001      	movs	r0, #1
 8002642:	f000 f895 	bl	8002770 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002646:	20e0      	movs	r0, #224	; 0xe0
 8002648:	f000 f885 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800264c:	200f      	movs	r0, #15
 800264e:	f000 f88f 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002652:	2029      	movs	r0, #41	; 0x29
 8002654:	f000 f88c 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002658:	2024      	movs	r0, #36	; 0x24
 800265a:	f000 f889 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800265e:	200c      	movs	r0, #12
 8002660:	f000 f886 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002664:	200e      	movs	r0, #14
 8002666:	f000 f883 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800266a:	2009      	movs	r0, #9
 800266c:	f000 f880 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002670:	204e      	movs	r0, #78	; 0x4e
 8002672:	f000 f87d 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002676:	2078      	movs	r0, #120	; 0x78
 8002678:	f000 f87a 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800267c:	203c      	movs	r0, #60	; 0x3c
 800267e:	f000 f877 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002682:	2009      	movs	r0, #9
 8002684:	f000 f874 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002688:	2013      	movs	r0, #19
 800268a:	f000 f871 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800268e:	2005      	movs	r0, #5
 8002690:	f000 f86e 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002694:	2017      	movs	r0, #23
 8002696:	f000 f86b 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800269a:	2011      	movs	r0, #17
 800269c:	f000 f868 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 f865 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80026a6:	20e1      	movs	r0, #225	; 0xe1
 80026a8:	f000 f855 	bl	8002756 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f000 f85f 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80026b2:	2016      	movs	r0, #22
 80026b4:	f000 f85c 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80026b8:	201b      	movs	r0, #27
 80026ba:	f000 f859 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80026be:	2004      	movs	r0, #4
 80026c0:	f000 f856 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80026c4:	2011      	movs	r0, #17
 80026c6:	f000 f853 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80026ca:	2007      	movs	r0, #7
 80026cc:	f000 f850 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80026d0:	2031      	movs	r0, #49	; 0x31
 80026d2:	f000 f84d 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80026d6:	2033      	movs	r0, #51	; 0x33
 80026d8:	f000 f84a 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80026dc:	2042      	movs	r0, #66	; 0x42
 80026de:	f000 f847 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80026e2:	2005      	movs	r0, #5
 80026e4:	f000 f844 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80026e8:	200c      	movs	r0, #12
 80026ea:	f000 f841 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80026ee:	200a      	movs	r0, #10
 80026f0:	f000 f83e 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80026f4:	2028      	movs	r0, #40	; 0x28
 80026f6:	f000 f83b 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80026fa:	202f      	movs	r0, #47	; 0x2f
 80026fc:	f000 f838 	bl	8002770 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002700:	200f      	movs	r0, #15
 8002702:	f000 f835 	bl	8002770 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002706:	2011      	movs	r0, #17
 8002708:	f000 f825 	bl	8002756 <ili9341_WriteReg>
  LCD_Delay(200);
 800270c:	20c8      	movs	r0, #200	; 0xc8
 800270e:	f000 fe15 	bl	800333c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002712:	2029      	movs	r0, #41	; 0x29
 8002714:	f000 f81f 	bl	8002756 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002718:	202c      	movs	r0, #44	; 0x2c
 800271a:	f000 f81c 	bl	8002756 <ili9341_WriteReg>
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}

08002722 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002726:	f000 fd1b 	bl	8003160 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800272a:	2103      	movs	r1, #3
 800272c:	20d3      	movs	r0, #211	; 0xd3
 800272e:	f000 f82c 	bl	800278a <ili9341_ReadData>
 8002732:	4603      	mov	r3, r0
 8002734:	b29b      	uxth	r3, r3
}
 8002736:	4618      	mov	r0, r3
 8002738:	bd80      	pop	{r7, pc}

0800273a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800273e:	2029      	movs	r0, #41	; 0x29
 8002740:	f000 f809 	bl	8002756 <ili9341_WriteReg>
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}

08002748 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800274c:	2028      	movs	r0, #40	; 0x28
 800274e:	f000 f802 	bl	8002756 <ili9341_WriteReg>
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}

08002756 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fd96 	bl	8003294 <LCD_IO_WriteReg>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fd67 	bl	8003250 <LCD_IO_WriteData>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	460a      	mov	r2, r1
 8002794:	80fb      	strh	r3, [r7, #6]
 8002796:	4613      	mov	r3, r2
 8002798:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800279a:	797a      	ldrb	r2, [r7, #5]
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fd99 	bl	80032d8 <LCD_IO_ReadData>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80027b4:	23f0      	movs	r3, #240	; 0xf0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80027c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fa59 	bl	8002c98 <stmpe811_GetInstance>
 80027e6:	4603      	mov	r3, r0
 80027e8:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2bff      	cmp	r3, #255	; 0xff
 80027ee:	d112      	bne.n	8002816 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f000 fa51 	bl	8002c98 <stmpe811_GetInstance>
 80027f6:	4603      	mov	r3, r0
 80027f8:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80027fa:	7bbb      	ldrb	r3, [r7, #14]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d80a      	bhi.n	8002816 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002800:	7bbb      	ldrb	r3, [r7, #14]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	b2d1      	uxtb	r1, r2
 8002806:	4a06      	ldr	r2, [pc, #24]	; (8002820 <stmpe811_Init+0x4c>)
 8002808:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800280a:	f000 fda2 	bl	8003352 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f807 	bl	8002824 <stmpe811_Reset>
    }
  }
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000150 	.word	0x20000150

08002824 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2202      	movs	r2, #2
 8002834:	2103      	movs	r1, #3
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fd97 	bl	800336a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800283c:	200a      	movs	r0, #10
 800283e:	f000 fdd1 	bl	80033e4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2200      	movs	r2, #0
 8002848:	2103      	movs	r1, #3
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fd8d 	bl	800336a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002850:	2002      	movs	r0, #2
 8002852:	f000 fdc7 	bl	80033e4 <IOE_Delay>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800285e:	b590      	push	{r4, r7, lr}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002868:	f000 fd73 	bl	8003352 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fd8c 	bl	8003390 <IOE_Read>
 8002878:	4603      	mov	r3, r0
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2101      	movs	r1, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fd83 	bl	8003390 <IOE_Read>
 800288a:	4603      	mov	r3, r0
 800288c:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800288e:	4323      	orrs	r3, r4
 8002890:	b21b      	sxth	r3, r3
 8002892:	b29b      	uxth	r3, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}

0800289c <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2109      	movs	r1, #9
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fd6d 	bl	8003390 <IOE_Read>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	2109      	movs	r1, #9
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fd4d 	bl	800336a <IOE_Write>
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2109      	movs	r1, #9
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fd4f 	bl	8003390 <IOE_Read>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	2109      	movs	r1, #9
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fd2f 	bl	800336a <IOE_Write>
    
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	460a      	mov	r2, r1
 800291e:	80fb      	strh	r3, [r7, #6]
 8002920:	4613      	mov	r3, r2
 8002922:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	210a      	movs	r1, #10
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fd2e 	bl	8003390 <IOE_Read>
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	797b      	ldrb	r3, [r7, #5]
 800293c:	4313      	orrs	r3, r2
 800293e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	210a      	movs	r1, #10
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fd0e 	bl	800336a <IOE_Write>
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	460a      	mov	r2, r1
 8002960:	80fb      	strh	r3, [r7, #6]
 8002962:	4613      	mov	r3, r2
 8002964:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	210a      	movs	r1, #10
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fd0d 	bl	8003390 <IOE_Read>
 8002976:	4603      	mov	r3, r0
 8002978:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800297a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800297e:	43db      	mvns	r3, r3
 8002980:	b25a      	sxtb	r2, r3
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4013      	ands	r3, r2
 8002988:	b25b      	sxtb	r3, r3
 800298a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	210a      	movs	r1, #10
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fce8 	bl	800336a <IOE_Write>
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	460a      	mov	r2, r1
 80029ac:	80fb      	strh	r3, [r7, #6]
 80029ae:	4613      	mov	r3, r2
 80029b0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	210b      	movs	r1, #11
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fce9 	bl	8003390 <IOE_Read>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	797b      	ldrb	r3, [r7, #5]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b2db      	uxtb	r3, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	460a      	mov	r2, r1
 80029da:	80fb      	strh	r3, [r7, #6]
 80029dc:	4613      	mov	r3, r2
 80029de:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	797a      	ldrb	r2, [r7, #5]
 80029e6:	210b      	movs	r1, #11
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fcbe 	bl	800336a <IOE_Write>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	6039      	str	r1, [r7, #0]
 8002a00:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2117      	movs	r1, #23
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fcbf 	bl	8003390 <IOE_Read>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	b25a      	sxtb	r2, r3
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	4013      	ands	r3, r2
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	2117      	movs	r1, #23
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fc9a 	bl	800336a <IOE_Write>
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fc9e 	bl	8003390 <IOE_Read>
 8002a54:	4603      	mov	r3, r0
 8002a56:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	f023 0304 	bic.w	r3, r3, #4
 8002a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	2104      	movs	r1, #4
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fc7e 	bl	800336a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	21f0      	movs	r1, #240	; 0xf0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ffbf 	bl	80029f6 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	2104      	movs	r1, #4
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fc6e 	bl	800336a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2249      	movs	r2, #73	; 0x49
 8002a94:	2120      	movs	r1, #32
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fc67 	bl	800336a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f000 fca1 	bl	80033e4 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2121      	movs	r1, #33	; 0x21
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fc5d 	bl	800336a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	229a      	movs	r2, #154	; 0x9a
 8002ab6:	2141      	movs	r1, #65	; 0x41
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fc56 	bl	800336a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	214a      	movs	r1, #74	; 0x4a
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fc4f 	bl	800336a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	214b      	movs	r1, #75	; 0x4b
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fc48 	bl	800336a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2200      	movs	r2, #0
 8002ae0:	214b      	movs	r1, #75	; 0x4b
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fc41 	bl	800336a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2201      	movs	r2, #1
 8002aee:	2156      	movs	r1, #86	; 0x56
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fc3a 	bl	800336a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2201      	movs	r2, #1
 8002afc:	2158      	movs	r1, #88	; 0x58
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fc33 	bl	800336a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fc2c 	bl	800336a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	22ff      	movs	r2, #255	; 0xff
 8002b18:	210b      	movs	r1, #11
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fc25 	bl	800336a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002b20:	2002      	movs	r0, #2
 8002b22:	f000 fc5f 	bl	80033e4 <IOE_Delay>
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fc24 	bl	8003390 <IOE_Read>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b80      	cmp	r3, #128	; 0x80
 8002b50:	bf0c      	ite	eq
 8002b52:	2301      	moveq	r3, #1
 8002b54:	2300      	movne	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002b5a:	7bbb      	ldrb	r3, [r7, #14]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	214c      	movs	r1, #76	; 0x4c
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fc12 	bl	8003390 <IOE_Read>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e00d      	b.n	8002b94 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	214b      	movs	r1, #75	; 0x4b
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fbf2 	bl	800336a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	214b      	movs	r1, #75	; 0x4b
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fbeb 	bl	800336a <IOE_Write>
  }
  
  return ret;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	b2d8      	uxtb	r0, r3
 8002bb0:	f107 0210 	add.w	r2, r7, #16
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	21d7      	movs	r1, #215	; 0xd7
 8002bb8:	f000 fbfd 	bl	80033b6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002bbc:	7c3b      	ldrb	r3, [r7, #16]
 8002bbe:	061a      	lsls	r2, r3, #24
 8002bc0:	7c7b      	ldrb	r3, [r7, #17]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	7cbb      	ldrb	r3, [r7, #18]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	7cfa      	ldrb	r2, [r7, #19]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	0d1b      	lsrs	r3, r3, #20
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002bec:	89fb      	ldrh	r3, [r7, #14]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	214b      	movs	r1, #75	; 0x4b
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fbb8 	bl	800336a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2200      	movs	r2, #0
 8002c00:	214b      	movs	r1, #75	; 0x4b
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fbb1 	bl	800336a <IOE_Write>
}
 8002c08:	bf00      	nop
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002c1a:	f000 fba0 	bl	800335e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	211f      	movs	r1, #31
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe76 	bl	8002914 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fe36 	bl	800289c <stmpe811_EnableGlobalIT>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fe47 	bl	80028d8 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	211f      	movs	r1, #31
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fe81 	bl	8002956 <stmpe811_DisableITSource>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	211f      	movs	r1, #31
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fe99 	bl	80029a2 <stmpe811_ReadGITStatus>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	211f      	movs	r1, #31
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fea1 	bl	80029d0 <stmpe811_ClearGlobalIT>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e00b      	b.n	8002cc4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <stmpe811_GetInstance+0x40>)
 8002cb0:	5cd3      	ldrb	r3, [r2, r3]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	88fa      	ldrh	r2, [r7, #6]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d101      	bne.n	8002cbe <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	e006      	b.n	8002ccc <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d9f0      	bls.n	8002cac <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002cca:	23ff      	movs	r3, #255	; 0xff
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	20000150 	.word	0x20000150

08002cdc <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <BSP_LED_On+0x2c>)
 8002cea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <BSP_LED_On+0x30>)
 8002cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f002 fe6f 	bl	80059dc <HAL_GPIO_WritePin>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000064 	.word	0x20000064
 8002d0c:	0800cc08 	.word	0x0800cc08

08002d10 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a33      	ldr	r2, [pc, #204]	; (8002dec <I2Cx_MspInit+0xdc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d15f      	bne.n	8002de2 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	4b32      	ldr	r3, [pc, #200]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a31      	ldr	r2, [pc, #196]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002d60:	2312      	movs	r3, #18
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	481f      	ldr	r0, [pc, #124]	; (8002df4 <I2Cx_MspInit+0xe4>)
 8002d78:	f002 fb7c 	bl	8005474 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d80:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	481b      	ldr	r0, [pc, #108]	; (8002df8 <I2Cx_MspInit+0xe8>)
 8002d8a:	f002 fb73 	bl	8005474 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002db4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <I2Cx_MspInit+0xe0>)
 8002dbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dc0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	2048      	movs	r0, #72	; 0x48
 8002dc8:	f001 fdb6 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002dcc:	2048      	movs	r0, #72	; 0x48
 8002dce:	f001 fdcf 	bl	8004970 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	210f      	movs	r1, #15
 8002dd6:	2049      	movs	r0, #73	; 0x49
 8002dd8:	f001 fdae 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002ddc:	2049      	movs	r0, #73	; 0x49
 8002dde:	f001 fdc7 	bl	8004970 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40005c00 	.word	0x40005c00
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020800 	.word	0x40020800

08002dfc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002e00:	4814      	ldr	r0, [pc, #80]	; (8002e54 <I2Cx_Init+0x58>)
 8002e02:	f004 fc77 	bl	80076f4 <HAL_I2C_GetState>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d121      	bne.n	8002e50 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <I2Cx_Init+0x58>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <I2Cx_Init+0x5c>)
 8002e10:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <I2Cx_Init+0x58>)
 8002e14:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <I2Cx_Init+0x60>)
 8002e16:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <I2Cx_Init+0x58>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <I2Cx_Init+0x58>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <I2Cx_Init+0x58>)
 8002e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e2a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <I2Cx_Init+0x58>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <I2Cx_Init+0x58>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <I2Cx_Init+0x58>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <I2Cx_Init+0x58>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002e44:	4803      	ldr	r0, [pc, #12]	; (8002e54 <I2Cx_Init+0x58>)
 8002e46:	f7ff ff63 	bl	8002d10 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002e4a:	4802      	ldr	r0, [pc, #8]	; (8002e54 <I2Cx_Init+0x58>)
 8002e4c:	f003 ffca 	bl	8006de4 <HAL_I2C_Init>
  }
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000698 	.word	0x20000698
 8002e58:	40005c00 	.word	0x40005c00
 8002e5c:	000186a0 	.word	0x000186a0

08002e60 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <I2Cx_ITConfig+0x58>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <I2Cx_ITConfig+0x58>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <I2Cx_ITConfig+0x58>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <I2Cx_ITConfig+0x5c>)
 8002e92:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	4619      	mov	r1, r3
 8002e98:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <I2Cx_ITConfig+0x60>)
 8002e9a:	f002 faeb 	bl	8005474 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	210f      	movs	r1, #15
 8002ea2:	2028      	movs	r0, #40	; 0x28
 8002ea4:	f001 fd48 	bl	8004938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002ea8:	2028      	movs	r0, #40	; 0x28
 8002eaa:	f001 fd61 	bl	8004970 <HAL_NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	10210000 	.word	0x10210000
 8002ec0:	40020000 	.word	0x40020000

08002ec4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af04      	add	r7, sp, #16
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	71bb      	strb	r3, [r7, #6]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	b299      	uxth	r1, r3
 8002ede:	79bb      	ldrb	r3, [r7, #6]
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <I2Cx_WriteData+0x4c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	2301      	movs	r3, #1
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	1d7b      	adds	r3, r7, #5
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4808      	ldr	r0, [pc, #32]	; (8002f14 <I2Cx_WriteData+0x50>)
 8002ef4:	f004 f8de 	bl	80070b4 <HAL_I2C_Mem_Write>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f02:	f000 f863 	bl	8002fcc <I2Cx_Error>
  }        
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	2000006c 	.word	0x2000006c
 8002f14:	20000698 	.word	0x20000698

08002f18 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af04      	add	r7, sp, #16
 8002f1e:	4603      	mov	r3, r0
 8002f20:	460a      	mov	r2, r1
 8002f22:	71fb      	strb	r3, [r7, #7]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	b299      	uxth	r1, r3
 8002f34:	79bb      	ldrb	r3, [r7, #6]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <I2Cx_ReadData+0x50>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	9302      	str	r3, [sp, #8]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	f107 030e 	add.w	r3, r7, #14
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	4808      	ldr	r0, [pc, #32]	; (8002f6c <I2Cx_ReadData+0x54>)
 8002f4c:	f004 f9ac 	bl	80072a8 <HAL_I2C_Mem_Read>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f5a:	f000 f837 	bl	8002fcc <I2Cx_Error>
  
  }
  return value;
 8002f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2000006c 	.word	0x2000006c
 8002f6c:	20000698 	.word	0x20000698

08002f70 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af04      	add	r7, sp, #16
 8002f76:	603a      	str	r2, [r7, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	71bb      	strb	r3, [r7, #6]
 8002f82:	4613      	mov	r3, r2
 8002f84:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	79bb      	ldrb	r3, [r7, #6]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <I2Cx_ReadBuffer+0x54>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	9302      	str	r3, [sp, #8]
 8002f98:	88bb      	ldrh	r3, [r7, #4]
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <I2Cx_ReadBuffer+0x58>)
 8002fa4:	f004 f980 	bl	80072a8 <HAL_I2C_Mem_Read>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e002      	b.n	8002fbc <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002fb6:	f000 f809 	bl	8002fcc <I2Cx_Error>

    return 1;
 8002fba:	2301      	movs	r3, #1
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	2000006c 	.word	0x2000006c
 8002fc8:	20000698 	.word	0x20000698

08002fcc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002fd0:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <I2Cx_Error+0x14>)
 8002fd2:	f004 f83f 	bl	8007054 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002fd6:	f7ff ff11 	bl	8002dfc <I2Cx_Init>
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000698 	.word	0x20000698

08002fe4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002fe8:	4819      	ldr	r0, [pc, #100]	; (8003050 <SPIx_Init+0x6c>)
 8002fea:	f006 fe35 	bl	8009c58 <HAL_SPI_GetState>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d12b      	bne.n	800304c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <SPIx_Init+0x6c>)
 8002ff6:	4a17      	ldr	r2, [pc, #92]	; (8003054 <SPIx_Init+0x70>)
 8002ff8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <SPIx_Init+0x6c>)
 8002ffc:	2218      	movs	r2, #24
 8002ffe:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <SPIx_Init+0x6c>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <SPIx_Init+0x6c>)
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <SPIx_Init+0x6c>)
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <SPIx_Init+0x6c>)
 8003014:	2200      	movs	r2, #0
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <SPIx_Init+0x6c>)
 800301a:	2207      	movs	r2, #7
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <SPIx_Init+0x6c>)
 8003020:	2200      	movs	r2, #0
 8003022:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <SPIx_Init+0x6c>)
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <SPIx_Init+0x6c>)
 800302c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003030:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <SPIx_Init+0x6c>)
 8003034:	2200      	movs	r2, #0
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <SPIx_Init+0x6c>)
 800303a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800303e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <SPIx_Init+0x6c>)
 8003042:	f000 f853 	bl	80030ec <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003046:	4802      	ldr	r0, [pc, #8]	; (8003050 <SPIx_Init+0x6c>)
 8003048:	f006 f99b 	bl	8009382 <HAL_SPI_Init>
  } 
}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000154 	.word	0x20000154
 8003054:	40015000 	.word	0x40015000

08003058 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	b29a      	uxth	r2, r3
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <SPIx_Read+0x38>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f107 0108 	add.w	r1, r7, #8
 8003072:	4808      	ldr	r0, [pc, #32]	; (8003094 <SPIx_Read+0x3c>)
 8003074:	f006 fb45 	bl	8009702 <HAL_SPI_Receive>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003082:	f000 f827 	bl	80030d4 <SPIx_Error>
  }
  
  return readvalue;
 8003086:	68bb      	ldr	r3, [r7, #8]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000070 	.word	0x20000070
 8003094:	20000154 	.word	0x20000154

08003098 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <SPIx_Write+0x34>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	1db9      	adds	r1, r7, #6
 80030ac:	2201      	movs	r2, #1
 80030ae:	4808      	ldr	r0, [pc, #32]	; (80030d0 <SPIx_Write+0x38>)
 80030b0:	f006 f9f3 	bl	800949a <HAL_SPI_Transmit>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80030be:	f000 f809 	bl	80030d4 <SPIx_Error>
  }
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000070 	.word	0x20000070
 80030d0:	20000154 	.word	0x20000154

080030d4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <SPIx_Error+0x14>)
 80030da:	f006 f9b6 	bl	800944a <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80030de:	f7ff ff81 	bl	8002fe4 <SPIx_Init>
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000154 	.word	0x20000154

080030ec <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <SPIx_MspInit+0x6c>)
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <SPIx_MspInit+0x6c>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003102:	6453      	str	r3, [r2, #68]	; 0x44
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <SPIx_MspInit+0x6c>)
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	4b10      	ldr	r3, [pc, #64]	; (8003158 <SPIx_MspInit+0x6c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <SPIx_MspInit+0x6c>)
 800311a:	f043 0320 	orr.w	r3, r3, #32
 800311e:	6313      	str	r3, [r2, #48]	; 0x30
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <SPIx_MspInit+0x6c>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800312c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003130:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003136:	2302      	movs	r3, #2
 8003138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800313a:	2301      	movs	r3, #1
 800313c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800313e:	2305      	movs	r3, #5
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	4619      	mov	r1, r3
 8003148:	4804      	ldr	r0, [pc, #16]	; (800315c <SPIx_MspInit+0x70>)
 800314a:	f002 f993 	bl	8005474 <HAL_GPIO_Init>
}
 800314e:	bf00      	nop
 8003150:	3728      	adds	r7, #40	; 0x28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	40021400 	.word	0x40021400

08003160 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <LCD_IO_Init+0xe0>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d164      	bne.n	8003238 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800316e:	4b34      	ldr	r3, [pc, #208]	; (8003240 <LCD_IO_Init+0xe0>)
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <LCD_IO_Init+0xe4>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4a31      	ldr	r2, [pc, #196]	; (8003244 <LCD_IO_Init+0xe4>)
 800317e:	f043 0308 	orr.w	r3, r3, #8
 8003182:	6313      	str	r3, [r2, #48]	; 0x30
 8003184:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <LCD_IO_Init+0xe4>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003196:	2301      	movs	r3, #1
 8003198:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800319e:	2302      	movs	r3, #2
 80031a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	4619      	mov	r1, r3
 80031a8:	4827      	ldr	r0, [pc, #156]	; (8003248 <LCD_IO_Init+0xe8>)
 80031aa:	f002 f963 	bl	8005474 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <LCD_IO_Init+0xe4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a23      	ldr	r2, [pc, #140]	; (8003244 <LCD_IO_Init+0xe4>)
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <LCD_IO_Init+0xe4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80031ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80031d0:	2301      	movs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80031d8:	2302      	movs	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	4619      	mov	r1, r3
 80031e2:	4819      	ldr	r0, [pc, #100]	; (8003248 <LCD_IO_Init+0xe8>)
 80031e4:	f002 f946 	bl	8005474 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80031e8:	2300      	movs	r3, #0
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <LCD_IO_Init+0xe4>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <LCD_IO_Init+0xe4>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6313      	str	r3, [r2, #48]	; 0x30
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <LCD_IO_Init+0xe4>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003204:	2304      	movs	r3, #4
 8003206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003208:	2301      	movs	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003210:	2302      	movs	r3, #2
 8003212:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	4619      	mov	r1, r3
 800321a:	480c      	ldr	r0, [pc, #48]	; (800324c <LCD_IO_Init+0xec>)
 800321c:	f002 f92a 	bl	8005474 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003220:	2200      	movs	r2, #0
 8003222:	2104      	movs	r1, #4
 8003224:	4809      	ldr	r0, [pc, #36]	; (800324c <LCD_IO_Init+0xec>)
 8003226:	f002 fbd9 	bl	80059dc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800322a:	2201      	movs	r2, #1
 800322c:	2104      	movs	r1, #4
 800322e:	4807      	ldr	r0, [pc, #28]	; (800324c <LCD_IO_Init+0xec>)
 8003230:	f002 fbd4 	bl	80059dc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003234:	f7ff fed6 	bl	8002fe4 <SPIx_Init>
  }
}
 8003238:	bf00      	nop
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200001ac 	.word	0x200001ac
 8003244:	40023800 	.word	0x40023800
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40020800 	.word	0x40020800

08003250 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800325a:	2201      	movs	r2, #1
 800325c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003260:	480a      	ldr	r0, [pc, #40]	; (800328c <LCD_IO_WriteData+0x3c>)
 8003262:	f002 fbbb 	bl	80059dc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003266:	2200      	movs	r2, #0
 8003268:	2104      	movs	r1, #4
 800326a:	4809      	ldr	r0, [pc, #36]	; (8003290 <LCD_IO_WriteData+0x40>)
 800326c:	f002 fbb6 	bl	80059dc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff10 	bl	8003098 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003278:	2201      	movs	r2, #1
 800327a:	2104      	movs	r1, #4
 800327c:	4804      	ldr	r0, [pc, #16]	; (8003290 <LCD_IO_WriteData+0x40>)
 800327e:	f002 fbad 	bl	80059dc <HAL_GPIO_WritePin>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40020c00 	.word	0x40020c00
 8003290:	40020800 	.word	0x40020800

08003294 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800329e:	2200      	movs	r2, #0
 80032a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032a4:	480a      	ldr	r0, [pc, #40]	; (80032d0 <LCD_IO_WriteReg+0x3c>)
 80032a6:	f002 fb99 	bl	80059dc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80032aa:	2200      	movs	r2, #0
 80032ac:	2104      	movs	r1, #4
 80032ae:	4809      	ldr	r0, [pc, #36]	; (80032d4 <LCD_IO_WriteReg+0x40>)
 80032b0:	f002 fb94 	bl	80059dc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff feed 	bl	8003098 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80032be:	2201      	movs	r2, #1
 80032c0:	2104      	movs	r1, #4
 80032c2:	4804      	ldr	r0, [pc, #16]	; (80032d4 <LCD_IO_WriteReg+0x40>)
 80032c4:	f002 fb8a 	bl	80059dc <HAL_GPIO_WritePin>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40020c00 	.word	0x40020c00
 80032d4:	40020800 	.word	0x40020800

080032d8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	460a      	mov	r2, r1
 80032e2:	80fb      	strh	r3, [r7, #6]
 80032e4:	4613      	mov	r3, r2
 80032e6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80032ec:	2200      	movs	r2, #0
 80032ee:	2104      	movs	r1, #4
 80032f0:	4810      	ldr	r0, [pc, #64]	; (8003334 <LCD_IO_ReadData+0x5c>)
 80032f2:	f002 fb73 	bl	80059dc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80032f6:	2200      	movs	r2, #0
 80032f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032fc:	480e      	ldr	r0, [pc, #56]	; (8003338 <LCD_IO_ReadData+0x60>)
 80032fe:	f002 fb6d 	bl	80059dc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fec7 	bl	8003098 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800330a:	797b      	ldrb	r3, [r7, #5]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fea3 	bl	8003058 <SPIx_Read>
 8003312:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003314:	2201      	movs	r2, #1
 8003316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800331a:	4807      	ldr	r0, [pc, #28]	; (8003338 <LCD_IO_ReadData+0x60>)
 800331c:	f002 fb5e 	bl	80059dc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003320:	2201      	movs	r2, #1
 8003322:	2104      	movs	r1, #4
 8003324:	4803      	ldr	r0, [pc, #12]	; (8003334 <LCD_IO_ReadData+0x5c>)
 8003326:	f002 fb59 	bl	80059dc <HAL_GPIO_WritePin>
  
  return readvalue;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40020800 	.word	0x40020800
 8003338:	40020c00 	.word	0x40020c00

0800333c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f001 fa1d 	bl	8004784 <HAL_Delay>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003352:	b580      	push	{r7, lr}
 8003354:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003356:	f7ff fd51 	bl	8002dfc <I2Cx_Init>
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}

0800335e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003362:	f7ff fd7d 	bl	8002e60 <I2Cx_ITConfig>
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}

0800336a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
 8003374:	460b      	mov	r3, r1
 8003376:	71bb      	strb	r3, [r7, #6]
 8003378:	4613      	mov	r3, r2
 800337a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800337c:	797a      	ldrb	r2, [r7, #5]
 800337e:	79b9      	ldrb	r1, [r7, #6]
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fd9e 	bl	8002ec4 <I2Cx_WriteData>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	460a      	mov	r2, r1
 800339a:	71fb      	strb	r3, [r7, #7]
 800339c:	4613      	mov	r3, r2
 800339e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80033a0:	79ba      	ldrb	r2, [r7, #6]
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fdb6 	bl	8002f18 <I2Cx_ReadData>
 80033ac:	4603      	mov	r3, r0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	603a      	str	r2, [r7, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
 80033c4:	460b      	mov	r3, r1
 80033c6:	71bb      	strb	r3, [r7, #6]
 80033c8:	4613      	mov	r3, r2
 80033ca:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80033cc:	88bb      	ldrh	r3, [r7, #4]
 80033ce:	79b9      	ldrb	r1, [r7, #6]
 80033d0:	79f8      	ldrb	r0, [r7, #7]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	f7ff fdcc 	bl	8002f70 <I2Cx_ReadBuffer>
 80033d8:	4603      	mov	r3, r0
 80033da:	b29b      	uxth	r3, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f001 f9c9 	bl	8004784 <HAL_Delay>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003402:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <BSP_LCD_Init+0xc0>)
 8003404:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003408:	2209      	movs	r2, #9
 800340a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800340c:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <BSP_LCD_Init+0xbc>)
 800340e:	2201      	movs	r2, #1
 8003410:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003414:	221d      	movs	r2, #29
 8003416:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <BSP_LCD_Init+0xbc>)
 800341a:	2203      	movs	r2, #3
 800341c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800341e:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003420:	f240 120d 	movw	r2, #269	; 0x10d
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003428:	f240 1243 	movw	r2, #323	; 0x143
 800342c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003430:	f240 1217 	movw	r2, #279	; 0x117
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003438:	f240 1247 	movw	r2, #327	; 0x147
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <BSP_LCD_Init+0xc4>)
 8003458:	2208      	movs	r2, #8
 800345a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <BSP_LCD_Init+0xc4>)
 800345e:	22c0      	movs	r2, #192	; 0xc0
 8003460:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003462:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <BSP_LCD_Init+0xc4>)
 8003464:	2204      	movs	r2, #4
 8003466:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <BSP_LCD_Init+0xc4>)
 800346a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003470:	4813      	ldr	r0, [pc, #76]	; (80034c0 <BSP_LCD_Init+0xc4>)
 8003472:	f005 fd49 	bl	8008f08 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003478:	2200      	movs	r2, #0
 800347a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <BSP_LCD_Init+0xbc>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003484:	2200      	movs	r2, #0
 8003486:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <BSP_LCD_Init+0xbc>)
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800348e:	f000 fc93 	bl	8003db8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003492:	4809      	ldr	r0, [pc, #36]	; (80034b8 <BSP_LCD_Init+0xbc>)
 8003494:	f004 fd12 	bl	8007ebc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <BSP_LCD_Init+0xc8>)
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <BSP_LCD_Init+0xcc>)
 800349c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <BSP_LCD_Init+0xc8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80034a6:	f000 fe75 	bl	8004194 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80034aa:	4808      	ldr	r0, [pc, #32]	; (80034cc <BSP_LCD_Init+0xd0>)
 80034ac:	f000 f90c 	bl	80036c8 <BSP_LCD_SetFont>

  return LCD_OK;
 80034b0:	2300      	movs	r3, #0
}  
 80034b2:	4618      	mov	r0, r3
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200006ec 	.word	0x200006ec
 80034bc:	40016800 	.word	0x40016800
 80034c0:	200001f0 	.word	0x200001f0
 80034c4:	20000794 	.word	0x20000794
 80034c8:	20000004 	.word	0x20000004
 80034cc:	20000074 	.word	0x20000074

080034d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <BSP_LCD_GetXSize+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	4798      	blx	r3
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000794 	.word	0x20000794

080034e8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <BSP_LCD_GetYSize+0x14>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	4798      	blx	r3
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000794 	.word	0x20000794

08003500 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003500:	b580      	push	{r7, lr}
 8003502:	b090      	sub	sp, #64	; 0x40
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003510:	f7ff ffde 	bl	80034d0 <BSP_LCD_GetXSize>
 8003514:	4603      	mov	r3, r0
 8003516:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800351c:	f7ff ffe4 	bl	80034e8 <BSP_LCD_GetYSize>
 8003520:	4603      	mov	r3, r0
 8003522:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800352c:	23ff      	movs	r3, #255	; 0xff
 800352e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003546:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800354c:	2307      	movs	r3, #7
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003550:	f7ff ffbe 	bl	80034d0 <BSP_LCD_GetXSize>
 8003554:	4603      	mov	r3, r0
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003558:	f7ff ffc6 	bl	80034e8 <BSP_LCD_GetYSize>
 800355c:	4603      	mov	r3, r0
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	4619      	mov	r1, r3
 8003568:	4814      	ldr	r0, [pc, #80]	; (80035bc <BSP_LCD_LayerDefaultInit+0xbc>)
 800356a:	f004 fe39 	bl	80081e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	4913      	ldr	r1, [pc, #76]	; (80035c0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3304      	adds	r3, #4
 800357e:	f04f 32ff 	mov.w	r2, #4294967295
 8003582:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003584:	88fa      	ldrh	r2, [r7, #6]
 8003586:	490e      	ldr	r1, [pc, #56]	; (80035c0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3308      	adds	r3, #8
 8003594:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003596:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	4909      	ldr	r1, [pc, #36]	; (80035c0 <BSP_LCD_LayerDefaultInit+0xc0>)
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80035aa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80035ac:	4803      	ldr	r0, [pc, #12]	; (80035bc <BSP_LCD_LayerDefaultInit+0xbc>)
 80035ae:	f004 fe55 	bl	800825c <HAL_LTDC_EnableDither>
}
 80035b2:	bf00      	nop
 80035b4:	3740      	adds	r7, #64	; 0x40
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200006ec 	.word	0x200006ec
 80035c0:	20000224 	.word	0x20000224
 80035c4:	20000074 	.word	0x20000074

080035c8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80035d0:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <BSP_LCD_SelectLayer+0x1c>)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6013      	str	r3, [r2, #0]
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000220 	.word	0x20000220

080035e8 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d112      	bne.n	8003620 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <BSP_LCD_SetLayerVisible+0x78>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	01db      	lsls	r3, r3, #7
 8003604:	4413      	add	r3, r2
 8003606:	3384      	adds	r3, #132	; 0x84
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a15      	ldr	r2, [pc, #84]	; (8003660 <BSP_LCD_SetLayerVisible+0x78>)
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	4611      	mov	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	01d2      	lsls	r2, r2, #7
 8003614:	440a      	add	r2, r1
 8003616:	3284      	adds	r2, #132	; 0x84
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e011      	b.n	8003644 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <BSP_LCD_SetLayerVisible+0x78>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	01db      	lsls	r3, r3, #7
 800362a:	4413      	add	r3, r2
 800362c:	3384      	adds	r3, #132	; 0x84
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <BSP_LCD_SetLayerVisible+0x78>)
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	4611      	mov	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	01d2      	lsls	r2, r2, #7
 800363a:	440a      	add	r2, r1
 800363c:	3284      	adds	r2, #132	; 0x84
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <BSP_LCD_SetLayerVisible+0x78>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <BSP_LCD_SetLayerVisible+0x78>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	200006ec 	.word	0x200006ec

08003664 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <BSP_LCD_SetTextColor+0x28>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4907      	ldr	r1, [pc, #28]	; (8003690 <BSP_LCD_SetTextColor+0x2c>)
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	601a      	str	r2, [r3, #0]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	20000220 	.word	0x20000220
 8003690:	20000224 	.word	0x20000224

08003694 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800369c:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <BSP_LCD_SetBackColor+0x2c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4908      	ldr	r1, [pc, #32]	; (80036c4 <BSP_LCD_SetBackColor+0x30>)
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3304      	adds	r3, #4
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000220 	.word	0x20000220
 80036c4:	20000224 	.word	0x20000224

080036c8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <BSP_LCD_SetFont+0x2c>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4908      	ldr	r1, [pc, #32]	; (80036f8 <BSP_LCD_SetFont+0x30>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3308      	adds	r3, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000220 	.word	0x20000220
 80036f8:	20000224 	.word	0x20000224

080036fc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80036fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fe:	b085      	sub	sp, #20
 8003700:	af02      	add	r7, sp, #8
 8003702:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <BSP_LCD_Clear+0x48>)
 8003706:	681c      	ldr	r4, [r3, #0]
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <BSP_LCD_Clear+0x48>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <BSP_LCD_Clear+0x4c>)
 800370e:	2134      	movs	r1, #52	; 0x34
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	335c      	adds	r3, #92	; 0x5c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461d      	mov	r5, r3
 800371c:	f7ff fed8 	bl	80034d0 <BSP_LCD_GetXSize>
 8003720:	4606      	mov	r6, r0
 8003722:	f7ff fee1 	bl	80034e8 <BSP_LCD_GetYSize>
 8003726:	4602      	mov	r2, r0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	2300      	movs	r3, #0
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	4632      	mov	r2, r6
 8003734:	4629      	mov	r1, r5
 8003736:	4620      	mov	r0, r4
 8003738:	f000 fcf4 	bl	8004124 <FillBuffer>
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003744:	20000220 	.word	0x20000220
 8003748:	200006ec 	.word	0x200006ec

0800374c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
 8003756:	460b      	mov	r3, r1
 8003758:	80bb      	strh	r3, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <BSP_LCD_DisplayChar+0x80>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	491b      	ldr	r1, [pc, #108]	; (80037d0 <BSP_LCD_DisplayChar+0x84>)
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3308      	adds	r3, #8
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <BSP_LCD_DisplayChar+0x80>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4c14      	ldr	r4, [pc, #80]	; (80037d0 <BSP_LCD_DisplayChar+0x84>)
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4423      	add	r3, r4
 800378a:	3308      	adds	r3, #8
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003790:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <BSP_LCD_DisplayChar+0x80>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4c0d      	ldr	r4, [pc, #52]	; (80037d0 <BSP_LCD_DisplayChar+0x84>)
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4423      	add	r3, r4
 80037a4:	3308      	adds	r3, #8
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	889b      	ldrh	r3, [r3, #4]
 80037aa:	3307      	adds	r3, #7
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da00      	bge.n	80037b2 <BSP_LCD_DisplayChar+0x66>
 80037b0:	3307      	adds	r3, #7
 80037b2:	10db      	asrs	r3, r3, #3
 80037b4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80037b8:	18ca      	adds	r2, r1, r3
 80037ba:	88b9      	ldrh	r1, [r7, #4]
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fbf6 	bl	8003fb0 <DrawChar>
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	20000220 	.word	0x20000220
 80037d0:	20000224 	.word	0x20000224

080037d4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60ba      	str	r2, [r7, #8]
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	81fb      	strh	r3, [r7, #14]
 80037e2:	460b      	mov	r3, r1
 80037e4:	81bb      	strh	r3, [r7, #12]
 80037e6:	4613      	mov	r3, r2
 80037e8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80037ea:	2301      	movs	r3, #1
 80037ec:	83fb      	strh	r3, [r7, #30]
 80037ee:	2300      	movs	r3, #0
 80037f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80037fe:	e002      	b.n	8003806 <BSP_LCD_DisplayStringAt+0x32>
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	3301      	adds	r3, #1
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	617a      	str	r2, [r7, #20]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f6      	bne.n	8003800 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003812:	f7ff fe5d 	bl	80034d0 <BSP_LCD_GetXSize>
 8003816:	4b4a      	ldr	r3, [pc, #296]	; (8003940 <BSP_LCD_DisplayStringAt+0x16c>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	494a      	ldr	r1, [pc, #296]	; (8003944 <BSP_LCD_DisplayStringAt+0x170>)
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3308      	adds	r3, #8
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	889b      	ldrh	r3, [r3, #4]
 800382c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003830:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d01c      	beq.n	8003872 <BSP_LCD_DisplayStringAt+0x9e>
 8003838:	2b03      	cmp	r3, #3
 800383a:	d017      	beq.n	800386c <BSP_LCD_DisplayStringAt+0x98>
 800383c:	2b01      	cmp	r3, #1
 800383e:	d12e      	bne.n	800389e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	1ad1      	subs	r1, r2, r3
 8003846:	4b3e      	ldr	r3, [pc, #248]	; (8003940 <BSP_LCD_DisplayStringAt+0x16c>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	483e      	ldr	r0, [pc, #248]	; (8003944 <BSP_LCD_DisplayStringAt+0x170>)
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4403      	add	r3, r0
 8003856:	3308      	adds	r3, #8
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	889b      	ldrh	r3, [r3, #4]
 800385c:	fb03 f301 	mul.w	r3, r3, r1
 8003860:	085b      	lsrs	r3, r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	4413      	add	r3, r2
 8003868:	83fb      	strh	r3, [r7, #30]
      break;
 800386a:	e01b      	b.n	80038a4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800386c:	89fb      	ldrh	r3, [r7, #14]
 800386e:	83fb      	strh	r3, [r7, #30]
      break;
 8003870:	e018      	b.n	80038a4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	b299      	uxth	r1, r3
 800387a:	4b31      	ldr	r3, [pc, #196]	; (8003940 <BSP_LCD_DisplayStringAt+0x16c>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4831      	ldr	r0, [pc, #196]	; (8003944 <BSP_LCD_DisplayStringAt+0x170>)
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4403      	add	r3, r0
 800388a:	3308      	adds	r3, #8
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	889b      	ldrh	r3, [r3, #4]
 8003890:	fb11 f303 	smulbb	r3, r1, r3
 8003894:	b29a      	uxth	r2, r3
 8003896:	89fb      	ldrh	r3, [r7, #14]
 8003898:	4413      	add	r3, r2
 800389a:	83fb      	strh	r3, [r7, #30]
      break;
 800389c:	e002      	b.n	80038a4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 800389e:	89fb      	ldrh	r3, [r7, #14]
 80038a0:	83fb      	strh	r3, [r7, #30]
      break;
 80038a2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038a4:	e01a      	b.n	80038dc <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	89b9      	ldrh	r1, [r7, #12]
 80038ac:	8bfb      	ldrh	r3, [r7, #30]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff4c 	bl	800374c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80038b4:	4b22      	ldr	r3, [pc, #136]	; (8003940 <BSP_LCD_DisplayStringAt+0x16c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4922      	ldr	r1, [pc, #136]	; (8003944 <BSP_LCD_DisplayStringAt+0x170>)
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3308      	adds	r3, #8
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	889a      	ldrh	r2, [r3, #4]
 80038ca:	8bfb      	ldrh	r3, [r7, #30]
 80038cc:	4413      	add	r3, r2
 80038ce:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3301      	adds	r3, #1
 80038d4:	60bb      	str	r3, [r7, #8]
    i++;
 80038d6:	8bbb      	ldrh	r3, [r7, #28]
 80038d8:	3301      	adds	r3, #1
 80038da:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2dc      	uxtb	r4, r3
 80038ea:	f7ff fdf1 	bl	80034d0 <BSP_LCD_GetXSize>
 80038ee:	4605      	mov	r5, r0
 80038f0:	8bb9      	ldrh	r1, [r7, #28]
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <BSP_LCD_DisplayStringAt+0x16c>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4813      	ldr	r0, [pc, #76]	; (8003944 <BSP_LCD_DisplayStringAt+0x170>)
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4403      	add	r3, r0
 8003902:	3308      	adds	r3, #8
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	889b      	ldrh	r3, [r3, #4]
 8003908:	fb03 f301 	mul.w	r3, r3, r1
 800390c:	1aeb      	subs	r3, r5, r3
 800390e:	b299      	uxth	r1, r3
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <BSP_LCD_DisplayStringAt+0x16c>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	480b      	ldr	r0, [pc, #44]	; (8003944 <BSP_LCD_DisplayStringAt+0x170>)
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4403      	add	r3, r0
 8003920:	3308      	adds	r3, #8
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	889b      	ldrh	r3, [r3, #4]
 8003926:	4299      	cmp	r1, r3
 8003928:	bf2c      	ite	cs
 800392a:	2301      	movcs	r3, #1
 800392c:	2300      	movcc	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	4023      	ands	r3, r4
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1b6      	bne.n	80038a6 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8003938:	bf00      	nop
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bdb0      	pop	{r4, r5, r7, pc}
 8003940:	20000220 	.word	0x20000220
 8003944:	20000224 	.word	0x20000224

08003948 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	4603      	mov	r3, r0
 8003950:	80fb      	strh	r3, [r7, #6]
 8003952:	460b      	mov	r3, r1
 8003954:	80bb      	strh	r3, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800395e:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <BSP_LCD_DrawHLine+0x70>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <BSP_LCD_DrawHLine+0x74>)
 8003964:	2134      	movs	r1, #52	; 0x34
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	335c      	adds	r3, #92	; 0x5c
 800396e:	681c      	ldr	r4, [r3, #0]
 8003970:	f7ff fdae 	bl	80034d0 <BSP_LCD_GetXSize>
 8003974:	4602      	mov	r2, r0
 8003976:	88bb      	ldrh	r3, [r7, #4]
 8003978:	fb03 f202 	mul.w	r2, r3, r2
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4423      	add	r3, r4
 8003984:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <BSP_LCD_DrawHLine+0x70>)
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	68fc      	ldr	r4, [r7, #12]
 800398c:	887d      	ldrh	r5, [r7, #2]
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <BSP_LCD_DrawHLine+0x70>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	490b      	ldr	r1, [pc, #44]	; (80039c0 <BSP_LCD_DrawHLine+0x78>)
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2301      	movs	r3, #1
 80039a8:	462a      	mov	r2, r5
 80039aa:	4621      	mov	r1, r4
 80039ac:	f000 fbba 	bl	8004124 <FillBuffer>
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bdb0      	pop	{r4, r5, r7, pc}
 80039b8:	20000220 	.word	0x20000220
 80039bc:	200006ec 	.word	0x200006ec
 80039c0:	20000224 	.word	0x20000224

080039c4 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
 80039ce:	460b      	mov	r3, r1
 80039d0:	80bb      	strh	r3, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	f1c3 0303 	rsb	r3, r3, #3
 80039de:	617b      	str	r3, [r7, #20]
  curx = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80039e8:	e0cf      	b.n	8003b8a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	4413      	add	r3, r2
 80039f2:	b298      	uxth	r0, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	88ba      	ldrh	r2, [r7, #4]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	b29c      	uxth	r4, r3
 80039fe:	4b67      	ldr	r3, [pc, #412]	; (8003b9c <BSP_LCD_DrawCircle+0x1d8>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4967      	ldr	r1, [pc, #412]	; (8003ba0 <BSP_LCD_DrawCircle+0x1dc>)
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4621      	mov	r1, r4
 8003a14:	f000 faa6 	bl	8003f64 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	88fa      	ldrh	r2, [r7, #6]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	b298      	uxth	r0, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	88ba      	ldrh	r2, [r7, #4]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	b29c      	uxth	r4, r3
 8003a2c:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <BSP_LCD_DrawCircle+0x1d8>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	495b      	ldr	r1, [pc, #364]	; (8003ba0 <BSP_LCD_DrawCircle+0x1dc>)
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4621      	mov	r1, r4
 8003a42:	f000 fa8f 	bl	8003f64 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	b298      	uxth	r0, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	88ba      	ldrh	r2, [r7, #4]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	b29c      	uxth	r4, r3
 8003a5a:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <BSP_LCD_DrawCircle+0x1d8>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4950      	ldr	r1, [pc, #320]	; (8003ba0 <BSP_LCD_DrawCircle+0x1dc>)
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4621      	mov	r1, r4
 8003a70:	f000 fa78 	bl	8003f64 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	b298      	uxth	r0, r3
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	88ba      	ldrh	r2, [r7, #4]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	b29c      	uxth	r4, r3
 8003a88:	4b44      	ldr	r3, [pc, #272]	; (8003b9c <BSP_LCD_DrawCircle+0x1d8>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4944      	ldr	r1, [pc, #272]	; (8003ba0 <BSP_LCD_DrawCircle+0x1dc>)
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	f000 fa61 	bl	8003f64 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	b298      	uxth	r0, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	88bb      	ldrh	r3, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	b29c      	uxth	r4, r3
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <BSP_LCD_DrawCircle+0x1d8>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4939      	ldr	r1, [pc, #228]	; (8003ba0 <BSP_LCD_DrawCircle+0x1dc>)
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4621      	mov	r1, r4
 8003acc:	f000 fa4a 	bl	8003f64 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	b298      	uxth	r0, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	88bb      	ldrh	r3, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	b29c      	uxth	r4, r3
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <BSP_LCD_DrawCircle+0x1d8>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	492d      	ldr	r1, [pc, #180]	; (8003ba0 <BSP_LCD_DrawCircle+0x1dc>)
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	4621      	mov	r1, r4
 8003afa:	f000 fa33 	bl	8003f64 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	4413      	add	r3, r2
 8003b06:	b298      	uxth	r0, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	88bb      	ldrh	r3, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	b29c      	uxth	r4, r3
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <BSP_LCD_DrawCircle+0x1d8>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4922      	ldr	r1, [pc, #136]	; (8003ba0 <BSP_LCD_DrawCircle+0x1dc>)
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4621      	mov	r1, r4
 8003b28:	f000 fa1c 	bl	8003f64 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	b298      	uxth	r0, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	88bb      	ldrh	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	b29c      	uxth	r4, r3
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <BSP_LCD_DrawCircle+0x1d8>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4916      	ldr	r1, [pc, #88]	; (8003ba0 <BSP_LCD_DrawCircle+0x1dc>)
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4621      	mov	r1, r4
 8003b56:	f000 fa05 	bl	8003f64 <BSP_LCD_DrawPixel>

    if (d < 0)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	da06      	bge.n	8003b6e <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	009a      	lsls	r2, r3, #2
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4413      	add	r3, r2
 8003b68:	3306      	adds	r3, #6
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e00a      	b.n	8003b84 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	009a      	lsls	r2, r3, #2
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4413      	add	r3, r2
 8003b7a:	330a      	adds	r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
      cury--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	3301      	adds	r3, #1
 8003b88:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	f67f af2b 	bls.w	80039ea <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd90      	pop	{r4, r7, pc}
 8003b9c:	20000220 	.word	0x20000220
 8003ba0:	20000224 	.word	0x20000224

08003ba4 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	4604      	mov	r4, r0
 8003bae:	4608      	mov	r0, r1
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	80fb      	strh	r3, [r7, #6]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	80bb      	strh	r3, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003bc8:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <BSP_LCD_FillRect+0xa8>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4920      	ldr	r1, [pc, #128]	; (8003c50 <BSP_LCD_FillRect+0xac>)
 8003bce:	4613      	mov	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fd42 	bl	8003664 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <BSP_LCD_FillRect+0xa8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <BSP_LCD_FillRect+0xb0>)
 8003be6:	2134      	movs	r1, #52	; 0x34
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	335c      	adds	r3, #92	; 0x5c
 8003bf0:	681c      	ldr	r4, [r3, #0]
 8003bf2:	f7ff fc6d 	bl	80034d0 <BSP_LCD_GetXSize>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	88bb      	ldrh	r3, [r7, #4]
 8003bfa:	fb03 f202 	mul.w	r2, r3, r2
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4423      	add	r3, r4
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003c08:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <BSP_LCD_FillRect+0xa8>)
 8003c0a:	681c      	ldr	r4, [r3, #0]
 8003c0c:	68fd      	ldr	r5, [r7, #12]
 8003c0e:	887e      	ldrh	r6, [r7, #2]
 8003c10:	f8b7 8000 	ldrh.w	r8, [r7]
 8003c14:	f7ff fc5c 	bl	80034d0 <BSP_LCD_GetXSize>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	1ad1      	subs	r1, r2, r3
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <BSP_LCD_FillRect+0xa8>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	480b      	ldr	r0, [pc, #44]	; (8003c50 <BSP_LCD_FillRect+0xac>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4403      	add	r3, r0
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	9100      	str	r1, [sp, #0]
 8003c34:	4643      	mov	r3, r8
 8003c36:	4632      	mov	r2, r6
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f000 fa72 	bl	8004124 <FillBuffer>
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000220 	.word	0x20000220
 8003c50:	20000224 	.word	0x20000224
 8003c54:	200006ec 	.word	0x200006ec

08003c58 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	80fb      	strh	r3, [r7, #6]
 8003c62:	460b      	mov	r3, r1
 8003c64:	80bb      	strh	r3, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	f1c3 0303 	rsb	r3, r3, #3
 8003c72:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003c7c:	4b44      	ldr	r3, [pc, #272]	; (8003d90 <BSP_LCD_FillCircle+0x138>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4944      	ldr	r1, [pc, #272]	; (8003d94 <BSP_LCD_FillCircle+0x13c>)
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fce8 	bl	8003664 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003c94:	e061      	b.n	8003d5a <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d021      	beq.n	8003ce0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	b298      	uxth	r0, r3
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	88bb      	ldrh	r3, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	b299      	uxth	r1, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f7ff fe45 	bl	8003948 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	b298      	uxth	r0, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	88ba      	ldrh	r2, [r7, #4]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b299      	uxth	r1, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f7ff fe34 	bl	8003948 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d021      	beq.n	8003d2a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	b298      	uxth	r0, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	88ba      	ldrh	r2, [r7, #4]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	b299      	uxth	r1, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7ff fe20 	bl	8003948 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	b298      	uxth	r0, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	88bb      	ldrh	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	b299      	uxth	r1, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	f7ff fe0f 	bl	8003948 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	da06      	bge.n	8003d3e <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	009a      	lsls	r2, r3, #2
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4413      	add	r3, r2
 8003d38:	3306      	adds	r3, #6
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e00a      	b.n	8003d54 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4413      	add	r3, r2
 8003d4a:	330a      	adds	r3, #10
 8003d4c:	617b      	str	r3, [r7, #20]
      cury--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	3301      	adds	r3, #1
 8003d58:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d999      	bls.n	8003c96 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <BSP_LCD_FillCircle+0x138>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	490b      	ldr	r1, [pc, #44]	; (8003d94 <BSP_LCD_FillCircle+0x13c>)
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fc75 	bl	8003664 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	88b9      	ldrh	r1, [r7, #4]
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fe1f 	bl	80039c4 <BSP_LCD_DrawCircle>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000220 	.word	0x20000220
 8003d94:	20000224 	.word	0x20000224

08003d98 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <BSP_LCD_DisplayOn+0x1c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003da6:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <BSP_LCD_DisplayOn+0x1c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4798      	blx	r3
  }
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000794 	.word	0x20000794

08003db8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08e      	sub	sp, #56	; 0x38
 8003dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	4b61      	ldr	r3, [pc, #388]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	4a60      	ldr	r2, [pc, #384]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003dc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dce:	4b5e      	ldr	r3, [pc, #376]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	4a59      	ldr	r2, [pc, #356]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003de8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dea:	4b57      	ldr	r3, [pc, #348]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	4b53      	ldr	r3, [pc, #332]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	4a52      	ldr	r2, [pc, #328]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6313      	str	r3, [r2, #48]	; 0x30
 8003e06:	4b50      	ldr	r3, [pc, #320]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	4b4c      	ldr	r3, [pc, #304]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	4a4b      	ldr	r2, [pc, #300]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	6313      	str	r3, [r2, #48]	; 0x30
 8003e22:	4b49      	ldr	r3, [pc, #292]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4a44      	ldr	r2, [pc, #272]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3e:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a3d      	ldr	r2, [pc, #244]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e54:	f043 0308 	orr.w	r3, r3, #8
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a36      	ldr	r2, [pc, #216]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e70:	f043 0320 	orr.w	r3, r3, #32
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <BSP_LCD_MspInit+0x190>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003e9e:	f641 0358 	movw	r3, #6232	; 0x1858
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003eac:	2302      	movs	r3, #2
 8003eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003eb0:	230e      	movs	r3, #14
 8003eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4824      	ldr	r0, [pc, #144]	; (8003f4c <BSP_LCD_MspInit+0x194>)
 8003ebc:	f001 fada 	bl	8005474 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003ec0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4820      	ldr	r0, [pc, #128]	; (8003f50 <BSP_LCD_MspInit+0x198>)
 8003ece:	f001 fad1 	bl	8005474 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003ed2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003edc:	4619      	mov	r1, r3
 8003ede:	481d      	ldr	r0, [pc, #116]	; (8003f54 <BSP_LCD_MspInit+0x19c>)
 8003ee0:	f001 fac8 	bl	8005474 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003ee4:	2348      	movs	r3, #72	; 0x48
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eec:	4619      	mov	r1, r3
 8003eee:	481a      	ldr	r0, [pc, #104]	; (8003f58 <BSP_LCD_MspInit+0x1a0>)
 8003ef0:	f001 fac0 	bl	8005474 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003efe:	4619      	mov	r1, r3
 8003f00:	4816      	ldr	r0, [pc, #88]	; (8003f5c <BSP_LCD_MspInit+0x1a4>)
 8003f02:	f001 fab7 	bl	8005474 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003f06:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f10:	4619      	mov	r1, r3
 8003f12:	4813      	ldr	r0, [pc, #76]	; (8003f60 <BSP_LCD_MspInit+0x1a8>)
 8003f14:	f001 faae 	bl	8005474 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003f1c:	2309      	movs	r3, #9
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f24:	4619      	mov	r1, r3
 8003f26:	480a      	ldr	r0, [pc, #40]	; (8003f50 <BSP_LCD_MspInit+0x198>)
 8003f28:	f001 faa4 	bl	8005474 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003f2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f36:	4619      	mov	r1, r3
 8003f38:	4809      	ldr	r0, [pc, #36]	; (8003f60 <BSP_LCD_MspInit+0x1a8>)
 8003f3a:	f001 fa9b 	bl	8005474 <HAL_GPIO_Init>
}
 8003f3e:	bf00      	nop
 8003f40:	3738      	adds	r7, #56	; 0x38
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40020000 	.word	0x40020000
 8003f50:	40020400 	.word	0x40020400
 8003f54:	40020800 	.word	0x40020800
 8003f58:	40020c00 	.word	0x40020c00
 8003f5c:	40021400 	.word	0x40021400
 8003f60:	40021800 	.word	0x40021800

08003f64 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003f64:	b5b0      	push	{r4, r5, r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	603a      	str	r2, [r7, #0]
 8003f6e:	80fb      	strh	r3, [r7, #6]
 8003f70:	460b      	mov	r3, r1
 8003f72:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <BSP_LCD_DrawPixel+0x44>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <BSP_LCD_DrawPixel+0x48>)
 8003f7a:	2134      	movs	r1, #52	; 0x34
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	335c      	adds	r3, #92	; 0x5c
 8003f84:	681c      	ldr	r4, [r3, #0]
 8003f86:	88bd      	ldrh	r5, [r7, #4]
 8003f88:	f7ff faa2 	bl	80034d0 <BSP_LCD_GetXSize>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	fb03 f205 	mul.w	r2, r3, r5
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4423      	add	r3, r4
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa8:	20000220 	.word	0x20000220
 8003fac:	200006ec 	.word	0x200006ec

08003fb0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	603a      	str	r2, [r7, #0]
 8003fba:	80fb      	strh	r3, [r7, #6]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <DrawChar+0x16c>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4953      	ldr	r1, [pc, #332]	; (8004120 <DrawChar+0x170>)
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3308      	adds	r3, #8
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	88db      	ldrh	r3, [r3, #6]
 8003fe2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003fe4:	4b4d      	ldr	r3, [pc, #308]	; (800411c <DrawChar+0x16c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	494d      	ldr	r1, [pc, #308]	; (8004120 <DrawChar+0x170>)
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	889b      	ldrh	r3, [r3, #4]
 8003ffa:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003ffc:	8a3b      	ldrh	r3, [r7, #16]
 8003ffe:	3307      	adds	r3, #7
 8004000:	2b00      	cmp	r3, #0
 8004002:	da00      	bge.n	8004006 <DrawChar+0x56>
 8004004:	3307      	adds	r3, #7
 8004006:	10db      	asrs	r3, r3, #3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	b2da      	uxtb	r2, r3
 800400e:	8a3b      	ldrh	r3, [r7, #16]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	e076      	b.n	800410a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800401c:	8a3b      	ldrh	r3, [r7, #16]
 800401e:	3307      	adds	r3, #7
 8004020:	2b00      	cmp	r3, #0
 8004022:	da00      	bge.n	8004026 <DrawChar+0x76>
 8004024:	3307      	adds	r3, #7
 8004026:	10db      	asrs	r3, r3, #3
 8004028:	461a      	mov	r2, r3
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fb03 f302 	mul.w	r3, r3, r2
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	4413      	add	r3, r2
 8004034:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004036:	8a3b      	ldrh	r3, [r7, #16]
 8004038:	3307      	adds	r3, #7
 800403a:	2b00      	cmp	r3, #0
 800403c:	da00      	bge.n	8004040 <DrawChar+0x90>
 800403e:	3307      	adds	r3, #7
 8004040:	10db      	asrs	r3, r3, #3
 8004042:	2b01      	cmp	r3, #1
 8004044:	d002      	beq.n	800404c <DrawChar+0x9c>
 8004046:	2b02      	cmp	r3, #2
 8004048:	d004      	beq.n	8004054 <DrawChar+0xa4>
 800404a:	e00c      	b.n	8004066 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	617b      	str	r3, [r7, #20]
      break;
 8004052:	e016      	b.n	8004082 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	3201      	adds	r2, #1
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
      break;
 8004064:	e00d      	b.n	8004082 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	041a      	lsls	r2, r3, #16
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	4313      	orrs	r3, r2
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	3202      	adds	r2, #2
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
      break;
 8004080:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e036      	b.n	80040f6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004088:	8a3a      	ldrh	r2, [r7, #16]
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad2      	subs	r2, r2, r3
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	4413      	add	r3, r2
 8004092:	3b01      	subs	r3, #1
 8004094:	2201      	movs	r2, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	461a      	mov	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	4413      	add	r3, r2
 80040ac:	b298      	uxth	r0, r3
 80040ae:	4b1b      	ldr	r3, [pc, #108]	; (800411c <DrawChar+0x16c>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	491b      	ldr	r1, [pc, #108]	; (8004120 <DrawChar+0x170>)
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	88bb      	ldrh	r3, [r7, #4]
 80040c2:	4619      	mov	r1, r3
 80040c4:	f7ff ff4e 	bl	8003f64 <BSP_LCD_DrawPixel>
 80040c8:	e012      	b.n	80040f0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	4413      	add	r3, r2
 80040d2:	b298      	uxth	r0, r3
 80040d4:	4b11      	ldr	r3, [pc, #68]	; (800411c <DrawChar+0x16c>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4911      	ldr	r1, [pc, #68]	; (8004120 <DrawChar+0x170>)
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3304      	adds	r3, #4
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	88bb      	ldrh	r3, [r7, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f7ff ff3a 	bl	8003f64 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	8a3b      	ldrh	r3, [r7, #16]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3c4      	bcc.n	8004088 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80040fe:	88bb      	ldrh	r3, [r7, #4]
 8004100:	3301      	adds	r3, #1
 8004102:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	8a7b      	ldrh	r3, [r7, #18]
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	429a      	cmp	r2, r3
 8004110:	d384      	bcc.n	800401c <DrawChar+0x6c>
  }
}
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000220 	.word	0x20000220
 8004120:	20000224 	.word	0x20000224

08004124 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004132:	4b16      	ldr	r3, [pc, #88]	; (800418c <FillBuffer+0x68>)
 8004134:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004138:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <FillBuffer+0x68>)
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004140:	4a12      	ldr	r2, [pc, #72]	; (800418c <FillBuffer+0x68>)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <FillBuffer+0x68>)
 8004148:	4a11      	ldr	r2, [pc, #68]	; (8004190 <FillBuffer+0x6c>)
 800414a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800414c:	480f      	ldr	r0, [pc, #60]	; (800418c <FillBuffer+0x68>)
 800414e:	f000 fdf5 	bl	8004d3c <HAL_DMA2D_Init>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d115      	bne.n	8004184 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	480c      	ldr	r0, [pc, #48]	; (800418c <FillBuffer+0x68>)
 800415c:	f001 f85c 	bl	8005218 <HAL_DMA2D_ConfigLayer>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10e      	bne.n	8004184 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69f9      	ldr	r1, [r7, #28]
 8004170:	4806      	ldr	r0, [pc, #24]	; (800418c <FillBuffer+0x68>)
 8004172:	f000 fe2c 	bl	8004dce <HAL_DMA2D_Start>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800417c:	210a      	movs	r1, #10
 800417e:	4803      	ldr	r0, [pc, #12]	; (800418c <FillBuffer+0x68>)
 8004180:	f000 fe50 	bl	8004e24 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200001b0 	.word	0x200001b0
 8004190:	4002b000 	.word	0x4002b000

08004194 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004198:	4b29      	ldr	r3, [pc, #164]	; (8004240 <BSP_SDRAM_Init+0xac>)
 800419a:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <BSP_SDRAM_Init+0xb0>)
 800419c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800419e:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <BSP_SDRAM_Init+0xb4>)
 80041a0:	2202      	movs	r2, #2
 80041a2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80041a4:	4b28      	ldr	r3, [pc, #160]	; (8004248 <BSP_SDRAM_Init+0xb4>)
 80041a6:	2207      	movs	r2, #7
 80041a8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80041aa:	4b27      	ldr	r3, [pc, #156]	; (8004248 <BSP_SDRAM_Init+0xb4>)
 80041ac:	2204      	movs	r2, #4
 80041ae:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <BSP_SDRAM_Init+0xb4>)
 80041b2:	2207      	movs	r2, #7
 80041b4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <BSP_SDRAM_Init+0xb4>)
 80041b8:	2202      	movs	r2, #2
 80041ba:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80041bc:	4b22      	ldr	r3, [pc, #136]	; (8004248 <BSP_SDRAM_Init+0xb4>)
 80041be:	2202      	movs	r2, #2
 80041c0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80041c2:	4b21      	ldr	r3, [pc, #132]	; (8004248 <BSP_SDRAM_Init+0xb4>)
 80041c4:	2202      	movs	r2, #2
 80041c6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80041c8:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80041ce:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041d6:	2204      	movs	r2, #4
 80041d8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80041da:	4b19      	ldr	r3, [pc, #100]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041dc:	2210      	movs	r2, #16
 80041de:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80041e0:	4b17      	ldr	r3, [pc, #92]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041e2:	2240      	movs	r2, #64	; 0x40
 80041e4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80041e6:	4b16      	ldr	r3, [pc, #88]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80041ec:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80041ee:	4b14      	ldr	r3, [pc, #80]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <BSP_SDRAM_Init+0xac>)
 80041fe:	2200      	movs	r2, #0
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <BSP_SDRAM_Init+0xac>)
 8004204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800420a:	2100      	movs	r1, #0
 800420c:	480c      	ldr	r0, [pc, #48]	; (8004240 <BSP_SDRAM_Init+0xac>)
 800420e:	f000 f87f 	bl	8004310 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004212:	490d      	ldr	r1, [pc, #52]	; (8004248 <BSP_SDRAM_Init+0xb4>)
 8004214:	480a      	ldr	r0, [pc, #40]	; (8004240 <BSP_SDRAM_Init+0xac>)
 8004216:	f005 f835 	bl	8009284 <HAL_SDRAM_Init>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <BSP_SDRAM_Init+0xb8>)
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e002      	b.n	800422e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <BSP_SDRAM_Init+0xb8>)
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800422e:	f240 506a 	movw	r0, #1386	; 0x56a
 8004232:	f000 f80d 	bl	8004250 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <BSP_SDRAM_Init+0xb8>)
 8004238:	781b      	ldrb	r3, [r3, #0]
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	2000023c 	.word	0x2000023c
 8004244:	a0000140 	.word	0xa0000140
 8004248:	20000270 	.word	0x20000270
 800424c:	20000094 	.word	0x20000094

08004250 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004262:	4b29      	ldr	r3, [pc, #164]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004264:	2208      	movs	r2, #8
 8004266:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004268:	4b27      	ldr	r3, [pc, #156]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800426a:	2201      	movs	r2, #1
 800426c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800426e:	4b26      	ldr	r3, [pc, #152]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004270:	2200      	movs	r2, #0
 8004272:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004278:	4923      	ldr	r1, [pc, #140]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800427a:	4824      	ldr	r0, [pc, #144]	; (800430c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800427c:	f005 f836 	bl	80092ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004280:	2001      	movs	r0, #1
 8004282:	f000 fa7f 	bl	8004784 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004288:	2202      	movs	r2, #2
 800428a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800428e:	2208      	movs	r2, #8
 8004290:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004294:	2201      	movs	r2, #1
 8004296:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800429e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a2:	4919      	ldr	r1, [pc, #100]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a4:	4819      	ldr	r0, [pc, #100]	; (800430c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042a6:	f005 f821 	bl	80092ec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80042aa:	4b17      	ldr	r3, [pc, #92]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ac:	2203      	movs	r2, #3
 80042ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042b2:	2208      	movs	r2, #8
 80042b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80042b6:	4b14      	ldr	r3, [pc, #80]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042b8:	2204      	movs	r2, #4
 80042ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80042bc:	4b12      	ldr	r3, [pc, #72]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042be:	2200      	movs	r2, #0
 80042c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80042c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042c6:	4910      	ldr	r1, [pc, #64]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c8:	4810      	ldr	r0, [pc, #64]	; (800430c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042ca:	f005 f80f 	bl	80092ec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80042ce:	f44f 730c 	mov.w	r3, #560	; 0x230
 80042d2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042d6:	2204      	movs	r2, #4
 80042d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042dc:	2208      	movs	r2, #8
 80042de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a07      	ldr	r2, [pc, #28]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80042ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f0:	4905      	ldr	r1, [pc, #20]	; (8004308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042f2:	4806      	ldr	r0, [pc, #24]	; (800430c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042f4:	f004 fffa 	bl	80092ec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4804      	ldr	r0, [pc, #16]	; (800430c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042fc:	f005 f821 	bl	8009342 <HAL_SDRAM_ProgramRefreshRate>
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2000028c 	.word	0x2000028c
 800430c:	2000023c 	.word	0x2000023c

08004310 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b090      	sub	sp, #64	; 0x40
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80ec 	beq.w	80044fa <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
 8004326:	4b77      	ldr	r3, [pc, #476]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	4a76      	ldr	r2, [pc, #472]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6393      	str	r3, [r2, #56]	; 0x38
 8004332:	4b74      	ldr	r3, [pc, #464]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
 8004342:	4b70      	ldr	r3, [pc, #448]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4a6f      	ldr	r2, [pc, #444]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800434c:	6313      	str	r3, [r2, #48]	; 0x30
 800434e:	4b6d      	ldr	r3, [pc, #436]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	4b69      	ldr	r3, [pc, #420]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a68      	ldr	r2, [pc, #416]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
 800436a:	4b66      	ldr	r3, [pc, #408]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	4b62      	ldr	r3, [pc, #392]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	4a61      	ldr	r2, [pc, #388]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004380:	f043 0304 	orr.w	r3, r3, #4
 8004384:	6313      	str	r3, [r2, #48]	; 0x30
 8004386:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4a5a      	ldr	r2, [pc, #360]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 800439c:	f043 0308 	orr.w	r3, r3, #8
 80043a0:	6313      	str	r3, [r2, #48]	; 0x30
 80043a2:	4b58      	ldr	r3, [pc, #352]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	4b54      	ldr	r3, [pc, #336]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a53      	ldr	r2, [pc, #332]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043b8:	f043 0310 	orr.w	r3, r3, #16
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b51      	ldr	r3, [pc, #324]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	4b4d      	ldr	r3, [pc, #308]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a4c      	ldr	r2, [pc, #304]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043d4:	f043 0320 	orr.w	r3, r3, #32
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	4a45      	ldr	r2, [pc, #276]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f4:	6313      	str	r3, [r2, #48]	; 0x30
 80043f6:	4b43      	ldr	r3, [pc, #268]	; (8004504 <BSP_SDRAM_MspInit+0x1f4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004406:	2302      	movs	r3, #2
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800440e:	230c      	movs	r3, #12
 8004410:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004412:	2360      	movs	r3, #96	; 0x60
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800441a:	4619      	mov	r1, r3
 800441c:	483a      	ldr	r0, [pc, #232]	; (8004508 <BSP_SDRAM_MspInit+0x1f8>)
 800441e:	f001 f829 	bl	8005474 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004422:	2301      	movs	r3, #1
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800442a:	4619      	mov	r1, r3
 800442c:	4837      	ldr	r0, [pc, #220]	; (800450c <BSP_SDRAM_MspInit+0x1fc>)
 800442e:	f001 f821 	bl	8005474 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004432:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800443c:	4619      	mov	r1, r3
 800443e:	4834      	ldr	r0, [pc, #208]	; (8004510 <BSP_SDRAM_MspInit+0x200>)
 8004440:	f001 f818 	bl	8005474 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004444:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800444a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800444e:	4619      	mov	r1, r3
 8004450:	4830      	ldr	r0, [pc, #192]	; (8004514 <BSP_SDRAM_MspInit+0x204>)
 8004452:	f001 f80f 	bl	8005474 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004456:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800445c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004460:	4619      	mov	r1, r3
 8004462:	482d      	ldr	r0, [pc, #180]	; (8004518 <BSP_SDRAM_MspInit+0x208>)
 8004464:	f001 f806 	bl	8005474 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004468:	f248 1333 	movw	r3, #33075	; 0x8133
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800446e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004472:	4619      	mov	r1, r3
 8004474:	4829      	ldr	r0, [pc, #164]	; (800451c <BSP_SDRAM_MspInit+0x20c>)
 8004476:	f000 fffd 	bl	8005474 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800447a:	4b29      	ldr	r3, [pc, #164]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 800447c:	2200      	movs	r2, #0
 800447e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004486:	4b26      	ldr	r3, [pc, #152]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 8004488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800448c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800448e:	4b24      	ldr	r3, [pc, #144]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 8004490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004494:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004496:	4b22      	ldr	r3, [pc, #136]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 8004498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800449c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800449e:	4b20      	ldr	r3, [pc, #128]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044a4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80044ac:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044b2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044bc:	2203      	movs	r2, #3
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <BSP_SDRAM_MspInit+0x214>)
 80044d0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a12      	ldr	r2, [pc, #72]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
 80044d8:	4a11      	ldr	r2, [pc, #68]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80044de:	4810      	ldr	r0, [pc, #64]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044e0:	f000 fb1e 	bl	8004b20 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80044e4:	480e      	ldr	r0, [pc, #56]	; (8004520 <BSP_SDRAM_MspInit+0x210>)
 80044e6:	f000 fa6d 	bl	80049c4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	210f      	movs	r1, #15
 80044ee:	2038      	movs	r0, #56	; 0x38
 80044f0:	f000 fa22 	bl	8004938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80044f4:	2038      	movs	r0, #56	; 0x38
 80044f6:	f000 fa3b 	bl	8004970 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80044fa:	bf00      	nop
 80044fc:	3740      	adds	r7, #64	; 0x40
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	40020400 	.word	0x40020400
 800450c:	40020800 	.word	0x40020800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021000 	.word	0x40021000
 8004518:	40021400 	.word	0x40021400
 800451c:	40021800 	.word	0x40021800
 8004520:	2000029c 	.word	0x2000029c
 8004524:	40026410 	.word	0x40026410

08004528 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	460a      	mov	r2, r1
 8004532:	80fb      	strh	r3, [r7, #6]
 8004534:	4613      	mov	r3, r2
 8004536:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800453c:	4a13      	ldr	r2, [pc, #76]	; (800458c <BSP_TS_Init+0x64>)
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004542:	4a13      	ldr	r2, [pc, #76]	; (8004590 <BSP_TS_Init+0x68>)
 8004544:	88bb      	ldrh	r3, [r7, #4]
 8004546:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <BSP_TS_Init+0x6c>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2082      	movs	r0, #130	; 0x82
 800454e:	4798      	blx	r3
 8004550:	4603      	mov	r3, r0
 8004552:	461a      	mov	r2, r3
 8004554:	f640 0311 	movw	r3, #2065	; 0x811
 8004558:	429a      	cmp	r2, r3
 800455a:	d104      	bne.n	8004566 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800455c:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <BSP_TS_Init+0x70>)
 800455e:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <BSP_TS_Init+0x6c>)
 8004560:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <BSP_TS_Init+0x70>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2082      	movs	r0, #130	; 0x82
 8004574:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <BSP_TS_Init+0x70>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2082      	movs	r0, #130	; 0x82
 800457e:	4798      	blx	r3
  }

  return ret;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000300 	.word	0x20000300
 8004590:	20000302 	.word	0x20000302
 8004594:	2000003c 	.word	0x2000003c
 8004598:	200002fc 	.word	0x200002fc

0800459c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80045a4:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <BSP_TS_GetState+0x148>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2082      	movs	r0, #130	; 0x82
 80045ac:	4798      	blx	r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 808d 	beq.w	80046da <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80045c0:	4b48      	ldr	r3, [pc, #288]	; (80046e4 <BSP_TS_GetState+0x148>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f107 020c 	add.w	r2, r7, #12
 80045ca:	f107 010e 	add.w	r1, r7, #14
 80045ce:	2082      	movs	r0, #130	; 0x82
 80045d0:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80045d2:	89bb      	ldrh	r3, [r7, #12]
 80045d4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80045d8:	b29b      	uxth	r3, r3
 80045da:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80045dc:	89bb      	ldrh	r3, [r7, #12]
 80045de:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <BSP_TS_GetState+0x14c>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80045e8:	8abb      	ldrh	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	82bb      	strh	r3, [r7, #20]
 80045f2:	e008      	b.n	8004606 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80045f4:	4b3d      	ldr	r3, [pc, #244]	; (80046ec <BSP_TS_GetState+0x150>)
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	8aba      	ldrh	r2, [r7, #20]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d903      	bls.n	8004606 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80045fe:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <BSP_TS_GetState+0x150>)
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	3b01      	subs	r3, #1
 8004604:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004606:	8abb      	ldrh	r3, [r7, #20]
 8004608:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800460a:	89fb      	ldrh	r3, [r7, #14]
 800460c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004610:	4293      	cmp	r3, r2
 8004612:	d806      	bhi.n	8004622 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004614:	89fb      	ldrh	r3, [r7, #14]
 8004616:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800461a:	330e      	adds	r3, #14
 800461c:	b29b      	uxth	r3, r3
 800461e:	81fb      	strh	r3, [r7, #14]
 8004620:	e005      	b.n	800462e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004622:	89fb      	ldrh	r3, [r7, #14]
 8004624:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004628:	3308      	adds	r3, #8
 800462a:	b29b      	uxth	r3, r3
 800462c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800462e:	89fb      	ldrh	r3, [r7, #14]
 8004630:	4a2f      	ldr	r2, [pc, #188]	; (80046f0 <BSP_TS_GetState+0x154>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	08db      	lsrs	r3, r3, #3
 8004638:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800463a:	8afb      	ldrh	r3, [r7, #22]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	82fb      	strh	r3, [r7, #22]
 8004644:	e008      	b.n	8004658 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004646:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <BSP_TS_GetState+0x158>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	8afa      	ldrh	r2, [r7, #22]
 800464c:	429a      	cmp	r2, r3
 800464e:	d903      	bls.n	8004658 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <BSP_TS_GetState+0x158>)
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004658:	8afb      	ldrh	r3, [r7, #22]
 800465a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800465c:	89fb      	ldrh	r3, [r7, #14]
 800465e:	461a      	mov	r2, r3
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <BSP_TS_GetState+0x15c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d906      	bls.n	8004676 <BSP_TS_GetState+0xda>
 8004668:	89fa      	ldrh	r2, [r7, #14]
 800466a:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <BSP_TS_GetState+0x15c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	b29b      	uxth	r3, r3
 8004674:	e005      	b.n	8004682 <BSP_TS_GetState+0xe6>
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <BSP_TS_GetState+0x15c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	b29a      	uxth	r2, r3
 800467c:	89fb      	ldrh	r3, [r7, #14]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	b29b      	uxth	r3, r3
 8004682:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004684:	89bb      	ldrh	r3, [r7, #12]
 8004686:	461a      	mov	r2, r3
 8004688:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <BSP_TS_GetState+0x160>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d906      	bls.n	800469e <BSP_TS_GetState+0x102>
 8004690:	89ba      	ldrh	r2, [r7, #12]
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <BSP_TS_GetState+0x160>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	b29b      	uxth	r3, r3
 800469c:	e005      	b.n	80046aa <BSP_TS_GetState+0x10e>
 800469e:	4b17      	ldr	r3, [pc, #92]	; (80046fc <BSP_TS_GetState+0x160>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	89bb      	ldrh	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80046ac:	8a7a      	ldrh	r2, [r7, #18]
 80046ae:	8a3b      	ldrh	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	dd07      	ble.n	80046c6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80046b6:	89fb      	ldrh	r3, [r7, #14]
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <BSP_TS_GetState+0x15c>)
 80046bc:	601a      	str	r2, [r3, #0]
      _y = y; 
 80046be:	89bb      	ldrh	r3, [r7, #12]
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <BSP_TS_GetState+0x160>)
 80046c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <BSP_TS_GetState+0x15c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <BSP_TS_GetState+0x160>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	809a      	strh	r2, [r3, #4]
  }
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200002fc 	.word	0x200002fc
 80046e8:	ba2e8ba3 	.word	0xba2e8ba3
 80046ec:	20000302 	.word	0x20000302
 80046f0:	88888889 	.word	0x88888889
 80046f4:	20000300 	.word	0x20000300
 80046f8:	20000304 	.word	0x20000304
 80046fc:	20000308 	.word	0x20000308

08004700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <HAL_Init+0x40>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <HAL_Init+0x40>)
 800470a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800470e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_Init+0x40>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <HAL_Init+0x40>)
 8004716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800471a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800471c:	4b08      	ldr	r3, [pc, #32]	; (8004740 <HAL_Init+0x40>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a07      	ldr	r2, [pc, #28]	; (8004740 <HAL_Init+0x40>)
 8004722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004728:	2003      	movs	r0, #3
 800472a:	f000 f8fa 	bl	8004922 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800472e:	2000      	movs	r0, #0
 8004730:	f7fd fabc 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004734:	f7fd fa8e 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023c00 	.word	0x40023c00

08004744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_IncTick+0x20>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_IncTick+0x24>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4413      	add	r3, r2
 8004754:	4a04      	ldr	r2, [pc, #16]	; (8004768 <HAL_IncTick+0x24>)
 8004756:	6013      	str	r3, [r2, #0]
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	2000009c 	.word	0x2000009c
 8004768:	20000798 	.word	0x20000798

0800476c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return uwTick;
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_GetTick+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000798 	.word	0x20000798

08004784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800478c:	f7ff ffee 	bl	800476c <HAL_GetTick>
 8004790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d005      	beq.n	80047aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <HAL_Delay+0x40>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047aa:	bf00      	nop
 80047ac:	f7ff ffde 	bl	800476c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d8f7      	bhi.n	80047ac <HAL_Delay+0x28>
  {
  }
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	2000009c 	.word	0x2000009c

080047c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <__NVIC_SetPriorityGrouping+0x44>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047e4:	4013      	ands	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047fa:	4a04      	ldr	r2, [pc, #16]	; (800480c <__NVIC_SetPriorityGrouping+0x44>)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	60d3      	str	r3, [r2, #12]
}
 8004800:	bf00      	nop
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <__NVIC_GetPriorityGrouping+0x18>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	f003 0307 	and.w	r3, r3, #7
}
 800481e:	4618      	mov	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000ed00 	.word	0xe000ed00

0800482c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483a:	2b00      	cmp	r3, #0
 800483c:	db0b      	blt.n	8004856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	f003 021f 	and.w	r2, r3, #31
 8004844:	4907      	ldr	r1, [pc, #28]	; (8004864 <__NVIC_EnableIRQ+0x38>)
 8004846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2001      	movs	r0, #1
 800484e:	fa00 f202 	lsl.w	r2, r0, r2
 8004852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	e000e100 	.word	0xe000e100

08004868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004878:	2b00      	cmp	r3, #0
 800487a:	db0a      	blt.n	8004892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	490c      	ldr	r1, [pc, #48]	; (80048b4 <__NVIC_SetPriority+0x4c>)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	440b      	add	r3, r1
 800488c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004890:	e00a      	b.n	80048a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4908      	ldr	r1, [pc, #32]	; (80048b8 <__NVIC_SetPriority+0x50>)
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	3b04      	subs	r3, #4
 80048a0:	0112      	lsls	r2, r2, #4
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	761a      	strb	r2, [r3, #24]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	e000e100 	.word	0xe000e100
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	; 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f1c3 0307 	rsb	r3, r3, #7
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	bf28      	it	cs
 80048da:	2304      	movcs	r3, #4
 80048dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d902      	bls.n	80048ec <NVIC_EncodePriority+0x30>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3b03      	subs	r3, #3
 80048ea:	e000      	b.n	80048ee <NVIC_EncodePriority+0x32>
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43da      	mvns	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	401a      	ands	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004904:	f04f 31ff 	mov.w	r1, #4294967295
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	43d9      	mvns	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004914:	4313      	orrs	r3, r2
         );
}
 8004916:	4618      	mov	r0, r3
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ff4c 	bl	80047c8 <__NVIC_SetPriorityGrouping>
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800494a:	f7ff ff61 	bl	8004810 <__NVIC_GetPriorityGrouping>
 800494e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	6978      	ldr	r0, [r7, #20]
 8004956:	f7ff ffb1 	bl	80048bc <NVIC_EncodePriority>
 800495a:	4602      	mov	r2, r0
 800495c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004960:	4611      	mov	r1, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff ff80 	bl	8004868 <__NVIC_SetPriority>
}
 8004968:	bf00      	nop
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff ff54 	bl	800482c <__NVIC_EnableIRQ>
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e00e      	b.n	80049bc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	795b      	ldrb	r3, [r3, #5]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fb ffda 	bl	8000968 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049d0:	f7ff fecc 	bl	800476c <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e099      	b.n	8004b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a00:	e00f      	b.n	8004a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a02:	f7ff feb3 	bl	800476c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d908      	bls.n	8004a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2203      	movs	r2, #3
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e078      	b.n	8004b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e8      	bne.n	8004a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4b38      	ldr	r3, [pc, #224]	; (8004b1c <HAL_DMA_Init+0x158>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d107      	bne.n	8004a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	4313      	orrs	r3, r2
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0307 	bic.w	r3, r3, #7
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d117      	bne.n	8004ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8bd 	bl	8004c48 <DMA_CheckFifoParam>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2240      	movs	r2, #64	; 0x40
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e016      	b.n	8004b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f874 	bl	8004bdc <DMA_CalcBaseAndBitshift>
 8004af4:	4603      	mov	r3, r0
 8004af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	223f      	movs	r2, #63	; 0x3f
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	f010803f 	.word	0xf010803f

08004b20 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e050      	b.n	8004bd4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d101      	bne.n	8004b42 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e048      	b.n	8004bd4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2221      	movs	r2, #33	; 0x21
 8004b80:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f82a 	bl	8004bdc <DMA_CalcBaseAndBitshift>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb4:	223f      	movs	r2, #63	; 0x3f
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	3b10      	subs	r3, #16
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <DMA_CalcBaseAndBitshift+0x64>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bf6:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <DMA_CalcBaseAndBitshift+0x68>)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d909      	bls.n	8004c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	1d1a      	adds	r2, r3, #4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c1c:	e007      	b.n	8004c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	aaaaaaab 	.word	0xaaaaaaab
 8004c44:	080105f0 	.word	0x080105f0

08004c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11f      	bne.n	8004ca2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d855      	bhi.n	8004d14 <DMA_CheckFifoParam+0xcc>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <DMA_CheckFifoParam+0x28>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c93 	.word	0x08004c93
 8004c78:	08004c81 	.word	0x08004c81
 8004c7c:	08004d15 	.word	0x08004d15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d045      	beq.n	8004d18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c90:	e042      	b.n	8004d18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c9a:	d13f      	bne.n	8004d1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca0:	e03c      	b.n	8004d1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004caa:	d121      	bne.n	8004cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d836      	bhi.n	8004d20 <DMA_CheckFifoParam+0xd8>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <DMA_CheckFifoParam+0x70>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cc9 	.word	0x08004cc9
 8004cbc:	08004ccf 	.word	0x08004ccf
 8004cc0:	08004cc9 	.word	0x08004cc9
 8004cc4:	08004ce1 	.word	0x08004ce1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ccc:	e02f      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d024      	beq.n	8004d24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cde:	e021      	b.n	8004d24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ce8:	d11e      	bne.n	8004d28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cee:	e01b      	b.n	8004d28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d902      	bls.n	8004cfc <DMA_CheckFifoParam+0xb4>
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d003      	beq.n	8004d02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cfa:	e018      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004d00:	e015      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
      break;
 8004d12:	e00b      	b.n	8004d2c <DMA_CheckFifoParam+0xe4>
      break;
 8004d14:	bf00      	nop
 8004d16:	e00a      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
      break;
 8004d18:	bf00      	nop
 8004d1a:	e008      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
      break;
 8004d1c:	bf00      	nop
 8004d1e:	e006      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
      break;
 8004d20:	bf00      	nop
 8004d22:	e004      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
      break;
 8004d24:	bf00      	nop
 8004d26:	e002      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
      break;   
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <DMA_CheckFifoParam+0xe6>
      break;
 8004d2c:	bf00      	nop
    }
  } 
  
  return status; 
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e03b      	b.n	8004dc6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fb fe54 	bl	8000a10 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	f023 0107 	bic.w	r1, r3, #7
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004da6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68d1      	ldr	r1, [r2, #12]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	430b      	orrs	r3, r1
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af02      	add	r7, sp, #8
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_DMA2D_Start+0x1c>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e018      	b.n	8004e1c <HAL_DMA2D_Start+0x4e>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fa99 	bl	800533c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d056      	beq.n	8004eee <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004e40:	f7ff fc94 	bl	800476c <HAL_GetTick>
 8004e44:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004e46:	e04b      	b.n	8004ee0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d023      	beq.n	8004ea2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e68:	f043 0202 	orr.w	r2, r3, #2
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	f043 0201 	orr.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2221      	movs	r2, #33	; 0x21
 8004e8c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2204      	movs	r2, #4
 8004e92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0a5      	b.n	8004fee <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d01a      	beq.n	8004ee0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004eaa:	f7ff fc5f 	bl	800476c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <HAL_DMA2D_PollForTransfer+0x9c>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e086      	b.n	8004fee <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0ac      	beq.n	8004e48 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d061      	beq.n	8004fd4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f10:	f7ff fc2c 	bl	800476c <HAL_GetTick>
 8004f14:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004f16:	e056      	b.n	8004fc6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d02e      	beq.n	8004f88 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	f043 0204 	orr.w	r2, r3, #4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	f043 0202 	orr.w	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2229      	movs	r2, #41	; 0x29
 8004f72:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2204      	movs	r2, #4
 8004f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e032      	b.n	8004fee <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d01a      	beq.n	8004fc6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004f90:	f7ff fbec 	bl	800476c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d302      	bcc.n	8004fa6 <HAL_DMA2D_PollForTransfer+0x182>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	f043 0220 	orr.w	r2, r3, #32
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e013      	b.n	8004fee <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0a1      	beq.n	8004f18 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2212      	movs	r2, #18
 8004fda:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d026      	beq.n	8005066 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d021      	beq.n	8005066 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005030:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2201      	movs	r2, #1
 8005044:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2204      	movs	r2, #4
 800504a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d026      	beq.n	80050be <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d021      	beq.n	80050be <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005088:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2220      	movs	r2, #32
 8005090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	f043 0202 	orr.w	r2, r3, #2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2204      	movs	r2, #4
 80050a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d026      	beq.n	8005116 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d021      	beq.n	8005116 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2208      	movs	r2, #8
 80050e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2204      	movs	r2, #4
 80050fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d013      	beq.n	8005148 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00e      	beq.n	8005148 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2204      	movs	r2, #4
 8005140:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f853 	bl	80051ee <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d024      	beq.n	800519c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01f      	beq.n	800519c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800516a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2202      	movs	r2, #2
 8005172:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01f      	beq.n	80051e6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01a      	beq.n	80051e6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051be:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2210      	movs	r2, #16
 80051c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f80e 	bl	8005202 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80051e6:	bf00      	nop
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_DMA2D_ConfigLayer+0x20>
 8005234:	2302      	movs	r3, #2
 8005236:	e079      	b.n	800532c <HAL_DMA2D_ConfigLayer+0x114>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	3318      	adds	r3, #24
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005262:	4b35      	ldr	r3, [pc, #212]	; (8005338 <HAL_DMA2D_ConfigLayer+0x120>)
 8005264:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b0a      	cmp	r3, #10
 800526c:	d003      	beq.n	8005276 <HAL_DMA2D_ConfigLayer+0x5e>
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b09      	cmp	r3, #9
 8005274:	d107      	bne.n	8005286 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e005      	b.n	8005292 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	061b      	lsls	r3, r3, #24
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d120      	bne.n	80052da <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	ea02 0103 	and.w	r1, r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b0a      	cmp	r3, #10
 80052c0:	d003      	beq.n	80052ca <HAL_DMA2D_ConfigLayer+0xb2>
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	d127      	bne.n	800531a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
 80052d8:	e01f      	b.n	800531a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	ea02 0103 	and.w	r1, r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b0a      	cmp	r3, #10
 8005302:	d003      	beq.n	800530c <HAL_DMA2D_ConfigLayer+0xf4>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b09      	cmp	r3, #9
 800530a:	d106      	bne.n	800531a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005318:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	ff03000f 	.word	0xff03000f

0800533c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800533c:	b480      	push	{r7}
 800533e:	b08b      	sub	sp, #44	; 0x2c
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	041a      	lsls	r2, r3, #16
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	431a      	orrs	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005374:	d174      	bne.n	8005460 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800537c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005384:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800538c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d108      	bne.n	80053ae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	e053      	b.n	8005456 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d106      	bne.n	80053c4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
 80053c2:	e048      	b.n	8005456 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d111      	bne.n	80053f0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	0cdb      	lsrs	r3, r3, #19
 80053d0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	0a9b      	lsrs	r3, r3, #10
 80053d6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	08db      	lsrs	r3, r3, #3
 80053dc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	02db      	lsls	r3, r3, #11
 80053e6:	4313      	orrs	r3, r2
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
 80053ee:	e032      	b.n	8005456 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d117      	bne.n	8005428 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	0fdb      	lsrs	r3, r3, #31
 80053fc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	0cdb      	lsrs	r3, r3, #19
 8005402:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	0adb      	lsrs	r3, r3, #11
 8005408:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	08db      	lsrs	r3, r3, #3
 800540e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	431a      	orrs	r2, r3
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	03db      	lsls	r3, r3, #15
 800541e:	4313      	orrs	r3, r2
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
 8005426:	e016      	b.n	8005456 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	0f1b      	lsrs	r3, r3, #28
 800542c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	0d1b      	lsrs	r3, r3, #20
 8005432:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	0b1b      	lsrs	r3, r3, #12
 8005438:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	011a      	lsls	r2, r3, #4
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	431a      	orrs	r2, r3
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	031b      	lsls	r3, r3, #12
 800544e:	4313      	orrs	r3, r2
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800545e:	e003      	b.n	8005468 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	60da      	str	r2, [r3, #12]
}
 8005468:	bf00      	nop
 800546a:	372c      	adds	r7, #44	; 0x2c
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005474:	b480      	push	{r7}
 8005476:	b089      	sub	sp, #36	; 0x24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005486:	2300      	movs	r3, #0
 8005488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e177      	b.n	8005780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005490:	2201      	movs	r2, #1
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4013      	ands	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	f040 8166 	bne.w	800577a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d00b      	beq.n	80054ce <HAL_GPIO_Init+0x5a>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d007      	beq.n	80054ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054c2:	2b11      	cmp	r3, #17
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b12      	cmp	r3, #18
 80054cc:	d130      	bne.n	8005530 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	2203      	movs	r2, #3
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005504:	2201      	movs	r2, #1
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 0201 	and.w	r2, r3, #1
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	2203      	movs	r2, #3
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d003      	beq.n	8005570 <HAL_GPIO_Init+0xfc>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b12      	cmp	r3, #18
 800556e:	d123      	bne.n	80055b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	08da      	lsrs	r2, r3, #3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3208      	adds	r2, #8
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	220f      	movs	r2, #15
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4013      	ands	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	08da      	lsrs	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3208      	adds	r2, #8
 80055b2:	69b9      	ldr	r1, [r7, #24]
 80055b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	2203      	movs	r2, #3
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4013      	ands	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0203 	and.w	r2, r3, #3
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80c0 	beq.w	800577a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	4b65      	ldr	r3, [pc, #404]	; (8005794 <HAL_GPIO_Init+0x320>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	4a64      	ldr	r2, [pc, #400]	; (8005794 <HAL_GPIO_Init+0x320>)
 8005604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005608:	6453      	str	r3, [r2, #68]	; 0x44
 800560a:	4b62      	ldr	r3, [pc, #392]	; (8005794 <HAL_GPIO_Init+0x320>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005616:	4a60      	ldr	r2, [pc, #384]	; (8005798 <HAL_GPIO_Init+0x324>)
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	089b      	lsrs	r3, r3, #2
 800561c:	3302      	adds	r3, #2
 800561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	220f      	movs	r2, #15
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a57      	ldr	r2, [pc, #348]	; (800579c <HAL_GPIO_Init+0x328>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d037      	beq.n	80056b2 <HAL_GPIO_Init+0x23e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a56      	ldr	r2, [pc, #344]	; (80057a0 <HAL_GPIO_Init+0x32c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d031      	beq.n	80056ae <HAL_GPIO_Init+0x23a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a55      	ldr	r2, [pc, #340]	; (80057a4 <HAL_GPIO_Init+0x330>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02b      	beq.n	80056aa <HAL_GPIO_Init+0x236>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a54      	ldr	r2, [pc, #336]	; (80057a8 <HAL_GPIO_Init+0x334>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d025      	beq.n	80056a6 <HAL_GPIO_Init+0x232>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a53      	ldr	r2, [pc, #332]	; (80057ac <HAL_GPIO_Init+0x338>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01f      	beq.n	80056a2 <HAL_GPIO_Init+0x22e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a52      	ldr	r2, [pc, #328]	; (80057b0 <HAL_GPIO_Init+0x33c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d019      	beq.n	800569e <HAL_GPIO_Init+0x22a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a51      	ldr	r2, [pc, #324]	; (80057b4 <HAL_GPIO_Init+0x340>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_GPIO_Init+0x226>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a50      	ldr	r2, [pc, #320]	; (80057b8 <HAL_GPIO_Init+0x344>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00d      	beq.n	8005696 <HAL_GPIO_Init+0x222>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a4f      	ldr	r2, [pc, #316]	; (80057bc <HAL_GPIO_Init+0x348>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <HAL_GPIO_Init+0x21e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a4e      	ldr	r2, [pc, #312]	; (80057c0 <HAL_GPIO_Init+0x34c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <HAL_GPIO_Init+0x21a>
 800568a:	2309      	movs	r3, #9
 800568c:	e012      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 800568e:	230a      	movs	r3, #10
 8005690:	e010      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 8005692:	2308      	movs	r3, #8
 8005694:	e00e      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 8005696:	2307      	movs	r3, #7
 8005698:	e00c      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 800569a:	2306      	movs	r3, #6
 800569c:	e00a      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 800569e:	2305      	movs	r3, #5
 80056a0:	e008      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 80056a2:	2304      	movs	r3, #4
 80056a4:	e006      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 80056a6:	2303      	movs	r3, #3
 80056a8:	e004      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e002      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_GPIO_Init+0x240>
 80056b2:	2300      	movs	r3, #0
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	f002 0203 	and.w	r2, r2, #3
 80056ba:	0092      	lsls	r2, r2, #2
 80056bc:	4093      	lsls	r3, r2
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056c4:	4934      	ldr	r1, [pc, #208]	; (8005798 <HAL_GPIO_Init+0x324>)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	089b      	lsrs	r3, r3, #2
 80056ca:	3302      	adds	r3, #2
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056d2:	4b3c      	ldr	r3, [pc, #240]	; (80057c4 <HAL_GPIO_Init+0x350>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	43db      	mvns	r3, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056f6:	4a33      	ldr	r2, [pc, #204]	; (80057c4 <HAL_GPIO_Init+0x350>)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_GPIO_Init+0x350>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005720:	4a28      	ldr	r2, [pc, #160]	; (80057c4 <HAL_GPIO_Init+0x350>)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005726:	4b27      	ldr	r3, [pc, #156]	; (80057c4 <HAL_GPIO_Init+0x350>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	43db      	mvns	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4013      	ands	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800574a:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <HAL_GPIO_Init+0x350>)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005750:	4b1c      	ldr	r3, [pc, #112]	; (80057c4 <HAL_GPIO_Init+0x350>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	43db      	mvns	r3, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005774:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <HAL_GPIO_Init+0x350>)
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3301      	adds	r3, #1
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	f67f ae84 	bls.w	8005490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005788:	bf00      	nop
 800578a:	3724      	adds	r7, #36	; 0x24
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	40023800 	.word	0x40023800
 8005798:	40013800 	.word	0x40013800
 800579c:	40020000 	.word	0x40020000
 80057a0:	40020400 	.word	0x40020400
 80057a4:	40020800 	.word	0x40020800
 80057a8:	40020c00 	.word	0x40020c00
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40021400 	.word	0x40021400
 80057b4:	40021800 	.word	0x40021800
 80057b8:	40021c00 	.word	0x40021c00
 80057bc:	40022000 	.word	0x40022000
 80057c0:	40022400 	.word	0x40022400
 80057c4:	40013c00 	.word	0x40013c00

080057c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e0d9      	b.n	8005998 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057e4:	2201      	movs	r2, #1
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4013      	ands	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	f040 80c9 	bne.w	8005992 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005800:	4a6a      	ldr	r2, [pc, #424]	; (80059ac <HAL_GPIO_DeInit+0x1e4>)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	089b      	lsrs	r3, r3, #2
 8005806:	3302      	adds	r3, #2
 8005808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	220f      	movs	r2, #15
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a62      	ldr	r2, [pc, #392]	; (80059b0 <HAL_GPIO_DeInit+0x1e8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d037      	beq.n	800589a <HAL_GPIO_DeInit+0xd2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a61      	ldr	r2, [pc, #388]	; (80059b4 <HAL_GPIO_DeInit+0x1ec>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d031      	beq.n	8005896 <HAL_GPIO_DeInit+0xce>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a60      	ldr	r2, [pc, #384]	; (80059b8 <HAL_GPIO_DeInit+0x1f0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d02b      	beq.n	8005892 <HAL_GPIO_DeInit+0xca>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a5f      	ldr	r2, [pc, #380]	; (80059bc <HAL_GPIO_DeInit+0x1f4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d025      	beq.n	800588e <HAL_GPIO_DeInit+0xc6>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a5e      	ldr	r2, [pc, #376]	; (80059c0 <HAL_GPIO_DeInit+0x1f8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01f      	beq.n	800588a <HAL_GPIO_DeInit+0xc2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a5d      	ldr	r2, [pc, #372]	; (80059c4 <HAL_GPIO_DeInit+0x1fc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d019      	beq.n	8005886 <HAL_GPIO_DeInit+0xbe>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a5c      	ldr	r2, [pc, #368]	; (80059c8 <HAL_GPIO_DeInit+0x200>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <HAL_GPIO_DeInit+0xba>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a5b      	ldr	r2, [pc, #364]	; (80059cc <HAL_GPIO_DeInit+0x204>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00d      	beq.n	800587e <HAL_GPIO_DeInit+0xb6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a5a      	ldr	r2, [pc, #360]	; (80059d0 <HAL_GPIO_DeInit+0x208>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <HAL_GPIO_DeInit+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a59      	ldr	r2, [pc, #356]	; (80059d4 <HAL_GPIO_DeInit+0x20c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <HAL_GPIO_DeInit+0xae>
 8005872:	2309      	movs	r3, #9
 8005874:	e012      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 8005876:	230a      	movs	r3, #10
 8005878:	e010      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 800587a:	2308      	movs	r3, #8
 800587c:	e00e      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 800587e:	2307      	movs	r3, #7
 8005880:	e00c      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 8005882:	2306      	movs	r3, #6
 8005884:	e00a      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 8005886:	2305      	movs	r3, #5
 8005888:	e008      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 800588a:	2304      	movs	r3, #4
 800588c:	e006      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 800588e:	2303      	movs	r3, #3
 8005890:	e004      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 8005892:	2302      	movs	r3, #2
 8005894:	e002      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_GPIO_DeInit+0xd4>
 800589a:	2300      	movs	r3, #0
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	f002 0203 	and.w	r2, r2, #3
 80058a2:	0092      	lsls	r2, r2, #2
 80058a4:	4093      	lsls	r3, r2
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d132      	bne.n	8005912 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80058ac:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <HAL_GPIO_DeInit+0x210>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	43db      	mvns	r3, r3
 80058b4:	4948      	ldr	r1, [pc, #288]	; (80059d8 <HAL_GPIO_DeInit+0x210>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80058ba:	4b47      	ldr	r3, [pc, #284]	; (80059d8 <HAL_GPIO_DeInit+0x210>)
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	4945      	ldr	r1, [pc, #276]	; (80059d8 <HAL_GPIO_DeInit+0x210>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80058c8:	4b43      	ldr	r3, [pc, #268]	; (80059d8 <HAL_GPIO_DeInit+0x210>)
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	43db      	mvns	r3, r3
 80058d0:	4941      	ldr	r1, [pc, #260]	; (80059d8 <HAL_GPIO_DeInit+0x210>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80058d6:	4b40      	ldr	r3, [pc, #256]	; (80059d8 <HAL_GPIO_DeInit+0x210>)
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	43db      	mvns	r3, r3
 80058de:	493e      	ldr	r1, [pc, #248]	; (80059d8 <HAL_GPIO_DeInit+0x210>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	220f      	movs	r2, #15
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80058f4:	4a2d      	ldr	r2, [pc, #180]	; (80059ac <HAL_GPIO_DeInit+0x1e4>)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	089b      	lsrs	r3, r3, #2
 80058fa:	3302      	adds	r3, #2
 80058fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	43da      	mvns	r2, r3
 8005904:	4829      	ldr	r0, [pc, #164]	; (80059ac <HAL_GPIO_DeInit+0x1e4>)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	089b      	lsrs	r3, r3, #2
 800590a:	400a      	ands	r2, r1
 800590c:	3302      	adds	r3, #2
 800590e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	2103      	movs	r1, #3
 800591c:	fa01 f303 	lsl.w	r3, r1, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	401a      	ands	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	08da      	lsrs	r2, r3, #3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3208      	adds	r2, #8
 8005930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	220f      	movs	r2, #15
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	08d2      	lsrs	r2, r2, #3
 8005948:	4019      	ands	r1, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3208      	adds	r2, #8
 800594e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	2103      	movs	r1, #3
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	401a      	ands	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	2101      	movs	r1, #1
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	2103      	movs	r1, #3
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	401a      	ands	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	3301      	adds	r3, #1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b0f      	cmp	r3, #15
 800599c:	f67f af22 	bls.w	80057e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	40013800 	.word	0x40013800
 80059b0:	40020000 	.word	0x40020000
 80059b4:	40020400 	.word	0x40020400
 80059b8:	40020800 	.word	0x40020800
 80059bc:	40020c00 	.word	0x40020c00
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40021400 	.word	0x40021400
 80059c8:	40021800 	.word	0x40021800
 80059cc:	40021c00 	.word	0x40021c00
 80059d0:	40022000 	.word	0x40022000
 80059d4:	40022400 	.word	0x40022400
 80059d8:	40013c00 	.word	0x40013c00

080059dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
 80059e8:	4613      	mov	r3, r2
 80059ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059ec:	787b      	ldrb	r3, [r7, #1]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059f2:	887a      	ldrh	r2, [r7, #2]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059f8:	e003      	b.n	8005a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059fa:	887b      	ldrh	r3, [r7, #2]
 80059fc:	041a      	lsls	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	619a      	str	r2, [r3, #24]
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b086      	sub	sp, #24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f005 fbe9 	bl	800b1fc <USB_GetMode>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	f040 80ef 	bne.w	8005c10 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f005 fbcd 	bl	800b1d6 <USB_ReadInterrupts>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80e5 	beq.w	8005c0e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f005 fbc4 	bl	800b1d6 <USB_ReadInterrupts>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a58:	d104      	bne.n	8005a64 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a62:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f005 fbb4 	bl	800b1d6 <USB_ReadInterrupts>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a78:	d104      	bne.n	8005a84 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a82:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f005 fba4 	bl	800b1d6 <USB_ReadInterrupts>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a98:	d104      	bne.n	8005aa4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005aa2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f005 fb94 	bl	800b1d6 <USB_ReadInterrupts>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d103      	bne.n	8005ac0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2202      	movs	r2, #2
 8005abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f005 fb86 	bl	800b1d6 <USB_ReadInterrupts>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad4:	d115      	bne.n	8005b02 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005ade:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d108      	bne.n	8005b02 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f006 feab 	bl	800c84c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2101      	movs	r1, #1
 8005afc:	4618      	mov	r0, r3
 8005afe:	f005 fb8b 	bl	800b218 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f005 fb65 	bl	800b1d6 <USB_ReadInterrupts>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b16:	d102      	bne.n	8005b1e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f8ef 	bl	8006cfc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f005 fb57 	bl	800b1d6 <USB_ReadInterrupts>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d106      	bne.n	8005b40 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f006 fe6e 	bl	800c814 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f005 fb46 	bl	800b1d6 <USB_ReadInterrupts>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b54:	d138      	bne.n	8005bc8 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f005 fb96 	bl	800b28c <USB_HC_ReadInterrupt>
 8005b60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e025      	b.n	8005bb4 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d018      	beq.n	8005bae <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b92:	d106      	bne.n	8005ba2 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f858 	bl	8005c50 <HCD_HC_IN_IRQHandler>
 8005ba0:	e005      	b.n	8005bae <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fc86 	bl	80064ba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d3d4      	bcc.n	8005b68 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f005 fb02 	bl	800b1d6 <USB_ReadInterrupts>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b10      	cmp	r3, #16
 8005bda:	d101      	bne.n	8005be0 <HAL_HCD_IRQHandler+0x1d2>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <HAL_HCD_IRQHandler+0x1d4>
 8005be0:	2300      	movs	r3, #0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d014      	beq.n	8005c10 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0210 	bic.w	r2, r2, #16
 8005bf4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 ffd4 	bl	8006ba4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0210 	orr.w	r2, r2, #16
 8005c0a:	619a      	str	r2, [r3, #24]
 8005c0c:	e000      	b.n	8005c10 <HAL_HCD_IRQHandler+0x202>
      return;
 8005c0e:	bf00      	nop
    }
  }
}
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_HCD_Stop+0x16>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e00d      	b.n	8005c48 <HAL_HCD_Stop+0x32>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f005 fc37 	bl	800b4ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d119      	bne.n	8005cb4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2304      	movs	r3, #4
 8005c90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cac:	f043 0302 	orr.w	r3, r3, #2
 8005cb0:	60d3      	str	r3, [r2, #12]
 8005cb2:	e0ce      	b.n	8005e52 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cca:	d12c      	bne.n	8005d26 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	440b      	add	r3, r1
 8005cee:	335d      	adds	r3, #93	; 0x5d
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d0e:	f043 0302 	orr.w	r3, r3, #2
 8005d12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f005 fac5 	bl	800b2ae <USB_HC_Halt>
 8005d24:	e095      	b.n	8005e52 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d109      	bne.n	8005d50 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2320      	movs	r3, #32
 8005d4c:	6093      	str	r3, [r2, #8]
 8005d4e:	e080      	b.n	8005e52 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d134      	bne.n	8005dd0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	440b      	add	r3, r1
 8005d94:	335d      	adds	r3, #93	; 0x5d
 8005d96:	2205      	movs	r2, #5
 8005d98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da6:	461a      	mov	r2, r3
 8005da8:	2310      	movs	r3, #16
 8005daa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	2308      	movs	r3, #8
 8005dbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f005 fa70 	bl	800b2ae <USB_HC_Halt>
 8005dce:	e040      	b.n	8005e52 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de6:	d134      	bne.n	8005e52 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e02:	f043 0302 	orr.w	r3, r3, #2
 8005e06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	4611      	mov	r1, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f005 fa4b 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	461a      	mov	r2, r3
 8005e26:	2310      	movs	r3, #16
 8005e28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	440b      	add	r3, r1
 8005e38:	335d      	adds	r3, #93	; 0x5d
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e50:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e68:	d122      	bne.n	8005eb0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f005 fa0a 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005eae:	e300      	b.n	80064b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	f040 80fd 	bne.w	80060c2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01b      	beq.n	8005f08 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	440b      	add	r3, r1
 8005ede:	3348      	adds	r3, #72	; 0x48
 8005ee0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	0159      	lsls	r1, r3, #5
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	440b      	add	r3, r1
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005ef4:	1ad1      	subs	r1, r2, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4403      	add	r3, r0
 8005f04:	334c      	adds	r3, #76	; 0x4c
 8005f06:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	440b      	add	r3, r1
 8005f16:	335d      	adds	r3, #93	; 0x5d
 8005f18:	2201      	movs	r2, #1
 8005f1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	440b      	add	r3, r1
 8005f2a:	3358      	adds	r3, #88	; 0x58
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2301      	movs	r3, #1
 8005f40:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	440b      	add	r3, r1
 8005f50:	333f      	adds	r3, #63	; 0x3f
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	333f      	adds	r3, #63	; 0x3f
 8005f68:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d121      	bne.n	8005fb2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f88:	f043 0302 	orr.w	r3, r3, #2
 8005f8c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	4611      	mov	r1, r2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f005 f988 	bl	800b2ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005faa:	461a      	mov	r2, r3
 8005fac:	2310      	movs	r3, #16
 8005fae:	6093      	str	r3, [r2, #8]
 8005fb0:	e070      	b.n	8006094 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	440b      	add	r3, r1
 8005fc0:	333f      	adds	r3, #63	; 0x3f
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d12a      	bne.n	800601e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fe6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	440b      	add	r3, r1
 8005ff6:	335c      	adds	r3, #92	; 0x5c
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	b2d8      	uxtb	r0, r3
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	440b      	add	r3, r1
 800600e:	335c      	adds	r3, #92	; 0x5c
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	4601      	mov	r1, r0
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f006 fc26 	bl	800c868 <HAL_HCD_HC_NotifyURBChange_Callback>
 800601c:	e03a      	b.n	8006094 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	440b      	add	r3, r1
 800602c:	333f      	adds	r3, #63	; 0x3f
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d12f      	bne.n	8006094 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	440b      	add	r3, r1
 8006042:	335c      	adds	r3, #92	; 0x5c
 8006044:	2201      	movs	r2, #1
 8006046:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	440b      	add	r3, r1
 8006056:	3350      	adds	r3, #80	; 0x50
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f083 0301 	eor.w	r3, r3, #1
 800605e:	b2d8      	uxtb	r0, r3
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	440b      	add	r3, r1
 800606e:	3350      	adds	r3, #80	; 0x50
 8006070:	4602      	mov	r2, r0
 8006072:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	b2d8      	uxtb	r0, r3
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	440b      	add	r3, r1
 8006086:	335c      	adds	r3, #92	; 0x5c
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	4601      	mov	r1, r0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f006 fbea 	bl	800c868 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	440b      	add	r3, r1
 80060a2:	3350      	adds	r3, #80	; 0x50
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f083 0301 	eor.w	r3, r3, #1
 80060aa:	b2d8      	uxtb	r0, r3
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	440b      	add	r3, r1
 80060ba:	3350      	adds	r3, #80	; 0x50
 80060bc:	4602      	mov	r2, r0
 80060be:	701a      	strb	r2, [r3, #0]
}
 80060c0:	e1f7      	b.n	80064b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	f040 811a 	bne.w	800630e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f4:	f023 0302 	bic.w	r3, r3, #2
 80060f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	440b      	add	r3, r1
 8006108:	335d      	adds	r3, #93	; 0x5d
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10a      	bne.n	8006126 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	440b      	add	r3, r1
 800611e:	335c      	adds	r3, #92	; 0x5c
 8006120:	2201      	movs	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	e0d9      	b.n	80062da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	440b      	add	r3, r1
 8006134:	335d      	adds	r3, #93	; 0x5d
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b05      	cmp	r3, #5
 800613a:	d10a      	bne.n	8006152 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	440b      	add	r3, r1
 800614a:	335c      	adds	r3, #92	; 0x5c
 800614c:	2205      	movs	r2, #5
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	e0c3      	b.n	80062da <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	335d      	adds	r3, #93	; 0x5d
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b06      	cmp	r3, #6
 8006166:	d00a      	beq.n	800617e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	440b      	add	r3, r1
 8006176:	335d      	adds	r3, #93	; 0x5d
 8006178:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800617a:	2b08      	cmp	r3, #8
 800617c:	d156      	bne.n	800622c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	440b      	add	r3, r1
 800618c:	3358      	adds	r3, #88	; 0x58
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	1c59      	adds	r1, r3, #1
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4403      	add	r3, r0
 80061a0:	3358      	adds	r3, #88	; 0x58
 80061a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	440b      	add	r3, r1
 80061b2:	3358      	adds	r3, #88	; 0x58
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d914      	bls.n	80061e4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	440b      	add	r3, r1
 80061c8:	3358      	adds	r3, #88	; 0x58
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	440b      	add	r3, r1
 80061dc:	335c      	adds	r3, #92	; 0x5c
 80061de:	2204      	movs	r2, #4
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e009      	b.n	80061f8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	440b      	add	r3, r1
 80061f2:	335c      	adds	r3, #92	; 0x5c
 80061f4:	2202      	movs	r2, #2
 80061f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800620e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006216:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006224:	461a      	mov	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e056      	b.n	80062da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	440b      	add	r3, r1
 800623a:	335d      	adds	r3, #93	; 0x5d
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b03      	cmp	r3, #3
 8006240:	d123      	bne.n	800628a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	440b      	add	r3, r1
 8006250:	335c      	adds	r3, #92	; 0x5c
 8006252:	2202      	movs	r2, #2
 8006254:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800626c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006274:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	e027      	b.n	80062da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	440b      	add	r3, r1
 8006298:	335d      	adds	r3, #93	; 0x5d
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b07      	cmp	r3, #7
 800629e:	d11c      	bne.n	80062da <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	440b      	add	r3, r1
 80062ae:	3358      	adds	r3, #88	; 0x58
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4403      	add	r3, r0
 80062c2:	3358      	adds	r3, #88	; 0x58
 80062c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	440b      	add	r3, r1
 80062d4:	335c      	adds	r3, #92	; 0x5c
 80062d6:	2204      	movs	r2, #4
 80062d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	461a      	mov	r2, r3
 80062e8:	2302      	movs	r3, #2
 80062ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	b2d8      	uxtb	r0, r3
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	440b      	add	r3, r1
 80062fe:	335c      	adds	r3, #92	; 0x5c
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	4601      	mov	r1, r0
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f006 faae 	bl	800c868 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800630c:	e0d1      	b.n	80064b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4413      	add	r3, r2
 8006316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d13e      	bne.n	80063a2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800633e:	f043 0302 	orr.w	r3, r3, #2
 8006342:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	440b      	add	r3, r1
 8006352:	3358      	adds	r3, #88	; 0x58
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4403      	add	r3, r0
 8006366:	3358      	adds	r3, #88	; 0x58
 8006368:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	440b      	add	r3, r1
 8006378:	335d      	adds	r3, #93	; 0x5d
 800637a:	2206      	movs	r2, #6
 800637c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f004 ff90 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639a:	461a      	mov	r2, r3
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	6093      	str	r3, [r2, #8]
}
 80063a0:	e087      	b.n	80064b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d17c      	bne.n	80064b2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	440b      	add	r3, r1
 80063c6:	333f      	adds	r3, #63	; 0x3f
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d122      	bne.n	8006414 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	3358      	adds	r3, #88	; 0x58
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fc:	f043 0302 	orr.w	r3, r3, #2
 8006400:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	4611      	mov	r1, r2
 800640c:	4618      	mov	r0, r3
 800640e:	f004 ff4e 	bl	800b2ae <USB_HC_Halt>
 8006412:	e045      	b.n	80064a0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	440b      	add	r3, r1
 8006422:	333f      	adds	r3, #63	; 0x3f
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	440b      	add	r3, r1
 8006438:	333f      	adds	r3, #63	; 0x3f
 800643a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800643c:	2b02      	cmp	r3, #2
 800643e:	d12f      	bne.n	80064a0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	440b      	add	r3, r1
 800644e:	3358      	adds	r3, #88	; 0x58
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d121      	bne.n	80064a0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	440b      	add	r3, r1
 800646a:	335d      	adds	r3, #93	; 0x5d
 800646c:	2203      	movs	r2, #3
 800646e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	440a      	add	r2, r1
 8006486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648a:	f043 0302 	orr.w	r3, r3, #2
 800648e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f004 ff07 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	461a      	mov	r2, r3
 80064ae:	2310      	movs	r3, #16
 80064b0:	6093      	str	r3, [r2, #8]
}
 80064b2:	bf00      	nop
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d119      	bne.n	800651e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	461a      	mov	r2, r3
 80064f8:	2304      	movs	r3, #4
 80064fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	440a      	add	r2, r1
 8006512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006516:	f043 0302 	orr.w	r3, r3, #2
 800651a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800651c:	e33e      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b20      	cmp	r3, #32
 8006532:	d141      	bne.n	80065b8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006540:	461a      	mov	r2, r3
 8006542:	2320      	movs	r3, #32
 8006544:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	440b      	add	r3, r1
 8006554:	333d      	adds	r3, #61	; 0x3d
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	f040 831f 	bne.w	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	440b      	add	r3, r1
 800656c:	333d      	adds	r3, #61	; 0x3d
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	440b      	add	r3, r1
 8006580:	335c      	adds	r3, #92	; 0x5c
 8006582:	2202      	movs	r2, #2
 8006584:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	440a      	add	r2, r1
 800659c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f004 fe7c 	bl	800b2ae <USB_HC_Halt>
}
 80065b6:	e2f1      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d13f      	bne.n	800664e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	440b      	add	r3, r1
 80065dc:	335d      	adds	r3, #93	; 0x5d
 80065de:	2204      	movs	r2, #4
 80065e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	440b      	add	r3, r1
 80065f0:	333d      	adds	r3, #61	; 0x3d
 80065f2:	2201      	movs	r2, #1
 80065f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	440b      	add	r3, r1
 8006604:	3358      	adds	r3, #88	; 0x58
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	0151      	lsls	r1, r2, #5
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	440a      	add	r2, r1
 8006620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006624:	f043 0302 	orr.w	r3, r3, #2
 8006628:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f004 fe3a 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	4413      	add	r3, r2
 8006642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006646:	461a      	mov	r2, r3
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	6093      	str	r3, [r2, #8]
}
 800664c:	e2a6      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	4413      	add	r3, r2
 8006656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006664:	d122      	bne.n	80066ac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	440a      	add	r2, r1
 800667c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	4611      	mov	r1, r2
 8006690:	4618      	mov	r0, r3
 8006692:	f004 fe0c 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	461a      	mov	r2, r3
 80066a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066a8:	6093      	str	r3, [r2, #8]
}
 80066aa:	e277      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d135      	bne.n	800672e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	440b      	add	r3, r1
 80066d0:	3358      	adds	r3, #88	; 0x58
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	0151      	lsls	r1, r2, #5
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	440a      	add	r2, r1
 80066ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f0:	f043 0302 	orr.w	r3, r3, #2
 80066f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	4611      	mov	r1, r2
 8006700:	4618      	mov	r0, r3
 8006702:	f004 fdd4 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	461a      	mov	r2, r3
 8006714:	2301      	movs	r3, #1
 8006716:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	440b      	add	r3, r1
 8006726:	335d      	adds	r3, #93	; 0x5d
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
}
 800672c:	e236      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b08      	cmp	r3, #8
 8006742:	d12b      	bne.n	800679c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006750:	461a      	mov	r2, r3
 8006752:	2308      	movs	r3, #8
 8006754:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	440a      	add	r2, r1
 800676c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006770:	f043 0302 	orr.w	r3, r3, #2
 8006774:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	4611      	mov	r1, r2
 8006780:	4618      	mov	r0, r3
 8006782:	f004 fd94 	bl	800b2ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	440b      	add	r3, r1
 8006794:	335d      	adds	r3, #93	; 0x5d
 8006796:	2205      	movs	r2, #5
 8006798:	701a      	strb	r2, [r3, #0]
}
 800679a:	e1ff      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b10      	cmp	r3, #16
 80067b0:	d155      	bne.n	800685e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	440b      	add	r3, r1
 80067c0:	3358      	adds	r3, #88	; 0x58
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	440b      	add	r3, r1
 80067d4:	335d      	adds	r3, #93	; 0x5d
 80067d6:	2203      	movs	r2, #3
 80067d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	440b      	add	r3, r1
 80067e8:	333d      	adds	r3, #61	; 0x3d
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d114      	bne.n	800681a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	440b      	add	r3, r1
 80067fe:	333c      	adds	r3, #60	; 0x3c
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	440b      	add	r3, r1
 8006814:	333d      	adds	r3, #61	; 0x3d
 8006816:	2201      	movs	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	440a      	add	r2, r1
 8006830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006834:	f043 0302 	orr.w	r3, r3, #2
 8006838:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	4611      	mov	r1, r2
 8006844:	4618      	mov	r0, r3
 8006846:	f004 fd32 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	461a      	mov	r2, r3
 8006858:	2310      	movs	r3, #16
 800685a:	6093      	str	r3, [r2, #8]
}
 800685c:	e19e      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	d12b      	bne.n	80068cc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	440a      	add	r2, r1
 800688a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800688e:	f043 0302 	orr.w	r3, r3, #2
 8006892:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f004 fd05 	bl	800b2ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	440b      	add	r3, r1
 80068b2:	335d      	adds	r3, #93	; 0x5d
 80068b4:	2206      	movs	r2, #6
 80068b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c4:	461a      	mov	r2, r3
 80068c6:	2380      	movs	r3, #128	; 0x80
 80068c8:	6093      	str	r3, [r2, #8]
}
 80068ca:	e167      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e2:	d135      	bne.n	8006950 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fe:	f043 0302 	orr.w	r3, r3, #2
 8006902:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	4611      	mov	r1, r2
 800690e:	4618      	mov	r0, r3
 8006910:	f004 fccd 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4413      	add	r3, r2
 800691c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006920:	461a      	mov	r2, r3
 8006922:	2310      	movs	r3, #16
 8006924:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4413      	add	r3, r2
 800692e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006932:	461a      	mov	r2, r3
 8006934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006938:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	440b      	add	r3, r1
 8006948:	335d      	adds	r3, #93	; 0x5d
 800694a:	2208      	movs	r2, #8
 800694c:	701a      	strb	r2, [r3, #0]
}
 800694e:	e125      	b.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	4413      	add	r3, r2
 8006958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	f040 811a 	bne.w	8006b9c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4413      	add	r3, r2
 8006970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	440a      	add	r2, r1
 800697e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006982:	f023 0302 	bic.w	r3, r3, #2
 8006986:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	440b      	add	r3, r1
 8006996:	335d      	adds	r3, #93	; 0x5d
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d137      	bne.n	8006a0e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	440b      	add	r3, r1
 80069ac:	335c      	adds	r3, #92	; 0x5c
 80069ae:	2201      	movs	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	440b      	add	r3, r1
 80069c0:	333f      	adds	r3, #63	; 0x3f
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d00b      	beq.n	80069e0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	440b      	add	r3, r1
 80069d6:	333f      	adds	r3, #63	; 0x3f
 80069d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80069da:	2b03      	cmp	r3, #3
 80069dc:	f040 80c5 	bne.w	8006b6a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	440b      	add	r3, r1
 80069ee:	3351      	adds	r3, #81	; 0x51
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	f083 0301 	eor.w	r3, r3, #1
 80069f6:	b2d8      	uxtb	r0, r3
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	440b      	add	r3, r1
 8006a06:	3351      	adds	r3, #81	; 0x51
 8006a08:	4602      	mov	r2, r0
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	e0ad      	b.n	8006b6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	440b      	add	r3, r1
 8006a1c:	335d      	adds	r3, #93	; 0x5d
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d10a      	bne.n	8006a3a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	440b      	add	r3, r1
 8006a32:	335c      	adds	r3, #92	; 0x5c
 8006a34:	2202      	movs	r2, #2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	e097      	b.n	8006b6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	440b      	add	r3, r1
 8006a48:	335d      	adds	r3, #93	; 0x5d
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d10a      	bne.n	8006a66 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	440b      	add	r3, r1
 8006a5e:	335c      	adds	r3, #92	; 0x5c
 8006a60:	2202      	movs	r2, #2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	e081      	b.n	8006b6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	440b      	add	r3, r1
 8006a74:	335d      	adds	r3, #93	; 0x5d
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b05      	cmp	r3, #5
 8006a7a:	d10a      	bne.n	8006a92 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	440b      	add	r3, r1
 8006a8a:	335c      	adds	r3, #92	; 0x5c
 8006a8c:	2205      	movs	r2, #5
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	e06b      	b.n	8006b6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	440b      	add	r3, r1
 8006aa0:	335d      	adds	r3, #93	; 0x5d
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b06      	cmp	r3, #6
 8006aa6:	d00a      	beq.n	8006abe <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	440b      	add	r3, r1
 8006ab6:	335d      	adds	r3, #93	; 0x5d
 8006ab8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d155      	bne.n	8006b6a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	440b      	add	r3, r1
 8006acc:	3358      	adds	r3, #88	; 0x58
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	1c59      	adds	r1, r3, #1
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	4403      	add	r3, r0
 8006ae0:	3358      	adds	r3, #88	; 0x58
 8006ae2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	440b      	add	r3, r1
 8006af2:	3358      	adds	r3, #88	; 0x58
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d914      	bls.n	8006b24 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	440b      	add	r3, r1
 8006b08:	3358      	adds	r3, #88	; 0x58
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	440b      	add	r3, r1
 8006b1c:	335c      	adds	r3, #92	; 0x5c
 8006b1e:	2204      	movs	r2, #4
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	e009      	b.n	8006b38 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	440b      	add	r3, r1
 8006b32:	335c      	adds	r3, #92	; 0x5c
 8006b34:	2202      	movs	r2, #2
 8006b36:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b4e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b56:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b64:	461a      	mov	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b76:	461a      	mov	r2, r3
 8006b78:	2302      	movs	r3, #2
 8006b7a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	b2d8      	uxtb	r0, r3
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	440b      	add	r3, r1
 8006b8e:	335c      	adds	r3, #92	; 0x5c
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	4601      	mov	r1, r0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f005 fe66 	bl	800c868 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006b9c:	bf00      	nop
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	0c5b      	lsrs	r3, r3, #17
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	091b      	lsrs	r3, r3, #4
 8006bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bd8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d003      	beq.n	8006be8 <HCD_RXQLVL_IRQHandler+0x44>
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	f000 8082 	beq.w	8006cea <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006be6:	e083      	b.n	8006cf0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d07f      	beq.n	8006cee <HCD_RXQLVL_IRQHandler+0x14a>
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	440b      	add	r3, r1
 8006bfc:	3344      	adds	r3, #68	; 0x44
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d074      	beq.n	8006cee <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	440b      	add	r3, r1
 8006c16:	3344      	adds	r3, #68	; 0x44
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	b292      	uxth	r2, r2
 8006c1e:	4619      	mov	r1, r3
 8006c20:	f004 fab0 	bl	800b184 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	440b      	add	r3, r1
 8006c32:	3344      	adds	r3, #68	; 0x44
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	18d1      	adds	r1, r2, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4403      	add	r3, r0
 8006c48:	3344      	adds	r3, #68	; 0x44
 8006c4a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	440b      	add	r3, r1
 8006c5a:	334c      	adds	r3, #76	; 0x4c
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	18d1      	adds	r1, r2, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	4403      	add	r3, r0
 8006c70:	334c      	adds	r3, #76	; 0x4c
 8006c72:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c80:	691a      	ldr	r2, [r3, #16]
 8006c82:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <HCD_RXQLVL_IRQHandler+0x154>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d031      	beq.n	8006cee <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ca0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	440b      	add	r3, r1
 8006cca:	3350      	adds	r3, #80	; 0x50
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f083 0301 	eor.w	r3, r3, #1
 8006cd2:	b2d8      	uxtb	r0, r3
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	440b      	add	r3, r1
 8006ce2:	3350      	adds	r3, #80	; 0x50
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	701a      	strb	r2, [r3, #0]
      break;
 8006ce8:	e001      	b.n	8006cee <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006cee:	bf00      	nop
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	1ff80000 	.word	0x1ff80000

08006cfc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006d28:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d10b      	bne.n	8006d4c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d102      	bne.n	8006d44 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f005 fd76 	bl	800c830 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f043 0302 	orr.w	r3, r3, #2
 8006d4a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d132      	bne.n	8006dbc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f043 0308 	orr.w	r3, r3, #8
 8006d5c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d126      	bne.n	8006db6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d113      	bne.n	8006d98 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d7a:	d106      	bne.n	8006d8a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2102      	movs	r1, #2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f004 fa48 	bl	800b218 <USB_InitFSLSPClkSel>
 8006d88:	e011      	b.n	8006dae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2101      	movs	r1, #1
 8006d90:	4618      	mov	r0, r3
 8006d92:	f004 fa41 	bl	800b218 <USB_InitFSLSPClkSel>
 8006d96:	e00a      	b.n	8006dae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d106      	bne.n	8006dae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da6:	461a      	mov	r2, r3
 8006da8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006dac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f005 fd6c 	bl	800c88c <HAL_HCD_PortEnabled_Callback>
 8006db4:	e002      	b.n	8006dbc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f005 fd76 	bl	800c8a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d103      	bne.n	8006dce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f043 0320 	orr.w	r3, r3, #32
 8006dcc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6013      	str	r3, [r2, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e11f      	b.n	8007036 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fa f870 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2224      	movs	r2, #36	; 0x24
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e48:	f002 f804 	bl	8008e54 <HAL_RCC_GetPCLK1Freq>
 8006e4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	4a7b      	ldr	r2, [pc, #492]	; (8007040 <HAL_I2C_Init+0x25c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d807      	bhi.n	8006e68 <HAL_I2C_Init+0x84>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4a7a      	ldr	r2, [pc, #488]	; (8007044 <HAL_I2C_Init+0x260>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	bf94      	ite	ls
 8006e60:	2301      	movls	r3, #1
 8006e62:	2300      	movhi	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	e006      	b.n	8006e76 <HAL_I2C_Init+0x92>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4a77      	ldr	r2, [pc, #476]	; (8007048 <HAL_I2C_Init+0x264>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	bf94      	ite	ls
 8006e70:	2301      	movls	r3, #1
 8006e72:	2300      	movhi	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e0db      	b.n	8007036 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a72      	ldr	r2, [pc, #456]	; (800704c <HAL_I2C_Init+0x268>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	0c9b      	lsrs	r3, r3, #18
 8006e88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	4a64      	ldr	r2, [pc, #400]	; (8007040 <HAL_I2C_Init+0x25c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d802      	bhi.n	8006eb8 <HAL_I2C_Init+0xd4>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	e009      	b.n	8006ecc <HAL_I2C_Init+0xe8>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	4a63      	ldr	r2, [pc, #396]	; (8007050 <HAL_I2C_Init+0x26c>)
 8006ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec8:	099b      	lsrs	r3, r3, #6
 8006eca:	3301      	adds	r3, #1
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6812      	ldr	r2, [r2, #0]
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ede:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	4956      	ldr	r1, [pc, #344]	; (8007040 <HAL_I2C_Init+0x25c>)
 8006ee8:	428b      	cmp	r3, r1
 8006eea:	d80d      	bhi.n	8006f08 <HAL_I2C_Init+0x124>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1e59      	subs	r1, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006efa:	3301      	adds	r3, #1
 8006efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	bf38      	it	cc
 8006f04:	2304      	movcc	r3, #4
 8006f06:	e04f      	b.n	8006fa8 <HAL_I2C_Init+0x1c4>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d111      	bne.n	8006f34 <HAL_I2C_Init+0x150>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	1e58      	subs	r0, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6859      	ldr	r1, [r3, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	440b      	add	r3, r1
 8006f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f22:	3301      	adds	r3, #1
 8006f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	e012      	b.n	8006f5a <HAL_I2C_Init+0x176>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1e58      	subs	r0, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6859      	ldr	r1, [r3, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	0099      	lsls	r1, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_I2C_Init+0x17e>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e022      	b.n	8006fa8 <HAL_I2C_Init+0x1c4>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10e      	bne.n	8006f88 <HAL_I2C_Init+0x1a4>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	1e58      	subs	r0, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6859      	ldr	r1, [r3, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	440b      	add	r3, r1
 8006f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f86:	e00f      	b.n	8006fa8 <HAL_I2C_Init+0x1c4>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	1e58      	subs	r0, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6859      	ldr	r1, [r3, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	0099      	lsls	r1, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	6809      	ldr	r1, [r1, #0]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69da      	ldr	r2, [r3, #28]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006fd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6911      	ldr	r1, [r2, #16]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68d2      	ldr	r2, [r2, #12]
 8006fe2:	4311      	orrs	r1, r2
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695a      	ldr	r2, [r3, #20]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	000186a0 	.word	0x000186a0
 8007044:	001e847f 	.word	0x001e847f
 8007048:	003d08ff 	.word	0x003d08ff
 800704c:	431bde83 	.word	0x431bde83
 8007050:	10624dd3 	.word	0x10624dd3

08007054 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e021      	b.n	80070aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2224      	movs	r2, #36	; 0x24
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7f9 ffa0 	bl	8000fc4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	461a      	mov	r2, r3
 80070c2:	4603      	mov	r3, r0
 80070c4:	817b      	strh	r3, [r7, #10]
 80070c6:	460b      	mov	r3, r1
 80070c8:	813b      	strh	r3, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070ce:	f7fd fb4d 	bl	800476c <HAL_GetTick>
 80070d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b20      	cmp	r3, #32
 80070de:	f040 80d9 	bne.w	8007294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	2319      	movs	r3, #25
 80070e8:	2201      	movs	r2, #1
 80070ea:	496d      	ldr	r1, [pc, #436]	; (80072a0 <HAL_I2C_Mem_Write+0x1ec>)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fc8d 	bl	8007a0c <I2C_WaitOnFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
 80070fa:	e0cc      	b.n	8007296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_I2C_Mem_Write+0x56>
 8007106:	2302      	movs	r3, #2
 8007108:	e0c5      	b.n	8007296 <HAL_I2C_Mem_Write+0x1e2>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d007      	beq.n	8007130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800713e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2221      	movs	r2, #33	; 0x21
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2240      	movs	r2, #64	; 0x40
 800714c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a4d      	ldr	r2, [pc, #308]	; (80072a4 <HAL_I2C_Mem_Write+0x1f0>)
 8007170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007172:	88f8      	ldrh	r0, [r7, #6]
 8007174:	893a      	ldrh	r2, [r7, #8]
 8007176:	8979      	ldrh	r1, [r7, #10]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4603      	mov	r3, r0
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fac4 	bl	8007710 <I2C_RequestMemoryWrite>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d052      	beq.n	8007234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e081      	b.n	8007296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fd0e 	bl	8007bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d107      	bne.n	80071ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e06b      	b.n	8007296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	781a      	ldrb	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d11b      	bne.n	8007234 <HAL_I2C_Mem_Write+0x180>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007200:	2b00      	cmp	r3, #0
 8007202:	d017      	beq.n	8007234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1aa      	bne.n	8007192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fcfa 	bl	8007c3a <I2C_WaitOnBTFFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00d      	beq.n	8007268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	2b04      	cmp	r3, #4
 8007252:	d107      	bne.n	8007264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e016      	b.n	8007296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	e000      	b.n	8007296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007294:	2302      	movs	r3, #2
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	00100002 	.word	0x00100002
 80072a4:	ffff0000 	.word	0xffff0000

080072a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08c      	sub	sp, #48	; 0x30
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	4608      	mov	r0, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	461a      	mov	r2, r3
 80072b6:	4603      	mov	r3, r0
 80072b8:	817b      	strh	r3, [r7, #10]
 80072ba:	460b      	mov	r3, r1
 80072bc:	813b      	strh	r3, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072c2:	f7fd fa53 	bl	800476c <HAL_GetTick>
 80072c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	f040 8208 	bne.w	80076e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	2319      	movs	r3, #25
 80072dc:	2201      	movs	r2, #1
 80072de:	497b      	ldr	r1, [pc, #492]	; (80074cc <HAL_I2C_Mem_Read+0x224>)
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fb93 	bl	8007a0c <I2C_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80072ec:	2302      	movs	r3, #2
 80072ee:	e1fb      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <HAL_I2C_Mem_Read+0x56>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e1f4      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d007      	beq.n	8007324 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2222      	movs	r2, #34	; 0x22
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2240      	movs	r2, #64	; 0x40
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4a5b      	ldr	r2, [pc, #364]	; (80074d0 <HAL_I2C_Mem_Read+0x228>)
 8007364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007366:	88f8      	ldrh	r0, [r7, #6]
 8007368:	893a      	ldrh	r2, [r7, #8]
 800736a:	8979      	ldrh	r1, [r7, #10]
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	4603      	mov	r3, r0
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 fa60 	bl	800783c <I2C_RequestMemoryRead>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e1b0      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d113      	bne.n	80073b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800738e:	2300      	movs	r3, #0
 8007390:	623b      	str	r3, [r7, #32]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	623b      	str	r3, [r7, #32]
 80073a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e184      	b.n	80076c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d11b      	bne.n	80073f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e164      	b.n	80076c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d11b      	bne.n	8007436 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800741c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800741e:	2300      	movs	r3, #0
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	e144      	b.n	80076c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800744c:	e138      	b.n	80076c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007452:	2b03      	cmp	r3, #3
 8007454:	f200 80f1 	bhi.w	800763a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745c:	2b01      	cmp	r3, #1
 800745e:	d123      	bne.n	80074a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 fc29 	bl	8007cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e139      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074a6:	e10b      	b.n	80076c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d14e      	bne.n	800754e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	2200      	movs	r2, #0
 80074b8:	4906      	ldr	r1, [pc, #24]	; (80074d4 <HAL_I2C_Mem_Read+0x22c>)
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 faa6 	bl	8007a0c <I2C_WaitOnFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d008      	beq.n	80074d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e10e      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
 80074ca:	bf00      	nop
 80074cc:	00100002 	.word	0x00100002
 80074d0:	ffff0000 	.word	0xffff0000
 80074d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800754c:	e0b8      	b.n	80076c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	2200      	movs	r2, #0
 8007556:	4966      	ldr	r1, [pc, #408]	; (80076f0 <HAL_I2C_Mem_Read+0x448>)
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fa57 	bl	8007a0c <I2C_WaitOnFlagUntilTimeout>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e0bf      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691a      	ldr	r2, [r3, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	2200      	movs	r2, #0
 80075b2:	494f      	ldr	r1, [pc, #316]	; (80076f0 <HAL_I2C_Mem_Read+0x448>)
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fa29 	bl	8007a0c <I2C_WaitOnFlagUntilTimeout>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e091      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007638:	e042      	b.n	80076c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800763a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 fb3c 	bl	8007cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e04c      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b04      	cmp	r3, #4
 800768c:	d118      	bne.n	80076c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f47f aec2 	bne.w	800744e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e000      	b.n	80076e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
  }
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3728      	adds	r7, #40	; 0x28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	00010004 	.word	0x00010004

080076f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007702:	b2db      	uxtb	r3, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af02      	add	r7, sp, #8
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	4608      	mov	r0, r1
 800771a:	4611      	mov	r1, r2
 800771c:	461a      	mov	r2, r3
 800771e:	4603      	mov	r3, r0
 8007720:	817b      	strh	r3, [r7, #10]
 8007722:	460b      	mov	r3, r1
 8007724:	813b      	strh	r3, [r7, #8]
 8007726:	4613      	mov	r3, r2
 8007728:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007738:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	2200      	movs	r2, #0
 8007742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f960 	bl	8007a0c <I2C_WaitOnFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007760:	d103      	bne.n	800776a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007768:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e05f      	b.n	800782e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800776e:	897b      	ldrh	r3, [r7, #10]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800777c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	6a3a      	ldr	r2, [r7, #32]
 8007782:	492d      	ldr	r1, [pc, #180]	; (8007838 <I2C_RequestMemoryWrite+0x128>)
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f998 	bl	8007aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e04c      	b.n	800782e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007794:	2300      	movs	r3, #0
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ac:	6a39      	ldr	r1, [r7, #32]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fa02 	bl	8007bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00d      	beq.n	80077d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d107      	bne.n	80077d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e02b      	b.n	800782e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d105      	bne.n	80077e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077dc:	893b      	ldrh	r3, [r7, #8]
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	611a      	str	r2, [r3, #16]
 80077e6:	e021      	b.n	800782c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077e8:	893b      	ldrh	r3, [r7, #8]
 80077ea:	0a1b      	lsrs	r3, r3, #8
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f8:	6a39      	ldr	r1, [r7, #32]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f9dc 	bl	8007bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00d      	beq.n	8007822 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	2b04      	cmp	r3, #4
 800780c:	d107      	bne.n	800781e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800781c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e005      	b.n	800782e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007822:	893b      	ldrh	r3, [r7, #8]
 8007824:	b2da      	uxtb	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	00010002 	.word	0x00010002

0800783c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af02      	add	r7, sp, #8
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	4608      	mov	r0, r1
 8007846:	4611      	mov	r1, r2
 8007848:	461a      	mov	r2, r3
 800784a:	4603      	mov	r3, r0
 800784c:	817b      	strh	r3, [r7, #10]
 800784e:	460b      	mov	r3, r1
 8007850:	813b      	strh	r3, [r7, #8]
 8007852:	4613      	mov	r3, r2
 8007854:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007864:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	2200      	movs	r2, #0
 800787e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f8c2 	bl	8007a0c <I2C_WaitOnFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789c:	d103      	bne.n	80078a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e0aa      	b.n	8007a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	6a3a      	ldr	r2, [r7, #32]
 80078be:	4952      	ldr	r1, [pc, #328]	; (8007a08 <I2C_RequestMemoryRead+0x1cc>)
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f8fa 	bl	8007aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e097      	b.n	8007a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e8:	6a39      	ldr	r1, [r7, #32]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f964 	bl	8007bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00d      	beq.n	8007912 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d107      	bne.n	800790e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800790c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e076      	b.n	8007a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d105      	bne.n	8007924 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007918:	893b      	ldrh	r3, [r7, #8]
 800791a:	b2da      	uxtb	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	611a      	str	r2, [r3, #16]
 8007922:	e021      	b.n	8007968 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007924:	893b      	ldrh	r3, [r7, #8]
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	b29b      	uxth	r3, r3
 800792a:	b2da      	uxtb	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007934:	6a39      	ldr	r1, [r7, #32]
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f93e 	bl	8007bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00d      	beq.n	800795e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	2b04      	cmp	r3, #4
 8007948:	d107      	bne.n	800795a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e050      	b.n	8007a00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800795e:	893b      	ldrh	r3, [r7, #8]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796a:	6a39      	ldr	r1, [r7, #32]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f923 	bl	8007bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00d      	beq.n	8007994 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797c:	2b04      	cmp	r3, #4
 800797e:	d107      	bne.n	8007990 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800798e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e035      	b.n	8007a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f82b 	bl	8007a0c <I2C_WaitOnFlagUntilTimeout>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00d      	beq.n	80079d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ca:	d103      	bne.n	80079d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e013      	b.n	8007a00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079d8:	897b      	ldrh	r3, [r7, #10]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f043 0301 	orr.w	r3, r3, #1
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	6a3a      	ldr	r2, [r7, #32]
 80079ec:	4906      	ldr	r1, [pc, #24]	; (8007a08 <I2C_RequestMemoryRead+0x1cc>)
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f863 	bl	8007aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	00010002 	.word	0x00010002

08007a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a1c:	e025      	b.n	8007a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d021      	beq.n	8007a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a26:	f7fc fea1 	bl	800476c <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d302      	bcc.n	8007a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d116      	bne.n	8007a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f043 0220 	orr.w	r2, r3, #32
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e023      	b.n	8007ab2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	0c1b      	lsrs	r3, r3, #16
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d10d      	bne.n	8007a90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	43da      	mvns	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf0c      	ite	eq
 8007a86:	2301      	moveq	r3, #1
 8007a88:	2300      	movne	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	e00c      	b.n	8007aaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	43da      	mvns	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bf0c      	ite	eq
 8007aa2:	2301      	moveq	r3, #1
 8007aa4:	2300      	movne	r3, #0
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d0b6      	beq.n	8007a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ac8:	e051      	b.n	8007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad8:	d123      	bne.n	8007b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ae8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007af2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	f043 0204 	orr.w	r2, r3, #4
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e046      	b.n	8007bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d021      	beq.n	8007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b2a:	f7fc fe1f 	bl	800476c <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d302      	bcc.n	8007b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d116      	bne.n	8007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	f043 0220 	orr.w	r2, r3, #32
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e020      	b.n	8007bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d10c      	bne.n	8007b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	43da      	mvns	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4013      	ands	r3, r2
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bf14      	ite	ne
 8007b8a:	2301      	movne	r3, #1
 8007b8c:	2300      	moveq	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	e00b      	b.n	8007baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	43da      	mvns	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	bf14      	ite	ne
 8007ba4:	2301      	movne	r3, #1
 8007ba6:	2300      	moveq	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d18d      	bne.n	8007aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bc4:	e02d      	b.n	8007c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 f8ce 	bl	8007d68 <I2C_IsAcknowledgeFailed>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e02d      	b.n	8007c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bdc:	d021      	beq.n	8007c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bde:	f7fc fdc5 	bl	800476c <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d302      	bcc.n	8007bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d116      	bne.n	8007c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f043 0220 	orr.w	r2, r3, #32
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e007      	b.n	8007c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d1ca      	bne.n	8007bc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c46:	e02d      	b.n	8007ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f88d 	bl	8007d68 <I2C_IsAcknowledgeFailed>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e02d      	b.n	8007cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5e:	d021      	beq.n	8007ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c60:	f7fc fd84 	bl	800476c <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d302      	bcc.n	8007c76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d116      	bne.n	8007ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e007      	b.n	8007cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f003 0304 	and.w	r3, r3, #4
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d1ca      	bne.n	8007c48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cc8:	e042      	b.n	8007d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d119      	bne.n	8007d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f06f 0210 	mvn.w	r2, #16
 8007ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e029      	b.n	8007d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d0c:	f7fc fd2e 	bl	800476c <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d302      	bcc.n	8007d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d116      	bne.n	8007d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	f043 0220 	orr.w	r2, r3, #32
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e007      	b.n	8007d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d1b5      	bne.n	8007cca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7e:	d11b      	bne.n	8007db8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	f043 0204 	orr.w	r2, r3, #4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e000      	b.n	8007dba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d129      	bne.n	8007e30 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2224      	movs	r2, #36	; 0x24
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0210 	bic.w	r2, r2, #16
 8007e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b085      	sub	sp, #20
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	d12a      	bne.n	8007eae <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2224      	movs	r2, #36	; 0x24
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007e78:	89fb      	ldrh	r3, [r7, #14]
 8007e7a:	f023 030f 	bic.w	r3, r3, #15
 8007e7e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	89fb      	ldrh	r3, [r7, #14]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	89fa      	ldrh	r2, [r7, #14]
 8007e90:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0201 	orr.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e000      	b.n	8007eb0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007eae:	2302      	movs	r3, #2
  }
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e0bf      	b.n	800804e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7f9 fa46 	bl	8001374 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007efe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6999      	ldr	r1, [r3, #24]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f14:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6899      	ldr	r1, [r3, #8]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4b4a      	ldr	r3, [pc, #296]	; (8008058 <HAL_LTDC_Init+0x19c>)
 8007f30:	400b      	ands	r3, r1
 8007f32:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6899      	ldr	r1, [r3, #8]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68d9      	ldr	r1, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b3e      	ldr	r3, [pc, #248]	; (8008058 <HAL_LTDC_Init+0x19c>)
 8007f5e:	400b      	ands	r3, r1
 8007f60:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	041b      	lsls	r3, r3, #16
 8007f68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68d9      	ldr	r1, [r3, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a1a      	ldr	r2, [r3, #32]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6919      	ldr	r1, [r3, #16]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	4b33      	ldr	r3, [pc, #204]	; (8008058 <HAL_LTDC_Init+0x19c>)
 8007f8c:	400b      	ands	r3, r1
 8007f8e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	041b      	lsls	r3, r3, #16
 8007f96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6919      	ldr	r1, [r3, #16]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6959      	ldr	r1, [r3, #20]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	4b27      	ldr	r3, [pc, #156]	; (8008058 <HAL_LTDC_Init+0x19c>)
 8007fba:	400b      	ands	r3, r1
 8007fbc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	041b      	lsls	r3, r3, #16
 8007fc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6959      	ldr	r1, [r3, #20]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007fec:	041b      	lsls	r3, r3, #16
 8007fee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4313      	orrs	r3, r2
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0206 	orr.w	r2, r2, #6
 800802a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	f000f800 	.word	0xf000f800

0800805c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008072:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b00      	cmp	r3, #0
 800807c:	d023      	beq.n	80080c6 <HAL_LTDC_IRQHandler+0x6a>
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01e      	beq.n	80080c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0204 	bic.w	r2, r2, #4
 8008096:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2204      	movs	r2, #4
 800809e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080a6:	f043 0201 	orr.w	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2204      	movs	r2, #4
 80080b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f86f 	bl	80081a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d023      	beq.n	8008118 <HAL_LTDC_IRQHandler+0xbc>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01e      	beq.n	8008118 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0202 	bic.w	r2, r2, #2
 80080e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2202      	movs	r2, #2
 80080f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080f8:	f043 0202 	orr.w	r2, r3, #2
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2204      	movs	r2, #4
 8008106:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f846 	bl	80081a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01b      	beq.n	800815a <HAL_LTDC_IRQHandler+0xfe>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d016      	beq.n	800815a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0201 	bic.w	r2, r2, #1
 800813a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2201      	movs	r2, #1
 8008142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f82f 	bl	80081b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01b      	beq.n	800819c <HAL_LTDC_IRQHandler+0x140>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f003 0308 	and.w	r3, r3, #8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d016      	beq.n	800819c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0208 	bic.w	r2, r2, #8
 800817c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2208      	movs	r2, #8
 8008184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f818 	bl	80081cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800819c:	bf00      	nop
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80081e0:	b5b0      	push	{r4, r5, r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_LTDC_ConfigLayer+0x1a>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e02c      	b.n	8008254 <HAL_LTDC_ConfigLayer+0x74>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2134      	movs	r1, #52	; 0x34
 8008210:	fb01 f303 	mul.w	r3, r1, r3
 8008214:	4413      	add	r3, r2
 8008216:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	4614      	mov	r4, r2
 800821e:	461d      	mov	r5, r3
 8008220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800822a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f83b 	bl	80082b0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2201      	movs	r2, #1
 8008240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bdb0      	pop	{r4, r5, r7, pc}

0800825c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800826a:	2b01      	cmp	r3, #1
 800826c:	d101      	bne.n	8008272 <HAL_LTDC_EnableDither+0x16>
 800826e:	2302      	movs	r3, #2
 8008270:	e016      	b.n	80082a0 <HAL_LTDC_EnableDither+0x44>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2202      	movs	r2, #2
 800827e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008282:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <HAL_LTDC_EnableDither+0x50>)
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	4a09      	ldr	r2, [pc, #36]	; (80082ac <HAL_LTDC_EnableDither+0x50>)
 8008288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800828c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	40016800 	.word	0x40016800

080082b0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b089      	sub	sp, #36	; 0x24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	0c1b      	lsrs	r3, r3, #16
 80082c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082cc:	4413      	add	r3, r2
 80082ce:	041b      	lsls	r3, r3, #16
 80082d0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	01db      	lsls	r3, r3, #7
 80082dc:	4413      	add	r3, r2
 80082de:	3384      	adds	r3, #132	; 0x84
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	4611      	mov	r1, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	01d2      	lsls	r2, r2, #7
 80082ec:	440a      	add	r2, r1
 80082ee:	3284      	adds	r2, #132	; 0x84
 80082f0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80082f4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	0c1b      	lsrs	r3, r3, #16
 8008302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008306:	4413      	add	r3, r2
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	01db      	lsls	r3, r3, #7
 8008314:	440b      	add	r3, r1
 8008316:	3384      	adds	r3, #132	; 0x84
 8008318:	4619      	mov	r1, r3
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4313      	orrs	r3, r2
 800831e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800832e:	4413      	add	r3, r2
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	01db      	lsls	r3, r3, #7
 800833e:	4413      	add	r3, r2
 8008340:	3384      	adds	r3, #132	; 0x84
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	6812      	ldr	r2, [r2, #0]
 8008348:	4611      	mov	r1, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	01d2      	lsls	r2, r2, #7
 800834e:	440a      	add	r2, r1
 8008350:	3284      	adds	r2, #132	; 0x84
 8008352:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008356:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008366:	4413      	add	r3, r2
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4619      	mov	r1, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	01db      	lsls	r3, r3, #7
 8008374:	440b      	add	r3, r1
 8008376:	3384      	adds	r3, #132	; 0x84
 8008378:	4619      	mov	r1, r3
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4313      	orrs	r3, r2
 800837e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	01db      	lsls	r3, r3, #7
 800838a:	4413      	add	r3, r2
 800838c:	3384      	adds	r3, #132	; 0x84
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	4611      	mov	r1, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	01d2      	lsls	r2, r2, #7
 800839a:	440a      	add	r2, r1
 800839c:	3284      	adds	r2, #132	; 0x84
 800839e:	f023 0307 	bic.w	r3, r3, #7
 80083a2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	01db      	lsls	r3, r3, #7
 80083ae:	4413      	add	r3, r2
 80083b0:	3384      	adds	r3, #132	; 0x84
 80083b2:	461a      	mov	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80083ca:	041b      	lsls	r3, r3, #16
 80083cc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	061b      	lsls	r3, r3, #24
 80083d4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	01db      	lsls	r3, r3, #7
 80083e0:	4413      	add	r3, r2
 80083e2:	3384      	adds	r3, #132	; 0x84
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	01db      	lsls	r3, r3, #7
 80083f0:	4413      	add	r3, r2
 80083f2:	3384      	adds	r3, #132	; 0x84
 80083f4:	461a      	mov	r2, r3
 80083f6:	2300      	movs	r3, #0
 80083f8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008400:	461a      	mov	r2, r3
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	431a      	orrs	r2, r3
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	431a      	orrs	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4619      	mov	r1, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	01db      	lsls	r3, r3, #7
 8008414:	440b      	add	r3, r1
 8008416:	3384      	adds	r3, #132	; 0x84
 8008418:	4619      	mov	r1, r3
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	4313      	orrs	r3, r2
 800841e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	461a      	mov	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	01db      	lsls	r3, r3, #7
 800842a:	4413      	add	r3, r2
 800842c:	3384      	adds	r3, #132	; 0x84
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	6812      	ldr	r2, [r2, #0]
 8008434:	4611      	mov	r1, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	01d2      	lsls	r2, r2, #7
 800843a:	440a      	add	r2, r1
 800843c:	3284      	adds	r2, #132	; 0x84
 800843e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008442:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	01db      	lsls	r3, r3, #7
 800844e:	4413      	add	r3, r2
 8008450:	3384      	adds	r3, #132	; 0x84
 8008452:	461a      	mov	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	01db      	lsls	r3, r3, #7
 8008464:	4413      	add	r3, r2
 8008466:	3384      	adds	r3, #132	; 0x84
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	6812      	ldr	r2, [r2, #0]
 800846e:	4611      	mov	r1, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	01d2      	lsls	r2, r2, #7
 8008474:	440a      	add	r2, r1
 8008476:	3284      	adds	r2, #132	; 0x84
 8008478:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800847c:	f023 0307 	bic.w	r3, r3, #7
 8008480:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	69da      	ldr	r2, [r3, #28]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	6809      	ldr	r1, [r1, #0]
 800848e:	4608      	mov	r0, r1
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	01c9      	lsls	r1, r1, #7
 8008494:	4401      	add	r1, r0
 8008496:	3184      	adds	r1, #132	; 0x84
 8008498:	4313      	orrs	r3, r2
 800849a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	01db      	lsls	r3, r3, #7
 80084a6:	4413      	add	r3, r2
 80084a8:	3384      	adds	r3, #132	; 0x84
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	01db      	lsls	r3, r3, #7
 80084b6:	4413      	add	r3, r2
 80084b8:	3384      	adds	r3, #132	; 0x84
 80084ba:	461a      	mov	r2, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	01db      	lsls	r3, r3, #7
 80084ca:	4413      	add	r3, r2
 80084cc:	3384      	adds	r3, #132	; 0x84
 80084ce:	461a      	mov	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80084de:	2304      	movs	r3, #4
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	e01b      	b.n	800851c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d102      	bne.n	80084f2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80084ec:	2303      	movs	r3, #3
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	e014      	b.n	800851c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d00b      	beq.n	8008512 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d007      	beq.n	8008512 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008506:	2b03      	cmp	r3, #3
 8008508:	d003      	beq.n	8008512 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800850e:	2b07      	cmp	r3, #7
 8008510:	d102      	bne.n	8008518 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008512:	2302      	movs	r3, #2
 8008514:	61fb      	str	r3, [r7, #28]
 8008516:	e001      	b.n	800851c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008518:	2301      	movs	r3, #1
 800851a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	01db      	lsls	r3, r3, #7
 8008526:	4413      	add	r3, r2
 8008528:	3384      	adds	r3, #132	; 0x84
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	4611      	mov	r1, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	01d2      	lsls	r2, r2, #7
 8008536:	440a      	add	r2, r1
 8008538:	3284      	adds	r2, #132	; 0x84
 800853a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800853e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	fb02 f303 	mul.w	r3, r2, r3
 800854a:	041a      	lsls	r2, r3, #16
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	6859      	ldr	r1, [r3, #4]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	1acb      	subs	r3, r1, r3
 8008556:	69f9      	ldr	r1, [r7, #28]
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	3303      	adds	r3, #3
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	6809      	ldr	r1, [r1, #0]
 8008562:	4608      	mov	r0, r1
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	01c9      	lsls	r1, r1, #7
 8008568:	4401      	add	r1, r0
 800856a:	3184      	adds	r1, #132	; 0x84
 800856c:	4313      	orrs	r3, r2
 800856e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	461a      	mov	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	01db      	lsls	r3, r3, #7
 800857a:	4413      	add	r3, r2
 800857c:	3384      	adds	r3, #132	; 0x84
 800857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	4611      	mov	r1, r2
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	01d2      	lsls	r2, r2, #7
 800858a:	440a      	add	r2, r1
 800858c:	3284      	adds	r2, #132	; 0x84
 800858e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008592:	f023 0307 	bic.w	r3, r3, #7
 8008596:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	01db      	lsls	r3, r3, #7
 80085a2:	4413      	add	r3, r2
 80085a4:	3384      	adds	r3, #132	; 0x84
 80085a6:	461a      	mov	r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	01db      	lsls	r3, r3, #7
 80085b8:	4413      	add	r3, r2
 80085ba:	3384      	adds	r3, #132	; 0x84
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	4611      	mov	r1, r2
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	01d2      	lsls	r2, r2, #7
 80085c8:	440a      	add	r2, r1
 80085ca:	3284      	adds	r2, #132	; 0x84
 80085cc:	f043 0301 	orr.w	r3, r3, #1
 80085d0:	6013      	str	r3, [r2, #0]
}
 80085d2:	bf00      	nop
 80085d4:	3724      	adds	r7, #36	; 0x24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
	...

080085e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e25b      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d075      	beq.n	80086ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085fe:	4ba3      	ldr	r3, [pc, #652]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f003 030c 	and.w	r3, r3, #12
 8008606:	2b04      	cmp	r3, #4
 8008608:	d00c      	beq.n	8008624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800860a:	4ba0      	ldr	r3, [pc, #640]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008612:	2b08      	cmp	r3, #8
 8008614:	d112      	bne.n	800863c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008616:	4b9d      	ldr	r3, [pc, #628]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800861e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008622:	d10b      	bne.n	800863c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008624:	4b99      	ldr	r3, [pc, #612]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d05b      	beq.n	80086e8 <HAL_RCC_OscConfig+0x108>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d157      	bne.n	80086e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e236      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008644:	d106      	bne.n	8008654 <HAL_RCC_OscConfig+0x74>
 8008646:	4b91      	ldr	r3, [pc, #580]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a90      	ldr	r2, [pc, #576]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800864c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	e01d      	b.n	8008690 <HAL_RCC_OscConfig+0xb0>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800865c:	d10c      	bne.n	8008678 <HAL_RCC_OscConfig+0x98>
 800865e:	4b8b      	ldr	r3, [pc, #556]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a8a      	ldr	r2, [pc, #552]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	4b88      	ldr	r3, [pc, #544]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a87      	ldr	r2, [pc, #540]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e00b      	b.n	8008690 <HAL_RCC_OscConfig+0xb0>
 8008678:	4b84      	ldr	r3, [pc, #528]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a83      	ldr	r2, [pc, #524]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800867e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	4b81      	ldr	r3, [pc, #516]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a80      	ldr	r2, [pc, #512]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800868a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800868e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d013      	beq.n	80086c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008698:	f7fc f868 	bl	800476c <HAL_GetTick>
 800869c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800869e:	e008      	b.n	80086b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086a0:	f7fc f864 	bl	800476c <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	2b64      	cmp	r3, #100	; 0x64
 80086ac:	d901      	bls.n	80086b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e1fb      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b2:	4b76      	ldr	r3, [pc, #472]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0f0      	beq.n	80086a0 <HAL_RCC_OscConfig+0xc0>
 80086be:	e014      	b.n	80086ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c0:	f7fc f854 	bl	800476c <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086c8:	f7fc f850 	bl	800476c <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b64      	cmp	r3, #100	; 0x64
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e1e7      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086da:	4b6c      	ldr	r3, [pc, #432]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1f0      	bne.n	80086c8 <HAL_RCC_OscConfig+0xe8>
 80086e6:	e000      	b.n	80086ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d063      	beq.n	80087be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086f6:	4b65      	ldr	r3, [pc, #404]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 030c 	and.w	r3, r3, #12
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008702:	4b62      	ldr	r3, [pc, #392]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800870a:	2b08      	cmp	r3, #8
 800870c:	d11c      	bne.n	8008748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800870e:	4b5f      	ldr	r3, [pc, #380]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d116      	bne.n	8008748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800871a:	4b5c      	ldr	r3, [pc, #368]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <HAL_RCC_OscConfig+0x152>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d001      	beq.n	8008732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e1bb      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008732:	4b56      	ldr	r3, [pc, #344]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	4952      	ldr	r1, [pc, #328]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008742:	4313      	orrs	r3, r2
 8008744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008746:	e03a      	b.n	80087be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d020      	beq.n	8008792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008750:	4b4f      	ldr	r3, [pc, #316]	; (8008890 <HAL_RCC_OscConfig+0x2b0>)
 8008752:	2201      	movs	r2, #1
 8008754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008756:	f7fc f809 	bl	800476c <HAL_GetTick>
 800875a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800875c:	e008      	b.n	8008770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800875e:	f7fc f805 	bl	800476c <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d901      	bls.n	8008770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e19c      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008770:	4b46      	ldr	r3, [pc, #280]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0f0      	beq.n	800875e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800877c:	4b43      	ldr	r3, [pc, #268]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4940      	ldr	r1, [pc, #256]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800878c:	4313      	orrs	r3, r2
 800878e:	600b      	str	r3, [r1, #0]
 8008790:	e015      	b.n	80087be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008792:	4b3f      	ldr	r3, [pc, #252]	; (8008890 <HAL_RCC_OscConfig+0x2b0>)
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008798:	f7fb ffe8 	bl	800476c <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087a0:	f7fb ffe4 	bl	800476c <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e17b      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b2:	4b36      	ldr	r3, [pc, #216]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1f0      	bne.n	80087a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0308 	and.w	r3, r3, #8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d030      	beq.n	800882c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d016      	beq.n	8008800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087d2:	4b30      	ldr	r3, [pc, #192]	; (8008894 <HAL_RCC_OscConfig+0x2b4>)
 80087d4:	2201      	movs	r2, #1
 80087d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d8:	f7fb ffc8 	bl	800476c <HAL_GetTick>
 80087dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087de:	e008      	b.n	80087f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087e0:	f7fb ffc4 	bl	800476c <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e15b      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f2:	4b26      	ldr	r3, [pc, #152]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 80087f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0f0      	beq.n	80087e0 <HAL_RCC_OscConfig+0x200>
 80087fe:	e015      	b.n	800882c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008800:	4b24      	ldr	r3, [pc, #144]	; (8008894 <HAL_RCC_OscConfig+0x2b4>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008806:	f7fb ffb1 	bl	800476c <HAL_GetTick>
 800880a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800880c:	e008      	b.n	8008820 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800880e:	f7fb ffad 	bl	800476c <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d901      	bls.n	8008820 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e144      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008820:	4b1a      	ldr	r3, [pc, #104]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008824:	f003 0302 	and.w	r3, r3, #2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f0      	bne.n	800880e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80a0 	beq.w	800897a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800883a:	2300      	movs	r3, #0
 800883c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10f      	bne.n	800886a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800884a:	2300      	movs	r3, #0
 800884c:	60bb      	str	r3, [r7, #8]
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	4a0e      	ldr	r2, [pc, #56]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 8008854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008858:	6413      	str	r3, [r2, #64]	; 0x40
 800885a:	4b0c      	ldr	r3, [pc, #48]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008862:	60bb      	str	r3, [r7, #8]
 8008864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008866:	2301      	movs	r3, #1
 8008868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800886a:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <HAL_RCC_OscConfig+0x2b8>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008872:	2b00      	cmp	r3, #0
 8008874:	d121      	bne.n	80088ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008876:	4b08      	ldr	r3, [pc, #32]	; (8008898 <HAL_RCC_OscConfig+0x2b8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a07      	ldr	r2, [pc, #28]	; (8008898 <HAL_RCC_OscConfig+0x2b8>)
 800887c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008882:	f7fb ff73 	bl	800476c <HAL_GetTick>
 8008886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008888:	e011      	b.n	80088ae <HAL_RCC_OscConfig+0x2ce>
 800888a:	bf00      	nop
 800888c:	40023800 	.word	0x40023800
 8008890:	42470000 	.word	0x42470000
 8008894:	42470e80 	.word	0x42470e80
 8008898:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800889c:	f7fb ff66 	bl	800476c <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e0fd      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ae:	4b81      	ldr	r3, [pc, #516]	; (8008ab4 <HAL_RCC_OscConfig+0x4d4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0f0      	beq.n	800889c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d106      	bne.n	80088d0 <HAL_RCC_OscConfig+0x2f0>
 80088c2:	4b7d      	ldr	r3, [pc, #500]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	4a7c      	ldr	r2, [pc, #496]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80088c8:	f043 0301 	orr.w	r3, r3, #1
 80088cc:	6713      	str	r3, [r2, #112]	; 0x70
 80088ce:	e01c      	b.n	800890a <HAL_RCC_OscConfig+0x32a>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b05      	cmp	r3, #5
 80088d6:	d10c      	bne.n	80088f2 <HAL_RCC_OscConfig+0x312>
 80088d8:	4b77      	ldr	r3, [pc, #476]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80088da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088dc:	4a76      	ldr	r2, [pc, #472]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80088de:	f043 0304 	orr.w	r3, r3, #4
 80088e2:	6713      	str	r3, [r2, #112]	; 0x70
 80088e4:	4b74      	ldr	r3, [pc, #464]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80088e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e8:	4a73      	ldr	r2, [pc, #460]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	6713      	str	r3, [r2, #112]	; 0x70
 80088f0:	e00b      	b.n	800890a <HAL_RCC_OscConfig+0x32a>
 80088f2:	4b71      	ldr	r3, [pc, #452]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80088f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f6:	4a70      	ldr	r2, [pc, #448]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	6713      	str	r3, [r2, #112]	; 0x70
 80088fe:	4b6e      	ldr	r3, [pc, #440]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008902:	4a6d      	ldr	r2, [pc, #436]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008904:	f023 0304 	bic.w	r3, r3, #4
 8008908:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d015      	beq.n	800893e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008912:	f7fb ff2b 	bl	800476c <HAL_GetTick>
 8008916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008918:	e00a      	b.n	8008930 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800891a:	f7fb ff27 	bl	800476c <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f241 3288 	movw	r2, #5000	; 0x1388
 8008928:	4293      	cmp	r3, r2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e0bc      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008930:	4b61      	ldr	r3, [pc, #388]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0ee      	beq.n	800891a <HAL_RCC_OscConfig+0x33a>
 800893c:	e014      	b.n	8008968 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800893e:	f7fb ff15 	bl	800476c <HAL_GetTick>
 8008942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008944:	e00a      	b.n	800895c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008946:	f7fb ff11 	bl	800476c <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	f241 3288 	movw	r2, #5000	; 0x1388
 8008954:	4293      	cmp	r3, r2
 8008956:	d901      	bls.n	800895c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e0a6      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800895c:	4b56      	ldr	r3, [pc, #344]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 800895e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1ee      	bne.n	8008946 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d105      	bne.n	800897a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800896e:	4b52      	ldr	r3, [pc, #328]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	4a51      	ldr	r2, [pc, #324]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008978:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 8092 	beq.w	8008aa8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008984:	4b4c      	ldr	r3, [pc, #304]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f003 030c 	and.w	r3, r3, #12
 800898c:	2b08      	cmp	r3, #8
 800898e:	d05c      	beq.n	8008a4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d141      	bne.n	8008a1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008998:	4b48      	ldr	r3, [pc, #288]	; (8008abc <HAL_RCC_OscConfig+0x4dc>)
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800899e:	f7fb fee5 	bl	800476c <HAL_GetTick>
 80089a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a6:	f7fb fee1 	bl	800476c <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e078      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b8:	4b3f      	ldr	r3, [pc, #252]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f0      	bne.n	80089a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69da      	ldr	r2, [r3, #28]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	019b      	lsls	r3, r3, #6
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	085b      	lsrs	r3, r3, #1
 80089dc:	3b01      	subs	r3, #1
 80089de:	041b      	lsls	r3, r3, #16
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	061b      	lsls	r3, r3, #24
 80089e8:	4933      	ldr	r1, [pc, #204]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089ee:	4b33      	ldr	r3, [pc, #204]	; (8008abc <HAL_RCC_OscConfig+0x4dc>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f4:	f7fb feba 	bl	800476c <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089fc:	f7fb feb6 	bl	800476c <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e04d      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a0e:	4b2a      	ldr	r3, [pc, #168]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f0      	beq.n	80089fc <HAL_RCC_OscConfig+0x41c>
 8008a1a:	e045      	b.n	8008aa8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a1c:	4b27      	ldr	r3, [pc, #156]	; (8008abc <HAL_RCC_OscConfig+0x4dc>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a22:	f7fb fea3 	bl	800476c <HAL_GetTick>
 8008a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a28:	e008      	b.n	8008a3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a2a:	f7fb fe9f 	bl	800476c <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d901      	bls.n	8008a3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e036      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a3c:	4b1e      	ldr	r3, [pc, #120]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1f0      	bne.n	8008a2a <HAL_RCC_OscConfig+0x44a>
 8008a48:	e02e      	b.n	8008aa8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e029      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a56:	4b18      	ldr	r3, [pc, #96]	; (8008ab8 <HAL_RCC_OscConfig+0x4d8>)
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d11c      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d115      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a7e:	4013      	ands	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d10d      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d106      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d001      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e000      	b.n	8008aaa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	40007000 	.word	0x40007000
 8008ab8:	40023800 	.word	0x40023800
 8008abc:	42470060 	.word	0x42470060

08008ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e0cc      	b.n	8008c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ad4:	4b68      	ldr	r3, [pc, #416]	; (8008c78 <HAL_RCC_ClockConfig+0x1b8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 030f 	and.w	r3, r3, #15
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d90c      	bls.n	8008afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae2:	4b65      	ldr	r3, [pc, #404]	; (8008c78 <HAL_RCC_ClockConfig+0x1b8>)
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aea:	4b63      	ldr	r3, [pc, #396]	; (8008c78 <HAL_RCC_ClockConfig+0x1b8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d001      	beq.n	8008afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0b8      	b.n	8008c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d020      	beq.n	8008b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b14:	4b59      	ldr	r3, [pc, #356]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	4a58      	ldr	r2, [pc, #352]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b2c:	4b53      	ldr	r3, [pc, #332]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	4a52      	ldr	r2, [pc, #328]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b38:	4b50      	ldr	r3, [pc, #320]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	494d      	ldr	r1, [pc, #308]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d044      	beq.n	8008be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d107      	bne.n	8008b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b5e:	4b47      	ldr	r3, [pc, #284]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d119      	bne.n	8008b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e07f      	b.n	8008c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d003      	beq.n	8008b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d107      	bne.n	8008b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b7e:	4b3f      	ldr	r3, [pc, #252]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d109      	bne.n	8008b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e06f      	b.n	8008c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b8e:	4b3b      	ldr	r3, [pc, #236]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e067      	b.n	8008c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b9e:	4b37      	ldr	r3, [pc, #220]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f023 0203 	bic.w	r2, r3, #3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	4934      	ldr	r1, [pc, #208]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bb0:	f7fb fddc 	bl	800476c <HAL_GetTick>
 8008bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb6:	e00a      	b.n	8008bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bb8:	f7fb fdd8 	bl	800476c <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e04f      	b.n	8008c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bce:	4b2b      	ldr	r3, [pc, #172]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 020c 	and.w	r2, r3, #12
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d1eb      	bne.n	8008bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008be0:	4b25      	ldr	r3, [pc, #148]	; (8008c78 <HAL_RCC_ClockConfig+0x1b8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d20c      	bcs.n	8008c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bee:	4b22      	ldr	r3, [pc, #136]	; (8008c78 <HAL_RCC_ClockConfig+0x1b8>)
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bf6:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <HAL_RCC_ClockConfig+0x1b8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d001      	beq.n	8008c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e032      	b.n	8008c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d008      	beq.n	8008c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c14:	4b19      	ldr	r3, [pc, #100]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	4916      	ldr	r1, [pc, #88]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0308 	and.w	r3, r3, #8
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c32:	4b12      	ldr	r3, [pc, #72]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	490e      	ldr	r1, [pc, #56]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c46:	f000 f821 	bl	8008c8c <HAL_RCC_GetSysClockFreq>
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <HAL_RCC_ClockConfig+0x1bc>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	091b      	lsrs	r3, r3, #4
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	4a0a      	ldr	r2, [pc, #40]	; (8008c80 <HAL_RCC_ClockConfig+0x1c0>)
 8008c58:	5cd3      	ldrb	r3, [r2, r3]
 8008c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8008c5e:	4a09      	ldr	r2, [pc, #36]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c62:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7f9 f820 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	40023c00 	.word	0x40023c00
 8008c7c:	40023800 	.word	0x40023800
 8008c80:	0800cbf0 	.word	0x0800cbf0
 8008c84:	20000000 	.word	0x20000000
 8008c88:	20000098 	.word	0x20000098

08008c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	607b      	str	r3, [r7, #4]
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ca2:	4b63      	ldr	r3, [pc, #396]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 030c 	and.w	r3, r3, #12
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d007      	beq.n	8008cbe <HAL_RCC_GetSysClockFreq+0x32>
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d008      	beq.n	8008cc4 <HAL_RCC_GetSysClockFreq+0x38>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f040 80b4 	bne.w	8008e20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008cb8:	4b5e      	ldr	r3, [pc, #376]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008cba:	60bb      	str	r3, [r7, #8]
       break;
 8008cbc:	e0b3      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cbe:	4b5e      	ldr	r3, [pc, #376]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008cc0:	60bb      	str	r3, [r7, #8]
      break;
 8008cc2:	e0b0      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cc4:	4b5a      	ldr	r3, [pc, #360]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ccc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cce:	4b58      	ldr	r3, [pc, #352]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d04a      	beq.n	8008d70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cda:	4b55      	ldr	r3, [pc, #340]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	099b      	lsrs	r3, r3, #6
 8008ce0:	f04f 0400 	mov.w	r4, #0
 8008ce4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ce8:	f04f 0200 	mov.w	r2, #0
 8008cec:	ea03 0501 	and.w	r5, r3, r1
 8008cf0:	ea04 0602 	and.w	r6, r4, r2
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	f04f 0400 	mov.w	r4, #0
 8008d00:	0154      	lsls	r4, r2, #5
 8008d02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d06:	014b      	lsls	r3, r1, #5
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	1b49      	subs	r1, r1, r5
 8008d0e:	eb62 0206 	sbc.w	r2, r2, r6
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	f04f 0400 	mov.w	r4, #0
 8008d1a:	0194      	lsls	r4, r2, #6
 8008d1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d20:	018b      	lsls	r3, r1, #6
 8008d22:	1a5b      	subs	r3, r3, r1
 8008d24:	eb64 0402 	sbc.w	r4, r4, r2
 8008d28:	f04f 0100 	mov.w	r1, #0
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	00e2      	lsls	r2, r4, #3
 8008d32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d36:	00d9      	lsls	r1, r3, #3
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4614      	mov	r4, r2
 8008d3c:	195b      	adds	r3, r3, r5
 8008d3e:	eb44 0406 	adc.w	r4, r4, r6
 8008d42:	f04f 0100 	mov.w	r1, #0
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	0262      	lsls	r2, r4, #9
 8008d4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008d50:	0259      	lsls	r1, r3, #9
 8008d52:	460b      	mov	r3, r1
 8008d54:	4614      	mov	r4, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	4621      	mov	r1, r4
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f04f 0400 	mov.w	r4, #0
 8008d60:	461a      	mov	r2, r3
 8008d62:	4623      	mov	r3, r4
 8008d64:	f7f7 fa44 	bl	80001f0 <__aeabi_uldivmod>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	e049      	b.n	8008e04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d70:	4b2f      	ldr	r3, [pc, #188]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	099b      	lsrs	r3, r3, #6
 8008d76:	f04f 0400 	mov.w	r4, #0
 8008d7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d7e:	f04f 0200 	mov.w	r2, #0
 8008d82:	ea03 0501 	and.w	r5, r3, r1
 8008d86:	ea04 0602 	and.w	r6, r4, r2
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	f04f 0300 	mov.w	r3, #0
 8008d92:	f04f 0400 	mov.w	r4, #0
 8008d96:	0154      	lsls	r4, r2, #5
 8008d98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d9c:	014b      	lsls	r3, r1, #5
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4622      	mov	r2, r4
 8008da2:	1b49      	subs	r1, r1, r5
 8008da4:	eb62 0206 	sbc.w	r2, r2, r6
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	f04f 0400 	mov.w	r4, #0
 8008db0:	0194      	lsls	r4, r2, #6
 8008db2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008db6:	018b      	lsls	r3, r1, #6
 8008db8:	1a5b      	subs	r3, r3, r1
 8008dba:	eb64 0402 	sbc.w	r4, r4, r2
 8008dbe:	f04f 0100 	mov.w	r1, #0
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	00e2      	lsls	r2, r4, #3
 8008dc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008dcc:	00d9      	lsls	r1, r3, #3
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	195b      	adds	r3, r3, r5
 8008dd4:	eb44 0406 	adc.w	r4, r4, r6
 8008dd8:	f04f 0100 	mov.w	r1, #0
 8008ddc:	f04f 0200 	mov.w	r2, #0
 8008de0:	02a2      	lsls	r2, r4, #10
 8008de2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008de6:	0299      	lsls	r1, r3, #10
 8008de8:	460b      	mov	r3, r1
 8008dea:	4614      	mov	r4, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	4621      	mov	r1, r4
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f04f 0400 	mov.w	r4, #0
 8008df6:	461a      	mov	r2, r3
 8008df8:	4623      	mov	r3, r4
 8008dfa:	f7f7 f9f9 	bl	80001f0 <__aeabi_uldivmod>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e04:	4b0a      	ldr	r3, [pc, #40]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	0c1b      	lsrs	r3, r3, #16
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	3301      	adds	r3, #1
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1c:	60bb      	str	r3, [r7, #8]
      break;
 8008e1e:	e002      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e20:	4b04      	ldr	r3, [pc, #16]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008e22:	60bb      	str	r3, [r7, #8]
      break;
 8008e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e26:	68bb      	ldr	r3, [r7, #8]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e30:	40023800 	.word	0x40023800
 8008e34:	00f42400 	.word	0x00f42400
 8008e38:	007a1200 	.word	0x007a1200

08008e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e40:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e42:	681b      	ldr	r3, [r3, #0]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20000000 	.word	0x20000000

08008e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e58:	f7ff fff0 	bl	8008e3c <HAL_RCC_GetHCLKFreq>
 8008e5c:	4601      	mov	r1, r0
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	0a9b      	lsrs	r3, r3, #10
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	4a03      	ldr	r2, [pc, #12]	; (8008e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e6a:	5cd3      	ldrb	r3, [r2, r3]
 8008e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	40023800 	.word	0x40023800
 8008e78:	0800cc00 	.word	0x0800cc00

08008e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e80:	f7ff ffdc 	bl	8008e3c <HAL_RCC_GetHCLKFreq>
 8008e84:	4601      	mov	r1, r0
 8008e86:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	0b5b      	lsrs	r3, r3, #13
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	4a03      	ldr	r2, [pc, #12]	; (8008ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e92:	5cd3      	ldrb	r3, [r2, r3]
 8008e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	40023800 	.word	0x40023800
 8008ea0:	0800cc00 	.word	0x0800cc00

08008ea4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	220f      	movs	r2, #15
 8008eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008eb4:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <HAL_RCC_GetClockConfig+0x5c>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 0203 	and.w	r2, r3, #3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <HAL_RCC_GetClockConfig+0x5c>)
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008ecc:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <HAL_RCC_GetClockConfig+0x5c>)
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008ed8:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <HAL_RCC_GetClockConfig+0x5c>)
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	08db      	lsrs	r3, r3, #3
 8008ede:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <HAL_RCC_GetClockConfig+0x60>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 020f 	and.w	r2, r3, #15
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	601a      	str	r2, [r3, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40023800 	.word	0x40023800
 8008f04:	40023c00 	.word	0x40023c00

08008f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d075      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f3c:	4bad      	ldr	r3, [pc, #692]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f42:	f7fb fc13 	bl	800476c <HAL_GetTick>
 8008f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f48:	e008      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f4a:	f7fb fc0f 	bl	800476c <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d901      	bls.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e18b      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f5c:	4ba6      	ldr	r3, [pc, #664]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1f0      	bne.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d009      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	019a      	lsls	r2, r3, #6
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	071b      	lsls	r3, r3, #28
 8008f80:	499d      	ldr	r1, [pc, #628]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01f      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f94:	4b98      	ldr	r3, [pc, #608]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f9a:	0f1b      	lsrs	r3, r3, #28
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	019a      	lsls	r2, r3, #6
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	061b      	lsls	r3, r3, #24
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	071b      	lsls	r3, r3, #28
 8008fb4:	4990      	ldr	r1, [pc, #576]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008fbc:	4b8e      	ldr	r3, [pc, #568]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fc2:	f023 021f 	bic.w	r2, r3, #31
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	498a      	ldr	r1, [pc, #552]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00d      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	019a      	lsls	r2, r3, #6
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	061b      	lsls	r3, r3, #24
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	071b      	lsls	r3, r3, #28
 8008ff4:	4980      	ldr	r1, [pc, #512]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ffc:	4b7d      	ldr	r3, [pc, #500]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008ffe:	2201      	movs	r2, #1
 8009000:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009002:	f7fb fbb3 	bl	800476c <HAL_GetTick>
 8009006:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009008:	e008      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800900a:	f7fb fbaf 	bl	800476c <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d901      	bls.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e12b      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800901c:	4b76      	ldr	r3, [pc, #472]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0f0      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d105      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800903c:	2b00      	cmp	r3, #0
 800903e:	d079      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009040:	4b6e      	ldr	r3, [pc, #440]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009046:	f7fb fb91 	bl	800476c <HAL_GetTick>
 800904a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800904c:	e008      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800904e:	f7fb fb8d 	bl	800476c <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e109      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009060:	4b65      	ldr	r3, [pc, #404]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906c:	d0ef      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d020      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800907a:	4b5f      	ldr	r3, [pc, #380]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800907c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009080:	0f1b      	lsrs	r3, r3, #28
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	019a      	lsls	r2, r3, #6
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	061b      	lsls	r3, r3, #24
 8009094:	431a      	orrs	r2, r3
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	071b      	lsls	r3, r3, #28
 800909a:	4957      	ldr	r1, [pc, #348]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800909c:	4313      	orrs	r3, r2
 800909e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80090a2:	4b55      	ldr	r3, [pc, #340]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	4950      	ldr	r1, [pc, #320]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01e      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80090c8:	4b4b      	ldr	r3, [pc, #300]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ce:	0e1b      	lsrs	r3, r3, #24
 80090d0:	f003 030f 	and.w	r3, r3, #15
 80090d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	019a      	lsls	r2, r3, #6
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	061b      	lsls	r3, r3, #24
 80090e0:	431a      	orrs	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	071b      	lsls	r3, r3, #28
 80090e8:	4943      	ldr	r1, [pc, #268]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80090f0:	4b41      	ldr	r3, [pc, #260]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	493e      	ldr	r1, [pc, #248]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009100:	4313      	orrs	r3, r2
 8009102:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009106:	4b3d      	ldr	r3, [pc, #244]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800910c:	f7fb fb2e 	bl	800476c <HAL_GetTick>
 8009110:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009112:	e008      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009114:	f7fb fb2a 	bl	800476c <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d901      	bls.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e0a6      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009126:	4b34      	ldr	r3, [pc, #208]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800912e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009132:	d1ef      	bne.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 808d 	beq.w	800925c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	4b2c      	ldr	r3, [pc, #176]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	4a2b      	ldr	r2, [pc, #172]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800914c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009150:	6413      	str	r3, [r2, #64]	; 0x40
 8009152:	4b29      	ldr	r3, [pc, #164]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800915e:	4b28      	ldr	r3, [pc, #160]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a27      	ldr	r2, [pc, #156]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009168:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800916a:	f7fb faff 	bl	800476c <HAL_GetTick>
 800916e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009170:	e008      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009172:	f7fb fafb 	bl	800476c <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d901      	bls.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e077      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009184:	4b1e      	ldr	r3, [pc, #120]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0f0      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009190:	4b19      	ldr	r3, [pc, #100]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009198:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d039      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d032      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091b8:	4b12      	ldr	r3, [pc, #72]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80091ba:	2201      	movs	r2, #1
 80091bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091be:	4b11      	ldr	r3, [pc, #68]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80091c4:	4a0c      	ldr	r2, [pc, #48]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80091ca:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d11e      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80091d6:	f7fb fac9 	bl	800476c <HAL_GetTick>
 80091da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091dc:	e014      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091de:	f7fb fac5 	bl	800476c <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d90b      	bls.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e03f      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80091f4:	42470068 	.word	0x42470068
 80091f8:	40023800 	.word	0x40023800
 80091fc:	42470070 	.word	0x42470070
 8009200:	40007000 	.word	0x40007000
 8009204:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009208:	4b1c      	ldr	r3, [pc, #112]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800920a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0e4      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800921c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009220:	d10d      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8009222:	4b16      	ldr	r3, [pc, #88]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009236:	4911      	ldr	r1, [pc, #68]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009238:	4313      	orrs	r3, r2
 800923a:	608b      	str	r3, [r1, #8]
 800923c:	e005      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800923e:	4b0f      	ldr	r3, [pc, #60]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	4a0e      	ldr	r2, [pc, #56]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009244:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009248:	6093      	str	r3, [r2, #8]
 800924a:	4b0c      	ldr	r3, [pc, #48]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800924c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009256:	4909      	ldr	r1, [pc, #36]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009258:	4313      	orrs	r3, r2
 800925a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0310 	and.w	r3, r3, #16
 8009264:	2b00      	cmp	r3, #0
 8009266:	d004      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800926e:	4b04      	ldr	r3, [pc, #16]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009270:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	40023800 	.word	0x40023800
 8009280:	424711e0 	.word	0x424711e0

08009284 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e025      	b.n	80092e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7f7 fcb9 	bl	8000c24 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2202      	movs	r2, #2
 80092b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4619      	mov	r1, r3
 80092c4:	4610      	mov	r0, r2
 80092c6:	f001 fdb1 	bl	800ae2c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	461a      	mov	r2, r3
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	f001 fe1c 	bl	800af12 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d101      	bne.n	8009308 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009304:	2302      	movs	r3, #2
 8009306:	e018      	b.n	800933a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	4618      	mov	r0, r3
 800931a:	f001 fe79 	bl	800b010 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d104      	bne.n	8009330 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2205      	movs	r2, #5
 800932a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800932e:	e003      	b.n	8009338 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b02      	cmp	r3, #2
 8009356:	d101      	bne.n	800935c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009358:	2302      	movs	r3, #2
 800935a:	e00e      	b.n	800937a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	4618      	mov	r0, r3
 800936c:	f001 fe8c 	bl	800b088 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e056      	b.n	8009442 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d106      	bne.n	80093b4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7f8 fbea 	bl	8001b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	431a      	orrs	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	431a      	orrs	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	ea42 0103 	orr.w	r1, r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	0c1b      	lsrs	r3, r3, #16
 8009412:	f003 0104 	and.w	r1, r3, #4
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009430:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d101      	bne.n	800945c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e01a      	b.n	8009492 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009472:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7f8 fbcf 	bl	8001c18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b088      	sub	sp, #32
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	603b      	str	r3, [r7, #0]
 80094a6:	4613      	mov	r3, r2
 80094a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_SPI_Transmit+0x22>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e11e      	b.n	80096fa <HAL_SPI_Transmit+0x260>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094c4:	f7fb f952 	bl	800476c <HAL_GetTick>
 80094c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d002      	beq.n	80094e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80094da:	2302      	movs	r3, #2
 80094dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094de:	e103      	b.n	80096e8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <HAL_SPI_Transmit+0x52>
 80094e6:	88fb      	ldrh	r3, [r7, #6]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094f0:	e0fa      	b.n	80096e8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2203      	movs	r2, #3
 80094f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	88fa      	ldrh	r2, [r7, #6]
 800950a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	88fa      	ldrh	r2, [r7, #6]
 8009510:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009538:	d107      	bne.n	800954a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009548:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009554:	2b40      	cmp	r3, #64	; 0x40
 8009556:	d007      	beq.n	8009568 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009570:	d14b      	bne.n	800960a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <HAL_SPI_Transmit+0xe6>
 800957a:	8afb      	ldrh	r3, [r7, #22]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d13e      	bne.n	80095fe <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009584:	881a      	ldrh	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009590:	1c9a      	adds	r2, r3, #2
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095a4:	e02b      	b.n	80095fe <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d112      	bne.n	80095da <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b8:	881a      	ldrh	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c4:	1c9a      	adds	r2, r3, #2
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80095d8:	e011      	b.n	80095fe <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095da:	f7fb f8c7 	bl	800476c <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d803      	bhi.n	80095f2 <HAL_SPI_Transmit+0x158>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f0:	d102      	bne.n	80095f8 <HAL_SPI_Transmit+0x15e>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d102      	bne.n	80095fe <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095fc:	e074      	b.n	80096e8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1ce      	bne.n	80095a6 <HAL_SPI_Transmit+0x10c>
 8009608:	e04c      	b.n	80096a4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <HAL_SPI_Transmit+0x17e>
 8009612:	8afb      	ldrh	r3, [r7, #22]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d140      	bne.n	800969a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	330c      	adds	r3, #12
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009634:	b29b      	uxth	r3, r3
 8009636:	3b01      	subs	r3, #1
 8009638:	b29a      	uxth	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800963e:	e02c      	b.n	800969a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f003 0302 	and.w	r3, r3, #2
 800964a:	2b02      	cmp	r3, #2
 800964c:	d113      	bne.n	8009676 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	330c      	adds	r3, #12
 8009658:	7812      	ldrb	r2, [r2, #0]
 800965a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800966a:	b29b      	uxth	r3, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	b29a      	uxth	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	86da      	strh	r2, [r3, #54]	; 0x36
 8009674:	e011      	b.n	800969a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009676:	f7fb f879 	bl	800476c <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d803      	bhi.n	800968e <HAL_SPI_Transmit+0x1f4>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d102      	bne.n	8009694 <HAL_SPI_Transmit+0x1fa>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009698:	e026      	b.n	80096e8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969e:	b29b      	uxth	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1cd      	bne.n	8009640 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 fbb3 	bl	8009e14 <SPI_EndRxTxTransaction>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10a      	bne.n	80096d8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096c2:	2300      	movs	r3, #0
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	613b      	str	r3, [r7, #16]
 80096d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	77fb      	strb	r3, [r7, #31]
 80096e4:	e000      	b.n	80096e8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80096e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b088      	sub	sp, #32
 8009706:	af02      	add	r7, sp, #8
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	603b      	str	r3, [r7, #0]
 800970e:	4613      	mov	r3, r2
 8009710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800971e:	d112      	bne.n	8009746 <HAL_SPI_Receive+0x44>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10e      	bne.n	8009746 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2204      	movs	r2, #4
 800972c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009730:	88fa      	ldrh	r2, [r7, #6]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	4613      	mov	r3, r2
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	68b9      	ldr	r1, [r7, #8]
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 f8e9 	bl	8009914 <HAL_SPI_TransmitReceive>
 8009742:	4603      	mov	r3, r0
 8009744:	e0e2      	b.n	800990c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800974c:	2b01      	cmp	r3, #1
 800974e:	d101      	bne.n	8009754 <HAL_SPI_Receive+0x52>
 8009750:	2302      	movs	r3, #2
 8009752:	e0db      	b.n	800990c <HAL_SPI_Receive+0x20a>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800975c:	f7fb f806 	bl	800476c <HAL_GetTick>
 8009760:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b01      	cmp	r3, #1
 800976c:	d002      	beq.n	8009774 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800976e:	2302      	movs	r3, #2
 8009770:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009772:	e0c2      	b.n	80098fa <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <HAL_SPI_Receive+0x7e>
 800977a:	88fb      	ldrh	r3, [r7, #6]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d102      	bne.n	8009786 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009784:	e0b9      	b.n	80098fa <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2204      	movs	r2, #4
 800978a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	88fa      	ldrh	r2, [r7, #6]
 800979e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	88fa      	ldrh	r2, [r7, #6]
 80097a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097cc:	d107      	bne.n	80097de <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e8:	2b40      	cmp	r3, #64	; 0x40
 80097ea:	d007      	beq.n	80097fc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d162      	bne.n	80098ca <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009804:	e02e      	b.n	8009864 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b01      	cmp	r3, #1
 8009812:	d115      	bne.n	8009840 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f103 020c 	add.w	r2, r3, #12
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	b2d2      	uxtb	r2, r2
 8009824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009834:	b29b      	uxth	r3, r3
 8009836:	3b01      	subs	r3, #1
 8009838:	b29a      	uxth	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800983e:	e011      	b.n	8009864 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009840:	f7fa ff94 	bl	800476c <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	429a      	cmp	r2, r3
 800984e:	d803      	bhi.n	8009858 <HAL_SPI_Receive+0x156>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009856:	d102      	bne.n	800985e <HAL_SPI_Receive+0x15c>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d102      	bne.n	8009864 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009862:	e04a      	b.n	80098fa <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009868:	b29b      	uxth	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1cb      	bne.n	8009806 <HAL_SPI_Receive+0x104>
 800986e:	e031      	b.n	80098d4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b01      	cmp	r3, #1
 800987c:	d113      	bne.n	80098a6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	b292      	uxth	r2, r2
 800988a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	1c9a      	adds	r2, r3, #2
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800989a:	b29b      	uxth	r3, r3
 800989c:	3b01      	subs	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098a4:	e011      	b.n	80098ca <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098a6:	f7fa ff61 	bl	800476c <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d803      	bhi.n	80098be <HAL_SPI_Receive+0x1bc>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098bc:	d102      	bne.n	80098c4 <HAL_SPI_Receive+0x1c2>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80098c8:	e017      	b.n	80098fa <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1cd      	bne.n	8009870 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fa35 	bl	8009d48 <SPI_EndRxTransaction>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2220      	movs	r2, #32
 80098e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	75fb      	strb	r3, [r7, #23]
 80098f6:	e000      	b.n	80098fa <HAL_SPI_Receive+0x1f8>
  }

error :
 80098f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800990a:	7dfb      	ldrb	r3, [r7, #23]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08c      	sub	sp, #48	; 0x30
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009922:	2301      	movs	r3, #1
 8009924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HAL_SPI_TransmitReceive+0x26>
 8009936:	2302      	movs	r3, #2
 8009938:	e18a      	b.n	8009c50 <HAL_SPI_TransmitReceive+0x33c>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009942:	f7fa ff13 	bl	800476c <HAL_GetTick>
 8009946:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800994e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009958:	887b      	ldrh	r3, [r7, #2]
 800995a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800995c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009960:	2b01      	cmp	r3, #1
 8009962:	d00f      	beq.n	8009984 <HAL_SPI_TransmitReceive+0x70>
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800996a:	d107      	bne.n	800997c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d103      	bne.n	800997c <HAL_SPI_TransmitReceive+0x68>
 8009974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009978:	2b04      	cmp	r3, #4
 800997a:	d003      	beq.n	8009984 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800997c:	2302      	movs	r3, #2
 800997e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009982:	e15b      	b.n	8009c3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d005      	beq.n	8009996 <HAL_SPI_TransmitReceive+0x82>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <HAL_SPI_TransmitReceive+0x82>
 8009990:	887b      	ldrh	r3, [r7, #2]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800999c:	e14e      	b.n	8009c3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	d003      	beq.n	80099b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2205      	movs	r2, #5
 80099ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	887a      	ldrh	r2, [r7, #2]
 80099c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	887a      	ldrh	r2, [r7, #2]
 80099c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	887a      	ldrh	r2, [r7, #2]
 80099d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	887a      	ldrh	r2, [r7, #2]
 80099da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f2:	2b40      	cmp	r3, #64	; 0x40
 80099f4:	d007      	beq.n	8009a06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a0e:	d178      	bne.n	8009b02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <HAL_SPI_TransmitReceive+0x10a>
 8009a18:	8b7b      	ldrh	r3, [r7, #26]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d166      	bne.n	8009aec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a22:	881a      	ldrh	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2e:	1c9a      	adds	r2, r3, #2
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a42:	e053      	b.n	8009aec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d11b      	bne.n	8009a8a <HAL_SPI_TransmitReceive+0x176>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d016      	beq.n	8009a8a <HAL_SPI_TransmitReceive+0x176>
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d113      	bne.n	8009a8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	881a      	ldrh	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a72:	1c9a      	adds	r2, r3, #2
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d119      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x1b8>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d014      	beq.n	8009acc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68da      	ldr	r2, [r3, #12]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aac:	b292      	uxth	r2, r2
 8009aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	1c9a      	adds	r2, r3, #2
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009acc:	f7fa fe4e 	bl	800476c <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d807      	bhi.n	8009aec <HAL_SPI_TransmitReceive+0x1d8>
 8009adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	d003      	beq.n	8009aec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009aea:	e0a7      	b.n	8009c3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1a6      	bne.n	8009a44 <HAL_SPI_TransmitReceive+0x130>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1a1      	bne.n	8009a44 <HAL_SPI_TransmitReceive+0x130>
 8009b00:	e07c      	b.n	8009bfc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <HAL_SPI_TransmitReceive+0x1fc>
 8009b0a:	8b7b      	ldrh	r3, [r7, #26]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d16b      	bne.n	8009be8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	330c      	adds	r3, #12
 8009b1a:	7812      	ldrb	r2, [r2, #0]
 8009b1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b36:	e057      	b.n	8009be8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d11c      	bne.n	8009b80 <HAL_SPI_TransmitReceive+0x26c>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d017      	beq.n	8009b80 <HAL_SPI_TransmitReceive+0x26c>
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d114      	bne.n	8009b80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	330c      	adds	r3, #12
 8009b60:	7812      	ldrb	r2, [r2, #0]
 8009b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	3b01      	subs	r3, #1
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d119      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x2ae>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d014      	beq.n	8009bc2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68da      	ldr	r2, [r3, #12]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009bc2:	f7fa fdd3 	bl	800476c <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d803      	bhi.n	8009bda <HAL_SPI_TransmitReceive+0x2c6>
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd8:	d102      	bne.n	8009be0 <HAL_SPI_TransmitReceive+0x2cc>
 8009bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d103      	bne.n	8009be8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009be6:	e029      	b.n	8009c3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1a2      	bne.n	8009b38 <HAL_SPI_TransmitReceive+0x224>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d19d      	bne.n	8009b38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f907 	bl	8009e14 <SPI_EndRxTxTransaction>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d006      	beq.n	8009c1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2220      	movs	r2, #32
 8009c16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009c18:	e010      	b.n	8009c3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c22:	2300      	movs	r3, #0
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	617b      	str	r3, [r7, #20]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	e000      	b.n	8009c3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3730      	adds	r7, #48	; 0x30
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c66:	b2db      	uxtb	r3, r3
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	4613      	mov	r3, r2
 8009c82:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c84:	e04c      	b.n	8009d20 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d048      	beq.n	8009d20 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009c8e:	f7fa fd6d 	bl	800476c <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d902      	bls.n	8009ca4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d13d      	bne.n	8009d20 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cbc:	d111      	bne.n	8009ce2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc6:	d004      	beq.n	8009cd2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cd0:	d107      	bne.n	8009ce2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cea:	d10f      	bne.n	8009d0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e00f      	b.n	8009d40 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689a      	ldr	r2, [r3, #8]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	bf0c      	ite	eq
 8009d30:	2301      	moveq	r3, #1
 8009d32:	2300      	movne	r3, #0
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	461a      	mov	r2, r3
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d1a3      	bne.n	8009c86 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d5c:	d111      	bne.n	8009d82 <SPI_EndRxTransaction+0x3a>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d66:	d004      	beq.n	8009d72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d70:	d107      	bne.n	8009d82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d8a:	d12a      	bne.n	8009de2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d94:	d012      	beq.n	8009dbc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2180      	movs	r1, #128	; 0x80
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f7ff ff67 	bl	8009c74 <SPI_WaitFlagStateUntilTimeout>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d02d      	beq.n	8009e08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db0:	f043 0220 	orr.w	r2, r3, #32
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e026      	b.n	8009e0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff ff54 	bl	8009c74 <SPI_WaitFlagStateUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d01a      	beq.n	8009e08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd6:	f043 0220 	orr.w	r2, r3, #32
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e013      	b.n	8009e0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2200      	movs	r2, #0
 8009dea:	2101      	movs	r1, #1
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f7ff ff41 	bl	8009c74 <SPI_WaitFlagStateUntilTimeout>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d007      	beq.n	8009e08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfc:	f043 0220 	orr.w	r2, r3, #32
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e000      	b.n	8009e0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009e20:	4b1b      	ldr	r3, [pc, #108]	; (8009e90 <SPI_EndRxTxTransaction+0x7c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a1b      	ldr	r2, [pc, #108]	; (8009e94 <SPI_EndRxTxTransaction+0x80>)
 8009e26:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2a:	0d5b      	lsrs	r3, r3, #21
 8009e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e30:	fb02 f303 	mul.w	r3, r2, r3
 8009e34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e3e:	d112      	bne.n	8009e66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2200      	movs	r2, #0
 8009e48:	2180      	movs	r1, #128	; 0x80
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff ff12 	bl	8009c74 <SPI_WaitFlagStateUntilTimeout>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d016      	beq.n	8009e84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	f043 0220 	orr.w	r2, r3, #32
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e00f      	b.n	8009e86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00a      	beq.n	8009e82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e7c:	2b80      	cmp	r3, #128	; 0x80
 8009e7e:	d0f2      	beq.n	8009e66 <SPI_EndRxTxTransaction+0x52>
 8009e80:	e000      	b.n	8009e84 <SPI_EndRxTxTransaction+0x70>
        break;
 8009e82:	bf00      	nop
  }

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000000 	.word	0x20000000
 8009e94:	165e9f81 	.word	0x165e9f81

08009e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e01d      	b.n	8009ee6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d106      	bne.n	8009ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7f8 f834 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	f000 fa14 	bl	800a304 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f042 0201 	orr.w	r2, r2, #1
 8009f04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f003 0307 	and.w	r3, r3, #7
 8009f10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b06      	cmp	r3, #6
 8009f16:	d007      	beq.n	8009f28 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f042 0201 	orr.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	f003 0302 	and.w	r3, r3, #2
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d122      	bne.n	8009f92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d11b      	bne.n	8009f92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f06f 0202 	mvn.w	r2, #2
 8009f62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	f003 0303 	and.w	r3, r3, #3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f9a5 	bl	800a2c8 <HAL_TIM_IC_CaptureCallback>
 8009f7e:	e005      	b.n	8009f8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f997 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f9a8 	bl	800a2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	d122      	bne.n	8009fe6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	2b04      	cmp	r3, #4
 8009fac:	d11b      	bne.n	8009fe6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f06f 0204 	mvn.w	r2, #4
 8009fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f97b 	bl	800a2c8 <HAL_TIM_IC_CaptureCallback>
 8009fd2:	e005      	b.n	8009fe0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f96d 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f97e 	bl	800a2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b08      	cmp	r3, #8
 8009ff2:	d122      	bne.n	800a03a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f003 0308 	and.w	r3, r3, #8
 8009ffe:	2b08      	cmp	r3, #8
 800a000:	d11b      	bne.n	800a03a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f06f 0208 	mvn.w	r2, #8
 800a00a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2204      	movs	r2, #4
 800a010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f003 0303 	and.w	r3, r3, #3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f951 	bl	800a2c8 <HAL_TIM_IC_CaptureCallback>
 800a026:	e005      	b.n	800a034 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f943 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f954 	bl	800a2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f003 0310 	and.w	r3, r3, #16
 800a044:	2b10      	cmp	r3, #16
 800a046:	d122      	bne.n	800a08e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f003 0310 	and.w	r3, r3, #16
 800a052:	2b10      	cmp	r3, #16
 800a054:	d11b      	bne.n	800a08e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f06f 0210 	mvn.w	r2, #16
 800a05e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2208      	movs	r2, #8
 800a064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f927 	bl	800a2c8 <HAL_TIM_IC_CaptureCallback>
 800a07a:	e005      	b.n	800a088 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f919 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f92a 	bl	800a2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d10e      	bne.n	800a0ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d107      	bne.n	800a0ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f06f 0201 	mvn.w	r2, #1
 800a0b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7f7 fc8f 	bl	80019d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c4:	2b80      	cmp	r3, #128	; 0x80
 800a0c6:	d10e      	bne.n	800a0e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0d2:	2b80      	cmp	r3, #128	; 0x80
 800a0d4:	d107      	bne.n	800a0e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 facf 	bl	800a684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f0:	2b40      	cmp	r3, #64	; 0x40
 800a0f2:	d10e      	bne.n	800a112 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fe:	2b40      	cmp	r3, #64	; 0x40
 800a100:	d107      	bne.n	800a112 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a10a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f8ef 	bl	800a2f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	f003 0320 	and.w	r3, r3, #32
 800a11c:	2b20      	cmp	r3, #32
 800a11e:	d10e      	bne.n	800a13e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	f003 0320 	and.w	r3, r3, #32
 800a12a:	2b20      	cmp	r3, #32
 800a12c:	d107      	bne.n	800a13e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f06f 0220 	mvn.w	r2, #32
 800a136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fa99 	bl	800a670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a156:	2b01      	cmp	r3, #1
 800a158:	d101      	bne.n	800a15e <HAL_TIM_ConfigClockSource+0x18>
 800a15a:	2302      	movs	r3, #2
 800a15c:	e0a6      	b.n	800a2ac <HAL_TIM_ConfigClockSource+0x166>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2202      	movs	r2, #2
 800a16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a17c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a184:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b40      	cmp	r3, #64	; 0x40
 800a194:	d067      	beq.n	800a266 <HAL_TIM_ConfigClockSource+0x120>
 800a196:	2b40      	cmp	r3, #64	; 0x40
 800a198:	d80b      	bhi.n	800a1b2 <HAL_TIM_ConfigClockSource+0x6c>
 800a19a:	2b10      	cmp	r3, #16
 800a19c:	d073      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x140>
 800a19e:	2b10      	cmp	r3, #16
 800a1a0:	d802      	bhi.n	800a1a8 <HAL_TIM_ConfigClockSource+0x62>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d06f      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a1a6:	e078      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d06c      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x140>
 800a1ac:	2b30      	cmp	r3, #48	; 0x30
 800a1ae:	d06a      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a1b0:	e073      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a1b2:	2b70      	cmp	r3, #112	; 0x70
 800a1b4:	d00d      	beq.n	800a1d2 <HAL_TIM_ConfigClockSource+0x8c>
 800a1b6:	2b70      	cmp	r3, #112	; 0x70
 800a1b8:	d804      	bhi.n	800a1c4 <HAL_TIM_ConfigClockSource+0x7e>
 800a1ba:	2b50      	cmp	r3, #80	; 0x50
 800a1bc:	d033      	beq.n	800a226 <HAL_TIM_ConfigClockSource+0xe0>
 800a1be:	2b60      	cmp	r3, #96	; 0x60
 800a1c0:	d041      	beq.n	800a246 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a1c2:	e06a      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c8:	d066      	beq.n	800a298 <HAL_TIM_ConfigClockSource+0x152>
 800a1ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ce:	d017      	beq.n	800a200 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a1d0:	e063      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6818      	ldr	r0, [r3, #0]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	6899      	ldr	r1, [r3, #8]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f000 f9a9 	bl	800a538 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	609a      	str	r2, [r3, #8]
      break;
 800a1fe:	e04c      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	6899      	ldr	r1, [r3, #8]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f000 f992 	bl	800a538 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689a      	ldr	r2, [r3, #8]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a222:	609a      	str	r2, [r3, #8]
      break;
 800a224:	e039      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6859      	ldr	r1, [r3, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	461a      	mov	r2, r3
 800a234:	f000 f906 	bl	800a444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2150      	movs	r1, #80	; 0x50
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 f95f 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 800a244:	e029      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	6859      	ldr	r1, [r3, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	461a      	mov	r2, r3
 800a254:	f000 f925 	bl	800a4a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2160      	movs	r1, #96	; 0x60
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 f94f 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 800a264:	e019      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	6859      	ldr	r1, [r3, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	461a      	mov	r2, r3
 800a274:	f000 f8e6 	bl	800a444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2140      	movs	r1, #64	; 0x40
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f93f 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 800a284:	e009      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4619      	mov	r1, r3
 800a290:	4610      	mov	r0, r2
 800a292:	f000 f936 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 800a296:	e000      	b.n	800a29a <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a298:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a40      	ldr	r2, [pc, #256]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d013      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a322:	d00f      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a3d      	ldr	r2, [pc, #244]	; (800a41c <TIM_Base_SetConfig+0x118>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00b      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a3c      	ldr	r2, [pc, #240]	; (800a420 <TIM_Base_SetConfig+0x11c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d007      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a3b      	ldr	r2, [pc, #236]	; (800a424 <TIM_Base_SetConfig+0x120>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d003      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a3a      	ldr	r2, [pc, #232]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d108      	bne.n	800a356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	4313      	orrs	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a2f      	ldr	r2, [pc, #188]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d02b      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a364:	d027      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a2c      	ldr	r2, [pc, #176]	; (800a41c <TIM_Base_SetConfig+0x118>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d023      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a2b      	ldr	r2, [pc, #172]	; (800a420 <TIM_Base_SetConfig+0x11c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d01f      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a2a      	ldr	r2, [pc, #168]	; (800a424 <TIM_Base_SetConfig+0x120>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d01b      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a29      	ldr	r2, [pc, #164]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d017      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a28      	ldr	r2, [pc, #160]	; (800a42c <TIM_Base_SetConfig+0x128>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d013      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a27      	ldr	r2, [pc, #156]	; (800a430 <TIM_Base_SetConfig+0x12c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d00f      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a26      	ldr	r2, [pc, #152]	; (800a434 <TIM_Base_SetConfig+0x130>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d00b      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a25      	ldr	r2, [pc, #148]	; (800a438 <TIM_Base_SetConfig+0x134>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d007      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a24      	ldr	r2, [pc, #144]	; (800a43c <TIM_Base_SetConfig+0x138>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d003      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a23      	ldr	r2, [pc, #140]	; (800a440 <TIM_Base_SetConfig+0x13c>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d108      	bne.n	800a3c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a0a      	ldr	r2, [pc, #40]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d003      	beq.n	800a3fc <TIM_Base_SetConfig+0xf8>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a0c      	ldr	r2, [pc, #48]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d103      	bne.n	800a404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	691a      	ldr	r2, [r3, #16]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	615a      	str	r2, [r3, #20]
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	40010000 	.word	0x40010000
 800a41c:	40000400 	.word	0x40000400
 800a420:	40000800 	.word	0x40000800
 800a424:	40000c00 	.word	0x40000c00
 800a428:	40010400 	.word	0x40010400
 800a42c:	40014000 	.word	0x40014000
 800a430:	40014400 	.word	0x40014400
 800a434:	40014800 	.word	0x40014800
 800a438:	40001800 	.word	0x40001800
 800a43c:	40001c00 	.word	0x40001c00
 800a440:	40002000 	.word	0x40002000

0800a444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	f023 0201 	bic.w	r2, r3, #1
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a46e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4313      	orrs	r3, r2
 800a478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f023 030a 	bic.w	r3, r3, #10
 800a480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	621a      	str	r2, [r3, #32]
}
 800a496:	bf00      	nop
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b087      	sub	sp, #28
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	60f8      	str	r0, [r7, #12]
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	f023 0210 	bic.w	r2, r3, #16
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6a1b      	ldr	r3, [r3, #32]
 800a4c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	031b      	lsls	r3, r3, #12
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	621a      	str	r2, [r3, #32]
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4313      	orrs	r3, r2
 800a520:	f043 0307 	orr.w	r3, r3, #7
 800a524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	609a      	str	r2, [r3, #8]
}
 800a52c:	bf00      	nop
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	021a      	lsls	r2, r3, #8
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	431a      	orrs	r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4313      	orrs	r3, r2
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	4313      	orrs	r3, r2
 800a564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	609a      	str	r2, [r3, #8]
}
 800a56c:	bf00      	nop
 800a56e:	371c      	adds	r7, #28
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d101      	bne.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a58c:	2302      	movs	r3, #2
 800a58e:	e05a      	b.n	800a646 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2202      	movs	r2, #2
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a21      	ldr	r2, [pc, #132]	; (800a654 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d022      	beq.n	800a61a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5dc:	d01d      	beq.n	800a61a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a1d      	ldr	r2, [pc, #116]	; (800a658 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d018      	beq.n	800a61a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a1b      	ldr	r2, [pc, #108]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d013      	beq.n	800a61a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a1a      	ldr	r2, [pc, #104]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d00e      	beq.n	800a61a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a18      	ldr	r2, [pc, #96]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d009      	beq.n	800a61a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a17      	ldr	r2, [pc, #92]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d004      	beq.n	800a61a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a15      	ldr	r2, [pc, #84]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d10c      	bne.n	800a634 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	4313      	orrs	r3, r2
 800a62a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	40010000 	.word	0x40010000
 800a658:	40000400 	.word	0x40000400
 800a65c:	40000800 	.word	0x40000800
 800a660:	40000c00 	.word	0x40000c00
 800a664:	40010400 	.word	0x40010400
 800a668:	40014000 	.word	0x40014000
 800a66c:	40001800 	.word	0x40001800

0800a670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e03f      	b.n	800a72a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d106      	bne.n	800a6c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7f7 fe74 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2224      	movs	r2, #36	; 0x24
 800a6c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f829 	bl	800a734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	691a      	ldr	r2, [r3, #16]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	695a      	ldr	r2, [r3, #20]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68da      	ldr	r2, [r3, #12]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2220      	movs	r2, #32
 800a71c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
	...

0800a734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	b085      	sub	sp, #20
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68da      	ldr	r2, [r3, #12]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	430a      	orrs	r2, r1
 800a752:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689a      	ldr	r2, [r3, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	431a      	orrs	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	4313      	orrs	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a776:	f023 030c 	bic.w	r3, r3, #12
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6812      	ldr	r2, [r2, #0]
 800a77e:	68f9      	ldr	r1, [r7, #12]
 800a780:	430b      	orrs	r3, r1
 800a782:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699a      	ldr	r2, [r3, #24]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a2:	f040 818b 	bne.w	800aabc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4ac1      	ldr	r2, [pc, #772]	; (800aab0 <UART_SetConfig+0x37c>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d005      	beq.n	800a7bc <UART_SetConfig+0x88>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4abf      	ldr	r2, [pc, #764]	; (800aab4 <UART_SetConfig+0x380>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	f040 80bd 	bne.w	800a936 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7bc:	f7fe fb5e 	bl	8008e7c <HAL_RCC_GetPCLK2Freq>
 800a7c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	461d      	mov	r5, r3
 800a7c6:	f04f 0600 	mov.w	r6, #0
 800a7ca:	46a8      	mov	r8, r5
 800a7cc:	46b1      	mov	r9, r6
 800a7ce:	eb18 0308 	adds.w	r3, r8, r8
 800a7d2:	eb49 0409 	adc.w	r4, r9, r9
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	46a1      	mov	r9, r4
 800a7da:	eb18 0805 	adds.w	r8, r8, r5
 800a7de:	eb49 0906 	adc.w	r9, r9, r6
 800a7e2:	f04f 0100 	mov.w	r1, #0
 800a7e6:	f04f 0200 	mov.w	r2, #0
 800a7ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a7ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7f6:	4688      	mov	r8, r1
 800a7f8:	4691      	mov	r9, r2
 800a7fa:	eb18 0005 	adds.w	r0, r8, r5
 800a7fe:	eb49 0106 	adc.w	r1, r9, r6
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	461d      	mov	r5, r3
 800a808:	f04f 0600 	mov.w	r6, #0
 800a80c:	196b      	adds	r3, r5, r5
 800a80e:	eb46 0406 	adc.w	r4, r6, r6
 800a812:	461a      	mov	r2, r3
 800a814:	4623      	mov	r3, r4
 800a816:	f7f5 fceb 	bl	80001f0 <__aeabi_uldivmod>
 800a81a:	4603      	mov	r3, r0
 800a81c:	460c      	mov	r4, r1
 800a81e:	461a      	mov	r2, r3
 800a820:	4ba5      	ldr	r3, [pc, #660]	; (800aab8 <UART_SetConfig+0x384>)
 800a822:	fba3 2302 	umull	r2, r3, r3, r2
 800a826:	095b      	lsrs	r3, r3, #5
 800a828:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	461d      	mov	r5, r3
 800a830:	f04f 0600 	mov.w	r6, #0
 800a834:	46a9      	mov	r9, r5
 800a836:	46b2      	mov	sl, r6
 800a838:	eb19 0309 	adds.w	r3, r9, r9
 800a83c:	eb4a 040a 	adc.w	r4, sl, sl
 800a840:	4699      	mov	r9, r3
 800a842:	46a2      	mov	sl, r4
 800a844:	eb19 0905 	adds.w	r9, r9, r5
 800a848:	eb4a 0a06 	adc.w	sl, sl, r6
 800a84c:	f04f 0100 	mov.w	r1, #0
 800a850:	f04f 0200 	mov.w	r2, #0
 800a854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a858:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a85c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a860:	4689      	mov	r9, r1
 800a862:	4692      	mov	sl, r2
 800a864:	eb19 0005 	adds.w	r0, r9, r5
 800a868:	eb4a 0106 	adc.w	r1, sl, r6
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	461d      	mov	r5, r3
 800a872:	f04f 0600 	mov.w	r6, #0
 800a876:	196b      	adds	r3, r5, r5
 800a878:	eb46 0406 	adc.w	r4, r6, r6
 800a87c:	461a      	mov	r2, r3
 800a87e:	4623      	mov	r3, r4
 800a880:	f7f5 fcb6 	bl	80001f0 <__aeabi_uldivmod>
 800a884:	4603      	mov	r3, r0
 800a886:	460c      	mov	r4, r1
 800a888:	461a      	mov	r2, r3
 800a88a:	4b8b      	ldr	r3, [pc, #556]	; (800aab8 <UART_SetConfig+0x384>)
 800a88c:	fba3 1302 	umull	r1, r3, r3, r2
 800a890:	095b      	lsrs	r3, r3, #5
 800a892:	2164      	movs	r1, #100	; 0x64
 800a894:	fb01 f303 	mul.w	r3, r1, r3
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	3332      	adds	r3, #50	; 0x32
 800a89e:	4a86      	ldr	r2, [pc, #536]	; (800aab8 <UART_SetConfig+0x384>)
 800a8a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a4:	095b      	lsrs	r3, r3, #5
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8ac:	4498      	add	r8, r3
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	461d      	mov	r5, r3
 800a8b2:	f04f 0600 	mov.w	r6, #0
 800a8b6:	46a9      	mov	r9, r5
 800a8b8:	46b2      	mov	sl, r6
 800a8ba:	eb19 0309 	adds.w	r3, r9, r9
 800a8be:	eb4a 040a 	adc.w	r4, sl, sl
 800a8c2:	4699      	mov	r9, r3
 800a8c4:	46a2      	mov	sl, r4
 800a8c6:	eb19 0905 	adds.w	r9, r9, r5
 800a8ca:	eb4a 0a06 	adc.w	sl, sl, r6
 800a8ce:	f04f 0100 	mov.w	r1, #0
 800a8d2:	f04f 0200 	mov.w	r2, #0
 800a8d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8e2:	4689      	mov	r9, r1
 800a8e4:	4692      	mov	sl, r2
 800a8e6:	eb19 0005 	adds.w	r0, r9, r5
 800a8ea:	eb4a 0106 	adc.w	r1, sl, r6
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	461d      	mov	r5, r3
 800a8f4:	f04f 0600 	mov.w	r6, #0
 800a8f8:	196b      	adds	r3, r5, r5
 800a8fa:	eb46 0406 	adc.w	r4, r6, r6
 800a8fe:	461a      	mov	r2, r3
 800a900:	4623      	mov	r3, r4
 800a902:	f7f5 fc75 	bl	80001f0 <__aeabi_uldivmod>
 800a906:	4603      	mov	r3, r0
 800a908:	460c      	mov	r4, r1
 800a90a:	461a      	mov	r2, r3
 800a90c:	4b6a      	ldr	r3, [pc, #424]	; (800aab8 <UART_SetConfig+0x384>)
 800a90e:	fba3 1302 	umull	r1, r3, r3, r2
 800a912:	095b      	lsrs	r3, r3, #5
 800a914:	2164      	movs	r1, #100	; 0x64
 800a916:	fb01 f303 	mul.w	r3, r1, r3
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	00db      	lsls	r3, r3, #3
 800a91e:	3332      	adds	r3, #50	; 0x32
 800a920:	4a65      	ldr	r2, [pc, #404]	; (800aab8 <UART_SetConfig+0x384>)
 800a922:	fba2 2303 	umull	r2, r3, r2, r3
 800a926:	095b      	lsrs	r3, r3, #5
 800a928:	f003 0207 	and.w	r2, r3, #7
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4442      	add	r2, r8
 800a932:	609a      	str	r2, [r3, #8]
 800a934:	e26f      	b.n	800ae16 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a936:	f7fe fa8d 	bl	8008e54 <HAL_RCC_GetPCLK1Freq>
 800a93a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	461d      	mov	r5, r3
 800a940:	f04f 0600 	mov.w	r6, #0
 800a944:	46a8      	mov	r8, r5
 800a946:	46b1      	mov	r9, r6
 800a948:	eb18 0308 	adds.w	r3, r8, r8
 800a94c:	eb49 0409 	adc.w	r4, r9, r9
 800a950:	4698      	mov	r8, r3
 800a952:	46a1      	mov	r9, r4
 800a954:	eb18 0805 	adds.w	r8, r8, r5
 800a958:	eb49 0906 	adc.w	r9, r9, r6
 800a95c:	f04f 0100 	mov.w	r1, #0
 800a960:	f04f 0200 	mov.w	r2, #0
 800a964:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a968:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a96c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a970:	4688      	mov	r8, r1
 800a972:	4691      	mov	r9, r2
 800a974:	eb18 0005 	adds.w	r0, r8, r5
 800a978:	eb49 0106 	adc.w	r1, r9, r6
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	461d      	mov	r5, r3
 800a982:	f04f 0600 	mov.w	r6, #0
 800a986:	196b      	adds	r3, r5, r5
 800a988:	eb46 0406 	adc.w	r4, r6, r6
 800a98c:	461a      	mov	r2, r3
 800a98e:	4623      	mov	r3, r4
 800a990:	f7f5 fc2e 	bl	80001f0 <__aeabi_uldivmod>
 800a994:	4603      	mov	r3, r0
 800a996:	460c      	mov	r4, r1
 800a998:	461a      	mov	r2, r3
 800a99a:	4b47      	ldr	r3, [pc, #284]	; (800aab8 <UART_SetConfig+0x384>)
 800a99c:	fba3 2302 	umull	r2, r3, r3, r2
 800a9a0:	095b      	lsrs	r3, r3, #5
 800a9a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	461d      	mov	r5, r3
 800a9aa:	f04f 0600 	mov.w	r6, #0
 800a9ae:	46a9      	mov	r9, r5
 800a9b0:	46b2      	mov	sl, r6
 800a9b2:	eb19 0309 	adds.w	r3, r9, r9
 800a9b6:	eb4a 040a 	adc.w	r4, sl, sl
 800a9ba:	4699      	mov	r9, r3
 800a9bc:	46a2      	mov	sl, r4
 800a9be:	eb19 0905 	adds.w	r9, r9, r5
 800a9c2:	eb4a 0a06 	adc.w	sl, sl, r6
 800a9c6:	f04f 0100 	mov.w	r1, #0
 800a9ca:	f04f 0200 	mov.w	r2, #0
 800a9ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9da:	4689      	mov	r9, r1
 800a9dc:	4692      	mov	sl, r2
 800a9de:	eb19 0005 	adds.w	r0, r9, r5
 800a9e2:	eb4a 0106 	adc.w	r1, sl, r6
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	461d      	mov	r5, r3
 800a9ec:	f04f 0600 	mov.w	r6, #0
 800a9f0:	196b      	adds	r3, r5, r5
 800a9f2:	eb46 0406 	adc.w	r4, r6, r6
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4623      	mov	r3, r4
 800a9fa:	f7f5 fbf9 	bl	80001f0 <__aeabi_uldivmod>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	460c      	mov	r4, r1
 800aa02:	461a      	mov	r2, r3
 800aa04:	4b2c      	ldr	r3, [pc, #176]	; (800aab8 <UART_SetConfig+0x384>)
 800aa06:	fba3 1302 	umull	r1, r3, r3, r2
 800aa0a:	095b      	lsrs	r3, r3, #5
 800aa0c:	2164      	movs	r1, #100	; 0x64
 800aa0e:	fb01 f303 	mul.w	r3, r1, r3
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	3332      	adds	r3, #50	; 0x32
 800aa18:	4a27      	ldr	r2, [pc, #156]	; (800aab8 <UART_SetConfig+0x384>)
 800aa1a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1e:	095b      	lsrs	r3, r3, #5
 800aa20:	005b      	lsls	r3, r3, #1
 800aa22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa26:	4498      	add	r8, r3
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	461d      	mov	r5, r3
 800aa2c:	f04f 0600 	mov.w	r6, #0
 800aa30:	46a9      	mov	r9, r5
 800aa32:	46b2      	mov	sl, r6
 800aa34:	eb19 0309 	adds.w	r3, r9, r9
 800aa38:	eb4a 040a 	adc.w	r4, sl, sl
 800aa3c:	4699      	mov	r9, r3
 800aa3e:	46a2      	mov	sl, r4
 800aa40:	eb19 0905 	adds.w	r9, r9, r5
 800aa44:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa48:	f04f 0100 	mov.w	r1, #0
 800aa4c:	f04f 0200 	mov.w	r2, #0
 800aa50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa5c:	4689      	mov	r9, r1
 800aa5e:	4692      	mov	sl, r2
 800aa60:	eb19 0005 	adds.w	r0, r9, r5
 800aa64:	eb4a 0106 	adc.w	r1, sl, r6
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	461d      	mov	r5, r3
 800aa6e:	f04f 0600 	mov.w	r6, #0
 800aa72:	196b      	adds	r3, r5, r5
 800aa74:	eb46 0406 	adc.w	r4, r6, r6
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4623      	mov	r3, r4
 800aa7c:	f7f5 fbb8 	bl	80001f0 <__aeabi_uldivmod>
 800aa80:	4603      	mov	r3, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	461a      	mov	r2, r3
 800aa86:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <UART_SetConfig+0x384>)
 800aa88:	fba3 1302 	umull	r1, r3, r3, r2
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	2164      	movs	r1, #100	; 0x64
 800aa90:	fb01 f303 	mul.w	r3, r1, r3
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	3332      	adds	r3, #50	; 0x32
 800aa9a:	4a07      	ldr	r2, [pc, #28]	; (800aab8 <UART_SetConfig+0x384>)
 800aa9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	f003 0207 	and.w	r2, r3, #7
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4442      	add	r2, r8
 800aaac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aaae:	e1b2      	b.n	800ae16 <UART_SetConfig+0x6e2>
 800aab0:	40011000 	.word	0x40011000
 800aab4:	40011400 	.word	0x40011400
 800aab8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4ad7      	ldr	r2, [pc, #860]	; (800ae20 <UART_SetConfig+0x6ec>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d005      	beq.n	800aad2 <UART_SetConfig+0x39e>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4ad6      	ldr	r2, [pc, #856]	; (800ae24 <UART_SetConfig+0x6f0>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	f040 80d1 	bne.w	800ac74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aad2:	f7fe f9d3 	bl	8008e7c <HAL_RCC_GetPCLK2Freq>
 800aad6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	469a      	mov	sl, r3
 800aadc:	f04f 0b00 	mov.w	fp, #0
 800aae0:	46d0      	mov	r8, sl
 800aae2:	46d9      	mov	r9, fp
 800aae4:	eb18 0308 	adds.w	r3, r8, r8
 800aae8:	eb49 0409 	adc.w	r4, r9, r9
 800aaec:	4698      	mov	r8, r3
 800aaee:	46a1      	mov	r9, r4
 800aaf0:	eb18 080a 	adds.w	r8, r8, sl
 800aaf4:	eb49 090b 	adc.w	r9, r9, fp
 800aaf8:	f04f 0100 	mov.w	r1, #0
 800aafc:	f04f 0200 	mov.w	r2, #0
 800ab00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ab04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ab08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ab0c:	4688      	mov	r8, r1
 800ab0e:	4691      	mov	r9, r2
 800ab10:	eb1a 0508 	adds.w	r5, sl, r8
 800ab14:	eb4b 0609 	adc.w	r6, fp, r9
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	f04f 0200 	mov.w	r2, #0
 800ab22:	f04f 0300 	mov.w	r3, #0
 800ab26:	f04f 0400 	mov.w	r4, #0
 800ab2a:	0094      	lsls	r4, r2, #2
 800ab2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab30:	008b      	lsls	r3, r1, #2
 800ab32:	461a      	mov	r2, r3
 800ab34:	4623      	mov	r3, r4
 800ab36:	4628      	mov	r0, r5
 800ab38:	4631      	mov	r1, r6
 800ab3a:	f7f5 fb59 	bl	80001f0 <__aeabi_uldivmod>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	460c      	mov	r4, r1
 800ab42:	461a      	mov	r2, r3
 800ab44:	4bb8      	ldr	r3, [pc, #736]	; (800ae28 <UART_SetConfig+0x6f4>)
 800ab46:	fba3 2302 	umull	r2, r3, r3, r2
 800ab4a:	095b      	lsrs	r3, r3, #5
 800ab4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	469b      	mov	fp, r3
 800ab54:	f04f 0c00 	mov.w	ip, #0
 800ab58:	46d9      	mov	r9, fp
 800ab5a:	46e2      	mov	sl, ip
 800ab5c:	eb19 0309 	adds.w	r3, r9, r9
 800ab60:	eb4a 040a 	adc.w	r4, sl, sl
 800ab64:	4699      	mov	r9, r3
 800ab66:	46a2      	mov	sl, r4
 800ab68:	eb19 090b 	adds.w	r9, r9, fp
 800ab6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab70:	f04f 0100 	mov.w	r1, #0
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab84:	4689      	mov	r9, r1
 800ab86:	4692      	mov	sl, r2
 800ab88:	eb1b 0509 	adds.w	r5, fp, r9
 800ab8c:	eb4c 060a 	adc.w	r6, ip, sl
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	4619      	mov	r1, r3
 800ab96:	f04f 0200 	mov.w	r2, #0
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	f04f 0400 	mov.w	r4, #0
 800aba2:	0094      	lsls	r4, r2, #2
 800aba4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aba8:	008b      	lsls	r3, r1, #2
 800abaa:	461a      	mov	r2, r3
 800abac:	4623      	mov	r3, r4
 800abae:	4628      	mov	r0, r5
 800abb0:	4631      	mov	r1, r6
 800abb2:	f7f5 fb1d 	bl	80001f0 <__aeabi_uldivmod>
 800abb6:	4603      	mov	r3, r0
 800abb8:	460c      	mov	r4, r1
 800abba:	461a      	mov	r2, r3
 800abbc:	4b9a      	ldr	r3, [pc, #616]	; (800ae28 <UART_SetConfig+0x6f4>)
 800abbe:	fba3 1302 	umull	r1, r3, r3, r2
 800abc2:	095b      	lsrs	r3, r3, #5
 800abc4:	2164      	movs	r1, #100	; 0x64
 800abc6:	fb01 f303 	mul.w	r3, r1, r3
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	011b      	lsls	r3, r3, #4
 800abce:	3332      	adds	r3, #50	; 0x32
 800abd0:	4a95      	ldr	r2, [pc, #596]	; (800ae28 <UART_SetConfig+0x6f4>)
 800abd2:	fba2 2303 	umull	r2, r3, r2, r3
 800abd6:	095b      	lsrs	r3, r3, #5
 800abd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abdc:	4498      	add	r8, r3
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	469b      	mov	fp, r3
 800abe2:	f04f 0c00 	mov.w	ip, #0
 800abe6:	46d9      	mov	r9, fp
 800abe8:	46e2      	mov	sl, ip
 800abea:	eb19 0309 	adds.w	r3, r9, r9
 800abee:	eb4a 040a 	adc.w	r4, sl, sl
 800abf2:	4699      	mov	r9, r3
 800abf4:	46a2      	mov	sl, r4
 800abf6:	eb19 090b 	adds.w	r9, r9, fp
 800abfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800abfe:	f04f 0100 	mov.w	r1, #0
 800ac02:	f04f 0200 	mov.w	r2, #0
 800ac06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac12:	4689      	mov	r9, r1
 800ac14:	4692      	mov	sl, r2
 800ac16:	eb1b 0509 	adds.w	r5, fp, r9
 800ac1a:	eb4c 060a 	adc.w	r6, ip, sl
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	4619      	mov	r1, r3
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	f04f 0300 	mov.w	r3, #0
 800ac2c:	f04f 0400 	mov.w	r4, #0
 800ac30:	0094      	lsls	r4, r2, #2
 800ac32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac36:	008b      	lsls	r3, r1, #2
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4623      	mov	r3, r4
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	4631      	mov	r1, r6
 800ac40:	f7f5 fad6 	bl	80001f0 <__aeabi_uldivmod>
 800ac44:	4603      	mov	r3, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4b77      	ldr	r3, [pc, #476]	; (800ae28 <UART_SetConfig+0x6f4>)
 800ac4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac50:	095b      	lsrs	r3, r3, #5
 800ac52:	2164      	movs	r1, #100	; 0x64
 800ac54:	fb01 f303 	mul.w	r3, r1, r3
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	3332      	adds	r3, #50	; 0x32
 800ac5e:	4a72      	ldr	r2, [pc, #456]	; (800ae28 <UART_SetConfig+0x6f4>)
 800ac60:	fba2 2303 	umull	r2, r3, r2, r3
 800ac64:	095b      	lsrs	r3, r3, #5
 800ac66:	f003 020f 	and.w	r2, r3, #15
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4442      	add	r2, r8
 800ac70:	609a      	str	r2, [r3, #8]
 800ac72:	e0d0      	b.n	800ae16 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac74:	f7fe f8ee 	bl	8008e54 <HAL_RCC_GetPCLK1Freq>
 800ac78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	469a      	mov	sl, r3
 800ac7e:	f04f 0b00 	mov.w	fp, #0
 800ac82:	46d0      	mov	r8, sl
 800ac84:	46d9      	mov	r9, fp
 800ac86:	eb18 0308 	adds.w	r3, r8, r8
 800ac8a:	eb49 0409 	adc.w	r4, r9, r9
 800ac8e:	4698      	mov	r8, r3
 800ac90:	46a1      	mov	r9, r4
 800ac92:	eb18 080a 	adds.w	r8, r8, sl
 800ac96:	eb49 090b 	adc.w	r9, r9, fp
 800ac9a:	f04f 0100 	mov.w	r1, #0
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aca6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800acaa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800acae:	4688      	mov	r8, r1
 800acb0:	4691      	mov	r9, r2
 800acb2:	eb1a 0508 	adds.w	r5, sl, r8
 800acb6:	eb4b 0609 	adc.w	r6, fp, r9
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	4619      	mov	r1, r3
 800acc0:	f04f 0200 	mov.w	r2, #0
 800acc4:	f04f 0300 	mov.w	r3, #0
 800acc8:	f04f 0400 	mov.w	r4, #0
 800accc:	0094      	lsls	r4, r2, #2
 800acce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800acd2:	008b      	lsls	r3, r1, #2
 800acd4:	461a      	mov	r2, r3
 800acd6:	4623      	mov	r3, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	4631      	mov	r1, r6
 800acdc:	f7f5 fa88 	bl	80001f0 <__aeabi_uldivmod>
 800ace0:	4603      	mov	r3, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	461a      	mov	r2, r3
 800ace6:	4b50      	ldr	r3, [pc, #320]	; (800ae28 <UART_SetConfig+0x6f4>)
 800ace8:	fba3 2302 	umull	r2, r3, r3, r2
 800acec:	095b      	lsrs	r3, r3, #5
 800acee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	469b      	mov	fp, r3
 800acf6:	f04f 0c00 	mov.w	ip, #0
 800acfa:	46d9      	mov	r9, fp
 800acfc:	46e2      	mov	sl, ip
 800acfe:	eb19 0309 	adds.w	r3, r9, r9
 800ad02:	eb4a 040a 	adc.w	r4, sl, sl
 800ad06:	4699      	mov	r9, r3
 800ad08:	46a2      	mov	sl, r4
 800ad0a:	eb19 090b 	adds.w	r9, r9, fp
 800ad0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad12:	f04f 0100 	mov.w	r1, #0
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad26:	4689      	mov	r9, r1
 800ad28:	4692      	mov	sl, r2
 800ad2a:	eb1b 0509 	adds.w	r5, fp, r9
 800ad2e:	eb4c 060a 	adc.w	r6, ip, sl
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4619      	mov	r1, r3
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	f04f 0300 	mov.w	r3, #0
 800ad40:	f04f 0400 	mov.w	r4, #0
 800ad44:	0094      	lsls	r4, r2, #2
 800ad46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad4a:	008b      	lsls	r3, r1, #2
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	4623      	mov	r3, r4
 800ad50:	4628      	mov	r0, r5
 800ad52:	4631      	mov	r1, r6
 800ad54:	f7f5 fa4c 	bl	80001f0 <__aeabi_uldivmod>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4b32      	ldr	r3, [pc, #200]	; (800ae28 <UART_SetConfig+0x6f4>)
 800ad60:	fba3 1302 	umull	r1, r3, r3, r2
 800ad64:	095b      	lsrs	r3, r3, #5
 800ad66:	2164      	movs	r1, #100	; 0x64
 800ad68:	fb01 f303 	mul.w	r3, r1, r3
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	3332      	adds	r3, #50	; 0x32
 800ad72:	4a2d      	ldr	r2, [pc, #180]	; (800ae28 <UART_SetConfig+0x6f4>)
 800ad74:	fba2 2303 	umull	r2, r3, r2, r3
 800ad78:	095b      	lsrs	r3, r3, #5
 800ad7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad7e:	4498      	add	r8, r3
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	469b      	mov	fp, r3
 800ad84:	f04f 0c00 	mov.w	ip, #0
 800ad88:	46d9      	mov	r9, fp
 800ad8a:	46e2      	mov	sl, ip
 800ad8c:	eb19 0309 	adds.w	r3, r9, r9
 800ad90:	eb4a 040a 	adc.w	r4, sl, sl
 800ad94:	4699      	mov	r9, r3
 800ad96:	46a2      	mov	sl, r4
 800ad98:	eb19 090b 	adds.w	r9, r9, fp
 800ad9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ada0:	f04f 0100 	mov.w	r1, #0
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800adb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800adb4:	4689      	mov	r9, r1
 800adb6:	4692      	mov	sl, r2
 800adb8:	eb1b 0509 	adds.w	r5, fp, r9
 800adbc:	eb4c 060a 	adc.w	r6, ip, sl
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	4619      	mov	r1, r3
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	f04f 0400 	mov.w	r4, #0
 800add2:	0094      	lsls	r4, r2, #2
 800add4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800add8:	008b      	lsls	r3, r1, #2
 800adda:	461a      	mov	r2, r3
 800addc:	4623      	mov	r3, r4
 800adde:	4628      	mov	r0, r5
 800ade0:	4631      	mov	r1, r6
 800ade2:	f7f5 fa05 	bl	80001f0 <__aeabi_uldivmod>
 800ade6:	4603      	mov	r3, r0
 800ade8:	460c      	mov	r4, r1
 800adea:	461a      	mov	r2, r3
 800adec:	4b0e      	ldr	r3, [pc, #56]	; (800ae28 <UART_SetConfig+0x6f4>)
 800adee:	fba3 1302 	umull	r1, r3, r3, r2
 800adf2:	095b      	lsrs	r3, r3, #5
 800adf4:	2164      	movs	r1, #100	; 0x64
 800adf6:	fb01 f303 	mul.w	r3, r1, r3
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	3332      	adds	r3, #50	; 0x32
 800ae00:	4a09      	ldr	r2, [pc, #36]	; (800ae28 <UART_SetConfig+0x6f4>)
 800ae02:	fba2 2303 	umull	r2, r3, r2, r3
 800ae06:	095b      	lsrs	r3, r3, #5
 800ae08:	f003 020f 	and.w	r2, r3, #15
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4442      	add	r2, r8
 800ae12:	609a      	str	r2, [r3, #8]
}
 800ae14:	e7ff      	b.n	800ae16 <UART_SetConfig+0x6e2>
 800ae16:	bf00      	nop
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae20:	40011000 	.word	0x40011000
 800ae24:	40011400 	.word	0x40011400
 800ae28:	51eb851f 	.word	0x51eb851f

0800ae2c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d029      	beq.n	800ae9a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae56:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae60:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800ae66:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800ae6c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800ae72:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800ae78:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800ae7e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800ae84:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800ae8a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	601a      	str	r2, [r3, #0]
 800ae98:	e034      	b.n	800af04 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aea6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aeb0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800aeb6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800aeca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aece:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aed8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800aede:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800aee4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800aeea:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800aef0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800af12:	b480      	push	{r7}
 800af14:	b087      	sub	sp, #28
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	60b9      	str	r1, [r7, #8]
 800af1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d02e      	beq.n	800af8a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af38:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	3b01      	subs	r3, #1
 800af46:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af48:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	3b01      	subs	r3, #1
 800af50:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800af52:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	3b01      	subs	r3, #1
 800af5a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800af5c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	3b01      	subs	r3, #1
 800af64:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af66:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800af70:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	3b01      	subs	r3, #1
 800af78:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af7a:	4313      	orrs	r3, r2
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	4313      	orrs	r3, r2
 800af80:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	609a      	str	r2, [r3, #8]
 800af88:	e03b      	b.n	800b002 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af9a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	695b      	ldr	r3, [r3, #20]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800afac:	4313      	orrs	r3, r2
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800afc0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	3b01      	subs	r3, #1
 800afce:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800afd0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800afda:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800afe4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	3b01      	subs	r3, #1
 800afec:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800afee:	4313      	orrs	r3, r2
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	371c      	adds	r7, #28
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b02c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	3b01      	subs	r3, #1
 800b034:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b036:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b03e:	4313      	orrs	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b048:	f7f9 fb90 	bl	800476c <HAL_GetTick>
 800b04c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b04e:	e010      	b.n	800b072 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b056:	d00c      	beq.n	800b072 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d007      	beq.n	800b06e <FMC_SDRAM_SendCommand+0x5e>
 800b05e:	f7f9 fb85 	bl	800476c <HAL_GetTick>
 800b062:	4602      	mov	r2, r0
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d201      	bcs.n	800b072 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e006      	b.n	800b080 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	f003 0320 	and.w	r3, r3, #32
 800b07a:	2b20      	cmp	r3, #32
 800b07c:	d0e8      	beq.n	800b050 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	695a      	ldr	r2, [r3, #20]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b083      	sub	sp, #12
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f043 0201 	orr.w	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f023 0201 	bic.w	r2, r3, #1
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
	...

0800b0f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	019b      	lsls	r3, r3, #6
 800b106:	f043 0220 	orr.w	r2, r3, #32
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3301      	adds	r3, #1
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4a09      	ldr	r2, [pc, #36]	; (800b13c <USB_FlushTxFifo+0x48>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d901      	bls.n	800b120 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e006      	b.n	800b12e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	f003 0320 	and.w	r3, r3, #32
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d0f0      	beq.n	800b10e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3714      	adds	r7, #20
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	00030d40 	.word	0x00030d40

0800b140 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2210      	movs	r2, #16
 800b150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3301      	adds	r3, #1
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4a09      	ldr	r2, [pc, #36]	; (800b180 <USB_FlushRxFifo+0x40>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d901      	bls.n	800b164 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e006      	b.n	800b172 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	f003 0310 	and.w	r3, r3, #16
 800b16c:	2b10      	cmp	r3, #16
 800b16e:	d0f0      	beq.n	800b152 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	00030d40 	.word	0x00030d40

0800b184 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b184:	b480      	push	{r7}
 800b186:	b089      	sub	sp, #36	; 0x24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	4613      	mov	r3, r2
 800b190:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b19a:	88fb      	ldrh	r3, [r7, #6]
 800b19c:	3303      	adds	r3, #3
 800b19e:	089b      	lsrs	r3, r3, #2
 800b1a0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	61bb      	str	r3, [r7, #24]
 800b1a6:	e00b      	b.n	800b1c0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	61bb      	str	r3, [r7, #24]
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d3ef      	bcc.n	800b1a8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b1c8:	69fb      	ldr	r3, [r7, #28]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3724      	adds	r7, #36	; 0x24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	f003 0301 	and.w	r3, r3, #1
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b236:	f023 0303 	bic.w	r3, r3, #3
 800b23a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	f003 0303 	and.w	r3, r3, #3
 800b24a:	68f9      	ldr	r1, [r7, #12]
 800b24c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b250:	4313      	orrs	r3, r2
 800b252:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b254:	78fb      	ldrb	r3, [r7, #3]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d107      	bne.n	800b26a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b260:	461a      	mov	r2, r3
 800b262:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b266:	6053      	str	r3, [r2, #4]
 800b268:	e009      	b.n	800b27e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b26a:	78fb      	ldrb	r3, [r7, #3]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d106      	bne.n	800b27e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b276:	461a      	mov	r2, r3
 800b278:	f241 7370 	movw	r3, #6000	; 0x1770
 800b27c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	b29b      	uxth	r3, r3
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b087      	sub	sp, #28
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	0c9b      	lsrs	r3, r3, #18
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <USB_HC_Halt+0x3a>
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d16c      	bne.n	800b3c2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	0151      	lsls	r1, r2, #5
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	440a      	add	r2, r1
 800b2fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b306:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d143      	bne.n	800b39c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	015a      	lsls	r2, r3, #5
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	0151      	lsls	r1, r2, #5
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	440a      	add	r2, r1
 800b32a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b32e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b332:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	0151      	lsls	r1, r2, #5
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	440a      	add	r2, r1
 800b34a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b34e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b352:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	0151      	lsls	r1, r2, #5
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	440a      	add	r2, r1
 800b36a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b36e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b372:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	3301      	adds	r3, #1
 800b378:	617b      	str	r3, [r7, #20]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b380:	d81d      	bhi.n	800b3be <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b398:	d0ec      	beq.n	800b374 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b39a:	e080      	b.n	800b49e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	015a      	lsls	r2, r3, #5
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	0151      	lsls	r1, r2, #5
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	440a      	add	r2, r1
 800b3b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3ba:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3bc:	e06f      	b.n	800b49e <USB_HC_Halt+0x1f0>
          break;
 800b3be:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3c0:	e06d      	b.n	800b49e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	0151      	lsls	r1, r2, #5
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	440a      	add	r2, r1
 800b3d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3e0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d143      	bne.n	800b47a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	0151      	lsls	r1, r2, #5
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	440a      	add	r2, r1
 800b408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b40c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b410:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	0151      	lsls	r1, r2, #5
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	440a      	add	r2, r1
 800b428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b42c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b430:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	0151      	lsls	r1, r2, #5
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	440a      	add	r2, r1
 800b448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b44c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b450:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	3301      	adds	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b45e:	d81d      	bhi.n	800b49c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	4413      	add	r3, r2
 800b468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b476:	d0ec      	beq.n	800b452 <USB_HC_Halt+0x1a4>
 800b478:	e011      	b.n	800b49e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	4413      	add	r3, r2
 800b482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	0151      	lsls	r1, r2, #5
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	440a      	add	r2, r1
 800b490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	e000      	b.n	800b49e <USB_HC_Halt+0x1f0>
          break;
 800b49c:	bf00      	nop
    }
  }

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	371c      	adds	r7, #28
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff fe07 	bl	800b0d0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b4c2:	2110      	movs	r1, #16
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7ff fe15 	bl	800b0f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff fe38 	bl	800b140 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	613b      	str	r3, [r7, #16]
 800b4d4:	e01f      	b.n	800b516 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	015a      	lsls	r2, r3, #5
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	4413      	add	r3, r2
 800b4de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	015a      	lsls	r2, r3, #5
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4413      	add	r3, r2
 800b506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b50a:	461a      	mov	r2, r3
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	3301      	adds	r3, #1
 800b514:	613b      	str	r3, [r7, #16]
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2b0f      	cmp	r3, #15
 800b51a:	d9dc      	bls.n	800b4d6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b51c:	2300      	movs	r3, #0
 800b51e:	613b      	str	r3, [r7, #16]
 800b520:	e034      	b.n	800b58c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b538:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b540:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b548:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4413      	add	r3, r2
 800b552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b556:	461a      	mov	r2, r3
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	3301      	adds	r3, #1
 800b560:	617b      	str	r3, [r7, #20]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b568:	d80c      	bhi.n	800b584 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	015a      	lsls	r2, r3, #5
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	4413      	add	r3, r2
 800b572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b57c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b580:	d0ec      	beq.n	800b55c <USB_StopHost+0xb0>
 800b582:	e000      	b.n	800b586 <USB_StopHost+0xda>
        break;
 800b584:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	3301      	adds	r3, #1
 800b58a:	613b      	str	r3, [r7, #16]
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	2b0f      	cmp	r3, #15
 800b590:	d9c7      	bls.n	800b522 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b598:	461a      	mov	r2, r3
 800b59a:	f04f 33ff 	mov.w	r3, #4294967295
 800b59e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7ff fd80 	bl	800b0ae <USB_EnableGlobalInt>

  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f804 	bl	800b5dc <USBH_HandleSof>
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b0b      	cmp	r3, #11
 800b5ec:	d10a      	bne.n	800b604 <USBH_HandleSof+0x28>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d005      	beq.n	800b604 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	4798      	blx	r3
  }
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b630:	2200      	movs	r2, #0
 800b632:	4619      	mov	r1, r3
 800b634:	f000 f8ae 	bl	800b794 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b638:	bf00      	nop
}
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b650:	bf00      	nop
}
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b690:	2200      	movs	r2, #0
 800b692:	4619      	mov	r1, r3
 800b694:	f000 f87e 	bl	800b794 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b082      	sub	sp, #8
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 f8fe 	bl	800c8c4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	791b      	ldrb	r3, [r3, #4]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f830 	bl	800b734 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	795b      	ldrb	r3, [r3, #5]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f82a 	bl	800b734 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	f000 f84c 	bl	800b794 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b082      	sub	sp, #8
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b722:	2200      	movs	r2, #0
 800b724:	4619      	mov	r1, r3
 800b726:	f000 f835 	bl	800b794 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	2b0a      	cmp	r3, #10
 800b744:	d80d      	bhi.n	800b762 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	33e0      	adds	r3, #224	; 0xe0
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	78fb      	ldrb	r3, [r7, #3]
 800b754:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	33e0      	adds	r3, #224	; 0xe0
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	440b      	add	r3, r1
 800b760:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b776:	f3ef 8305 	mrs	r3, IPSR
 800b77a:	607b      	str	r3, [r7, #4]
  return(result);
 800b77c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b77e:	2b00      	cmp	r3, #0
 800b780:	bf14      	ite	ne
 800b782:	2301      	movne	r3, #1
 800b784:	2300      	moveq	r3, #0
 800b786:	b2db      	uxtb	r3, r3
}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <osMessagePut+0x1e>
    ticks = 1;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b7b2:	f7ff ffdd 	bl	800b770 <inHandlerMode>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d018      	beq.n	800b7ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b7bc:	f107 0210 	add.w	r2, r7, #16
 800b7c0:	f107 0108 	add.w	r1, r7, #8
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 f9a6 	bl	800bb18 <xQueueGenericSendFromISR>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d001      	beq.n	800b7d6 <osMessagePut+0x42>
      return osErrorOS;
 800b7d2:	23ff      	movs	r3, #255	; 0xff
 800b7d4:	e018      	b.n	800b808 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d014      	beq.n	800b806 <osMessagePut+0x72>
 800b7dc:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <osMessagePut+0x7c>)
 800b7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7e2:	601a      	str	r2, [r3, #0]
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	e00b      	b.n	800b806 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b7ee:	f107 0108 	add.w	r1, r7, #8
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f000 f894 	bl	800b924 <xQueueGenericSend>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d001      	beq.n	800b806 <osMessagePut+0x72>
      return osErrorOS;
 800b802:	23ff      	movs	r3, #255	; 0xff
 800b804:	e000      	b.n	800b808 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	e000ed04 	.word	0xe000ed04

0800b814 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	689a      	ldr	r2, [r3, #8]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	683a      	ldr	r2, [r7, #0]
 800b83e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	601a      	str	r2, [r3, #0]
}
 800b850:	bf00      	nop
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d103      	bne.n	800b87c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	e00c      	b.n	800b896 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3308      	adds	r3, #8
 800b880:	60fb      	str	r3, [r7, #12]
 800b882:	e002      	b.n	800b88a <vListInsert+0x2e>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	60fb      	str	r3, [r7, #12]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	429a      	cmp	r2, r3
 800b894:	d2f6      	bcs.n	800b884 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	685a      	ldr	r2, [r3, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	601a      	str	r2, [r3, #0]
}
 800b8c2:	bf00      	nop
 800b8c4:	3714      	adds	r7, #20
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b085      	sub	sp, #20
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	6892      	ldr	r2, [r2, #8]
 800b8e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	6852      	ldr	r2, [r2, #4]
 800b8ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d103      	bne.n	800b902 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689a      	ldr	r2, [r3, #8]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	1e5a      	subs	r2, r3, #1
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
	...

0800b924 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b08e      	sub	sp, #56	; 0x38
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b932:	2300      	movs	r3, #0
 800b934:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d109      	bne.n	800b954 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	62bb      	str	r3, [r7, #40]	; 0x28
 800b952:	e7fe      	b.n	800b952 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <xQueueGenericSend+0x3e>
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <xQueueGenericSend+0x42>
 800b962:	2301      	movs	r3, #1
 800b964:	e000      	b.n	800b968 <xQueueGenericSend+0x44>
 800b966:	2300      	movs	r3, #0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d109      	bne.n	800b980 <xQueueGenericSend+0x5c>
 800b96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
 800b97e:	e7fe      	b.n	800b97e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	2b02      	cmp	r3, #2
 800b984:	d103      	bne.n	800b98e <xQueueGenericSend+0x6a>
 800b986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d101      	bne.n	800b992 <xQueueGenericSend+0x6e>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <xQueueGenericSend+0x70>
 800b992:	2300      	movs	r3, #0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d109      	bne.n	800b9ac <xQueueGenericSend+0x88>
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	623b      	str	r3, [r7, #32]
 800b9aa:	e7fe      	b.n	800b9aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9ac:	f000 fd26 	bl	800c3fc <xTaskGetSchedulerState>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <xQueueGenericSend+0x98>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <xQueueGenericSend+0x9c>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e000      	b.n	800b9c2 <xQueueGenericSend+0x9e>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d109      	bne.n	800b9da <xQueueGenericSend+0xb6>
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	61fb      	str	r3, [r7, #28]
 800b9d8:	e7fe      	b.n	800b9d8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9da:	f000 fe2d 	bl	800c638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d302      	bcc.n	800b9f0 <xQueueGenericSend+0xcc>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d129      	bne.n	800ba44 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9f6:	f000 f923 	bl	800bc40 <prvCopyDataToQueue>
 800b9fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d010      	beq.n	800ba26 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	3324      	adds	r3, #36	; 0x24
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fbf3 	bl	800c1f4 <xTaskRemoveFromEventList>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d013      	beq.n	800ba3c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba14:	4b3f      	ldr	r3, [pc, #252]	; (800bb14 <xQueueGenericSend+0x1f0>)
 800ba16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	e00a      	b.n	800ba3c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d007      	beq.n	800ba3c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba2c:	4b39      	ldr	r3, [pc, #228]	; (800bb14 <xQueueGenericSend+0x1f0>)
 800ba2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba3c:	f000 fe2a 	bl	800c694 <vPortExitCritical>
				return pdPASS;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e063      	b.n	800bb0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d103      	bne.n	800ba52 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba4a:	f000 fe23 	bl	800c694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e05c      	b.n	800bb0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d106      	bne.n	800ba66 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba58:	f107 0314 	add.w	r3, r7, #20
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 fc2b 	bl	800c2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba62:	2301      	movs	r3, #1
 800ba64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba66:	f000 fe15 	bl	800c694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba6a:	f000 f9bd 	bl	800bde8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba6e:	f000 fde3 	bl	800c638 <vPortEnterCritical>
 800ba72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba78:	b25b      	sxtb	r3, r3
 800ba7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7e:	d103      	bne.n	800ba88 <xQueueGenericSend+0x164>
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba8e:	b25b      	sxtb	r3, r3
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba94:	d103      	bne.n	800ba9e <xQueueGenericSend+0x17a>
 800ba96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba9e:	f000 fdf9 	bl	800c694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800baa2:	1d3a      	adds	r2, r7, #4
 800baa4:	f107 0314 	add.w	r3, r7, #20
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 fc1a 	bl	800c2e4 <xTaskCheckForTimeOut>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d124      	bne.n	800bb00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bab8:	f000 f97e 	bl	800bdb8 <prvIsQueueFull>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d018      	beq.n	800baf4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	3310      	adds	r3, #16
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	4611      	mov	r1, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fb6e 	bl	800c1ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bad2:	f000 f91f 	bl	800bd14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bad6:	f000 f995 	bl	800be04 <xTaskResumeAll>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	f47f af7c 	bne.w	800b9da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bae2:	4b0c      	ldr	r3, [pc, #48]	; (800bb14 <xQueueGenericSend+0x1f0>)
 800bae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	e772      	b.n	800b9da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800baf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baf6:	f000 f90d 	bl	800bd14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bafa:	f000 f983 	bl	800be04 <xTaskResumeAll>
 800bafe:	e76c      	b.n	800b9da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb02:	f000 f907 	bl	800bd14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb06:	f000 f97d 	bl	800be04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3738      	adds	r7, #56	; 0x38
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	e000ed04 	.word	0xe000ed04

0800bb18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08e      	sub	sp, #56	; 0x38
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d109      	bne.n	800bb44 <xQueueGenericSendFromISR+0x2c>
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	627b      	str	r3, [r7, #36]	; 0x24
 800bb42:	e7fe      	b.n	800bb42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d103      	bne.n	800bb52 <xQueueGenericSendFromISR+0x3a>
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <xQueueGenericSendFromISR+0x3e>
 800bb52:	2301      	movs	r3, #1
 800bb54:	e000      	b.n	800bb58 <xQueueGenericSendFromISR+0x40>
 800bb56:	2300      	movs	r3, #0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d109      	bne.n	800bb70 <xQueueGenericSendFromISR+0x58>
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	623b      	str	r3, [r7, #32]
 800bb6e:	e7fe      	b.n	800bb6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d103      	bne.n	800bb7e <xQueueGenericSendFromISR+0x66>
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d101      	bne.n	800bb82 <xQueueGenericSendFromISR+0x6a>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e000      	b.n	800bb84 <xQueueGenericSendFromISR+0x6c>
 800bb82:	2300      	movs	r3, #0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d109      	bne.n	800bb9c <xQueueGenericSendFromISR+0x84>
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	61fb      	str	r3, [r7, #28]
 800bb9a:	e7fe      	b.n	800bb9a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb9c:	f000 fdfc 	bl	800c798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bba0:	f3ef 8211 	mrs	r2, BASEPRI
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	61ba      	str	r2, [r7, #24]
 800bbb6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbb8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d302      	bcc.n	800bbce <xQueueGenericSendFromISR+0xb6>
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d12c      	bne.n	800bc28 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	68b9      	ldr	r1, [r7, #8]
 800bbdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbde:	f000 f82f 	bl	800bc40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbe2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbea:	d112      	bne.n	800bc12 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d016      	beq.n	800bc22 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	3324      	adds	r3, #36	; 0x24
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 fafb 	bl	800c1f4 <xTaskRemoveFromEventList>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00e      	beq.n	800bc22 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00b      	beq.n	800bc22 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	e007      	b.n	800bc22 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc16:	3301      	adds	r3, #1
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	b25a      	sxtb	r2, r3
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc22:	2301      	movs	r3, #1
 800bc24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bc26:	e001      	b.n	800bc2c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3738      	adds	r7, #56	; 0x38
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10d      	bne.n	800bc7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d14d      	bne.n	800bd02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 fbe4 	bl	800c438 <xTaskPriorityDisinherit>
 800bc70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	609a      	str	r2, [r3, #8]
 800bc78:	e043      	b.n	800bd02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d119      	bne.n	800bcb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6858      	ldr	r0, [r3, #4]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	461a      	mov	r2, r3
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	f000 fe94 	bl	800c9b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc98:	441a      	add	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d32b      	bcc.n	800bd02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	605a      	str	r2, [r3, #4]
 800bcb2:	e026      	b.n	800bd02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	68d8      	ldr	r0, [r3, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	68b9      	ldr	r1, [r7, #8]
 800bcc0:	f000 fe7a 	bl	800c9b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bccc:	425b      	negs	r3, r3
 800bcce:	441a      	add	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	68da      	ldr	r2, [r3, #12]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d207      	bcs.n	800bcf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	689a      	ldr	r2, [r3, #8]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce8:	425b      	negs	r3, r3
 800bcea:	441a      	add	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d105      	bne.n	800bd02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	1c5a      	adds	r2, r3, #1
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bd0a:	697b      	ldr	r3, [r7, #20]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd1c:	f000 fc8c 	bl	800c638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd28:	e011      	b.n	800bd4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d012      	beq.n	800bd58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	3324      	adds	r3, #36	; 0x24
 800bd36:	4618      	mov	r0, r3
 800bd38:	f000 fa5c 	bl	800c1f4 <xTaskRemoveFromEventList>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd42:	f000 fb2f 	bl	800c3a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	dce9      	bgt.n	800bd2a <prvUnlockQueue+0x16>
 800bd56:	e000      	b.n	800bd5a <prvUnlockQueue+0x46>
					break;
 800bd58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	22ff      	movs	r2, #255	; 0xff
 800bd5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd62:	f000 fc97 	bl	800c694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd66:	f000 fc67 	bl	800c638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd72:	e011      	b.n	800bd98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d012      	beq.n	800bda2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3310      	adds	r3, #16
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 fa37 	bl	800c1f4 <xTaskRemoveFromEventList>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd8c:	f000 fb0a 	bl	800c3a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd90:	7bbb      	ldrb	r3, [r7, #14]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dce9      	bgt.n	800bd74 <prvUnlockQueue+0x60>
 800bda0:	e000      	b.n	800bda4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bda2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	22ff      	movs	r2, #255	; 0xff
 800bda8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bdac:	f000 fc72 	bl	800c694 <vPortExitCritical>
}
 800bdb0:	bf00      	nop
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdc0:	f000 fc3a 	bl	800c638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d102      	bne.n	800bdd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e001      	b.n	800bdda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bdda:	f000 fc5b 	bl	800c694 <vPortExitCritical>

	return xReturn;
 800bdde:	68fb      	ldr	r3, [r7, #12]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bde8:	b480      	push	{r7}
 800bdea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bdec:	4b04      	ldr	r3, [pc, #16]	; (800be00 <vTaskSuspendAll+0x18>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	4a03      	ldr	r2, [pc, #12]	; (800be00 <vTaskSuspendAll+0x18>)
 800bdf4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bdf6:	bf00      	nop
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	200003ec 	.word	0x200003ec

0800be04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be0e:	2300      	movs	r3, #0
 800be10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be12:	4b41      	ldr	r3, [pc, #260]	; (800bf18 <xTaskResumeAll+0x114>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d109      	bne.n	800be2e <xTaskResumeAll+0x2a>
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	e7fe      	b.n	800be2c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be2e:	f000 fc03 	bl	800c638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be32:	4b39      	ldr	r3, [pc, #228]	; (800bf18 <xTaskResumeAll+0x114>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	3b01      	subs	r3, #1
 800be38:	4a37      	ldr	r2, [pc, #220]	; (800bf18 <xTaskResumeAll+0x114>)
 800be3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be3c:	4b36      	ldr	r3, [pc, #216]	; (800bf18 <xTaskResumeAll+0x114>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d161      	bne.n	800bf08 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be44:	4b35      	ldr	r3, [pc, #212]	; (800bf1c <xTaskResumeAll+0x118>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d05d      	beq.n	800bf08 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be4c:	e02e      	b.n	800beac <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be4e:	4b34      	ldr	r3, [pc, #208]	; (800bf20 <xTaskResumeAll+0x11c>)
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3318      	adds	r3, #24
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fd37 	bl	800b8ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3304      	adds	r3, #4
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fd32 	bl	800b8ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6e:	2201      	movs	r2, #1
 800be70:	409a      	lsls	r2, r3
 800be72:	4b2c      	ldr	r3, [pc, #176]	; (800bf24 <xTaskResumeAll+0x120>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4313      	orrs	r3, r2
 800be78:	4a2a      	ldr	r2, [pc, #168]	; (800bf24 <xTaskResumeAll+0x120>)
 800be7a:	6013      	str	r3, [r2, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be80:	4613      	mov	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4a27      	ldr	r2, [pc, #156]	; (800bf28 <xTaskResumeAll+0x124>)
 800be8a:	441a      	add	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3304      	adds	r3, #4
 800be90:	4619      	mov	r1, r3
 800be92:	4610      	mov	r0, r2
 800be94:	f7ff fcbe 	bl	800b814 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9c:	4b23      	ldr	r3, [pc, #140]	; (800bf2c <xTaskResumeAll+0x128>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d302      	bcc.n	800beac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800bea6:	4b22      	ldr	r3, [pc, #136]	; (800bf30 <xTaskResumeAll+0x12c>)
 800bea8:	2201      	movs	r2, #1
 800beaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800beac:	4b1c      	ldr	r3, [pc, #112]	; (800bf20 <xTaskResumeAll+0x11c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1cc      	bne.n	800be4e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d001      	beq.n	800bebe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800beba:	f000 fa7f 	bl	800c3bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bebe:	4b1d      	ldr	r3, [pc, #116]	; (800bf34 <xTaskResumeAll+0x130>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d010      	beq.n	800beec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800beca:	f000 f837 	bl	800bf3c <xTaskIncrementTick>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800bed4:	4b16      	ldr	r3, [pc, #88]	; (800bf30 <xTaskResumeAll+0x12c>)
 800bed6:	2201      	movs	r2, #1
 800bed8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	3b01      	subs	r3, #1
 800bede:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1f1      	bne.n	800beca <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800bee6:	4b13      	ldr	r3, [pc, #76]	; (800bf34 <xTaskResumeAll+0x130>)
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800beec:	4b10      	ldr	r3, [pc, #64]	; (800bf30 <xTaskResumeAll+0x12c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d009      	beq.n	800bf08 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bef4:	2301      	movs	r3, #1
 800bef6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bef8:	4b0f      	ldr	r3, [pc, #60]	; (800bf38 <xTaskResumeAll+0x134>)
 800befa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf08:	f000 fbc4 	bl	800c694 <vPortExitCritical>

	return xAlreadyYielded;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	200003ec 	.word	0x200003ec
 800bf1c:	200003cc 	.word	0x200003cc
 800bf20:	200003a4 	.word	0x200003a4
 800bf24:	200003d4 	.word	0x200003d4
 800bf28:	20000310 	.word	0x20000310
 800bf2c:	2000030c 	.word	0x2000030c
 800bf30:	200003e0 	.word	0x200003e0
 800bf34:	200003dc 	.word	0x200003dc
 800bf38:	e000ed04 	.word	0xe000ed04

0800bf3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf46:	4b4e      	ldr	r3, [pc, #312]	; (800c080 <xTaskIncrementTick+0x144>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f040 8087 	bne.w	800c05e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf50:	4b4c      	ldr	r3, [pc, #304]	; (800c084 <xTaskIncrementTick+0x148>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3301      	adds	r3, #1
 800bf56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf58:	4a4a      	ldr	r2, [pc, #296]	; (800c084 <xTaskIncrementTick+0x148>)
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d11f      	bne.n	800bfa4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf64:	4b48      	ldr	r3, [pc, #288]	; (800c088 <xTaskIncrementTick+0x14c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d009      	beq.n	800bf82 <xTaskIncrementTick+0x46>
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	603b      	str	r3, [r7, #0]
 800bf80:	e7fe      	b.n	800bf80 <xTaskIncrementTick+0x44>
 800bf82:	4b41      	ldr	r3, [pc, #260]	; (800c088 <xTaskIncrementTick+0x14c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	4b40      	ldr	r3, [pc, #256]	; (800c08c <xTaskIncrementTick+0x150>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a3e      	ldr	r2, [pc, #248]	; (800c088 <xTaskIncrementTick+0x14c>)
 800bf8e:	6013      	str	r3, [r2, #0]
 800bf90:	4a3e      	ldr	r2, [pc, #248]	; (800c08c <xTaskIncrementTick+0x150>)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6013      	str	r3, [r2, #0]
 800bf96:	4b3e      	ldr	r3, [pc, #248]	; (800c090 <xTaskIncrementTick+0x154>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	4a3c      	ldr	r2, [pc, #240]	; (800c090 <xTaskIncrementTick+0x154>)
 800bf9e:	6013      	str	r3, [r2, #0]
 800bfa0:	f000 fa0c 	bl	800c3bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfa4:	4b3b      	ldr	r3, [pc, #236]	; (800c094 <xTaskIncrementTick+0x158>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d348      	bcc.n	800c040 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfae:	4b36      	ldr	r3, [pc, #216]	; (800c088 <xTaskIncrementTick+0x14c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfb8:	4b36      	ldr	r3, [pc, #216]	; (800c094 <xTaskIncrementTick+0x158>)
 800bfba:	f04f 32ff 	mov.w	r2, #4294967295
 800bfbe:	601a      	str	r2, [r3, #0]
					break;
 800bfc0:	e03e      	b.n	800c040 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc2:	4b31      	ldr	r3, [pc, #196]	; (800c088 <xTaskIncrementTick+0x14c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d203      	bcs.n	800bfe2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bfda:	4a2e      	ldr	r2, [pc, #184]	; (800c094 <xTaskIncrementTick+0x158>)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bfe0:	e02e      	b.n	800c040 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7ff fc71 	bl	800b8ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d004      	beq.n	800bffe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	3318      	adds	r3, #24
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7ff fc68 	bl	800b8ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	2201      	movs	r2, #1
 800c004:	409a      	lsls	r2, r3
 800c006:	4b24      	ldr	r3, [pc, #144]	; (800c098 <xTaskIncrementTick+0x15c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	4a22      	ldr	r2, [pc, #136]	; (800c098 <xTaskIncrementTick+0x15c>)
 800c00e:	6013      	str	r3, [r2, #0]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c014:	4613      	mov	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4a1f      	ldr	r2, [pc, #124]	; (800c09c <xTaskIncrementTick+0x160>)
 800c01e:	441a      	add	r2, r3
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	3304      	adds	r3, #4
 800c024:	4619      	mov	r1, r3
 800c026:	4610      	mov	r0, r2
 800c028:	f7ff fbf4 	bl	800b814 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c030:	4b1b      	ldr	r3, [pc, #108]	; (800c0a0 <xTaskIncrementTick+0x164>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c036:	429a      	cmp	r2, r3
 800c038:	d3b9      	bcc.n	800bfae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c03a:	2301      	movs	r3, #1
 800c03c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c03e:	e7b6      	b.n	800bfae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c040:	4b17      	ldr	r3, [pc, #92]	; (800c0a0 <xTaskIncrementTick+0x164>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c046:	4915      	ldr	r1, [pc, #84]	; (800c09c <xTaskIncrementTick+0x160>)
 800c048:	4613      	mov	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b01      	cmp	r3, #1
 800c056:	d907      	bls.n	800c068 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c058:	2301      	movs	r3, #1
 800c05a:	617b      	str	r3, [r7, #20]
 800c05c:	e004      	b.n	800c068 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c05e:	4b11      	ldr	r3, [pc, #68]	; (800c0a4 <xTaskIncrementTick+0x168>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3301      	adds	r3, #1
 800c064:	4a0f      	ldr	r2, [pc, #60]	; (800c0a4 <xTaskIncrementTick+0x168>)
 800c066:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c068:	4b0f      	ldr	r3, [pc, #60]	; (800c0a8 <xTaskIncrementTick+0x16c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d001      	beq.n	800c074 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c070:	2301      	movs	r3, #1
 800c072:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c074:	697b      	ldr	r3, [r7, #20]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	200003ec 	.word	0x200003ec
 800c084:	200003d0 	.word	0x200003d0
 800c088:	2000039c 	.word	0x2000039c
 800c08c:	200003a0 	.word	0x200003a0
 800c090:	200003e4 	.word	0x200003e4
 800c094:	200003e8 	.word	0x200003e8
 800c098:	200003d4 	.word	0x200003d4
 800c09c:	20000310 	.word	0x20000310
 800c0a0:	2000030c 	.word	0x2000030c
 800c0a4:	200003dc 	.word	0x200003dc
 800c0a8:	200003e0 	.word	0x200003e0

0800c0ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b088      	sub	sp, #32
 800c0b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0b2:	4b39      	ldr	r3, [pc, #228]	; (800c198 <vTaskSwitchContext+0xec>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0ba:	4b38      	ldr	r3, [pc, #224]	; (800c19c <vTaskSwitchContext+0xf0>)
 800c0bc:	2201      	movs	r2, #1
 800c0be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0c0:	e065      	b.n	800c18e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800c0c2:	4b36      	ldr	r3, [pc, #216]	; (800c19c <vTaskSwitchContext+0xf0>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c0c8:	4b35      	ldr	r3, [pc, #212]	; (800c1a0 <vTaskSwitchContext+0xf4>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ce:	61fb      	str	r3, [r7, #28]
 800c0d0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c0d4:	61bb      	str	r3, [r7, #24]
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	69ba      	ldr	r2, [r7, #24]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d111      	bne.n	800c104 <vTaskSwitchContext+0x58>
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d10b      	bne.n	800c104 <vTaskSwitchContext+0x58>
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d105      	bne.n	800c104 <vTaskSwitchContext+0x58>
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	330c      	adds	r3, #12
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	69ba      	ldr	r2, [r7, #24]
 800c100:	429a      	cmp	r2, r3
 800c102:	d008      	beq.n	800c116 <vTaskSwitchContext+0x6a>
 800c104:	4b26      	ldr	r3, [pc, #152]	; (800c1a0 <vTaskSwitchContext+0xf4>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	4b25      	ldr	r3, [pc, #148]	; (800c1a0 <vTaskSwitchContext+0xf4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	3334      	adds	r3, #52	; 0x34
 800c10e:	4619      	mov	r1, r3
 800c110:	4610      	mov	r0, r2
 800c112:	f7f4 fd91 	bl	8000c38 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c116:	4b23      	ldr	r3, [pc, #140]	; (800c1a4 <vTaskSwitchContext+0xf8>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	fab3 f383 	clz	r3, r3
 800c122:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c124:	7afb      	ldrb	r3, [r7, #11]
 800c126:	f1c3 031f 	rsb	r3, r3, #31
 800c12a:	617b      	str	r3, [r7, #20]
 800c12c:	491e      	ldr	r1, [pc, #120]	; (800c1a8 <vTaskSwitchContext+0xfc>)
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	4613      	mov	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	440b      	add	r3, r1
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d109      	bne.n	800c154 <vTaskSwitchContext+0xa8>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	607b      	str	r3, [r7, #4]
 800c152:	e7fe      	b.n	800c152 <vTaskSwitchContext+0xa6>
 800c154:	697a      	ldr	r2, [r7, #20]
 800c156:	4613      	mov	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4a12      	ldr	r2, [pc, #72]	; (800c1a8 <vTaskSwitchContext+0xfc>)
 800c160:	4413      	add	r3, r2
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	605a      	str	r2, [r3, #4]
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	3308      	adds	r3, #8
 800c176:	429a      	cmp	r2, r3
 800c178:	d104      	bne.n	800c184 <vTaskSwitchContext+0xd8>
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	605a      	str	r2, [r3, #4]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	4a05      	ldr	r2, [pc, #20]	; (800c1a0 <vTaskSwitchContext+0xf4>)
 800c18c:	6013      	str	r3, [r2, #0]
}
 800c18e:	bf00      	nop
 800c190:	3720      	adds	r7, #32
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	200003ec 	.word	0x200003ec
 800c19c:	200003e0 	.word	0x200003e0
 800c1a0:	2000030c 	.word	0x2000030c
 800c1a4:	200003d4 	.word	0x200003d4
 800c1a8:	20000310 	.word	0x20000310

0800c1ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d109      	bne.n	800c1d0 <vTaskPlaceOnEventList+0x24>
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	e7fe      	b.n	800c1ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1d0:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <vTaskPlaceOnEventList+0x44>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3318      	adds	r3, #24
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff fb3f 	bl	800b85c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1de:	2101      	movs	r1, #1
 800c1e0:	6838      	ldr	r0, [r7, #0]
 800c1e2:	f000 f9ad 	bl	800c540 <prvAddCurrentTaskToDelayedList>
}
 800c1e6:	bf00      	nop
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	2000030c 	.word	0x2000030c

0800c1f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d109      	bne.n	800c21e <xTaskRemoveFromEventList+0x2a>
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	e7fe      	b.n	800c21c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	3318      	adds	r3, #24
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fb53 	bl	800b8ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c228:	4b1d      	ldr	r3, [pc, #116]	; (800c2a0 <xTaskRemoveFromEventList+0xac>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d11c      	bne.n	800c26a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	3304      	adds	r3, #4
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff fb4a 	bl	800b8ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23e:	2201      	movs	r2, #1
 800c240:	409a      	lsls	r2, r3
 800c242:	4b18      	ldr	r3, [pc, #96]	; (800c2a4 <xTaskRemoveFromEventList+0xb0>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4313      	orrs	r3, r2
 800c248:	4a16      	ldr	r2, [pc, #88]	; (800c2a4 <xTaskRemoveFromEventList+0xb0>)
 800c24a:	6013      	str	r3, [r2, #0]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4a13      	ldr	r2, [pc, #76]	; (800c2a8 <xTaskRemoveFromEventList+0xb4>)
 800c25a:	441a      	add	r2, r3
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	3304      	adds	r3, #4
 800c260:	4619      	mov	r1, r3
 800c262:	4610      	mov	r0, r2
 800c264:	f7ff fad6 	bl	800b814 <vListInsertEnd>
 800c268:	e005      	b.n	800c276 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	3318      	adds	r3, #24
 800c26e:	4619      	mov	r1, r3
 800c270:	480e      	ldr	r0, [pc, #56]	; (800c2ac <xTaskRemoveFromEventList+0xb8>)
 800c272:	f7ff facf 	bl	800b814 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27a:	4b0d      	ldr	r3, [pc, #52]	; (800c2b0 <xTaskRemoveFromEventList+0xbc>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	429a      	cmp	r2, r3
 800c282:	d905      	bls.n	800c290 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c284:	2301      	movs	r3, #1
 800c286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c288:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <xTaskRemoveFromEventList+0xc0>)
 800c28a:	2201      	movs	r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e001      	b.n	800c294 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c290:	2300      	movs	r3, #0
 800c292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c294:	697b      	ldr	r3, [r7, #20]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3718      	adds	r7, #24
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	200003ec 	.word	0x200003ec
 800c2a4:	200003d4 	.word	0x200003d4
 800c2a8:	20000310 	.word	0x20000310
 800c2ac:	200003a4 	.word	0x200003a4
 800c2b0:	2000030c 	.word	0x2000030c
 800c2b4:	200003e0 	.word	0x200003e0

0800c2b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2c0:	4b06      	ldr	r3, [pc, #24]	; (800c2dc <vTaskInternalSetTimeOutState+0x24>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2c8:	4b05      	ldr	r3, [pc, #20]	; (800c2e0 <vTaskInternalSetTimeOutState+0x28>)
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	605a      	str	r2, [r3, #4]
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	200003e4 	.word	0x200003e4
 800c2e0:	200003d0 	.word	0x200003d0

0800c2e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b088      	sub	sp, #32
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d109      	bne.n	800c308 <xTaskCheckForTimeOut+0x24>
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	613b      	str	r3, [r7, #16]
 800c306:	e7fe      	b.n	800c306 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d109      	bne.n	800c322 <xTaskCheckForTimeOut+0x3e>
 800c30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	60fb      	str	r3, [r7, #12]
 800c320:	e7fe      	b.n	800c320 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c322:	f000 f989 	bl	800c638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c326:	4b1d      	ldr	r3, [pc, #116]	; (800c39c <xTaskCheckForTimeOut+0xb8>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	69ba      	ldr	r2, [r7, #24]
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33e:	d102      	bne.n	800c346 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c340:	2300      	movs	r3, #0
 800c342:	61fb      	str	r3, [r7, #28]
 800c344:	e023      	b.n	800c38e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <xTaskCheckForTimeOut+0xbc>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d007      	beq.n	800c362 <xTaskCheckForTimeOut+0x7e>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d302      	bcc.n	800c362 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c35c:	2301      	movs	r3, #1
 800c35e:	61fb      	str	r3, [r7, #28]
 800c360:	e015      	b.n	800c38e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d20b      	bcs.n	800c384 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	1ad2      	subs	r2, r2, r3
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff ff9d 	bl	800c2b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c37e:	2300      	movs	r3, #0
 800c380:	61fb      	str	r3, [r7, #28]
 800c382:	e004      	b.n	800c38e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c38a:	2301      	movs	r3, #1
 800c38c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c38e:	f000 f981 	bl	800c694 <vPortExitCritical>

	return xReturn;
 800c392:	69fb      	ldr	r3, [r7, #28]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3720      	adds	r7, #32
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	200003d0 	.word	0x200003d0
 800c3a0:	200003e4 	.word	0x200003e4

0800c3a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c3a8:	4b03      	ldr	r3, [pc, #12]	; (800c3b8 <vTaskMissedYield+0x14>)
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	601a      	str	r2, [r3, #0]
}
 800c3ae:	bf00      	nop
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	200003e0 	.word	0x200003e0

0800c3bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3c2:	4b0c      	ldr	r3, [pc, #48]	; (800c3f4 <prvResetNextTaskUnblockTime+0x38>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d104      	bne.n	800c3d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3d4:	e008      	b.n	800c3e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <prvResetNextTaskUnblockTime+0x38>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	4a04      	ldr	r2, [pc, #16]	; (800c3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3e6:	6013      	str	r3, [r2, #0]
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	2000039c 	.word	0x2000039c
 800c3f8:	200003e8 	.word	0x200003e8

0800c3fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c402:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <xTaskGetSchedulerState+0x34>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d102      	bne.n	800c410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c40a:	2301      	movs	r3, #1
 800c40c:	607b      	str	r3, [r7, #4]
 800c40e:	e008      	b.n	800c422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c410:	4b08      	ldr	r3, [pc, #32]	; (800c434 <xTaskGetSchedulerState+0x38>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c418:	2302      	movs	r3, #2
 800c41a:	607b      	str	r3, [r7, #4]
 800c41c:	e001      	b.n	800c422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c41e:	2300      	movs	r3, #0
 800c420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c422:	687b      	ldr	r3, [r7, #4]
	}
 800c424:	4618      	mov	r0, r3
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	200003d8 	.word	0x200003d8
 800c434:	200003ec 	.word	0x200003ec

0800c438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c444:	2300      	movs	r3, #0
 800c446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d06c      	beq.n	800c528 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c44e:	4b39      	ldr	r3, [pc, #228]	; (800c534 <xTaskPriorityDisinherit+0xfc>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	429a      	cmp	r2, r3
 800c456:	d009      	beq.n	800c46c <xTaskPriorityDisinherit+0x34>
 800c458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45c:	f383 8811 	msr	BASEPRI, r3
 800c460:	f3bf 8f6f 	isb	sy
 800c464:	f3bf 8f4f 	dsb	sy
 800c468:	60fb      	str	r3, [r7, #12]
 800c46a:	e7fe      	b.n	800c46a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c470:	2b00      	cmp	r3, #0
 800c472:	d109      	bne.n	800c488 <xTaskPriorityDisinherit+0x50>
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	60bb      	str	r3, [r7, #8]
 800c486:	e7fe      	b.n	800c486 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c48c:	1e5a      	subs	r2, r3, #1
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d044      	beq.n	800c528 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d140      	bne.n	800c528 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff fa0f 	bl	800b8ce <uxListRemove>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d115      	bne.n	800c4e2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ba:	491f      	ldr	r1, [pc, #124]	; (800c538 <xTaskPriorityDisinherit+0x100>)
 800c4bc:	4613      	mov	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4413      	add	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	440b      	add	r3, r1
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <xTaskPriorityDisinherit+0xaa>
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d6:	43da      	mvns	r2, r3
 800c4d8:	4b18      	ldr	r3, [pc, #96]	; (800c53c <xTaskPriorityDisinherit+0x104>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4013      	ands	r3, r2
 800c4de:	4a17      	ldr	r2, [pc, #92]	; (800c53c <xTaskPriorityDisinherit+0x104>)
 800c4e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ee:	f1c3 0207 	rsb	r2, r3, #7
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	409a      	lsls	r2, r3
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <xTaskPriorityDisinherit+0x104>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4313      	orrs	r3, r2
 800c504:	4a0d      	ldr	r2, [pc, #52]	; (800c53c <xTaskPriorityDisinherit+0x104>)
 800c506:	6013      	str	r3, [r2, #0]
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50c:	4613      	mov	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	4413      	add	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4a08      	ldr	r2, [pc, #32]	; (800c538 <xTaskPriorityDisinherit+0x100>)
 800c516:	441a      	add	r2, r3
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	3304      	adds	r3, #4
 800c51c:	4619      	mov	r1, r3
 800c51e:	4610      	mov	r0, r2
 800c520:	f7ff f978 	bl	800b814 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c524:	2301      	movs	r3, #1
 800c526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c528:	697b      	ldr	r3, [r7, #20]
	}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	2000030c 	.word	0x2000030c
 800c538:	20000310 	.word	0x20000310
 800c53c:	200003d4 	.word	0x200003d4

0800c540 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c54a:	4b29      	ldr	r3, [pc, #164]	; (800c5f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c550:	4b28      	ldr	r3, [pc, #160]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3304      	adds	r3, #4
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff f9b9 	bl	800b8ce <uxListRemove>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10b      	bne.n	800c57a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c562:	4b24      	ldr	r3, [pc, #144]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c568:	2201      	movs	r2, #1
 800c56a:	fa02 f303 	lsl.w	r3, r2, r3
 800c56e:	43da      	mvns	r2, r3
 800c570:	4b21      	ldr	r3, [pc, #132]	; (800c5f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4013      	ands	r3, r2
 800c576:	4a20      	ldr	r2, [pc, #128]	; (800c5f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c578:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c580:	d10a      	bne.n	800c598 <prvAddCurrentTaskToDelayedList+0x58>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d007      	beq.n	800c598 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c588:	4b1a      	ldr	r3, [pc, #104]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3304      	adds	r3, #4
 800c58e:	4619      	mov	r1, r3
 800c590:	481a      	ldr	r0, [pc, #104]	; (800c5fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800c592:	f7ff f93f 	bl	800b814 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c596:	e026      	b.n	800c5e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4413      	add	r3, r2
 800c59e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5a0:	4b14      	ldr	r3, [pc, #80]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d209      	bcs.n	800c5c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5b0:	4b13      	ldr	r3, [pc, #76]	; (800c600 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	4b0f      	ldr	r3, [pc, #60]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4610      	mov	r0, r2
 800c5be:	f7ff f94d 	bl	800b85c <vListInsert>
}
 800c5c2:	e010      	b.n	800c5e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5c4:	4b0f      	ldr	r3, [pc, #60]	; (800c604 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	f7ff f943 	bl	800b85c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5d6:	4b0c      	ldr	r3, [pc, #48]	; (800c608 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d202      	bcs.n	800c5e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5e0:	4a09      	ldr	r2, [pc, #36]	; (800c608 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	6013      	str	r3, [r2, #0]
}
 800c5e6:	bf00      	nop
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	200003d0 	.word	0x200003d0
 800c5f4:	2000030c 	.word	0x2000030c
 800c5f8:	200003d4 	.word	0x200003d4
 800c5fc:	200003b8 	.word	0x200003b8
 800c600:	200003a0 	.word	0x200003a0
 800c604:	2000039c 	.word	0x2000039c
 800c608:	200003e8 	.word	0x200003e8
 800c60c:	00000000 	.word	0x00000000

0800c610 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c610:	4b07      	ldr	r3, [pc, #28]	; (800c630 <pxCurrentTCBConst2>)
 800c612:	6819      	ldr	r1, [r3, #0]
 800c614:	6808      	ldr	r0, [r1, #0]
 800c616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61a:	f380 8809 	msr	PSP, r0
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f04f 0000 	mov.w	r0, #0
 800c626:	f380 8811 	msr	BASEPRI, r0
 800c62a:	4770      	bx	lr
 800c62c:	f3af 8000 	nop.w

0800c630 <pxCurrentTCBConst2>:
 800c630:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c634:	bf00      	nop
 800c636:	bf00      	nop

0800c638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c650:	4b0e      	ldr	r3, [pc, #56]	; (800c68c <vPortEnterCritical+0x54>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	4a0d      	ldr	r2, [pc, #52]	; (800c68c <vPortEnterCritical+0x54>)
 800c658:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c65a:	4b0c      	ldr	r3, [pc, #48]	; (800c68c <vPortEnterCritical+0x54>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d10e      	bne.n	800c680 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c662:	4b0b      	ldr	r3, [pc, #44]	; (800c690 <vPortEnterCritical+0x58>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d009      	beq.n	800c680 <vPortEnterCritical+0x48>
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	603b      	str	r3, [r7, #0]
 800c67e:	e7fe      	b.n	800c67e <vPortEnterCritical+0x46>
	}
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	200000a0 	.word	0x200000a0
 800c690:	e000ed04 	.word	0xe000ed04

0800c694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c69a:	4b11      	ldr	r3, [pc, #68]	; (800c6e0 <vPortExitCritical+0x4c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d109      	bne.n	800c6b6 <vPortExitCritical+0x22>
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	607b      	str	r3, [r7, #4]
 800c6b4:	e7fe      	b.n	800c6b4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c6b6:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <vPortExitCritical+0x4c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	4a08      	ldr	r2, [pc, #32]	; (800c6e0 <vPortExitCritical+0x4c>)
 800c6be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6c0:	4b07      	ldr	r3, [pc, #28]	; (800c6e0 <vPortExitCritical+0x4c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d104      	bne.n	800c6d2 <vPortExitCritical+0x3e>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6d2:	bf00      	nop
 800c6d4:	370c      	adds	r7, #12
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	200000a0 	.word	0x200000a0
	...

0800c6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6f0:	f3ef 8009 	mrs	r0, PSP
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	4b15      	ldr	r3, [pc, #84]	; (800c750 <pxCurrentTCBConst>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	f01e 0f10 	tst.w	lr, #16
 800c700:	bf08      	it	eq
 800c702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70a:	6010      	str	r0, [r2, #0]
 800c70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c714:	f380 8811 	msr	BASEPRI, r0
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	f7ff fcc4 	bl	800c0ac <vTaskSwitchContext>
 800c724:	f04f 0000 	mov.w	r0, #0
 800c728:	f380 8811 	msr	BASEPRI, r0
 800c72c:	bc09      	pop	{r0, r3}
 800c72e:	6819      	ldr	r1, [r3, #0]
 800c730:	6808      	ldr	r0, [r1, #0]
 800c732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c736:	f01e 0f10 	tst.w	lr, #16
 800c73a:	bf08      	it	eq
 800c73c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c740:	f380 8809 	msr	PSP, r0
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	f3af 8000 	nop.w

0800c750 <pxCurrentTCBConst>:
 800c750:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c754:	bf00      	nop
 800c756:	bf00      	nop

0800c758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c770:	f7ff fbe4 	bl	800bf3c <xTaskIncrementTick>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c77a:	4b06      	ldr	r3, [pc, #24]	; (800c794 <SysTick_Handler+0x3c>)
 800c77c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	e000ed04 	.word	0xe000ed04

0800c798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c79e:	f3ef 8305 	mrs	r3, IPSR
 800c7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b0f      	cmp	r3, #15
 800c7a8:	d913      	bls.n	800c7d2 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7aa:	4a16      	ldr	r2, [pc, #88]	; (800c804 <vPortValidateInterruptPriority+0x6c>)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7b4:	4b14      	ldr	r3, [pc, #80]	; (800c808 <vPortValidateInterruptPriority+0x70>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	7afa      	ldrb	r2, [r7, #11]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d209      	bcs.n	800c7d2 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	607b      	str	r3, [r7, #4]
 800c7d0:	e7fe      	b.n	800c7d0 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7d2:	4b0e      	ldr	r3, [pc, #56]	; (800c80c <vPortValidateInterruptPriority+0x74>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7da:	4b0d      	ldr	r3, [pc, #52]	; (800c810 <vPortValidateInterruptPriority+0x78>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d909      	bls.n	800c7f6 <vPortValidateInterruptPriority+0x5e>
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	603b      	str	r3, [r7, #0]
 800c7f4:	e7fe      	b.n	800c7f4 <vPortValidateInterruptPriority+0x5c>
	}
 800c7f6:	bf00      	nop
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	e000e3f0 	.word	0xe000e3f0
 800c808:	200003f0 	.word	0x200003f0
 800c80c:	e000ed0c 	.word	0xe000ed0c
 800c810:	200003f4 	.word	0x200003f4

0800c814 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fec8 	bl	800b5b8 <USBH_LL_IncTimer>
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe ff0c 	bl	800b65c <USBH_LL_Connect>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe ff21 	bl	800b6a2 <USBH_LL_Disconnect>
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	460b      	mov	r3, r1
 800c872:	70fb      	strb	r3, [r7, #3]
 800c874:	4613      	mov	r3, r2
 800c876:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe ff41 	bl	800b706 <USBH_LL_NotifyURBChange>
#endif
}
 800c884:	bf00      	nop
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe feb6 	bl	800b60c <USBH_LL_PortEnabled>
}
 800c8a0:	bf00      	nop
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe fec2 	bl	800b640 <USBH_LL_PortDisabled>
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7f9 f99b 	bl	8005c16 <HAL_HCD_Stop>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 f808 	bl	800c8fc <USBH_Get_USB_Status>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
	...

0800c8fc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	4603      	mov	r3, r0
 800c904:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c90a:	79fb      	ldrb	r3, [r7, #7]
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	d817      	bhi.n	800c940 <USBH_Get_USB_Status+0x44>
 800c910:	a201      	add	r2, pc, #4	; (adr r2, 800c918 <USBH_Get_USB_Status+0x1c>)
 800c912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c916:	bf00      	nop
 800c918:	0800c929 	.word	0x0800c929
 800c91c:	0800c92f 	.word	0x0800c92f
 800c920:	0800c935 	.word	0x0800c935
 800c924:	0800c93b 	.word	0x0800c93b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c928:	2300      	movs	r3, #0
 800c92a:	73fb      	strb	r3, [r7, #15]
    break;
 800c92c:	e00b      	b.n	800c946 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c92e:	2302      	movs	r3, #2
 800c930:	73fb      	strb	r3, [r7, #15]
    break;
 800c932:	e008      	b.n	800c946 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c934:	2301      	movs	r3, #1
 800c936:	73fb      	strb	r3, [r7, #15]
    break;
 800c938:	e005      	b.n	800c946 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c93a:	2302      	movs	r3, #2
 800c93c:	73fb      	strb	r3, [r7, #15]
    break;
 800c93e:	e002      	b.n	800c946 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c940:	2302      	movs	r3, #2
 800c942:	73fb      	strb	r3, [r7, #15]
    break;
 800c944:	bf00      	nop
  }
  return usb_status;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <__errno>:
 800c954:	4b01      	ldr	r3, [pc, #4]	; (800c95c <__errno+0x8>)
 800c956:	6818      	ldr	r0, [r3, #0]
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	200000a4 	.word	0x200000a4

0800c960 <__libc_init_array>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	4e0d      	ldr	r6, [pc, #52]	; (800c998 <__libc_init_array+0x38>)
 800c964:	4c0d      	ldr	r4, [pc, #52]	; (800c99c <__libc_init_array+0x3c>)
 800c966:	1ba4      	subs	r4, r4, r6
 800c968:	10a4      	asrs	r4, r4, #2
 800c96a:	2500      	movs	r5, #0
 800c96c:	42a5      	cmp	r5, r4
 800c96e:	d109      	bne.n	800c984 <__libc_init_array+0x24>
 800c970:	4e0b      	ldr	r6, [pc, #44]	; (800c9a0 <__libc_init_array+0x40>)
 800c972:	4c0c      	ldr	r4, [pc, #48]	; (800c9a4 <__libc_init_array+0x44>)
 800c974:	f000 f8d4 	bl	800cb20 <_init>
 800c978:	1ba4      	subs	r4, r4, r6
 800c97a:	10a4      	asrs	r4, r4, #2
 800c97c:	2500      	movs	r5, #0
 800c97e:	42a5      	cmp	r5, r4
 800c980:	d105      	bne.n	800c98e <__libc_init_array+0x2e>
 800c982:	bd70      	pop	{r4, r5, r6, pc}
 800c984:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c988:	4798      	blx	r3
 800c98a:	3501      	adds	r5, #1
 800c98c:	e7ee      	b.n	800c96c <__libc_init_array+0xc>
 800c98e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c992:	4798      	blx	r3
 800c994:	3501      	adds	r5, #1
 800c996:	e7f2      	b.n	800c97e <__libc_init_array+0x1e>
 800c998:	08010600 	.word	0x08010600
 800c99c:	08010600 	.word	0x08010600
 800c9a0:	08010600 	.word	0x08010600
 800c9a4:	08010604 	.word	0x08010604

0800c9a8 <malloc>:
 800c9a8:	4b02      	ldr	r3, [pc, #8]	; (800c9b4 <malloc+0xc>)
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	f000 b817 	b.w	800c9e0 <_malloc_r>
 800c9b2:	bf00      	nop
 800c9b4:	200000a4 	.word	0x200000a4

0800c9b8 <memcpy>:
 800c9b8:	b510      	push	{r4, lr}
 800c9ba:	1e43      	subs	r3, r0, #1
 800c9bc:	440a      	add	r2, r1
 800c9be:	4291      	cmp	r1, r2
 800c9c0:	d100      	bne.n	800c9c4 <memcpy+0xc>
 800c9c2:	bd10      	pop	{r4, pc}
 800c9c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9cc:	e7f7      	b.n	800c9be <memcpy+0x6>

0800c9ce <memset>:
 800c9ce:	4402      	add	r2, r0
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d100      	bne.n	800c9d8 <memset+0xa>
 800c9d6:	4770      	bx	lr
 800c9d8:	f803 1b01 	strb.w	r1, [r3], #1
 800c9dc:	e7f9      	b.n	800c9d2 <memset+0x4>
	...

0800c9e0 <_malloc_r>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	1ccd      	adds	r5, r1, #3
 800c9e4:	f025 0503 	bic.w	r5, r5, #3
 800c9e8:	3508      	adds	r5, #8
 800c9ea:	2d0c      	cmp	r5, #12
 800c9ec:	bf38      	it	cc
 800c9ee:	250c      	movcc	r5, #12
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	db01      	blt.n	800c9fa <_malloc_r+0x1a>
 800c9f6:	42a9      	cmp	r1, r5
 800c9f8:	d903      	bls.n	800ca02 <_malloc_r+0x22>
 800c9fa:	230c      	movs	r3, #12
 800c9fc:	6033      	str	r3, [r6, #0]
 800c9fe:	2000      	movs	r0, #0
 800ca00:	bd70      	pop	{r4, r5, r6, pc}
 800ca02:	f000 f88b 	bl	800cb1c <__malloc_lock>
 800ca06:	4a21      	ldr	r2, [pc, #132]	; (800ca8c <_malloc_r+0xac>)
 800ca08:	6814      	ldr	r4, [r2, #0]
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	b991      	cbnz	r1, 800ca34 <_malloc_r+0x54>
 800ca0e:	4c20      	ldr	r4, [pc, #128]	; (800ca90 <_malloc_r+0xb0>)
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	b91b      	cbnz	r3, 800ca1c <_malloc_r+0x3c>
 800ca14:	4630      	mov	r0, r6
 800ca16:	f000 f871 	bl	800cafc <_sbrk_r>
 800ca1a:	6020      	str	r0, [r4, #0]
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f000 f86c 	bl	800cafc <_sbrk_r>
 800ca24:	1c43      	adds	r3, r0, #1
 800ca26:	d124      	bne.n	800ca72 <_malloc_r+0x92>
 800ca28:	230c      	movs	r3, #12
 800ca2a:	6033      	str	r3, [r6, #0]
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f000 f876 	bl	800cb1e <__malloc_unlock>
 800ca32:	e7e4      	b.n	800c9fe <_malloc_r+0x1e>
 800ca34:	680b      	ldr	r3, [r1, #0]
 800ca36:	1b5b      	subs	r3, r3, r5
 800ca38:	d418      	bmi.n	800ca6c <_malloc_r+0x8c>
 800ca3a:	2b0b      	cmp	r3, #11
 800ca3c:	d90f      	bls.n	800ca5e <_malloc_r+0x7e>
 800ca3e:	600b      	str	r3, [r1, #0]
 800ca40:	50cd      	str	r5, [r1, r3]
 800ca42:	18cc      	adds	r4, r1, r3
 800ca44:	4630      	mov	r0, r6
 800ca46:	f000 f86a 	bl	800cb1e <__malloc_unlock>
 800ca4a:	f104 000b 	add.w	r0, r4, #11
 800ca4e:	1d23      	adds	r3, r4, #4
 800ca50:	f020 0007 	bic.w	r0, r0, #7
 800ca54:	1ac3      	subs	r3, r0, r3
 800ca56:	d0d3      	beq.n	800ca00 <_malloc_r+0x20>
 800ca58:	425a      	negs	r2, r3
 800ca5a:	50e2      	str	r2, [r4, r3]
 800ca5c:	e7d0      	b.n	800ca00 <_malloc_r+0x20>
 800ca5e:	428c      	cmp	r4, r1
 800ca60:	684b      	ldr	r3, [r1, #4]
 800ca62:	bf16      	itet	ne
 800ca64:	6063      	strne	r3, [r4, #4]
 800ca66:	6013      	streq	r3, [r2, #0]
 800ca68:	460c      	movne	r4, r1
 800ca6a:	e7eb      	b.n	800ca44 <_malloc_r+0x64>
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	6849      	ldr	r1, [r1, #4]
 800ca70:	e7cc      	b.n	800ca0c <_malloc_r+0x2c>
 800ca72:	1cc4      	adds	r4, r0, #3
 800ca74:	f024 0403 	bic.w	r4, r4, #3
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d005      	beq.n	800ca88 <_malloc_r+0xa8>
 800ca7c:	1a21      	subs	r1, r4, r0
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f000 f83c 	bl	800cafc <_sbrk_r>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d0cf      	beq.n	800ca28 <_malloc_r+0x48>
 800ca88:	6025      	str	r5, [r4, #0]
 800ca8a:	e7db      	b.n	800ca44 <_malloc_r+0x64>
 800ca8c:	200003f8 	.word	0x200003f8
 800ca90:	200003fc 	.word	0x200003fc

0800ca94 <rand>:
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	4b13      	ldr	r3, [pc, #76]	; (800cae4 <rand+0x50>)
 800ca98:	681c      	ldr	r4, [r3, #0]
 800ca9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca9c:	b97b      	cbnz	r3, 800cabe <rand+0x2a>
 800ca9e:	2018      	movs	r0, #24
 800caa0:	f7ff ff82 	bl	800c9a8 <malloc>
 800caa4:	4a10      	ldr	r2, [pc, #64]	; (800cae8 <rand+0x54>)
 800caa6:	4b11      	ldr	r3, [pc, #68]	; (800caec <rand+0x58>)
 800caa8:	63a0      	str	r0, [r4, #56]	; 0x38
 800caaa:	e9c0 2300 	strd	r2, r3, [r0]
 800caae:	4b10      	ldr	r3, [pc, #64]	; (800caf0 <rand+0x5c>)
 800cab0:	6083      	str	r3, [r0, #8]
 800cab2:	230b      	movs	r3, #11
 800cab4:	8183      	strh	r3, [r0, #12]
 800cab6:	2201      	movs	r2, #1
 800cab8:	2300      	movs	r3, #0
 800caba:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cabe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cac0:	480c      	ldr	r0, [pc, #48]	; (800caf4 <rand+0x60>)
 800cac2:	690a      	ldr	r2, [r1, #16]
 800cac4:	694b      	ldr	r3, [r1, #20]
 800cac6:	4c0c      	ldr	r4, [pc, #48]	; (800caf8 <rand+0x64>)
 800cac8:	4350      	muls	r0, r2
 800caca:	fb04 0003 	mla	r0, r4, r3, r0
 800cace:	fba2 2304 	umull	r2, r3, r2, r4
 800cad2:	4403      	add	r3, r0
 800cad4:	1c54      	adds	r4, r2, #1
 800cad6:	f143 0500 	adc.w	r5, r3, #0
 800cada:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800cade:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	200000a4 	.word	0x200000a4
 800cae8:	abcd330e 	.word	0xabcd330e
 800caec:	e66d1234 	.word	0xe66d1234
 800caf0:	0005deec 	.word	0x0005deec
 800caf4:	5851f42d 	.word	0x5851f42d
 800caf8:	4c957f2d 	.word	0x4c957f2d

0800cafc <_sbrk_r>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	4c06      	ldr	r4, [pc, #24]	; (800cb18 <_sbrk_r+0x1c>)
 800cb00:	2300      	movs	r3, #0
 800cb02:	4605      	mov	r5, r0
 800cb04:	4608      	mov	r0, r1
 800cb06:	6023      	str	r3, [r4, #0]
 800cb08:	f7f5 f974 	bl	8001df4 <_sbrk>
 800cb0c:	1c43      	adds	r3, r0, #1
 800cb0e:	d102      	bne.n	800cb16 <_sbrk_r+0x1a>
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	b103      	cbz	r3, 800cb16 <_sbrk_r+0x1a>
 800cb14:	602b      	str	r3, [r5, #0]
 800cb16:	bd38      	pop	{r3, r4, r5, pc}
 800cb18:	20000a60 	.word	0x20000a60

0800cb1c <__malloc_lock>:
 800cb1c:	4770      	bx	lr

0800cb1e <__malloc_unlock>:
 800cb1e:	4770      	bx	lr

0800cb20 <_init>:
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb22:	bf00      	nop
 800cb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb26:	bc08      	pop	{r3}
 800cb28:	469e      	mov	lr, r3
 800cb2a:	4770      	bx	lr

0800cb2c <_fini>:
 800cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2e:	bf00      	nop
 800cb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb32:	bc08      	pop	{r3}
 800cb34:	469e      	mov	lr, r3
 800cb36:	4770      	bx	lr
