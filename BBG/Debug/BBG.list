
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ac0  0800cb78  0800cb78  0001cb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010638  08010638  00030108  2**0
                  CONTENTS
  4 .ARM          00000008  08010638  08010638  00020638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010640  08010640  00030108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010640  08010640  00020640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010644  08010644  00020644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08010648  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  20000108  08010750  00030108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  08010750  00030a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ffdb  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007547  00000000  00000000  00070113  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027c8  00000000  00000000  00077660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024b8  00000000  00000000  00079e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030773  00000000  00000000  0007c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a772  00000000  00000000  000aca53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6dca  00000000  00000000  000d71c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cdf8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a660  00000000  00000000  001ce00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cb60 	.word	0x0800cb60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	0800cb60 	.word	0x0800cb60

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
////	bbg->kulka = kulka;
////	rysuj_kulke(bbg->kulka);
//}

void BBG_init(BBG *bbg, Platforma *platforma, Klocek **klocki, Kulka *kulka, int lkl)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	60da      	str	r2, [r3, #12]

    bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
    rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fad2 	bl	8001ab8 <rysuj_platforme>

    bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++)
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e014      	b.n	800054a <BBG_init+0x5a>
    {
    	if(bbg->klocki[i]->is_there==1){
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	7b1b      	ldrb	r3, [r3, #12]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d108      	bne.n	8000544 <BBG_init+0x54>
        rysuj_klocek(bbg->klocki[i]);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fdac 	bl	800109c <rysuj_klocek>
    for (int i = 0; i < bbg->liczba_klockow; i++)
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	3301      	adds	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbe5      	blt.n	8000520 <BBG_init+0x30>
    	}
    }

    bbg->kulka = kulka;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	609a      	str	r2, [r3, #8]
    rysuj_kulke(bbg->kulka);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fdd4 	bl	800110c <rysuj_kulke>
    rysuj_platforme(bbg->platforma);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f001 faa5 	bl	8001ab8 <rysuj_platforme>
}
 800056e:	bf00      	nop
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <BBG_obsluga_zbicia_klocka>:

void BBG_obsluga_zbicia_klocka(BBG *bbg)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++)
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e116      	b.n	80007b4 <BBG_obsluga_zbicia_klocka+0x23c>
    {
        // Sprawdź, czy kulka zderzyła się z klockiem
        if (bbg->kulka->polozenie_y + (bbg->kulka->promien-2) >= bbg->klocki[i]->pozycja_y &&
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	3b02      	subs	r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	6851      	ldr	r1, [r2, #4]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	440a      	add	r2, r1
 80005a0:	6812      	ldr	r2, [r2, #0]
 80005a2:	8852      	ldrh	r2, [r2, #2]
 80005a4:	4293      	cmp	r3, r2
 80005a6:	f2c0 8102 	blt.w	80007ae <BBG_obsluga_zbicia_klocka+0x236>
            bbg->kulka->polozenie_y - (bbg->kulka->promien-2) <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	3b02      	subs	r3, #2
 80005b8:	1ad2      	subs	r2, r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	885b      	ldrh	r3, [r3, #2]
 80005c8:	4618      	mov	r0, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6859      	ldr	r1, [r3, #4]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	4403      	add	r3, r0
        if (bbg->kulka->polozenie_y + (bbg->kulka->promien-2) >= bbg->klocki[i]->pozycja_y &&
 80005da:	429a      	cmp	r2, r3
 80005dc:	f300 80e7 	bgt.w	80007ae <BBG_obsluga_zbicia_klocka+0x236>
            bbg->kulka->polozenie_x + (bbg->kulka->promien-2) >= bbg->klocki[i]->pozycja_x &&
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	3b02      	subs	r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	6851      	ldr	r1, [r2, #4]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	440a      	add	r2, r1
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	8812      	ldrh	r2, [r2, #0]
            bbg->kulka->polozenie_y - (bbg->kulka->promien-2) <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005fe:	4293      	cmp	r3, r2
 8000600:	f2c0 80d5 	blt.w	80007ae <BBG_obsluga_zbicia_klocka+0x236>
            bbg->kulka->polozenie_x - (bbg->kulka->promien-2) <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc &&
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	3b02      	subs	r3, #2
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6859      	ldr	r1, [r3, #4]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	440b      	add	r3, r1
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6859      	ldr	r1, [r3, #4]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	440b      	add	r3, r1
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	4403      	add	r3, r0
            bbg->kulka->polozenie_x + (bbg->kulka->promien-2) >= bbg->klocki[i]->pozycja_x &&
 8000634:	429a      	cmp	r2, r3
 8000636:	f300 80ba 	bgt.w	80007ae <BBG_obsluga_zbicia_klocka+0x236>
			bbg->klocki[i]->is_there==1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	7b1b      	ldrb	r3, [r3, #12]
            bbg->kulka->polozenie_x - (bbg->kulka->promien-2) <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc &&
 8000648:	2b01      	cmp	r3, #1
 800064a:	f040 80b0 	bne.w	80007ae <BBG_obsluga_zbicia_klocka+0x236>
        {

            bbg->kulka->predkosc_x *= -1;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4252      	negs	r2, r2
 800065a:	60da      	str	r2, [r3, #12]
            bbg->kulka->predkosc_y *= -1;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	691a      	ldr	r2, [r3, #16]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4252      	negs	r2, r2
 8000668:	611a      	str	r2, [r3, #16]

            // Odwróć kierunek prędkości kulki
            if (bbg->kulka->polozenie_x >= bbg->klocki[i]->pozycja_x &&
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	6851      	ldr	r1, [r2, #4]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	0092      	lsls	r2, r2, #2
 8000678:	440a      	add	r2, r1
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	8812      	ldrh	r2, [r2, #0]
 800067e:	4293      	cmp	r3, r2
 8000680:	db1b      	blt.n	80006ba <BBG_obsluga_zbicia_klocka+0x142>
                bbg->kulka->polozenie_x <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6859      	ldr	r1, [r3, #4]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	440b      	add	r3, r1
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6859      	ldr	r1, [r3, #4]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	4403      	add	r3, r0
            if (bbg->kulka->polozenie_x >= bbg->klocki[i]->pozycja_x &&
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dc06      	bgt.n	80006ba <BBG_obsluga_zbicia_klocka+0x142>
            {
                bbg->kulka->predkosc_x *= -1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	4252      	negs	r2, r2
 80006b8:	60da      	str	r2, [r3, #12]
            }
            if (bbg->kulka->polozenie_y >= bbg->klocki[i]->pozycja_y &&
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	6851      	ldr	r1, [r2, #4]
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	0092      	lsls	r2, r2, #2
 80006c8:	440a      	add	r2, r1
 80006ca:	6812      	ldr	r2, [r2, #0]
 80006cc:	8852      	ldrh	r2, [r2, #2]
 80006ce:	4293      	cmp	r3, r2
 80006d0:	db1b      	blt.n	800070a <BBG_obsluga_zbicia_klocka+0x192>
                bbg->kulka->polozenie_y <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6859      	ldr	r1, [r3, #4]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	885b      	ldrh	r3, [r3, #2]
 80006e6:	4618      	mov	r0, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6859      	ldr	r1, [r3, #4]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	795b      	ldrb	r3, [r3, #5]
 80006f6:	4403      	add	r3, r0
            if (bbg->kulka->polozenie_y >= bbg->klocki[i]->pozycja_y &&
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dc06      	bgt.n	800070a <BBG_obsluga_zbicia_klocka+0x192>
            {
                bbg->kulka->predkosc_y *= -1;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	691a      	ldr	r2, [r3, #16]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	4252      	negs	r2, r2
 8000708:	611a      	str	r2, [r3, #16]
            }

            if(bbg->klocki[i]->is_breakable==1){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	7b5b      	ldrb	r3, [r3, #13]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d144      	bne.n	80007a6 <BBG_obsluga_zbicia_klocka+0x22e>
            // zamaluj miejsce zbitego klocka
            BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800071c:	482b      	ldr	r0, [pc, #172]	; (80007cc <BBG_obsluga_zbicia_klocka+0x254>)
 800071e:	f002 ffd5 	bl	80036cc <BSP_LCD_SetBackColor>
            BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000722:	482a      	ldr	r0, [pc, #168]	; (80007cc <BBG_obsluga_zbicia_klocka+0x254>)
 8000724:	f002 ffba 	bl	800369c <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	8818      	ldrh	r0, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	8859      	ldrh	r1, [r3, #2]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	b29c      	uxth	r4, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	795b      	ldrb	r3, [r3, #5]
 8000762:	b29b      	uxth	r3, r3
 8000764:	4622      	mov	r2, r4
 8000766:	f003 fa39 	bl	8003bdc <BSP_LCD_FillRect>

            // Usuń trafiony klocek z tablicy klocków
            // free(bbg->klocki[i]);

            // Przesuń pozostałe klocki w tablicy, aby zapełnić lukę po usuniętym klocku
            for (int j = i; j < bbg->liczba_klockow - 1; j++)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	e00f      	b.n	8000790 <BBG_obsluga_zbicia_klocka+0x218>
            {
                bbg->klocki[j] = bbg->klocki[j + 1];
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	3301      	adds	r3, #1
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	441a      	add	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6859      	ldr	r1, [r3, #4]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	601a      	str	r2, [r3, #0]
            for (int j = i; j < bbg->liczba_klockow - 1; j++)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	3301      	adds	r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	3b01      	subs	r3, #1
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbe9      	blt.n	8000770 <BBG_obsluga_zbicia_klocka+0x1f8>
            }


            // Zmniejsz liczbę klocków o 1
            bbg->liczba_klockow--;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	60da      	str	r2, [r3, #12]
            }
            // Przerwij pętlę, gdy trafiony zostanie tylko jeden klocek
            if (bbg->liczba_klockow == 0)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d009      	beq.n	80007c2 <BBG_obsluga_zbicia_klocka+0x24a>
    for (int i = 0; i < bbg->liczba_klockow; i++)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	f6ff aee3 	blt.w	8000586 <BBG_obsluga_zbicia_klocka+0xe>
            {
                break;
            }
        }
    }
}
 80007c0:	e000      	b.n	80007c4 <BBG_obsluga_zbicia_klocka+0x24c>
                break;
 80007c2:	bf00      	nop
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	ffff0000 	.word	0xffff0000

080007d0 <BBG_obsluzDotykEkranu>:

// Obsługa dotyku ekranu (przykładowa implementacja)
void BBG_obsluzDotykEkranu(BBG *bbg, TS_StateTypeDef TS_State)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	e883 0006 	stmia.w	r3, {r1, r2}
    if (TS_State.TouchDetected)
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d067      	beq.n	80008b4 <BBG_obsluzDotykEkranu+0xe4>
    {
        int platforma_x = Platforma_getPolozenieX(bbg->platforma);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 f98e 	bl	8001b0a <Platforma_getPolozenieX>
 80007ee:	6278      	str	r0, [r7, #36]	; 0x24
        int platforma_szerokosc = Platforma_getSzerokosc(bbg->platforma);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f994 	bl	8001b22 <Platforma_getSzerokosc>
 80007fa:	6238      	str	r0, [r7, #32]
        int platforma_krok = Platforma_getKrok(bbg->platforma);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f99a 	bl	8001b3a <Platforma_getKrok>
 8000806:	61f8      	str	r0, [r7, #28]

        uint32_t x = Calibration_GetX(TS_State.X);
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fd78 	bl	8002300 <Calibration_GetX>
 8000810:	4603      	mov	r3, r0
 8000812:	61bb      	str	r3, [r7, #24]
        uint32_t y = Calibration_GetY(TS_State.Y);
 8000814:	893b      	ldrh	r3, [r7, #8]
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fd96 	bl	8002348 <Calibration_GetY>
 800081c:	4603      	mov	r3, r0
 800081e:	617b      	str	r3, [r7, #20]
        if ((x < BSP_LCD_GetXSize() / 2) & (x > 0))
 8000820:	f002 fe72 	bl	8003508 <BSP_LCD_GetXSize>
 8000824:	4603      	mov	r3, r0
 8000826:	085b      	lsrs	r3, r3, #1
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	429a      	cmp	r2, r3
 800082c:	bf34      	ite	cc
 800082e:	2301      	movcc	r3, #1
 8000830:	2300      	movcs	r3, #0
 8000832:	b2da      	uxtb	r2, r3
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4013      	ands	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d006      	beq.n	8000856 <BBG_obsluzDotykEkranu+0x86>
        {
            platforma_x = max(0, platforma_x - platforma_krok); // Move left
 8000848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
 8000854:	e02a      	b.n	80008ac <BBG_obsluzDotykEkranu+0xdc>
        }
        else if ((x > BSP_LCD_GetXSize() / 2) & (x < BSP_LCD_GetXSize()))
 8000856:	f002 fe57 	bl	8003508 <BSP_LCD_GetXSize>
 800085a:	4603      	mov	r3, r0
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	429a      	cmp	r2, r3
 8000862:	bf8c      	ite	hi
 8000864:	2301      	movhi	r3, #1
 8000866:	2300      	movls	r3, #0
 8000868:	b2dc      	uxtb	r4, r3
 800086a:	f002 fe4d 	bl	8003508 <BSP_LCD_GetXSize>
 800086e:	4602      	mov	r2, r0
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	4293      	cmp	r3, r2
 8000874:	bf34      	ite	cc
 8000876:	2301      	movcc	r3, #1
 8000878:	2300      	movcs	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4023      	ands	r3, r4
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <BBG_obsluzDotykEkranu+0xdc>
        {
            platforma_x = min(BSP_LCD_GetXSize() - platforma_szerokosc, platforma_x + platforma_krok); // Move right
 8000884:	f002 fe40 	bl	8003508 <BSP_LCD_GetXSize>
 8000888:	4602      	mov	r2, r0
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000890:	69fa      	ldr	r2, [r7, #28]
 8000892:	440a      	add	r2, r1
 8000894:	4293      	cmp	r3, r2
 8000896:	d205      	bcs.n	80008a4 <BBG_obsluzDotykEkranu+0xd4>
 8000898:	f002 fe36 	bl	8003508 <BSP_LCD_GetXSize>
 800089c:	4602      	mov	r2, r0
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	e002      	b.n	80008aa <BBG_obsluzDotykEkranu+0xda>
 80008a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	4413      	add	r3, r2
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
        BBG_ruchPlatformy(bbg, platforma_x);
 80008ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f000 f84b 	bl	800094a <BBG_ruchPlatformy>
    }
}
 80008b4:	bf00      	nop
 80008b6:	372c      	adds	r7, #44	; 0x2c
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}

080008bc <BBG_ruchKulki>:

// Ruch kulki (przykładowa implementacja)
int BBG_ruchKulki(BBG *bbg)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

    if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->platforma->polozenie_y &&
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	441a      	add	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	db27      	blt.n	800092c <BBG_ruchKulki+0x70>
        bbg->kulka->polozenie_x < bbg->platforma->polozenie_x + bbg->platforma->szerokosc &&
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6819      	ldr	r1, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	440b      	add	r3, r1
    if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->platforma->polozenie_y &&
 80008f0:	429a      	cmp	r2, r3
 80008f2:	da1b      	bge.n	800092c <BBG_ruchKulki+0x70>
        bbg->kulka->polozenie_x > bbg->platforma->polozenie_x)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
        bbg->kulka->polozenie_x < bbg->platforma->polozenie_x + bbg->platforma->szerokosc &&
 8000900:	429a      	cmp	r2, r3
 8000902:	dd13      	ble.n	800092c <BBG_ruchKulki+0x70>
    {
        if (!(bbg->kulka->polozenie_y > bbg->platforma->polozenie_y))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dc0b      	bgt.n	800092c <BBG_ruchKulki+0x70>
        {
            bbg->kulka->predkosc_y *= -1;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	4252      	negs	r2, r2
 8000920:	611a      	str	r2, [r3, #16]
            rysuj_platforme(bbg->platforma);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f001 f8c6 	bl	8001ab8 <rysuj_platforme>
        }
    }

    if (Kulka_ruch(bbg->kulka) == 1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fc05 	bl	8001140 <Kulka_ruch>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d101      	bne.n	8000940 <BBG_ruchKulki+0x84>
    {
        return 1;
 800093c:	2301      	movs	r3, #1
 800093e:	e000      	b.n	8000942 <BBG_ruchKulki+0x86>
    }

    // Obsługa odbicia od platformy
    return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <BBG_ruchPlatformy>:

// Ruch platformy (przykładowa implementacja)
void BBG_ruchPlatformy(BBG *bbg, int x)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
    zmaz_platforme(bbg->platforma);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f001 f891 	bl	8001a80 <zmaz_platforme>
    Platforma_przesunDo(bbg->platforma, x);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f001 f8c2 	bl	8001aee <Platforma_przesunDo>
    rysuj_platforme(bbg->platforma);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f8a2 	bl	8001ab8 <rysuj_platforme>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_CRC_Init+0x20>)
 8000982:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <MX_CRC_Init+0x24>)
 8000984:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_CRC_Init+0x20>)
 8000988:	f004 f81c 	bl	80049c4 <HAL_CRC_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000992:	f001 f84f 	bl	8001a34 <Error_Handler>
  }

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000400 	.word	0x20000400
 80009a0:	40023000 	.word	0x40023000

080009a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <HAL_CRC_MspInit+0x3c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d10d      	bne.n	80009d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_CRC_MspInit+0x40>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <HAL_CRC_MspInit+0x40>)
 80009c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_CRC_MspInit+0x40>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023000 	.word	0x40023000
 80009e4:	40023800 	.word	0x40023800

080009e8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <MX_DMA2D_Init+0x60>)
 80009f0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 8000a1e:	f004 f9a9 	bl	8004d74 <HAL_DMA2D_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a28:	f001 f804 	bl	8001a34 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_DMA2D_Init+0x5c>)
 8000a30:	f004 fc0e 	bl	8005250 <HAL_DMA2D_ConfigLayer>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a3a:	f000 fffb 	bl	8001a34 <Error_Handler>
  }

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000408 	.word	0x20000408
 8000a48:	4002b000 	.word	0x4002b000

08000a4c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_DMA2D_MspInit+0x48>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d115      	bne.n	8000a8a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_DMA2D_MspInit+0x4c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <HAL_DMA2D_MspInit+0x4c>)
 8000a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_DMA2D_MspInit+0x4c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	205a      	movs	r0, #90	; 0x5a
 8000a80:	f003 ff76 	bl	8004970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a84:	205a      	movs	r0, #90	; 0x5a
 8000a86:	f003 ff8f 	bl	80049a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	4002b000 	.word	0x4002b000
 8000a98:	40023800 	.word	0x40023800

08000a9c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_FMC_Init+0x98>)
 8000ab6:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <MX_FMC_Init+0x9c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_FMC_Init+0x98>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_FMC_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_FMC_Init+0x98>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_FMC_Init+0x98>)
 8000ace:	2210      	movs	r2, #16
 8000ad0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_FMC_Init+0x98>)
 8000ad4:	2240      	movs	r2, #64	; 0x40
 8000ad6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_FMC_Init+0x98>)
 8000ada:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ade:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_FMC_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_FMC_Init+0x98>)
 8000ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_FMC_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_FMC_Init+0x98>)
 8000af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b00:	2307      	movs	r3, #7
 8000b02:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_FMC_Init+0x98>)
 8000b1e:	f008 fbcd 	bl	80092bc <HAL_SDRAM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b28:	f000 ff84 	bl	8001a34 <Error_Handler>
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000448 	.word	0x20000448
 8000b38:	a0000140 	.word	0xa0000140

08000b3c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b50:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <HAL_FMC_MspInit+0x104>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d16f      	bne.n	8000c38 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <HAL_FMC_MspInit+0x104>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <HAL_FMC_MspInit+0x108>)
 8000b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b66:	4a37      	ldr	r2, [pc, #220]	; (8000c44 <HAL_FMC_MspInit+0x108>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6393      	str	r3, [r2, #56]	; 0x38
 8000b6e:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <HAL_FMC_MspInit+0x108>)
 8000b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000b7a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b7e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	482c      	ldr	r0, [pc, #176]	; (8000c48 <HAL_FMC_MspInit+0x10c>)
 8000b96:	f004 fc89 	bl	80054ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000baa:	230c      	movs	r3, #12
 8000bac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4826      	ldr	r0, [pc, #152]	; (8000c4c <HAL_FMC_MspInit+0x110>)
 8000bb4:	f004 fc7a 	bl	80054ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000bb8:	f248 1333 	movw	r3, #33075	; 0x8133
 8000bbc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481f      	ldr	r0, [pc, #124]	; (8000c50 <HAL_FMC_MspInit+0x114>)
 8000bd4:	f004 fc6a 	bl	80054ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000bd8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000bdc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4818      	ldr	r0, [pc, #96]	; (8000c54 <HAL_FMC_MspInit+0x118>)
 8000bf4:	f004 fc5a 	bl	80054ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000bf8:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000bfc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <HAL_FMC_MspInit+0x11c>)
 8000c14:	f004 fc4a 	bl	80054ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c18:	2360      	movs	r3, #96	; 0x60
 8000c1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <HAL_FMC_MspInit+0x120>)
 8000c32:	f004 fc3b 	bl	80054ac <HAL_GPIO_Init>
 8000c36:	e000      	b.n	8000c3a <HAL_FMC_MspInit+0xfe>
    return;
 8000c38:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000124 	.word	0x20000124
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40021400 	.word	0x40021400
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000c68:	f7ff ff68 	bl	8000b3c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
 8000ca6:	4b7a      	ldr	r3, [pc, #488]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a79      	ldr	r2, [pc, #484]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b77      	ldr	r3, [pc, #476]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	4b73      	ldr	r3, [pc, #460]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a72      	ldr	r2, [pc, #456]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a6b      	ldr	r2, [pc, #428]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b69      	ldr	r3, [pc, #420]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	4b65      	ldr	r3, [pc, #404]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a64      	ldr	r2, [pc, #400]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a5d      	ldr	r2, [pc, #372]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b5b      	ldr	r3, [pc, #364]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b57      	ldr	r3, [pc, #348]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a56      	ldr	r2, [pc, #344]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a4f      	ldr	r2, [pc, #316]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a48      	ldr	r2, [pc, #288]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <MX_GPIO_Init+0x204>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2116      	movs	r1, #22
 8000d86:	4843      	ldr	r0, [pc, #268]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d88:	f004 fe44 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4841      	ldr	r0, [pc, #260]	; (8000e98 <MX_GPIO_Init+0x20c>)
 8000d92:	f004 fe3f 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d9c:	483f      	ldr	r0, [pc, #252]	; (8000e9c <MX_GPIO_Init+0x210>)
 8000d9e:	f004 fe39 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000da8:	483d      	ldr	r0, [pc, #244]	; (8000ea0 <MX_GPIO_Init+0x214>)
 8000daa:	f004 fe33 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000dae:	2316      	movs	r3, #22
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4833      	ldr	r0, [pc, #204]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000dc6:	f004 fb71 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000dca:	f248 0307 	movw	r3, #32775	; 0x8007
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <MX_GPIO_Init+0x218>)
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	482e      	ldr	r0, [pc, #184]	; (8000e98 <MX_GPIO_Init+0x20c>)
 8000de0:	f004 fb64 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4827      	ldr	r0, [pc, #156]	; (8000e98 <MX_GPIO_Init+0x20c>)
 8000dfc:	f004 fb56 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e00:	2320      	movs	r3, #32
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_GPIO_Init+0x218>)
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4820      	ldr	r0, [pc, #128]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000e14:	f004 fb4a 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000e2c:	f004 fb3e 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4815      	ldr	r0, [pc, #84]	; (8000e9c <MX_GPIO_Init+0x210>)
 8000e46:	f004 fb31 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	480e      	ldr	r0, [pc, #56]	; (8000e9c <MX_GPIO_Init+0x210>)
 8000e64:	f004 fb22 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e68:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <MX_GPIO_Init+0x214>)
 8000e82:	f004 fb13 	bl	80054ac <HAL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3738      	adds	r7, #56	; 0x38
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40021800 	.word	0x40021800
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	40020400 	.word	0x40020400

08000eac <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <MX_I2C3_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <MX_I2C3_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ece:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000eea:	f005 ff97 	bl	8006e1c <HAL_I2C_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ef4:	f000 fd9e 	bl	8001a34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4809      	ldr	r0, [pc, #36]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000efc:	f006 ff7f 	bl	8007dfe <HAL_I2CEx_ConfigAnalogFilter>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000f06:	f000 fd95 	bl	8001a34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000f0e:	f006 ffb2 	bl	8007e76 <HAL_I2CEx_ConfigDigitalFilter>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000f18:	f000 fd8c 	bl	8001a34 <Error_Handler>
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000047c 	.word	0x2000047c
 8000f24:	40005c00 	.word	0x40005c00
 8000f28:	000186a0 	.word	0x000186a0

08000f2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <HAL_I2C_MspInit+0xc4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d14b      	bne.n	8000fe6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <HAL_I2C_MspInit+0xcc>)
 8000fa4:	f004 fa82 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fae:	2312      	movs	r3, #18
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <HAL_I2C_MspInit+0xd0>)
 8000fc6:	f004 fa71 	bl	80054ac <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_I2C_MspInit+0xc8>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40005c00 	.word	0x40005c00
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020000 	.word	0x40020000

08001000 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_I2C_MspDeInit+0x3c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10f      	bne.n	8001032 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_I2C_MspDeInit+0x40>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_I2C_MspDeInit+0x40>)
 8001018:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800101e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <HAL_I2C_MspDeInit+0x44>)
 8001024:	f004 fbec 	bl	8005800 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <HAL_I2C_MspDeInit+0x48>)
 800102e:	f004 fbe7 	bl	8005800 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40005c00 	.word	0x40005c00
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800
 8001048:	40020000 	.word	0x40020000

0800104c <Klocek_init>:
#include "klocek.h"
#include "main.h"

// Inicjalizacja struktury Klocek
void Klocek_init(Klocek *k, int x, int y, int w, int h, uint32_t kol, uint8_t brk, uint8_t thr)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	b29a      	uxth	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	801a      	strh	r2, [r3, #0]
    k->pozycja_y = y;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	b29a      	uxth	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	805a      	strh	r2, [r3, #2]
    k->szerokosc = w;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	711a      	strb	r2, [r3, #4]
    k->wysokosc = h;
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	715a      	strb	r2, [r3, #5]
    k->kolor = kol;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	609a      	str	r2, [r3, #8]
    k->is_breakable = brk; // Jak 1 to da się zepuć, jak 0 to nie
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001086:	735a      	strb	r2, [r3, #13]
    k->is_there = thr; // Jak jest 1 to jest obecny na planszy, jak 0 to nie istnieje
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800108e:	731a      	strb	r2, [r3, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <rysuj_klocek>:

void rysuj_klocek(Klocek *k)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(k->kolor);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 faf7 	bl	800369c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	8818      	ldrh	r0, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	8859      	ldrh	r1, [r3, #2]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	791b      	ldrb	r3, [r3, #4]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	795b      	ldrb	r3, [r3, #5]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f002 fd8b 	bl	8003bdc <BSP_LCD_FillRect>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <Kulka_init>:
#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka *kulka, int x, int y, int r, int vx, int vy, uint32_t kol)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	603b      	str	r3, [r7, #0]
	kulka->polozenie_x = x;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = y;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	605a      	str	r2, [r3, #4]
	kulka->promien = r;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	609a      	str	r2, [r3, #8]
	kulka->predkosc_x = vx;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
	kulka->predkosc_y = vy;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	611a      	str	r2, [r3, #16]
	kulka->kolor = kol;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a3a      	ldr	r2, [r7, #32]
 80010fe:	615a      	str	r2, [r3, #20]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <rysuj_kulke>:

void rysuj_kulke(Kulka *kulka)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fabf 	bl	800369c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b298      	uxth	r0, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	b299      	uxth	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	f002 fdad 	bl	8003c90 <BSP_LCD_FillCircle>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <Kulka_ruch>:
int Kulka_ruch(Kulka *kulka)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	// Zamaluj stary stan kulki
	BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8001148:	483d      	ldr	r0, [pc, #244]	; (8001240 <Kulka_ruch+0x100>)
 800114a:	f002 faa7 	bl	800369c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b298      	uxth	r0, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	b299      	uxth	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	b29b      	uxth	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f002 fd95 	bl	8003c90 <BSP_LCD_FillCircle>

	// Oblicz nowe położenie kulki
	int nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
	int nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	4413      	add	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]

	// Sprawdź zderzenie z lewą i prawą krawędzią ekranu
	if (nowe_polozenie_x - kulka->promien < 0 || nowe_polozenie_x + kulka->promien > BSP_LCD_GetXSize())
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	db09      	blt.n	800119e <Kulka_ruch+0x5e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4413      	add	r3, r2
 8001192:	461c      	mov	r4, r3
 8001194:	f002 f9b8 	bl	8003508 <BSP_LCD_GetXSize>
 8001198:	4603      	mov	r3, r0
 800119a:	429c      	cmp	r4, r3
 800119c:	d910      	bls.n	80011c0 <Kulka_ruch+0x80>
	{
		// Zderzenie z lewą lub prawą krawędzią, zmień kierunek prędkości poziomej
		kulka->predkosc_x = -kulka->predkosc_x;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	425a      	negs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	60da      	str	r2, [r3, #12]
		nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
		nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	4413      	add	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
	}

	// Sprawdź zderzenie z górną i dolną krawędzią ekranu
	if (nowe_polozenie_y - kulka->promien < 0)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da10      	bge.n	80011ee <Kulka_ruch+0xae>
	{
		// Zderzenie z górną lub dolną krawędzią, zmień kierunek prędkości pionowej
		kulka->predkosc_y = -kulka->predkosc_y;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	425a      	negs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
		nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
		nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	4413      	add	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
	}
	if (nowe_polozenie_y + kulka->promien > BSP_LCD_GetYSize())
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	4413      	add	r3, r2
 80011f6:	461c      	mov	r4, r3
 80011f8:	f002 f992 	bl	8003520 <BSP_LCD_GetYSize>
 80011fc:	4603      	mov	r3, r0
 80011fe:	429c      	cmp	r4, r3
 8001200:	d901      	bls.n	8001206 <Kulka_ruch+0xc6>
	{
		return 1;
 8001202:	2301      	movs	r3, #1
 8001204:	e017      	b.n	8001236 <Kulka_ruch+0xf6>
	}

	// Aktualizuj położenie kulki na nowe pozycje
	kulka->polozenie_x = nowe_polozenie_x;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = nowe_polozenie_y;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	605a      	str	r2, [r3, #4]

	// Narysuj kulke na nowej pozycji
	BSP_LCD_SetTextColor(kulka->kolor);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fa40 	bl	800369c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b298      	uxth	r0, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	b299      	uxth	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	b29b      	uxth	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	f002 fd2e 	bl	8003c90 <BSP_LCD_FillCircle>
	return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}
 800123e:	bf00      	nop
 8001240:	ffff0000 	.word	0xffff0000

08001244 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09a      	sub	sp, #104	; 0x68
 8001248:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800124a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124e:	2234      	movs	r2, #52	; 0x34
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f00b fbdb 	bl	800ca0e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2234      	movs	r2, #52	; 0x34
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f00b fbd5 	bl	800ca0e <memset>

  hltdc.Instance = LTDC;
 8001264:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <MX_LTDC_Init+0x160>)
 8001266:	4a50      	ldr	r2, [pc, #320]	; (80013a8 <MX_LTDC_Init+0x164>)
 8001268:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <MX_LTDC_Init+0x160>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001270:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <MX_LTDC_Init+0x160>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001276:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <MX_LTDC_Init+0x160>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800127c:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <MX_LTDC_Init+0x160>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001282:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <MX_LTDC_Init+0x160>)
 8001284:	2209      	movs	r2, #9
 8001286:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001288:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <MX_LTDC_Init+0x160>)
 800128a:	2201      	movs	r2, #1
 800128c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800128e:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <MX_LTDC_Init+0x160>)
 8001290:	221d      	movs	r2, #29
 8001292:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001294:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <MX_LTDC_Init+0x160>)
 8001296:	2203      	movs	r2, #3
 8001298:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <MX_LTDC_Init+0x160>)
 800129c:	f240 120d 	movw	r2, #269	; 0x10d
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80012a2:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <MX_LTDC_Init+0x160>)
 80012a4:	f240 1243 	movw	r2, #323	; 0x143
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80012aa:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_LTDC_Init+0x160>)
 80012ac:	f240 1217 	movw	r2, #279	; 0x117
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80012b2:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <MX_LTDC_Init+0x160>)
 80012b4:	f240 1247 	movw	r2, #327	; 0x147
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <MX_LTDC_Init+0x160>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012c2:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_LTDC_Init+0x160>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_LTDC_Init+0x160>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012d2:	4834      	ldr	r0, [pc, #208]	; (80013a4 <MX_LTDC_Init+0x160>)
 80012d4:	f006 fe0e 	bl	8007ef4 <HAL_LTDC_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80012de:	f000 fba9 	bl	8001a34 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 80012e6:	23f0      	movs	r3, #240	; 0xf0
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 80012ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012f4:	2302      	movs	r3, #2
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001300:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001304:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001306:	2307      	movs	r3, #7
 8001308:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 800130a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800130e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001310:	23f0      	movs	r3, #240	; 0xf0
 8001312:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001314:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001318:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800132c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	481b      	ldr	r0, [pc, #108]	; (80013a4 <MX_LTDC_Init+0x160>)
 8001336:	f006 ff6f 	bl	8008218 <HAL_LTDC_ConfigLayer>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001340:	f000 fb78 	bl	8001a34 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800135c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001360:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001362:	2305      	movs	r3, #5
 8001364:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	2201      	movs	r2, #1
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_LTDC_Init+0x160>)
 800138c:	f006 ff44 	bl	8008218 <HAL_LTDC_ConfigLayer>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8001396:	f000 fb4d 	bl	8001a34 <Error_Handler>
  }

}
 800139a:	bf00      	nop
 800139c:	3768      	adds	r7, #104	; 0x68
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200004d0 	.word	0x200004d0
 80013a8:	40016800 	.word	0x40016800

080013ac <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a7b      	ldr	r2, [pc, #492]	; (80015b8 <HAL_LTDC_MspInit+0x20c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	f040 80f0 	bne.w	80015b0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	4b79      	ldr	r3, [pc, #484]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	4a78      	ldr	r2, [pc, #480]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 80013da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013de:	6453      	str	r3, [r2, #68]	; 0x44
 80013e0:	4b76      	ldr	r3, [pc, #472]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a71      	ldr	r2, [pc, #452]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a6a      	ldr	r2, [pc, #424]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	4b64      	ldr	r3, [pc, #400]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a63      	ldr	r2, [pc, #396]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b61      	ldr	r3, [pc, #388]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a5c      	ldr	r2, [pc, #368]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 800144a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	4b56      	ldr	r3, [pc, #344]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a55      	ldr	r2, [pc, #340]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a4e      	ldr	r2, [pc, #312]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_LTDC_MspInit+0x210>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014a6:	230e      	movs	r3, #14
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	4843      	ldr	r0, [pc, #268]	; (80015c0 <HAL_LTDC_MspInit+0x214>)
 80014b2:	f003 fffb 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80014b6:	f641 0358 	movw	r3, #6232	; 0x1858
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014c8:	230e      	movs	r3, #14
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	483c      	ldr	r0, [pc, #240]	; (80015c4 <HAL_LTDC_MspInit+0x218>)
 80014d4:	f003 ffea 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80014d8:	2303      	movs	r3, #3
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014e8:	2309      	movs	r3, #9
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4835      	ldr	r0, [pc, #212]	; (80015c8 <HAL_LTDC_MspInit+0x21c>)
 80014f4:	f003 ffda 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80014f8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800150a:	230e      	movs	r3, #14
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	482c      	ldr	r0, [pc, #176]	; (80015c8 <HAL_LTDC_MspInit+0x21c>)
 8001516:	f003 ffc9 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800151a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800152c:	230e      	movs	r3, #14
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4825      	ldr	r0, [pc, #148]	; (80015cc <HAL_LTDC_MspInit+0x220>)
 8001538:	f003 ffb8 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800153c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800154e:	230e      	movs	r3, #14
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	481d      	ldr	r0, [pc, #116]	; (80015d0 <HAL_LTDC_MspInit+0x224>)
 800155a:	f003 ffa7 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800155e:	2348      	movs	r3, #72	; 0x48
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800156e:	230e      	movs	r3, #14
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	4816      	ldr	r0, [pc, #88]	; (80015d4 <HAL_LTDC_MspInit+0x228>)
 800157a:	f003 ff97 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800157e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001590:	2309      	movs	r3, #9
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <HAL_LTDC_MspInit+0x220>)
 800159c:	f003 ff86 	bl	80054ac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2105      	movs	r1, #5
 80015a4:	2058      	movs	r0, #88	; 0x58
 80015a6:	f003 f9e3 	bl	8004970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015aa:	2058      	movs	r0, #88	; 0x58
 80015ac:	f003 f9fc 	bl	80049a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	3738      	adds	r7, #56	; 0x38
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40016800 	.word	0x40016800
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40021400 	.word	0x40021400
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b0a3      	sub	sp, #140	; 0x8c
 80015dc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015de:	f003 f8ab 	bl	8004738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e2:	f000 f943 	bl	800186c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e6:	f7ff fb51 	bl	8000c8c <MX_GPIO_Init>
  MX_CRC_Init();
 80015ea:	f7ff f9c7 	bl	800097c <MX_CRC_Init>
  MX_DMA2D_Init();
 80015ee:	f7ff f9fb 	bl	80009e8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80015f2:	f7ff fa53 	bl	8000a9c <MX_FMC_Init>
  MX_I2C3_Init();
 80015f6:	f7ff fc59 	bl	8000eac <MX_I2C3_Init>
  MX_LTDC_Init();
 80015fa:	f7ff fe23 	bl	8001244 <MX_LTDC_Init>
  MX_SPI5_Init();
 80015fe:	f000 faa9 	bl	8001b54 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001602:	f000 fc5f 	bl	8001ec4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001606:	f000 fec3 	bl	8002390 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  int odswiezanie = 16;
 800160a:	2310      	movs	r3, #16
 800160c:	66bb      	str	r3, [r7, #104]	; 0x68
  BSP_LCD_Init();
 800160e:	f001 ff11 	bl	8003434 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8001612:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001616:	2001      	movs	r0, #1
 8001618:	f001 ff8e 	bl	8003538 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f001 ffef 	bl	8003600 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001622:	488a      	ldr	r0, [pc, #552]	; (800184c <main+0x274>)
 8001624:	f002 f886 	bl	8003734 <BSP_LCD_Clear>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8001628:	2100      	movs	r1, #0
 800162a:	2001      	movs	r0, #1
 800162c:	f001 fff8 	bl	8003620 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8001630:	4987      	ldr	r1, [pc, #540]	; (8001850 <main+0x278>)
 8001632:	2000      	movs	r0, #0
 8001634:	f001 ff80 	bl	8003538 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8001638:	2000      	movs	r0, #0
 800163a:	f001 ffe1 	bl	8003600 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 800163e:	4883      	ldr	r0, [pc, #524]	; (800184c <main+0x274>)
 8001640:	f002 f878 	bl	8003734 <BSP_LCD_Clear>

  BSP_LCD_DisplayOn();
 8001644:	f002 fbc4 	bl	8003dd0 <BSP_LCD_DisplayOn>

  Touchscreen_Calibration();
 8001648:	f000 fcae 	bl	8001fa8 <Touchscreen_Calibration>
  BSP_LCD_Clear(LCD_COLOR_RED);
 800164c:	487f      	ldr	r0, [pc, #508]	; (800184c <main+0x274>)
 800164e:	f002 f871 	bl	8003734 <BSP_LCD_Clear>


  menu_bbg();
 8001652:	f000 f98f 	bl	8001974 <menu_bbg>
  Address=ADDR_FLASH_SECTOR_5;
 8001656:	4b7f      	ldr	r3, [pc, #508]	; (8001854 <main+0x27c>)
 8001658:	4a7f      	ldr	r2, [pc, #508]	; (8001858 <main+0x280>)
 800165a:	601a      	str	r2, [r3, #0]
  BSP_LCD_Clear(LCD_COLOR_RED);
 800165c:	487b      	ldr	r0, [pc, #492]	; (800184c <main+0x274>)
 800165e:	f002 f869 	bl	8003734 <BSP_LCD_Clear>

                        // Liczba klocków
  int klocek_szerokosc = BSP_LCD_GetXSize() / 12; // Klocki są szersze niż wyższe
 8001662:	f001 ff51 	bl	8003508 <BSP_LCD_GetXSize>
 8001666:	4602      	mov	r2, r0
 8001668:	4b7c      	ldr	r3, [pc, #496]	; (800185c <main+0x284>)
 800166a:	fba3 2302 	umull	r2, r3, r3, r2
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	667b      	str	r3, [r7, #100]	; 0x64
  int klocek_wysokosc = BSP_LCD_GetYSize() / 24; // Zakładamy 4 rzędy klocków
 8001672:	f001 ff55 	bl	8003520 <BSP_LCD_GetYSize>
 8001676:	4602      	mov	r2, r0
 8001678:	4b78      	ldr	r3, [pc, #480]	; (800185c <main+0x284>)
 800167a:	fba3 2302 	umull	r2, r3, r3, r2
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	663b      	str	r3, [r7, #96]	; 0x60
  int liczba_klockow = COLLUMNS_BBG*ROWS_BBG; // Liczba klocków
 8001682:	23b4      	movs	r3, #180	; 0xb4
 8001684:	65fb      	str	r3, [r7, #92]	; 0x5c

  Platforma *platforma = (Platforma *)malloc(sizeof(Platforma));
 8001686:	2018      	movs	r0, #24
 8001688:	f00b f9ae 	bl	800c9e8 <malloc>
 800168c:	4603      	mov	r3, r0
 800168e:	65bb      	str	r3, [r7, #88]	; 0x58
  Kulka *kulka = (Kulka *)malloc(sizeof(Kulka));
 8001690:	2018      	movs	r0, #24
 8001692:	f00b f9a9 	bl	800c9e8 <malloc>
 8001696:	4603      	mov	r3, r0
 8001698:	657b      	str	r3, [r7, #84]	; 0x54
  Klocek **klocki = (Klocek **)malloc(liczba_klockow * sizeof(Klocek *));
 800169a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4618      	mov	r0, r3
 80016a0:	f00b f9a2 	bl	800c9e8 <malloc>
 80016a4:	4603      	mov	r3, r0
 80016a6:	653b      	str	r3, [r7, #80]	; 0x50
  int licznik = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	677b      	str	r3, [r7, #116]	; 0x74

  for (int kk = 0; kk < COLLUMNS_BBG; kk++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	673b      	str	r3, [r7, #112]	; 0x70
 80016b0:	e04e      	b.n	8001750 <main+0x178>
  { // Zakładając 4 rzędy klocków
    for (int k = 0; k < ROWS_BBG; k++, licznik++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016b6:	e045      	b.n	8001744 <main+0x16c>
    { // 8 kolumn klocków
      klocki[licznik] = (Klocek *)malloc(sizeof(Klocek));
 80016b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80016be:	18d4      	adds	r4, r2, r3
 80016c0:	2010      	movs	r0, #16
 80016c2:	f00b f991 	bl	800c9e8 <malloc>
 80016c6:	4603      	mov	r3, r0
 80016c8:	6023      	str	r3, [r4, #0]
      uint32_t kolor_klocka = ((k % 2 == 0 && kk % 2 == 0) || (k % 2 == 1 && kk % 2 == 1)) ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 80016ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d104      	bne.n	80016de <main+0x106>
 80016d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00f      	beq.n	80016fe <main+0x126>
 80016de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	bfb8      	it	lt
 80016e8:	425b      	neglt	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d109      	bne.n	8001702 <main+0x12a>
 80016ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	bfb8      	it	lt
 80016f8:	425b      	neglt	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <main+0x12a>
 80016fe:	4b58      	ldr	r3, [pc, #352]	; (8001860 <main+0x288>)
 8001700:	e001      	b.n	8001706 <main+0x12e>
 8001702:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8001706:	61fb      	str	r3, [r7, #28]
      Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka, 1, 1);
 8001708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800170e:	4413      	add	r3, r2
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001714:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001716:	fb02 f103 	mul.w	r1, r2, r3
 800171a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800171c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800171e:	fb02 f203 	mul.w	r2, r2, r3
 8001722:	2301      	movs	r3, #1
 8001724:	9303      	str	r3, [sp, #12]
 8001726:	2301      	movs	r3, #1
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001734:	f7ff fc8a 	bl	800104c <Klocek_init>
    for (int k = 0; k < ROWS_BBG; k++, licznik++)
 8001738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800173a:	3301      	adds	r3, #1
 800173c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800173e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001740:	3301      	adds	r3, #1
 8001742:	677b      	str	r3, [r7, #116]	; 0x74
 8001744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001746:	2b0b      	cmp	r3, #11
 8001748:	ddb6      	ble.n	80016b8 <main+0xe0>
  for (int kk = 0; kk < COLLUMNS_BBG; kk++)
 800174a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800174c:	3301      	adds	r3, #1
 800174e:	673b      	str	r3, [r7, #112]	; 0x70
 8001750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001752:	2b0e      	cmp	r3, #14
 8001754:	ddad      	ble.n	80016b2 <main+0xda>


    }
  }

  int platforma_x = 50;
 8001756:	2332      	movs	r3, #50	; 0x32
 8001758:	64fb      	str	r3, [r7, #76]	; 0x4c
  int platforma_y = BSP_LCD_GetYSize() - 20;
 800175a:	f001 fee1 	bl	8003520 <BSP_LCD_GetYSize>
 800175e:	4603      	mov	r3, r0
 8001760:	3b14      	subs	r3, #20
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
  int platforma_szerokosc = 80;
 8001764:	2350      	movs	r3, #80	; 0x50
 8001766:	647b      	str	r3, [r7, #68]	; 0x44
  int platforma_wysokosc = 8;
 8001768:	2308      	movs	r3, #8
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
  int platforma_krok = 5;
 800176c:	2305      	movs	r3, #5
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t platforma_kolor = LCD_COLOR_WHITE;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
  Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 8001776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001786:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001788:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800178a:	f000 f959 	bl	8001a40 <Platforma_init>
  int kulka_pocz_x = 10 + (rand() % (BSP_LCD_GetXSize() - 20));
 800178e:	f00b f9a1 	bl	800cad4 <rand>
 8001792:	4603      	mov	r3, r0
 8001794:	461c      	mov	r4, r3
 8001796:	f001 feb7 	bl	8003508 <BSP_LCD_GetXSize>
 800179a:	4603      	mov	r3, r0
 800179c:	3b14      	subs	r3, #20
 800179e:	fbb4 f2f3 	udiv	r2, r4, r3
 80017a2:	fb03 f302 	mul.w	r3, r3, r2
 80017a6:	1ae3      	subs	r3, r4, r3
 80017a8:	330a      	adds	r3, #10
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  int kulka_pocz_y = platforma_y-10;
 80017ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017ae:	3b0a      	subs	r3, #10
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  int kulka_r = 4;
 80017b2:	2304      	movs	r3, #4
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int kulka_vx = 2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  int kulka_vy = -2;
 80017ba:	f06f 0301 	mvn.w	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t kulka_kolor = LCD_COLOR_WHITE;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	623b      	str	r3, [r7, #32]

  Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80017da:	f7ff fc78 	bl	80010ce <Kulka_init>

  BBG bbg;
  BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 80017de:	f107 0008 	add.w	r0, r7, #8
 80017e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80017ec:	f7fe fe80 	bl	80004f0 <BBG_init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (BBG_ruchKulki(&bbg) == 1)
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff f861 	bl	80008bc <BBG_ruchKulki>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d110      	bne.n	8001822 <main+0x24a>
    {
      BSP_LCD_SetFont(&Font20);
 8001800:	4818      	ldr	r0, [pc, #96]	; (8001864 <main+0x28c>)
 8001802:	f001 ff7d 	bl	8003700 <BSP_LCD_SetFont>
      BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 8001806:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800180a:	f001 ff5f 	bl	80036cc <BSP_LCD_SetBackColor>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800180e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001812:	f001 ff43 	bl	800369c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(0, 100, "Game Over", CENTER_MODE);
 8001816:	2301      	movs	r3, #1
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <main+0x290>)
 800181a:	2164      	movs	r1, #100	; 0x64
 800181c:	2000      	movs	r0, #0
 800181e:	f001 fff5 	bl	800380c <BSP_LCD_DisplayStringAt>
      // return;
    }
    BBG_obsluga_zbicia_klocka(&bbg);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fea6 	bl	8000578 <BBG_obsluga_zbicia_klocka>

    // 		Get touch state
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 800182c:	463b      	mov	r3, r7
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fed0 	bl	80045d4 <BSP_TS_GetState>
    BBG_obsluzDotykEkranu(&bbg, TS_State);
 8001834:	f107 0008 	add.w	r0, r7, #8
 8001838:	463b      	mov	r3, r7
 800183a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800183e:	f7fe ffc7 	bl	80007d0 <BBG_obsluzDotykEkranu>
    HAL_Delay(odswiezanie);
 8001842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001844:	4618      	mov	r0, r3
 8001846:	f002 ffb9 	bl	80047bc <HAL_Delay>
  {
 800184a:	e7d1      	b.n	80017f0 <main+0x218>
 800184c:	ffff0000 	.word	0xffff0000
 8001850:	d0130000 	.word	0xd0130000
 8001854:	2000057c 	.word	0x2000057c
 8001858:	08020000 	.word	0x08020000
 800185c:	aaaaaaab 	.word	0xaaaaaaab
 8001860:	ff0000ff 	.word	0xff0000ff
 8001864:	2000007c 	.word	0x2000007c
 8001868:	0800cb78 	.word	0x0800cb78

0800186c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0a0      	sub	sp, #128	; 0x80
 8001870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001872:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001876:	2230      	movs	r2, #48	; 0x30
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f00b f8c7 	bl	800ca0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001880:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	2230      	movs	r2, #48	; 0x30
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f00b f8b8 	bl	800ca0e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <SystemClock_Config+0x100>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a31      	ldr	r2, [pc, #196]	; (800196c <SystemClock_Config+0x100>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <SystemClock_Config+0x100>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <SystemClock_Config+0x104>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c6:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <SystemClock_Config+0x104>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <SystemClock_Config+0x104>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018da:	2301      	movs	r3, #1
 80018dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e4:	2302      	movs	r3, #2
 80018e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018ee:	2304      	movs	r3, #4
 80018f0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018f2:	2348      	movs	r3, #72	; 0x48
 80018f4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018fa:	2303      	movs	r3, #3
 80018fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001902:	4618      	mov	r0, r3
 8001904:	f006 fe88 	bl	8008618 <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800190e:	f000 f891 	bl	8001a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2302      	movs	r3, #2
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f007 f8e2 	bl	8008af8 <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800193a:	f000 f87b 	bl	8001a34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800193e:	2308      	movs	r3, #8
 8001940:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001942:	2332      	movs	r3, #50	; 0x32
 8001944:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001946:	2302      	movs	r3, #2
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4618      	mov	r0, r3
 8001954:	f007 faf4 	bl	8008f40 <HAL_RCCEx_PeriphCLKConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800195e:	f000 f869 	bl	8001a34 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3780      	adds	r7, #128	; 0x80
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000

08001974 <menu_bbg>:

/* USER CODE BEGIN 4 */

void menu_bbg()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_RED);
 800197a:	481f      	ldr	r0, [pc, #124]	; (80019f8 <menu_bbg+0x84>)
 800197c:	f001 feda 	bl	8003734 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font20);
 8001980:	481e      	ldr	r0, [pc, #120]	; (80019fc <menu_bbg+0x88>)
 8001982:	f001 febd 	bl	8003700 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 8001986:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800198a:	f001 fe9f 	bl	80036cc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800198e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001992:	f001 fe83 	bl	800369c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, "BBG", CENTER_MODE);
 8001996:	f001 fdc3 	bl	8003520 <BSP_LCD_GetYSize>
 800199a:	4603      	mov	r3, r0
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	b299      	uxth	r1, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <menu_bbg+0x8c>)
 80019a4:	2000      	movs	r0, #0
 80019a6:	f001 ff31 	bl	800380c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 80019aa:	4816      	ldr	r0, [pc, #88]	; (8001a04 <menu_bbg+0x90>)
 80019ac:	f001 fea8 	bl	8003700 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, "Touch screen to begin", CENTER_MODE);
 80019b0:	f001 fdb6 	bl	8003520 <BSP_LCD_GetYSize>
 80019b4:	4603      	mov	r3, r0
 80019b6:	085b      	lsrs	r3, r3, #1
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3314      	adds	r3, #20
 80019bc:	b299      	uxth	r1, r3
 80019be:	2301      	movs	r3, #1
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <menu_bbg+0x94>)
 80019c2:	2000      	movs	r0, #0
 80019c4:	f001 ff22 	bl	800380c <BSP_LCD_DisplayStringAt>

  while (1)
  {
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 80019c8:	463b      	mov	r3, r7
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fe02 	bl	80045d4 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 80019d0:	883b      	ldrh	r3, [r7, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f8      	beq.n	80019c8 <menu_bbg+0x54>
    {
      BSP_LCD_SetFont(&Font20);
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <menu_bbg+0x88>)
 80019d8:	f001 fe92 	bl	8003700 <BSP_LCD_SetFont>

      BSP_LCD_DisplayStringAt(0, 20, "TOUCHED!", CENTER_MODE);
 80019dc:	2301      	movs	r3, #1
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <menu_bbg+0x98>)
 80019e0:	2114      	movs	r1, #20
 80019e2:	2000      	movs	r0, #0
 80019e4:	f001 ff12 	bl	800380c <BSP_LCD_DisplayStringAt>
      HAL_Delay(500);
 80019e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ec:	f002 fee6 	bl	80047bc <HAL_Delay>
      return;
 80019f0:	bf00      	nop
    }
  }
}
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	ffff0000 	.word	0xffff0000
 80019fc:	2000007c 	.word	0x2000007c
 8001a00:	0800cb84 	.word	0x0800cb84
 8001a04:	20000084 	.word	0x20000084
 8001a08:	0800cb88 	.word	0x0800cb88
 8001a0c:	0800cba0 	.word	0x0800cba0

08001a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a22:	f002 feab 	bl	800477c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40001000 	.word	0x40001000

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	  BSP_LED_On(LED4);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f001 f96b 	bl	8002d14 <BSP_LED_On>
	  while(1)
 8001a3e:	e7fe      	b.n	8001a3e <Error_Handler+0xa>

08001a40 <Platforma_init>:
#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma *platforma, int x, int y, int w, int h, int k, uint32_t kol)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a3a      	ldr	r2, [r7, #32]
 8001a70:	615a      	str	r2, [r3, #20]
    rysuj_platforme(platforma);
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f820 	bl	8001ab8 <rysuj_platforme>
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <zmaz_platforme>:

void zmaz_platforme(Platforma *platforma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8001a88:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <zmaz_platforme+0x34>)
 8001a8a:	f001 fe07 	bl	800369c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b298      	uxth	r0, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	b299      	uxth	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f002 f899 	bl	8003bdc <BSP_LCD_FillRect>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	ffff0000 	.word	0xffff0000

08001ab8 <rysuj_platforme>:

void rysuj_platforme(Platforma *platforma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(platforma->kolor);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fde9 	bl	800369c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b298      	uxth	r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f002 f87b 	bl	8003bdc <BSP_LCD_FillRect>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <Platforma_przesunDo>:

void Platforma_przesunDo(Platforma *platforma, int x)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
    platforma->polozenie_x = x;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <Platforma_getPolozenieX>:
    platforma->polozenie_x += platforma->krok;
}

// Pobranie położenia X platformy
int Platforma_getPolozenieX(const Platforma *platforma)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
    return platforma->polozenie_x;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <Platforma_getSzerokosc>:
    return platforma->polozenie_y;
}

// Pobranie szerokości platformy
int Platforma_getSzerokosc(const Platforma *platforma)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
    return platforma->szerokosc;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <Platforma_getKrok>:
{
    return platforma->wysokosc;
}

int Platforma_getKrok(const Platforma *platforma)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
    return platforma->krok;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <MX_SPI5_Init+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b88:	2218      	movs	r2, #24
 8001b8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001ba0:	220a      	movs	r2, #10
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_SPI5_Init+0x64>)
 8001ba6:	f007 fc08 	bl	80093ba <HAL_SPI_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001bb0:	f7ff ff40 	bl	8001a34 <Error_Handler>
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000580 	.word	0x20000580
 8001bbc:	40015000 	.word	0x40015000

08001bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_SPI_MspInit+0x84>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12c      	bne.n	8001c3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_SPI_MspInit+0x88>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_SPI_MspInit+0x88>)
 8001bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_SPI_MspInit+0x88>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_SPI_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_SPI_MspInit+0x88>)
 8001c08:	f043 0320 	orr.w	r3, r3, #32
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_SPI_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c1a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <HAL_SPI_MspInit+0x8c>)
 8001c38:	f003 fc38 	bl	80054ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40015000 	.word	0x40015000
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40021400 	.word	0x40021400

08001c50 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_SPI_MspDeInit+0x30>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10a      	bne.n	8001c78 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_SPI_MspDeInit+0x34>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_SPI_MspDeInit+0x34>)
 8001c68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001c6e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_SPI_MspDeInit+0x38>)
 8001c74:	f003 fdc4 	bl	8005800 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40015000 	.word	0x40015000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40021400 	.word	0x40021400

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_MspInit+0x54>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_MspInit+0x54>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_MspInit+0x54>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	210f      	movs	r1, #15
 8001cce:	f06f 0001 	mvn.w	r0, #1
 8001cd2:	f002 fe4d 	bl	8004970 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	2036      	movs	r0, #54	; 0x36
 8001cfa:	f002 fe39 	bl	8004970 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cfe:	2036      	movs	r0, #54	; 0x36
 8001d00:	f002 fe52 	bl	80049a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_InitTick+0xa4>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_InitTick+0xa4>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_InitTick+0xa4>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d20:	f107 0210 	add.w	r2, r7, #16
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 f8d6 	bl	8008edc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d30:	f007 f8ac 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 8001d34:	4603      	mov	r3, r0
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <HAL_InitTick+0xa8>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0c9b      	lsrs	r3, r3, #18
 8001d44:	3b01      	subs	r3, #1
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_InitTick+0xac>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_InitTick+0xb0>)
 8001d4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_InitTick+0xac>)
 8001d50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d56:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_InitTick+0xac>)
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_InitTick+0xac>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_InitTick+0xac>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <HAL_InitTick+0xac>)
 8001d6a:	f008 f8b1 	bl	8009ed0 <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d104      	bne.n	8001d7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d74:	4806      	ldr	r0, [pc, #24]	; (8001d90 <HAL_InitTick+0xac>)
 8001d76:	f008 f8d6 	bl	8009f26 <HAL_TIM_Base_Start_IT>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3730      	adds	r7, #48	; 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	431bde83 	.word	0x431bde83
 8001d90:	200005d8 	.word	0x200005d8
 8001d94:	40001000 	.word	0x40001000

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_Clear(0xFF000000); // czarny
 8001daa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001dae:	f001 fcc1 	bl	8003734 <BSP_LCD_Clear>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0xc>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  BSP_LCD_Clear(0xFFFFFF00); // zolty
 8001db8:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001dbc:	f001 fcba 	bl	8003734 <BSP_LCD_Clear>
 8001dc0:	e7fa      	b.n	8001db8 <MemManage_Handler+0x4>

08001dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <BusFault_Handler+0x4>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <UsageFault_Handler+0x4>

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <TIM6_DAC_IRQHandler+0x10>)
 8001de2:	f008 f8c4 	bl	8009f6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200005d8 	.word	0x200005d8

08001df0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <OTG_HS_IRQHandler+0x10>)
 8001df6:	f003 fe26 	bl	8005a46 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000079c 	.word	0x2000079c

08001e04 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <LTDC_IRQHandler+0x10>)
 8001e0a:	f006 f943 	bl	8008094 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200004d0 	.word	0x200004d0

08001e18 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <DMA2D_IRQHandler+0x10>)
 8001e1e:	f003 f906 	bl	800502e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000408 	.word	0x20000408

08001e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <_sbrk+0x5c>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <_sbrk+0x60>)
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <_sbrk+0x64>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <_sbrk+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e5c:	f00a fd9a 	bl	800c994 <__errno>
 8001e60:	4602      	mov	r2, r0
 8001e62:	230c      	movs	r3, #12
 8001e64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e009      	b.n	8001e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <_sbrk+0x64>)
 8001e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20030000 	.word	0x20030000
 8001e8c:	00000400 	.word	0x00000400
 8001e90:	20000128 	.word	0x20000128
 8001e94:	20000a68 	.word	0x20000a68

08001e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <SystemInit+0x28>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <SystemInit+0x28>)
 8001ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SystemInit+0x28>)
 8001eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eb2:	609a      	str	r2, [r3, #8]
#endif
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	463b      	mov	r3, r7
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <MX_TIM1_Init+0x9c>)
 8001ee4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f0c:	4813      	ldr	r0, [pc, #76]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f0e:	f007 ffdf 	bl	8009ed0 <HAL_TIM_Base_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f18:	f7ff fd8c 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4619      	mov	r1, r3
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f2a:	f008 f928 	bl	800a17e <HAL_TIM_ConfigClockSource>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f34:	f7ff fd7e 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f46:	f008 fb33 	bl	800a5b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f50:	f7ff fd70 	bl	8001a34 <Error_Handler>
  }

}
 8001f54:	bf00      	nop
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000618 	.word	0x20000618
 8001f60:	40010000 	.word	0x40010000

08001f64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_TIM_Base_MspInit+0x3c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10d      	bne.n	8001f92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_TIM_Base_MspInit+0x40>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_TIM_Base_MspInit+0x40>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_TIM_Base_MspInit+0x40>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <Touchscreen_Calibration>:
 * @brief  Performs the TS calibration
 * @param  None
 * @retval None
 */
void Touchscreen_Calibration(void)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	71fb      	strb	r3, [r7, #7]

  TouchscreenCalibration_SetHint();
 8001fb6:	f000 f8f1 	bl	800219c <TouchscreenCalibration_SetHint>

  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001fba:	f001 faa5 	bl	8003508 <BSP_LCD_GetXSize>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b29c      	uxth	r4, r3
 8001fc2:	f001 faad 	bl	8003520 <BSP_LCD_GetYSize>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f002 fac7 	bl	8004560 <BSP_TS_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71bb      	strb	r3, [r7, #6]

  if (status != TS_OK)
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01c      	beq.n	8002016 <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f001 fb74 	bl	80036cc <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001fe4:	4861      	ldr	r0, [pc, #388]	; (800216c <Touchscreen_Calibration+0x1c4>)
 8001fe6:	f001 fb59 	bl	800369c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 8001fea:	f001 fa99 	bl	8003520 <BSP_LCD_GetYSize>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b5f      	subs	r3, #95	; 0x5f
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <Touchscreen_Calibration+0x1c8>)
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f001 fc06 	bl	800380c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 8002000:	f001 fa8e 	bl	8003520 <BSP_LCD_GetYSize>
 8002004:	4603      	mov	r3, r0
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b50      	subs	r3, #80	; 0x50
 800200a:	b299      	uxth	r1, r3
 800200c:	2301      	movs	r3, #1
 800200e:	4a59      	ldr	r2, [pc, #356]	; (8002174 <Touchscreen_Calibration+0x1cc>)
 8002010:	2000      	movs	r0, #0
 8002012:	f001 fbfb 	bl	800380c <BSP_LCD_DisplayStringAt>
  }

  while (1)
  {
    if (status == TS_OK)
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 80a0 	bne.w	800215e <Touchscreen_Calibration+0x1b6>
    {
      aLogX[0] = 15;
 800201e:	4b56      	ldr	r3, [pc, #344]	; (8002178 <Touchscreen_Calibration+0x1d0>)
 8002020:	220f      	movs	r2, #15
 8002022:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 8002024:	4b55      	ldr	r3, [pc, #340]	; (800217c <Touchscreen_Calibration+0x1d4>)
 8002026:	220f      	movs	r2, #15
 8002028:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 800202a:	f001 fa6d 	bl	8003508 <BSP_LCD_GetXSize>
 800202e:	4603      	mov	r3, r0
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b0f      	subs	r3, #15
 8002034:	b29b      	uxth	r3, r3
 8002036:	b21a      	sxth	r2, r3
 8002038:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <Touchscreen_Calibration+0x1d0>)
 800203a:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 800203c:	f001 fa70 	bl	8003520 <BSP_LCD_GetYSize>
 8002040:	4603      	mov	r3, r0
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b0f      	subs	r3, #15
 8002046:	b29b      	uxth	r3, r3
 8002048:	b21a      	sxth	r2, r3
 800204a:	4b4c      	ldr	r3, [pc, #304]	; (800217c <Touchscreen_Calibration+0x1d4>)
 800204c:	805a      	strh	r2, [r3, #2]

      for (i = 0; i < 2; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	e015      	b.n	8002080 <Touchscreen_Calibration+0xd8>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	4a48      	ldr	r2, [pc, #288]	; (8002178 <Touchscreen_Calibration+0x1d0>)
 8002058:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4a47      	ldr	r2, [pc, #284]	; (800217c <Touchscreen_Calibration+0x1d4>)
 8002060:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4a45      	ldr	r2, [pc, #276]	; (8002180 <Touchscreen_Calibration+0x1d8>)
 800206a:	189c      	adds	r4, r3, r2
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4a44      	ldr	r2, [pc, #272]	; (8002184 <Touchscreen_Calibration+0x1dc>)
 8002072:	4413      	add	r3, r2
 8002074:	4622      	mov	r2, r4
 8002076:	f000 f8d1 	bl	800221c <GetPhysValues>
      for (i = 0; i < 2; i++)
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	3301      	adds	r3, #1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d9e6      	bls.n	8002054 <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * (aLogX[1] - aLogX[0])) / (aPhysX[1] - aPhysX[0]);
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <Touchscreen_Calibration+0x1d0>)
 8002088:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800208c:	461a      	mov	r2, r3
 800208e:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <Touchscreen_Calibration+0x1d0>)
 8002090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800209a:	fb02 f203 	mul.w	r2, r2, r3
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <Touchscreen_Calibration+0x1d8>)
 80020a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <Touchscreen_Calibration+0x1d8>)
 80020a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ac:	1acb      	subs	r3, r1, r3
 80020ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <Touchscreen_Calibration+0x1e0>)
 80020b6:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0];
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <Touchscreen_Calibration+0x1d0>)
 80020ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	0152      	lsls	r2, r2, #5
 80020c4:	1ad2      	subs	r2, r2, r3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <Touchscreen_Calibration+0x1d8>)
 80020d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d4:	b299      	uxth	r1, r3
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <Touchscreen_Calibration+0x1e0>)
 80020d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	fb11 f303 	smulbb	r3, r1, r3
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <Touchscreen_Calibration+0x1e4>)
 80020ec:	801a      	strh	r2, [r3, #0]

      A2 = (1000 * (aLogY[1] - aLogY[0])) / (aPhysY[1] - aPhysY[0]);
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <Touchscreen_Calibration+0x1d4>)
 80020f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <Touchscreen_Calibration+0x1d4>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002102:	fb02 f203 	mul.w	r2, r2, r3
 8002106:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <Touchscreen_Calibration+0x1dc>)
 8002108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800210c:	4619      	mov	r1, r3
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <Touchscreen_Calibration+0x1dc>)
 8002110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002114:	1acb      	subs	r3, r1, r3
 8002116:	fb92 f3f3 	sdiv	r3, r2, r3
 800211a:	b21a      	sxth	r2, r3
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <Touchscreen_Calibration+0x1e8>)
 800211e:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0];
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <Touchscreen_Calibration+0x1d4>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	0152      	lsls	r2, r2, #5
 800212c:	1ad2      	subs	r2, r2, r3
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <Touchscreen_Calibration+0x1dc>)
 8002138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213c:	b299      	uxth	r1, r3
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <Touchscreen_Calibration+0x1e8>)
 8002140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002144:	b29b      	uxth	r3, r3
 8002146:	fb11 f303 	smulbb	r3, r1, r3
 800214a:	b29b      	uxth	r3, r3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	b29b      	uxth	r3, r3
 8002150:	b21a      	sxth	r2, r3
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <Touchscreen_Calibration+0x1ec>)
 8002154:	801a      	strh	r2, [r3, #0]

      Calibration_Done = 1;
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <Touchscreen_Calibration+0x1f0>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
      return;
 800215c:	e003      	b.n	8002166 <Touchscreen_Calibration+0x1be>
    }

    HAL_Delay(5);
 800215e:	2005      	movs	r0, #5
 8002160:	f002 fb2c 	bl	80047bc <HAL_Delay>
    if (status == TS_OK)
 8002164:	e757      	b.n	8002016 <Touchscreen_Calibration+0x6e>
  }
}
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}
 800216c:	ffff0000 	.word	0xffff0000
 8002170:	0800cbac 	.word	0x0800cbac
 8002174:	0800cbb4 	.word	0x0800cbb4
 8002178:	20000148 	.word	0x20000148
 800217c:	2000014c 	.word	0x2000014c
 8002180:	20000140 	.word	0x20000140
 8002184:	20000144 	.word	0x20000144
 8002188:	20000136 	.word	0x20000136
 800218c:	2000013a 	.word	0x2000013a
 8002190:	20000138 	.word	0x20000138
 8002194:	2000013c 	.word	0x2000013c
 8002198:	20000134 	.word	0x20000134

0800219c <TouchscreenCalibration_SetHint>:
 * @brief  Display calibration hint
 * @param  None
 * @retval None
 */
static void TouchscreenCalibration_SetHint(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f001 fac6 	bl	8003734 <BSP_LCD_Clear>

  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80021a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80021ac:	f001 fa76 	bl	800369c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f001 fa8a 	bl	80036cc <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 80021b8:	4814      	ldr	r0, [pc, #80]	; (800220c <TouchscreenCalibration_SetHint+0x70>)
 80021ba:	f001 faa1 	bl	8003700 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 27, (uint8_t *)"Before using the Touchscreen", CENTER_MODE);
 80021be:	f001 f9af 	bl	8003520 <BSP_LCD_GetYSize>
 80021c2:	4603      	mov	r3, r0
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b1b      	subs	r3, #27
 80021ca:	b299      	uxth	r1, r3
 80021cc:	2301      	movs	r3, #1
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <TouchscreenCalibration_SetHint+0x74>)
 80021d0:	2000      	movs	r0, #0
 80021d2:	f001 fb1b 	bl	800380c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 12, (uint8_t *)"you need to calibrate it.", CENTER_MODE);
 80021d6:	f001 f9a3 	bl	8003520 <BSP_LCD_GetYSize>
 80021da:	4603      	mov	r3, r0
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b0c      	subs	r3, #12
 80021e2:	b299      	uxth	r1, r3
 80021e4:	2301      	movs	r3, #1
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <TouchscreenCalibration_SetHint+0x78>)
 80021e8:	2000      	movs	r0, #0
 80021ea:	f001 fb0f 	bl	800380c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 3, (uint8_t *)"Press on the black circles", CENTER_MODE);
 80021ee:	f001 f997 	bl	8003520 <BSP_LCD_GetYSize>
 80021f2:	4603      	mov	r3, r0
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3303      	adds	r3, #3
 80021fa:	b299      	uxth	r1, r3
 80021fc:	2301      	movs	r3, #1
 80021fe:	4a06      	ldr	r2, [pc, #24]	; (8002218 <TouchscreenCalibration_SetHint+0x7c>)
 8002200:	2000      	movs	r0, #0
 8002202:	f001 fb03 	bl	800380c <BSP_LCD_DisplayStringAt>
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000008c 	.word	0x2000008c
 8002210:	0800cbd8 	.word	0x0800cbd8
 8002214:	0800cbf8 	.word	0x0800cbf8
 8002218:	0800cc14 	.word	0x0800cc14

0800221c <GetPhysValues>:
 * @param  pPhysX : Physical X position
 * @param  pPhysY : Physical Y position
 * @retval None
 */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t *pPhysX, int16_t *pPhysY)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60ba      	str	r2, [r7, #8]
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	4603      	mov	r3, r0
 8002228:	81fb      	strh	r3, [r7, #14]
 800222a:	460b      	mov	r3, r1
 800222c:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800222e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002232:	f001 fa33 	bl	800369c <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8002236:	89fb      	ldrh	r3, [r7, #14]
 8002238:	89b9      	ldrh	r1, [r7, #12]
 800223a:	2205      	movs	r2, #5
 800223c:	4618      	mov	r0, r3
 800223e:	f001 fd27 	bl	8003c90 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002242:	f04f 30ff 	mov.w	r0, #4294967295
 8002246:	f001 fa29 	bl	800369c <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 800224a:	89fb      	ldrh	r3, [r7, #14]
 800224c:	89b9      	ldrh	r1, [r7, #12]
 800224e:	2202      	movs	r2, #2
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fd1d 	bl	8003c90 <BSP_LCD_FillCircle>

  /* Wait until touch is pressed */
  WaitForPressedState(1);
 8002256:	2001      	movs	r0, #1
 8002258:	f000 f820 	bl	800229c <WaitForPressedState>

  BSP_TS_GetState(&TS_State);
 800225c:	480e      	ldr	r0, [pc, #56]	; (8002298 <GetPhysValues+0x7c>)
 800225e:	f002 f9b9 	bl	80045d4 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <GetPhysValues+0x7c>)
 8002264:	885b      	ldrh	r3, [r3, #2]
 8002266:	b21a      	sxth	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y;
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <GetPhysValues+0x7c>)
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	b21a      	sxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	801a      	strh	r2, [r3, #0]

  /* Wait until touch is released */
  WaitForPressedState(0);
 8002276:	2000      	movs	r0, #0
 8002278:	f000 f810 	bl	800229c <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f001 fa0c 	bl	800369c <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8002284:	89fb      	ldrh	r3, [r7, #14]
 8002286:	89b9      	ldrh	r1, [r7, #12]
 8002288:	2205      	movs	r2, #5
 800228a:	4618      	mov	r0, r3
 800228c:	f001 fd00 	bl	8003c90 <BSP_LCD_FillCircle>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000012c 	.word	0x2000012c

0800229c <WaitForPressedState>:
 * @brief  Wait For Pressed State
 * @param  Pressed: Pressed State
 * @retval None
 */
static void WaitForPressedState(uint8_t Pressed)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef State;

  do
  {
    BSP_TS_GetState(&State);
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 f992 	bl	80045d4 <BSP_TS_GetState>
    HAL_Delay(10);
 80022b0:	200a      	movs	r0, #10
 80022b2:	f002 fa83 	bl	80047bc <HAL_Delay>
    if (State.TouchDetected == Pressed)
 80022b6:	89ba      	ldrh	r2, [r7, #12]
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1f2      	bne.n	80022a6 <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 80022c0:	f002 fa70 	bl	80047a4 <HAL_GetTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	82fb      	strh	r3, [r7, #22]
      do
      {
        BSP_TS_GetState(&State);
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 f981 	bl	80045d4 <BSP_TS_GetState>
        HAL_Delay(10);
 80022d2:	200a      	movs	r0, #10
 80022d4:	f002 fa72 	bl	80047bc <HAL_Delay>
        if (State.TouchDetected != Pressed)
 80022d8:	89ba      	ldrh	r2, [r7, #12]
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	429a      	cmp	r2, r3
 80022e0:	d108      	bne.n	80022f4 <WaitForPressedState+0x58>
        {
          break;
        }
        else if ((HAL_GetTick() - 100) > TimeStart)
 80022e2:	f002 fa5f 	bl	80047a4 <HAL_GetTick>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80022ec:	8afb      	ldrh	r3, [r7, #22]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d802      	bhi.n	80022f8 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);
 80022f2:	e7e9      	b.n	80022c8 <WaitForPressedState+0x2c>
          break;
 80022f4:	bf00      	nop
    BSP_TS_GetState(&State);
 80022f6:	e7d6      	b.n	80022a6 <WaitForPressedState+0xa>
        {
          return;
 80022f8:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <Calibration_GetX>:
 * @brief  Calibrate X position
 * @param  x: X position
 * @retval calibrated x
 */
uint16_t Calibration_GetX(uint16_t x)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	80fb      	strh	r3, [r7, #6]
  return (((A1 * x) + B1) / 1000);
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <Calibration_GetX+0x3c>)
 800230c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002310:	461a      	mov	r2, r3
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	fb03 f302 	mul.w	r3, r3, r2
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <Calibration_GetX+0x40>)
 800231a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800231e:	4413      	add	r3, r2
 8002320:	4a08      	ldr	r2, [pc, #32]	; (8002344 <Calibration_GetX+0x44>)
 8002322:	fb82 1203 	smull	r1, r2, r2, r3
 8002326:	1192      	asrs	r2, r2, #6
 8002328:	17db      	asrs	r3, r3, #31
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	b29b      	uxth	r3, r3
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000136 	.word	0x20000136
 8002340:	2000013a 	.word	0x2000013a
 8002344:	10624dd3 	.word	0x10624dd3

08002348 <Calibration_GetY>:
 * @brief  Calibrate Y position
 * @param  y: Y position
 * @retval calibrated y
 */
uint16_t Calibration_GetY(uint16_t y)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  return (((A2 * y) + B2) / 1000);
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <Calibration_GetY+0x3c>)
 8002354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002358:	461a      	mov	r2, r3
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	fb03 f302 	mul.w	r3, r3, r2
 8002360:	4a09      	ldr	r2, [pc, #36]	; (8002388 <Calibration_GetY+0x40>)
 8002362:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002366:	4413      	add	r3, r2
 8002368:	4a08      	ldr	r2, [pc, #32]	; (800238c <Calibration_GetY+0x44>)
 800236a:	fb82 1203 	smull	r1, r2, r2, r3
 800236e:	1192      	asrs	r2, r2, #6
 8002370:	17db      	asrs	r3, r3, #31
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	b29b      	uxth	r3, r3
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000138 	.word	0x20000138
 8002388:	2000013c 	.word	0x2000013c
 800238c:	10624dd3 	.word	0x10624dd3

08002390 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <MX_USART1_UART_Init+0x50>)
 8002398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 800239c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023b6:	220c      	movs	r2, #12
 80023b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023c8:	f008 f982 	bl	800a6d0 <HAL_UART_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023d2:	f7ff fb2f 	bl	8001a34 <Error_Handler>
  }

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000658 	.word	0x20000658
 80023e0:	40011000 	.word	0x40011000

080023e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_UART_MspInit+0x84>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d12c      	bne.n	8002460 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_UART_MspInit+0x88>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a17      	ldr	r2, [pc, #92]	; (800246c <HAL_UART_MspInit+0x88>)
 8002410:	f043 0310 	orr.w	r3, r3, #16
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_UART_MspInit+0x88>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_UART_MspInit+0x88>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_UART_MspInit+0x88>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_UART_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800243e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002450:	2307      	movs	r3, #7
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_UART_MspInit+0x8c>)
 800245c:	f003 f826 	bl	80054ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40011000 	.word	0x40011000
 800246c:	40023800 	.word	0x40023800
 8002470:	40020000 	.word	0x40020000

08002474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002478:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800247a:	e003      	b.n	8002484 <LoopCopyDataInit>

0800247c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800247e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002480:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002482:	3104      	adds	r1, #4

08002484 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002484:	480b      	ldr	r0, [pc, #44]	; (80024b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002488:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800248a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800248c:	d3f6      	bcc.n	800247c <CopyDataInit>
  ldr  r2, =_sbss
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002490:	e002      	b.n	8002498 <LoopFillZerobss>

08002492 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002492:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002494:	f842 3b04 	str.w	r3, [r2], #4

08002498 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800249a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800249c:	d3f9      	bcc.n	8002492 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800249e:	f7ff fcfb 	bl	8001e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a2:	f00a fa7d 	bl	800c9a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a6:	f7ff f897 	bl	80015d8 <main>
  bx  lr    
 80024aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80024b0:	08010648 	.word	0x08010648
  ldr  r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024b8:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 80024bc:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 80024c0:	20000a64 	.word	0x20000a64

080024c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>

080024c6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80024ca:	f000 fe65 	bl	8003198 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80024ce:	20ca      	movs	r0, #202	; 0xca
 80024d0:	f000 f95d 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80024d4:	20c3      	movs	r0, #195	; 0xc3
 80024d6:	f000 f967 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80024da:	2008      	movs	r0, #8
 80024dc:	f000 f964 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80024e0:	2050      	movs	r0, #80	; 0x50
 80024e2:	f000 f961 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80024e6:	20cf      	movs	r0, #207	; 0xcf
 80024e8:	f000 f951 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f000 f95b 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80024f2:	20c1      	movs	r0, #193	; 0xc1
 80024f4:	f000 f958 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80024f8:	2030      	movs	r0, #48	; 0x30
 80024fa:	f000 f955 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80024fe:	20ed      	movs	r0, #237	; 0xed
 8002500:	f000 f945 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002504:	2064      	movs	r0, #100	; 0x64
 8002506:	f000 f94f 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800250a:	2003      	movs	r0, #3
 800250c:	f000 f94c 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002510:	2012      	movs	r0, #18
 8002512:	f000 f949 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002516:	2081      	movs	r0, #129	; 0x81
 8002518:	f000 f946 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800251c:	20e8      	movs	r0, #232	; 0xe8
 800251e:	f000 f936 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002522:	2085      	movs	r0, #133	; 0x85
 8002524:	f000 f940 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002528:	2000      	movs	r0, #0
 800252a:	f000 f93d 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800252e:	2078      	movs	r0, #120	; 0x78
 8002530:	f000 f93a 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002534:	20cb      	movs	r0, #203	; 0xcb
 8002536:	f000 f92a 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800253a:	2039      	movs	r0, #57	; 0x39
 800253c:	f000 f934 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002540:	202c      	movs	r0, #44	; 0x2c
 8002542:	f000 f931 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f92e 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800254c:	2034      	movs	r0, #52	; 0x34
 800254e:	f000 f92b 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002552:	2002      	movs	r0, #2
 8002554:	f000 f928 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002558:	20f7      	movs	r0, #247	; 0xf7
 800255a:	f000 f918 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800255e:	2020      	movs	r0, #32
 8002560:	f000 f922 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002564:	20ea      	movs	r0, #234	; 0xea
 8002566:	f000 f912 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f000 f91c 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002570:	2000      	movs	r0, #0
 8002572:	f000 f919 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002576:	20b1      	movs	r0, #177	; 0xb1
 8002578:	f000 f909 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f000 f913 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002582:	201b      	movs	r0, #27
 8002584:	f000 f910 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002588:	20b6      	movs	r0, #182	; 0xb6
 800258a:	f000 f900 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800258e:	200a      	movs	r0, #10
 8002590:	f000 f90a 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002594:	20a2      	movs	r0, #162	; 0xa2
 8002596:	f000 f907 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800259a:	20c0      	movs	r0, #192	; 0xc0
 800259c:	f000 f8f7 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80025a0:	2010      	movs	r0, #16
 80025a2:	f000 f901 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80025a6:	20c1      	movs	r0, #193	; 0xc1
 80025a8:	f000 f8f1 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80025ac:	2010      	movs	r0, #16
 80025ae:	f000 f8fb 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80025b2:	20c5      	movs	r0, #197	; 0xc5
 80025b4:	f000 f8eb 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80025b8:	2045      	movs	r0, #69	; 0x45
 80025ba:	f000 f8f5 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80025be:	2015      	movs	r0, #21
 80025c0:	f000 f8f2 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80025c4:	20c7      	movs	r0, #199	; 0xc7
 80025c6:	f000 f8e2 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80025ca:	2090      	movs	r0, #144	; 0x90
 80025cc:	f000 f8ec 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80025d0:	2036      	movs	r0, #54	; 0x36
 80025d2:	f000 f8dc 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80025d6:	20c8      	movs	r0, #200	; 0xc8
 80025d8:	f000 f8e6 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80025dc:	20f2      	movs	r0, #242	; 0xf2
 80025de:	f000 f8d6 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 f8e0 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80025e8:	20b0      	movs	r0, #176	; 0xb0
 80025ea:	f000 f8d0 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80025ee:	20c2      	movs	r0, #194	; 0xc2
 80025f0:	f000 f8da 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80025f4:	20b6      	movs	r0, #182	; 0xb6
 80025f6:	f000 f8ca 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80025fa:	200a      	movs	r0, #10
 80025fc:	f000 f8d4 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002600:	20a7      	movs	r0, #167	; 0xa7
 8002602:	f000 f8d1 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002606:	2027      	movs	r0, #39	; 0x27
 8002608:	f000 f8ce 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800260c:	2004      	movs	r0, #4
 800260e:	f000 f8cb 	bl	80027a8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002612:	202a      	movs	r0, #42	; 0x2a
 8002614:	f000 f8bb 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f000 f8c5 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f000 f8c2 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f000 f8bf 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800262a:	20ef      	movs	r0, #239	; 0xef
 800262c:	f000 f8bc 	bl	80027a8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002630:	202b      	movs	r0, #43	; 0x2b
 8002632:	f000 f8ac 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002636:	2000      	movs	r0, #0
 8002638:	f000 f8b6 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f000 f8b3 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002642:	2001      	movs	r0, #1
 8002644:	f000 f8b0 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002648:	203f      	movs	r0, #63	; 0x3f
 800264a:	f000 f8ad 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800264e:	20f6      	movs	r0, #246	; 0xf6
 8002650:	f000 f89d 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002654:	2001      	movs	r0, #1
 8002656:	f000 f8a7 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f000 f8a4 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002660:	2006      	movs	r0, #6
 8002662:	f000 f8a1 	bl	80027a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002666:	202c      	movs	r0, #44	; 0x2c
 8002668:	f000 f891 	bl	800278e <ili9341_WriteReg>
  LCD_Delay(200);
 800266c:	20c8      	movs	r0, #200	; 0xc8
 800266e:	f000 fe81 	bl	8003374 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002672:	2026      	movs	r0, #38	; 0x26
 8002674:	f000 f88b 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002678:	2001      	movs	r0, #1
 800267a:	f000 f895 	bl	80027a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800267e:	20e0      	movs	r0, #224	; 0xe0
 8002680:	f000 f885 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002684:	200f      	movs	r0, #15
 8002686:	f000 f88f 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800268a:	2029      	movs	r0, #41	; 0x29
 800268c:	f000 f88c 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002690:	2024      	movs	r0, #36	; 0x24
 8002692:	f000 f889 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002696:	200c      	movs	r0, #12
 8002698:	f000 f886 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800269c:	200e      	movs	r0, #14
 800269e:	f000 f883 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80026a2:	2009      	movs	r0, #9
 80026a4:	f000 f880 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80026a8:	204e      	movs	r0, #78	; 0x4e
 80026aa:	f000 f87d 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80026ae:	2078      	movs	r0, #120	; 0x78
 80026b0:	f000 f87a 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80026b4:	203c      	movs	r0, #60	; 0x3c
 80026b6:	f000 f877 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80026ba:	2009      	movs	r0, #9
 80026bc:	f000 f874 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80026c0:	2013      	movs	r0, #19
 80026c2:	f000 f871 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80026c6:	2005      	movs	r0, #5
 80026c8:	f000 f86e 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80026cc:	2017      	movs	r0, #23
 80026ce:	f000 f86b 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80026d2:	2011      	movs	r0, #17
 80026d4:	f000 f868 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f000 f865 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80026de:	20e1      	movs	r0, #225	; 0xe1
 80026e0:	f000 f855 	bl	800278e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f000 f85f 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80026ea:	2016      	movs	r0, #22
 80026ec:	f000 f85c 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80026f0:	201b      	movs	r0, #27
 80026f2:	f000 f859 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80026f6:	2004      	movs	r0, #4
 80026f8:	f000 f856 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80026fc:	2011      	movs	r0, #17
 80026fe:	f000 f853 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002702:	2007      	movs	r0, #7
 8002704:	f000 f850 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002708:	2031      	movs	r0, #49	; 0x31
 800270a:	f000 f84d 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800270e:	2033      	movs	r0, #51	; 0x33
 8002710:	f000 f84a 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002714:	2042      	movs	r0, #66	; 0x42
 8002716:	f000 f847 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800271a:	2005      	movs	r0, #5
 800271c:	f000 f844 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002720:	200c      	movs	r0, #12
 8002722:	f000 f841 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002726:	200a      	movs	r0, #10
 8002728:	f000 f83e 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800272c:	2028      	movs	r0, #40	; 0x28
 800272e:	f000 f83b 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002732:	202f      	movs	r0, #47	; 0x2f
 8002734:	f000 f838 	bl	80027a8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002738:	200f      	movs	r0, #15
 800273a:	f000 f835 	bl	80027a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800273e:	2011      	movs	r0, #17
 8002740:	f000 f825 	bl	800278e <ili9341_WriteReg>
  LCD_Delay(200);
 8002744:	20c8      	movs	r0, #200	; 0xc8
 8002746:	f000 fe15 	bl	8003374 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800274a:	2029      	movs	r0, #41	; 0x29
 800274c:	f000 f81f 	bl	800278e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002750:	202c      	movs	r0, #44	; 0x2c
 8002752:	f000 f81c 	bl	800278e <ili9341_WriteReg>
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}

0800275a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800275e:	f000 fd1b 	bl	8003198 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002762:	2103      	movs	r1, #3
 8002764:	20d3      	movs	r0, #211	; 0xd3
 8002766:	f000 f82c 	bl	80027c2 <ili9341_ReadData>
 800276a:	4603      	mov	r3, r0
 800276c:	b29b      	uxth	r3, r3
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}

08002772 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002776:	2029      	movs	r0, #41	; 0x29
 8002778:	f000 f809 	bl	800278e <ili9341_WriteReg>
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002784:	2028      	movs	r0, #40	; 0x28
 8002786:	f000 f802 	bl	800278e <ili9341_WriteReg>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}

0800278e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fd96 	bl	80032cc <LCD_IO_WriteReg>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fd67 	bl	8003288 <LCD_IO_WriteData>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	460a      	mov	r2, r1
 80027cc:	80fb      	strh	r3, [r7, #6]
 80027ce:	4613      	mov	r3, r2
 80027d0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80027d2:	797a      	ldrb	r2, [r7, #5]
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fd99 	bl	8003310 <LCD_IO_ReadData>
 80027de:	4603      	mov	r3, r0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80027ec:	23f0      	movs	r3, #240	; 0xf0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80027fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fa59 	bl	8002cd0 <stmpe811_GetInstance>
 800281e:	4603      	mov	r3, r0
 8002820:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2bff      	cmp	r3, #255	; 0xff
 8002826:	d112      	bne.n	800284e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002828:	2000      	movs	r0, #0
 800282a:	f000 fa51 	bl	8002cd0 <stmpe811_GetInstance>
 800282e:	4603      	mov	r3, r0
 8002830:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002832:	7bbb      	ldrb	r3, [r7, #14]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d80a      	bhi.n	800284e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	b2d1      	uxtb	r1, r2
 800283e:	4a06      	ldr	r2, [pc, #24]	; (8002858 <stmpe811_Init+0x4c>)
 8002840:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002842:	f000 fda2 	bl	800338a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f807 	bl	800285c <stmpe811_Reset>
    }
  }
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000150 	.word	0x20000150

0800285c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2202      	movs	r2, #2
 800286c:	2103      	movs	r1, #3
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fd97 	bl	80033a2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002874:	200a      	movs	r0, #10
 8002876:	f000 fdd1 	bl	800341c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2200      	movs	r2, #0
 8002880:	2103      	movs	r1, #3
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fd8d 	bl	80033a2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002888:	2002      	movs	r0, #2
 800288a:	f000 fdc7 	bl	800341c <IOE_Delay>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002896:	b590      	push	{r4, r7, lr}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80028a0:	f000 fd73 	bl	800338a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fd8c 	bl	80033c8 <IOE_Read>
 80028b0:	4603      	mov	r3, r0
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd83 	bl	80033c8 <IOE_Read>
 80028c2:	4603      	mov	r3, r0
 80028c4:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80028c6:	4323      	orrs	r3, r4
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	b29b      	uxth	r3, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}

080028d4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2109      	movs	r1, #9
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fd6d 	bl	80033c8 <IOE_Read>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	2109      	movs	r1, #9
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fd4d 	bl	80033a2 <IOE_Write>
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2109      	movs	r1, #9
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fd4f 	bl	80033c8 <IOE_Read>
 800292a:	4603      	mov	r3, r0
 800292c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	2109      	movs	r1, #9
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fd2f 	bl	80033a2 <IOE_Write>
    
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	460a      	mov	r2, r1
 8002956:	80fb      	strh	r3, [r7, #6]
 8002958:	4613      	mov	r3, r2
 800295a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	210a      	movs	r1, #10
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fd2e 	bl	80033c8 <IOE_Read>
 800296c:	4603      	mov	r3, r0
 800296e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	797b      	ldrb	r3, [r7, #5]
 8002974:	4313      	orrs	r3, r2
 8002976:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	210a      	movs	r1, #10
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fd0e 	bl	80033a2 <IOE_Write>
}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	460a      	mov	r2, r1
 8002998:	80fb      	strh	r3, [r7, #6]
 800299a:	4613      	mov	r3, r2
 800299c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	210a      	movs	r1, #10
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fd0d 	bl	80033c8 <IOE_Read>
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80029b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029be:	4013      	ands	r3, r2
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	210a      	movs	r1, #10
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fce8 	bl	80033a2 <IOE_Write>
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	460a      	mov	r2, r1
 80029e4:	80fb      	strh	r3, [r7, #6]
 80029e6:	4613      	mov	r3, r2
 80029e8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	210b      	movs	r1, #11
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fce9 	bl	80033c8 <IOE_Read>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	797b      	ldrb	r3, [r7, #5]
 80029fc:	4013      	ands	r3, r2
 80029fe:	b2db      	uxtb	r3, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460a      	mov	r2, r1
 8002a12:	80fb      	strh	r3, [r7, #6]
 8002a14:	4613      	mov	r3, r2
 8002a16:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	797a      	ldrb	r2, [r7, #5]
 8002a1e:	210b      	movs	r1, #11
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fcbe 	bl	80033a2 <IOE_Write>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	6039      	str	r1, [r7, #0]
 8002a38:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2117      	movs	r1, #23
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fcbf 	bl	80033c8 <IOE_Read>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	b25a      	sxtb	r2, r3
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	2117      	movs	r1, #23
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fc9a 	bl	80033a2 <IOE_Write>
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2104      	movs	r1, #4
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fc9e 	bl	80033c8 <IOE_Read>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	f023 0304 	bic.w	r3, r3, #4
 8002a96:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	2104      	movs	r1, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fc7e 	bl	80033a2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	21f0      	movs	r1, #240	; 0xf0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ffbf 	bl	8002a2e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	2104      	movs	r1, #4
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fc6e 	bl	80033a2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2249      	movs	r2, #73	; 0x49
 8002acc:	2120      	movs	r1, #32
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fc67 	bl	80033a2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f000 fca1 	bl	800341c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2121      	movs	r1, #33	; 0x21
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fc5d 	bl	80033a2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	229a      	movs	r2, #154	; 0x9a
 8002aee:	2141      	movs	r1, #65	; 0x41
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fc56 	bl	80033a2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2201      	movs	r2, #1
 8002afc:	214a      	movs	r1, #74	; 0x4a
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fc4f 	bl	80033a2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2201      	movs	r2, #1
 8002b0a:	214b      	movs	r1, #75	; 0x4b
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fc48 	bl	80033a2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2200      	movs	r2, #0
 8002b18:	214b      	movs	r1, #75	; 0x4b
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fc41 	bl	80033a2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2201      	movs	r2, #1
 8002b26:	2156      	movs	r1, #86	; 0x56
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fc3a 	bl	80033a2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2201      	movs	r2, #1
 8002b34:	2158      	movs	r1, #88	; 0x58
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fc33 	bl	80033a2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2201      	movs	r2, #1
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fc2c 	bl	80033a2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	22ff      	movs	r2, #255	; 0xff
 8002b50:	210b      	movs	r1, #11
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fc25 	bl	80033a2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f000 fc5f 	bl	800341c <IOE_Delay>
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2140      	movs	r1, #64	; 0x40
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fc24 	bl	80033c8 <IOE_Read>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b80      	cmp	r3, #128	; 0x80
 8002b88:	bf0c      	ite	eq
 8002b8a:	2301      	moveq	r3, #1
 8002b8c:	2300      	movne	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002b92:	7bbb      	ldrb	r3, [r7, #14]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	214c      	movs	r1, #76	; 0x4c
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fc12 	bl	80033c8 <IOE_Read>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d010      	beq.n	8002bcc <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	e00d      	b.n	8002bcc <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	214b      	movs	r1, #75	; 0x4b
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fbf2 	bl	80033a2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	214b      	movs	r1, #75	; 0x4b
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fbeb 	bl	80033a2 <IOE_Write>
  }
  
  return ret;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	b2d8      	uxtb	r0, r3
 8002be8:	f107 0210 	add.w	r2, r7, #16
 8002bec:	2304      	movs	r3, #4
 8002bee:	21d7      	movs	r1, #215	; 0xd7
 8002bf0:	f000 fbfd 	bl	80033ee <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002bf4:	7c3b      	ldrb	r3, [r7, #16]
 8002bf6:	061a      	lsls	r2, r3, #24
 8002bf8:	7c7b      	ldrb	r3, [r7, #17]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	7cbb      	ldrb	r3, [r7, #18]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	4313      	orrs	r3, r2
 8002c04:	7cfa      	ldrb	r2, [r7, #19]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	0d1b      	lsrs	r3, r3, #20
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002c24:	89fb      	ldrh	r3, [r7, #14]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2201      	movs	r2, #1
 8002c2a:	214b      	movs	r1, #75	; 0x4b
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fbb8 	bl	80033a2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2200      	movs	r2, #0
 8002c38:	214b      	movs	r1, #75	; 0x4b
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fbb1 	bl	80033a2 <IOE_Write>
}
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002c52:	f000 fba0 	bl	8003396 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	211f      	movs	r1, #31
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fe76 	bl	800294c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fe36 	bl	80028d4 <stmpe811_EnableGlobalIT>
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fe47 	bl	8002910 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	211f      	movs	r1, #31
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fe81 	bl	800298e <stmpe811_DisableITSource>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	211f      	movs	r1, #31
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fe99 	bl	80029da <stmpe811_ReadGITStatus>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	211f      	movs	r1, #31
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fea1 	bl	8002a08 <stmpe811_ClearGlobalIT>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e00b      	b.n	8002cfc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <stmpe811_GetInstance+0x40>)
 8002ce8:	5cd3      	ldrb	r3, [r2, r3]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d101      	bne.n	8002cf6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	e006      	b.n	8002d04 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d9f0      	bls.n	8002ce4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002d02:	23ff      	movs	r3, #255	; 0xff
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	20000150 	.word	0x20000150

08002d14 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <BSP_LED_On+0x2c>)
 8002d22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <BSP_LED_On+0x30>)
 8002d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4619      	mov	r1, r3
 8002d32:	f002 fe6f 	bl	8005a14 <HAL_GPIO_WritePin>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000064 	.word	0x20000064
 8002d44:	0800cc48 	.word	0x0800cc48

08002d48 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <I2Cx_MspInit+0xdc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d15f      	bne.n	8002e1a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002d98:	2312      	movs	r3, #18
 8002d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002da0:	2302      	movs	r3, #2
 8002da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002da4:	2304      	movs	r3, #4
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4619      	mov	r1, r3
 8002dae:	481f      	ldr	r0, [pc, #124]	; (8002e2c <I2Cx_MspInit+0xe4>)
 8002db0:	f002 fb7c 	bl	80054ac <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	481b      	ldr	r0, [pc, #108]	; (8002e30 <I2Cx_MspInit+0xe8>)
 8002dc2:	f002 fb73 	bl	80054ac <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dec:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <I2Cx_MspInit+0xe0>)
 8002df4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002df8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	210f      	movs	r1, #15
 8002dfe:	2048      	movs	r0, #72	; 0x48
 8002e00:	f001 fdb6 	bl	8004970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002e04:	2048      	movs	r0, #72	; 0x48
 8002e06:	f001 fdcf 	bl	80049a8 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	210f      	movs	r1, #15
 8002e0e:	2049      	movs	r0, #73	; 0x49
 8002e10:	f001 fdae 	bl	8004970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002e14:	2049      	movs	r0, #73	; 0x49
 8002e16:	f001 fdc7 	bl	80049a8 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40005c00 	.word	0x40005c00
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40020800 	.word	0x40020800

08002e34 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002e38:	4814      	ldr	r0, [pc, #80]	; (8002e8c <I2Cx_Init+0x58>)
 8002e3a:	f004 fc77 	bl	800772c <HAL_I2C_GetState>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d121      	bne.n	8002e88 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <I2Cx_Init+0x58>)
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <I2Cx_Init+0x5c>)
 8002e48:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <I2Cx_Init+0x58>)
 8002e4c:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <I2Cx_Init+0x60>)
 8002e4e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <I2Cx_Init+0x58>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <I2Cx_Init+0x58>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <I2Cx_Init+0x58>)
 8002e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e62:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <I2Cx_Init+0x58>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <I2Cx_Init+0x58>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <I2Cx_Init+0x58>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <I2Cx_Init+0x58>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002e7c:	4803      	ldr	r0, [pc, #12]	; (8002e8c <I2Cx_Init+0x58>)
 8002e7e:	f7ff ff63 	bl	8002d48 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <I2Cx_Init+0x58>)
 8002e84:	f003 ffca 	bl	8006e1c <HAL_I2C_Init>
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000698 	.word	0x20000698
 8002e90:	40005c00 	.word	0x40005c00
 8002e94:	000186a0 	.word	0x000186a0

08002e98 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <I2Cx_ITConfig+0x58>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <I2Cx_ITConfig+0x58>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <I2Cx_ITConfig+0x58>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <I2Cx_ITConfig+0x5c>)
 8002eca:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <I2Cx_ITConfig+0x60>)
 8002ed2:	f002 faeb 	bl	80054ac <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	210f      	movs	r1, #15
 8002eda:	2028      	movs	r0, #40	; 0x28
 8002edc:	f001 fd48 	bl	8004970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002ee0:	2028      	movs	r0, #40	; 0x28
 8002ee2:	f001 fd61 	bl	80049a8 <HAL_NVIC_EnableIRQ>
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	10210000 	.word	0x10210000
 8002ef8:	40020000 	.word	0x40020000

08002efc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af04      	add	r7, sp, #16
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	460b      	mov	r3, r1
 8002f08:	71bb      	strb	r3, [r7, #6]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	b299      	uxth	r1, r3
 8002f16:	79bb      	ldrb	r3, [r7, #6]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <I2Cx_WriteData+0x4c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	2301      	movs	r3, #1
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	1d7b      	adds	r3, r7, #5
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4808      	ldr	r0, [pc, #32]	; (8002f4c <I2Cx_WriteData+0x50>)
 8002f2c:	f004 f8de 	bl	80070ec <HAL_I2C_Mem_Write>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f3a:	f000 f863 	bl	8003004 <I2Cx_Error>
  }        
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000006c 	.word	0x2000006c
 8002f4c:	20000698 	.word	0x20000698

08002f50 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af04      	add	r7, sp, #16
 8002f56:	4603      	mov	r3, r0
 8002f58:	460a      	mov	r2, r1
 8002f5a:	71fb      	strb	r3, [r7, #7]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	b299      	uxth	r1, r3
 8002f6c:	79bb      	ldrb	r3, [r7, #6]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <I2Cx_ReadData+0x50>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	9302      	str	r3, [sp, #8]
 8002f76:	2301      	movs	r3, #1
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	f107 030e 	add.w	r3, r7, #14
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2301      	movs	r3, #1
 8002f82:	4808      	ldr	r0, [pc, #32]	; (8002fa4 <I2Cx_ReadData+0x54>)
 8002f84:	f004 f9ac 	bl	80072e0 <HAL_I2C_Mem_Read>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f92:	f000 f837 	bl	8003004 <I2Cx_Error>
  
  }
  return value;
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	2000006c 	.word	0x2000006c
 8002fa4:	20000698 	.word	0x20000698

08002fa8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af04      	add	r7, sp, #16
 8002fae:	603a      	str	r2, [r7, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	71bb      	strb	r3, [r7, #6]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	b299      	uxth	r1, r3
 8002fc6:	79bb      	ldrb	r3, [r7, #6]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <I2Cx_ReadBuffer+0x54>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	88bb      	ldrh	r3, [r7, #4]
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2301      	movs	r3, #1
 8002fda:	4809      	ldr	r0, [pc, #36]	; (8003000 <I2Cx_ReadBuffer+0x58>)
 8002fdc:	f004 f980 	bl	80072e0 <HAL_I2C_Mem_Read>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e002      	b.n	8002ff4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002fee:	f000 f809 	bl	8003004 <I2Cx_Error>

    return 1;
 8002ff2:	2301      	movs	r3, #1
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	2000006c 	.word	0x2000006c
 8003000:	20000698 	.word	0x20000698

08003004 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003008:	4803      	ldr	r0, [pc, #12]	; (8003018 <I2Cx_Error+0x14>)
 800300a:	f004 f83f 	bl	800708c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800300e:	f7ff ff11 	bl	8002e34 <I2Cx_Init>
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000698 	.word	0x20000698

0800301c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003020:	4819      	ldr	r0, [pc, #100]	; (8003088 <SPIx_Init+0x6c>)
 8003022:	f006 fe35 	bl	8009c90 <HAL_SPI_GetState>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d12b      	bne.n	8003084 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <SPIx_Init+0x6c>)
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <SPIx_Init+0x70>)
 8003030:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <SPIx_Init+0x6c>)
 8003034:	2218      	movs	r2, #24
 8003036:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <SPIx_Init+0x6c>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <SPIx_Init+0x6c>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <SPIx_Init+0x6c>)
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <SPIx_Init+0x6c>)
 800304c:	2200      	movs	r2, #0
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <SPIx_Init+0x6c>)
 8003052:	2207      	movs	r2, #7
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <SPIx_Init+0x6c>)
 8003058:	2200      	movs	r2, #0
 800305a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <SPIx_Init+0x6c>)
 800305e:	2200      	movs	r2, #0
 8003060:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <SPIx_Init+0x6c>)
 8003064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003068:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <SPIx_Init+0x6c>)
 800306c:	2200      	movs	r2, #0
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SPIx_Init+0x6c>)
 8003072:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003076:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003078:	4803      	ldr	r0, [pc, #12]	; (8003088 <SPIx_Init+0x6c>)
 800307a:	f000 f853 	bl	8003124 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800307e:	4802      	ldr	r0, [pc, #8]	; (8003088 <SPIx_Init+0x6c>)
 8003080:	f006 f99b 	bl	80093ba <HAL_SPI_Init>
  } 
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000154 	.word	0x20000154
 800308c:	40015000 	.word	0x40015000

08003090 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <SPIx_Read+0x38>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f107 0108 	add.w	r1, r7, #8
 80030aa:	4808      	ldr	r0, [pc, #32]	; (80030cc <SPIx_Read+0x3c>)
 80030ac:	f006 fb45 	bl	800973a <HAL_SPI_Receive>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80030ba:	f000 f827 	bl	800310c <SPIx_Error>
  }
  
  return readvalue;
 80030be:	68bb      	ldr	r3, [r7, #8]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000070 	.word	0x20000070
 80030cc:	20000154 	.word	0x20000154

080030d0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <SPIx_Write+0x34>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1db9      	adds	r1, r7, #6
 80030e4:	2201      	movs	r2, #1
 80030e6:	4808      	ldr	r0, [pc, #32]	; (8003108 <SPIx_Write+0x38>)
 80030e8:	f006 f9f3 	bl	80094d2 <HAL_SPI_Transmit>
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80030f6:	f000 f809 	bl	800310c <SPIx_Error>
  }
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000070 	.word	0x20000070
 8003108:	20000154 	.word	0x20000154

0800310c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <SPIx_Error+0x14>)
 8003112:	f006 f9b6 	bl	8009482 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003116:	f7ff ff81 	bl	800301c <SPIx_Init>
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000154 	.word	0x20000154

08003124 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <SPIx_MspInit+0x6c>)
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	4a16      	ldr	r2, [pc, #88]	; (8003190 <SPIx_MspInit+0x6c>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313a:	6453      	str	r3, [r2, #68]	; 0x44
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <SPIx_MspInit+0x6c>)
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	4b10      	ldr	r3, [pc, #64]	; (8003190 <SPIx_MspInit+0x6c>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <SPIx_MspInit+0x6c>)
 8003152:	f043 0320 	orr.w	r3, r3, #32
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <SPIx_MspInit+0x6c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003164:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003168:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800316e:	2302      	movs	r3, #2
 8003170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003172:	2301      	movs	r3, #1
 8003174:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003176:	2305      	movs	r3, #5
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	4804      	ldr	r0, [pc, #16]	; (8003194 <SPIx_MspInit+0x70>)
 8003182:	f002 f993 	bl	80054ac <HAL_GPIO_Init>
}
 8003186:	bf00      	nop
 8003188:	3728      	adds	r7, #40	; 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	40021400 	.word	0x40021400

08003198 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800319e:	4b36      	ldr	r3, [pc, #216]	; (8003278 <LCD_IO_Init+0xe0>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d164      	bne.n	8003270 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80031a6:	4b34      	ldr	r3, [pc, #208]	; (8003278 <LCD_IO_Init+0xe0>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	4b32      	ldr	r3, [pc, #200]	; (800327c <LCD_IO_Init+0xe4>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a31      	ldr	r2, [pc, #196]	; (800327c <LCD_IO_Init+0xe4>)
 80031b6:	f043 0308 	orr.w	r3, r3, #8
 80031ba:	6313      	str	r3, [r2, #48]	; 0x30
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <LCD_IO_Init+0xe4>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80031c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80031ce:	2301      	movs	r3, #1
 80031d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	4619      	mov	r1, r3
 80031e0:	4827      	ldr	r0, [pc, #156]	; (8003280 <LCD_IO_Init+0xe8>)
 80031e2:	f002 f963 	bl	80054ac <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <LCD_IO_Init+0xe4>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a23      	ldr	r2, [pc, #140]	; (800327c <LCD_IO_Init+0xe4>)
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b21      	ldr	r3, [pc, #132]	; (800327c <LCD_IO_Init+0xe4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003208:	2301      	movs	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003210:	2302      	movs	r3, #2
 8003212:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	4619      	mov	r1, r3
 800321a:	4819      	ldr	r0, [pc, #100]	; (8003280 <LCD_IO_Init+0xe8>)
 800321c:	f002 f946 	bl	80054ac <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003220:	2300      	movs	r3, #0
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <LCD_IO_Init+0xe4>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <LCD_IO_Init+0xe4>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6313      	str	r3, [r2, #48]	; 0x30
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <LCD_IO_Init+0xe4>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800323c:	2304      	movs	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003240:	2301      	movs	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003248:	2302      	movs	r3, #2
 800324a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	4619      	mov	r1, r3
 8003252:	480c      	ldr	r0, [pc, #48]	; (8003284 <LCD_IO_Init+0xec>)
 8003254:	f002 f92a 	bl	80054ac <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003258:	2200      	movs	r2, #0
 800325a:	2104      	movs	r1, #4
 800325c:	4809      	ldr	r0, [pc, #36]	; (8003284 <LCD_IO_Init+0xec>)
 800325e:	f002 fbd9 	bl	8005a14 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003262:	2201      	movs	r2, #1
 8003264:	2104      	movs	r1, #4
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <LCD_IO_Init+0xec>)
 8003268:	f002 fbd4 	bl	8005a14 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800326c:	f7ff fed6 	bl	800301c <SPIx_Init>
  }
}
 8003270:	bf00      	nop
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200001ac 	.word	0x200001ac
 800327c:	40023800 	.word	0x40023800
 8003280:	40020c00 	.word	0x40020c00
 8003284:	40020800 	.word	0x40020800

08003288 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003292:	2201      	movs	r2, #1
 8003294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003298:	480a      	ldr	r0, [pc, #40]	; (80032c4 <LCD_IO_WriteData+0x3c>)
 800329a:	f002 fbbb 	bl	8005a14 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800329e:	2200      	movs	r2, #0
 80032a0:	2104      	movs	r1, #4
 80032a2:	4809      	ldr	r0, [pc, #36]	; (80032c8 <LCD_IO_WriteData+0x40>)
 80032a4:	f002 fbb6 	bl	8005a14 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff10 	bl	80030d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80032b0:	2201      	movs	r2, #1
 80032b2:	2104      	movs	r1, #4
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <LCD_IO_WriteData+0x40>)
 80032b6:	f002 fbad 	bl	8005a14 <HAL_GPIO_WritePin>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40020800 	.word	0x40020800

080032cc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80032d6:	2200      	movs	r2, #0
 80032d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032dc:	480a      	ldr	r0, [pc, #40]	; (8003308 <LCD_IO_WriteReg+0x3c>)
 80032de:	f002 fb99 	bl	8005a14 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80032e2:	2200      	movs	r2, #0
 80032e4:	2104      	movs	r1, #4
 80032e6:	4809      	ldr	r0, [pc, #36]	; (800330c <LCD_IO_WriteReg+0x40>)
 80032e8:	f002 fb94 	bl	8005a14 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff feed 	bl	80030d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80032f6:	2201      	movs	r2, #1
 80032f8:	2104      	movs	r1, #4
 80032fa:	4804      	ldr	r0, [pc, #16]	; (800330c <LCD_IO_WriteReg+0x40>)
 80032fc:	f002 fb8a 	bl	8005a14 <HAL_GPIO_WritePin>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40020800 	.word	0x40020800

08003310 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	460a      	mov	r2, r1
 800331a:	80fb      	strh	r3, [r7, #6]
 800331c:	4613      	mov	r3, r2
 800331e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003324:	2200      	movs	r2, #0
 8003326:	2104      	movs	r1, #4
 8003328:	4810      	ldr	r0, [pc, #64]	; (800336c <LCD_IO_ReadData+0x5c>)
 800332a:	f002 fb73 	bl	8005a14 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800332e:	2200      	movs	r2, #0
 8003330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003334:	480e      	ldr	r0, [pc, #56]	; (8003370 <LCD_IO_ReadData+0x60>)
 8003336:	f002 fb6d 	bl	8005a14 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fec7 	bl	80030d0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003342:	797b      	ldrb	r3, [r7, #5]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fea3 	bl	8003090 <SPIx_Read>
 800334a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800334c:	2201      	movs	r2, #1
 800334e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003352:	4807      	ldr	r0, [pc, #28]	; (8003370 <LCD_IO_ReadData+0x60>)
 8003354:	f002 fb5e 	bl	8005a14 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003358:	2201      	movs	r2, #1
 800335a:	2104      	movs	r1, #4
 800335c:	4803      	ldr	r0, [pc, #12]	; (800336c <LCD_IO_ReadData+0x5c>)
 800335e:	f002 fb59 	bl	8005a14 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40020800 	.word	0x40020800
 8003370:	40020c00 	.word	0x40020c00

08003374 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f001 fa1d 	bl	80047bc <HAL_Delay>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800338a:	b580      	push	{r7, lr}
 800338c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800338e:	f7ff fd51 	bl	8002e34 <I2Cx_Init>
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}

08003396 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800339a:	f7ff fd7d 	bl	8002e98 <I2Cx_ITConfig>
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	71fb      	strb	r3, [r7, #7]
 80033ac:	460b      	mov	r3, r1
 80033ae:	71bb      	strb	r3, [r7, #6]
 80033b0:	4613      	mov	r3, r2
 80033b2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80033b4:	797a      	ldrb	r2, [r7, #5]
 80033b6:	79b9      	ldrb	r1, [r7, #6]
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fd9e 	bl	8002efc <I2Cx_WriteData>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	460a      	mov	r2, r1
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80033d8:	79ba      	ldrb	r2, [r7, #6]
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fdb6 	bl	8002f50 <I2Cx_ReadData>
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	603a      	str	r2, [r7, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
 80033fc:	460b      	mov	r3, r1
 80033fe:	71bb      	strb	r3, [r7, #6]
 8003400:	4613      	mov	r3, r2
 8003402:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003404:	88bb      	ldrh	r3, [r7, #4]
 8003406:	79b9      	ldrb	r1, [r7, #6]
 8003408:	79f8      	ldrb	r0, [r7, #7]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	f7ff fdcc 	bl	8002fa8 <I2Cx_ReadBuffer>
 8003410:	4603      	mov	r3, r0
 8003412:	b29b      	uxth	r3, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f001 f9c9 	bl	80047bc <HAL_Delay>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003438:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <BSP_LCD_Init+0xbc>)
 800343a:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <BSP_LCD_Init+0xc0>)
 800343c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003440:	2209      	movs	r2, #9
 8003442:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003446:	2201      	movs	r2, #1
 8003448:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800344a:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <BSP_LCD_Init+0xbc>)
 800344c:	221d      	movs	r2, #29
 800344e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003452:	2203      	movs	r2, #3
 8003454:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003458:	f240 120d 	movw	r2, #269	; 0x10d
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003460:	f240 1243 	movw	r2, #323	; 0x143
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003468:	f240 1217 	movw	r2, #279	; 0x117
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003470:	f240 1247 	movw	r2, #327	; 0x147
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <BSP_LCD_Init+0xbc>)
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <BSP_LCD_Init+0xc4>)
 8003490:	2208      	movs	r2, #8
 8003492:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <BSP_LCD_Init+0xc4>)
 8003496:	22c0      	movs	r2, #192	; 0xc0
 8003498:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <BSP_LCD_Init+0xc4>)
 800349c:	2204      	movs	r2, #4
 800349e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <BSP_LCD_Init+0xc4>)
 80034a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80034a8:	4813      	ldr	r0, [pc, #76]	; (80034f8 <BSP_LCD_Init+0xc4>)
 80034aa:	f005 fd49 	bl	8008f40 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <BSP_LCD_Init+0xbc>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <BSP_LCD_Init+0xbc>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <BSP_LCD_Init+0xbc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <BSP_LCD_Init+0xbc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80034c6:	f000 fc93 	bl	8003df0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80034ca:	4809      	ldr	r0, [pc, #36]	; (80034f0 <BSP_LCD_Init+0xbc>)
 80034cc:	f004 fd12 	bl	8007ef4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80034d0:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <BSP_LCD_Init+0xc8>)
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <BSP_LCD_Init+0xcc>)
 80034d4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <BSP_LCD_Init+0xc8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80034de:	f000 fe75 	bl	80041cc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80034e2:	4808      	ldr	r0, [pc, #32]	; (8003504 <BSP_LCD_Init+0xd0>)
 80034e4:	f000 f90c 	bl	8003700 <BSP_LCD_SetFont>

  return LCD_OK;
 80034e8:	2300      	movs	r3, #0
}  
 80034ea:	4618      	mov	r0, r3
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200006ec 	.word	0x200006ec
 80034f4:	40016800 	.word	0x40016800
 80034f8:	200001f0 	.word	0x200001f0
 80034fc:	20000794 	.word	0x20000794
 8003500:	20000004 	.word	0x20000004
 8003504:	20000074 	.word	0x20000074

08003508 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <BSP_LCD_GetXSize+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	4798      	blx	r3
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000794 	.word	0x20000794

08003520 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <BSP_LCD_GetYSize+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4798      	blx	r3
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000794 	.word	0x20000794

08003538 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003538:	b580      	push	{r7, lr}
 800353a:	b090      	sub	sp, #64	; 0x40
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003548:	f7ff ffde 	bl	8003508 <BSP_LCD_GetXSize>
 800354c:	4603      	mov	r3, r0
 800354e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003554:	f7ff ffe4 	bl	8003520 <BSP_LCD_GetYSize>
 8003558:	4603      	mov	r3, r0
 800355a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003564:	23ff      	movs	r3, #255	; 0xff
 8003566:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800357e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003582:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003584:	2307      	movs	r3, #7
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003588:	f7ff ffbe 	bl	8003508 <BSP_LCD_GetXSize>
 800358c:	4603      	mov	r3, r0
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003590:	f7ff ffc6 	bl	8003520 <BSP_LCD_GetYSize>
 8003594:	4603      	mov	r3, r0
 8003596:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	4619      	mov	r1, r3
 80035a0:	4814      	ldr	r0, [pc, #80]	; (80035f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80035a2:	f004 fe39 	bl	8008218 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	4913      	ldr	r1, [pc, #76]	; (80035f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3304      	adds	r3, #4
 80035b6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	490e      	ldr	r1, [pc, #56]	; (80035f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3308      	adds	r3, #8
 80035cc:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <BSP_LCD_LayerDefaultInit+0xc4>)
 80035ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	4909      	ldr	r1, [pc, #36]	; (80035f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80035e2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80035e4:	4803      	ldr	r0, [pc, #12]	; (80035f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80035e6:	f004 fe55 	bl	8008294 <HAL_LTDC_EnableDither>
}
 80035ea:	bf00      	nop
 80035ec:	3740      	adds	r7, #64	; 0x40
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200006ec 	.word	0x200006ec
 80035f8:	20000224 	.word	0x20000224
 80035fc:	20000074 	.word	0x20000074

08003600 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <BSP_LCD_SelectLayer+0x1c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6013      	str	r3, [r2, #0]
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000220 	.word	0x20000220

08003620 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d112      	bne.n	8003658 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <BSP_LCD_SetLayerVisible+0x78>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	01db      	lsls	r3, r3, #7
 800363c:	4413      	add	r3, r2
 800363e:	3384      	adds	r3, #132	; 0x84
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a15      	ldr	r2, [pc, #84]	; (8003698 <BSP_LCD_SetLayerVisible+0x78>)
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	4611      	mov	r1, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	01d2      	lsls	r2, r2, #7
 800364c:	440a      	add	r2, r1
 800364e:	3284      	adds	r2, #132	; 0x84
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e011      	b.n	800367c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <BSP_LCD_SetLayerVisible+0x78>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	01db      	lsls	r3, r3, #7
 8003662:	4413      	add	r3, r2
 8003664:	3384      	adds	r3, #132	; 0x84
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <BSP_LCD_SetLayerVisible+0x78>)
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	4611      	mov	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	01d2      	lsls	r2, r2, #7
 8003672:	440a      	add	r2, r1
 8003674:	3284      	adds	r2, #132	; 0x84
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <BSP_LCD_SetLayerVisible+0x78>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <BSP_LCD_SetLayerVisible+0x78>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	200006ec 	.word	0x200006ec

0800369c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <BSP_LCD_SetTextColor+0x28>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4907      	ldr	r1, [pc, #28]	; (80036c8 <BSP_LCD_SetTextColor+0x2c>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	601a      	str	r2, [r3, #0]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	20000220 	.word	0x20000220
 80036c8:	20000224 	.word	0x20000224

080036cc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <BSP_LCD_SetBackColor+0x2c>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4908      	ldr	r1, [pc, #32]	; (80036fc <BSP_LCD_SetBackColor+0x30>)
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3304      	adds	r3, #4
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000220 	.word	0x20000220
 80036fc:	20000224 	.word	0x20000224

08003700 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <BSP_LCD_SetFont+0x2c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4908      	ldr	r1, [pc, #32]	; (8003730 <BSP_LCD_SetFont+0x30>)
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3308      	adds	r3, #8
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000220 	.word	0x20000220
 8003730:	20000224 	.word	0x20000224

08003734 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	b085      	sub	sp, #20
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <BSP_LCD_Clear+0x48>)
 800373e:	681c      	ldr	r4, [r3, #0]
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <BSP_LCD_Clear+0x48>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <BSP_LCD_Clear+0x4c>)
 8003746:	2134      	movs	r1, #52	; 0x34
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	335c      	adds	r3, #92	; 0x5c
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461d      	mov	r5, r3
 8003754:	f7ff fed8 	bl	8003508 <BSP_LCD_GetXSize>
 8003758:	4606      	mov	r6, r0
 800375a:	f7ff fee1 	bl	8003520 <BSP_LCD_GetYSize>
 800375e:	4602      	mov	r2, r0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2300      	movs	r3, #0
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	4632      	mov	r2, r6
 800376c:	4629      	mov	r1, r5
 800376e:	4620      	mov	r0, r4
 8003770:	f000 fcf4 	bl	800415c <FillBuffer>
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377c:	20000220 	.word	0x20000220
 8003780:	200006ec 	.word	0x200006ec

08003784 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	80fb      	strh	r3, [r7, #6]
 800378e:	460b      	mov	r3, r1
 8003790:	80bb      	strh	r3, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <BSP_LCD_DisplayChar+0x80>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	491b      	ldr	r1, [pc, #108]	; (8003808 <BSP_LCD_DisplayChar+0x84>)
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	3308      	adds	r3, #8
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6819      	ldr	r1, [r3, #0]
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80037b2:	4b14      	ldr	r3, [pc, #80]	; (8003804 <BSP_LCD_DisplayChar+0x80>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4c14      	ldr	r4, [pc, #80]	; (8003808 <BSP_LCD_DisplayChar+0x84>)
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4423      	add	r3, r4
 80037c2:	3308      	adds	r3, #8
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80037c8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80037cc:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <BSP_LCD_DisplayChar+0x80>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <BSP_LCD_DisplayChar+0x84>)
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4423      	add	r3, r4
 80037dc:	3308      	adds	r3, #8
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	889b      	ldrh	r3, [r3, #4]
 80037e2:	3307      	adds	r3, #7
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da00      	bge.n	80037ea <BSP_LCD_DisplayChar+0x66>
 80037e8:	3307      	adds	r3, #7
 80037ea:	10db      	asrs	r3, r3, #3
 80037ec:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80037f0:	18ca      	adds	r2, r1, r3
 80037f2:	88b9      	ldrh	r1, [r7, #4]
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fbf6 	bl	8003fe8 <DrawChar>
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bd90      	pop	{r4, r7, pc}
 8003804:	20000220 	.word	0x20000220
 8003808:	20000224 	.word	0x20000224

0800380c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800380c:	b5b0      	push	{r4, r5, r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	60ba      	str	r2, [r7, #8]
 8003814:	461a      	mov	r2, r3
 8003816:	4603      	mov	r3, r0
 8003818:	81fb      	strh	r3, [r7, #14]
 800381a:	460b      	mov	r3, r1
 800381c:	81bb      	strh	r3, [r7, #12]
 800381e:	4613      	mov	r3, r2
 8003820:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003822:	2301      	movs	r3, #1
 8003824:	83fb      	strh	r3, [r7, #30]
 8003826:	2300      	movs	r3, #0
 8003828:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800382a:	2300      	movs	r3, #0
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003836:	e002      	b.n	800383e <BSP_LCD_DisplayStringAt+0x32>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	3301      	adds	r3, #1
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	617a      	str	r2, [r7, #20]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f6      	bne.n	8003838 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800384a:	f7ff fe5d 	bl	8003508 <BSP_LCD_GetXSize>
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <BSP_LCD_DisplayStringAt+0x16c>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	494a      	ldr	r1, [pc, #296]	; (800397c <BSP_LCD_DisplayStringAt+0x170>)
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3308      	adds	r3, #8
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	889b      	ldrh	r3, [r3, #4]
 8003864:	fbb0 f3f3 	udiv	r3, r0, r3
 8003868:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d01c      	beq.n	80038aa <BSP_LCD_DisplayStringAt+0x9e>
 8003870:	2b03      	cmp	r3, #3
 8003872:	d017      	beq.n	80038a4 <BSP_LCD_DisplayStringAt+0x98>
 8003874:	2b01      	cmp	r3, #1
 8003876:	d12e      	bne.n	80038d6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	1ad1      	subs	r1, r2, r3
 800387e:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <BSP_LCD_DisplayStringAt+0x16c>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	483e      	ldr	r0, [pc, #248]	; (800397c <BSP_LCD_DisplayStringAt+0x170>)
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4403      	add	r3, r0
 800388e:	3308      	adds	r3, #8
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	889b      	ldrh	r3, [r3, #4]
 8003894:	fb03 f301 	mul.w	r3, r3, r1
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	89fb      	ldrh	r3, [r7, #14]
 800389e:	4413      	add	r3, r2
 80038a0:	83fb      	strh	r3, [r7, #30]
      break;
 80038a2:	e01b      	b.n	80038dc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80038a4:	89fb      	ldrh	r3, [r7, #14]
 80038a6:	83fb      	strh	r3, [r7, #30]
      break;
 80038a8:	e018      	b.n	80038dc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	b299      	uxth	r1, r3
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <BSP_LCD_DisplayStringAt+0x16c>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4831      	ldr	r0, [pc, #196]	; (800397c <BSP_LCD_DisplayStringAt+0x170>)
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4403      	add	r3, r0
 80038c2:	3308      	adds	r3, #8
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	889b      	ldrh	r3, [r3, #4]
 80038c8:	fb11 f303 	smulbb	r3, r1, r3
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	89fb      	ldrh	r3, [r7, #14]
 80038d0:	4413      	add	r3, r2
 80038d2:	83fb      	strh	r3, [r7, #30]
      break;
 80038d4:	e002      	b.n	80038dc <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 80038d6:	89fb      	ldrh	r3, [r7, #14]
 80038d8:	83fb      	strh	r3, [r7, #30]
      break;
 80038da:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038dc:	e01a      	b.n	8003914 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	89b9      	ldrh	r1, [r7, #12]
 80038e4:	8bfb      	ldrh	r3, [r7, #30]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff4c 	bl	8003784 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80038ec:	4b22      	ldr	r3, [pc, #136]	; (8003978 <BSP_LCD_DisplayStringAt+0x16c>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4922      	ldr	r1, [pc, #136]	; (800397c <BSP_LCD_DisplayStringAt+0x170>)
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3308      	adds	r3, #8
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	889a      	ldrh	r2, [r3, #4]
 8003902:	8bfb      	ldrh	r3, [r7, #30]
 8003904:	4413      	add	r3, r2
 8003906:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
    i++;
 800390e:	8bbb      	ldrh	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2dc      	uxtb	r4, r3
 8003922:	f7ff fdf1 	bl	8003508 <BSP_LCD_GetXSize>
 8003926:	4605      	mov	r5, r0
 8003928:	8bb9      	ldrh	r1, [r7, #28]
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <BSP_LCD_DisplayStringAt+0x16c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4813      	ldr	r0, [pc, #76]	; (800397c <BSP_LCD_DisplayStringAt+0x170>)
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4403      	add	r3, r0
 800393a:	3308      	adds	r3, #8
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	889b      	ldrh	r3, [r3, #4]
 8003940:	fb03 f301 	mul.w	r3, r3, r1
 8003944:	1aeb      	subs	r3, r5, r3
 8003946:	b299      	uxth	r1, r3
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <BSP_LCD_DisplayStringAt+0x16c>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	480b      	ldr	r0, [pc, #44]	; (800397c <BSP_LCD_DisplayStringAt+0x170>)
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4403      	add	r3, r0
 8003958:	3308      	adds	r3, #8
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	889b      	ldrh	r3, [r3, #4]
 800395e:	4299      	cmp	r1, r3
 8003960:	bf2c      	ite	cs
 8003962:	2301      	movcs	r3, #1
 8003964:	2300      	movcc	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	4023      	ands	r3, r4
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1b6      	bne.n	80038de <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8003970:	bf00      	nop
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bdb0      	pop	{r4, r5, r7, pc}
 8003978:	20000220 	.word	0x20000220
 800397c:	20000224 	.word	0x20000224

08003980 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003980:	b5b0      	push	{r4, r5, r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
 800398a:	460b      	mov	r3, r1
 800398c:	80bb      	strh	r3, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <BSP_LCD_DrawHLine+0x70>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <BSP_LCD_DrawHLine+0x74>)
 800399c:	2134      	movs	r1, #52	; 0x34
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	335c      	adds	r3, #92	; 0x5c
 80039a6:	681c      	ldr	r4, [r3, #0]
 80039a8:	f7ff fdae 	bl	8003508 <BSP_LCD_GetXSize>
 80039ac:	4602      	mov	r2, r0
 80039ae:	88bb      	ldrh	r3, [r7, #4]
 80039b0:	fb03 f202 	mul.w	r2, r3, r2
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4423      	add	r3, r4
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <BSP_LCD_DrawHLine+0x70>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	68fc      	ldr	r4, [r7, #12]
 80039c4:	887d      	ldrh	r5, [r7, #2]
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <BSP_LCD_DrawHLine+0x70>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	490b      	ldr	r1, [pc, #44]	; (80039f8 <BSP_LCD_DrawHLine+0x78>)
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2301      	movs	r3, #1
 80039e0:	462a      	mov	r2, r5
 80039e2:	4621      	mov	r1, r4
 80039e4:	f000 fbba 	bl	800415c <FillBuffer>
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bdb0      	pop	{r4, r5, r7, pc}
 80039f0:	20000220 	.word	0x20000220
 80039f4:	200006ec 	.word	0x200006ec
 80039f8:	20000224 	.word	0x20000224

080039fc <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
 8003a06:	460b      	mov	r3, r1
 8003a08:	80bb      	strh	r3, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	f1c3 0303 	rsb	r3, r3, #3
 8003a16:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003a20:	e0cf      	b.n	8003bc2 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	4413      	add	r3, r2
 8003a2a:	b298      	uxth	r0, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	88ba      	ldrh	r2, [r7, #4]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b29c      	uxth	r4, r3
 8003a36:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <BSP_LCD_DrawCircle+0x1d8>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4967      	ldr	r1, [pc, #412]	; (8003bd8 <BSP_LCD_DrawCircle+0x1dc>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	f000 faa6 	bl	8003f9c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	b298      	uxth	r0, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	88ba      	ldrh	r2, [r7, #4]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	b29c      	uxth	r4, r3
 8003a64:	4b5b      	ldr	r3, [pc, #364]	; (8003bd4 <BSP_LCD_DrawCircle+0x1d8>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	495b      	ldr	r1, [pc, #364]	; (8003bd8 <BSP_LCD_DrawCircle+0x1dc>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4621      	mov	r1, r4
 8003a7a:	f000 fa8f 	bl	8003f9c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	4413      	add	r3, r2
 8003a86:	b298      	uxth	r0, r3
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	88ba      	ldrh	r2, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	b29c      	uxth	r4, r3
 8003a92:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <BSP_LCD_DrawCircle+0x1d8>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4950      	ldr	r1, [pc, #320]	; (8003bd8 <BSP_LCD_DrawCircle+0x1dc>)
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	f000 fa78 	bl	8003f9c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	b298      	uxth	r0, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	88ba      	ldrh	r2, [r7, #4]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	b29c      	uxth	r4, r3
 8003ac0:	4b44      	ldr	r3, [pc, #272]	; (8003bd4 <BSP_LCD_DrawCircle+0x1d8>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4944      	ldr	r1, [pc, #272]	; (8003bd8 <BSP_LCD_DrawCircle+0x1dc>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	f000 fa61 	bl	8003f9c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	b298      	uxth	r0, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	88bb      	ldrh	r3, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	b29c      	uxth	r4, r3
 8003aee:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <BSP_LCD_DrawCircle+0x1d8>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4939      	ldr	r1, [pc, #228]	; (8003bd8 <BSP_LCD_DrawCircle+0x1dc>)
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	4621      	mov	r1, r4
 8003b04:	f000 fa4a 	bl	8003f9c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	b298      	uxth	r0, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	88bb      	ldrh	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	b29c      	uxth	r4, r3
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <BSP_LCD_DrawCircle+0x1d8>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	492d      	ldr	r1, [pc, #180]	; (8003bd8 <BSP_LCD_DrawCircle+0x1dc>)
 8003b22:	4613      	mov	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4621      	mov	r1, r4
 8003b32:	f000 fa33 	bl	8003f9c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	b298      	uxth	r0, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	88bb      	ldrh	r3, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	b29c      	uxth	r4, r3
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <BSP_LCD_DrawCircle+0x1d8>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4922      	ldr	r1, [pc, #136]	; (8003bd8 <BSP_LCD_DrawCircle+0x1dc>)
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4621      	mov	r1, r4
 8003b60:	f000 fa1c 	bl	8003f9c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	b298      	uxth	r0, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	88bb      	ldrh	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	b29c      	uxth	r4, r3
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <BSP_LCD_DrawCircle+0x1d8>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4916      	ldr	r1, [pc, #88]	; (8003bd8 <BSP_LCD_DrawCircle+0x1dc>)
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	f000 fa05 	bl	8003f9c <BSP_LCD_DrawPixel>

    if (d < 0)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	da06      	bge.n	8003ba6 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	009a      	lsls	r2, r3, #2
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3306      	adds	r3, #6
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e00a      	b.n	8003bbc <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	009a      	lsls	r2, r3, #2
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	330a      	adds	r3, #10
 8003bb4:	617b      	str	r3, [r7, #20]
      cury--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	f67f af2b 	bls.w	8003a22 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd90      	pop	{r4, r7, pc}
 8003bd4:	20000220 	.word	0x20000220
 8003bd8:	20000224 	.word	0x20000224

08003bdc <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af02      	add	r7, sp, #8
 8003be4:	4604      	mov	r4, r0
 8003be6:	4608      	mov	r0, r1
 8003be8:	4611      	mov	r1, r2
 8003bea:	461a      	mov	r2, r3
 8003bec:	4623      	mov	r3, r4
 8003bee:	80fb      	strh	r3, [r7, #6]
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	80bb      	strh	r3, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <BSP_LCD_FillRect+0xa8>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4920      	ldr	r1, [pc, #128]	; (8003c88 <BSP_LCD_FillRect+0xac>)
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fd42 	bl	800369c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003c18:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <BSP_LCD_FillRect+0xa8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <BSP_LCD_FillRect+0xb0>)
 8003c1e:	2134      	movs	r1, #52	; 0x34
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	335c      	adds	r3, #92	; 0x5c
 8003c28:	681c      	ldr	r4, [r3, #0]
 8003c2a:	f7ff fc6d 	bl	8003508 <BSP_LCD_GetXSize>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	88bb      	ldrh	r3, [r7, #4]
 8003c32:	fb03 f202 	mul.w	r2, r3, r2
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4423      	add	r3, r4
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <BSP_LCD_FillRect+0xa8>)
 8003c42:	681c      	ldr	r4, [r3, #0]
 8003c44:	68fd      	ldr	r5, [r7, #12]
 8003c46:	887e      	ldrh	r6, [r7, #2]
 8003c48:	f8b7 8000 	ldrh.w	r8, [r7]
 8003c4c:	f7ff fc5c 	bl	8003508 <BSP_LCD_GetXSize>
 8003c50:	4602      	mov	r2, r0
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	1ad1      	subs	r1, r2, r3
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <BSP_LCD_FillRect+0xa8>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	480b      	ldr	r0, [pc, #44]	; (8003c88 <BSP_LCD_FillRect+0xac>)
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4403      	add	r3, r0
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	9100      	str	r1, [sp, #0]
 8003c6c:	4643      	mov	r3, r8
 8003c6e:	4632      	mov	r2, r6
 8003c70:	4629      	mov	r1, r5
 8003c72:	4620      	mov	r0, r4
 8003c74:	f000 fa72 	bl	800415c <FillBuffer>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c82:	bf00      	nop
 8003c84:	20000220 	.word	0x20000220
 8003c88:	20000224 	.word	0x20000224
 8003c8c:	200006ec 	.word	0x200006ec

08003c90 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	80fb      	strh	r3, [r7, #6]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	80bb      	strh	r3, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	f1c3 0303 	rsb	r3, r3, #3
 8003caa:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003cb4:	4b44      	ldr	r3, [pc, #272]	; (8003dc8 <BSP_LCD_FillCircle+0x138>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4944      	ldr	r1, [pc, #272]	; (8003dcc <BSP_LCD_FillCircle+0x13c>)
 8003cba:	4613      	mov	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fce8 	bl	800369c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003ccc:	e061      	b.n	8003d92 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d021      	beq.n	8003d18 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	88fa      	ldrh	r2, [r7, #6]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	b298      	uxth	r0, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	88bb      	ldrh	r3, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b299      	uxth	r1, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f7ff fe45 	bl	8003980 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	b298      	uxth	r0, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	88ba      	ldrh	r2, [r7, #4]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	f7ff fe34 	bl	8003980 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d021      	beq.n	8003d62 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	b298      	uxth	r0, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	88ba      	ldrh	r2, [r7, #4]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	b299      	uxth	r1, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f7ff fe20 	bl	8003980 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	b298      	uxth	r0, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	88bb      	ldrh	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	b299      	uxth	r1, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f7ff fe0f 	bl	8003980 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da06      	bge.n	8003d76 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	009a      	lsls	r2, r3, #2
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4413      	add	r3, r2
 8003d70:	3306      	adds	r3, #6
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e00a      	b.n	8003d8c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	009a      	lsls	r2, r3, #2
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4413      	add	r3, r2
 8003d82:	330a      	adds	r3, #10
 8003d84:	617b      	str	r3, [r7, #20]
      cury--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d999      	bls.n	8003cce <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <BSP_LCD_FillCircle+0x138>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	490b      	ldr	r1, [pc, #44]	; (8003dcc <BSP_LCD_FillCircle+0x13c>)
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fc75 	bl	800369c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	88b9      	ldrh	r1, [r7, #4]
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fe1f 	bl	80039fc <BSP_LCD_DrawCircle>
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000220 	.word	0x20000220
 8003dcc:	20000224 	.word	0x20000224

08003dd0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <BSP_LCD_DisplayOn+0x1c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003dde:	4b03      	ldr	r3, [pc, #12]	; (8003dec <BSP_LCD_DisplayOn+0x1c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4798      	blx	r3
  }
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000794 	.word	0x20000794

08003df0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08e      	sub	sp, #56	; 0x38
 8003df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]
 8003dfa:	4b61      	ldr	r3, [pc, #388]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	4a60      	ldr	r2, [pc, #384]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e04:	6453      	str	r3, [r2, #68]	; 0x44
 8003e06:	4b5e      	ldr	r3, [pc, #376]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e0e:	623b      	str	r3, [r7, #32]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	4a59      	ldr	r2, [pc, #356]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e20:	6313      	str	r3, [r2, #48]	; 0x30
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3e:	4b50      	ldr	r3, [pc, #320]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a44      	ldr	r2, [pc, #272]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a3d      	ldr	r2, [pc, #244]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e8c:	f043 0308 	orr.w	r3, r3, #8
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a36      	ldr	r2, [pc, #216]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003ea8:	f043 0320 	orr.w	r3, r3, #32
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <BSP_LCD_MspInit+0x190>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003ed6:	f641 0358 	movw	r3, #6232	; 0x1858
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003edc:	2302      	movs	r3, #2
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003ee8:	230e      	movs	r3, #14
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4824      	ldr	r0, [pc, #144]	; (8003f84 <BSP_LCD_MspInit+0x194>)
 8003ef4:	f001 fada 	bl	80054ac <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003ef8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f02:	4619      	mov	r1, r3
 8003f04:	4820      	ldr	r0, [pc, #128]	; (8003f88 <BSP_LCD_MspInit+0x198>)
 8003f06:	f001 fad1 	bl	80054ac <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003f0a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f14:	4619      	mov	r1, r3
 8003f16:	481d      	ldr	r0, [pc, #116]	; (8003f8c <BSP_LCD_MspInit+0x19c>)
 8003f18:	f001 fac8 	bl	80054ac <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003f1c:	2348      	movs	r3, #72	; 0x48
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f24:	4619      	mov	r1, r3
 8003f26:	481a      	ldr	r0, [pc, #104]	; (8003f90 <BSP_LCD_MspInit+0x1a0>)
 8003f28:	f001 fac0 	bl	80054ac <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f36:	4619      	mov	r1, r3
 8003f38:	4816      	ldr	r0, [pc, #88]	; (8003f94 <BSP_LCD_MspInit+0x1a4>)
 8003f3a:	f001 fab7 	bl	80054ac <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003f3e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4813      	ldr	r0, [pc, #76]	; (8003f98 <BSP_LCD_MspInit+0x1a8>)
 8003f4c:	f001 faae 	bl	80054ac <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003f50:	2303      	movs	r3, #3
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003f54:	2309      	movs	r3, #9
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	480a      	ldr	r0, [pc, #40]	; (8003f88 <BSP_LCD_MspInit+0x198>)
 8003f60:	f001 faa4 	bl	80054ac <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003f64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4809      	ldr	r0, [pc, #36]	; (8003f98 <BSP_LCD_MspInit+0x1a8>)
 8003f72:	f001 fa9b 	bl	80054ac <HAL_GPIO_Init>
}
 8003f76:	bf00      	nop
 8003f78:	3738      	adds	r7, #56	; 0x38
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40020000 	.word	0x40020000
 8003f88:	40020400 	.word	0x40020400
 8003f8c:	40020800 	.word	0x40020800
 8003f90:	40020c00 	.word	0x40020c00
 8003f94:	40021400 	.word	0x40021400
 8003f98:	40021800 	.word	0x40021800

08003f9c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003f9c:	b5b0      	push	{r4, r5, r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	603a      	str	r2, [r7, #0]
 8003fa6:	80fb      	strh	r3, [r7, #6]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <BSP_LCD_DrawPixel+0x44>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <BSP_LCD_DrawPixel+0x48>)
 8003fb2:	2134      	movs	r1, #52	; 0x34
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	335c      	adds	r3, #92	; 0x5c
 8003fbc:	681c      	ldr	r4, [r3, #0]
 8003fbe:	88bd      	ldrh	r5, [r7, #4]
 8003fc0:	f7ff faa2 	bl	8003508 <BSP_LCD_GetXSize>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	fb03 f205 	mul.w	r2, r3, r5
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4423      	add	r3, r4
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6013      	str	r3, [r2, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bdb0      	pop	{r4, r5, r7, pc}
 8003fe0:	20000220 	.word	0x20000220
 8003fe4:	200006ec 	.word	0x200006ec

08003fe8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	603a      	str	r2, [r7, #0]
 8003ff2:	80fb      	strh	r3, [r7, #6]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004004:	4b53      	ldr	r3, [pc, #332]	; (8004154 <DrawChar+0x16c>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4953      	ldr	r1, [pc, #332]	; (8004158 <DrawChar+0x170>)
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3308      	adds	r3, #8
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	88db      	ldrh	r3, [r3, #6]
 800401a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800401c:	4b4d      	ldr	r3, [pc, #308]	; (8004154 <DrawChar+0x16c>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	494d      	ldr	r1, [pc, #308]	; (8004158 <DrawChar+0x170>)
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3308      	adds	r3, #8
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	889b      	ldrh	r3, [r3, #4]
 8004032:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004034:	8a3b      	ldrh	r3, [r7, #16]
 8004036:	3307      	adds	r3, #7
 8004038:	2b00      	cmp	r3, #0
 800403a:	da00      	bge.n	800403e <DrawChar+0x56>
 800403c:	3307      	adds	r3, #7
 800403e:	10db      	asrs	r3, r3, #3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	b2da      	uxtb	r2, r3
 8004046:	8a3b      	ldrh	r3, [r7, #16]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e076      	b.n	8004142 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004054:	8a3b      	ldrh	r3, [r7, #16]
 8004056:	3307      	adds	r3, #7
 8004058:	2b00      	cmp	r3, #0
 800405a:	da00      	bge.n	800405e <DrawChar+0x76>
 800405c:	3307      	adds	r3, #7
 800405e:	10db      	asrs	r3, r3, #3
 8004060:	461a      	mov	r2, r3
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fb03 f302 	mul.w	r3, r3, r2
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	4413      	add	r3, r2
 800406c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800406e:	8a3b      	ldrh	r3, [r7, #16]
 8004070:	3307      	adds	r3, #7
 8004072:	2b00      	cmp	r3, #0
 8004074:	da00      	bge.n	8004078 <DrawChar+0x90>
 8004076:	3307      	adds	r3, #7
 8004078:	10db      	asrs	r3, r3, #3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d002      	beq.n	8004084 <DrawChar+0x9c>
 800407e:	2b02      	cmp	r3, #2
 8004080:	d004      	beq.n	800408c <DrawChar+0xa4>
 8004082:	e00c      	b.n	800409e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	617b      	str	r3, [r7, #20]
      break;
 800408a:	e016      	b.n	80040ba <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	3201      	adds	r2, #1
 8004096:	7812      	ldrb	r2, [r2, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
      break;
 800409c:	e00d      	b.n	80040ba <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	041a      	lsls	r2, r3, #16
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3301      	adds	r3, #1
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	4313      	orrs	r3, r2
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	3202      	adds	r2, #2
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
      break;
 80040b8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	e036      	b.n	800412e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80040c0:	8a3a      	ldrh	r2, [r7, #16]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	1ad2      	subs	r2, r2, r3
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	4413      	add	r3, r2
 80040ca:	3b01      	subs	r3, #1
 80040cc:	2201      	movs	r2, #1
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d012      	beq.n	8004102 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	4413      	add	r3, r2
 80040e4:	b298      	uxth	r0, r3
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <DrawChar+0x16c>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	491b      	ldr	r1, [pc, #108]	; (8004158 <DrawChar+0x170>)
 80040ec:	4613      	mov	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	88bb      	ldrh	r3, [r7, #4]
 80040fa:	4619      	mov	r1, r3
 80040fc:	f7ff ff4e 	bl	8003f9c <BSP_LCD_DrawPixel>
 8004100:	e012      	b.n	8004128 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	b29a      	uxth	r2, r3
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	4413      	add	r3, r2
 800410a:	b298      	uxth	r0, r3
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <DrawChar+0x16c>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4911      	ldr	r1, [pc, #68]	; (8004158 <DrawChar+0x170>)
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3304      	adds	r3, #4
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	88bb      	ldrh	r3, [r7, #4]
 8004122:	4619      	mov	r1, r3
 8004124:	f7ff ff3a 	bl	8003f9c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	3301      	adds	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	8a3b      	ldrh	r3, [r7, #16]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	429a      	cmp	r2, r3
 8004134:	d3c4      	bcc.n	80040c0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004136:	88bb      	ldrh	r3, [r7, #4]
 8004138:	3301      	adds	r3, #1
 800413a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3301      	adds	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	8a7b      	ldrh	r3, [r7, #18]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	429a      	cmp	r2, r3
 8004148:	d384      	bcc.n	8004054 <DrawChar+0x6c>
  }
}
 800414a:	bf00      	nop
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000220 	.word	0x20000220
 8004158:	20000224 	.word	0x20000224

0800415c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <FillBuffer+0x68>)
 800416c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004170:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004172:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <FillBuffer+0x68>)
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004178:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <FillBuffer+0x68>)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <FillBuffer+0x68>)
 8004180:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <FillBuffer+0x6c>)
 8004182:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004184:	480f      	ldr	r0, [pc, #60]	; (80041c4 <FillBuffer+0x68>)
 8004186:	f000 fdf5 	bl	8004d74 <HAL_DMA2D_Init>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d115      	bne.n	80041bc <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	480c      	ldr	r0, [pc, #48]	; (80041c4 <FillBuffer+0x68>)
 8004194:	f001 f85c 	bl	8005250 <HAL_DMA2D_ConfigLayer>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10e      	bne.n	80041bc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69f9      	ldr	r1, [r7, #28]
 80041a8:	4806      	ldr	r0, [pc, #24]	; (80041c4 <FillBuffer+0x68>)
 80041aa:	f000 fe2c 	bl	8004e06 <HAL_DMA2D_Start>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d103      	bne.n	80041bc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80041b4:	210a      	movs	r1, #10
 80041b6:	4803      	ldr	r0, [pc, #12]	; (80041c4 <FillBuffer+0x68>)
 80041b8:	f000 fe50 	bl	8004e5c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	200001b0 	.word	0x200001b0
 80041c8:	4002b000 	.word	0x4002b000

080041cc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80041d0:	4b29      	ldr	r3, [pc, #164]	; (8004278 <BSP_SDRAM_Init+0xac>)
 80041d2:	4a2a      	ldr	r2, [pc, #168]	; (800427c <BSP_SDRAM_Init+0xb0>)
 80041d4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <BSP_SDRAM_Init+0xb4>)
 80041d8:	2202      	movs	r2, #2
 80041da:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80041dc:	4b28      	ldr	r3, [pc, #160]	; (8004280 <BSP_SDRAM_Init+0xb4>)
 80041de:	2207      	movs	r2, #7
 80041e0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80041e2:	4b27      	ldr	r3, [pc, #156]	; (8004280 <BSP_SDRAM_Init+0xb4>)
 80041e4:	2204      	movs	r2, #4
 80041e6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <BSP_SDRAM_Init+0xb4>)
 80041ea:	2207      	movs	r2, #7
 80041ec:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <BSP_SDRAM_Init+0xb4>)
 80041f0:	2202      	movs	r2, #2
 80041f2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80041f4:	4b22      	ldr	r3, [pc, #136]	; (8004280 <BSP_SDRAM_Init+0xb4>)
 80041f6:	2202      	movs	r2, #2
 80041f8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80041fa:	4b21      	ldr	r3, [pc, #132]	; (8004280 <BSP_SDRAM_Init+0xb4>)
 80041fc:	2202      	movs	r2, #2
 80041fe:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <BSP_SDRAM_Init+0xac>)
 8004202:	2201      	movs	r2, #1
 8004204:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <BSP_SDRAM_Init+0xac>)
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <BSP_SDRAM_Init+0xac>)
 800420e:	2204      	movs	r2, #4
 8004210:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <BSP_SDRAM_Init+0xac>)
 8004214:	2210      	movs	r2, #16
 8004216:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <BSP_SDRAM_Init+0xac>)
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <BSP_SDRAM_Init+0xac>)
 8004220:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004224:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <BSP_SDRAM_Init+0xac>)
 8004228:	2200      	movs	r2, #0
 800422a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <BSP_SDRAM_Init+0xac>)
 800422e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004232:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004234:	4b10      	ldr	r3, [pc, #64]	; (8004278 <BSP_SDRAM_Init+0xac>)
 8004236:	2200      	movs	r2, #0
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <BSP_SDRAM_Init+0xac>)
 800423c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004242:	2100      	movs	r1, #0
 8004244:	480c      	ldr	r0, [pc, #48]	; (8004278 <BSP_SDRAM_Init+0xac>)
 8004246:	f000 f87f 	bl	8004348 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800424a:	490d      	ldr	r1, [pc, #52]	; (8004280 <BSP_SDRAM_Init+0xb4>)
 800424c:	480a      	ldr	r0, [pc, #40]	; (8004278 <BSP_SDRAM_Init+0xac>)
 800424e:	f005 f835 	bl	80092bc <HAL_SDRAM_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <BSP_SDRAM_Init+0xb8>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e002      	b.n	8004266 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004260:	4b08      	ldr	r3, [pc, #32]	; (8004284 <BSP_SDRAM_Init+0xb8>)
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004266:	f240 506a 	movw	r0, #1386	; 0x56a
 800426a:	f000 f80d 	bl	8004288 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <BSP_SDRAM_Init+0xb8>)
 8004270:	781b      	ldrb	r3, [r3, #0]
}
 8004272:	4618      	mov	r0, r3
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	2000023c 	.word	0x2000023c
 800427c:	a0000140 	.word	0xa0000140
 8004280:	20000270 	.word	0x20000270
 8004284:	20000094 	.word	0x20000094

08004288 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800429a:	4b29      	ldr	r3, [pc, #164]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800429c:	2208      	movs	r2, #8
 800429e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80042a6:	4b26      	ldr	r3, [pc, #152]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80042ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b0:	4923      	ldr	r1, [pc, #140]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042b2:	4824      	ldr	r0, [pc, #144]	; (8004344 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042b4:	f005 f836 	bl	8009324 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80042b8:	2001      	movs	r0, #1
 80042ba:	f000 fa7f 	bl	80047bc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c0:	2202      	movs	r2, #2
 80042c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c6:	2208      	movs	r2, #8
 80042c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80042ca:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80042d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042da:	4919      	ldr	r1, [pc, #100]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042dc:	4819      	ldr	r0, [pc, #100]	; (8004344 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042de:	f005 f821 	bl	8009324 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80042e2:	4b17      	ldr	r3, [pc, #92]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042e4:	2203      	movs	r2, #3
 80042e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ea:	2208      	movs	r2, #8
 80042ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042f0:	2204      	movs	r2, #4
 80042f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80042fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042fe:	4910      	ldr	r1, [pc, #64]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004300:	4810      	ldr	r0, [pc, #64]	; (8004344 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004302:	f005 f80f 	bl	8009324 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004306:	f44f 730c 	mov.w	r3, #560	; 0x230
 800430a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800430e:	2204      	movs	r2, #4
 8004310:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004314:	2208      	movs	r2, #8
 8004316:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800431a:	2201      	movs	r2, #1
 800431c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a07      	ldr	r2, [pc, #28]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004322:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004328:	4905      	ldr	r1, [pc, #20]	; (8004340 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800432a:	4806      	ldr	r0, [pc, #24]	; (8004344 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800432c:	f004 fffa 	bl	8009324 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4804      	ldr	r0, [pc, #16]	; (8004344 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004334:	f005 f821 	bl	800937a <HAL_SDRAM_ProgramRefreshRate>
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	2000028c 	.word	0x2000028c
 8004344:	2000023c 	.word	0x2000023c

08004348 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b090      	sub	sp, #64	; 0x40
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80ec 	beq.w	8004532 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
 800435e:	4b77      	ldr	r3, [pc, #476]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	4a76      	ldr	r2, [pc, #472]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6393      	str	r3, [r2, #56]	; 0x38
 800436a:	4b74      	ldr	r3, [pc, #464]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
 800437a:	4b70      	ldr	r3, [pc, #448]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	4a6f      	ldr	r2, [pc, #444]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004384:	6313      	str	r3, [r2, #48]	; 0x30
 8004386:	4b6d      	ldr	r3, [pc, #436]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	4b69      	ldr	r3, [pc, #420]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4a68      	ldr	r2, [pc, #416]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	6313      	str	r3, [r2, #48]	; 0x30
 80043a2:	4b66      	ldr	r3, [pc, #408]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	4b62      	ldr	r3, [pc, #392]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a61      	ldr	r2, [pc, #388]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b5f      	ldr	r3, [pc, #380]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	4b5b      	ldr	r3, [pc, #364]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a5a      	ldr	r2, [pc, #360]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043d4:	f043 0308 	orr.w	r3, r3, #8
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b58      	ldr	r3, [pc, #352]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	4b54      	ldr	r3, [pc, #336]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	4a53      	ldr	r2, [pc, #332]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043f0:	f043 0310 	orr.w	r3, r3, #16
 80043f4:	6313      	str	r3, [r2, #48]	; 0x30
 80043f6:	4b51      	ldr	r3, [pc, #324]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	4b4d      	ldr	r3, [pc, #308]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a4c      	ldr	r2, [pc, #304]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 800440c:	f043 0320 	orr.w	r3, r3, #32
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	4b46      	ldr	r3, [pc, #280]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	4a45      	ldr	r2, [pc, #276]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442c:	6313      	str	r3, [r2, #48]	; 0x30
 800442e:	4b43      	ldr	r3, [pc, #268]	; (800453c <BSP_SDRAM_MspInit+0x1f4>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800443e:	2302      	movs	r3, #2
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004442:	2300      	movs	r3, #0
 8004444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004446:	230c      	movs	r3, #12
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800444a:	2360      	movs	r3, #96	; 0x60
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800444e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004452:	4619      	mov	r1, r3
 8004454:	483a      	ldr	r0, [pc, #232]	; (8004540 <BSP_SDRAM_MspInit+0x1f8>)
 8004456:	f001 f829 	bl	80054ac <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800445a:	2301      	movs	r3, #1
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800445e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004462:	4619      	mov	r1, r3
 8004464:	4837      	ldr	r0, [pc, #220]	; (8004544 <BSP_SDRAM_MspInit+0x1fc>)
 8004466:	f001 f821 	bl	80054ac <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800446a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004474:	4619      	mov	r1, r3
 8004476:	4834      	ldr	r0, [pc, #208]	; (8004548 <BSP_SDRAM_MspInit+0x200>)
 8004478:	f001 f818 	bl	80054ac <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800447c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004486:	4619      	mov	r1, r3
 8004488:	4830      	ldr	r0, [pc, #192]	; (800454c <BSP_SDRAM_MspInit+0x204>)
 800448a:	f001 f80f 	bl	80054ac <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800448e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004498:	4619      	mov	r1, r3
 800449a:	482d      	ldr	r0, [pc, #180]	; (8004550 <BSP_SDRAM_MspInit+0x208>)
 800449c:	f001 f806 	bl	80054ac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80044a0:	f248 1333 	movw	r3, #33075	; 0x8133
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80044a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044aa:	4619      	mov	r1, r3
 80044ac:	4829      	ldr	r0, [pc, #164]	; (8004554 <BSP_SDRAM_MspInit+0x20c>)
 80044ae:	f000 fffd 	bl	80054ac <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80044b2:	4b29      	ldr	r3, [pc, #164]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80044b8:	4b27      	ldr	r3, [pc, #156]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80044be:	4b26      	ldr	r3, [pc, #152]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044cc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044d4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044dc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80044de:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80044e4:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044ea:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80044f2:	4b19      	ldr	r3, [pc, #100]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044f4:	2203      	movs	r2, #3
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80044f8:	4b17      	ldr	r3, [pc, #92]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80044fe:	4b16      	ldr	r3, [pc, #88]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <BSP_SDRAM_MspInit+0x214>)
 8004508:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a12      	ldr	r2, [pc, #72]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
 8004510:	4a11      	ldr	r2, [pc, #68]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004516:	4810      	ldr	r0, [pc, #64]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 8004518:	f000 fb1e 	bl	8004b58 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800451c:	480e      	ldr	r0, [pc, #56]	; (8004558 <BSP_SDRAM_MspInit+0x210>)
 800451e:	f000 fa6d 	bl	80049fc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004522:	2200      	movs	r2, #0
 8004524:	210f      	movs	r1, #15
 8004526:	2038      	movs	r0, #56	; 0x38
 8004528:	f000 fa22 	bl	8004970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800452c:	2038      	movs	r0, #56	; 0x38
 800452e:	f000 fa3b 	bl	80049a8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004532:	bf00      	nop
 8004534:	3740      	adds	r7, #64	; 0x40
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	40020400 	.word	0x40020400
 8004544:	40020800 	.word	0x40020800
 8004548:	40020c00 	.word	0x40020c00
 800454c:	40021000 	.word	0x40021000
 8004550:	40021400 	.word	0x40021400
 8004554:	40021800 	.word	0x40021800
 8004558:	2000029c 	.word	0x2000029c
 800455c:	40026410 	.word	0x40026410

08004560 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	460a      	mov	r2, r1
 800456a:	80fb      	strh	r3, [r7, #6]
 800456c:	4613      	mov	r3, r2
 800456e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <BSP_TS_Init+0x64>)
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <BSP_TS_Init+0x68>)
 800457c:	88bb      	ldrh	r3, [r7, #4]
 800457e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <BSP_TS_Init+0x6c>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2082      	movs	r0, #130	; 0x82
 8004586:	4798      	blx	r3
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	f640 0311 	movw	r3, #2065	; 0x811
 8004590:	429a      	cmp	r2, r3
 8004592:	d104      	bne.n	800459e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <BSP_TS_Init+0x70>)
 8004596:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <BSP_TS_Init+0x6c>)
 8004598:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d109      	bne.n	80045b8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80045a4:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <BSP_TS_Init+0x70>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2082      	movs	r0, #130	; 0x82
 80045ac:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <BSP_TS_Init+0x70>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2082      	movs	r0, #130	; 0x82
 80045b6:	4798      	blx	r3
  }

  return ret;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000300 	.word	0x20000300
 80045c8:	20000302 	.word	0x20000302
 80045cc:	2000003c 	.word	0x2000003c
 80045d0:	200002fc 	.word	0x200002fc

080045d4 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80045dc:	4b4f      	ldr	r3, [pc, #316]	; (800471c <BSP_TS_GetState+0x148>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2082      	movs	r0, #130	; 0x82
 80045e4:	4798      	blx	r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 808d 	beq.w	8004712 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <BSP_TS_GetState+0x148>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f107 020c 	add.w	r2, r7, #12
 8004602:	f107 010e 	add.w	r1, r7, #14
 8004606:	2082      	movs	r0, #130	; 0x82
 8004608:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800460a:	89bb      	ldrh	r3, [r7, #12]
 800460c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004610:	b29b      	uxth	r3, r3
 8004612:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004614:	89bb      	ldrh	r3, [r7, #12]
 8004616:	4a42      	ldr	r2, [pc, #264]	; (8004720 <BSP_TS_GetState+0x14c>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004620:	8abb      	ldrh	r3, [r7, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	82bb      	strh	r3, [r7, #20]
 800462a:	e008      	b.n	800463e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800462c:	4b3d      	ldr	r3, [pc, #244]	; (8004724 <BSP_TS_GetState+0x150>)
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	8aba      	ldrh	r2, [r7, #20]
 8004632:	429a      	cmp	r2, r3
 8004634:	d903      	bls.n	800463e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <BSP_TS_GetState+0x150>)
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	3b01      	subs	r3, #1
 800463c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800463e:	8abb      	ldrh	r3, [r7, #20]
 8004640:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004642:	89fb      	ldrh	r3, [r7, #14]
 8004644:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004648:	4293      	cmp	r3, r2
 800464a:	d806      	bhi.n	800465a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8004652:	330e      	adds	r3, #14
 8004654:	b29b      	uxth	r3, r3
 8004656:	81fb      	strh	r3, [r7, #14]
 8004658:	e005      	b.n	8004666 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800465a:	89fb      	ldrh	r3, [r7, #14]
 800465c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004660:	3308      	adds	r3, #8
 8004662:	b29b      	uxth	r3, r3
 8004664:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004666:	89fb      	ldrh	r3, [r7, #14]
 8004668:	4a2f      	ldr	r2, [pc, #188]	; (8004728 <BSP_TS_GetState+0x154>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004672:	8afb      	ldrh	r3, [r7, #22]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	82fb      	strh	r3, [r7, #22]
 800467c:	e008      	b.n	8004690 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <BSP_TS_GetState+0x158>)
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	8afa      	ldrh	r2, [r7, #22]
 8004684:	429a      	cmp	r2, r3
 8004686:	d903      	bls.n	8004690 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <BSP_TS_GetState+0x158>)
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	3b01      	subs	r3, #1
 800468e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004690:	8afb      	ldrh	r3, [r7, #22]
 8004692:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004694:	89fb      	ldrh	r3, [r7, #14]
 8004696:	461a      	mov	r2, r3
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <BSP_TS_GetState+0x15c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d906      	bls.n	80046ae <BSP_TS_GetState+0xda>
 80046a0:	89fa      	ldrh	r2, [r7, #14]
 80046a2:	4b23      	ldr	r3, [pc, #140]	; (8004730 <BSP_TS_GetState+0x15c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	e005      	b.n	80046ba <BSP_TS_GetState+0xe6>
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <BSP_TS_GetState+0x15c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	89fb      	ldrh	r3, [r7, #14]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 80046bc:	89bb      	ldrh	r3, [r7, #12]
 80046be:	461a      	mov	r2, r3
 80046c0:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <BSP_TS_GetState+0x160>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d906      	bls.n	80046d6 <BSP_TS_GetState+0x102>
 80046c8:	89ba      	ldrh	r2, [r7, #12]
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <BSP_TS_GetState+0x160>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	e005      	b.n	80046e2 <BSP_TS_GetState+0x10e>
 80046d6:	4b17      	ldr	r3, [pc, #92]	; (8004734 <BSP_TS_GetState+0x160>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	b29a      	uxth	r2, r3
 80046dc:	89bb      	ldrh	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80046e4:	8a7a      	ldrh	r2, [r7, #18]
 80046e6:	8a3b      	ldrh	r3, [r7, #16]
 80046e8:	4413      	add	r3, r2
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	dd07      	ble.n	80046fe <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80046ee:	89fb      	ldrh	r3, [r7, #14]
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <BSP_TS_GetState+0x15c>)
 80046f4:	601a      	str	r2, [r3, #0]
      _y = y; 
 80046f6:	89bb      	ldrh	r3, [r7, #12]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <BSP_TS_GetState+0x160>)
 80046fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <BSP_TS_GetState+0x15c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <BSP_TS_GetState+0x160>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	809a      	strh	r2, [r3, #4]
  }
}
 8004712:	bf00      	nop
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200002fc 	.word	0x200002fc
 8004720:	ba2e8ba3 	.word	0xba2e8ba3
 8004724:	20000302 	.word	0x20000302
 8004728:	88888889 	.word	0x88888889
 800472c:	20000300 	.word	0x20000300
 8004730:	20000304 	.word	0x20000304
 8004734:	20000308 	.word	0x20000308

08004738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <HAL_Init+0x40>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <HAL_Init+0x40>)
 8004742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_Init+0x40>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <HAL_Init+0x40>)
 800474e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004754:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_Init+0x40>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a07      	ldr	r2, [pc, #28]	; (8004778 <HAL_Init+0x40>)
 800475a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004760:	2003      	movs	r0, #3
 8004762:	f000 f8fa 	bl	800495a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004766:	2000      	movs	r0, #0
 8004768:	f7fd fabc 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800476c:	f7fd fa8e 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00

0800477c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_IncTick+0x20>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_IncTick+0x24>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4413      	add	r3, r2
 800478c:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <HAL_IncTick+0x24>)
 800478e:	6013      	str	r3, [r2, #0]
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	2000009c 	.word	0x2000009c
 80047a0:	20000798 	.word	0x20000798

080047a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return uwTick;
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <HAL_GetTick+0x14>)
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000798 	.word	0x20000798

080047bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047c4:	f7ff ffee 	bl	80047a4 <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d005      	beq.n	80047e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_Delay+0x40>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047e2:	bf00      	nop
 80047e4:	f7ff ffde 	bl	80047a4 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d8f7      	bhi.n	80047e4 <HAL_Delay+0x28>
  {
  }
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	2000009c 	.word	0x2000009c

08004800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <__NVIC_SetPriorityGrouping+0x44>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800481c:	4013      	ands	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800482c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004832:	4a04      	ldr	r2, [pc, #16]	; (8004844 <__NVIC_SetPriorityGrouping+0x44>)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	60d3      	str	r3, [r2, #12]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <__NVIC_GetPriorityGrouping+0x18>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 0307 	and.w	r3, r3, #7
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	2b00      	cmp	r3, #0
 8004874:	db0b      	blt.n	800488e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	f003 021f 	and.w	r2, r3, #31
 800487c:	4907      	ldr	r1, [pc, #28]	; (800489c <__NVIC_EnableIRQ+0x38>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2001      	movs	r0, #1
 8004886:	fa00 f202 	lsl.w	r2, r0, r2
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000e100 	.word	0xe000e100

080048a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	db0a      	blt.n	80048ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	490c      	ldr	r1, [pc, #48]	; (80048ec <__NVIC_SetPriority+0x4c>)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	0112      	lsls	r2, r2, #4
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	440b      	add	r3, r1
 80048c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c8:	e00a      	b.n	80048e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	4908      	ldr	r1, [pc, #32]	; (80048f0 <__NVIC_SetPriority+0x50>)
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	3b04      	subs	r3, #4
 80048d8:	0112      	lsls	r2, r2, #4
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	440b      	add	r3, r1
 80048de:	761a      	strb	r2, [r3, #24]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000e100 	.word	0xe000e100
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f1c3 0307 	rsb	r3, r3, #7
 800490e:	2b04      	cmp	r3, #4
 8004910:	bf28      	it	cs
 8004912:	2304      	movcs	r3, #4
 8004914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3304      	adds	r3, #4
 800491a:	2b06      	cmp	r3, #6
 800491c:	d902      	bls.n	8004924 <NVIC_EncodePriority+0x30>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3b03      	subs	r3, #3
 8004922:	e000      	b.n	8004926 <NVIC_EncodePriority+0x32>
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004928:	f04f 32ff 	mov.w	r2, #4294967295
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43da      	mvns	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	401a      	ands	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800493c:	f04f 31ff 	mov.w	r1, #4294967295
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa01 f303 	lsl.w	r3, r1, r3
 8004946:	43d9      	mvns	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800494c:	4313      	orrs	r3, r2
         );
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff ff4c 	bl	8004800 <__NVIC_SetPriorityGrouping>
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004982:	f7ff ff61 	bl	8004848 <__NVIC_GetPriorityGrouping>
 8004986:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	f7ff ffb1 	bl	80048f4 <NVIC_EncodePriority>
 8004992:	4602      	mov	r2, r0
 8004994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ff80 	bl	80048a0 <__NVIC_SetPriority>
}
 80049a0:	bf00      	nop
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff ff54 	bl	8004864 <__NVIC_EnableIRQ>
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e00e      	b.n	80049f4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	795b      	ldrb	r3, [r3, #5]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fb ffdc 	bl	80009a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a08:	f7ff fecc 	bl	80047a4 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e099      	b.n	8004b4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a38:	e00f      	b.n	8004a5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a3a:	f7ff feb3 	bl	80047a4 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d908      	bls.n	8004a5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2203      	movs	r2, #3
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e078      	b.n	8004b4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e8      	bne.n	8004a3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4b38      	ldr	r3, [pc, #224]	; (8004b54 <HAL_DMA_Init+0x158>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d107      	bne.n	8004ac4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	4313      	orrs	r3, r2
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d117      	bne.n	8004b1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00e      	beq.n	8004b1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f8bd 	bl	8004c80 <DMA_CheckFifoParam>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2240      	movs	r2, #64	; 0x40
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e016      	b.n	8004b4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f874 	bl	8004c14 <DMA_CalcBaseAndBitshift>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	223f      	movs	r2, #63	; 0x3f
 8004b36:	409a      	lsls	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	f010803f 	.word	0xf010803f

08004b58 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e050      	b.n	8004c0c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d101      	bne.n	8004b7a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004b76:	2302      	movs	r3, #2
 8004b78:	e048      	b.n	8004c0c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2200      	movs	r2, #0
 8004b98:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2221      	movs	r2, #33	; 0x21
 8004bb8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f82a 	bl	8004c14 <DMA_CalcBaseAndBitshift>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	223f      	movs	r2, #63	; 0x3f
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	3b10      	subs	r3, #16
 8004c24:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <DMA_CalcBaseAndBitshift+0x64>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c2e:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <DMA_CalcBaseAndBitshift+0x68>)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d909      	bls.n	8004c56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	1d1a      	adds	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	659a      	str	r2, [r3, #88]	; 0x58
 8004c54:	e007      	b.n	8004c66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	aaaaaaab 	.word	0xaaaaaaab
 8004c7c:	08010630 	.word	0x08010630

08004c80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11f      	bne.n	8004cda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d855      	bhi.n	8004d4c <DMA_CheckFifoParam+0xcc>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <DMA_CheckFifoParam+0x28>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004ccb 	.word	0x08004ccb
 8004cb0:	08004cb9 	.word	0x08004cb9
 8004cb4:	08004d4d 	.word	0x08004d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d045      	beq.n	8004d50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc8:	e042      	b.n	8004d50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cd2:	d13f      	bne.n	8004d54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd8:	e03c      	b.n	8004d54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce2:	d121      	bne.n	8004d28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d836      	bhi.n	8004d58 <DMA_CheckFifoParam+0xd8>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <DMA_CheckFifoParam+0x70>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d07 	.word	0x08004d07
 8004cf8:	08004d01 	.word	0x08004d01
 8004cfc:	08004d19 	.word	0x08004d19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	e02f      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d024      	beq.n	8004d5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d16:	e021      	b.n	8004d5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d20:	d11e      	bne.n	8004d60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d26:	e01b      	b.n	8004d60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d902      	bls.n	8004d34 <DMA_CheckFifoParam+0xb4>
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d003      	beq.n	8004d3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d32:	e018      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
      break;
 8004d38:	e015      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00e      	beq.n	8004d64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4a:	e00b      	b.n	8004d64 <DMA_CheckFifoParam+0xe4>
      break;
 8004d4c:	bf00      	nop
 8004d4e:	e00a      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
      break;
 8004d50:	bf00      	nop
 8004d52:	e008      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
      break;
 8004d54:	bf00      	nop
 8004d56:	e006      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
      break;
 8004d58:	bf00      	nop
 8004d5a:	e004      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
      break;
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
      break;   
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <DMA_CheckFifoParam+0xe6>
      break;
 8004d64:	bf00      	nop
    }
  } 
  
  return status; 
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e03b      	b.n	8004dfe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fb fe56 	bl	8000a4c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	f023 0107 	bic.w	r1, r3, #7
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004dde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68d1      	ldr	r1, [r2, #12]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	430b      	orrs	r3, r1
 8004dec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b086      	sub	sp, #24
 8004e0a:	af02      	add	r7, sp, #8
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_DMA2D_Start+0x1c>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e018      	b.n	8004e54 <HAL_DMA2D_Start+0x4e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fa99 	bl	8005374 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d056      	beq.n	8004f26 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004e78:	f7ff fc94 	bl	80047a4 <HAL_GetTick>
 8004e7c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004e7e:	e04b      	b.n	8004f18 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d023      	beq.n	8004eda <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	f043 0202 	orr.w	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2221      	movs	r2, #33	; 0x21
 8004ec4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e0a5      	b.n	8005026 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d01a      	beq.n	8004f18 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004ee2:	f7ff fc5f 	bl	80047a4 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d302      	bcc.n	8004ef8 <HAL_DMA2D_PollForTransfer+0x9c>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10f      	bne.n	8004f18 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2203      	movs	r2, #3
 8004f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e086      	b.n	8005026 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0ac      	beq.n	8004e80 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d061      	beq.n	800500c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f48:	f7ff fc2c 	bl	80047a4 <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004f4e:	e056      	b.n	8004ffe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d02e      	beq.n	8004fc0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	f043 0204 	orr.w	r2, r3, #4
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	f043 0202 	orr.w	r2, r3, #2
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	f043 0201 	orr.w	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2229      	movs	r2, #41	; 0x29
 8004faa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2204      	movs	r2, #4
 8004fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e032      	b.n	8005026 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d01a      	beq.n	8004ffe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004fc8:	f7ff fbec 	bl	80047a4 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <HAL_DMA2D_PollForTransfer+0x182>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2203      	movs	r2, #3
 8004fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e013      	b.n	8005026 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0a1      	beq.n	8004f50 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2212      	movs	r2, #18
 8005012:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d026      	beq.n	800509e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d021      	beq.n	800509e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005068:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2201      	movs	r2, #1
 800507c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2204      	movs	r2, #4
 8005082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d026      	beq.n	80050f6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d021      	beq.n	80050f6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050c0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2220      	movs	r2, #32
 80050c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	f043 0202 	orr.w	r2, r3, #2
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2204      	movs	r2, #4
 80050da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d026      	beq.n	800514e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005106:	2b00      	cmp	r3, #0
 8005108:	d021      	beq.n	800514e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005118:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2208      	movs	r2, #8
 8005120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	f043 0204 	orr.w	r2, r3, #4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2204      	movs	r2, #4
 8005132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00e      	beq.n	8005180 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005170:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2204      	movs	r2, #4
 8005178:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f853 	bl	8005226 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d024      	beq.n	80051d4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01f      	beq.n	80051d4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051a2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2202      	movs	r2, #2
 80051aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01f      	beq.n	800521e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051f6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2210      	movs	r2, #16
 80051fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f80e 	bl	800523a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_DMA2D_ConfigLayer+0x20>
 800526c:	2302      	movs	r3, #2
 800526e:	e079      	b.n	8005364 <HAL_DMA2D_ConfigLayer+0x114>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	3318      	adds	r3, #24
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4413      	add	r3, r2
 800528a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800529a:	4b35      	ldr	r3, [pc, #212]	; (8005370 <HAL_DMA2D_ConfigLayer+0x120>)
 800529c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b0a      	cmp	r3, #10
 80052a4:	d003      	beq.n	80052ae <HAL_DMA2D_ConfigLayer+0x5e>
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b09      	cmp	r3, #9
 80052ac:	d107      	bne.n	80052be <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e005      	b.n	80052ca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d120      	bne.n	8005312 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	43db      	mvns	r3, r3
 80052da:	ea02 0103 	and.w	r1, r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b0a      	cmp	r3, #10
 80052f8:	d003      	beq.n	8005302 <HAL_DMA2D_ConfigLayer+0xb2>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d127      	bne.n	8005352 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
 8005310:	e01f      	b.n	8005352 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	43db      	mvns	r3, r3
 800531c:	ea02 0103 	and.w	r1, r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	430a      	orrs	r2, r1
 8005328:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b0a      	cmp	r3, #10
 800533a:	d003      	beq.n	8005344 <HAL_DMA2D_ConfigLayer+0xf4>
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b09      	cmp	r3, #9
 8005342:	d106      	bne.n	8005352 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005350:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	ff03000f 	.word	0xff03000f

08005374 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005374:	b480      	push	{r7}
 8005376:	b08b      	sub	sp, #44	; 0x2c
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	041a      	lsls	r2, r3, #16
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	431a      	orrs	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053ac:	d174      	bne.n	8005498 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053b4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053bc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80053c4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d108      	bne.n	80053e6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	431a      	orrs	r2, r3
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	4313      	orrs	r3, r2
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
 80053e4:	e053      	b.n	800548e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d106      	bne.n	80053fc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
 80053fa:	e048      	b.n	800548e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d111      	bne.n	8005428 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	0cdb      	lsrs	r3, r3, #19
 8005408:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	0a9b      	lsrs	r3, r3, #10
 800540e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	08db      	lsrs	r3, r3, #3
 8005414:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	02db      	lsls	r3, r3, #11
 800541e:	4313      	orrs	r3, r2
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
 8005426:	e032      	b.n	800548e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d117      	bne.n	8005460 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	0fdb      	lsrs	r3, r3, #31
 8005434:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	0cdb      	lsrs	r3, r3, #19
 800543a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	0adb      	lsrs	r3, r3, #11
 8005440:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	08db      	lsrs	r3, r3, #3
 8005446:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	029b      	lsls	r3, r3, #10
 8005450:	431a      	orrs	r2, r3
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	03db      	lsls	r3, r3, #15
 8005456:	4313      	orrs	r3, r2
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	e016      	b.n	800548e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	0f1b      	lsrs	r3, r3, #28
 8005464:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	0d1b      	lsrs	r3, r3, #20
 800546a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	0b1b      	lsrs	r3, r3, #12
 8005470:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	011a      	lsls	r2, r3, #4
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	431a      	orrs	r2, r3
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	4313      	orrs	r3, r2
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005496:	e003      	b.n	80054a0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	60da      	str	r2, [r3, #12]
}
 80054a0:	bf00      	nop
 80054a2:	372c      	adds	r7, #44	; 0x2c
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054be:	2300      	movs	r3, #0
 80054c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	e177      	b.n	80057b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054c8:	2201      	movs	r2, #1
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4013      	ands	r3, r2
 80054da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	f040 8166 	bne.w	80057b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d00b      	beq.n	8005506 <HAL_GPIO_Init+0x5a>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d007      	beq.n	8005506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054fa:	2b11      	cmp	r3, #17
 80054fc:	d003      	beq.n	8005506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b12      	cmp	r3, #18
 8005504:	d130      	bne.n	8005568 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2203      	movs	r2, #3
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800553c:	2201      	movs	r2, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 0201 	and.w	r2, r3, #1
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	2203      	movs	r2, #3
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d003      	beq.n	80055a8 <HAL_GPIO_Init+0xfc>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b12      	cmp	r3, #18
 80055a6:	d123      	bne.n	80055f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	08da      	lsrs	r2, r3, #3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3208      	adds	r2, #8
 80055b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	220f      	movs	r2, #15
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	08da      	lsrs	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3208      	adds	r2, #8
 80055ea:	69b9      	ldr	r1, [r7, #24]
 80055ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	2203      	movs	r2, #3
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0203 	and.w	r2, r3, #3
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4313      	orrs	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80c0 	beq.w	80057b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b65      	ldr	r3, [pc, #404]	; (80057cc <HAL_GPIO_Init+0x320>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	4a64      	ldr	r2, [pc, #400]	; (80057cc <HAL_GPIO_Init+0x320>)
 800563c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005640:	6453      	str	r3, [r2, #68]	; 0x44
 8005642:	4b62      	ldr	r3, [pc, #392]	; (80057cc <HAL_GPIO_Init+0x320>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800564e:	4a60      	ldr	r2, [pc, #384]	; (80057d0 <HAL_GPIO_Init+0x324>)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	089b      	lsrs	r3, r3, #2
 8005654:	3302      	adds	r3, #2
 8005656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	220f      	movs	r2, #15
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a57      	ldr	r2, [pc, #348]	; (80057d4 <HAL_GPIO_Init+0x328>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d037      	beq.n	80056ea <HAL_GPIO_Init+0x23e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a56      	ldr	r2, [pc, #344]	; (80057d8 <HAL_GPIO_Init+0x32c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d031      	beq.n	80056e6 <HAL_GPIO_Init+0x23a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a55      	ldr	r2, [pc, #340]	; (80057dc <HAL_GPIO_Init+0x330>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d02b      	beq.n	80056e2 <HAL_GPIO_Init+0x236>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a54      	ldr	r2, [pc, #336]	; (80057e0 <HAL_GPIO_Init+0x334>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d025      	beq.n	80056de <HAL_GPIO_Init+0x232>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a53      	ldr	r2, [pc, #332]	; (80057e4 <HAL_GPIO_Init+0x338>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01f      	beq.n	80056da <HAL_GPIO_Init+0x22e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a52      	ldr	r2, [pc, #328]	; (80057e8 <HAL_GPIO_Init+0x33c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d019      	beq.n	80056d6 <HAL_GPIO_Init+0x22a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a51      	ldr	r2, [pc, #324]	; (80057ec <HAL_GPIO_Init+0x340>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <HAL_GPIO_Init+0x226>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a50      	ldr	r2, [pc, #320]	; (80057f0 <HAL_GPIO_Init+0x344>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00d      	beq.n	80056ce <HAL_GPIO_Init+0x222>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a4f      	ldr	r2, [pc, #316]	; (80057f4 <HAL_GPIO_Init+0x348>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <HAL_GPIO_Init+0x21e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a4e      	ldr	r2, [pc, #312]	; (80057f8 <HAL_GPIO_Init+0x34c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d101      	bne.n	80056c6 <HAL_GPIO_Init+0x21a>
 80056c2:	2309      	movs	r3, #9
 80056c4:	e012      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056c6:	230a      	movs	r3, #10
 80056c8:	e010      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056ca:	2308      	movs	r3, #8
 80056cc:	e00e      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056ce:	2307      	movs	r3, #7
 80056d0:	e00c      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056d2:	2306      	movs	r3, #6
 80056d4:	e00a      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056d6:	2305      	movs	r3, #5
 80056d8:	e008      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056da:	2304      	movs	r3, #4
 80056dc:	e006      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056de:	2303      	movs	r3, #3
 80056e0:	e004      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e002      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_GPIO_Init+0x240>
 80056ea:	2300      	movs	r3, #0
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	f002 0203 	and.w	r2, r2, #3
 80056f2:	0092      	lsls	r2, r2, #2
 80056f4:	4093      	lsls	r3, r2
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056fc:	4934      	ldr	r1, [pc, #208]	; (80057d0 <HAL_GPIO_Init+0x324>)
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	089b      	lsrs	r3, r3, #2
 8005702:	3302      	adds	r3, #2
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800570a:	4b3c      	ldr	r3, [pc, #240]	; (80057fc <HAL_GPIO_Init+0x350>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	43db      	mvns	r3, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	4013      	ands	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800572e:	4a33      	ldr	r2, [pc, #204]	; (80057fc <HAL_GPIO_Init+0x350>)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005734:	4b31      	ldr	r3, [pc, #196]	; (80057fc <HAL_GPIO_Init+0x350>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	43db      	mvns	r3, r3
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4013      	ands	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005758:	4a28      	ldr	r2, [pc, #160]	; (80057fc <HAL_GPIO_Init+0x350>)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800575e:	4b27      	ldr	r3, [pc, #156]	; (80057fc <HAL_GPIO_Init+0x350>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	43db      	mvns	r3, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4013      	ands	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <HAL_GPIO_Init+0x350>)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005788:	4b1c      	ldr	r3, [pc, #112]	; (80057fc <HAL_GPIO_Init+0x350>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057ac:	4a13      	ldr	r2, [pc, #76]	; (80057fc <HAL_GPIO_Init+0x350>)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	f67f ae84 	bls.w	80054c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057c0:	bf00      	nop
 80057c2:	3724      	adds	r7, #36	; 0x24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40013800 	.word	0x40013800
 80057d4:	40020000 	.word	0x40020000
 80057d8:	40020400 	.word	0x40020400
 80057dc:	40020800 	.word	0x40020800
 80057e0:	40020c00 	.word	0x40020c00
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40021400 	.word	0x40021400
 80057ec:	40021800 	.word	0x40021800
 80057f0:	40021c00 	.word	0x40021c00
 80057f4:	40022000 	.word	0x40022000
 80057f8:	40022400 	.word	0x40022400
 80057fc:	40013c00 	.word	0x40013c00

08005800 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e0d9      	b.n	80059d0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800581c:	2201      	movs	r2, #1
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4013      	ands	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	429a      	cmp	r2, r3
 8005834:	f040 80c9 	bne.w	80059ca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005838:	4a6a      	ldr	r2, [pc, #424]	; (80059e4 <HAL_GPIO_DeInit+0x1e4>)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	089b      	lsrs	r3, r3, #2
 800583e:	3302      	adds	r3, #2
 8005840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005844:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	220f      	movs	r2, #15
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a62      	ldr	r2, [pc, #392]	; (80059e8 <HAL_GPIO_DeInit+0x1e8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d037      	beq.n	80058d2 <HAL_GPIO_DeInit+0xd2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a61      	ldr	r2, [pc, #388]	; (80059ec <HAL_GPIO_DeInit+0x1ec>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d031      	beq.n	80058ce <HAL_GPIO_DeInit+0xce>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a60      	ldr	r2, [pc, #384]	; (80059f0 <HAL_GPIO_DeInit+0x1f0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02b      	beq.n	80058ca <HAL_GPIO_DeInit+0xca>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a5f      	ldr	r2, [pc, #380]	; (80059f4 <HAL_GPIO_DeInit+0x1f4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d025      	beq.n	80058c6 <HAL_GPIO_DeInit+0xc6>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <HAL_GPIO_DeInit+0x1f8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01f      	beq.n	80058c2 <HAL_GPIO_DeInit+0xc2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a5d      	ldr	r2, [pc, #372]	; (80059fc <HAL_GPIO_DeInit+0x1fc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d019      	beq.n	80058be <HAL_GPIO_DeInit+0xbe>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a5c      	ldr	r2, [pc, #368]	; (8005a00 <HAL_GPIO_DeInit+0x200>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <HAL_GPIO_DeInit+0xba>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a5b      	ldr	r2, [pc, #364]	; (8005a04 <HAL_GPIO_DeInit+0x204>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00d      	beq.n	80058b6 <HAL_GPIO_DeInit+0xb6>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a5a      	ldr	r2, [pc, #360]	; (8005a08 <HAL_GPIO_DeInit+0x208>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <HAL_GPIO_DeInit+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a59      	ldr	r2, [pc, #356]	; (8005a0c <HAL_GPIO_DeInit+0x20c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <HAL_GPIO_DeInit+0xae>
 80058aa:	2309      	movs	r3, #9
 80058ac:	e012      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058ae:	230a      	movs	r3, #10
 80058b0:	e010      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058b2:	2308      	movs	r3, #8
 80058b4:	e00e      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058b6:	2307      	movs	r3, #7
 80058b8:	e00c      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058ba:	2306      	movs	r3, #6
 80058bc:	e00a      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058be:	2305      	movs	r3, #5
 80058c0:	e008      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058c2:	2304      	movs	r3, #4
 80058c4:	e006      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058c6:	2303      	movs	r3, #3
 80058c8:	e004      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e002      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <HAL_GPIO_DeInit+0xd4>
 80058d2:	2300      	movs	r3, #0
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	f002 0203 	and.w	r2, r2, #3
 80058da:	0092      	lsls	r2, r2, #2
 80058dc:	4093      	lsls	r3, r2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d132      	bne.n	800594a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80058e4:	4b4a      	ldr	r3, [pc, #296]	; (8005a10 <HAL_GPIO_DeInit+0x210>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	4948      	ldr	r1, [pc, #288]	; (8005a10 <HAL_GPIO_DeInit+0x210>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80058f2:	4b47      	ldr	r3, [pc, #284]	; (8005a10 <HAL_GPIO_DeInit+0x210>)
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	43db      	mvns	r3, r3
 80058fa:	4945      	ldr	r1, [pc, #276]	; (8005a10 <HAL_GPIO_DeInit+0x210>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005900:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <HAL_GPIO_DeInit+0x210>)
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	43db      	mvns	r3, r3
 8005908:	4941      	ldr	r1, [pc, #260]	; (8005a10 <HAL_GPIO_DeInit+0x210>)
 800590a:	4013      	ands	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800590e:	4b40      	ldr	r3, [pc, #256]	; (8005a10 <HAL_GPIO_DeInit+0x210>)
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	43db      	mvns	r3, r3
 8005916:	493e      	ldr	r1, [pc, #248]	; (8005a10 <HAL_GPIO_DeInit+0x210>)
 8005918:	4013      	ands	r3, r2
 800591a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	220f      	movs	r2, #15
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800592c:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <HAL_GPIO_DeInit+0x1e4>)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	089b      	lsrs	r3, r3, #2
 8005932:	3302      	adds	r3, #2
 8005934:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	43da      	mvns	r2, r3
 800593c:	4829      	ldr	r0, [pc, #164]	; (80059e4 <HAL_GPIO_DeInit+0x1e4>)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	089b      	lsrs	r3, r3, #2
 8005942:	400a      	ands	r2, r1
 8005944:	3302      	adds	r3, #2
 8005946:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	2103      	movs	r1, #3
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	401a      	ands	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	08da      	lsrs	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3208      	adds	r2, #8
 8005968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	220f      	movs	r2, #15
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	08d2      	lsrs	r2, r2, #3
 8005980:	4019      	ands	r1, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3208      	adds	r2, #8
 8005986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	2103      	movs	r1, #3
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	401a      	ands	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	2101      	movs	r1, #1
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	401a      	ands	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	2103      	movs	r1, #3
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	43db      	mvns	r3, r3
 80059c4:	401a      	ands	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	3301      	adds	r3, #1
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b0f      	cmp	r3, #15
 80059d4:	f67f af22 	bls.w	800581c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	40013800 	.word	0x40013800
 80059e8:	40020000 	.word	0x40020000
 80059ec:	40020400 	.word	0x40020400
 80059f0:	40020800 	.word	0x40020800
 80059f4:	40020c00 	.word	0x40020c00
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40021400 	.word	0x40021400
 8005a00:	40021800 	.word	0x40021800
 8005a04:	40021c00 	.word	0x40021c00
 8005a08:	40022000 	.word	0x40022000
 8005a0c:	40022400 	.word	0x40022400
 8005a10:	40013c00 	.word	0x40013c00

08005a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	807b      	strh	r3, [r7, #2]
 8005a20:	4613      	mov	r3, r2
 8005a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a24:	787b      	ldrb	r3, [r7, #1]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a2a:	887a      	ldrh	r2, [r7, #2]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a30:	e003      	b.n	8005a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a32:	887b      	ldrh	r3, [r7, #2]
 8005a34:	041a      	lsls	r2, r3, #16
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	619a      	str	r2, [r3, #24]
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f005 fbe9 	bl	800b234 <USB_GetMode>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	f040 80ef 	bne.w	8005c48 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f005 fbcd 	bl	800b20e <USB_ReadInterrupts>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80e5 	beq.w	8005c46 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f005 fbc4 	bl	800b20e <USB_ReadInterrupts>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a90:	d104      	bne.n	8005a9c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a9a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f005 fbb4 	bl	800b20e <USB_ReadInterrupts>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab0:	d104      	bne.n	8005abc <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005aba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f005 fba4 	bl	800b20e <USB_ReadInterrupts>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005acc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ad0:	d104      	bne.n	8005adc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ada:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f005 fb94 	bl	800b20e <USB_ReadInterrupts>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d103      	bne.n	8005af8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2202      	movs	r2, #2
 8005af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f005 fb86 	bl	800b20e <USB_ReadInterrupts>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0c:	d115      	bne.n	8005b3a <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005b16:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d108      	bne.n	8005b3a <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f006 feaf 	bl	800c88c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2101      	movs	r1, #1
 8005b34:	4618      	mov	r0, r3
 8005b36:	f005 fb8b 	bl	800b250 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f005 fb65 	bl	800b20e <USB_ReadInterrupts>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b4e:	d102      	bne.n	8005b56 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 f8ef 	bl	8006d34 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f005 fb57 	bl	800b20e <USB_ReadInterrupts>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d106      	bne.n	8005b78 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f006 fe72 	bl	800c854 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2208      	movs	r2, #8
 8005b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f005 fb46 	bl	800b20e <USB_ReadInterrupts>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b8c:	d138      	bne.n	8005c00 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f005 fb96 	bl	800b2c4 <USB_HC_ReadInterrupt>
 8005b98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e025      	b.n	8005bec <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d018      	beq.n	8005be6 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bca:	d106      	bne.n	8005bda <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f858 	bl	8005c88 <HCD_HC_IN_IRQHandler>
 8005bd8:	e005      	b.n	8005be6 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fc86 	bl	80064f2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	3301      	adds	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d3d4      	bcc.n	8005ba0 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f005 fb02 	bl	800b20e <USB_ReadInterrupts>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d101      	bne.n	8005c18 <HAL_HCD_IRQHandler+0x1d2>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <HAL_HCD_IRQHandler+0x1d4>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d014      	beq.n	8005c48 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0210 	bic.w	r2, r2, #16
 8005c2c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 ffd4 	bl	8006bdc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0210 	orr.w	r2, r2, #16
 8005c42:	619a      	str	r2, [r3, #24]
 8005c44:	e000      	b.n	8005c48 <HAL_HCD_IRQHandler+0x202>
      return;
 8005c46:	bf00      	nop
    }
  }
}
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_HCD_Stop+0x16>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e00d      	b.n	8005c80 <HAL_HCD_Stop+0x32>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f005 fc37 	bl	800b4e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d119      	bne.n	8005cec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2304      	movs	r3, #4
 8005cc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	60d3      	str	r3, [r2, #12]
 8005cea:	e0ce      	b.n	8005e8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d02:	d12c      	bne.n	8005d5e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	461a      	mov	r2, r3
 8005d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	440b      	add	r3, r1
 8005d26:	335d      	adds	r3, #93	; 0x5d
 8005d28:	2207      	movs	r2, #7
 8005d2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d46:	f043 0302 	orr.w	r3, r3, #2
 8005d4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f005 fac5 	bl	800b2e6 <USB_HC_Halt>
 8005d5c:	e095      	b.n	8005e8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d109      	bne.n	8005d88 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d80:	461a      	mov	r2, r3
 8005d82:	2320      	movs	r3, #32
 8005d84:	6093      	str	r3, [r2, #8]
 8005d86:	e080      	b.n	8005e8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d134      	bne.n	8005e08 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	440b      	add	r3, r1
 8005dcc:	335d      	adds	r3, #93	; 0x5d
 8005dce:	2205      	movs	r2, #5
 8005dd0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	461a      	mov	r2, r3
 8005de0:	2310      	movs	r3, #16
 8005de2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df0:	461a      	mov	r2, r3
 8005df2:	2308      	movs	r3, #8
 8005df4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f005 fa70 	bl	800b2e6 <USB_HC_Halt>
 8005e06:	e040      	b.n	8005e8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1e:	d134      	bne.n	8005e8a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e3a:	f043 0302 	orr.w	r3, r3, #2
 8005e3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f005 fa4b 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2310      	movs	r3, #16
 8005e60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	335d      	adds	r3, #93	; 0x5d
 8005e72:	2208      	movs	r2, #8
 8005e74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e82:	461a      	mov	r2, r3
 8005e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e88:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea0:	d122      	bne.n	8005ee8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ebc:	f043 0302 	orr.w	r3, r3, #2
 8005ec0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f005 fa0a 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005ee6:	e300      	b.n	80064ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	f040 80fd 	bne.w	80060fa <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	440b      	add	r3, r1
 8005f16:	3348      	adds	r3, #72	; 0x48
 8005f18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	0159      	lsls	r1, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	440b      	add	r3, r1
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005f2c:	1ad1      	subs	r1, r2, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4403      	add	r3, r0
 8005f3c:	334c      	adds	r3, #76	; 0x4c
 8005f3e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	440b      	add	r3, r1
 8005f4e:	335d      	adds	r3, #93	; 0x5d
 8005f50:	2201      	movs	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	440b      	add	r3, r1
 8005f62:	3358      	adds	r3, #88	; 0x58
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	461a      	mov	r2, r3
 8005f76:	2301      	movs	r3, #1
 8005f78:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	440b      	add	r3, r1
 8005f88:	333f      	adds	r3, #63	; 0x3f
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	440b      	add	r3, r1
 8005f9e:	333f      	adds	r3, #63	; 0x3f
 8005fa0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d121      	bne.n	8005fea <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f005 f988 	bl	800b2e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	6093      	str	r3, [r2, #8]
 8005fe8:	e070      	b.n	80060cc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	440b      	add	r3, r1
 8005ff8:	333f      	adds	r3, #63	; 0x3f
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d12a      	bne.n	8006056 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	440a      	add	r2, r1
 8006016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800601e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	440b      	add	r3, r1
 800602e:	335c      	adds	r3, #92	; 0x5c
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	b2d8      	uxtb	r0, r3
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	440b      	add	r3, r1
 8006046:	335c      	adds	r3, #92	; 0x5c
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	4601      	mov	r1, r0
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f006 fc2a 	bl	800c8a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006054:	e03a      	b.n	80060cc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	440b      	add	r3, r1
 8006064:	333f      	adds	r3, #63	; 0x3f
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d12f      	bne.n	80060cc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	440b      	add	r3, r1
 800607a:	335c      	adds	r3, #92	; 0x5c
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	440b      	add	r3, r1
 800608e:	3350      	adds	r3, #80	; 0x50
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f083 0301 	eor.w	r3, r3, #1
 8006096:	b2d8      	uxtb	r0, r3
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	440b      	add	r3, r1
 80060a6:	3350      	adds	r3, #80	; 0x50
 80060a8:	4602      	mov	r2, r0
 80060aa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	b2d8      	uxtb	r0, r3
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	335c      	adds	r3, #92	; 0x5c
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	4601      	mov	r1, r0
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f006 fbee 	bl	800c8a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	440b      	add	r3, r1
 80060da:	3350      	adds	r3, #80	; 0x50
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f083 0301 	eor.w	r3, r3, #1
 80060e2:	b2d8      	uxtb	r0, r3
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	440b      	add	r3, r1
 80060f2:	3350      	adds	r3, #80	; 0x50
 80060f4:	4602      	mov	r2, r0
 80060f6:	701a      	strb	r2, [r3, #0]
}
 80060f8:	e1f7      	b.n	80064ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	f040 811a 	bne.w	8006346 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	440a      	add	r2, r1
 8006128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612c:	f023 0302 	bic.w	r3, r3, #2
 8006130:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	440b      	add	r3, r1
 8006140:	335d      	adds	r3, #93	; 0x5d
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10a      	bne.n	800615e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	440b      	add	r3, r1
 8006156:	335c      	adds	r3, #92	; 0x5c
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e0d9      	b.n	8006312 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	440b      	add	r3, r1
 800616c:	335d      	adds	r3, #93	; 0x5d
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b05      	cmp	r3, #5
 8006172:	d10a      	bne.n	800618a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	440b      	add	r3, r1
 8006182:	335c      	adds	r3, #92	; 0x5c
 8006184:	2205      	movs	r2, #5
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e0c3      	b.n	8006312 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	440b      	add	r3, r1
 8006198:	335d      	adds	r3, #93	; 0x5d
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b06      	cmp	r3, #6
 800619e:	d00a      	beq.n	80061b6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	440b      	add	r3, r1
 80061ae:	335d      	adds	r3, #93	; 0x5d
 80061b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d156      	bne.n	8006264 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	440b      	add	r3, r1
 80061c4:	3358      	adds	r3, #88	; 0x58
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	1c59      	adds	r1, r3, #1
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4403      	add	r3, r0
 80061d8:	3358      	adds	r3, #88	; 0x58
 80061da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	440b      	add	r3, r1
 80061ea:	3358      	adds	r3, #88	; 0x58
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d914      	bls.n	800621c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	440b      	add	r3, r1
 8006200:	3358      	adds	r3, #88	; 0x58
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	440b      	add	r3, r1
 8006214:	335c      	adds	r3, #92	; 0x5c
 8006216:	2204      	movs	r2, #4
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	e009      	b.n	8006230 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	335c      	adds	r3, #92	; 0x5c
 800622c:	2202      	movs	r2, #2
 800622e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006246:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800624e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	4413      	add	r3, r2
 8006258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e056      	b.n	8006312 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	440b      	add	r3, r1
 8006272:	335d      	adds	r3, #93	; 0x5d
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d123      	bne.n	80062c2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	440b      	add	r3, r1
 8006288:	335c      	adds	r3, #92	; 0x5c
 800628a:	2202      	movs	r2, #2
 800628c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062a4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ba:	461a      	mov	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	e027      	b.n	8006312 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	440b      	add	r3, r1
 80062d0:	335d      	adds	r3, #93	; 0x5d
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b07      	cmp	r3, #7
 80062d6:	d11c      	bne.n	8006312 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	440b      	add	r3, r1
 80062e6:	3358      	adds	r3, #88	; 0x58
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	1c59      	adds	r1, r3, #1
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4403      	add	r3, r0
 80062fa:	3358      	adds	r3, #88	; 0x58
 80062fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	440b      	add	r3, r1
 800630c:	335c      	adds	r3, #92	; 0x5c
 800630e:	2204      	movs	r2, #4
 8006310:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	461a      	mov	r2, r3
 8006320:	2302      	movs	r3, #2
 8006322:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	b2d8      	uxtb	r0, r3
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	440b      	add	r3, r1
 8006336:	335c      	adds	r3, #92	; 0x5c
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	4601      	mov	r1, r0
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f006 fab2 	bl	800c8a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006344:	e0d1      	b.n	80064ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006358:	2b80      	cmp	r3, #128	; 0x80
 800635a:	d13e      	bne.n	80063da <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	3358      	adds	r3, #88	; 0x58
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	4403      	add	r3, r0
 800639e:	3358      	adds	r3, #88	; 0x58
 80063a0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	440b      	add	r3, r1
 80063b0:	335d      	adds	r3, #93	; 0x5d
 80063b2:	2206      	movs	r2, #6
 80063b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f004 ff90 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d2:	461a      	mov	r2, r3
 80063d4:	2380      	movs	r3, #128	; 0x80
 80063d6:	6093      	str	r3, [r2, #8]
}
 80063d8:	e087      	b.n	80064ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d17c      	bne.n	80064ea <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	440b      	add	r3, r1
 80063fe:	333f      	adds	r3, #63	; 0x3f
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d122      	bne.n	800644c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	440b      	add	r3, r1
 8006414:	3358      	adds	r3, #88	; 0x58
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4413      	add	r3, r2
 8006422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	440a      	add	r2, r1
 8006430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006434:	f043 0302 	orr.w	r3, r3, #2
 8006438:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	4611      	mov	r1, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f004 ff4e 	bl	800b2e6 <USB_HC_Halt>
 800644a:	e045      	b.n	80064d8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	440b      	add	r3, r1
 800645a:	333f      	adds	r3, #63	; 0x3f
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	440b      	add	r3, r1
 8006470:	333f      	adds	r3, #63	; 0x3f
 8006472:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006474:	2b02      	cmp	r3, #2
 8006476:	d12f      	bne.n	80064d8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	440b      	add	r3, r1
 8006486:	3358      	adds	r3, #88	; 0x58
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d121      	bne.n	80064d8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	440b      	add	r3, r1
 80064a2:	335d      	adds	r3, #93	; 0x5d
 80064a4:	2203      	movs	r2, #3
 80064a6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c2:	f043 0302 	orr.w	r3, r3, #2
 80064c6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f004 ff07 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e4:	461a      	mov	r2, r3
 80064e6:	2310      	movs	r3, #16
 80064e8:	6093      	str	r3, [r2, #8]
}
 80064ea:	bf00      	nop
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b04      	cmp	r3, #4
 8006520:	d119      	bne.n	8006556 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	4413      	add	r3, r2
 800652a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652e:	461a      	mov	r2, r3
 8006530:	2304      	movs	r3, #4
 8006532:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	440a      	add	r2, r1
 800654a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654e:	f043 0302 	orr.w	r3, r3, #2
 8006552:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006554:	e33e      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b20      	cmp	r3, #32
 800656a:	d141      	bne.n	80065f0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	461a      	mov	r2, r3
 800657a:	2320      	movs	r3, #32
 800657c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	440b      	add	r3, r1
 800658c:	333d      	adds	r3, #61	; 0x3d
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	f040 831f 	bne.w	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	440b      	add	r3, r1
 80065a4:	333d      	adds	r3, #61	; 0x3d
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	440b      	add	r3, r1
 80065b8:	335c      	adds	r3, #92	; 0x5c
 80065ba:	2202      	movs	r2, #2
 80065bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d8:	f043 0302 	orr.w	r3, r3, #2
 80065dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f004 fe7c 	bl	800b2e6 <USB_HC_Halt>
}
 80065ee:	e2f1      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	d13f      	bne.n	8006686 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	440b      	add	r3, r1
 8006614:	335d      	adds	r3, #93	; 0x5d
 8006616:	2204      	movs	r2, #4
 8006618:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	440b      	add	r3, r1
 8006628:	333d      	adds	r3, #61	; 0x3d
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	440b      	add	r3, r1
 800663c:	3358      	adds	r3, #88	; 0x58
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	440a      	add	r2, r1
 8006658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	4611      	mov	r1, r2
 800666c:	4618      	mov	r0, r3
 800666e:	f004 fe3a 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	461a      	mov	r2, r3
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	6093      	str	r3, [r2, #8]
}
 8006684:	e2a6      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	4413      	add	r3, r2
 800668e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669c:	d122      	bne.n	80066e4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b8:	f043 0302 	orr.w	r3, r3, #2
 80066bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f004 fe0c 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066e0:	6093      	str	r3, [r2, #8]
}
 80066e2:	e277      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d135      	bne.n	8006766 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	440b      	add	r3, r1
 8006708:	3358      	adds	r3, #88	; 0x58
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	440a      	add	r2, r1
 8006724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006728:	f043 0302 	orr.w	r3, r3, #2
 800672c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	4611      	mov	r1, r2
 8006738:	4618      	mov	r0, r3
 800673a:	f004 fdd4 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	461a      	mov	r2, r3
 800674c:	2301      	movs	r3, #1
 800674e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	440b      	add	r3, r1
 800675e:	335d      	adds	r3, #93	; 0x5d
 8006760:	2201      	movs	r2, #1
 8006762:	701a      	strb	r2, [r3, #0]
}
 8006764:	e236      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b08      	cmp	r3, #8
 800677a:	d12b      	bne.n	80067d4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	461a      	mov	r2, r3
 800678a:	2308      	movs	r3, #8
 800678c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a8:	f043 0302 	orr.w	r3, r3, #2
 80067ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	4611      	mov	r1, r2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f004 fd94 	bl	800b2e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	440b      	add	r3, r1
 80067cc:	335d      	adds	r3, #93	; 0x5d
 80067ce:	2205      	movs	r2, #5
 80067d0:	701a      	strb	r2, [r3, #0]
}
 80067d2:	e1ff      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d155      	bne.n	8006896 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	440b      	add	r3, r1
 80067f8:	3358      	adds	r3, #88	; 0x58
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	440b      	add	r3, r1
 800680c:	335d      	adds	r3, #93	; 0x5d
 800680e:	2203      	movs	r2, #3
 8006810:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	440b      	add	r3, r1
 8006820:	333d      	adds	r3, #61	; 0x3d
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d114      	bne.n	8006852 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	440b      	add	r3, r1
 8006836:	333c      	adds	r3, #60	; 0x3c
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	440b      	add	r3, r1
 800684c:	333d      	adds	r3, #61	; 0x3d
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	440a      	add	r2, r1
 8006868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686c:	f043 0302 	orr.w	r3, r3, #2
 8006870:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f004 fd32 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	461a      	mov	r2, r3
 8006890:	2310      	movs	r3, #16
 8006892:	6093      	str	r3, [r2, #8]
}
 8006894:	e19e      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4413      	add	r3, r2
 800689e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d12b      	bne.n	8006904 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c6:	f043 0302 	orr.w	r3, r3, #2
 80068ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f004 fd05 	bl	800b2e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	440b      	add	r3, r1
 80068ea:	335d      	adds	r3, #93	; 0x5d
 80068ec:	2206      	movs	r2, #6
 80068ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	461a      	mov	r2, r3
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	6093      	str	r3, [r2, #8]
}
 8006902:	e167      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691a:	d135      	bne.n	8006988 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4413      	add	r3, r2
 8006924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	440a      	add	r2, r1
 8006932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006936:	f043 0302 	orr.w	r3, r3, #2
 800693a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f004 fccd 	bl	800b2e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006958:	461a      	mov	r2, r3
 800695a:	2310      	movs	r3, #16
 800695c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696a:	461a      	mov	r2, r3
 800696c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006970:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	440b      	add	r3, r1
 8006980:	335d      	adds	r3, #93	; 0x5d
 8006982:	2208      	movs	r2, #8
 8006984:	701a      	strb	r2, [r3, #0]
}
 8006986:	e125      	b.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	4413      	add	r3, r2
 8006990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b02      	cmp	r3, #2
 800699c:	f040 811a 	bne.w	8006bd4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ba:	f023 0302 	bic.w	r3, r3, #2
 80069be:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	440b      	add	r3, r1
 80069ce:	335d      	adds	r3, #93	; 0x5d
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d137      	bne.n	8006a46 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	440b      	add	r3, r1
 80069e4:	335c      	adds	r3, #92	; 0x5c
 80069e6:	2201      	movs	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	440b      	add	r3, r1
 80069f8:	333f      	adds	r3, #63	; 0x3f
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d00b      	beq.n	8006a18 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	440b      	add	r3, r1
 8006a0e:	333f      	adds	r3, #63	; 0x3f
 8006a10:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	f040 80c5 	bne.w	8006ba2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	440b      	add	r3, r1
 8006a26:	3351      	adds	r3, #81	; 0x51
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	f083 0301 	eor.w	r3, r3, #1
 8006a2e:	b2d8      	uxtb	r0, r3
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	440b      	add	r3, r1
 8006a3e:	3351      	adds	r3, #81	; 0x51
 8006a40:	4602      	mov	r2, r0
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e0ad      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	440b      	add	r3, r1
 8006a54:	335d      	adds	r3, #93	; 0x5d
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d10a      	bne.n	8006a72 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	440b      	add	r3, r1
 8006a6a:	335c      	adds	r3, #92	; 0x5c
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	e097      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	440b      	add	r3, r1
 8006a80:	335d      	adds	r3, #93	; 0x5d
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d10a      	bne.n	8006a9e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	440b      	add	r3, r1
 8006a96:	335c      	adds	r3, #92	; 0x5c
 8006a98:	2202      	movs	r2, #2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	e081      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	440b      	add	r3, r1
 8006aac:	335d      	adds	r3, #93	; 0x5d
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d10a      	bne.n	8006aca <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	440b      	add	r3, r1
 8006ac2:	335c      	adds	r3, #92	; 0x5c
 8006ac4:	2205      	movs	r2, #5
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	e06b      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	440b      	add	r3, r1
 8006ad8:	335d      	adds	r3, #93	; 0x5d
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b06      	cmp	r3, #6
 8006ade:	d00a      	beq.n	8006af6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	440b      	add	r3, r1
 8006aee:	335d      	adds	r3, #93	; 0x5d
 8006af0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d155      	bne.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	440b      	add	r3, r1
 8006b04:	3358      	adds	r3, #88	; 0x58
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	1c59      	adds	r1, r3, #1
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4403      	add	r3, r0
 8006b18:	3358      	adds	r3, #88	; 0x58
 8006b1a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	440b      	add	r3, r1
 8006b2a:	3358      	adds	r3, #88	; 0x58
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d914      	bls.n	8006b5c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	440b      	add	r3, r1
 8006b40:	3358      	adds	r3, #88	; 0x58
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	440b      	add	r3, r1
 8006b54:	335c      	adds	r3, #92	; 0x5c
 8006b56:	2204      	movs	r2, #4
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	e009      	b.n	8006b70 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	440b      	add	r3, r1
 8006b6a:	335c      	adds	r3, #92	; 0x5c
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b86:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b8e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	b2d8      	uxtb	r0, r3
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	440b      	add	r3, r1
 8006bc6:	335c      	adds	r3, #92	; 0x5c
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4601      	mov	r1, r0
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f005 fe6a 	bl	800c8a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006bd4:	bf00      	nop
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	; 0x28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	0c5b      	lsrs	r3, r3, #17
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c10:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d003      	beq.n	8006c20 <HCD_RXQLVL_IRQHandler+0x44>
 8006c18:	2b05      	cmp	r3, #5
 8006c1a:	f000 8082 	beq.w	8006d22 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006c1e:	e083      	b.n	8006d28 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d07f      	beq.n	8006d26 <HCD_RXQLVL_IRQHandler+0x14a>
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	440b      	add	r3, r1
 8006c34:	3344      	adds	r3, #68	; 0x44
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d074      	beq.n	8006d26 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3344      	adds	r3, #68	; 0x44
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	b292      	uxth	r2, r2
 8006c56:	4619      	mov	r1, r3
 8006c58:	f004 fab0 	bl	800b1bc <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	440b      	add	r3, r1
 8006c6a:	3344      	adds	r3, #68	; 0x44
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	18d1      	adds	r1, r2, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	4403      	add	r3, r0
 8006c80:	3344      	adds	r3, #68	; 0x44
 8006c82:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	440b      	add	r3, r1
 8006c92:	334c      	adds	r3, #76	; 0x4c
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	18d1      	adds	r1, r2, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	4403      	add	r3, r0
 8006ca8:	334c      	adds	r3, #76	; 0x4c
 8006caa:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <HCD_RXQLVL_IRQHandler+0x154>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d031      	beq.n	8006d26 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cd8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	461a      	mov	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	440b      	add	r3, r1
 8006d02:	3350      	adds	r3, #80	; 0x50
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f083 0301 	eor.w	r3, r3, #1
 8006d0a:	b2d8      	uxtb	r0, r3
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	440b      	add	r3, r1
 8006d1a:	3350      	adds	r3, #80	; 0x50
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	701a      	strb	r2, [r3, #0]
      break;
 8006d20:	e001      	b.n	8006d26 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006d26:	bf00      	nop
  }
}
 8006d28:	bf00      	nop
 8006d2a:	3728      	adds	r7, #40	; 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	1ff80000 	.word	0x1ff80000

08006d34 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006d60:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d10b      	bne.n	8006d84 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d102      	bne.n	8006d7c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f005 fd7a 	bl	800c870 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f043 0302 	orr.w	r3, r3, #2
 8006d82:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b08      	cmp	r3, #8
 8006d8c:	d132      	bne.n	8006df4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f043 0308 	orr.w	r3, r3, #8
 8006d94:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d126      	bne.n	8006dee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d113      	bne.n	8006dd0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006dae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006db2:	d106      	bne.n	8006dc2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2102      	movs	r1, #2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f004 fa48 	bl	800b250 <USB_InitFSLSPClkSel>
 8006dc0:	e011      	b.n	8006de6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f004 fa41 	bl	800b250 <USB_InitFSLSPClkSel>
 8006dce:	e00a      	b.n	8006de6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d106      	bne.n	8006de6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dde:	461a      	mov	r2, r3
 8006de0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006de4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f005 fd70 	bl	800c8cc <HAL_HCD_PortEnabled_Callback>
 8006dec:	e002      	b.n	8006df4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f005 fd7a 	bl	800c8e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d103      	bne.n	8006e06 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f043 0320 	orr.w	r3, r3, #32
 8006e04:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6013      	str	r3, [r2, #0]
}
 8006e12:	bf00      	nop
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e11f      	b.n	800706e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fa f872 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2224      	movs	r2, #36	; 0x24
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0201 	bic.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e80:	f002 f804 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 8006e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4a7b      	ldr	r2, [pc, #492]	; (8007078 <HAL_I2C_Init+0x25c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d807      	bhi.n	8006ea0 <HAL_I2C_Init+0x84>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a7a      	ldr	r2, [pc, #488]	; (800707c <HAL_I2C_Init+0x260>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	bf94      	ite	ls
 8006e98:	2301      	movls	r3, #1
 8006e9a:	2300      	movhi	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	e006      	b.n	8006eae <HAL_I2C_Init+0x92>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a77      	ldr	r2, [pc, #476]	; (8007080 <HAL_I2C_Init+0x264>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bf94      	ite	ls
 8006ea8:	2301      	movls	r3, #1
 8006eaa:	2300      	movhi	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0db      	b.n	800706e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4a72      	ldr	r2, [pc, #456]	; (8007084 <HAL_I2C_Init+0x268>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	0c9b      	lsrs	r3, r3, #18
 8006ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4a64      	ldr	r2, [pc, #400]	; (8007078 <HAL_I2C_Init+0x25c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d802      	bhi.n	8006ef0 <HAL_I2C_Init+0xd4>
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3301      	adds	r3, #1
 8006eee:	e009      	b.n	8006f04 <HAL_I2C_Init+0xe8>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
 8006efa:	4a63      	ldr	r2, [pc, #396]	; (8007088 <HAL_I2C_Init+0x26c>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	099b      	lsrs	r3, r3, #6
 8006f02:	3301      	adds	r3, #1
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	4956      	ldr	r1, [pc, #344]	; (8007078 <HAL_I2C_Init+0x25c>)
 8006f20:	428b      	cmp	r3, r1
 8006f22:	d80d      	bhi.n	8006f40 <HAL_I2C_Init+0x124>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	1e59      	subs	r1, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f32:	3301      	adds	r3, #1
 8006f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	bf38      	it	cc
 8006f3c:	2304      	movcc	r3, #4
 8006f3e:	e04f      	b.n	8006fe0 <HAL_I2C_Init+0x1c4>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d111      	bne.n	8006f6c <HAL_I2C_Init+0x150>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	1e58      	subs	r0, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6859      	ldr	r1, [r3, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	440b      	add	r3, r1
 8006f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	bf0c      	ite	eq
 8006f64:	2301      	moveq	r3, #1
 8006f66:	2300      	movne	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e012      	b.n	8006f92 <HAL_I2C_Init+0x176>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1e58      	subs	r0, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	0099      	lsls	r1, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f82:	3301      	adds	r3, #1
 8006f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <HAL_I2C_Init+0x17e>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e022      	b.n	8006fe0 <HAL_I2C_Init+0x1c4>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_I2C_Init+0x1a4>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1e58      	subs	r0, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	440b      	add	r3, r1
 8006fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbe:	e00f      	b.n	8006fe0 <HAL_I2C_Init+0x1c4>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	1e58      	subs	r0, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	0099      	lsls	r1, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	6809      	ldr	r1, [r1, #0]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69da      	ldr	r2, [r3, #28]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800700e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6911      	ldr	r1, [r2, #16]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68d2      	ldr	r2, [r2, #12]
 800701a:	4311      	orrs	r1, r2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	430b      	orrs	r3, r1
 8007022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0201 	orr.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	000186a0 	.word	0x000186a0
 800707c:	001e847f 	.word	0x001e847f
 8007080:	003d08ff 	.word	0x003d08ff
 8007084:	431bde83 	.word	0x431bde83
 8007088:	10624dd3 	.word	0x10624dd3

0800708c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e021      	b.n	80070e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2224      	movs	r2, #36	; 0x24
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7f9 ffa2 	bl	8001000 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	4608      	mov	r0, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	461a      	mov	r2, r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	817b      	strh	r3, [r7, #10]
 80070fe:	460b      	mov	r3, r1
 8007100:	813b      	strh	r3, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007106:	f7fd fb4d 	bl	80047a4 <HAL_GetTick>
 800710a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b20      	cmp	r3, #32
 8007116:	f040 80d9 	bne.w	80072cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	2319      	movs	r3, #25
 8007120:	2201      	movs	r2, #1
 8007122:	496d      	ldr	r1, [pc, #436]	; (80072d8 <HAL_I2C_Mem_Write+0x1ec>)
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fc8d 	bl	8007a44 <I2C_WaitOnFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007130:	2302      	movs	r3, #2
 8007132:	e0cc      	b.n	80072ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_I2C_Mem_Write+0x56>
 800713e:	2302      	movs	r3, #2
 8007140:	e0c5      	b.n	80072ce <HAL_I2C_Mem_Write+0x1e2>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b01      	cmp	r3, #1
 8007156:	d007      	beq.n	8007168 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2221      	movs	r2, #33	; 0x21
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2240      	movs	r2, #64	; 0x40
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a3a      	ldr	r2, [r7, #32]
 8007192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4a4d      	ldr	r2, [pc, #308]	; (80072dc <HAL_I2C_Mem_Write+0x1f0>)
 80071a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071aa:	88f8      	ldrh	r0, [r7, #6]
 80071ac:	893a      	ldrh	r2, [r7, #8]
 80071ae:	8979      	ldrh	r1, [r7, #10]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	4603      	mov	r3, r0
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fac4 	bl	8007748 <I2C_RequestMemoryWrite>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d052      	beq.n	800726c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e081      	b.n	80072ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fd0e 	bl	8007bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00d      	beq.n	80071f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d107      	bne.n	80071f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e06b      	b.n	80072ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007210:	3b01      	subs	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b04      	cmp	r3, #4
 8007232:	d11b      	bne.n	800726c <HAL_I2C_Mem_Write+0x180>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007238:	2b00      	cmp	r3, #0
 800723a:	d017      	beq.n	800726c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1aa      	bne.n	80071ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fcfa 	bl	8007c72 <I2C_WaitOnBTFFlagUntilTimeout>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00d      	beq.n	80072a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	2b04      	cmp	r3, #4
 800728a:	d107      	bne.n	800729c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e016      	b.n	80072ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e000      	b.n	80072ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80072cc:	2302      	movs	r3, #2
  }
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	00100002 	.word	0x00100002
 80072dc:	ffff0000 	.word	0xffff0000

080072e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	; 0x30
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	4608      	mov	r0, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	461a      	mov	r2, r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	817b      	strh	r3, [r7, #10]
 80072f2:	460b      	mov	r3, r1
 80072f4:	813b      	strh	r3, [r7, #8]
 80072f6:	4613      	mov	r3, r2
 80072f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072fa:	f7fd fa53 	bl	80047a4 <HAL_GetTick>
 80072fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b20      	cmp	r3, #32
 800730a:	f040 8208 	bne.w	800771e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	2319      	movs	r3, #25
 8007314:	2201      	movs	r2, #1
 8007316:	497b      	ldr	r1, [pc, #492]	; (8007504 <HAL_I2C_Mem_Read+0x224>)
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fb93 	bl	8007a44 <I2C_WaitOnFlagUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
 8007326:	e1fb      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_I2C_Mem_Read+0x56>
 8007332:	2302      	movs	r3, #2
 8007334:	e1f4      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d007      	beq.n	800735c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0201 	orr.w	r2, r2, #1
 800735a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800736a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2222      	movs	r2, #34	; 0x22
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2240      	movs	r2, #64	; 0x40
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800738c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4a5b      	ldr	r2, [pc, #364]	; (8007508 <HAL_I2C_Mem_Read+0x228>)
 800739c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800739e:	88f8      	ldrh	r0, [r7, #6]
 80073a0:	893a      	ldrh	r2, [r7, #8]
 80073a2:	8979      	ldrh	r1, [r7, #10]
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	4603      	mov	r3, r0
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 fa60 	bl	8007874 <I2C_RequestMemoryRead>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e1b0      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d113      	bne.n	80073ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c6:	2300      	movs	r3, #0
 80073c8:	623b      	str	r3, [r7, #32]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	623b      	str	r3, [r7, #32]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	623b      	str	r3, [r7, #32]
 80073da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	e184      	b.n	80076f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d11b      	bne.n	800742e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	e164      	b.n	80076f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007432:	2b02      	cmp	r3, #2
 8007434:	d11b      	bne.n	800746e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007444:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007456:	2300      	movs	r3, #0
 8007458:	61bb      	str	r3, [r7, #24]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	e144      	b.n	80076f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007484:	e138      	b.n	80076f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800748a:	2b03      	cmp	r3, #3
 800748c:	f200 80f1 	bhi.w	8007672 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007494:	2b01      	cmp	r3, #1
 8007496:	d123      	bne.n	80074e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 fc29 	bl	8007cf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e139      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691a      	ldr	r2, [r3, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074de:	e10b      	b.n	80076f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d14e      	bne.n	8007586 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	2200      	movs	r2, #0
 80074f0:	4906      	ldr	r1, [pc, #24]	; (800750c <HAL_I2C_Mem_Read+0x22c>)
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 faa6 	bl	8007a44 <I2C_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d008      	beq.n	8007510 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e10e      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
 8007502:	bf00      	nop
 8007504:	00100002 	.word	0x00100002
 8007508:	ffff0000 	.word	0xffff0000
 800750c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007584:	e0b8      	b.n	80076f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	2200      	movs	r2, #0
 800758e:	4966      	ldr	r1, [pc, #408]	; (8007728 <HAL_I2C_Mem_Read+0x448>)
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fa57 	bl	8007a44 <I2C_WaitOnFlagUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e0bf      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	2200      	movs	r2, #0
 80075ea:	494f      	ldr	r1, [pc, #316]	; (8007728 <HAL_I2C_Mem_Read+0x448>)
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 fa29 	bl	8007a44 <I2C_WaitOnFlagUntilTimeout>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e091      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007670:	e042      	b.n	80076f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fb3c 	bl	8007cf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e04c      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d118      	bne.n	80076f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f47f aec2 	bne.w	8007486 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e000      	b.n	8007720 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800771e:	2302      	movs	r3, #2
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3728      	adds	r7, #40	; 0x28
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	00010004 	.word	0x00010004

0800772c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773a:	b2db      	uxtb	r3, r3
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	4608      	mov	r0, r1
 8007752:	4611      	mov	r1, r2
 8007754:	461a      	mov	r2, r3
 8007756:	4603      	mov	r3, r0
 8007758:	817b      	strh	r3, [r7, #10]
 800775a:	460b      	mov	r3, r1
 800775c:	813b      	strh	r3, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007770:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	2200      	movs	r2, #0
 800777a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 f960 	bl	8007a44 <I2C_WaitOnFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007798:	d103      	bne.n	80077a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e05f      	b.n	8007866 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077a6:	897b      	ldrh	r3, [r7, #10]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	6a3a      	ldr	r2, [r7, #32]
 80077ba:	492d      	ldr	r1, [pc, #180]	; (8007870 <I2C_RequestMemoryWrite+0x128>)
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f998 	bl	8007af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e04c      	b.n	8007866 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e4:	6a39      	ldr	r1, [r7, #32]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fa02 	bl	8007bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00d      	beq.n	800780e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d107      	bne.n	800780a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007808:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e02b      	b.n	8007866 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d105      	bne.n	8007820 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007814:	893b      	ldrh	r3, [r7, #8]
 8007816:	b2da      	uxtb	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	611a      	str	r2, [r3, #16]
 800781e:	e021      	b.n	8007864 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007820:	893b      	ldrh	r3, [r7, #8]
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	b29b      	uxth	r3, r3
 8007826:	b2da      	uxtb	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800782e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007830:	6a39      	ldr	r1, [r7, #32]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f9dc 	bl	8007bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00d      	beq.n	800785a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	2b04      	cmp	r3, #4
 8007844:	d107      	bne.n	8007856 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007854:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e005      	b.n	8007866 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800785a:	893b      	ldrh	r3, [r7, #8]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	00010002 	.word	0x00010002

08007874 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af02      	add	r7, sp, #8
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	4608      	mov	r0, r1
 800787e:	4611      	mov	r1, r2
 8007880:	461a      	mov	r2, r3
 8007882:	4603      	mov	r3, r0
 8007884:	817b      	strh	r3, [r7, #10]
 8007886:	460b      	mov	r3, r1
 8007888:	813b      	strh	r3, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800789c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f8c2 	bl	8007a44 <I2C_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d4:	d103      	bne.n	80078de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e0aa      	b.n	8007a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078e2:	897b      	ldrh	r3, [r7, #10]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	4952      	ldr	r1, [pc, #328]	; (8007a40 <I2C_RequestMemoryRead+0x1cc>)
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f8fa 	bl	8007af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e097      	b.n	8007a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800791e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007920:	6a39      	ldr	r1, [r7, #32]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f964 	bl	8007bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	2b04      	cmp	r3, #4
 8007934:	d107      	bne.n	8007946 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007944:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e076      	b.n	8007a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d105      	bne.n	800795c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007950:	893b      	ldrh	r3, [r7, #8]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	611a      	str	r2, [r3, #16]
 800795a:	e021      	b.n	80079a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800795c:	893b      	ldrh	r3, [r7, #8]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	b2da      	uxtb	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800796a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796c:	6a39      	ldr	r1, [r7, #32]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f93e 	bl	8007bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00d      	beq.n	8007996 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	2b04      	cmp	r3, #4
 8007980:	d107      	bne.n	8007992 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007990:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e050      	b.n	8007a38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007996:	893b      	ldrh	r3, [r7, #8]
 8007998:	b2da      	uxtb	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a2:	6a39      	ldr	r1, [r7, #32]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 f923 	bl	8007bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00d      	beq.n	80079cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d107      	bne.n	80079c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e035      	b.n	8007a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f82b 	bl	8007a44 <I2C_WaitOnFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00d      	beq.n	8007a10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a02:	d103      	bne.n	8007a0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e013      	b.n	8007a38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a10:	897b      	ldrh	r3, [r7, #10]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f043 0301 	orr.w	r3, r3, #1
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	6a3a      	ldr	r2, [r7, #32]
 8007a24:	4906      	ldr	r1, [pc, #24]	; (8007a40 <I2C_RequestMemoryRead+0x1cc>)
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f863 	bl	8007af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	00010002 	.word	0x00010002

08007a44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4613      	mov	r3, r2
 8007a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a54:	e025      	b.n	8007aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d021      	beq.n	8007aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5e:	f7fc fea1 	bl	80047a4 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d302      	bcc.n	8007a74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d116      	bne.n	8007aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f043 0220 	orr.w	r2, r3, #32
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e023      	b.n	8007aea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	0c1b      	lsrs	r3, r3, #16
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d10d      	bne.n	8007ac8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	43da      	mvns	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf0c      	ite	eq
 8007abe:	2301      	moveq	r3, #1
 8007ac0:	2300      	movne	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	e00c      	b.n	8007ae2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	43da      	mvns	r2, r3
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bf0c      	ite	eq
 8007ada:	2301      	moveq	r3, #1
 8007adc:	2300      	movne	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d0b6      	beq.n	8007a56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b00:	e051      	b.n	8007ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b10:	d123      	bne.n	8007b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	f043 0204 	orr.w	r2, r3, #4
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e046      	b.n	8007be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d021      	beq.n	8007ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b62:	f7fc fe1f 	bl	80047a4 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d302      	bcc.n	8007b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d116      	bne.n	8007ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f043 0220 	orr.w	r2, r3, #32
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e020      	b.n	8007be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	0c1b      	lsrs	r3, r3, #16
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d10c      	bne.n	8007bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	43da      	mvns	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf14      	ite	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	2300      	moveq	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	e00b      	b.n	8007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	43da      	mvns	r2, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bf14      	ite	ne
 8007bdc:	2301      	movne	r3, #1
 8007bde:	2300      	moveq	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d18d      	bne.n	8007b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bfc:	e02d      	b.n	8007c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 f8ce 	bl	8007da0 <I2C_IsAcknowledgeFailed>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e02d      	b.n	8007c6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c14:	d021      	beq.n	8007c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c16:	f7fc fdc5 	bl	80047a4 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d302      	bcc.n	8007c2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d116      	bne.n	8007c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	f043 0220 	orr.w	r2, r3, #32
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e007      	b.n	8007c6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c64:	2b80      	cmp	r3, #128	; 0x80
 8007c66:	d1ca      	bne.n	8007bfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c7e:	e02d      	b.n	8007cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 f88d 	bl	8007da0 <I2C_IsAcknowledgeFailed>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e02d      	b.n	8007cec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c96:	d021      	beq.n	8007cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c98:	f7fc fd84 	bl	80047a4 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d302      	bcc.n	8007cae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d116      	bne.n	8007cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	f043 0220 	orr.w	r2, r3, #32
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e007      	b.n	8007cec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d1ca      	bne.n	8007c80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d00:	e042      	b.n	8007d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b10      	cmp	r3, #16
 8007d0e:	d119      	bne.n	8007d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0210 	mvn.w	r2, #16
 8007d18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e029      	b.n	8007d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d44:	f7fc fd2e 	bl	80047a4 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d302      	bcc.n	8007d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d116      	bne.n	8007d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e007      	b.n	8007d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d1b5      	bne.n	8007d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db6:	d11b      	bne.n	8007df0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ddc:	f043 0204 	orr.w	r2, r3, #4
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d129      	bne.n	8007e68 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2224      	movs	r2, #36	; 0x24
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0210 	bic.w	r2, r2, #16
 8007e3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	e000      	b.n	8007e6a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007e68:	2302      	movs	r3, #2
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d12a      	bne.n	8007ee6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2224      	movs	r2, #36	; 0x24
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007eb0:	89fb      	ldrh	r3, [r7, #14]
 8007eb2:	f023 030f 	bic.w	r3, r3, #15
 8007eb6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	89fb      	ldrh	r3, [r7, #14]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	89fa      	ldrh	r2, [r7, #14]
 8007ec8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e000      	b.n	8007ee8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007ee6:	2302      	movs	r3, #2
  }
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e0bf      	b.n	8008086 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7f9 fa46 	bl	80013ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007f36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6999      	ldr	r1, [r3, #24]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6899      	ldr	r1, [r3, #8]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4b4a      	ldr	r3, [pc, #296]	; (8008090 <HAL_LTDC_Init+0x19c>)
 8007f68:	400b      	ands	r3, r1
 8007f6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	041b      	lsls	r3, r3, #16
 8007f72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6899      	ldr	r1, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68d9      	ldr	r1, [r3, #12]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4b3e      	ldr	r3, [pc, #248]	; (8008090 <HAL_LTDC_Init+0x19c>)
 8007f96:	400b      	ands	r3, r1
 8007f98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68d9      	ldr	r1, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1a      	ldr	r2, [r3, #32]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6919      	ldr	r1, [r3, #16]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	4b33      	ldr	r3, [pc, #204]	; (8008090 <HAL_LTDC_Init+0x19c>)
 8007fc4:	400b      	ands	r3, r1
 8007fc6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6919      	ldr	r1, [r3, #16]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6959      	ldr	r1, [r3, #20]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4b27      	ldr	r3, [pc, #156]	; (8008090 <HAL_LTDC_Init+0x19c>)
 8007ff2:	400b      	ands	r3, r1
 8007ff4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffa:	041b      	lsls	r3, r3, #16
 8007ffc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6959      	ldr	r1, [r3, #20]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	431a      	orrs	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008024:	041b      	lsls	r3, r3, #16
 8008026:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4313      	orrs	r3, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0206 	orr.w	r2, r2, #6
 8008062:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	f000f800 	.word	0xf000f800

08008094 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d023      	beq.n	80080fe <HAL_LTDC_IRQHandler+0x6a>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01e      	beq.n	80080fe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0204 	bic.w	r2, r2, #4
 80080ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2204      	movs	r2, #4
 80080d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080de:	f043 0201 	orr.w	r2, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2204      	movs	r2, #4
 80080ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f86f 	bl	80081dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d023      	beq.n	8008150 <HAL_LTDC_IRQHandler+0xbc>
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01e      	beq.n	8008150 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0202 	bic.w	r2, r2, #2
 8008120:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2202      	movs	r2, #2
 8008128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008130:	f043 0202 	orr.w	r2, r3, #2
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2204      	movs	r2, #4
 800813e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f846 	bl	80081dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01b      	beq.n	8008192 <HAL_LTDC_IRQHandler+0xfe>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d016      	beq.n	8008192 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0201 	bic.w	r2, r2, #1
 8008172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2201      	movs	r2, #1
 800817a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f82f 	bl	80081f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01b      	beq.n	80081d4 <HAL_LTDC_IRQHandler+0x140>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f003 0308 	and.w	r3, r3, #8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d016      	beq.n	80081d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0208 	bic.w	r2, r2, #8
 80081b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2208      	movs	r2, #8
 80081bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f818 	bl	8008204 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008218:	b5b0      	push	{r4, r5, r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_LTDC_ConfigLayer+0x1a>
 800822e:	2302      	movs	r3, #2
 8008230:	e02c      	b.n	800828c <HAL_LTDC_ConfigLayer+0x74>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2202      	movs	r2, #2
 800823e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2134      	movs	r1, #52	; 0x34
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	4413      	add	r3, r2
 800824e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	4614      	mov	r4, r2
 8008256:	461d      	mov	r5, r3
 8008258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800825a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800825c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800825e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f83b 	bl	80082e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2201      	movs	r2, #1
 8008278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bdb0      	pop	{r4, r5, r7, pc}

08008294 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_LTDC_EnableDither+0x16>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e016      	b.n	80082d8 <HAL_LTDC_EnableDither+0x44>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2202      	movs	r2, #2
 80082b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80082ba:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <HAL_LTDC_EnableDither+0x50>)
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	4a09      	ldr	r2, [pc, #36]	; (80082e4 <HAL_LTDC_EnableDither+0x50>)
 80082c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082c4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	40016800 	.word	0x40016800

080082e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b089      	sub	sp, #36	; 0x24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	0c1b      	lsrs	r3, r3, #16
 8008300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008304:	4413      	add	r3, r2
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	01db      	lsls	r3, r3, #7
 8008314:	4413      	add	r3, r2
 8008316:	3384      	adds	r3, #132	; 0x84
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	4611      	mov	r1, r2
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	01d2      	lsls	r2, r2, #7
 8008324:	440a      	add	r2, r1
 8008326:	3284      	adds	r2, #132	; 0x84
 8008328:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800832c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800833e:	4413      	add	r3, r2
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4619      	mov	r1, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	01db      	lsls	r3, r3, #7
 800834c:	440b      	add	r3, r1
 800834e:	3384      	adds	r3, #132	; 0x84
 8008350:	4619      	mov	r1, r3
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4313      	orrs	r3, r2
 8008356:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008366:	4413      	add	r3, r2
 8008368:	041b      	lsls	r3, r3, #16
 800836a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	01db      	lsls	r3, r3, #7
 8008376:	4413      	add	r3, r2
 8008378:	3384      	adds	r3, #132	; 0x84
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	4611      	mov	r1, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	01d2      	lsls	r2, r2, #7
 8008386:	440a      	add	r2, r1
 8008388:	3284      	adds	r2, #132	; 0x84
 800838a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800838e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800839e:	4413      	add	r3, r2
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4619      	mov	r1, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	01db      	lsls	r3, r3, #7
 80083ac:	440b      	add	r3, r1
 80083ae:	3384      	adds	r3, #132	; 0x84
 80083b0:	4619      	mov	r1, r3
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	01db      	lsls	r3, r3, #7
 80083c2:	4413      	add	r3, r2
 80083c4:	3384      	adds	r3, #132	; 0x84
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	6812      	ldr	r2, [r2, #0]
 80083cc:	4611      	mov	r1, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	01d2      	lsls	r2, r2, #7
 80083d2:	440a      	add	r2, r1
 80083d4:	3284      	adds	r2, #132	; 0x84
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	01db      	lsls	r3, r3, #7
 80083e6:	4413      	add	r3, r2
 80083e8:	3384      	adds	r3, #132	; 0x84
 80083ea:	461a      	mov	r2, r3
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008402:	041b      	lsls	r3, r3, #16
 8008404:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	061b      	lsls	r3, r3, #24
 800840c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	01db      	lsls	r3, r3, #7
 8008418:	4413      	add	r3, r2
 800841a:	3384      	adds	r3, #132	; 0x84
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	01db      	lsls	r3, r3, #7
 8008428:	4413      	add	r3, r2
 800842a:	3384      	adds	r3, #132	; 0x84
 800842c:	461a      	mov	r2, r3
 800842e:	2300      	movs	r3, #0
 8008430:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008438:	461a      	mov	r2, r3
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	431a      	orrs	r2, r3
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	431a      	orrs	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4619      	mov	r1, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	01db      	lsls	r3, r3, #7
 800844c:	440b      	add	r3, r1
 800844e:	3384      	adds	r3, #132	; 0x84
 8008450:	4619      	mov	r1, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	01db      	lsls	r3, r3, #7
 8008462:	4413      	add	r3, r2
 8008464:	3384      	adds	r3, #132	; 0x84
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	6812      	ldr	r2, [r2, #0]
 800846c:	4611      	mov	r1, r2
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	01d2      	lsls	r2, r2, #7
 8008472:	440a      	add	r2, r1
 8008474:	3284      	adds	r2, #132	; 0x84
 8008476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800847a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	01db      	lsls	r3, r3, #7
 8008486:	4413      	add	r3, r2
 8008488:	3384      	adds	r3, #132	; 0x84
 800848a:	461a      	mov	r2, r3
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	01db      	lsls	r3, r3, #7
 800849c:	4413      	add	r3, r2
 800849e:	3384      	adds	r3, #132	; 0x84
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	6812      	ldr	r2, [r2, #0]
 80084a6:	4611      	mov	r1, r2
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	01d2      	lsls	r2, r2, #7
 80084ac:	440a      	add	r2, r1
 80084ae:	3284      	adds	r2, #132	; 0x84
 80084b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80084b4:	f023 0307 	bic.w	r3, r3, #7
 80084b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	6809      	ldr	r1, [r1, #0]
 80084c6:	4608      	mov	r0, r1
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	01c9      	lsls	r1, r1, #7
 80084cc:	4401      	add	r1, r0
 80084ce:	3184      	adds	r1, #132	; 0x84
 80084d0:	4313      	orrs	r3, r2
 80084d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	01db      	lsls	r3, r3, #7
 80084de:	4413      	add	r3, r2
 80084e0:	3384      	adds	r3, #132	; 0x84
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	01db      	lsls	r3, r3, #7
 80084ee:	4413      	add	r3, r2
 80084f0:	3384      	adds	r3, #132	; 0x84
 80084f2:	461a      	mov	r2, r3
 80084f4:	2300      	movs	r3, #0
 80084f6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	01db      	lsls	r3, r3, #7
 8008502:	4413      	add	r3, r2
 8008504:	3384      	adds	r3, #132	; 0x84
 8008506:	461a      	mov	r2, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008516:	2304      	movs	r3, #4
 8008518:	61fb      	str	r3, [r7, #28]
 800851a:	e01b      	b.n	8008554 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d102      	bne.n	800852a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008524:	2303      	movs	r3, #3
 8008526:	61fb      	str	r3, [r7, #28]
 8008528:	e014      	b.n	8008554 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b04      	cmp	r3, #4
 8008530:	d00b      	beq.n	800854a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008536:	2b02      	cmp	r3, #2
 8008538:	d007      	beq.n	800854a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800853e:	2b03      	cmp	r3, #3
 8008540:	d003      	beq.n	800854a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008546:	2b07      	cmp	r3, #7
 8008548:	d102      	bne.n	8008550 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800854a:	2302      	movs	r3, #2
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	e001      	b.n	8008554 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008550:	2301      	movs	r3, #1
 8008552:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	461a      	mov	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	01db      	lsls	r3, r3, #7
 800855e:	4413      	add	r3, r2
 8008560:	3384      	adds	r3, #132	; 0x84
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	6812      	ldr	r2, [r2, #0]
 8008568:	4611      	mov	r1, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	01d2      	lsls	r2, r2, #7
 800856e:	440a      	add	r2, r1
 8008570:	3284      	adds	r2, #132	; 0x84
 8008572:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008576:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	fb02 f303 	mul.w	r3, r2, r3
 8008582:	041a      	lsls	r2, r3, #16
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	6859      	ldr	r1, [r3, #4]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	1acb      	subs	r3, r1, r3
 800858e:	69f9      	ldr	r1, [r7, #28]
 8008590:	fb01 f303 	mul.w	r3, r1, r3
 8008594:	3303      	adds	r3, #3
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	6809      	ldr	r1, [r1, #0]
 800859a:	4608      	mov	r0, r1
 800859c:	6879      	ldr	r1, [r7, #4]
 800859e:	01c9      	lsls	r1, r1, #7
 80085a0:	4401      	add	r1, r0
 80085a2:	3184      	adds	r1, #132	; 0x84
 80085a4:	4313      	orrs	r3, r2
 80085a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	01db      	lsls	r3, r3, #7
 80085b2:	4413      	add	r3, r2
 80085b4:	3384      	adds	r3, #132	; 0x84
 80085b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	6812      	ldr	r2, [r2, #0]
 80085bc:	4611      	mov	r1, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	01d2      	lsls	r2, r2, #7
 80085c2:	440a      	add	r2, r1
 80085c4:	3284      	adds	r2, #132	; 0x84
 80085c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085ca:	f023 0307 	bic.w	r3, r3, #7
 80085ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	01db      	lsls	r3, r3, #7
 80085da:	4413      	add	r3, r2
 80085dc:	3384      	adds	r3, #132	; 0x84
 80085de:	461a      	mov	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	01db      	lsls	r3, r3, #7
 80085f0:	4413      	add	r3, r2
 80085f2:	3384      	adds	r3, #132	; 0x84
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	4611      	mov	r1, r2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	01d2      	lsls	r2, r2, #7
 8008600:	440a      	add	r2, r1
 8008602:	3284      	adds	r2, #132	; 0x84
 8008604:	f043 0301 	orr.w	r3, r3, #1
 8008608:	6013      	str	r3, [r2, #0]
}
 800860a:	bf00      	nop
 800860c:	3724      	adds	r7, #36	; 0x24
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
	...

08008618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e25b      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d075      	beq.n	8008722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008636:	4ba3      	ldr	r3, [pc, #652]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 030c 	and.w	r3, r3, #12
 800863e:	2b04      	cmp	r3, #4
 8008640:	d00c      	beq.n	800865c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008642:	4ba0      	ldr	r3, [pc, #640]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800864a:	2b08      	cmp	r3, #8
 800864c:	d112      	bne.n	8008674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800864e:	4b9d      	ldr	r3, [pc, #628]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800865a:	d10b      	bne.n	8008674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800865c:	4b99      	ldr	r3, [pc, #612]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d05b      	beq.n	8008720 <HAL_RCC_OscConfig+0x108>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d157      	bne.n	8008720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e236      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867c:	d106      	bne.n	800868c <HAL_RCC_OscConfig+0x74>
 800867e:	4b91      	ldr	r3, [pc, #580]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a90      	ldr	r2, [pc, #576]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	e01d      	b.n	80086c8 <HAL_RCC_OscConfig+0xb0>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008694:	d10c      	bne.n	80086b0 <HAL_RCC_OscConfig+0x98>
 8008696:	4b8b      	ldr	r3, [pc, #556]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a8a      	ldr	r2, [pc, #552]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 800869c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	4b88      	ldr	r3, [pc, #544]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a87      	ldr	r2, [pc, #540]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80086a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	e00b      	b.n	80086c8 <HAL_RCC_OscConfig+0xb0>
 80086b0:	4b84      	ldr	r3, [pc, #528]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a83      	ldr	r2, [pc, #524]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80086b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	4b81      	ldr	r3, [pc, #516]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a80      	ldr	r2, [pc, #512]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80086c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d013      	beq.n	80086f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d0:	f7fc f868 	bl	80047a4 <HAL_GetTick>
 80086d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086d8:	f7fc f864 	bl	80047a4 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b64      	cmp	r3, #100	; 0x64
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e1fb      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ea:	4b76      	ldr	r3, [pc, #472]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0f0      	beq.n	80086d8 <HAL_RCC_OscConfig+0xc0>
 80086f6:	e014      	b.n	8008722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086f8:	f7fc f854 	bl	80047a4 <HAL_GetTick>
 80086fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086fe:	e008      	b.n	8008712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008700:	f7fc f850 	bl	80047a4 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b64      	cmp	r3, #100	; 0x64
 800870c:	d901      	bls.n	8008712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e1e7      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008712:	4b6c      	ldr	r3, [pc, #432]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1f0      	bne.n	8008700 <HAL_RCC_OscConfig+0xe8>
 800871e:	e000      	b.n	8008722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d063      	beq.n	80087f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800872e:	4b65      	ldr	r3, [pc, #404]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 030c 	and.w	r3, r3, #12
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00b      	beq.n	8008752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800873a:	4b62      	ldr	r3, [pc, #392]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008742:	2b08      	cmp	r3, #8
 8008744:	d11c      	bne.n	8008780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008746:	4b5f      	ldr	r3, [pc, #380]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d116      	bne.n	8008780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008752:	4b5c      	ldr	r3, [pc, #368]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d005      	beq.n	800876a <HAL_RCC_OscConfig+0x152>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d001      	beq.n	800876a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e1bb      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800876a:	4b56      	ldr	r3, [pc, #344]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	4952      	ldr	r1, [pc, #328]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 800877a:	4313      	orrs	r3, r2
 800877c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800877e:	e03a      	b.n	80087f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d020      	beq.n	80087ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008788:	4b4f      	ldr	r3, [pc, #316]	; (80088c8 <HAL_RCC_OscConfig+0x2b0>)
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878e:	f7fc f809 	bl	80047a4 <HAL_GetTick>
 8008792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008796:	f7fc f805 	bl	80047a4 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e19c      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087a8:	4b46      	ldr	r3, [pc, #280]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0f0      	beq.n	8008796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b4:	4b43      	ldr	r3, [pc, #268]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	4940      	ldr	r1, [pc, #256]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	600b      	str	r3, [r1, #0]
 80087c8:	e015      	b.n	80087f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087ca:	4b3f      	ldr	r3, [pc, #252]	; (80088c8 <HAL_RCC_OscConfig+0x2b0>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d0:	f7fb ffe8 	bl	80047a4 <HAL_GetTick>
 80087d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087d6:	e008      	b.n	80087ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087d8:	f7fb ffe4 	bl	80047a4 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e17b      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ea:	4b36      	ldr	r3, [pc, #216]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f0      	bne.n	80087d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0308 	and.w	r3, r3, #8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d030      	beq.n	8008864 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d016      	beq.n	8008838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800880a:	4b30      	ldr	r3, [pc, #192]	; (80088cc <HAL_RCC_OscConfig+0x2b4>)
 800880c:	2201      	movs	r2, #1
 800880e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008810:	f7fb ffc8 	bl	80047a4 <HAL_GetTick>
 8008814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008818:	f7fb ffc4 	bl	80047a4 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e15b      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800882a:	4b26      	ldr	r3, [pc, #152]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 800882c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0f0      	beq.n	8008818 <HAL_RCC_OscConfig+0x200>
 8008836:	e015      	b.n	8008864 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008838:	4b24      	ldr	r3, [pc, #144]	; (80088cc <HAL_RCC_OscConfig+0x2b4>)
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800883e:	f7fb ffb1 	bl	80047a4 <HAL_GetTick>
 8008842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008846:	f7fb ffad 	bl	80047a4 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e144      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008858:	4b1a      	ldr	r3, [pc, #104]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 800885a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f0      	bne.n	8008846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80a0 	beq.w	80089b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008872:	2300      	movs	r3, #0
 8008874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008876:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10f      	bne.n	80088a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008882:	2300      	movs	r3, #0
 8008884:	60bb      	str	r3, [r7, #8]
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	4a0e      	ldr	r2, [pc, #56]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 800888c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008890:	6413      	str	r3, [r2, #64]	; 0x40
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800889a:	60bb      	str	r3, [r7, #8]
 800889c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800889e:	2301      	movs	r3, #1
 80088a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088a2:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <HAL_RCC_OscConfig+0x2b8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d121      	bne.n	80088f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088ae:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <HAL_RCC_OscConfig+0x2b8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a07      	ldr	r2, [pc, #28]	; (80088d0 <HAL_RCC_OscConfig+0x2b8>)
 80088b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ba:	f7fb ff73 	bl	80047a4 <HAL_GetTick>
 80088be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088c0:	e011      	b.n	80088e6 <HAL_RCC_OscConfig+0x2ce>
 80088c2:	bf00      	nop
 80088c4:	40023800 	.word	0x40023800
 80088c8:	42470000 	.word	0x42470000
 80088cc:	42470e80 	.word	0x42470e80
 80088d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088d4:	f7fb ff66 	bl	80047a4 <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e0fd      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e6:	4b81      	ldr	r3, [pc, #516]	; (8008aec <HAL_RCC_OscConfig+0x4d4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f0      	beq.n	80088d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d106      	bne.n	8008908 <HAL_RCC_OscConfig+0x2f0>
 80088fa:	4b7d      	ldr	r3, [pc, #500]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	4a7c      	ldr	r2, [pc, #496]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	6713      	str	r3, [r2, #112]	; 0x70
 8008906:	e01c      	b.n	8008942 <HAL_RCC_OscConfig+0x32a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b05      	cmp	r3, #5
 800890e:	d10c      	bne.n	800892a <HAL_RCC_OscConfig+0x312>
 8008910:	4b77      	ldr	r3, [pc, #476]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008914:	4a76      	ldr	r2, [pc, #472]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008916:	f043 0304 	orr.w	r3, r3, #4
 800891a:	6713      	str	r3, [r2, #112]	; 0x70
 800891c:	4b74      	ldr	r3, [pc, #464]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 800891e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008920:	4a73      	ldr	r2, [pc, #460]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	6713      	str	r3, [r2, #112]	; 0x70
 8008928:	e00b      	b.n	8008942 <HAL_RCC_OscConfig+0x32a>
 800892a:	4b71      	ldr	r3, [pc, #452]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	4a70      	ldr	r2, [pc, #448]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	6713      	str	r3, [r2, #112]	; 0x70
 8008936:	4b6e      	ldr	r3, [pc, #440]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893a:	4a6d      	ldr	r2, [pc, #436]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 800893c:	f023 0304 	bic.w	r3, r3, #4
 8008940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d015      	beq.n	8008976 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800894a:	f7fb ff2b 	bl	80047a4 <HAL_GetTick>
 800894e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008950:	e00a      	b.n	8008968 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008952:	f7fb ff27 	bl	80047a4 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008960:	4293      	cmp	r3, r2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e0bc      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008968:	4b61      	ldr	r3, [pc, #388]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0ee      	beq.n	8008952 <HAL_RCC_OscConfig+0x33a>
 8008974:	e014      	b.n	80089a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008976:	f7fb ff15 	bl	80047a4 <HAL_GetTick>
 800897a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800897c:	e00a      	b.n	8008994 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800897e:	f7fb ff11 	bl	80047a4 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	f241 3288 	movw	r2, #5000	; 0x1388
 800898c:	4293      	cmp	r3, r2
 800898e:	d901      	bls.n	8008994 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e0a6      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008994:	4b56      	ldr	r3, [pc, #344]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1ee      	bne.n	800897e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d105      	bne.n	80089b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089a6:	4b52      	ldr	r3, [pc, #328]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	4a51      	ldr	r2, [pc, #324]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 80089ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8092 	beq.w	8008ae0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089bc:	4b4c      	ldr	r3, [pc, #304]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 030c 	and.w	r3, r3, #12
 80089c4:	2b08      	cmp	r3, #8
 80089c6:	d05c      	beq.n	8008a82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d141      	bne.n	8008a54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089d0:	4b48      	ldr	r3, [pc, #288]	; (8008af4 <HAL_RCC_OscConfig+0x4dc>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089d6:	f7fb fee5 	bl	80047a4 <HAL_GetTick>
 80089da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089dc:	e008      	b.n	80089f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089de:	f7fb fee1 	bl	80047a4 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d901      	bls.n	80089f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e078      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f0:	4b3f      	ldr	r3, [pc, #252]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1f0      	bne.n	80089de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	019b      	lsls	r3, r3, #6
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a12:	085b      	lsrs	r3, r3, #1
 8008a14:	3b01      	subs	r3, #1
 8008a16:	041b      	lsls	r3, r3, #16
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	061b      	lsls	r3, r3, #24
 8008a20:	4933      	ldr	r1, [pc, #204]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a26:	4b33      	ldr	r3, [pc, #204]	; (8008af4 <HAL_RCC_OscConfig+0x4dc>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a2c:	f7fb feba 	bl	80047a4 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a34:	f7fb feb6 	bl	80047a4 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e04d      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a46:	4b2a      	ldr	r3, [pc, #168]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0f0      	beq.n	8008a34 <HAL_RCC_OscConfig+0x41c>
 8008a52:	e045      	b.n	8008ae0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a54:	4b27      	ldr	r3, [pc, #156]	; (8008af4 <HAL_RCC_OscConfig+0x4dc>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a5a:	f7fb fea3 	bl	80047a4 <HAL_GetTick>
 8008a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a60:	e008      	b.n	8008a74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a62:	f7fb fe9f 	bl	80047a4 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e036      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a74:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f0      	bne.n	8008a62 <HAL_RCC_OscConfig+0x44a>
 8008a80:	e02e      	b.n	8008ae0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d101      	bne.n	8008a8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e029      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a8e:	4b18      	ldr	r3, [pc, #96]	; (8008af0 <HAL_RCC_OscConfig+0x4d8>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d11c      	bne.n	8008adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d115      	bne.n	8008adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d10d      	bne.n	8008adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d106      	bne.n	8008adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d001      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e000      	b.n	8008ae2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	40007000 	.word	0x40007000
 8008af0:	40023800 	.word	0x40023800
 8008af4:	42470060 	.word	0x42470060

08008af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e0cc      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b0c:	4b68      	ldr	r3, [pc, #416]	; (8008cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d90c      	bls.n	8008b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b1a:	4b65      	ldr	r3, [pc, #404]	; (8008cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	b2d2      	uxtb	r2, r2
 8008b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b22:	4b63      	ldr	r3, [pc, #396]	; (8008cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d001      	beq.n	8008b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e0b8      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d020      	beq.n	8008b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b4c:	4b59      	ldr	r3, [pc, #356]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	4a58      	ldr	r2, [pc, #352]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b64:	4b53      	ldr	r3, [pc, #332]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	4a52      	ldr	r2, [pc, #328]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b70:	4b50      	ldr	r3, [pc, #320]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	494d      	ldr	r1, [pc, #308]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d044      	beq.n	8008c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d107      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b96:	4b47      	ldr	r3, [pc, #284]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d119      	bne.n	8008bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e07f      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d003      	beq.n	8008bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d107      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bb6:	4b3f      	ldr	r3, [pc, #252]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d109      	bne.n	8008bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e06f      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bc6:	4b3b      	ldr	r3, [pc, #236]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e067      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bd6:	4b37      	ldr	r3, [pc, #220]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f023 0203 	bic.w	r2, r3, #3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	4934      	ldr	r1, [pc, #208]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008be8:	f7fb fddc 	bl	80047a4 <HAL_GetTick>
 8008bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bee:	e00a      	b.n	8008c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bf0:	f7fb fdd8 	bl	80047a4 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e04f      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c06:	4b2b      	ldr	r3, [pc, #172]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 020c 	and.w	r2, r3, #12
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d1eb      	bne.n	8008bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c18:	4b25      	ldr	r3, [pc, #148]	; (8008cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 030f 	and.w	r3, r3, #15
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d20c      	bcs.n	8008c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c26:	4b22      	ldr	r3, [pc, #136]	; (8008cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c2e:	4b20      	ldr	r3, [pc, #128]	; (8008cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d001      	beq.n	8008c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e032      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c4c:	4b19      	ldr	r3, [pc, #100]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	4916      	ldr	r1, [pc, #88]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0308 	and.w	r3, r3, #8
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d009      	beq.n	8008c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c6a:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	490e      	ldr	r1, [pc, #56]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c7e:	f000 f821 	bl	8008cc4 <HAL_RCC_GetSysClockFreq>
 8008c82:	4601      	mov	r1, r0
 8008c84:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	091b      	lsrs	r3, r3, #4
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	4a0a      	ldr	r2, [pc, #40]	; (8008cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c90:	5cd3      	ldrb	r3, [r2, r3]
 8008c92:	fa21 f303 	lsr.w	r3, r1, r3
 8008c96:	4a09      	ldr	r2, [pc, #36]	; (8008cbc <HAL_RCC_ClockConfig+0x1c4>)
 8008c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c9a:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7f9 f820 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	40023c00 	.word	0x40023c00
 8008cb4:	40023800 	.word	0x40023800
 8008cb8:	0800cc30 	.word	0x0800cc30
 8008cbc:	20000000 	.word	0x20000000
 8008cc0:	20000098 	.word	0x20000098

08008cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cda:	4b63      	ldr	r3, [pc, #396]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 030c 	and.w	r3, r3, #12
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d007      	beq.n	8008cf6 <HAL_RCC_GetSysClockFreq+0x32>
 8008ce6:	2b08      	cmp	r3, #8
 8008ce8:	d008      	beq.n	8008cfc <HAL_RCC_GetSysClockFreq+0x38>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f040 80b4 	bne.w	8008e58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008cf0:	4b5e      	ldr	r3, [pc, #376]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008cf2:	60bb      	str	r3, [r7, #8]
       break;
 8008cf4:	e0b3      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cf6:	4b5e      	ldr	r3, [pc, #376]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008cf8:	60bb      	str	r3, [r7, #8]
      break;
 8008cfa:	e0b0      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cfc:	4b5a      	ldr	r3, [pc, #360]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d06:	4b58      	ldr	r3, [pc, #352]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d04a      	beq.n	8008da8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d12:	4b55      	ldr	r3, [pc, #340]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	099b      	lsrs	r3, r3, #6
 8008d18:	f04f 0400 	mov.w	r4, #0
 8008d1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	ea03 0501 	and.w	r5, r3, r1
 8008d28:	ea04 0602 	and.w	r6, r4, r2
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4632      	mov	r2, r6
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	f04f 0400 	mov.w	r4, #0
 8008d38:	0154      	lsls	r4, r2, #5
 8008d3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d3e:	014b      	lsls	r3, r1, #5
 8008d40:	4619      	mov	r1, r3
 8008d42:	4622      	mov	r2, r4
 8008d44:	1b49      	subs	r1, r1, r5
 8008d46:	eb62 0206 	sbc.w	r2, r2, r6
 8008d4a:	f04f 0300 	mov.w	r3, #0
 8008d4e:	f04f 0400 	mov.w	r4, #0
 8008d52:	0194      	lsls	r4, r2, #6
 8008d54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d58:	018b      	lsls	r3, r1, #6
 8008d5a:	1a5b      	subs	r3, r3, r1
 8008d5c:	eb64 0402 	sbc.w	r4, r4, r2
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	00e2      	lsls	r2, r4, #3
 8008d6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d6e:	00d9      	lsls	r1, r3, #3
 8008d70:	460b      	mov	r3, r1
 8008d72:	4614      	mov	r4, r2
 8008d74:	195b      	adds	r3, r3, r5
 8008d76:	eb44 0406 	adc.w	r4, r4, r6
 8008d7a:	f04f 0100 	mov.w	r1, #0
 8008d7e:	f04f 0200 	mov.w	r2, #0
 8008d82:	0262      	lsls	r2, r4, #9
 8008d84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008d88:	0259      	lsls	r1, r3, #9
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	4621      	mov	r1, r4
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f04f 0400 	mov.w	r4, #0
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4623      	mov	r3, r4
 8008d9c:	f7f7 fa28 	bl	80001f0 <__aeabi_uldivmod>
 8008da0:	4603      	mov	r3, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	e049      	b.n	8008e3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008da8:	4b2f      	ldr	r3, [pc, #188]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	099b      	lsrs	r3, r3, #6
 8008dae:	f04f 0400 	mov.w	r4, #0
 8008db2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	ea03 0501 	and.w	r5, r3, r1
 8008dbe:	ea04 0602 	and.w	r6, r4, r2
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	f04f 0400 	mov.w	r4, #0
 8008dce:	0154      	lsls	r4, r2, #5
 8008dd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008dd4:	014b      	lsls	r3, r1, #5
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4622      	mov	r2, r4
 8008dda:	1b49      	subs	r1, r1, r5
 8008ddc:	eb62 0206 	sbc.w	r2, r2, r6
 8008de0:	f04f 0300 	mov.w	r3, #0
 8008de4:	f04f 0400 	mov.w	r4, #0
 8008de8:	0194      	lsls	r4, r2, #6
 8008dea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008dee:	018b      	lsls	r3, r1, #6
 8008df0:	1a5b      	subs	r3, r3, r1
 8008df2:	eb64 0402 	sbc.w	r4, r4, r2
 8008df6:	f04f 0100 	mov.w	r1, #0
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	00e2      	lsls	r2, r4, #3
 8008e00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008e04:	00d9      	lsls	r1, r3, #3
 8008e06:	460b      	mov	r3, r1
 8008e08:	4614      	mov	r4, r2
 8008e0a:	195b      	adds	r3, r3, r5
 8008e0c:	eb44 0406 	adc.w	r4, r4, r6
 8008e10:	f04f 0100 	mov.w	r1, #0
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	02a2      	lsls	r2, r4, #10
 8008e1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008e1e:	0299      	lsls	r1, r3, #10
 8008e20:	460b      	mov	r3, r1
 8008e22:	4614      	mov	r4, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	4621      	mov	r1, r4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f04f 0400 	mov.w	r4, #0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	4623      	mov	r3, r4
 8008e32:	f7f7 f9dd 	bl	80001f0 <__aeabi_uldivmod>
 8008e36:	4603      	mov	r3, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	0c1b      	lsrs	r3, r3, #16
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	3301      	adds	r3, #1
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e54:	60bb      	str	r3, [r7, #8]
      break;
 8008e56:	e002      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e58:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008e5a:	60bb      	str	r3, [r7, #8]
      break;
 8008e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e68:	40023800 	.word	0x40023800
 8008e6c:	00f42400 	.word	0x00f42400
 8008e70:	007a1200 	.word	0x007a1200

08008e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e78:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000000 	.word	0x20000000

08008e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e90:	f7ff fff0 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8008e94:	4601      	mov	r1, r0
 8008e96:	4b05      	ldr	r3, [pc, #20]	; (8008eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	0a9b      	lsrs	r3, r3, #10
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	4a03      	ldr	r2, [pc, #12]	; (8008eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ea2:	5cd3      	ldrb	r3, [r2, r3]
 8008ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40023800 	.word	0x40023800
 8008eb0:	0800cc40 	.word	0x0800cc40

08008eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008eb8:	f7ff ffdc 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8008ebc:	4601      	mov	r1, r0
 8008ebe:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	0b5b      	lsrs	r3, r3, #13
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	4a03      	ldr	r2, [pc, #12]	; (8008ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008eca:	5cd3      	ldrb	r3, [r2, r3]
 8008ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40023800 	.word	0x40023800
 8008ed8:	0800cc40 	.word	0x0800cc40

08008edc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	220f      	movs	r2, #15
 8008eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008eec:	4b12      	ldr	r3, [pc, #72]	; (8008f38 <HAL_RCC_GetClockConfig+0x5c>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f003 0203 	and.w	r2, r3, #3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ef8:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <HAL_RCC_GetClockConfig+0x5c>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f04:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <HAL_RCC_GetClockConfig+0x5c>)
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f10:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <HAL_RCC_GetClockConfig+0x5c>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f1e:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <HAL_RCC_GetClockConfig+0x60>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 020f 	and.w	r2, r3, #15
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	601a      	str	r2, [r3, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	40023c00 	.word	0x40023c00

08008f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10b      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d105      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d075      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f74:	4bad      	ldr	r3, [pc, #692]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f7a:	f7fb fc13 	bl	80047a4 <HAL_GetTick>
 8008f7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f80:	e008      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f82:	f7fb fc0f 	bl	80047a4 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e18b      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f94:	4ba6      	ldr	r3, [pc, #664]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1f0      	bne.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d009      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	019a      	lsls	r2, r3, #6
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	071b      	lsls	r3, r3, #28
 8008fb8:	499d      	ldr	r1, [pc, #628]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01f      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008fcc:	4b98      	ldr	r3, [pc, #608]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fd2:	0f1b      	lsrs	r3, r3, #28
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	019a      	lsls	r2, r3, #6
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	061b      	lsls	r3, r3, #24
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	071b      	lsls	r3, r3, #28
 8008fec:	4990      	ldr	r1, [pc, #576]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008ff4:	4b8e      	ldr	r3, [pc, #568]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ffa:	f023 021f 	bic.w	r2, r3, #31
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	3b01      	subs	r3, #1
 8009004:	498a      	ldr	r1, [pc, #552]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009006:	4313      	orrs	r3, r2
 8009008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00d      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	019a      	lsls	r2, r3, #6
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	061b      	lsls	r3, r3, #24
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	071b      	lsls	r3, r3, #28
 800902c:	4980      	ldr	r1, [pc, #512]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800902e:	4313      	orrs	r3, r2
 8009030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009034:	4b7d      	ldr	r3, [pc, #500]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009036:	2201      	movs	r2, #1
 8009038:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800903a:	f7fb fbb3 	bl	80047a4 <HAL_GetTick>
 800903e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009040:	e008      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009042:	f7fb fbaf 	bl	80047a4 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b02      	cmp	r3, #2
 800904e:	d901      	bls.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e12b      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009054:	4b76      	ldr	r3, [pc, #472]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d0f0      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d105      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009074:	2b00      	cmp	r3, #0
 8009076:	d079      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009078:	4b6e      	ldr	r3, [pc, #440]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800907a:	2200      	movs	r2, #0
 800907c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800907e:	f7fb fb91 	bl	80047a4 <HAL_GetTick>
 8009082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009084:	e008      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009086:	f7fb fb8d 	bl	80047a4 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d901      	bls.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e109      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009098:	4b65      	ldr	r3, [pc, #404]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a4:	d0ef      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0304 	and.w	r3, r3, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d020      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80090b2:	4b5f      	ldr	r3, [pc, #380]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b8:	0f1b      	lsrs	r3, r3, #28
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	019a      	lsls	r2, r3, #6
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	061b      	lsls	r3, r3, #24
 80090cc:	431a      	orrs	r2, r3
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	071b      	lsls	r3, r3, #28
 80090d2:	4957      	ldr	r1, [pc, #348]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80090da:	4b55      	ldr	r3, [pc, #340]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	021b      	lsls	r3, r3, #8
 80090ec:	4950      	ldr	r1, [pc, #320]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0308 	and.w	r3, r3, #8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01e      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009100:	4b4b      	ldr	r3, [pc, #300]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009106:	0e1b      	lsrs	r3, r3, #24
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	019a      	lsls	r2, r3, #6
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	061b      	lsls	r3, r3, #24
 8009118:	431a      	orrs	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	071b      	lsls	r3, r3, #28
 8009120:	4943      	ldr	r1, [pc, #268]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009122:	4313      	orrs	r3, r2
 8009124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009128:	4b41      	ldr	r3, [pc, #260]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800912a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800912e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	493e      	ldr	r1, [pc, #248]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009138:	4313      	orrs	r3, r2
 800913a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800913e:	4b3d      	ldr	r3, [pc, #244]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009140:	2201      	movs	r2, #1
 8009142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009144:	f7fb fb2e 	bl	80047a4 <HAL_GetTick>
 8009148:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800914a:	e008      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800914c:	f7fb fb2a 	bl	80047a4 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e0a6      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800915e:	4b34      	ldr	r3, [pc, #208]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800916a:	d1ef      	bne.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0320 	and.w	r3, r3, #32
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 808d 	beq.w	8009294 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	4a2b      	ldr	r2, [pc, #172]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009188:	6413      	str	r3, [r2, #64]	; 0x40
 800918a:	4b29      	ldr	r3, [pc, #164]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009196:	4b28      	ldr	r3, [pc, #160]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a27      	ldr	r2, [pc, #156]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800919c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091a2:	f7fb faff 	bl	80047a4 <HAL_GetTick>
 80091a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80091a8:	e008      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80091aa:	f7fb fafb 	bl	80047a4 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d901      	bls.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e077      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80091bc:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0f0      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80091c8:	4b19      	ldr	r3, [pc, #100]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d039      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d032      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091e6:	4b12      	ldr	r3, [pc, #72]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091f0:	4b12      	ldr	r3, [pc, #72]	; (800923c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091f6:	4b11      	ldr	r3, [pc, #68]	; (800923c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80091fc:	4a0c      	ldr	r2, [pc, #48]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009202:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b01      	cmp	r3, #1
 800920c:	d11e      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800920e:	f7fb fac9 	bl	80047a4 <HAL_GetTick>
 8009212:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009214:	e014      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009216:	f7fb fac5 	bl	80047a4 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	f241 3288 	movw	r2, #5000	; 0x1388
 8009224:	4293      	cmp	r3, r2
 8009226:	d90b      	bls.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e03f      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800922c:	42470068 	.word	0x42470068
 8009230:	40023800 	.word	0x40023800
 8009234:	42470070 	.word	0x42470070
 8009238:	40007000 	.word	0x40007000
 800923c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009240:	4b1c      	ldr	r3, [pc, #112]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0e4      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009258:	d10d      	bne.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800925a:	4b16      	ldr	r3, [pc, #88]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800926a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800926e:	4911      	ldr	r1, [pc, #68]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009270:	4313      	orrs	r3, r2
 8009272:	608b      	str	r3, [r1, #8]
 8009274:	e005      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009276:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	4a0e      	ldr	r2, [pc, #56]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800927c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009280:	6093      	str	r3, [r2, #8]
 8009282:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800928e:	4909      	ldr	r1, [pc, #36]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009290:	4313      	orrs	r3, r2
 8009292:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0310 	and.w	r3, r3, #16
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80092a6:	4b04      	ldr	r3, [pc, #16]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80092a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	40023800 	.word	0x40023800
 80092b8:	424711e0 	.word	0x424711e0

080092bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e025      	b.n	800931c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d106      	bne.n	80092ea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7f7 fcbb 	bl	8000c60 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2202      	movs	r2, #2
 80092ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3304      	adds	r3, #4
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f001 fdb1 	bl	800ae64 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	461a      	mov	r2, r3
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	f001 fe1c 	bl	800af4a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d101      	bne.n	8009340 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800933c:	2302      	movs	r3, #2
 800933e:	e018      	b.n	8009372 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2202      	movs	r2, #2
 8009344:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	4618      	mov	r0, r3
 8009352:	f001 fe79 	bl	800b048 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d104      	bne.n	8009368 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2205      	movs	r2, #5
 8009362:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009366:	e003      	b.n	8009370 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d101      	bne.n	8009394 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009390:	2302      	movs	r3, #2
 8009392:	e00e      	b.n	80093b2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2202      	movs	r2, #2
 8009398:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 fe8c 	bl	800b0c0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e056      	b.n	800947a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7f8 fbea 	bl	8001bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	431a      	orrs	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009428:	431a      	orrs	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	431a      	orrs	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	ea42 0103 	orr.w	r1, r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	0c1b      	lsrs	r3, r3, #16
 800944a:	f003 0104 	and.w	r1, r3, #4
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e01a      	b.n	80094ca <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094aa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7f8 fbcf 	bl	8001c50 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b088      	sub	sp, #32
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	603b      	str	r3, [r7, #0]
 80094de:	4613      	mov	r3, r2
 80094e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d101      	bne.n	80094f4 <HAL_SPI_Transmit+0x22>
 80094f0:	2302      	movs	r3, #2
 80094f2:	e11e      	b.n	8009732 <HAL_SPI_Transmit+0x260>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094fc:	f7fb f952 	bl	80047a4 <HAL_GetTick>
 8009500:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b01      	cmp	r3, #1
 8009510:	d002      	beq.n	8009518 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009512:	2302      	movs	r3, #2
 8009514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009516:	e103      	b.n	8009720 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d002      	beq.n	8009524 <HAL_SPI_Transmit+0x52>
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009528:	e0fa      	b.n	8009720 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2203      	movs	r2, #3
 800952e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	88fa      	ldrh	r2, [r7, #6]
 8009542:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	88fa      	ldrh	r2, [r7, #6]
 8009548:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009570:	d107      	bne.n	8009582 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009580:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958c:	2b40      	cmp	r3, #64	; 0x40
 800958e:	d007      	beq.n	80095a0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800959e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095a8:	d14b      	bne.n	8009642 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <HAL_SPI_Transmit+0xe6>
 80095b2:	8afb      	ldrh	r3, [r7, #22]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d13e      	bne.n	8009636 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095bc:	881a      	ldrh	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c8:	1c9a      	adds	r2, r3, #2
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	3b01      	subs	r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095dc:	e02b      	b.n	8009636 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f003 0302 	and.w	r3, r3, #2
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d112      	bne.n	8009612 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f0:	881a      	ldrh	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fc:	1c9a      	adds	r2, r3, #2
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009606:	b29b      	uxth	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b29a      	uxth	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009610:	e011      	b.n	8009636 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009612:	f7fb f8c7 	bl	80047a4 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d803      	bhi.n	800962a <HAL_SPI_Transmit+0x158>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	d102      	bne.n	8009630 <HAL_SPI_Transmit+0x15e>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009634:	e074      	b.n	8009720 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1ce      	bne.n	80095de <HAL_SPI_Transmit+0x10c>
 8009640:	e04c      	b.n	80096dc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <HAL_SPI_Transmit+0x17e>
 800964a:	8afb      	ldrh	r3, [r7, #22]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d140      	bne.n	80096d2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800966c:	b29b      	uxth	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	b29a      	uxth	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009676:	e02c      	b.n	80096d2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b02      	cmp	r3, #2
 8009684:	d113      	bne.n	80096ae <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	330c      	adds	r3, #12
 8009690:	7812      	ldrb	r2, [r2, #0]
 8009692:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	3b01      	subs	r3, #1
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80096ac:	e011      	b.n	80096d2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ae:	f7fb f879 	bl	80047a4 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d803      	bhi.n	80096c6 <HAL_SPI_Transmit+0x1f4>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c4:	d102      	bne.n	80096cc <HAL_SPI_Transmit+0x1fa>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096d0:	e026      	b.n	8009720 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1cd      	bne.n	8009678 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 fbb3 	bl	8009e4c <SPI_EndRxTxTransaction>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2220      	movs	r2, #32
 80096f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096fa:	2300      	movs	r3, #0
 80096fc:	613b      	str	r3, [r7, #16]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	613b      	str	r3, [r7, #16]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	613b      	str	r3, [r7, #16]
 800970e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	77fb      	strb	r3, [r7, #31]
 800971c:	e000      	b.n	8009720 <HAL_SPI_Transmit+0x24e>
  }

error:
 800971e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009730:	7ffb      	ldrb	r3, [r7, #31]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3720      	adds	r7, #32
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b088      	sub	sp, #32
 800973e:	af02      	add	r7, sp, #8
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	603b      	str	r3, [r7, #0]
 8009746:	4613      	mov	r3, r2
 8009748:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009756:	d112      	bne.n	800977e <HAL_SPI_Receive+0x44>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10e      	bne.n	800977e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2204      	movs	r2, #4
 8009764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009768:	88fa      	ldrh	r2, [r7, #6]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	4613      	mov	r3, r2
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	68b9      	ldr	r1, [r7, #8]
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f8e9 	bl	800994c <HAL_SPI_TransmitReceive>
 800977a:	4603      	mov	r3, r0
 800977c:	e0e2      	b.n	8009944 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009784:	2b01      	cmp	r3, #1
 8009786:	d101      	bne.n	800978c <HAL_SPI_Receive+0x52>
 8009788:	2302      	movs	r3, #2
 800978a:	e0db      	b.n	8009944 <HAL_SPI_Receive+0x20a>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009794:	f7fb f806 	bl	80047a4 <HAL_GetTick>
 8009798:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d002      	beq.n	80097ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80097a6:	2302      	movs	r3, #2
 80097a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097aa:	e0c2      	b.n	8009932 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <HAL_SPI_Receive+0x7e>
 80097b2:	88fb      	ldrh	r3, [r7, #6]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097bc:	e0b9      	b.n	8009932 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2204      	movs	r2, #4
 80097c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	88fa      	ldrh	r2, [r7, #6]
 80097d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	88fa      	ldrh	r2, [r7, #6]
 80097dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009804:	d107      	bne.n	8009816 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009814:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009820:	2b40      	cmp	r3, #64	; 0x40
 8009822:	d007      	beq.n	8009834 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009832:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d162      	bne.n	8009902 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800983c:	e02e      	b.n	800989c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b01      	cmp	r3, #1
 800984a:	d115      	bne.n	8009878 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f103 020c 	add.w	r2, r3, #12
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	b2d2      	uxtb	r2, r2
 800985c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800986c:	b29b      	uxth	r3, r3
 800986e:	3b01      	subs	r3, #1
 8009870:	b29a      	uxth	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009876:	e011      	b.n	800989c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009878:	f7fa ff94 	bl	80047a4 <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	429a      	cmp	r2, r3
 8009886:	d803      	bhi.n	8009890 <HAL_SPI_Receive+0x156>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988e:	d102      	bne.n	8009896 <HAL_SPI_Receive+0x15c>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	75fb      	strb	r3, [r7, #23]
          goto error;
 800989a:	e04a      	b.n	8009932 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1cb      	bne.n	800983e <HAL_SPI_Receive+0x104>
 80098a6:	e031      	b.n	800990c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d113      	bne.n	80098de <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c0:	b292      	uxth	r2, r2
 80098c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	1c9a      	adds	r2, r3, #2
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098dc:	e011      	b.n	8009902 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098de:	f7fa ff61 	bl	80047a4 <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d803      	bhi.n	80098f6 <HAL_SPI_Receive+0x1bc>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f4:	d102      	bne.n	80098fc <HAL_SPI_Receive+0x1c2>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d102      	bne.n	8009902 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009900:	e017      	b.n	8009932 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1cd      	bne.n	80098a8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 fa35 	bl	8009d80 <SPI_EndRxTransaction>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2220      	movs	r2, #32
 8009920:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	75fb      	strb	r3, [r7, #23]
 800992e:	e000      	b.n	8009932 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009930:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009942:	7dfb      	ldrb	r3, [r7, #23]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b08c      	sub	sp, #48	; 0x30
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800995a:	2301      	movs	r3, #1
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <HAL_SPI_TransmitReceive+0x26>
 800996e:	2302      	movs	r3, #2
 8009970:	e18a      	b.n	8009c88 <HAL_SPI_TransmitReceive+0x33c>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800997a:	f7fa ff13 	bl	80047a4 <HAL_GetTick>
 800997e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009990:	887b      	ldrh	r3, [r7, #2]
 8009992:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009994:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009998:	2b01      	cmp	r3, #1
 800999a:	d00f      	beq.n	80099bc <HAL_SPI_TransmitReceive+0x70>
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099a2:	d107      	bne.n	80099b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d103      	bne.n	80099b4 <HAL_SPI_TransmitReceive+0x68>
 80099ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099b0:	2b04      	cmp	r3, #4
 80099b2:	d003      	beq.n	80099bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80099b4:	2302      	movs	r3, #2
 80099b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80099ba:	e15b      	b.n	8009c74 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d005      	beq.n	80099ce <HAL_SPI_TransmitReceive+0x82>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <HAL_SPI_TransmitReceive+0x82>
 80099c8:	887b      	ldrh	r3, [r7, #2]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d103      	bne.n	80099d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80099d4:	e14e      	b.n	8009c74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d003      	beq.n	80099ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2205      	movs	r2, #5
 80099e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	887a      	ldrh	r2, [r7, #2]
 80099fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	887a      	ldrh	r2, [r7, #2]
 8009a00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	887a      	ldrh	r2, [r7, #2]
 8009a0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	887a      	ldrh	r2, [r7, #2]
 8009a12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d007      	beq.n	8009a3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a46:	d178      	bne.n	8009b3a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <HAL_SPI_TransmitReceive+0x10a>
 8009a50:	8b7b      	ldrh	r3, [r7, #26]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d166      	bne.n	8009b24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5a:	881a      	ldrh	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	1c9a      	adds	r2, r3, #2
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a7a:	e053      	b.n	8009b24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d11b      	bne.n	8009ac2 <HAL_SPI_TransmitReceive+0x176>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d016      	beq.n	8009ac2 <HAL_SPI_TransmitReceive+0x176>
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d113      	bne.n	8009ac2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9e:	881a      	ldrh	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	1c9a      	adds	r2, r3, #2
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d119      	bne.n	8009b04 <HAL_SPI_TransmitReceive+0x1b8>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d014      	beq.n	8009b04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68da      	ldr	r2, [r3, #12]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae4:	b292      	uxth	r2, r2
 8009ae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aec:	1c9a      	adds	r2, r3, #2
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	3b01      	subs	r3, #1
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b00:	2301      	movs	r3, #1
 8009b02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b04:	f7fa fe4e 	bl	80047a4 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d807      	bhi.n	8009b24 <HAL_SPI_TransmitReceive+0x1d8>
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	d003      	beq.n	8009b24 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b22:	e0a7      	b.n	8009c74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1a6      	bne.n	8009a7c <HAL_SPI_TransmitReceive+0x130>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1a1      	bne.n	8009a7c <HAL_SPI_TransmitReceive+0x130>
 8009b38:	e07c      	b.n	8009c34 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <HAL_SPI_TransmitReceive+0x1fc>
 8009b42:	8b7b      	ldrh	r3, [r7, #26]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d16b      	bne.n	8009c20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	330c      	adds	r3, #12
 8009b52:	7812      	ldrb	r2, [r2, #0]
 8009b54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b6e:	e057      	b.n	8009c20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f003 0302 	and.w	r3, r3, #2
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d11c      	bne.n	8009bb8 <HAL_SPI_TransmitReceive+0x26c>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d017      	beq.n	8009bb8 <HAL_SPI_TransmitReceive+0x26c>
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d114      	bne.n	8009bb8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	330c      	adds	r3, #12
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d119      	bne.n	8009bfa <HAL_SPI_TransmitReceive+0x2ae>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d014      	beq.n	8009bfa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68da      	ldr	r2, [r3, #12]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009bfa:	f7fa fdd3 	bl	80047a4 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d803      	bhi.n	8009c12 <HAL_SPI_TransmitReceive+0x2c6>
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c10:	d102      	bne.n	8009c18 <HAL_SPI_TransmitReceive+0x2cc>
 8009c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d103      	bne.n	8009c20 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c1e:	e029      	b.n	8009c74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1a2      	bne.n	8009b70 <HAL_SPI_TransmitReceive+0x224>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d19d      	bne.n	8009b70 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f907 	bl	8009e4c <SPI_EndRxTxTransaction>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d006      	beq.n	8009c52 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009c50:	e010      	b.n	8009c74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10b      	bne.n	8009c72 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	617b      	str	r3, [r7, #20]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	617b      	str	r3, [r7, #20]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	617b      	str	r3, [r7, #20]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	e000      	b.n	8009c74 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009c72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3730      	adds	r7, #48	; 0x30
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c9e:	b2db      	uxtb	r3, r3
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cbc:	e04c      	b.n	8009d58 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc4:	d048      	beq.n	8009d58 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009cc6:	f7fa fd6d 	bl	80047a4 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d902      	bls.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0x30>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d13d      	bne.n	8009d58 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cf4:	d111      	bne.n	8009d1a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cfe:	d004      	beq.n	8009d0a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d08:	d107      	bne.n	8009d1a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d22:	d10f      	bne.n	8009d44 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e00f      	b.n	8009d78 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	689a      	ldr	r2, [r3, #8]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	4013      	ands	r3, r2
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	bf0c      	ite	eq
 8009d68:	2301      	moveq	r3, #1
 8009d6a:	2300      	movne	r3, #0
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	461a      	mov	r2, r3
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d1a3      	bne.n	8009cbe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d94:	d111      	bne.n	8009dba <SPI_EndRxTransaction+0x3a>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d9e:	d004      	beq.n	8009daa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009da8:	d107      	bne.n	8009dba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009db8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dc2:	d12a      	bne.n	8009e1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dcc:	d012      	beq.n	8009df4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2180      	movs	r1, #128	; 0x80
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff ff67 	bl	8009cac <SPI_WaitFlagStateUntilTimeout>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d02d      	beq.n	8009e40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de8:	f043 0220 	orr.w	r2, r3, #32
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e026      	b.n	8009e42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7ff ff54 	bl	8009cac <SPI_WaitFlagStateUntilTimeout>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d01a      	beq.n	8009e40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0e:	f043 0220 	orr.w	r2, r3, #32
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e013      	b.n	8009e42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2200      	movs	r2, #0
 8009e22:	2101      	movs	r1, #1
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7ff ff41 	bl	8009cac <SPI_WaitFlagStateUntilTimeout>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e34:	f043 0220 	orr.w	r2, r3, #32
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e000      	b.n	8009e42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af02      	add	r7, sp, #8
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009e58:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <SPI_EndRxTxTransaction+0x7c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a1b      	ldr	r2, [pc, #108]	; (8009ecc <SPI_EndRxTxTransaction+0x80>)
 8009e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e62:	0d5b      	lsrs	r3, r3, #21
 8009e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e68:	fb02 f303 	mul.w	r3, r2, r3
 8009e6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e76:	d112      	bne.n	8009e9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2180      	movs	r1, #128	; 0x80
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff ff12 	bl	8009cac <SPI_WaitFlagStateUntilTimeout>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d016      	beq.n	8009ebc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e92:	f043 0220 	orr.w	r2, r3, #32
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e00f      	b.n	8009ebe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00a      	beq.n	8009eba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb4:	2b80      	cmp	r3, #128	; 0x80
 8009eb6:	d0f2      	beq.n	8009e9e <SPI_EndRxTxTransaction+0x52>
 8009eb8:	e000      	b.n	8009ebc <SPI_EndRxTxTransaction+0x70>
        break;
 8009eba:	bf00      	nop
  }

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20000000 	.word	0x20000000
 8009ecc:	165e9f81 	.word	0x165e9f81

08009ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e01d      	b.n	8009f1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7f8 f834 	bl	8001f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f000 fa14 	bl	800a33c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b085      	sub	sp, #20
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0201 	orr.w	r2, r2, #1
 8009f3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f003 0307 	and.w	r3, r3, #7
 8009f48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b06      	cmp	r3, #6
 8009f4e:	d007      	beq.n	8009f60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f042 0201 	orr.w	r2, r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b082      	sub	sp, #8
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d122      	bne.n	8009fca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d11b      	bne.n	8009fca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f06f 0202 	mvn.w	r2, #2
 8009f9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	f003 0303 	and.w	r3, r3, #3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f9a5 	bl	800a300 <HAL_TIM_IC_CaptureCallback>
 8009fb6:	e005      	b.n	8009fc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f997 	bl	800a2ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f9a8 	bl	800a314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b04      	cmp	r3, #4
 8009fd6:	d122      	bne.n	800a01e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f003 0304 	and.w	r3, r3, #4
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d11b      	bne.n	800a01e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f06f 0204 	mvn.w	r2, #4
 8009fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f97b 	bl	800a300 <HAL_TIM_IC_CaptureCallback>
 800a00a:	e005      	b.n	800a018 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f96d 	bl	800a2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f97e 	bl	800a314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	2b08      	cmp	r3, #8
 800a02a:	d122      	bne.n	800a072 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f003 0308 	and.w	r3, r3, #8
 800a036:	2b08      	cmp	r3, #8
 800a038:	d11b      	bne.n	800a072 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f06f 0208 	mvn.w	r2, #8
 800a042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2204      	movs	r2, #4
 800a048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	f003 0303 	and.w	r3, r3, #3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d003      	beq.n	800a060 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f951 	bl	800a300 <HAL_TIM_IC_CaptureCallback>
 800a05e:	e005      	b.n	800a06c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f943 	bl	800a2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f954 	bl	800a314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	f003 0310 	and.w	r3, r3, #16
 800a07c:	2b10      	cmp	r3, #16
 800a07e:	d122      	bne.n	800a0c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f003 0310 	and.w	r3, r3, #16
 800a08a:	2b10      	cmp	r3, #16
 800a08c:	d11b      	bne.n	800a0c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f06f 0210 	mvn.w	r2, #16
 800a096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2208      	movs	r2, #8
 800a09c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d003      	beq.n	800a0b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f927 	bl	800a300 <HAL_TIM_IC_CaptureCallback>
 800a0b2:	e005      	b.n	800a0c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f919 	bl	800a2ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f92a 	bl	800a314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	f003 0301 	and.w	r3, r3, #1
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d10e      	bne.n	800a0f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d107      	bne.n	800a0f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f06f 0201 	mvn.w	r2, #1
 800a0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7f7 fc8f 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0fc:	2b80      	cmp	r3, #128	; 0x80
 800a0fe:	d10e      	bne.n	800a11e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a10a:	2b80      	cmp	r3, #128	; 0x80
 800a10c:	d107      	bne.n	800a11e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 facf 	bl	800a6bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a128:	2b40      	cmp	r3, #64	; 0x40
 800a12a:	d10e      	bne.n	800a14a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a136:	2b40      	cmp	r3, #64	; 0x40
 800a138:	d107      	bne.n	800a14a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f8ef 	bl	800a328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	f003 0320 	and.w	r3, r3, #32
 800a154:	2b20      	cmp	r3, #32
 800a156:	d10e      	bne.n	800a176 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	f003 0320 	and.w	r3, r3, #32
 800a162:	2b20      	cmp	r3, #32
 800a164:	d107      	bne.n	800a176 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f06f 0220 	mvn.w	r2, #32
 800a16e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fa99 	bl	800a6a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a176:	bf00      	nop
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <HAL_TIM_ConfigClockSource+0x18>
 800a192:	2302      	movs	r3, #2
 800a194:	e0a6      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x166>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1bc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b40      	cmp	r3, #64	; 0x40
 800a1cc:	d067      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0x120>
 800a1ce:	2b40      	cmp	r3, #64	; 0x40
 800a1d0:	d80b      	bhi.n	800a1ea <HAL_TIM_ConfigClockSource+0x6c>
 800a1d2:	2b10      	cmp	r3, #16
 800a1d4:	d073      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x140>
 800a1d6:	2b10      	cmp	r3, #16
 800a1d8:	d802      	bhi.n	800a1e0 <HAL_TIM_ConfigClockSource+0x62>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d06f      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a1de:	e078      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a1e0:	2b20      	cmp	r3, #32
 800a1e2:	d06c      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x140>
 800a1e4:	2b30      	cmp	r3, #48	; 0x30
 800a1e6:	d06a      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a1e8:	e073      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a1ea:	2b70      	cmp	r3, #112	; 0x70
 800a1ec:	d00d      	beq.n	800a20a <HAL_TIM_ConfigClockSource+0x8c>
 800a1ee:	2b70      	cmp	r3, #112	; 0x70
 800a1f0:	d804      	bhi.n	800a1fc <HAL_TIM_ConfigClockSource+0x7e>
 800a1f2:	2b50      	cmp	r3, #80	; 0x50
 800a1f4:	d033      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0xe0>
 800a1f6:	2b60      	cmp	r3, #96	; 0x60
 800a1f8:	d041      	beq.n	800a27e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a1fa:	e06a      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a1fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a200:	d066      	beq.n	800a2d0 <HAL_TIM_ConfigClockSource+0x152>
 800a202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a206:	d017      	beq.n	800a238 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a208:	e063      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	6899      	ldr	r1, [r3, #8]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f000 f9a9 	bl	800a570 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a22c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	609a      	str	r2, [r3, #8]
      break;
 800a236:	e04c      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6818      	ldr	r0, [r3, #0]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	6899      	ldr	r1, [r3, #8]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f000 f992 	bl	800a570 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a25a:	609a      	str	r2, [r3, #8]
      break;
 800a25c:	e039      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6859      	ldr	r1, [r3, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f000 f906 	bl	800a47c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2150      	movs	r1, #80	; 0x50
 800a276:	4618      	mov	r0, r3
 800a278:	f000 f95f 	bl	800a53a <TIM_ITRx_SetConfig>
      break;
 800a27c:	e029      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	6859      	ldr	r1, [r3, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f000 f925 	bl	800a4da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2160      	movs	r1, #96	; 0x60
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f94f 	bl	800a53a <TIM_ITRx_SetConfig>
      break;
 800a29c:	e019      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6859      	ldr	r1, [r3, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f000 f8e6 	bl	800a47c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2140      	movs	r1, #64	; 0x40
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 f93f 	bl	800a53a <TIM_ITRx_SetConfig>
      break;
 800a2bc:	e009      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f000 f936 	bl	800a53a <TIM_ITRx_SetConfig>
      break;
 800a2ce:	e000      	b.n	800a2d2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a2d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a40      	ldr	r2, [pc, #256]	; (800a450 <TIM_Base_SetConfig+0x114>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d013      	beq.n	800a37c <TIM_Base_SetConfig+0x40>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a35a:	d00f      	beq.n	800a37c <TIM_Base_SetConfig+0x40>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a3d      	ldr	r2, [pc, #244]	; (800a454 <TIM_Base_SetConfig+0x118>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d00b      	beq.n	800a37c <TIM_Base_SetConfig+0x40>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a3c      	ldr	r2, [pc, #240]	; (800a458 <TIM_Base_SetConfig+0x11c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d007      	beq.n	800a37c <TIM_Base_SetConfig+0x40>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a3b      	ldr	r2, [pc, #236]	; (800a45c <TIM_Base_SetConfig+0x120>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d003      	beq.n	800a37c <TIM_Base_SetConfig+0x40>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a3a      	ldr	r2, [pc, #232]	; (800a460 <TIM_Base_SetConfig+0x124>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d108      	bne.n	800a38e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a2f      	ldr	r2, [pc, #188]	; (800a450 <TIM_Base_SetConfig+0x114>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d02b      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39c:	d027      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a2c      	ldr	r2, [pc, #176]	; (800a454 <TIM_Base_SetConfig+0x118>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d023      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a2b      	ldr	r2, [pc, #172]	; (800a458 <TIM_Base_SetConfig+0x11c>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d01f      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a2a      	ldr	r2, [pc, #168]	; (800a45c <TIM_Base_SetConfig+0x120>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d01b      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a29      	ldr	r2, [pc, #164]	; (800a460 <TIM_Base_SetConfig+0x124>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d017      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a28      	ldr	r2, [pc, #160]	; (800a464 <TIM_Base_SetConfig+0x128>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d013      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a27      	ldr	r2, [pc, #156]	; (800a468 <TIM_Base_SetConfig+0x12c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00f      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a26      	ldr	r2, [pc, #152]	; (800a46c <TIM_Base_SetConfig+0x130>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d00b      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a25      	ldr	r2, [pc, #148]	; (800a470 <TIM_Base_SetConfig+0x134>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d007      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a24      	ldr	r2, [pc, #144]	; (800a474 <TIM_Base_SetConfig+0x138>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d003      	beq.n	800a3ee <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a23      	ldr	r2, [pc, #140]	; (800a478 <TIM_Base_SetConfig+0x13c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d108      	bne.n	800a400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a0a      	ldr	r2, [pc, #40]	; (800a450 <TIM_Base_SetConfig+0x114>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d003      	beq.n	800a434 <TIM_Base_SetConfig+0xf8>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a0c      	ldr	r2, [pc, #48]	; (800a460 <TIM_Base_SetConfig+0x124>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d103      	bne.n	800a43c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	615a      	str	r2, [r3, #20]
}
 800a442:	bf00      	nop
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	40010000 	.word	0x40010000
 800a454:	40000400 	.word	0x40000400
 800a458:	40000800 	.word	0x40000800
 800a45c:	40000c00 	.word	0x40000c00
 800a460:	40010400 	.word	0x40010400
 800a464:	40014000 	.word	0x40014000
 800a468:	40014400 	.word	0x40014400
 800a46c:	40014800 	.word	0x40014800
 800a470:	40001800 	.word	0x40001800
 800a474:	40001c00 	.word	0x40001c00
 800a478:	40002000 	.word	0x40002000

0800a47c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	f023 0201 	bic.w	r2, r3, #1
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	011b      	lsls	r3, r3, #4
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f023 030a 	bic.w	r3, r3, #10
 800a4b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	621a      	str	r2, [r3, #32]
}
 800a4ce:	bf00      	nop
 800a4d0:	371c      	adds	r7, #28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b087      	sub	sp, #28
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	f023 0210 	bic.w	r2, r3, #16
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	031b      	lsls	r3, r3, #12
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	011b      	lsls	r3, r3, #4
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	621a      	str	r2, [r3, #32]
}
 800a52e:	bf00      	nop
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b085      	sub	sp, #20
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4313      	orrs	r3, r2
 800a558:	f043 0307 	orr.w	r3, r3, #7
 800a55c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	609a      	str	r2, [r3, #8]
}
 800a564:	bf00      	nop
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a58a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	021a      	lsls	r2, r3, #8
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	431a      	orrs	r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	4313      	orrs	r3, r2
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	609a      	str	r2, [r3, #8]
}
 800a5a4:	bf00      	nop
 800a5a6:	371c      	adds	r7, #28
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d101      	bne.n	800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e05a      	b.n	800a67e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a21      	ldr	r2, [pc, #132]	; (800a68c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d022      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a614:	d01d      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a1d      	ldr	r2, [pc, #116]	; (800a690 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d018      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a1b      	ldr	r2, [pc, #108]	; (800a694 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d013      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a1a      	ldr	r2, [pc, #104]	; (800a698 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d00e      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a18      	ldr	r2, [pc, #96]	; (800a69c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d009      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a17      	ldr	r2, [pc, #92]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d004      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a15      	ldr	r2, [pc, #84]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d10c      	bne.n	800a66c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	4313      	orrs	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	40010000 	.word	0x40010000
 800a690:	40000400 	.word	0x40000400
 800a694:	40000800 	.word	0x40000800
 800a698:	40000c00 	.word	0x40000c00
 800a69c:	40010400 	.word	0x40010400
 800a6a0:	40014000 	.word	0x40014000
 800a6a4:	40001800 	.word	0x40001800

0800a6a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e03f      	b.n	800a762 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d106      	bne.n	800a6fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7f7 fe74 	bl	80023e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2224      	movs	r2, #36	; 0x24
 800a700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f829 	bl	800a76c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	691a      	ldr	r2, [r3, #16]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695a      	ldr	r2, [r3, #20]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68da      	ldr	r2, [r3, #12]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2220      	movs	r2, #32
 800a754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	b085      	sub	sp, #20
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68da      	ldr	r2, [r3, #12]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	430a      	orrs	r2, r1
 800a78a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	431a      	orrs	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	431a      	orrs	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a7ae:	f023 030c 	bic.w	r3, r3, #12
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	6812      	ldr	r2, [r2, #0]
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	695b      	ldr	r3, [r3, #20]
 800a7c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	699a      	ldr	r2, [r3, #24]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7da:	f040 818b 	bne.w	800aaf4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4ac1      	ldr	r2, [pc, #772]	; (800aae8 <UART_SetConfig+0x37c>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d005      	beq.n	800a7f4 <UART_SetConfig+0x88>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4abf      	ldr	r2, [pc, #764]	; (800aaec <UART_SetConfig+0x380>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	f040 80bd 	bne.w	800a96e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7f4:	f7fe fb5e 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 800a7f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	461d      	mov	r5, r3
 800a7fe:	f04f 0600 	mov.w	r6, #0
 800a802:	46a8      	mov	r8, r5
 800a804:	46b1      	mov	r9, r6
 800a806:	eb18 0308 	adds.w	r3, r8, r8
 800a80a:	eb49 0409 	adc.w	r4, r9, r9
 800a80e:	4698      	mov	r8, r3
 800a810:	46a1      	mov	r9, r4
 800a812:	eb18 0805 	adds.w	r8, r8, r5
 800a816:	eb49 0906 	adc.w	r9, r9, r6
 800a81a:	f04f 0100 	mov.w	r1, #0
 800a81e:	f04f 0200 	mov.w	r2, #0
 800a822:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a826:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a82a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a82e:	4688      	mov	r8, r1
 800a830:	4691      	mov	r9, r2
 800a832:	eb18 0005 	adds.w	r0, r8, r5
 800a836:	eb49 0106 	adc.w	r1, r9, r6
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	461d      	mov	r5, r3
 800a840:	f04f 0600 	mov.w	r6, #0
 800a844:	196b      	adds	r3, r5, r5
 800a846:	eb46 0406 	adc.w	r4, r6, r6
 800a84a:	461a      	mov	r2, r3
 800a84c:	4623      	mov	r3, r4
 800a84e:	f7f5 fccf 	bl	80001f0 <__aeabi_uldivmod>
 800a852:	4603      	mov	r3, r0
 800a854:	460c      	mov	r4, r1
 800a856:	461a      	mov	r2, r3
 800a858:	4ba5      	ldr	r3, [pc, #660]	; (800aaf0 <UART_SetConfig+0x384>)
 800a85a:	fba3 2302 	umull	r2, r3, r3, r2
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	461d      	mov	r5, r3
 800a868:	f04f 0600 	mov.w	r6, #0
 800a86c:	46a9      	mov	r9, r5
 800a86e:	46b2      	mov	sl, r6
 800a870:	eb19 0309 	adds.w	r3, r9, r9
 800a874:	eb4a 040a 	adc.w	r4, sl, sl
 800a878:	4699      	mov	r9, r3
 800a87a:	46a2      	mov	sl, r4
 800a87c:	eb19 0905 	adds.w	r9, r9, r5
 800a880:	eb4a 0a06 	adc.w	sl, sl, r6
 800a884:	f04f 0100 	mov.w	r1, #0
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a898:	4689      	mov	r9, r1
 800a89a:	4692      	mov	sl, r2
 800a89c:	eb19 0005 	adds.w	r0, r9, r5
 800a8a0:	eb4a 0106 	adc.w	r1, sl, r6
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	461d      	mov	r5, r3
 800a8aa:	f04f 0600 	mov.w	r6, #0
 800a8ae:	196b      	adds	r3, r5, r5
 800a8b0:	eb46 0406 	adc.w	r4, r6, r6
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	4623      	mov	r3, r4
 800a8b8:	f7f5 fc9a 	bl	80001f0 <__aeabi_uldivmod>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	460c      	mov	r4, r1
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4b8b      	ldr	r3, [pc, #556]	; (800aaf0 <UART_SetConfig+0x384>)
 800a8c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	2164      	movs	r1, #100	; 0x64
 800a8cc:	fb01 f303 	mul.w	r3, r1, r3
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	3332      	adds	r3, #50	; 0x32
 800a8d6:	4a86      	ldr	r2, [pc, #536]	; (800aaf0 <UART_SetConfig+0x384>)
 800a8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8dc:	095b      	lsrs	r3, r3, #5
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8e4:	4498      	add	r8, r3
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	461d      	mov	r5, r3
 800a8ea:	f04f 0600 	mov.w	r6, #0
 800a8ee:	46a9      	mov	r9, r5
 800a8f0:	46b2      	mov	sl, r6
 800a8f2:	eb19 0309 	adds.w	r3, r9, r9
 800a8f6:	eb4a 040a 	adc.w	r4, sl, sl
 800a8fa:	4699      	mov	r9, r3
 800a8fc:	46a2      	mov	sl, r4
 800a8fe:	eb19 0905 	adds.w	r9, r9, r5
 800a902:	eb4a 0a06 	adc.w	sl, sl, r6
 800a906:	f04f 0100 	mov.w	r1, #0
 800a90a:	f04f 0200 	mov.w	r2, #0
 800a90e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a912:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a916:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a91a:	4689      	mov	r9, r1
 800a91c:	4692      	mov	sl, r2
 800a91e:	eb19 0005 	adds.w	r0, r9, r5
 800a922:	eb4a 0106 	adc.w	r1, sl, r6
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	461d      	mov	r5, r3
 800a92c:	f04f 0600 	mov.w	r6, #0
 800a930:	196b      	adds	r3, r5, r5
 800a932:	eb46 0406 	adc.w	r4, r6, r6
 800a936:	461a      	mov	r2, r3
 800a938:	4623      	mov	r3, r4
 800a93a:	f7f5 fc59 	bl	80001f0 <__aeabi_uldivmod>
 800a93e:	4603      	mov	r3, r0
 800a940:	460c      	mov	r4, r1
 800a942:	461a      	mov	r2, r3
 800a944:	4b6a      	ldr	r3, [pc, #424]	; (800aaf0 <UART_SetConfig+0x384>)
 800a946:	fba3 1302 	umull	r1, r3, r3, r2
 800a94a:	095b      	lsrs	r3, r3, #5
 800a94c:	2164      	movs	r1, #100	; 0x64
 800a94e:	fb01 f303 	mul.w	r3, r1, r3
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	3332      	adds	r3, #50	; 0x32
 800a958:	4a65      	ldr	r2, [pc, #404]	; (800aaf0 <UART_SetConfig+0x384>)
 800a95a:	fba2 2303 	umull	r2, r3, r2, r3
 800a95e:	095b      	lsrs	r3, r3, #5
 800a960:	f003 0207 	and.w	r2, r3, #7
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4442      	add	r2, r8
 800a96a:	609a      	str	r2, [r3, #8]
 800a96c:	e26f      	b.n	800ae4e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a96e:	f7fe fa8d 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 800a972:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	461d      	mov	r5, r3
 800a978:	f04f 0600 	mov.w	r6, #0
 800a97c:	46a8      	mov	r8, r5
 800a97e:	46b1      	mov	r9, r6
 800a980:	eb18 0308 	adds.w	r3, r8, r8
 800a984:	eb49 0409 	adc.w	r4, r9, r9
 800a988:	4698      	mov	r8, r3
 800a98a:	46a1      	mov	r9, r4
 800a98c:	eb18 0805 	adds.w	r8, r8, r5
 800a990:	eb49 0906 	adc.w	r9, r9, r6
 800a994:	f04f 0100 	mov.w	r1, #0
 800a998:	f04f 0200 	mov.w	r2, #0
 800a99c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a9a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a9a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a9a8:	4688      	mov	r8, r1
 800a9aa:	4691      	mov	r9, r2
 800a9ac:	eb18 0005 	adds.w	r0, r8, r5
 800a9b0:	eb49 0106 	adc.w	r1, r9, r6
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	461d      	mov	r5, r3
 800a9ba:	f04f 0600 	mov.w	r6, #0
 800a9be:	196b      	adds	r3, r5, r5
 800a9c0:	eb46 0406 	adc.w	r4, r6, r6
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	4623      	mov	r3, r4
 800a9c8:	f7f5 fc12 	bl	80001f0 <__aeabi_uldivmod>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4b47      	ldr	r3, [pc, #284]	; (800aaf0 <UART_SetConfig+0x384>)
 800a9d4:	fba3 2302 	umull	r2, r3, r3, r2
 800a9d8:	095b      	lsrs	r3, r3, #5
 800a9da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	461d      	mov	r5, r3
 800a9e2:	f04f 0600 	mov.w	r6, #0
 800a9e6:	46a9      	mov	r9, r5
 800a9e8:	46b2      	mov	sl, r6
 800a9ea:	eb19 0309 	adds.w	r3, r9, r9
 800a9ee:	eb4a 040a 	adc.w	r4, sl, sl
 800a9f2:	4699      	mov	r9, r3
 800a9f4:	46a2      	mov	sl, r4
 800a9f6:	eb19 0905 	adds.w	r9, r9, r5
 800a9fa:	eb4a 0a06 	adc.w	sl, sl, r6
 800a9fe:	f04f 0100 	mov.w	r1, #0
 800aa02:	f04f 0200 	mov.w	r2, #0
 800aa06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa12:	4689      	mov	r9, r1
 800aa14:	4692      	mov	sl, r2
 800aa16:	eb19 0005 	adds.w	r0, r9, r5
 800aa1a:	eb4a 0106 	adc.w	r1, sl, r6
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	461d      	mov	r5, r3
 800aa24:	f04f 0600 	mov.w	r6, #0
 800aa28:	196b      	adds	r3, r5, r5
 800aa2a:	eb46 0406 	adc.w	r4, r6, r6
 800aa2e:	461a      	mov	r2, r3
 800aa30:	4623      	mov	r3, r4
 800aa32:	f7f5 fbdd 	bl	80001f0 <__aeabi_uldivmod>
 800aa36:	4603      	mov	r3, r0
 800aa38:	460c      	mov	r4, r1
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	4b2c      	ldr	r3, [pc, #176]	; (800aaf0 <UART_SetConfig+0x384>)
 800aa3e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa42:	095b      	lsrs	r3, r3, #5
 800aa44:	2164      	movs	r1, #100	; 0x64
 800aa46:	fb01 f303 	mul.w	r3, r1, r3
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	3332      	adds	r3, #50	; 0x32
 800aa50:	4a27      	ldr	r2, [pc, #156]	; (800aaf0 <UART_SetConfig+0x384>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa5e:	4498      	add	r8, r3
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	461d      	mov	r5, r3
 800aa64:	f04f 0600 	mov.w	r6, #0
 800aa68:	46a9      	mov	r9, r5
 800aa6a:	46b2      	mov	sl, r6
 800aa6c:	eb19 0309 	adds.w	r3, r9, r9
 800aa70:	eb4a 040a 	adc.w	r4, sl, sl
 800aa74:	4699      	mov	r9, r3
 800aa76:	46a2      	mov	sl, r4
 800aa78:	eb19 0905 	adds.w	r9, r9, r5
 800aa7c:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa80:	f04f 0100 	mov.w	r1, #0
 800aa84:	f04f 0200 	mov.w	r2, #0
 800aa88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa94:	4689      	mov	r9, r1
 800aa96:	4692      	mov	sl, r2
 800aa98:	eb19 0005 	adds.w	r0, r9, r5
 800aa9c:	eb4a 0106 	adc.w	r1, sl, r6
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	461d      	mov	r5, r3
 800aaa6:	f04f 0600 	mov.w	r6, #0
 800aaaa:	196b      	adds	r3, r5, r5
 800aaac:	eb46 0406 	adc.w	r4, r6, r6
 800aab0:	461a      	mov	r2, r3
 800aab2:	4623      	mov	r3, r4
 800aab4:	f7f5 fb9c 	bl	80001f0 <__aeabi_uldivmod>
 800aab8:	4603      	mov	r3, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	461a      	mov	r2, r3
 800aabe:	4b0c      	ldr	r3, [pc, #48]	; (800aaf0 <UART_SetConfig+0x384>)
 800aac0:	fba3 1302 	umull	r1, r3, r3, r2
 800aac4:	095b      	lsrs	r3, r3, #5
 800aac6:	2164      	movs	r1, #100	; 0x64
 800aac8:	fb01 f303 	mul.w	r3, r1, r3
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	3332      	adds	r3, #50	; 0x32
 800aad2:	4a07      	ldr	r2, [pc, #28]	; (800aaf0 <UART_SetConfig+0x384>)
 800aad4:	fba2 2303 	umull	r2, r3, r2, r3
 800aad8:	095b      	lsrs	r3, r3, #5
 800aada:	f003 0207 	and.w	r2, r3, #7
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4442      	add	r2, r8
 800aae4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aae6:	e1b2      	b.n	800ae4e <UART_SetConfig+0x6e2>
 800aae8:	40011000 	.word	0x40011000
 800aaec:	40011400 	.word	0x40011400
 800aaf0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4ad7      	ldr	r2, [pc, #860]	; (800ae58 <UART_SetConfig+0x6ec>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d005      	beq.n	800ab0a <UART_SetConfig+0x39e>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4ad6      	ldr	r2, [pc, #856]	; (800ae5c <UART_SetConfig+0x6f0>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	f040 80d1 	bne.w	800acac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab0a:	f7fe f9d3 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 800ab0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	469a      	mov	sl, r3
 800ab14:	f04f 0b00 	mov.w	fp, #0
 800ab18:	46d0      	mov	r8, sl
 800ab1a:	46d9      	mov	r9, fp
 800ab1c:	eb18 0308 	adds.w	r3, r8, r8
 800ab20:	eb49 0409 	adc.w	r4, r9, r9
 800ab24:	4698      	mov	r8, r3
 800ab26:	46a1      	mov	r9, r4
 800ab28:	eb18 080a 	adds.w	r8, r8, sl
 800ab2c:	eb49 090b 	adc.w	r9, r9, fp
 800ab30:	f04f 0100 	mov.w	r1, #0
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ab3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ab40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ab44:	4688      	mov	r8, r1
 800ab46:	4691      	mov	r9, r2
 800ab48:	eb1a 0508 	adds.w	r5, sl, r8
 800ab4c:	eb4b 0609 	adc.w	r6, fp, r9
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	4619      	mov	r1, r3
 800ab56:	f04f 0200 	mov.w	r2, #0
 800ab5a:	f04f 0300 	mov.w	r3, #0
 800ab5e:	f04f 0400 	mov.w	r4, #0
 800ab62:	0094      	lsls	r4, r2, #2
 800ab64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab68:	008b      	lsls	r3, r1, #2
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	4623      	mov	r3, r4
 800ab6e:	4628      	mov	r0, r5
 800ab70:	4631      	mov	r1, r6
 800ab72:	f7f5 fb3d 	bl	80001f0 <__aeabi_uldivmod>
 800ab76:	4603      	mov	r3, r0
 800ab78:	460c      	mov	r4, r1
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	4bb8      	ldr	r3, [pc, #736]	; (800ae60 <UART_SetConfig+0x6f4>)
 800ab7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab82:	095b      	lsrs	r3, r3, #5
 800ab84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	469b      	mov	fp, r3
 800ab8c:	f04f 0c00 	mov.w	ip, #0
 800ab90:	46d9      	mov	r9, fp
 800ab92:	46e2      	mov	sl, ip
 800ab94:	eb19 0309 	adds.w	r3, r9, r9
 800ab98:	eb4a 040a 	adc.w	r4, sl, sl
 800ab9c:	4699      	mov	r9, r3
 800ab9e:	46a2      	mov	sl, r4
 800aba0:	eb19 090b 	adds.w	r9, r9, fp
 800aba4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aba8:	f04f 0100 	mov.w	r1, #0
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800abb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800abbc:	4689      	mov	r9, r1
 800abbe:	4692      	mov	sl, r2
 800abc0:	eb1b 0509 	adds.w	r5, fp, r9
 800abc4:	eb4c 060a 	adc.w	r6, ip, sl
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	4619      	mov	r1, r3
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	f04f 0300 	mov.w	r3, #0
 800abd6:	f04f 0400 	mov.w	r4, #0
 800abda:	0094      	lsls	r4, r2, #2
 800abdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abe0:	008b      	lsls	r3, r1, #2
 800abe2:	461a      	mov	r2, r3
 800abe4:	4623      	mov	r3, r4
 800abe6:	4628      	mov	r0, r5
 800abe8:	4631      	mov	r1, r6
 800abea:	f7f5 fb01 	bl	80001f0 <__aeabi_uldivmod>
 800abee:	4603      	mov	r3, r0
 800abf0:	460c      	mov	r4, r1
 800abf2:	461a      	mov	r2, r3
 800abf4:	4b9a      	ldr	r3, [pc, #616]	; (800ae60 <UART_SetConfig+0x6f4>)
 800abf6:	fba3 1302 	umull	r1, r3, r3, r2
 800abfa:	095b      	lsrs	r3, r3, #5
 800abfc:	2164      	movs	r1, #100	; 0x64
 800abfe:	fb01 f303 	mul.w	r3, r1, r3
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	011b      	lsls	r3, r3, #4
 800ac06:	3332      	adds	r3, #50	; 0x32
 800ac08:	4a95      	ldr	r2, [pc, #596]	; (800ae60 <UART_SetConfig+0x6f4>)
 800ac0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0e:	095b      	lsrs	r3, r3, #5
 800ac10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac14:	4498      	add	r8, r3
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	469b      	mov	fp, r3
 800ac1a:	f04f 0c00 	mov.w	ip, #0
 800ac1e:	46d9      	mov	r9, fp
 800ac20:	46e2      	mov	sl, ip
 800ac22:	eb19 0309 	adds.w	r3, r9, r9
 800ac26:	eb4a 040a 	adc.w	r4, sl, sl
 800ac2a:	4699      	mov	r9, r3
 800ac2c:	46a2      	mov	sl, r4
 800ac2e:	eb19 090b 	adds.w	r9, r9, fp
 800ac32:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac36:	f04f 0100 	mov.w	r1, #0
 800ac3a:	f04f 0200 	mov.w	r2, #0
 800ac3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac4a:	4689      	mov	r9, r1
 800ac4c:	4692      	mov	sl, r2
 800ac4e:	eb1b 0509 	adds.w	r5, fp, r9
 800ac52:	eb4c 060a 	adc.w	r6, ip, sl
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	f04f 0400 	mov.w	r4, #0
 800ac68:	0094      	lsls	r4, r2, #2
 800ac6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac6e:	008b      	lsls	r3, r1, #2
 800ac70:	461a      	mov	r2, r3
 800ac72:	4623      	mov	r3, r4
 800ac74:	4628      	mov	r0, r5
 800ac76:	4631      	mov	r1, r6
 800ac78:	f7f5 faba 	bl	80001f0 <__aeabi_uldivmod>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	461a      	mov	r2, r3
 800ac82:	4b77      	ldr	r3, [pc, #476]	; (800ae60 <UART_SetConfig+0x6f4>)
 800ac84:	fba3 1302 	umull	r1, r3, r3, r2
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	2164      	movs	r1, #100	; 0x64
 800ac8c:	fb01 f303 	mul.w	r3, r1, r3
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	3332      	adds	r3, #50	; 0x32
 800ac96:	4a72      	ldr	r2, [pc, #456]	; (800ae60 <UART_SetConfig+0x6f4>)
 800ac98:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	f003 020f 	and.w	r2, r3, #15
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4442      	add	r2, r8
 800aca8:	609a      	str	r2, [r3, #8]
 800acaa:	e0d0      	b.n	800ae4e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800acac:	f7fe f8ee 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 800acb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	469a      	mov	sl, r3
 800acb6:	f04f 0b00 	mov.w	fp, #0
 800acba:	46d0      	mov	r8, sl
 800acbc:	46d9      	mov	r9, fp
 800acbe:	eb18 0308 	adds.w	r3, r8, r8
 800acc2:	eb49 0409 	adc.w	r4, r9, r9
 800acc6:	4698      	mov	r8, r3
 800acc8:	46a1      	mov	r9, r4
 800acca:	eb18 080a 	adds.w	r8, r8, sl
 800acce:	eb49 090b 	adc.w	r9, r9, fp
 800acd2:	f04f 0100 	mov.w	r1, #0
 800acd6:	f04f 0200 	mov.w	r2, #0
 800acda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800acde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ace2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ace6:	4688      	mov	r8, r1
 800ace8:	4691      	mov	r9, r2
 800acea:	eb1a 0508 	adds.w	r5, sl, r8
 800acee:	eb4b 0609 	adc.w	r6, fp, r9
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	4619      	mov	r1, r3
 800acf8:	f04f 0200 	mov.w	r2, #0
 800acfc:	f04f 0300 	mov.w	r3, #0
 800ad00:	f04f 0400 	mov.w	r4, #0
 800ad04:	0094      	lsls	r4, r2, #2
 800ad06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad0a:	008b      	lsls	r3, r1, #2
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	4623      	mov	r3, r4
 800ad10:	4628      	mov	r0, r5
 800ad12:	4631      	mov	r1, r6
 800ad14:	f7f5 fa6c 	bl	80001f0 <__aeabi_uldivmod>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	4b50      	ldr	r3, [pc, #320]	; (800ae60 <UART_SetConfig+0x6f4>)
 800ad20:	fba3 2302 	umull	r2, r3, r3, r2
 800ad24:	095b      	lsrs	r3, r3, #5
 800ad26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	469b      	mov	fp, r3
 800ad2e:	f04f 0c00 	mov.w	ip, #0
 800ad32:	46d9      	mov	r9, fp
 800ad34:	46e2      	mov	sl, ip
 800ad36:	eb19 0309 	adds.w	r3, r9, r9
 800ad3a:	eb4a 040a 	adc.w	r4, sl, sl
 800ad3e:	4699      	mov	r9, r3
 800ad40:	46a2      	mov	sl, r4
 800ad42:	eb19 090b 	adds.w	r9, r9, fp
 800ad46:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad4a:	f04f 0100 	mov.w	r1, #0
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad5e:	4689      	mov	r9, r1
 800ad60:	4692      	mov	sl, r2
 800ad62:	eb1b 0509 	adds.w	r5, fp, r9
 800ad66:	eb4c 060a 	adc.w	r6, ip, sl
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	f04f 0200 	mov.w	r2, #0
 800ad74:	f04f 0300 	mov.w	r3, #0
 800ad78:	f04f 0400 	mov.w	r4, #0
 800ad7c:	0094      	lsls	r4, r2, #2
 800ad7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad82:	008b      	lsls	r3, r1, #2
 800ad84:	461a      	mov	r2, r3
 800ad86:	4623      	mov	r3, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	f7f5 fa30 	bl	80001f0 <__aeabi_uldivmod>
 800ad90:	4603      	mov	r3, r0
 800ad92:	460c      	mov	r4, r1
 800ad94:	461a      	mov	r2, r3
 800ad96:	4b32      	ldr	r3, [pc, #200]	; (800ae60 <UART_SetConfig+0x6f4>)
 800ad98:	fba3 1302 	umull	r1, r3, r3, r2
 800ad9c:	095b      	lsrs	r3, r3, #5
 800ad9e:	2164      	movs	r1, #100	; 0x64
 800ada0:	fb01 f303 	mul.w	r3, r1, r3
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	011b      	lsls	r3, r3, #4
 800ada8:	3332      	adds	r3, #50	; 0x32
 800adaa:	4a2d      	ldr	r2, [pc, #180]	; (800ae60 <UART_SetConfig+0x6f4>)
 800adac:	fba2 2303 	umull	r2, r3, r2, r3
 800adb0:	095b      	lsrs	r3, r3, #5
 800adb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adb6:	4498      	add	r8, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	469b      	mov	fp, r3
 800adbc:	f04f 0c00 	mov.w	ip, #0
 800adc0:	46d9      	mov	r9, fp
 800adc2:	46e2      	mov	sl, ip
 800adc4:	eb19 0309 	adds.w	r3, r9, r9
 800adc8:	eb4a 040a 	adc.w	r4, sl, sl
 800adcc:	4699      	mov	r9, r3
 800adce:	46a2      	mov	sl, r4
 800add0:	eb19 090b 	adds.w	r9, r9, fp
 800add4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800add8:	f04f 0100 	mov.w	r1, #0
 800addc:	f04f 0200 	mov.w	r2, #0
 800ade0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ade4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ade8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800adec:	4689      	mov	r9, r1
 800adee:	4692      	mov	sl, r2
 800adf0:	eb1b 0509 	adds.w	r5, fp, r9
 800adf4:	eb4c 060a 	adc.w	r6, ip, sl
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	4619      	mov	r1, r3
 800adfe:	f04f 0200 	mov.w	r2, #0
 800ae02:	f04f 0300 	mov.w	r3, #0
 800ae06:	f04f 0400 	mov.w	r4, #0
 800ae0a:	0094      	lsls	r4, r2, #2
 800ae0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae10:	008b      	lsls	r3, r1, #2
 800ae12:	461a      	mov	r2, r3
 800ae14:	4623      	mov	r3, r4
 800ae16:	4628      	mov	r0, r5
 800ae18:	4631      	mov	r1, r6
 800ae1a:	f7f5 f9e9 	bl	80001f0 <__aeabi_uldivmod>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	460c      	mov	r4, r1
 800ae22:	461a      	mov	r2, r3
 800ae24:	4b0e      	ldr	r3, [pc, #56]	; (800ae60 <UART_SetConfig+0x6f4>)
 800ae26:	fba3 1302 	umull	r1, r3, r3, r2
 800ae2a:	095b      	lsrs	r3, r3, #5
 800ae2c:	2164      	movs	r1, #100	; 0x64
 800ae2e:	fb01 f303 	mul.w	r3, r1, r3
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	3332      	adds	r3, #50	; 0x32
 800ae38:	4a09      	ldr	r2, [pc, #36]	; (800ae60 <UART_SetConfig+0x6f4>)
 800ae3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae3e:	095b      	lsrs	r3, r3, #5
 800ae40:	f003 020f 	and.w	r2, r3, #15
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4442      	add	r2, r8
 800ae4a:	609a      	str	r2, [r3, #8]
}
 800ae4c:	e7ff      	b.n	800ae4e <UART_SetConfig+0x6e2>
 800ae4e:	bf00      	nop
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	40011000 	.word	0x40011000
 800ae5c:	40011400 	.word	0x40011400
 800ae60:	51eb851f 	.word	0x51eb851f

0800ae64 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d029      	beq.n	800aed2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae8e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae98:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800ae9e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800aea4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800aeaa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800aeb0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800aeb6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800aebc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800aec2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	601a      	str	r2, [r3, #0]
 800aed0:	e034      	b.n	800af3c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aede:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aee8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800aeee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800af02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af06:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af10:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800af16:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800af1c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800af22:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800af28:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b087      	sub	sp, #28
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800af56:	2300      	movs	r3, #0
 800af58:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d02e      	beq.n	800afc2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af70:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af80:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	3b01      	subs	r3, #1
 800af88:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800af8a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	3b01      	subs	r3, #1
 800af92:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800af94:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af9e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800afa8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	3b01      	subs	r3, #1
 800afb0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800afb2:	4313      	orrs	r3, r2
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	609a      	str	r2, [r3, #8]
 800afc0:	e03b      	b.n	800b03a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afd2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	3b01      	subs	r3, #1
 800afda:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800afe4:	4313      	orrs	r3, r2
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	4313      	orrs	r3, r2
 800afea:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aff8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	3b01      	subs	r3, #1
 800b006:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b008:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	3b01      	subs	r3, #1
 800b010:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800b012:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	3b01      	subs	r3, #1
 800b01a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800b01c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	3b01      	subs	r3, #1
 800b024:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b026:	4313      	orrs	r3, r2
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b064:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b06e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b076:	4313      	orrs	r3, r2
 800b078:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b080:	f7f9 fb90 	bl	80047a4 <HAL_GetTick>
 800b084:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b086:	e010      	b.n	800b0aa <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08e:	d00c      	beq.n	800b0aa <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <FMC_SDRAM_SendCommand+0x5e>
 800b096:	f7f9 fb85 	bl	80047a4 <HAL_GetTick>
 800b09a:	4602      	mov	r2, r0
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d201      	bcs.n	800b0aa <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e006      	b.n	800b0b8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	f003 0320 	and.w	r3, r3, #32
 800b0b2:	2b20      	cmp	r3, #32
 800b0b4:	d0e8      	beq.n	800b088 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3718      	adds	r7, #24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	695a      	ldr	r2, [r3, #20]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	431a      	orrs	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f043 0201 	orr.w	r2, r3, #1
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f023 0201 	bic.w	r2, r3, #1
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
	...

0800b12c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	019b      	lsls	r3, r3, #6
 800b13e:	f043 0220 	orr.w	r2, r3, #32
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3301      	adds	r3, #1
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4a09      	ldr	r2, [pc, #36]	; (800b174 <USB_FlushTxFifo+0x48>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d901      	bls.n	800b158 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e006      	b.n	800b166 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b20      	cmp	r3, #32
 800b162:	d0f0      	beq.n	800b146 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	00030d40 	.word	0x00030d40

0800b178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2210      	movs	r2, #16
 800b188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3301      	adds	r3, #1
 800b18e:	60fb      	str	r3, [r7, #12]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	4a09      	ldr	r2, [pc, #36]	; (800b1b8 <USB_FlushRxFifo+0x40>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d901      	bls.n	800b19c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e006      	b.n	800b1aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b10      	cmp	r3, #16
 800b1a6:	d0f0      	beq.n	800b18a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	00030d40 	.word	0x00030d40

0800b1bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b089      	sub	sp, #36	; 0x24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b1d2:	88fb      	ldrh	r3, [r7, #6]
 800b1d4:	3303      	adds	r3, #3
 800b1d6:	089b      	lsrs	r3, r3, #2
 800b1d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61bb      	str	r3, [r7, #24]
 800b1de:	e00b      	b.n	800b1f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	61bb      	str	r3, [r7, #24]
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d3ef      	bcc.n	800b1e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b200:	69fb      	ldr	r3, [r7, #28]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3724      	adds	r7, #36	; 0x24
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b20e:	b480      	push	{r7}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	4013      	ands	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b226:	68fb      	ldr	r3, [r7, #12]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	f003 0301 	and.w	r3, r3, #1
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b26e:	f023 0303 	bic.w	r3, r3, #3
 800b272:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	68f9      	ldr	r1, [r7, #12]
 800b284:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b288:	4313      	orrs	r3, r2
 800b28a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b28c:	78fb      	ldrb	r3, [r7, #3]
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d107      	bne.n	800b2a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b298:	461a      	mov	r2, r3
 800b29a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b29e:	6053      	str	r3, [r2, #4]
 800b2a0:	e009      	b.n	800b2b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b2a2:	78fb      	ldrb	r3, [r7, #3]
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d106      	bne.n	800b2b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f241 7370 	movw	r3, #6000	; 0x1770
 800b2b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	b29b      	uxth	r3, r3
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b087      	sub	sp, #28
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	015a      	lsls	r2, r3, #5
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	4413      	add	r3, r2
 800b306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	0c9b      	lsrs	r3, r3, #18
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d002      	beq.n	800b320 <USB_HC_Halt+0x3a>
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d16c      	bne.n	800b3fa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	4413      	add	r3, r2
 800b328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	0151      	lsls	r1, r2, #5
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	440a      	add	r2, r1
 800b336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b33a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b33e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d143      	bne.n	800b3d4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	015a      	lsls	r2, r3, #5
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	4413      	add	r3, r2
 800b354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	0151      	lsls	r1, r2, #5
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	440a      	add	r2, r1
 800b362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b36a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	015a      	lsls	r2, r3, #5
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	4413      	add	r3, r2
 800b374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	0151      	lsls	r1, r2, #5
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	440a      	add	r2, r1
 800b382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b38a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	4413      	add	r3, r2
 800b394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	0151      	lsls	r1, r2, #5
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3aa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	617b      	str	r3, [r7, #20]
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3b8:	d81d      	bhi.n	800b3f6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3d0:	d0ec      	beq.n	800b3ac <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3d2:	e080      	b.n	800b4d6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	015a      	lsls	r2, r3, #5
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	0151      	lsls	r1, r2, #5
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	440a      	add	r2, r1
 800b3ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3f2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3f4:	e06f      	b.n	800b4d6 <USB_HC_Halt+0x1f0>
          break;
 800b3f6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3f8:	e06d      	b.n	800b4d6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	015a      	lsls	r2, r3, #5
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	4413      	add	r3, r2
 800b402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	0151      	lsls	r1, r2, #5
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	440a      	add	r2, r1
 800b410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b418:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d143      	bne.n	800b4b2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	4413      	add	r3, r2
 800b432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	0151      	lsls	r1, r2, #5
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	440a      	add	r2, r1
 800b440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b448:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	015a      	lsls	r2, r3, #5
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	4413      	add	r3, r2
 800b452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	0151      	lsls	r1, r2, #5
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	440a      	add	r2, r1
 800b460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b468:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	4413      	add	r3, r2
 800b472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b484:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b488:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	3301      	adds	r3, #1
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b496:	d81d      	bhi.n	800b4d4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4ae:	d0ec      	beq.n	800b48a <USB_HC_Halt+0x1a4>
 800b4b0:	e011      	b.n	800b4d6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	0151      	lsls	r1, r2, #5
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	440a      	add	r2, r1
 800b4c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	e000      	b.n	800b4d6 <USB_HC_Halt+0x1f0>
          break;
 800b4d4:	bf00      	nop
    }
  }

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	371c      	adds	r7, #28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff fe07 	bl	800b108 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b4fa:	2110      	movs	r1, #16
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff fe15 	bl	800b12c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff fe38 	bl	800b178 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b508:	2300      	movs	r3, #0
 800b50a:	613b      	str	r3, [r7, #16]
 800b50c:	e01f      	b.n	800b54e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b524:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b52c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b534:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b542:	461a      	mov	r2, r3
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	3301      	adds	r3, #1
 800b54c:	613b      	str	r3, [r7, #16]
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2b0f      	cmp	r3, #15
 800b552:	d9dc      	bls.n	800b50e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b554:	2300      	movs	r3, #0
 800b556:	613b      	str	r3, [r7, #16]
 800b558:	e034      	b.n	800b5c4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	015a      	lsls	r2, r3, #5
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	4413      	add	r3, r2
 800b562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b570:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b578:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b580:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b58e:	461a      	mov	r2, r3
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	3301      	adds	r3, #1
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5a0:	d80c      	bhi.n	800b5bc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	015a      	lsls	r2, r3, #5
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5b8:	d0ec      	beq.n	800b594 <USB_StopHost+0xb0>
 800b5ba:	e000      	b.n	800b5be <USB_StopHost+0xda>
        break;
 800b5bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	613b      	str	r3, [r7, #16]
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2b0f      	cmp	r3, #15
 800b5c8:	d9c7      	bls.n	800b55a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f04f 32ff 	mov.w	r2, #4294967295
 800b5de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff fd80 	bl	800b0e6 <USB_EnableGlobalInt>

  return HAL_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f804 	bl	800b614 <USBH_HandleSof>
}
 800b60c:	bf00      	nop
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b0b      	cmp	r3, #11
 800b624:	d10a      	bne.n	800b63c <USBH_HandleSof+0x28>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d005      	beq.n	800b63c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	4798      	blx	r3
  }
}
 800b63c:	bf00      	nop
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b668:	2200      	movs	r2, #0
 800b66a:	4619      	mov	r1, r3
 800b66c:	f000 f8ae 	bl	800b7cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b670:	bf00      	nop
}
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b688:	bf00      	nop
}
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	f000 f87e 	bl	800b7cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f001 f902 	bl	800c904 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	791b      	ldrb	r3, [r3, #4]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f830 	bl	800b76c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	795b      	ldrb	r3, [r3, #5]
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f82a 	bl	800b76c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b72c:	2200      	movs	r2, #0
 800b72e:	4619      	mov	r1, r3
 800b730:	f000 f84c 	bl	800b7cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b75a:	2200      	movs	r2, #0
 800b75c:	4619      	mov	r1, r3
 800b75e:	f000 f835 	bl	800b7cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b778:	78fb      	ldrb	r3, [r7, #3]
 800b77a:	2b0a      	cmp	r3, #10
 800b77c:	d80d      	bhi.n	800b79a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b77e:	78fb      	ldrb	r3, [r7, #3]
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	33e0      	adds	r3, #224	; 0xe0
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4413      	add	r3, r2
 800b788:	685a      	ldr	r2, [r3, #4]
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	33e0      	adds	r3, #224	; 0xe0
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	440b      	add	r3, r1
 800b798:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ae:	f3ef 8305 	mrs	r3, IPSR
 800b7b2:	607b      	str	r3, [r7, #4]
  return(result);
 800b7b4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	bf14      	ite	ne
 800b7ba:	2301      	movne	r3, #1
 800b7bc:	2300      	moveq	r3, #0
 800b7be:	b2db      	uxtb	r3, r3
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <osMessagePut+0x1e>
    ticks = 1;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b7ea:	f7ff ffdd 	bl	800b7a8 <inHandlerMode>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d018      	beq.n	800b826 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b7f4:	f107 0210 	add.w	r2, r7, #16
 800b7f8:	f107 0108 	add.w	r1, r7, #8
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 f9a6 	bl	800bb50 <xQueueGenericSendFromISR>
 800b804:	4603      	mov	r3, r0
 800b806:	2b01      	cmp	r3, #1
 800b808:	d001      	beq.n	800b80e <osMessagePut+0x42>
      return osErrorOS;
 800b80a:	23ff      	movs	r3, #255	; 0xff
 800b80c:	e018      	b.n	800b840 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d014      	beq.n	800b83e <osMessagePut+0x72>
 800b814:	4b0c      	ldr	r3, [pc, #48]	; (800b848 <osMessagePut+0x7c>)
 800b816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b81a:	601a      	str	r2, [r3, #0]
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	e00b      	b.n	800b83e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b826:	f107 0108 	add.w	r1, r7, #8
 800b82a:	2300      	movs	r3, #0
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f000 f894 	bl	800b95c <xQueueGenericSend>
 800b834:	4603      	mov	r3, r0
 800b836:	2b01      	cmp	r3, #1
 800b838:	d001      	beq.n	800b83e <osMessagePut+0x72>
      return osErrorOS;
 800b83a:	23ff      	movs	r3, #255	; 0xff
 800b83c:	e000      	b.n	800b840 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	689a      	ldr	r2, [r3, #8]
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	683a      	ldr	r2, [r7, #0]
 800b876:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	601a      	str	r2, [r3, #0]
}
 800b888:	bf00      	nop
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8aa:	d103      	bne.n	800b8b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	e00c      	b.n	800b8ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	60fb      	str	r3, [r7, #12]
 800b8ba:	e002      	b.n	800b8c2 <vListInsert+0x2e>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d2f6      	bcs.n	800b8bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	601a      	str	r2, [r3, #0]
}
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b906:	b480      	push	{r7}
 800b908:	b085      	sub	sp, #20
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	6892      	ldr	r2, [r2, #8]
 800b91c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6852      	ldr	r2, [r2, #4]
 800b926:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d103      	bne.n	800b93a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	1e5a      	subs	r2, r3, #1
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
	...

0800b95c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08e      	sub	sp, #56	; 0x38
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
 800b968:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b96a:	2300      	movs	r3, #0
 800b96c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	2b00      	cmp	r3, #0
 800b976:	d109      	bne.n	800b98c <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	62bb      	str	r3, [r7, #40]	; 0x28
 800b98a:	e7fe      	b.n	800b98a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d103      	bne.n	800b99a <xQueueGenericSend+0x3e>
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <xQueueGenericSend+0x42>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <xQueueGenericSend+0x44>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d109      	bne.n	800b9b8 <xQueueGenericSend+0x5c>
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9b6:	e7fe      	b.n	800b9b6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d103      	bne.n	800b9c6 <xQueueGenericSend+0x6a>
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d101      	bne.n	800b9ca <xQueueGenericSend+0x6e>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e000      	b.n	800b9cc <xQueueGenericSend+0x70>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d109      	bne.n	800b9e4 <xQueueGenericSend+0x88>
 800b9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	623b      	str	r3, [r7, #32]
 800b9e2:	e7fe      	b.n	800b9e2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9e4:	f000 fd26 	bl	800c434 <xTaskGetSchedulerState>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <xQueueGenericSend+0x98>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <xQueueGenericSend+0x9c>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e000      	b.n	800b9fa <xQueueGenericSend+0x9e>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d109      	bne.n	800ba12 <xQueueGenericSend+0xb6>
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	61fb      	str	r3, [r7, #28]
 800ba10:	e7fe      	b.n	800ba10 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba12:	f000 fe31 	bl	800c678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d302      	bcc.n	800ba28 <xQueueGenericSend+0xcc>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d129      	bne.n	800ba7c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	68b9      	ldr	r1, [r7, #8]
 800ba2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba2e:	f000 f923 	bl	800bc78 <prvCopyDataToQueue>
 800ba32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d010      	beq.n	800ba5e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	3324      	adds	r3, #36	; 0x24
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 fbf3 	bl	800c22c <xTaskRemoveFromEventList>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d013      	beq.n	800ba74 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba4c:	4b3f      	ldr	r3, [pc, #252]	; (800bb4c <xQueueGenericSend+0x1f0>)
 800ba4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba52:	601a      	str	r2, [r3, #0]
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	e00a      	b.n	800ba74 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d007      	beq.n	800ba74 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba64:	4b39      	ldr	r3, [pc, #228]	; (800bb4c <xQueueGenericSend+0x1f0>)
 800ba66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba6a:	601a      	str	r2, [r3, #0]
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba74:	f000 fe2e 	bl	800c6d4 <vPortExitCritical>
				return pdPASS;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e063      	b.n	800bb44 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d103      	bne.n	800ba8a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba82:	f000 fe27 	bl	800c6d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e05c      	b.n	800bb44 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba90:	f107 0314 	add.w	r3, r7, #20
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 fc2b 	bl	800c2f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba9e:	f000 fe19 	bl	800c6d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baa2:	f000 f9bd 	bl	800be20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baa6:	f000 fde7 	bl	800c678 <vPortEnterCritical>
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bab0:	b25b      	sxtb	r3, r3
 800bab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab6:	d103      	bne.n	800bac0 <xQueueGenericSend+0x164>
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2200      	movs	r2, #0
 800babc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bac6:	b25b      	sxtb	r3, r3
 800bac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bacc:	d103      	bne.n	800bad6 <xQueueGenericSend+0x17a>
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bad6:	f000 fdfd 	bl	800c6d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bada:	1d3a      	adds	r2, r7, #4
 800badc:	f107 0314 	add.w	r3, r7, #20
 800bae0:	4611      	mov	r1, r2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 fc1a 	bl	800c31c <xTaskCheckForTimeOut>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d124      	bne.n	800bb38 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800baee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baf0:	f000 f97e 	bl	800bdf0 <prvIsQueueFull>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d018      	beq.n	800bb2c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	3310      	adds	r3, #16
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4611      	mov	r1, r2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 fb6e 	bl	800c1e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb0a:	f000 f91f 	bl	800bd4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb0e:	f000 f995 	bl	800be3c <xTaskResumeAll>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f47f af7c 	bne.w	800ba12 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bb1a:	4b0c      	ldr	r3, [pc, #48]	; (800bb4c <xQueueGenericSend+0x1f0>)
 800bb1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	e772      	b.n	800ba12 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb2e:	f000 f90d 	bl	800bd4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb32:	f000 f983 	bl	800be3c <xTaskResumeAll>
 800bb36:	e76c      	b.n	800ba12 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb3a:	f000 f907 	bl	800bd4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb3e:	f000 f97d 	bl	800be3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3738      	adds	r7, #56	; 0x38
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	e000ed04 	.word	0xe000ed04

0800bb50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b08e      	sub	sp, #56	; 0x38
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d109      	bne.n	800bb7c <xQueueGenericSendFromISR+0x2c>
 800bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7a:	e7fe      	b.n	800bb7a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d103      	bne.n	800bb8a <xQueueGenericSendFromISR+0x3a>
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <xQueueGenericSendFromISR+0x3e>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e000      	b.n	800bb90 <xQueueGenericSendFromISR+0x40>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d109      	bne.n	800bba8 <xQueueGenericSendFromISR+0x58>
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	623b      	str	r3, [r7, #32]
 800bba6:	e7fe      	b.n	800bba6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d103      	bne.n	800bbb6 <xQueueGenericSendFromISR+0x66>
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d101      	bne.n	800bbba <xQueueGenericSendFromISR+0x6a>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <xQueueGenericSendFromISR+0x6c>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d109      	bne.n	800bbd4 <xQueueGenericSendFromISR+0x84>
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	61fb      	str	r3, [r7, #28]
 800bbd2:	e7fe      	b.n	800bbd2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbd4:	f000 fe00 	bl	800c7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bbd8:	f3ef 8211 	mrs	r2, BASEPRI
 800bbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	61ba      	str	r2, [r7, #24]
 800bbee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbf0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d302      	bcc.n	800bc06 <xQueueGenericSendFromISR+0xb6>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d12c      	bne.n	800bc60 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc16:	f000 f82f 	bl	800bc78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc1a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc22:	d112      	bne.n	800bc4a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d016      	beq.n	800bc5a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	3324      	adds	r3, #36	; 0x24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 fafb 	bl	800c22c <xTaskRemoveFromEventList>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00b      	beq.n	800bc5a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	601a      	str	r2, [r3, #0]
 800bc48:	e007      	b.n	800bc5a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc4e:	3301      	adds	r3, #1
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	b25a      	sxtb	r2, r3
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bc5e:	e001      	b.n	800bc64 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	637b      	str	r3, [r7, #52]	; 0x34
 800bc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc66:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3738      	adds	r7, #56	; 0x38
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc84:	2300      	movs	r3, #0
 800bc86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10d      	bne.n	800bcb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d14d      	bne.n	800bd3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fbe4 	bl	800c470 <xTaskPriorityDisinherit>
 800bca8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	609a      	str	r2, [r3, #8]
 800bcb0:	e043      	b.n	800bd3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d119      	bne.n	800bcec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6858      	ldr	r0, [r3, #4]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	68b9      	ldr	r1, [r7, #8]
 800bcc4:	f000 fe98 	bl	800c9f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd0:	441a      	add	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	685a      	ldr	r2, [r3, #4]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d32b      	bcc.n	800bd3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	605a      	str	r2, [r3, #4]
 800bcea:	e026      	b.n	800bd3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	68d8      	ldr	r0, [r3, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	68b9      	ldr	r1, [r7, #8]
 800bcf8:	f000 fe7e 	bl	800c9f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	68da      	ldr	r2, [r3, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd04:	425b      	negs	r3, r3
 800bd06:	441a      	add	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	68da      	ldr	r2, [r3, #12]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d207      	bcs.n	800bd28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	689a      	ldr	r2, [r3, #8]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd20:	425b      	negs	r3, r3
 800bd22:	441a      	add	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d105      	bne.n	800bd3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	1c5a      	adds	r2, r3, #1
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bd42:	697b      	ldr	r3, [r7, #20]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd54:	f000 fc90 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd60:	e011      	b.n	800bd86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d012      	beq.n	800bd90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3324      	adds	r3, #36	; 0x24
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 fa5c 	bl	800c22c <xTaskRemoveFromEventList>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd7a:	f000 fb2f 	bl	800c3dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	dce9      	bgt.n	800bd62 <prvUnlockQueue+0x16>
 800bd8e:	e000      	b.n	800bd92 <prvUnlockQueue+0x46>
					break;
 800bd90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	22ff      	movs	r2, #255	; 0xff
 800bd96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd9a:	f000 fc9b 	bl	800c6d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd9e:	f000 fc6b 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bda8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdaa:	e011      	b.n	800bdd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d012      	beq.n	800bdda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	3310      	adds	r3, #16
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 fa37 	bl	800c22c <xTaskRemoveFromEventList>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d001      	beq.n	800bdc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bdc4:	f000 fb0a 	bl	800c3dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	dce9      	bgt.n	800bdac <prvUnlockQueue+0x60>
 800bdd8:	e000      	b.n	800bddc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bdda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	22ff      	movs	r2, #255	; 0xff
 800bde0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bde4:	f000 fc76 	bl	800c6d4 <vPortExitCritical>
}
 800bde8:	bf00      	nop
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdf8:	f000 fc3e 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be04:	429a      	cmp	r2, r3
 800be06:	d102      	bne.n	800be0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be08:	2301      	movs	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	e001      	b.n	800be12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be12:	f000 fc5f 	bl	800c6d4 <vPortExitCritical>

	return xReturn;
 800be16:	68fb      	ldr	r3, [r7, #12]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800be20:	b480      	push	{r7}
 800be22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800be24:	4b04      	ldr	r3, [pc, #16]	; (800be38 <vTaskSuspendAll+0x18>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	4a03      	ldr	r2, [pc, #12]	; (800be38 <vTaskSuspendAll+0x18>)
 800be2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800be2e:	bf00      	nop
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	200003ec 	.word	0x200003ec

0800be3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be46:	2300      	movs	r3, #0
 800be48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be4a:	4b41      	ldr	r3, [pc, #260]	; (800bf50 <xTaskResumeAll+0x114>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d109      	bne.n	800be66 <xTaskResumeAll+0x2a>
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	e7fe      	b.n	800be64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be66:	f000 fc07 	bl	800c678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be6a:	4b39      	ldr	r3, [pc, #228]	; (800bf50 <xTaskResumeAll+0x114>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3b01      	subs	r3, #1
 800be70:	4a37      	ldr	r2, [pc, #220]	; (800bf50 <xTaskResumeAll+0x114>)
 800be72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be74:	4b36      	ldr	r3, [pc, #216]	; (800bf50 <xTaskResumeAll+0x114>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d161      	bne.n	800bf40 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be7c:	4b35      	ldr	r3, [pc, #212]	; (800bf54 <xTaskResumeAll+0x118>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d05d      	beq.n	800bf40 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be84:	e02e      	b.n	800bee4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be86:	4b34      	ldr	r3, [pc, #208]	; (800bf58 <xTaskResumeAll+0x11c>)
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3318      	adds	r3, #24
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fd37 	bl	800b906 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3304      	adds	r3, #4
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff fd32 	bl	800b906 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea6:	2201      	movs	r2, #1
 800bea8:	409a      	lsls	r2, r3
 800beaa:	4b2c      	ldr	r3, [pc, #176]	; (800bf5c <xTaskResumeAll+0x120>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4313      	orrs	r3, r2
 800beb0:	4a2a      	ldr	r2, [pc, #168]	; (800bf5c <xTaskResumeAll+0x120>)
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4a27      	ldr	r2, [pc, #156]	; (800bf60 <xTaskResumeAll+0x124>)
 800bec2:	441a      	add	r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4619      	mov	r1, r3
 800beca:	4610      	mov	r0, r2
 800becc:	f7ff fcbe 	bl	800b84c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	4b23      	ldr	r3, [pc, #140]	; (800bf64 <xTaskResumeAll+0x128>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beda:	429a      	cmp	r2, r3
 800bedc:	d302      	bcc.n	800bee4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800bede:	4b22      	ldr	r3, [pc, #136]	; (800bf68 <xTaskResumeAll+0x12c>)
 800bee0:	2201      	movs	r2, #1
 800bee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bee4:	4b1c      	ldr	r3, [pc, #112]	; (800bf58 <xTaskResumeAll+0x11c>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1cc      	bne.n	800be86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bef2:	f000 fa7f 	bl	800c3f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bef6:	4b1d      	ldr	r3, [pc, #116]	; (800bf6c <xTaskResumeAll+0x130>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d010      	beq.n	800bf24 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf02:	f000 f837 	bl	800bf74 <xTaskIncrementTick>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800bf0c:	4b16      	ldr	r3, [pc, #88]	; (800bf68 <xTaskResumeAll+0x12c>)
 800bf0e:	2201      	movs	r2, #1
 800bf10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3b01      	subs	r3, #1
 800bf16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1f1      	bne.n	800bf02 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800bf1e:	4b13      	ldr	r3, [pc, #76]	; (800bf6c <xTaskResumeAll+0x130>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf24:	4b10      	ldr	r3, [pc, #64]	; (800bf68 <xTaskResumeAll+0x12c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d009      	beq.n	800bf40 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf30:	4b0f      	ldr	r3, [pc, #60]	; (800bf70 <xTaskResumeAll+0x134>)
 800bf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf40:	f000 fbc8 	bl	800c6d4 <vPortExitCritical>

	return xAlreadyYielded;
 800bf44:	68bb      	ldr	r3, [r7, #8]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	200003ec 	.word	0x200003ec
 800bf54:	200003cc 	.word	0x200003cc
 800bf58:	200003a4 	.word	0x200003a4
 800bf5c:	200003d4 	.word	0x200003d4
 800bf60:	20000310 	.word	0x20000310
 800bf64:	2000030c 	.word	0x2000030c
 800bf68:	200003e0 	.word	0x200003e0
 800bf6c:	200003dc 	.word	0x200003dc
 800bf70:	e000ed04 	.word	0xe000ed04

0800bf74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf7e:	4b4e      	ldr	r3, [pc, #312]	; (800c0b8 <xTaskIncrementTick+0x144>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f040 8087 	bne.w	800c096 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf88:	4b4c      	ldr	r3, [pc, #304]	; (800c0bc <xTaskIncrementTick+0x148>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf90:	4a4a      	ldr	r2, [pc, #296]	; (800c0bc <xTaskIncrementTick+0x148>)
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d11f      	bne.n	800bfdc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf9c:	4b48      	ldr	r3, [pc, #288]	; (800c0c0 <xTaskIncrementTick+0x14c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d009      	beq.n	800bfba <xTaskIncrementTick+0x46>
 800bfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfaa:	f383 8811 	msr	BASEPRI, r3
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	e7fe      	b.n	800bfb8 <xTaskIncrementTick+0x44>
 800bfba:	4b41      	ldr	r3, [pc, #260]	; (800c0c0 <xTaskIncrementTick+0x14c>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	60fb      	str	r3, [r7, #12]
 800bfc0:	4b40      	ldr	r3, [pc, #256]	; (800c0c4 <xTaskIncrementTick+0x150>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a3e      	ldr	r2, [pc, #248]	; (800c0c0 <xTaskIncrementTick+0x14c>)
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	4a3e      	ldr	r2, [pc, #248]	; (800c0c4 <xTaskIncrementTick+0x150>)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	4b3e      	ldr	r3, [pc, #248]	; (800c0c8 <xTaskIncrementTick+0x154>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	4a3c      	ldr	r2, [pc, #240]	; (800c0c8 <xTaskIncrementTick+0x154>)
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	f000 fa0c 	bl	800c3f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfdc:	4b3b      	ldr	r3, [pc, #236]	; (800c0cc <xTaskIncrementTick+0x158>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d348      	bcc.n	800c078 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfe6:	4b36      	ldr	r3, [pc, #216]	; (800c0c0 <xTaskIncrementTick+0x14c>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d104      	bne.n	800bffa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bff0:	4b36      	ldr	r3, [pc, #216]	; (800c0cc <xTaskIncrementTick+0x158>)
 800bff2:	f04f 32ff 	mov.w	r2, #4294967295
 800bff6:	601a      	str	r2, [r3, #0]
					break;
 800bff8:	e03e      	b.n	800c078 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffa:	4b31      	ldr	r3, [pc, #196]	; (800c0c0 <xTaskIncrementTick+0x14c>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d203      	bcs.n	800c01a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c012:	4a2e      	ldr	r2, [pc, #184]	; (800c0cc <xTaskIncrementTick+0x158>)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c018:	e02e      	b.n	800c078 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	3304      	adds	r3, #4
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff fc71 	bl	800b906 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d004      	beq.n	800c036 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	3318      	adds	r3, #24
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff fc68 	bl	800b906 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	2201      	movs	r2, #1
 800c03c:	409a      	lsls	r2, r3
 800c03e:	4b24      	ldr	r3, [pc, #144]	; (800c0d0 <xTaskIncrementTick+0x15c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4313      	orrs	r3, r2
 800c044:	4a22      	ldr	r2, [pc, #136]	; (800c0d0 <xTaskIncrementTick+0x15c>)
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4a1f      	ldr	r2, [pc, #124]	; (800c0d4 <xTaskIncrementTick+0x160>)
 800c056:	441a      	add	r2, r3
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	3304      	adds	r3, #4
 800c05c:	4619      	mov	r1, r3
 800c05e:	4610      	mov	r0, r2
 800c060:	f7ff fbf4 	bl	800b84c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c068:	4b1b      	ldr	r3, [pc, #108]	; (800c0d8 <xTaskIncrementTick+0x164>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06e:	429a      	cmp	r2, r3
 800c070:	d3b9      	bcc.n	800bfe6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c072:	2301      	movs	r3, #1
 800c074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c076:	e7b6      	b.n	800bfe6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c078:	4b17      	ldr	r3, [pc, #92]	; (800c0d8 <xTaskIncrementTick+0x164>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07e:	4915      	ldr	r1, [pc, #84]	; (800c0d4 <xTaskIncrementTick+0x160>)
 800c080:	4613      	mov	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	440b      	add	r3, r1
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d907      	bls.n	800c0a0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c090:	2301      	movs	r3, #1
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	e004      	b.n	800c0a0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c096:	4b11      	ldr	r3, [pc, #68]	; (800c0dc <xTaskIncrementTick+0x168>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3301      	adds	r3, #1
 800c09c:	4a0f      	ldr	r2, [pc, #60]	; (800c0dc <xTaskIncrementTick+0x168>)
 800c09e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <xTaskIncrementTick+0x16c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c0ac:	697b      	ldr	r3, [r7, #20]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	200003ec 	.word	0x200003ec
 800c0bc:	200003d0 	.word	0x200003d0
 800c0c0:	2000039c 	.word	0x2000039c
 800c0c4:	200003a0 	.word	0x200003a0
 800c0c8:	200003e4 	.word	0x200003e4
 800c0cc:	200003e8 	.word	0x200003e8
 800c0d0:	200003d4 	.word	0x200003d4
 800c0d4:	20000310 	.word	0x20000310
 800c0d8:	2000030c 	.word	0x2000030c
 800c0dc:	200003dc 	.word	0x200003dc
 800c0e0:	200003e0 	.word	0x200003e0

0800c0e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0ea:	4b39      	ldr	r3, [pc, #228]	; (800c1d0 <vTaskSwitchContext+0xec>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0f2:	4b38      	ldr	r3, [pc, #224]	; (800c1d4 <vTaskSwitchContext+0xf0>)
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0f8:	e065      	b.n	800c1c6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800c0fa:	4b36      	ldr	r3, [pc, #216]	; (800c1d4 <vTaskSwitchContext+0xf0>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c100:	4b35      	ldr	r3, [pc, #212]	; (800c1d8 <vTaskSwitchContext+0xf4>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c106:	61fb      	str	r3, [r7, #28]
 800c108:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c10c:	61bb      	str	r3, [r7, #24]
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	429a      	cmp	r2, r3
 800c116:	d111      	bne.n	800c13c <vTaskSwitchContext+0x58>
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	3304      	adds	r3, #4
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	429a      	cmp	r2, r3
 800c122:	d10b      	bne.n	800c13c <vTaskSwitchContext+0x58>
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	3308      	adds	r3, #8
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	69ba      	ldr	r2, [r7, #24]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d105      	bne.n	800c13c <vTaskSwitchContext+0x58>
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	330c      	adds	r3, #12
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d008      	beq.n	800c14e <vTaskSwitchContext+0x6a>
 800c13c:	4b26      	ldr	r3, [pc, #152]	; (800c1d8 <vTaskSwitchContext+0xf4>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	4b25      	ldr	r3, [pc, #148]	; (800c1d8 <vTaskSwitchContext+0xf4>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3334      	adds	r3, #52	; 0x34
 800c146:	4619      	mov	r1, r3
 800c148:	4610      	mov	r0, r2
 800c14a:	f7f4 fd93 	bl	8000c74 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14e:	4b23      	ldr	r3, [pc, #140]	; (800c1dc <vTaskSwitchContext+0xf8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	fab3 f383 	clz	r3, r3
 800c15a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c15c:	7afb      	ldrb	r3, [r7, #11]
 800c15e:	f1c3 031f 	rsb	r3, r3, #31
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	491e      	ldr	r1, [pc, #120]	; (800c1e0 <vTaskSwitchContext+0xfc>)
 800c166:	697a      	ldr	r2, [r7, #20]
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	440b      	add	r3, r1
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d109      	bne.n	800c18c <vTaskSwitchContext+0xa8>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	607b      	str	r3, [r7, #4]
 800c18a:	e7fe      	b.n	800c18a <vTaskSwitchContext+0xa6>
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4a12      	ldr	r2, [pc, #72]	; (800c1e0 <vTaskSwitchContext+0xfc>)
 800c198:	4413      	add	r3, r2
 800c19a:	613b      	str	r3, [r7, #16]
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	605a      	str	r2, [r3, #4]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d104      	bne.n	800c1bc <vTaskSwitchContext+0xd8>
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	605a      	str	r2, [r3, #4]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	4a05      	ldr	r2, [pc, #20]	; (800c1d8 <vTaskSwitchContext+0xf4>)
 800c1c4:	6013      	str	r3, [r2, #0]
}
 800c1c6:	bf00      	nop
 800c1c8:	3720      	adds	r7, #32
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200003ec 	.word	0x200003ec
 800c1d4:	200003e0 	.word	0x200003e0
 800c1d8:	2000030c 	.word	0x2000030c
 800c1dc:	200003d4 	.word	0x200003d4
 800c1e0:	20000310 	.word	0x20000310

0800c1e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d109      	bne.n	800c208 <vTaskPlaceOnEventList+0x24>
 800c1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	60fb      	str	r3, [r7, #12]
 800c206:	e7fe      	b.n	800c206 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c208:	4b07      	ldr	r3, [pc, #28]	; (800c228 <vTaskPlaceOnEventList+0x44>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3318      	adds	r3, #24
 800c20e:	4619      	mov	r1, r3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7ff fb3f 	bl	800b894 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c216:	2101      	movs	r1, #1
 800c218:	6838      	ldr	r0, [r7, #0]
 800c21a:	f000 f9ad 	bl	800c578 <prvAddCurrentTaskToDelayedList>
}
 800c21e:	bf00      	nop
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	2000030c 	.word	0x2000030c

0800c22c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d109      	bne.n	800c256 <xTaskRemoveFromEventList+0x2a>
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	e7fe      	b.n	800c254 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	3318      	adds	r3, #24
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff fb53 	bl	800b906 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c260:	4b1d      	ldr	r3, [pc, #116]	; (800c2d8 <xTaskRemoveFromEventList+0xac>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d11c      	bne.n	800c2a2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	3304      	adds	r3, #4
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff fb4a 	bl	800b906 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	2201      	movs	r2, #1
 800c278:	409a      	lsls	r2, r3
 800c27a:	4b18      	ldr	r3, [pc, #96]	; (800c2dc <xTaskRemoveFromEventList+0xb0>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4313      	orrs	r3, r2
 800c280:	4a16      	ldr	r2, [pc, #88]	; (800c2dc <xTaskRemoveFromEventList+0xb0>)
 800c282:	6013      	str	r3, [r2, #0]
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4a13      	ldr	r2, [pc, #76]	; (800c2e0 <xTaskRemoveFromEventList+0xb4>)
 800c292:	441a      	add	r2, r3
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	3304      	adds	r3, #4
 800c298:	4619      	mov	r1, r3
 800c29a:	4610      	mov	r0, r2
 800c29c:	f7ff fad6 	bl	800b84c <vListInsertEnd>
 800c2a0:	e005      	b.n	800c2ae <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	3318      	adds	r3, #24
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	480e      	ldr	r0, [pc, #56]	; (800c2e4 <xTaskRemoveFromEventList+0xb8>)
 800c2aa:	f7ff facf 	bl	800b84c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b2:	4b0d      	ldr	r3, [pc, #52]	; (800c2e8 <xTaskRemoveFromEventList+0xbc>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d905      	bls.n	800c2c8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <xTaskRemoveFromEventList+0xc0>)
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	e001      	b.n	800c2cc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2cc:	697b      	ldr	r3, [r7, #20]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	200003ec 	.word	0x200003ec
 800c2dc:	200003d4 	.word	0x200003d4
 800c2e0:	20000310 	.word	0x20000310
 800c2e4:	200003a4 	.word	0x200003a4
 800c2e8:	2000030c 	.word	0x2000030c
 800c2ec:	200003e0 	.word	0x200003e0

0800c2f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2f8:	4b06      	ldr	r3, [pc, #24]	; (800c314 <vTaskInternalSetTimeOutState+0x24>)
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c300:	4b05      	ldr	r3, [pc, #20]	; (800c318 <vTaskInternalSetTimeOutState+0x28>)
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	605a      	str	r2, [r3, #4]
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	200003e4 	.word	0x200003e4
 800c318:	200003d0 	.word	0x200003d0

0800c31c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d109      	bne.n	800c340 <xTaskCheckForTimeOut+0x24>
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	613b      	str	r3, [r7, #16]
 800c33e:	e7fe      	b.n	800c33e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d109      	bne.n	800c35a <xTaskCheckForTimeOut+0x3e>
 800c346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	e7fe      	b.n	800c358 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c35a:	f000 f98d 	bl	800c678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c35e:	4b1d      	ldr	r3, [pc, #116]	; (800c3d4 <xTaskCheckForTimeOut+0xb8>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c376:	d102      	bne.n	800c37e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c378:	2300      	movs	r3, #0
 800c37a:	61fb      	str	r3, [r7, #28]
 800c37c:	e023      	b.n	800c3c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	4b15      	ldr	r3, [pc, #84]	; (800c3d8 <xTaskCheckForTimeOut+0xbc>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d007      	beq.n	800c39a <xTaskCheckForTimeOut+0x7e>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	69ba      	ldr	r2, [r7, #24]
 800c390:	429a      	cmp	r2, r3
 800c392:	d302      	bcc.n	800c39a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c394:	2301      	movs	r3, #1
 800c396:	61fb      	str	r3, [r7, #28]
 800c398:	e015      	b.n	800c3c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d20b      	bcs.n	800c3bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	1ad2      	subs	r2, r2, r3
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff ff9d 	bl	800c2f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	e004      	b.n	800c3c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c3c6:	f000 f985 	bl	800c6d4 <vPortExitCritical>

	return xReturn;
 800c3ca:	69fb      	ldr	r3, [r7, #28]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3720      	adds	r7, #32
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	200003d0 	.word	0x200003d0
 800c3d8:	200003e4 	.word	0x200003e4

0800c3dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c3e0:	4b03      	ldr	r3, [pc, #12]	; (800c3f0 <vTaskMissedYield+0x14>)
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	601a      	str	r2, [r3, #0]
}
 800c3e6:	bf00      	nop
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	200003e0 	.word	0x200003e0

0800c3f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3fa:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <prvResetNextTaskUnblockTime+0x38>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c404:	4b0a      	ldr	r3, [pc, #40]	; (800c430 <prvResetNextTaskUnblockTime+0x3c>)
 800c406:	f04f 32ff 	mov.w	r2, #4294967295
 800c40a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c40c:	e008      	b.n	800c420 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c40e:	4b07      	ldr	r3, [pc, #28]	; (800c42c <prvResetNextTaskUnblockTime+0x38>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	4a04      	ldr	r2, [pc, #16]	; (800c430 <prvResetNextTaskUnblockTime+0x3c>)
 800c41e:	6013      	str	r3, [r2, #0]
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	2000039c 	.word	0x2000039c
 800c430:	200003e8 	.word	0x200003e8

0800c434 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c43a:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <xTaskGetSchedulerState+0x34>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d102      	bne.n	800c448 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c442:	2301      	movs	r3, #1
 800c444:	607b      	str	r3, [r7, #4]
 800c446:	e008      	b.n	800c45a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c448:	4b08      	ldr	r3, [pc, #32]	; (800c46c <xTaskGetSchedulerState+0x38>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c450:	2302      	movs	r3, #2
 800c452:	607b      	str	r3, [r7, #4]
 800c454:	e001      	b.n	800c45a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c456:	2300      	movs	r3, #0
 800c458:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c45a:	687b      	ldr	r3, [r7, #4]
	}
 800c45c:	4618      	mov	r0, r3
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	200003d8 	.word	0x200003d8
 800c46c:	200003ec 	.word	0x200003ec

0800c470 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c47c:	2300      	movs	r3, #0
 800c47e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d06c      	beq.n	800c560 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c486:	4b39      	ldr	r3, [pc, #228]	; (800c56c <xTaskPriorityDisinherit+0xfc>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d009      	beq.n	800c4a4 <xTaskPriorityDisinherit+0x34>
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	e7fe      	b.n	800c4a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d109      	bne.n	800c4c0 <xTaskPriorityDisinherit+0x50>
 800c4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	60bb      	str	r3, [r7, #8]
 800c4be:	e7fe      	b.n	800c4be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4c4:	1e5a      	subs	r2, r3, #1
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d044      	beq.n	800c560 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d140      	bne.n	800c560 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7ff fa0f 	bl	800b906 <uxListRemove>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d115      	bne.n	800c51a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f2:	491f      	ldr	r1, [pc, #124]	; (800c570 <xTaskPriorityDisinherit+0x100>)
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4413      	add	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	440b      	add	r3, r1
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10a      	bne.n	800c51a <xTaskPriorityDisinherit+0xaa>
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c508:	2201      	movs	r2, #1
 800c50a:	fa02 f303 	lsl.w	r3, r2, r3
 800c50e:	43da      	mvns	r2, r3
 800c510:	4b18      	ldr	r3, [pc, #96]	; (800c574 <xTaskPriorityDisinherit+0x104>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4013      	ands	r3, r2
 800c516:	4a17      	ldr	r2, [pc, #92]	; (800c574 <xTaskPriorityDisinherit+0x104>)
 800c518:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c526:	f1c3 0207 	rsb	r2, r3, #7
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c532:	2201      	movs	r2, #1
 800c534:	409a      	lsls	r2, r3
 800c536:	4b0f      	ldr	r3, [pc, #60]	; (800c574 <xTaskPriorityDisinherit+0x104>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	4a0d      	ldr	r2, [pc, #52]	; (800c574 <xTaskPriorityDisinherit+0x104>)
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c544:	4613      	mov	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4413      	add	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4a08      	ldr	r2, [pc, #32]	; (800c570 <xTaskPriorityDisinherit+0x100>)
 800c54e:	441a      	add	r2, r3
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	3304      	adds	r3, #4
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f7ff f978 	bl	800b84c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c55c:	2301      	movs	r3, #1
 800c55e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c560:	697b      	ldr	r3, [r7, #20]
	}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	2000030c 	.word	0x2000030c
 800c570:	20000310 	.word	0x20000310
 800c574:	200003d4 	.word	0x200003d4

0800c578 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c582:	4b29      	ldr	r3, [pc, #164]	; (800c628 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c588:	4b28      	ldr	r3, [pc, #160]	; (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3304      	adds	r3, #4
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff f9b9 	bl	800b906 <uxListRemove>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10b      	bne.n	800c5b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c59a:	4b24      	ldr	r3, [pc, #144]	; (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a6:	43da      	mvns	r2, r3
 800c5a8:	4b21      	ldr	r3, [pc, #132]	; (800c630 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	4a20      	ldr	r2, [pc, #128]	; (800c630 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c5b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b8:	d10a      	bne.n	800c5d0 <prvAddCurrentTaskToDelayedList+0x58>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5c0:	4b1a      	ldr	r3, [pc, #104]	; (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	481a      	ldr	r0, [pc, #104]	; (800c634 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c5ca:	f7ff f93f 	bl	800b84c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5ce:	e026      	b.n	800c61e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5d8:	4b14      	ldr	r3, [pc, #80]	; (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d209      	bcs.n	800c5fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5e8:	4b13      	ldr	r3, [pc, #76]	; (800c638 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	f7ff f94d 	bl	800b894 <vListInsert>
}
 800c5fa:	e010      	b.n	800c61e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5fc:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	4b0a      	ldr	r3, [pc, #40]	; (800c62c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3304      	adds	r3, #4
 800c606:	4619      	mov	r1, r3
 800c608:	4610      	mov	r0, r2
 800c60a:	f7ff f943 	bl	800b894 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c60e:	4b0c      	ldr	r3, [pc, #48]	; (800c640 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	429a      	cmp	r2, r3
 800c616:	d202      	bcs.n	800c61e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c618:	4a09      	ldr	r2, [pc, #36]	; (800c640 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	6013      	str	r3, [r2, #0]
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	200003d0 	.word	0x200003d0
 800c62c:	2000030c 	.word	0x2000030c
 800c630:	200003d4 	.word	0x200003d4
 800c634:	200003b8 	.word	0x200003b8
 800c638:	200003a0 	.word	0x200003a0
 800c63c:	2000039c 	.word	0x2000039c
 800c640:	200003e8 	.word	0x200003e8
	...

0800c650 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c650:	4b07      	ldr	r3, [pc, #28]	; (800c670 <pxCurrentTCBConst2>)
 800c652:	6819      	ldr	r1, [r3, #0]
 800c654:	6808      	ldr	r0, [r1, #0]
 800c656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65a:	f380 8809 	msr	PSP, r0
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f04f 0000 	mov.w	r0, #0
 800c666:	f380 8811 	msr	BASEPRI, r0
 800c66a:	4770      	bx	lr
 800c66c:	f3af 8000 	nop.w

0800c670 <pxCurrentTCBConst2>:
 800c670:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop

0800c678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c690:	4b0e      	ldr	r3, [pc, #56]	; (800c6cc <vPortEnterCritical+0x54>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3301      	adds	r3, #1
 800c696:	4a0d      	ldr	r2, [pc, #52]	; (800c6cc <vPortEnterCritical+0x54>)
 800c698:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c69a:	4b0c      	ldr	r3, [pc, #48]	; (800c6cc <vPortEnterCritical+0x54>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d10e      	bne.n	800c6c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6a2:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <vPortEnterCritical+0x58>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d009      	beq.n	800c6c0 <vPortEnterCritical+0x48>
 800c6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	603b      	str	r3, [r7, #0]
 800c6be:	e7fe      	b.n	800c6be <vPortEnterCritical+0x46>
	}
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	200000a0 	.word	0x200000a0
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6da:	4b11      	ldr	r3, [pc, #68]	; (800c720 <vPortExitCritical+0x4c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d109      	bne.n	800c6f6 <vPortExitCritical+0x22>
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	607b      	str	r3, [r7, #4]
 800c6f4:	e7fe      	b.n	800c6f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c6f6:	4b0a      	ldr	r3, [pc, #40]	; (800c720 <vPortExitCritical+0x4c>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	4a08      	ldr	r2, [pc, #32]	; (800c720 <vPortExitCritical+0x4c>)
 800c6fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <vPortExitCritical+0x4c>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d104      	bne.n	800c712 <vPortExitCritical+0x3e>
 800c708:	2300      	movs	r3, #0
 800c70a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c712:	bf00      	nop
 800c714:	370c      	adds	r7, #12
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	200000a0 	.word	0x200000a0
	...

0800c730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c730:	f3ef 8009 	mrs	r0, PSP
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4b15      	ldr	r3, [pc, #84]	; (800c790 <pxCurrentTCBConst>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	f01e 0f10 	tst.w	lr, #16
 800c740:	bf08      	it	eq
 800c742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74a:	6010      	str	r0, [r2, #0]
 800c74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c750:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c754:	f380 8811 	msr	BASEPRI, r0
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f7ff fcc0 	bl	800c0e4 <vTaskSwitchContext>
 800c764:	f04f 0000 	mov.w	r0, #0
 800c768:	f380 8811 	msr	BASEPRI, r0
 800c76c:	bc09      	pop	{r0, r3}
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	6808      	ldr	r0, [r1, #0]
 800c772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c776:	f01e 0f10 	tst.w	lr, #16
 800c77a:	bf08      	it	eq
 800c77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c780:	f380 8809 	msr	PSP, r0
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w

0800c790 <pxCurrentTCBConst>:
 800c790:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7b0:	f7ff fbe0 	bl	800bf74 <xTaskIncrementTick>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7ba:	4b06      	ldr	r3, [pc, #24]	; (800c7d4 <SysTick_Handler+0x3c>)
 800c7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	e000ed04 	.word	0xe000ed04

0800c7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7de:	f3ef 8305 	mrs	r3, IPSR
 800c7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2b0f      	cmp	r3, #15
 800c7e8:	d913      	bls.n	800c812 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ea:	4a16      	ldr	r2, [pc, #88]	; (800c844 <vPortValidateInterruptPriority+0x6c>)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7f4:	4b14      	ldr	r3, [pc, #80]	; (800c848 <vPortValidateInterruptPriority+0x70>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	7afa      	ldrb	r2, [r7, #11]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d209      	bcs.n	800c812 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	607b      	str	r3, [r7, #4]
 800c810:	e7fe      	b.n	800c810 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c812:	4b0e      	ldr	r3, [pc, #56]	; (800c84c <vPortValidateInterruptPriority+0x74>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c81a:	4b0d      	ldr	r3, [pc, #52]	; (800c850 <vPortValidateInterruptPriority+0x78>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d909      	bls.n	800c836 <vPortValidateInterruptPriority+0x5e>
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	e7fe      	b.n	800c834 <vPortValidateInterruptPriority+0x5c>
	}
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	e000e3f0 	.word	0xe000e3f0
 800c848:	200003f0 	.word	0x200003f0
 800c84c:	e000ed0c 	.word	0xe000ed0c
 800c850:	200003f4 	.word	0x200003f4

0800c854 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c862:	4618      	mov	r0, r3
 800c864:	f7fe fec4 	bl	800b5f0 <USBH_LL_IncTimer>
}
 800c868:	bf00      	nop
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe ff08 	bl	800b694 <USBH_LL_Connect>
}
 800c884:	bf00      	nop
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe ff1d 	bl	800b6da <USBH_LL_Disconnect>
}
 800c8a0:	bf00      	nop
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	70fb      	strb	r3, [r7, #3]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fe ff3d 	bl	800b73e <USBH_LL_NotifyURBChange>
#endif
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe feb2 	bl	800b644 <USBH_LL_PortEnabled>
}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fe febe 	bl	800b678 <USBH_LL_PortDisabled>
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7f9 f997 	bl	8005c4e <HAL_HCD_Stop>
 800c920:	4603      	mov	r3, r0
 800c922:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f808 	bl	800c93c <USBH_Get_USB_Status>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c930:	7bbb      	ldrb	r3, [r7, #14]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c94a:	79fb      	ldrb	r3, [r7, #7]
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d817      	bhi.n	800c980 <USBH_Get_USB_Status+0x44>
 800c950:	a201      	add	r2, pc, #4	; (adr r2, 800c958 <USBH_Get_USB_Status+0x1c>)
 800c952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c956:	bf00      	nop
 800c958:	0800c969 	.word	0x0800c969
 800c95c:	0800c96f 	.word	0x0800c96f
 800c960:	0800c975 	.word	0x0800c975
 800c964:	0800c97b 	.word	0x0800c97b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c968:	2300      	movs	r3, #0
 800c96a:	73fb      	strb	r3, [r7, #15]
    break;
 800c96c:	e00b      	b.n	800c986 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c96e:	2302      	movs	r3, #2
 800c970:	73fb      	strb	r3, [r7, #15]
    break;
 800c972:	e008      	b.n	800c986 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c974:	2301      	movs	r3, #1
 800c976:	73fb      	strb	r3, [r7, #15]
    break;
 800c978:	e005      	b.n	800c986 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c97a:	2302      	movs	r3, #2
 800c97c:	73fb      	strb	r3, [r7, #15]
    break;
 800c97e:	e002      	b.n	800c986 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c980:	2302      	movs	r3, #2
 800c982:	73fb      	strb	r3, [r7, #15]
    break;
 800c984:	bf00      	nop
  }
  return usb_status;
 800c986:	7bfb      	ldrb	r3, [r7, #15]
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <__errno>:
 800c994:	4b01      	ldr	r3, [pc, #4]	; (800c99c <__errno+0x8>)
 800c996:	6818      	ldr	r0, [r3, #0]
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	200000a4 	.word	0x200000a4

0800c9a0 <__libc_init_array>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	4e0d      	ldr	r6, [pc, #52]	; (800c9d8 <__libc_init_array+0x38>)
 800c9a4:	4c0d      	ldr	r4, [pc, #52]	; (800c9dc <__libc_init_array+0x3c>)
 800c9a6:	1ba4      	subs	r4, r4, r6
 800c9a8:	10a4      	asrs	r4, r4, #2
 800c9aa:	2500      	movs	r5, #0
 800c9ac:	42a5      	cmp	r5, r4
 800c9ae:	d109      	bne.n	800c9c4 <__libc_init_array+0x24>
 800c9b0:	4e0b      	ldr	r6, [pc, #44]	; (800c9e0 <__libc_init_array+0x40>)
 800c9b2:	4c0c      	ldr	r4, [pc, #48]	; (800c9e4 <__libc_init_array+0x44>)
 800c9b4:	f000 f8d4 	bl	800cb60 <_init>
 800c9b8:	1ba4      	subs	r4, r4, r6
 800c9ba:	10a4      	asrs	r4, r4, #2
 800c9bc:	2500      	movs	r5, #0
 800c9be:	42a5      	cmp	r5, r4
 800c9c0:	d105      	bne.n	800c9ce <__libc_init_array+0x2e>
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c9c8:	4798      	blx	r3
 800c9ca:	3501      	adds	r5, #1
 800c9cc:	e7ee      	b.n	800c9ac <__libc_init_array+0xc>
 800c9ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c9d2:	4798      	blx	r3
 800c9d4:	3501      	adds	r5, #1
 800c9d6:	e7f2      	b.n	800c9be <__libc_init_array+0x1e>
 800c9d8:	08010640 	.word	0x08010640
 800c9dc:	08010640 	.word	0x08010640
 800c9e0:	08010640 	.word	0x08010640
 800c9e4:	08010644 	.word	0x08010644

0800c9e8 <malloc>:
 800c9e8:	4b02      	ldr	r3, [pc, #8]	; (800c9f4 <malloc+0xc>)
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	f000 b817 	b.w	800ca20 <_malloc_r>
 800c9f2:	bf00      	nop
 800c9f4:	200000a4 	.word	0x200000a4

0800c9f8 <memcpy>:
 800c9f8:	b510      	push	{r4, lr}
 800c9fa:	1e43      	subs	r3, r0, #1
 800c9fc:	440a      	add	r2, r1
 800c9fe:	4291      	cmp	r1, r2
 800ca00:	d100      	bne.n	800ca04 <memcpy+0xc>
 800ca02:	bd10      	pop	{r4, pc}
 800ca04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca0c:	e7f7      	b.n	800c9fe <memcpy+0x6>

0800ca0e <memset>:
 800ca0e:	4402      	add	r2, r0
 800ca10:	4603      	mov	r3, r0
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d100      	bne.n	800ca18 <memset+0xa>
 800ca16:	4770      	bx	lr
 800ca18:	f803 1b01 	strb.w	r1, [r3], #1
 800ca1c:	e7f9      	b.n	800ca12 <memset+0x4>
	...

0800ca20 <_malloc_r>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	1ccd      	adds	r5, r1, #3
 800ca24:	f025 0503 	bic.w	r5, r5, #3
 800ca28:	3508      	adds	r5, #8
 800ca2a:	2d0c      	cmp	r5, #12
 800ca2c:	bf38      	it	cc
 800ca2e:	250c      	movcc	r5, #12
 800ca30:	2d00      	cmp	r5, #0
 800ca32:	4606      	mov	r6, r0
 800ca34:	db01      	blt.n	800ca3a <_malloc_r+0x1a>
 800ca36:	42a9      	cmp	r1, r5
 800ca38:	d903      	bls.n	800ca42 <_malloc_r+0x22>
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	6033      	str	r3, [r6, #0]
 800ca3e:	2000      	movs	r0, #0
 800ca40:	bd70      	pop	{r4, r5, r6, pc}
 800ca42:	f000 f88b 	bl	800cb5c <__malloc_lock>
 800ca46:	4a21      	ldr	r2, [pc, #132]	; (800cacc <_malloc_r+0xac>)
 800ca48:	6814      	ldr	r4, [r2, #0]
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	b991      	cbnz	r1, 800ca74 <_malloc_r+0x54>
 800ca4e:	4c20      	ldr	r4, [pc, #128]	; (800cad0 <_malloc_r+0xb0>)
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	b91b      	cbnz	r3, 800ca5c <_malloc_r+0x3c>
 800ca54:	4630      	mov	r0, r6
 800ca56:	f000 f871 	bl	800cb3c <_sbrk_r>
 800ca5a:	6020      	str	r0, [r4, #0]
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f000 f86c 	bl	800cb3c <_sbrk_r>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d124      	bne.n	800cab2 <_malloc_r+0x92>
 800ca68:	230c      	movs	r3, #12
 800ca6a:	6033      	str	r3, [r6, #0]
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	f000 f876 	bl	800cb5e <__malloc_unlock>
 800ca72:	e7e4      	b.n	800ca3e <_malloc_r+0x1e>
 800ca74:	680b      	ldr	r3, [r1, #0]
 800ca76:	1b5b      	subs	r3, r3, r5
 800ca78:	d418      	bmi.n	800caac <_malloc_r+0x8c>
 800ca7a:	2b0b      	cmp	r3, #11
 800ca7c:	d90f      	bls.n	800ca9e <_malloc_r+0x7e>
 800ca7e:	600b      	str	r3, [r1, #0]
 800ca80:	50cd      	str	r5, [r1, r3]
 800ca82:	18cc      	adds	r4, r1, r3
 800ca84:	4630      	mov	r0, r6
 800ca86:	f000 f86a 	bl	800cb5e <__malloc_unlock>
 800ca8a:	f104 000b 	add.w	r0, r4, #11
 800ca8e:	1d23      	adds	r3, r4, #4
 800ca90:	f020 0007 	bic.w	r0, r0, #7
 800ca94:	1ac3      	subs	r3, r0, r3
 800ca96:	d0d3      	beq.n	800ca40 <_malloc_r+0x20>
 800ca98:	425a      	negs	r2, r3
 800ca9a:	50e2      	str	r2, [r4, r3]
 800ca9c:	e7d0      	b.n	800ca40 <_malloc_r+0x20>
 800ca9e:	428c      	cmp	r4, r1
 800caa0:	684b      	ldr	r3, [r1, #4]
 800caa2:	bf16      	itet	ne
 800caa4:	6063      	strne	r3, [r4, #4]
 800caa6:	6013      	streq	r3, [r2, #0]
 800caa8:	460c      	movne	r4, r1
 800caaa:	e7eb      	b.n	800ca84 <_malloc_r+0x64>
 800caac:	460c      	mov	r4, r1
 800caae:	6849      	ldr	r1, [r1, #4]
 800cab0:	e7cc      	b.n	800ca4c <_malloc_r+0x2c>
 800cab2:	1cc4      	adds	r4, r0, #3
 800cab4:	f024 0403 	bic.w	r4, r4, #3
 800cab8:	42a0      	cmp	r0, r4
 800caba:	d005      	beq.n	800cac8 <_malloc_r+0xa8>
 800cabc:	1a21      	subs	r1, r4, r0
 800cabe:	4630      	mov	r0, r6
 800cac0:	f000 f83c 	bl	800cb3c <_sbrk_r>
 800cac4:	3001      	adds	r0, #1
 800cac6:	d0cf      	beq.n	800ca68 <_malloc_r+0x48>
 800cac8:	6025      	str	r5, [r4, #0]
 800caca:	e7db      	b.n	800ca84 <_malloc_r+0x64>
 800cacc:	200003f8 	.word	0x200003f8
 800cad0:	200003fc 	.word	0x200003fc

0800cad4 <rand>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4b13      	ldr	r3, [pc, #76]	; (800cb24 <rand+0x50>)
 800cad8:	681c      	ldr	r4, [r3, #0]
 800cada:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cadc:	b97b      	cbnz	r3, 800cafe <rand+0x2a>
 800cade:	2018      	movs	r0, #24
 800cae0:	f7ff ff82 	bl	800c9e8 <malloc>
 800cae4:	4a10      	ldr	r2, [pc, #64]	; (800cb28 <rand+0x54>)
 800cae6:	4b11      	ldr	r3, [pc, #68]	; (800cb2c <rand+0x58>)
 800cae8:	63a0      	str	r0, [r4, #56]	; 0x38
 800caea:	e9c0 2300 	strd	r2, r3, [r0]
 800caee:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <rand+0x5c>)
 800caf0:	6083      	str	r3, [r0, #8]
 800caf2:	230b      	movs	r3, #11
 800caf4:	8183      	strh	r3, [r0, #12]
 800caf6:	2201      	movs	r2, #1
 800caf8:	2300      	movs	r3, #0
 800cafa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cafe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb00:	480c      	ldr	r0, [pc, #48]	; (800cb34 <rand+0x60>)
 800cb02:	690a      	ldr	r2, [r1, #16]
 800cb04:	694b      	ldr	r3, [r1, #20]
 800cb06:	4c0c      	ldr	r4, [pc, #48]	; (800cb38 <rand+0x64>)
 800cb08:	4350      	muls	r0, r2
 800cb0a:	fb04 0003 	mla	r0, r4, r3, r0
 800cb0e:	fba2 2304 	umull	r2, r3, r2, r4
 800cb12:	4403      	add	r3, r0
 800cb14:	1c54      	adds	r4, r2, #1
 800cb16:	f143 0500 	adc.w	r5, r3, #0
 800cb1a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800cb1e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800cb22:	bd38      	pop	{r3, r4, r5, pc}
 800cb24:	200000a4 	.word	0x200000a4
 800cb28:	abcd330e 	.word	0xabcd330e
 800cb2c:	e66d1234 	.word	0xe66d1234
 800cb30:	0005deec 	.word	0x0005deec
 800cb34:	5851f42d 	.word	0x5851f42d
 800cb38:	4c957f2d 	.word	0x4c957f2d

0800cb3c <_sbrk_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4c06      	ldr	r4, [pc, #24]	; (800cb58 <_sbrk_r+0x1c>)
 800cb40:	2300      	movs	r3, #0
 800cb42:	4605      	mov	r5, r0
 800cb44:	4608      	mov	r0, r1
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	f7f5 f970 	bl	8001e2c <_sbrk>
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	d102      	bne.n	800cb56 <_sbrk_r+0x1a>
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	b103      	cbz	r3, 800cb56 <_sbrk_r+0x1a>
 800cb54:	602b      	str	r3, [r5, #0]
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	20000a60 	.word	0x20000a60

0800cb5c <__malloc_lock>:
 800cb5c:	4770      	bx	lr

0800cb5e <__malloc_unlock>:
 800cb5e:	4770      	bx	lr

0800cb60 <_init>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	bf00      	nop
 800cb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb66:	bc08      	pop	{r3}
 800cb68:	469e      	mov	lr, r3
 800cb6a:	4770      	bx	lr

0800cb6c <_fini>:
 800cb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6e:	bf00      	nop
 800cb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb72:	bc08      	pop	{r3}
 800cb74:	469e      	mov	lr, r3
 800cb76:	4770      	bx	lr
