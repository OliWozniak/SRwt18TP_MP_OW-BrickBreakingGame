
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c948  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003abc  0800caf8  0800caf8  0001caf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105b4  080105b4  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  080105b4  080105b4  000205b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105bc  080105bc  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105bc  080105bc  000205bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105c0  080105c0  000205c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080105c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000100  080106c4  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  080106c4  00030a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fe66  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007502  00000000  00000000  0006ff96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027b8  00000000  00000000  00077498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024a8  00000000  00000000  00079c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030747  00000000  00000000  0007c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a71e  00000000  00000000  000ac83f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6cd7  00000000  00000000  000d6f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cdc34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a614  00000000  00000000  001cdcb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cae0 	.word	0x0800cae0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800cae0 	.word	0x0800cae0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
////	bbg->kulka = kulka;
////	rysuj_kulke(bbg->kulka);
//}

void BBG_init(BBG *bbg, Platforma *platforma, Klocek **klocki, Kulka *kulka, int lkl)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	60da      	str	r2, [r3, #12]

    bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
    rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fab2 	bl	8001a78 <rysuj_platforme>

    bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++)
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e00b      	b.n	8000538 <BBG_init+0x48>
    {
        rysuj_klocek(bbg->klocki[i]);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fd87 	bl	8001040 <rysuj_klocek>
    for (int i = 0; i < bbg->liczba_klockow; i++)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbee      	blt.n	8000520 <BBG_init+0x30>
    }

    bbg->kulka = kulka;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	609a      	str	r2, [r3, #8]
    rysuj_kulke(bbg->kulka);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fdb1 	bl	80010b4 <rysuj_kulke>
    rysuj_platforme(bbg->platforma);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fa8e 	bl	8001a78 <rysuj_platforme>
}
 800055c:	bf00      	nop
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <BBG_obsluga_zbicia_klocka>:

void BBG_obsluga_zbicia_klocka(BBG *bbg)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e0fd      	b.n	800076e <BBG_obsluga_zbicia_klocka+0x20a>
    {
        // Sprawdź, czy kulka zderzyła się z klockiem
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	441a      	add	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6859      	ldr	r1, [r3, #4]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	440b      	add	r3, r1
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	f2c0 80ea 	blt.w	8000768 <BBG_obsluga_zbicia_klocka+0x204>
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	1ad2      	subs	r2, r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6859      	ldr	r1, [r3, #4]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	6859      	ldr	r1, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6858      	ldr	r0, [r3, #4]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4403      	add	r3, r0
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	440b      	add	r3, r1
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 80005c0:	429a      	cmp	r2, r3
 80005c2:	f300 80d1 	bgt.w	8000768 <BBG_obsluga_zbicia_klocka+0x204>
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	441a      	add	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6859      	ldr	r1, [r3, #4]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005e2:	429a      	cmp	r2, r3
 80005e4:	f2c0 80c0 	blt.w	8000768 <BBG_obsluga_zbicia_klocka+0x204>
            bbg->kulka->polozenie_x - bbg->kulka->promien <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6859      	ldr	r1, [r3, #4]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	440b      	add	r3, r1
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6858      	ldr	r0, [r3, #4]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4403      	add	r3, r0
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	440b      	add	r3, r1
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 8000614:	429a      	cmp	r2, r3
 8000616:	f300 80a7 	bgt.w	8000768 <BBG_obsluga_zbicia_klocka+0x204>
        {
            bbg->kulka->predkosc_x *= -1;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	4252      	negs	r2, r2
 8000626:	60da      	str	r2, [r3, #12]
            bbg->kulka->predkosc_y *= -1;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	691a      	ldr	r2, [r3, #16]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4252      	negs	r2, r2
 8000634:	611a      	str	r2, [r3, #16]

            // Odwróć kierunek prędkości kulki
            if (bbg->kulka->polozenie_x >= bbg->klocki[i]->pozycja_x &&
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6859      	ldr	r1, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	db1a      	blt.n	8000684 <BBG_obsluga_zbicia_klocka+0x120>
                bbg->kulka->polozenie_x <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6859      	ldr	r1, [r3, #4]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	440b      	add	r3, r1
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6858      	ldr	r0, [r3, #4]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4403      	add	r3, r0
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	440b      	add	r3, r1
            if (bbg->kulka->polozenie_x >= bbg->klocki[i]->pozycja_x &&
 8000672:	429a      	cmp	r2, r3
 8000674:	dc06      	bgt.n	8000684 <BBG_obsluga_zbicia_klocka+0x120>
            {
                bbg->kulka->predkosc_x *= -1;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	4252      	negs	r2, r2
 8000682:	60da      	str	r2, [r3, #12]
            }
            if (bbg->kulka->polozenie_y >= bbg->klocki[i]->pozycja_y &&
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6859      	ldr	r1, [r3, #4]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	440b      	add	r3, r1
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	db1a      	blt.n	80006d2 <BBG_obsluga_zbicia_klocka+0x16e>
                bbg->kulka->polozenie_y <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6859      	ldr	r1, [r3, #4]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	440b      	add	r3, r1
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6859      	ldr	r1, [r3, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6858      	ldr	r0, [r3, #4]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4403      	add	r3, r0
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	440b      	add	r3, r1
            if (bbg->kulka->polozenie_y >= bbg->klocki[i]->pozycja_y &&
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dc06      	bgt.n	80006d2 <BBG_obsluga_zbicia_klocka+0x16e>
            {
                bbg->kulka->predkosc_y *= -1;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	691a      	ldr	r2, [r3, #16]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	4252      	negs	r2, r2
 80006d0:	611a      	str	r2, [r3, #16]
            }

            // zamaluj miejsce zbitego klocka
            BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80006d2:	482d      	ldr	r0, [pc, #180]	; (8000788 <BBG_obsluga_zbicia_klocka+0x224>)
 80006d4:	f002 ffc0 	bl	8003658 <BSP_LCD_SetBackColor>
            BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80006d8:	482b      	ldr	r0, [pc, #172]	; (8000788 <BBG_obsluga_zbicia_klocka+0x224>)
 80006da:	f002 ffa5 	bl	8003628 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	b298      	uxth	r0, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	b299      	uxth	r1, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	b29c      	uxth	r4, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	b29b      	uxth	r3, r3
 800071e:	4622      	mov	r2, r4
 8000720:	f003 fa22 	bl	8003b68 <BSP_LCD_FillRect>

            // Usuń trafiony klocek z tablicy klocków
            // free(bbg->klocki[i]);

            // Przesuń pozostałe klocki w tablicy, aby zapełnić lukę po usuniętym klocku
            for (int j = i; j < bbg->liczba_klockow - 1; j++)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e00f      	b.n	800074a <BBG_obsluga_zbicia_klocka+0x1e6>
            {
                bbg->klocki[j] = bbg->klocki[j + 1];
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	3301      	adds	r3, #1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	441a      	add	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6859      	ldr	r1, [r3, #4]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	440b      	add	r3, r1
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	601a      	str	r2, [r3, #0]
            for (int j = i; j < bbg->liczba_klockow - 1; j++)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	3301      	adds	r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	3b01      	subs	r3, #1
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	429a      	cmp	r2, r3
 8000754:	dbe9      	blt.n	800072a <BBG_obsluga_zbicia_klocka+0x1c6>
            }

            // Zmniejsz liczbę klocków o 1
            bbg->liczba_klockow--;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	60da      	str	r2, [r3, #12]

            // Przerwij pętlę, gdy trafiony zostanie tylko jeden klocek
            if (bbg->liczba_klockow == 0)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d009      	beq.n	800077c <BBG_obsluga_zbicia_klocka+0x218>
    for (int i = 0; i < bbg->liczba_klockow; i++)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	f6ff aefc 	blt.w	8000572 <BBG_obsluga_zbicia_klocka+0xe>
            {
                break;
            }
        }
    }
}
 800077a:	e000      	b.n	800077e <BBG_obsluga_zbicia_klocka+0x21a>
                break;
 800077c:	bf00      	nop
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	bf00      	nop
 8000788:	ffff0000 	.word	0xffff0000

0800078c <BBG_obsluzDotykEkranu>:

// Obsługa dotyku ekranu (przykładowa implementacja)
void BBG_obsluzDotykEkranu(BBG *bbg, TS_StateTypeDef TS_State)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b08b      	sub	sp, #44	; 0x2c
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	e883 0006 	stmia.w	r3, {r1, r2}
    if (TS_State.TouchDetected)
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d067      	beq.n	8000870 <BBG_obsluzDotykEkranu+0xe4>
    {
        int platforma_x = Platforma_getPolozenieX(bbg->platforma);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 f990 	bl	8001aca <Platforma_getPolozenieX>
 80007aa:	6278      	str	r0, [r7, #36]	; 0x24
        int platforma_szerokosc = Platforma_getSzerokosc(bbg->platforma);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f996 	bl	8001ae2 <Platforma_getSzerokosc>
 80007b6:	6238      	str	r0, [r7, #32]
        int platforma_krok = Platforma_getKrok(bbg->platforma);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 f99c 	bl	8001afa <Platforma_getKrok>
 80007c2:	61f8      	str	r0, [r7, #28]

        uint32_t x = Calibration_GetX(TS_State.X);
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fd7a 	bl	80022c0 <Calibration_GetX>
 80007cc:	4603      	mov	r3, r0
 80007ce:	61bb      	str	r3, [r7, #24]
        uint32_t y = Calibration_GetY(TS_State.Y);
 80007d0:	893b      	ldrh	r3, [r7, #8]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fd98 	bl	8002308 <Calibration_GetY>
 80007d8:	4603      	mov	r3, r0
 80007da:	617b      	str	r3, [r7, #20]
        if ((x < BSP_LCD_GetXSize() / 2) & (x > 0))
 80007dc:	f002 fe5a 	bl	8003494 <BSP_LCD_GetXSize>
 80007e0:	4603      	mov	r3, r0
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	bf34      	ite	cc
 80007ea:	2301      	movcc	r3, #1
 80007ec:	2300      	movcs	r3, #0
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	bf14      	ite	ne
 80007f6:	2301      	movne	r3, #1
 80007f8:	2300      	moveq	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4013      	ands	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d006      	beq.n	8000812 <BBG_obsluzDotykEkranu+0x86>
        {
            platforma_x = max(0, platforma_x - platforma_krok); // Move left
 8000804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
 8000810:	e02a      	b.n	8000868 <BBG_obsluzDotykEkranu+0xdc>
        }
        else if ((x > BSP_LCD_GetXSize() / 2) & (x < BSP_LCD_GetXSize()))
 8000812:	f002 fe3f 	bl	8003494 <BSP_LCD_GetXSize>
 8000816:	4603      	mov	r3, r0
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	429a      	cmp	r2, r3
 800081e:	bf8c      	ite	hi
 8000820:	2301      	movhi	r3, #1
 8000822:	2300      	movls	r3, #0
 8000824:	b2dc      	uxtb	r4, r3
 8000826:	f002 fe35 	bl	8003494 <BSP_LCD_GetXSize>
 800082a:	4602      	mov	r2, r0
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	4293      	cmp	r3, r2
 8000830:	bf34      	ite	cc
 8000832:	2301      	movcc	r3, #1
 8000834:	2300      	movcs	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4023      	ands	r3, r4
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d013      	beq.n	8000868 <BBG_obsluzDotykEkranu+0xdc>
        {
            platforma_x = min(BSP_LCD_GetXSize() - platforma_szerokosc, platforma_x + platforma_krok); // Move right
 8000840:	f002 fe28 	bl	8003494 <BSP_LCD_GetXSize>
 8000844:	4602      	mov	r2, r0
 8000846:	6a3b      	ldr	r3, [r7, #32]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800084c:	69fa      	ldr	r2, [r7, #28]
 800084e:	440a      	add	r2, r1
 8000850:	4293      	cmp	r3, r2
 8000852:	d205      	bcs.n	8000860 <BBG_obsluzDotykEkranu+0xd4>
 8000854:	f002 fe1e 	bl	8003494 <BSP_LCD_GetXSize>
 8000858:	4602      	mov	r2, r0
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	e002      	b.n	8000866 <BBG_obsluzDotykEkranu+0xda>
 8000860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	4413      	add	r3, r2
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
        }
        BBG_ruchPlatformy(bbg, platforma_x);
 8000868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f000 f84b 	bl	8000906 <BBG_ruchPlatformy>
    }
}
 8000870:	bf00      	nop
 8000872:	372c      	adds	r7, #44	; 0x2c
 8000874:	46bd      	mov	sp, r7
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <BBG_ruchKulki>:

// Ruch kulki (przykładowa implementacja)
int BBG_ruchKulki(BBG *bbg)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

    if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->platforma->polozenie_y &&
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	441a      	add	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	db27      	blt.n	80008e8 <BBG_ruchKulki+0x70>
        bbg->kulka->polozenie_x < bbg->platforma->polozenie_x + bbg->platforma->szerokosc &&
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6819      	ldr	r1, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	440b      	add	r3, r1
    if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->platforma->polozenie_y &&
 80008ac:	429a      	cmp	r2, r3
 80008ae:	da1b      	bge.n	80008e8 <BBG_ruchKulki+0x70>
        bbg->kulka->polozenie_x > bbg->platforma->polozenie_x)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681b      	ldr	r3, [r3, #0]
        bbg->kulka->polozenie_x < bbg->platforma->polozenie_x + bbg->platforma->szerokosc &&
 80008bc:	429a      	cmp	r2, r3
 80008be:	dd13      	ble.n	80008e8 <BBG_ruchKulki+0x70>
    {
        if (!(bbg->kulka->polozenie_y > bbg->platforma->polozenie_y))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dc0b      	bgt.n	80008e8 <BBG_ruchKulki+0x70>
        {
            bbg->kulka->predkosc_y *= -1;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	691a      	ldr	r2, [r3, #16]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	4252      	negs	r2, r2
 80008dc:	611a      	str	r2, [r3, #16]
            rysuj_platforme(bbg->platforma);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f8c8 	bl	8001a78 <rysuj_platforme>
        }
    }

    if (Kulka_ruch(bbg->kulka) == 1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fbfb 	bl	80010e8 <Kulka_ruch>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d101      	bne.n	80008fc <BBG_ruchKulki+0x84>
    {
        return 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e000      	b.n	80008fe <BBG_ruchKulki+0x86>
    }

    // Obsługa odbicia od platformy
    return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <BBG_ruchPlatformy>:

// Ruch platformy (przykładowa implementacja)
void BBG_ruchPlatformy(BBG *bbg, int x)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
    zmaz_platforme(bbg->platforma);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f893 	bl	8001a40 <zmaz_platforme>
    Platforma_przesunDo(bbg->platforma, x);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6839      	ldr	r1, [r7, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f001 f8c4 	bl	8001aae <Platforma_przesunDo>
    rysuj_platforme(bbg->platforma);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f001 f8a4 	bl	8001a78 <rysuj_platforme>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_CRC_Init+0x20>)
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <MX_CRC_Init+0x24>)
 8000940:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_CRC_Init+0x20>)
 8000944:	f004 f804 	bl	8004950 <HAL_CRC_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800094e:	f001 f84f 	bl	80019f0 <Error_Handler>
  }

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200003f8 	.word	0x200003f8
 800095c:	40023000 	.word	0x40023000

08000960 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <HAL_CRC_MspInit+0x3c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10d      	bne.n	800098e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_CRC_MspInit+0x40>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <HAL_CRC_MspInit+0x40>)
 800097c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <HAL_CRC_MspInit+0x40>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023000 	.word	0x40023000
 80009a0:	40023800 	.word	0x40023800

080009a4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <MX_DMA2D_Init+0x60>)
 80009ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009da:	f004 f991 	bl	8004d00 <HAL_DMA2D_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009e4:	f001 f804 	bl	80019f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009e8:	2101      	movs	r1, #1
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_DMA2D_Init+0x5c>)
 80009ec:	f004 fbf6 	bl	80051dc <HAL_DMA2D_ConfigLayer>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009f6:	f000 fffb 	bl	80019f0 <Error_Handler>
  }

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000400 	.word	0x20000400
 8000a04:	4002b000 	.word	0x4002b000

08000a08 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_DMA2D_MspInit+0x48>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d115      	bne.n	8000a46 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_DMA2D_MspInit+0x4c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <HAL_DMA2D_MspInit+0x4c>)
 8000a24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_DMA2D_MspInit+0x4c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	205a      	movs	r0, #90	; 0x5a
 8000a3c:	f003 ff5e 	bl	80048fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a40:	205a      	movs	r0, #90	; 0x5a
 8000a42:	f003 ff77 	bl	8004934 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	4002b000 	.word	0x4002b000
 8000a54:	40023800 	.word	0x40023800

08000a58 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_FMC_Init+0x98>)
 8000a72:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <MX_FMC_Init+0x9c>)
 8000a74:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_FMC_Init+0x98>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_FMC_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_FMC_Init+0x98>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_FMC_Init+0x98>)
 8000a8a:	2210      	movs	r2, #16
 8000a8c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_FMC_Init+0x98>)
 8000a90:	2240      	movs	r2, #64	; 0x40
 8000a92:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_FMC_Init+0x98>)
 8000a96:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a9a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_FMC_Init+0x98>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_FMC_Init+0x98>)
 8000aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_FMC_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_FMC_Init+0x98>)
 8000ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000abc:	2307      	movs	r3, #7
 8000abe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_FMC_Init+0x98>)
 8000ada:	f008 fbb5 	bl	8009248 <HAL_SDRAM_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ae4:	f000 ff84 	bl	80019f0 <Error_Handler>
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000440 	.word	0x20000440
 8000af4:	a0000140 	.word	0xa0000140

08000af8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <HAL_FMC_MspInit+0x104>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d16f      	bne.n	8000bf4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000b14:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <HAL_FMC_MspInit+0x104>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <HAL_FMC_MspInit+0x108>)
 8000b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b22:	4a37      	ldr	r2, [pc, #220]	; (8000c00 <HAL_FMC_MspInit+0x108>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <HAL_FMC_MspInit+0x108>)
 8000b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000b36:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b3a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b48:	230c      	movs	r3, #12
 8000b4a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	482c      	ldr	r0, [pc, #176]	; (8000c04 <HAL_FMC_MspInit+0x10c>)
 8000b52:	f004 fc71 	bl	8005438 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000b56:	2301      	movs	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4826      	ldr	r0, [pc, #152]	; (8000c08 <HAL_FMC_MspInit+0x110>)
 8000b70:	f004 fc62 	bl	8005438 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000b74:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b78:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b86:	230c      	movs	r3, #12
 8000b88:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481f      	ldr	r0, [pc, #124]	; (8000c0c <HAL_FMC_MspInit+0x114>)
 8000b90:	f004 fc52 	bl	8005438 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000b94:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b98:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4818      	ldr	r0, [pc, #96]	; (8000c10 <HAL_FMC_MspInit+0x118>)
 8000bb0:	f004 fc42 	bl	8005438 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000bb4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000bb8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4811      	ldr	r0, [pc, #68]	; (8000c14 <HAL_FMC_MspInit+0x11c>)
 8000bd0:	f004 fc32 	bl	8005438 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bd4:	2360      	movs	r3, #96	; 0x60
 8000bd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000be4:	230c      	movs	r3, #12
 8000be6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <HAL_FMC_MspInit+0x120>)
 8000bee:	f004 fc23 	bl	8005438 <HAL_GPIO_Init>
 8000bf2:	e000      	b.n	8000bf6 <HAL_FMC_MspInit+0xfe>
    return;
 8000bf4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000011c 	.word	0x2000011c
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40021400 	.word	0x40021400
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40021800 	.word	0x40021800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40020c00 	.word	0x40020c00
 8000c18:	40020400 	.word	0x40020400

08000c1c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000c24:	f7ff ff68 	bl	8000af8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
 8000c62:	4b7a      	ldr	r3, [pc, #488]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a79      	ldr	r2, [pc, #484]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b77      	ldr	r3, [pc, #476]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	4b73      	ldr	r3, [pc, #460]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a72      	ldr	r2, [pc, #456]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b70      	ldr	r3, [pc, #448]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4b6c      	ldr	r3, [pc, #432]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a6b      	ldr	r2, [pc, #428]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b69      	ldr	r3, [pc, #420]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	4b65      	ldr	r3, [pc, #404]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a64      	ldr	r2, [pc, #400]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b62      	ldr	r3, [pc, #392]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b5e      	ldr	r3, [pc, #376]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a5d      	ldr	r2, [pc, #372]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b5b      	ldr	r3, [pc, #364]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2116      	movs	r1, #22
 8000d42:	4843      	ldr	r0, [pc, #268]	; (8000e50 <MX_GPIO_Init+0x208>)
 8000d44:	f004 fe2c 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	4841      	ldr	r0, [pc, #260]	; (8000e54 <MX_GPIO_Init+0x20c>)
 8000d4e:	f004 fe27 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d58:	483f      	ldr	r0, [pc, #252]	; (8000e58 <MX_GPIO_Init+0x210>)
 8000d5a:	f004 fe21 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d64:	483d      	ldr	r0, [pc, #244]	; (8000e5c <MX_GPIO_Init+0x214>)
 8000d66:	f004 fe1b 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d6a:	2316      	movs	r3, #22
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4833      	ldr	r0, [pc, #204]	; (8000e50 <MX_GPIO_Init+0x208>)
 8000d82:	f004 fb59 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d86:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d8c:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <MX_GPIO_Init+0x218>)
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	482e      	ldr	r0, [pc, #184]	; (8000e54 <MX_GPIO_Init+0x20c>)
 8000d9c:	f004 fb4c 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4827      	ldr	r0, [pc, #156]	; (8000e54 <MX_GPIO_Init+0x20c>)
 8000db8:	f004 fb3e 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <MX_GPIO_Init+0x218>)
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4820      	ldr	r0, [pc, #128]	; (8000e50 <MX_GPIO_Init+0x208>)
 8000dd0:	f004 fb32 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	481f      	ldr	r0, [pc, #124]	; (8000e64 <MX_GPIO_Init+0x21c>)
 8000de8:	f004 fb26 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4815      	ldr	r0, [pc, #84]	; (8000e58 <MX_GPIO_Init+0x210>)
 8000e02:	f004 fb19 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e06:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <MX_GPIO_Init+0x210>)
 8000e20:	f004 fb0a 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_GPIO_Init+0x214>)
 8000e3e:	f004 fafb 	bl	8005438 <HAL_GPIO_Init>

}
 8000e42:	bf00      	nop
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	10120000 	.word	0x10120000
 8000e64:	40020400 	.word	0x40020400

08000e68 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_I2C3_Init+0x74>)
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <MX_I2C3_Init+0x78>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_I2C3_Init+0x74>)
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <MX_I2C3_Init+0x7c>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_I2C3_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_I2C3_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_I2C3_Init+0x74>)
 8000e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e8a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_I2C3_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_I2C3_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_I2C3_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_I2C3_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_I2C3_Init+0x74>)
 8000ea6:	f005 ff7f 	bl	8006da8 <HAL_I2C_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000eb0:	f000 fd9e 	bl	80019f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <MX_I2C3_Init+0x74>)
 8000eb8:	f006 ff67 	bl	8007d8a <HAL_I2CEx_ConfigAnalogFilter>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000ec2:	f000 fd95 	bl	80019f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <MX_I2C3_Init+0x74>)
 8000eca:	f006 ff9a 	bl	8007e02 <HAL_I2CEx_ConfigDigitalFilter>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000ed4:	f000 fd8c 	bl	80019f0 <Error_Handler>
  }

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000474 	.word	0x20000474
 8000ee0:	40005c00 	.word	0x40005c00
 8000ee4:	000186a0 	.word	0x000186a0

08000ee8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a29      	ldr	r2, [pc, #164]	; (8000fac <HAL_I2C_MspInit+0xc4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d14b      	bne.n	8000fa2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f48:	2312      	movs	r3, #18
 8000f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f54:	2304      	movs	r3, #4
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <HAL_I2C_MspInit+0xcc>)
 8000f60:	f004 fa6a 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6a:	2312      	movs	r3, #18
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f76:	2304      	movs	r3, #4
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <HAL_I2C_MspInit+0xd0>)
 8000f82:	f004 fa59 	bl	8005438 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_I2C_MspInit+0xc8>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40005c00 	.word	0x40005c00
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_I2C_MspDeInit+0x3c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10f      	bne.n	8000fee <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_I2C_MspDeInit+0x40>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_I2C_MspDeInit+0x40>)
 8000fd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fde:	4808      	ldr	r0, [pc, #32]	; (8001000 <HAL_I2C_MspDeInit+0x44>)
 8000fe0:	f004 fbd4 	bl	800578c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <HAL_I2C_MspDeInit+0x48>)
 8000fea:	f004 fbcf 	bl	800578c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40005c00 	.word	0x40005c00
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020800 	.word	0x40020800
 8001004:	40020000 	.word	0x40020000

08001008 <Klocek_init>:
#include "klocek.h"
#include "main.h"

// Inicjalizacja struktury Klocek
void Klocek_init(Klocek *k, int x, int y, int w, int h, uint32_t kol)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	601a      	str	r2, [r3, #0]
    k->pozycja_y = y;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	605a      	str	r2, [r3, #4]
    k->szerokosc = w;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	609a      	str	r2, [r3, #8]
    k->wysokosc = h;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	60da      	str	r2, [r3, #12]
    k->kolor = kol;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	611a      	str	r2, [r3, #16]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <rysuj_klocek>:

void rysuj_klocek(Klocek *k)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(k->kolor);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	4618      	mov	r0, r3
 800104e:	f002 faeb 	bl	8003628 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	b298      	uxth	r0, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	b299      	uxth	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	b29b      	uxth	r3, r3
 800106a:	f002 fd7d 	bl	8003b68 <BSP_LCD_FillRect>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <Kulka_init>:
#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka *kulka, int x, int y, int r, int vx, int vy, uint32_t kol)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	603b      	str	r3, [r7, #0]
	kulka->polozenie_x = x;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = y;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	605a      	str	r2, [r3, #4]
	kulka->promien = r;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	609a      	str	r2, [r3, #8]
	kulka->predkosc_x = vx;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
	kulka->predkosc_y = vy;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	611a      	str	r2, [r3, #16]
	kulka->kolor = kol;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a3a      	ldr	r2, [r7, #32]
 80010a6:	615a      	str	r2, [r3, #20]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <rysuj_kulke>:

void rysuj_kulke(Kulka *kulka)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fab1 	bl	8003628 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	b298      	uxth	r0, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	b299      	uxth	r1, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f002 fd9f 	bl	8003c1c <BSP_LCD_FillCircle>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <Kulka_ruch>:
int Kulka_ruch(Kulka *kulka)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	// Zamaluj stary stan kulki
	BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 80010f0:	483d      	ldr	r0, [pc, #244]	; (80011e8 <Kulka_ruch+0x100>)
 80010f2:	f002 fa99 	bl	8003628 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b298      	uxth	r0, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	b299      	uxth	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	f002 fd87 	bl	8003c1c <BSP_LCD_FillCircle>

	// Oblicz nowe położenie kulki
	int nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
	int nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	4413      	add	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]

	// Sprawdź zderzenie z lewą i prawą krawędzią ekranu
	if (nowe_polozenie_x - kulka->promien < 0 || nowe_polozenie_x + kulka->promien > BSP_LCD_GetXSize())
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	db09      	blt.n	8001146 <Kulka_ruch+0x5e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	461c      	mov	r4, r3
 800113c:	f002 f9aa 	bl	8003494 <BSP_LCD_GetXSize>
 8001140:	4603      	mov	r3, r0
 8001142:	429c      	cmp	r4, r3
 8001144:	d910      	bls.n	8001168 <Kulka_ruch+0x80>
	{
		// Zderzenie z lewą lub prawą krawędzią, zmień kierunek prędkości poziomej
		kulka->predkosc_x = -kulka->predkosc_x;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	425a      	negs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60da      	str	r2, [r3, #12]
		nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4413      	add	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
		nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	4413      	add	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
	}

	// Sprawdź zderzenie z górną i dolną krawędzią ekranu
	if (nowe_polozenie_y - kulka->promien < 0)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	da10      	bge.n	8001196 <Kulka_ruch+0xae>
	{
		// Zderzenie z górną lub dolną krawędzią, zmień kierunek prędkości pionowej
		kulka->predkosc_y = -kulka->predkosc_y;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	425a      	negs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	611a      	str	r2, [r3, #16]
		nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
		nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	4413      	add	r3, r2
 8001194:	60bb      	str	r3, [r7, #8]
	}
	if (nowe_polozenie_y + kulka->promien > BSP_LCD_GetYSize())
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4413      	add	r3, r2
 800119e:	461c      	mov	r4, r3
 80011a0:	f002 f984 	bl	80034ac <BSP_LCD_GetYSize>
 80011a4:	4603      	mov	r3, r0
 80011a6:	429c      	cmp	r4, r3
 80011a8:	d901      	bls.n	80011ae <Kulka_ruch+0xc6>
	{
		return 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e017      	b.n	80011de <Kulka_ruch+0xf6>
	}

	// Aktualizuj położenie kulki na nowe pozycje
	kulka->polozenie_x = nowe_polozenie_x;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = nowe_polozenie_y;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	605a      	str	r2, [r3, #4]

	// Narysuj kulke na nowej pozycji
	BSP_LCD_SetTextColor(kulka->kolor);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fa32 	bl	8003628 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b298      	uxth	r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	b299      	uxth	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	f002 fd20 	bl	8003c1c <BSP_LCD_FillCircle>
	return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	ffff0000 	.word	0xffff0000

080011ec <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09a      	sub	sp, #104	; 0x68
 80011f0:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80011f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011f6:	2234      	movs	r2, #52	; 0x34
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00b fbc7 	bl	800c98e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2234      	movs	r2, #52	; 0x34
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00b fbc1 	bl	800c98e <memset>

  hltdc.Instance = LTDC;
 800120c:	4b4f      	ldr	r3, [pc, #316]	; (800134c <MX_LTDC_Init+0x160>)
 800120e:	4a50      	ldr	r2, [pc, #320]	; (8001350 <MX_LTDC_Init+0x164>)
 8001210:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001212:	4b4e      	ldr	r3, [pc, #312]	; (800134c <MX_LTDC_Init+0x160>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001218:	4b4c      	ldr	r3, [pc, #304]	; (800134c <MX_LTDC_Init+0x160>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800121e:	4b4b      	ldr	r3, [pc, #300]	; (800134c <MX_LTDC_Init+0x160>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001224:	4b49      	ldr	r3, [pc, #292]	; (800134c <MX_LTDC_Init+0x160>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800122a:	4b48      	ldr	r3, [pc, #288]	; (800134c <MX_LTDC_Init+0x160>)
 800122c:	2209      	movs	r2, #9
 800122e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001230:	4b46      	ldr	r3, [pc, #280]	; (800134c <MX_LTDC_Init+0x160>)
 8001232:	2201      	movs	r2, #1
 8001234:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <MX_LTDC_Init+0x160>)
 8001238:	221d      	movs	r2, #29
 800123a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <MX_LTDC_Init+0x160>)
 800123e:	2203      	movs	r2, #3
 8001240:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001242:	4b42      	ldr	r3, [pc, #264]	; (800134c <MX_LTDC_Init+0x160>)
 8001244:	f240 120d 	movw	r2, #269	; 0x10d
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800124a:	4b40      	ldr	r3, [pc, #256]	; (800134c <MX_LTDC_Init+0x160>)
 800124c:	f240 1243 	movw	r2, #323	; 0x143
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <MX_LTDC_Init+0x160>)
 8001254:	f240 1217 	movw	r2, #279	; 0x117
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800125a:	4b3c      	ldr	r3, [pc, #240]	; (800134c <MX_LTDC_Init+0x160>)
 800125c:	f240 1247 	movw	r2, #327	; 0x147
 8001260:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <MX_LTDC_Init+0x160>)
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <MX_LTDC_Init+0x160>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <MX_LTDC_Init+0x160>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800127a:	4834      	ldr	r0, [pc, #208]	; (800134c <MX_LTDC_Init+0x160>)
 800127c:	f006 fe00 	bl	8007e80 <HAL_LTDC_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001286:	f000 fbb3 	bl	80019f0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 800128e:	23f0      	movs	r3, #240	; 0xf0
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8001296:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800129a:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800129c:	2302      	movs	r3, #2
 800129e:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80012a0:	23ff      	movs	r3, #255	; 0xff
 80012a2:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80012a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ac:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80012ae:	2307      	movs	r3, #7
 80012b0:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 80012b2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80012b6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 80012b8:	23f0      	movs	r3, #240	; 0xf0
 80012ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 80012bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012c0:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_LTDC_Init+0x160>)
 80012de:	f006 ff61 	bl	80081a4 <HAL_LTDC_ConfigLayer>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 80012e8:	f000 fb82 	bl	80019f0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001308:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800130a:	2305      	movs	r3, #5
 800130c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	2201      	movs	r2, #1
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_LTDC_Init+0x160>)
 8001334:	f006 ff36 	bl	80081a4 <HAL_LTDC_ConfigLayer>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 800133e:	f000 fb57 	bl	80019f0 <Error_Handler>
  }

}
 8001342:	bf00      	nop
 8001344:	3768      	adds	r7, #104	; 0x68
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200004c8 	.word	0x200004c8
 8001350:	40016800 	.word	0x40016800

08001354 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a7b      	ldr	r2, [pc, #492]	; (8001560 <HAL_LTDC_MspInit+0x20c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f040 80f0 	bne.w	8001558 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	4b79      	ldr	r3, [pc, #484]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	4a78      	ldr	r2, [pc, #480]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 8001382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001386:	6453      	str	r3, [r2, #68]	; 0x44
 8001388:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001390:	623b      	str	r3, [r7, #32]
 8001392:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	4b72      	ldr	r3, [pc, #456]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	4a71      	ldr	r2, [pc, #452]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	6313      	str	r3, [r2, #48]	; 0x30
 80013a4:	4b6f      	ldr	r3, [pc, #444]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a6a      	ldr	r2, [pc, #424]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b68      	ldr	r3, [pc, #416]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	4b64      	ldr	r3, [pc, #400]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a63      	ldr	r2, [pc, #396]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b61      	ldr	r3, [pc, #388]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4a5c      	ldr	r2, [pc, #368]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
 80013f8:	4b5a      	ldr	r3, [pc, #360]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a55      	ldr	r2, [pc, #340]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <HAL_LTDC_MspInit+0x210>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800143c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800144e:	230e      	movs	r3, #14
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4843      	ldr	r0, [pc, #268]	; (8001568 <HAL_LTDC_MspInit+0x214>)
 800145a:	f003 ffed 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800145e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001470:	230e      	movs	r3, #14
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	483c      	ldr	r0, [pc, #240]	; (800156c <HAL_LTDC_MspInit+0x218>)
 800147c:	f003 ffdc 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001480:	2303      	movs	r3, #3
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001490:	2309      	movs	r3, #9
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4835      	ldr	r0, [pc, #212]	; (8001570 <HAL_LTDC_MspInit+0x21c>)
 800149c:	f003 ffcc 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80014a0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b2:	230e      	movs	r3, #14
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	482c      	ldr	r0, [pc, #176]	; (8001570 <HAL_LTDC_MspInit+0x21c>)
 80014be:	f003 ffbb 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80014c2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d4:	230e      	movs	r3, #14
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	4825      	ldr	r0, [pc, #148]	; (8001574 <HAL_LTDC_MspInit+0x220>)
 80014e0:	f003 ffaa 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80014e4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014f6:	230e      	movs	r3, #14
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	481d      	ldr	r0, [pc, #116]	; (8001578 <HAL_LTDC_MspInit+0x224>)
 8001502:	f003 ff99 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001506:	2348      	movs	r3, #72	; 0x48
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001516:	230e      	movs	r3, #14
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4816      	ldr	r0, [pc, #88]	; (800157c <HAL_LTDC_MspInit+0x228>)
 8001522:	f003 ff89 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001526:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001538:	2309      	movs	r3, #9
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <HAL_LTDC_MspInit+0x220>)
 8001544:	f003 ff78 	bl	8005438 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2105      	movs	r1, #5
 800154c:	2058      	movs	r0, #88	; 0x58
 800154e:	f003 f9d5 	bl	80048fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001552:	2058      	movs	r0, #88	; 0x58
 8001554:	f003 f9ee 	bl	8004934 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001558:	bf00      	nop
 800155a:	3738      	adds	r7, #56	; 0x38
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40016800 	.word	0x40016800
 8001564:	40023800 	.word	0x40023800
 8001568:	40021400 	.word	0x40021400
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40021800 	.word	0x40021800
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00

08001580 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b0a3      	sub	sp, #140	; 0x8c
 8001584:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001586:	f003 f89d 	bl	80046c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158a:	f000 f94d 	bl	8001828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158e:	f7ff fb5b 	bl	8000c48 <MX_GPIO_Init>
  MX_CRC_Init();
 8001592:	f7ff f9d1 	bl	8000938 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001596:	f7ff fa05 	bl	80009a4 <MX_DMA2D_Init>
  MX_FMC_Init();
 800159a:	f7ff fa5d 	bl	8000a58 <MX_FMC_Init>
  MX_I2C3_Init();
 800159e:	f7ff fc63 	bl	8000e68 <MX_I2C3_Init>
  MX_LTDC_Init();
 80015a2:	f7ff fe23 	bl	80011ec <MX_LTDC_Init>
  MX_SPI5_Init();
 80015a6:	f000 fab5 	bl	8001b14 <MX_SPI5_Init>
  MX_TIM1_Init();
 80015aa:	f000 fc6b 	bl	8001e84 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80015ae:	f000 fecf 	bl	8002350 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  int odswiezanie = 16;
 80015b2:	2310      	movs	r3, #16
 80015b4:	66bb      	str	r3, [r7, #104]	; 0x68
  BSP_LCD_Init();
 80015b6:	f001 ff03 	bl	80033c0 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80015ba:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80015be:	2001      	movs	r0, #1
 80015c0:	f001 ff80 	bl	80034c4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f001 ffe1 	bl	800358c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 80015ca:	488f      	ldr	r0, [pc, #572]	; (8001808 <main+0x288>)
 80015cc:	f002 f878 	bl	80036c0 <BSP_LCD_Clear>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 80015d0:	2100      	movs	r1, #0
 80015d2:	2001      	movs	r0, #1
 80015d4:	f001 ffea 	bl	80035ac <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 80015d8:	498c      	ldr	r1, [pc, #560]	; (800180c <main+0x28c>)
 80015da:	2000      	movs	r0, #0
 80015dc:	f001 ff72 	bl	80034c4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f001 ffd3 	bl	800358c <BSP_LCD_SelectLayer>
  layer_flag = 0;
 80015e6:	4b8a      	ldr	r3, [pc, #552]	; (8001810 <main+0x290>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
  BSP_LCD_Clear(LCD_COLOR_RED);
 80015ec:	4886      	ldr	r0, [pc, #536]	; (8001808 <main+0x288>)
 80015ee:	f002 f867 	bl	80036c0 <BSP_LCD_Clear>

  BSP_LCD_DisplayOn();
 80015f2:	f002 fbb3 	bl	8003d5c <BSP_LCD_DisplayOn>

  Touchscreen_Calibration();
 80015f6:	f000 fcb7 	bl	8001f68 <Touchscreen_Calibration>


  menu_bbg();
 80015fa:	f000 f999 	bl	8001930 <menu_bbg>
  BSP_LCD_Clear(LCD_COLOR_RED);
 80015fe:	4882      	ldr	r0, [pc, #520]	; (8001808 <main+0x288>)
 8001600:	f002 f85e 	bl	80036c0 <BSP_LCD_Clear>

                        // Liczba klocków
  int klocek_szerokosc = BSP_LCD_GetXSize() / 12; // Klocki są szersze niż wyższe
 8001604:	f001 ff46 	bl	8003494 <BSP_LCD_GetXSize>
 8001608:	4602      	mov	r2, r0
 800160a:	4b82      	ldr	r3, [pc, #520]	; (8001814 <main+0x294>)
 800160c:	fba3 2302 	umull	r2, r3, r3, r2
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	667b      	str	r3, [r7, #100]	; 0x64
  int klocek_wysokosc = BSP_LCD_GetYSize() / 24; // Zakładamy 4 rzędy klocków
 8001614:	f001 ff4a 	bl	80034ac <BSP_LCD_GetYSize>
 8001618:	4602      	mov	r2, r0
 800161a:	4b7e      	ldr	r3, [pc, #504]	; (8001814 <main+0x294>)
 800161c:	fba3 2302 	umull	r2, r3, r3, r2
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	663b      	str	r3, [r7, #96]	; 0x60
  int liczba_klockow = 5*(BSP_LCD_GetXSize()/klocek_szerokosc); // Liczba klocków
 8001624:	f001 ff36 	bl	8003494 <BSP_LCD_GetXSize>
 8001628:	4602      	mov	r2, r0
 800162a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800162c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	65fb      	str	r3, [r7, #92]	; 0x5c

  Platforma *platforma = (Platforma *)malloc(sizeof(Platforma));
 8001638:	2018      	movs	r0, #24
 800163a:	f00b f995 	bl	800c968 <malloc>
 800163e:	4603      	mov	r3, r0
 8001640:	65bb      	str	r3, [r7, #88]	; 0x58
  Kulka *kulka = (Kulka *)malloc(sizeof(Kulka));
 8001642:	2018      	movs	r0, #24
 8001644:	f00b f990 	bl	800c968 <malloc>
 8001648:	4603      	mov	r3, r0
 800164a:	657b      	str	r3, [r7, #84]	; 0x54
  Klocek **klocki = (Klocek **)malloc(liczba_klockow * sizeof(Klocek *));
 800164c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4618      	mov	r0, r3
 8001652:	f00b f989 	bl	800c968 <malloc>
 8001656:	4603      	mov	r3, r0
 8001658:	653b      	str	r3, [r7, #80]	; 0x50
  int licznik = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	677b      	str	r3, [r7, #116]	; 0x74

  for (int kk = 0; kk < 5; kk++)
 800165e:	2300      	movs	r3, #0
 8001660:	673b      	str	r3, [r7, #112]	; 0x70
 8001662:	e051      	b.n	8001708 <main+0x188>
  { // Zakładając 4 rzędy klocków
    for (int k = 0; k < liczba_klockow/5; k++, licznik++)
 8001664:	2300      	movs	r3, #0
 8001666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001668:	e041      	b.n	80016ee <main+0x16e>
    { // 8 kolumn klocków
      klocki[licznik] = (Klocek *)malloc(sizeof(Klocek));
 800166a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001670:	18d4      	adds	r4, r2, r3
 8001672:	2014      	movs	r0, #20
 8001674:	f00b f978 	bl	800c968 <malloc>
 8001678:	4603      	mov	r3, r0
 800167a:	6023      	str	r3, [r4, #0]
      uint32_t kolor_klocka = ((k % 2 == 0 && kk % 2 == 0) || (k % 2 == 1 && kk % 2 == 1)) ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 800167c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d104      	bne.n	8001690 <main+0x110>
 8001686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00f      	beq.n	80016b0 <main+0x130>
 8001690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001692:	2b00      	cmp	r3, #0
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	bfb8      	it	lt
 800169a:	425b      	neglt	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d109      	bne.n	80016b4 <main+0x134>
 80016a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	bfb8      	it	lt
 80016aa:	425b      	neglt	r3, r3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <main+0x134>
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <main+0x298>)
 80016b2:	e001      	b.n	80016b8 <main+0x138>
 80016b4:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80016b8:	61fb      	str	r3, [r7, #28]
      Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka);
 80016ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80016c0:	4413      	add	r3, r2
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016c8:	fb02 f103 	mul.w	r1, r2, r3
 80016cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016d0:	fb02 f203 	mul.w	r2, r2, r3
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016de:	f7ff fc93 	bl	8001008 <Klocek_init>
    for (int k = 0; k < liczba_klockow/5; k++, licznik++)
 80016e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016e4:	3301      	adds	r3, #1
 80016e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016ea:	3301      	adds	r3, #1
 80016ec:	677b      	str	r3, [r7, #116]	; 0x74
 80016ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f0:	4a4a      	ldr	r2, [pc, #296]	; (800181c <main+0x29c>)
 80016f2:	fb82 1203 	smull	r1, r2, r2, r3
 80016f6:	1052      	asrs	r2, r2, #1
 80016f8:	17db      	asrs	r3, r3, #31
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbb3      	blt.n	800166a <main+0xea>
  for (int kk = 0; kk < 5; kk++)
 8001702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001704:	3301      	adds	r3, #1
 8001706:	673b      	str	r3, [r7, #112]	; 0x70
 8001708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800170a:	2b04      	cmp	r3, #4
 800170c:	ddaa      	ble.n	8001664 <main+0xe4>
    }
  }

  int platforma_x = 50;
 800170e:	2332      	movs	r3, #50	; 0x32
 8001710:	64fb      	str	r3, [r7, #76]	; 0x4c
  int platforma_y = BSP_LCD_GetYSize() - 20;
 8001712:	f001 fecb 	bl	80034ac <BSP_LCD_GetYSize>
 8001716:	4603      	mov	r3, r0
 8001718:	3b14      	subs	r3, #20
 800171a:	64bb      	str	r3, [r7, #72]	; 0x48
  int platforma_szerokosc = 80;
 800171c:	2350      	movs	r3, #80	; 0x50
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
  int platforma_wysokosc = 8;
 8001720:	2308      	movs	r3, #8
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
  int platforma_krok = 5;
 8001724:	2305      	movs	r3, #5
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t platforma_kolor = LCD_COLOR_WHITE;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 800172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800173e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001740:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001742:	f000 f95c 	bl	80019fe <Platforma_init>
  int kulka_pocz_x = 10 + (rand() % (BSP_LCD_GetXSize() - 20));
 8001746:	f00b f985 	bl	800ca54 <rand>
 800174a:	4603      	mov	r3, r0
 800174c:	461c      	mov	r4, r3
 800174e:	f001 fea1 	bl	8003494 <BSP_LCD_GetXSize>
 8001752:	4603      	mov	r3, r0
 8001754:	3b14      	subs	r3, #20
 8001756:	fbb4 f2f3 	udiv	r2, r4, r3
 800175a:	fb03 f302 	mul.w	r3, r3, r2
 800175e:	1ae3      	subs	r3, r4, r3
 8001760:	330a      	adds	r3, #10
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
  int kulka_pocz_y = BSP_LCD_GetYSize() / 2;
 8001764:	f001 fea2 	bl	80034ac <BSP_LCD_GetYSize>
 8001768:	4603      	mov	r3, r0
 800176a:	085b      	lsrs	r3, r3, #1
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  int kulka_r = 4;
 800176e:	2304      	movs	r3, #4
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  int kulka_vx = 2;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  int kulka_vy = 2;
 8001776:	2302      	movs	r3, #2
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t kulka_kolor = LCD_COLOR_WHITE;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	623b      	str	r3, [r7, #32]

  Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001790:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001792:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001794:	f7ff fc6f 	bl	8001076 <Kulka_init>

  BBG bbg;
  BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 8001798:	f107 0008 	add.w	r0, r7, #8
 800179c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80017a6:	f7fe fea3 	bl	80004f0 <BBG_init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (BBG_ruchKulki(&bbg) == 1)
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f862 	bl	8000878 <BBG_ruchKulki>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d110      	bne.n	80017dc <main+0x25c>
    {
      BSP_LCD_SetFont(&Font20);
 80017ba:	4819      	ldr	r0, [pc, #100]	; (8001820 <main+0x2a0>)
 80017bc:	f001 ff66 	bl	800368c <BSP_LCD_SetFont>
      BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 80017c0:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80017c4:	f001 ff48 	bl	8003658 <BSP_LCD_SetBackColor>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80017c8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80017cc:	f001 ff2c 	bl	8003628 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(0, 100, "Game Over", CENTER_MODE);
 80017d0:	2301      	movs	r3, #1
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <main+0x2a4>)
 80017d4:	2164      	movs	r1, #100	; 0x64
 80017d6:	2000      	movs	r0, #0
 80017d8:	f001 ffde 	bl	8003798 <BSP_LCD_DisplayStringAt>
      // return;
    }
    BBG_obsluga_zbicia_klocka(&bbg);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe febf 	bl	8000564 <BBG_obsluga_zbicia_klocka>

    // 		Get touch state
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 80017e6:	463b      	mov	r3, r7
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 feb9 	bl	8004560 <BSP_TS_GetState>
    BBG_obsluzDotykEkranu(&bbg, TS_State);
 80017ee:	f107 0008 	add.w	r0, r7, #8
 80017f2:	463b      	mov	r3, r7
 80017f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80017f8:	f7fe ffc8 	bl	800078c <BBG_obsluzDotykEkranu>
    HAL_Delay(odswiezanie);
 80017fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 ffa2 	bl	8004748 <HAL_Delay>
  {
 8001804:	e7d1      	b.n	80017aa <main+0x22a>
 8001806:	bf00      	nop
 8001808:	ffff0000 	.word	0xffff0000
 800180c:	d0130000 	.word	0xd0130000
 8001810:	20000570 	.word	0x20000570
 8001814:	aaaaaaab 	.word	0xaaaaaaab
 8001818:	ff0000ff 	.word	0xff0000ff
 800181c:	66666667 	.word	0x66666667
 8001820:	20000074 	.word	0x20000074
 8001824:	0800caf8 	.word	0x0800caf8

08001828 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0a0      	sub	sp, #128	; 0x80
 800182c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001832:	2230      	movs	r2, #48	; 0x30
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f00b f8a9 	bl	800c98e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2230      	movs	r2, #48	; 0x30
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00b f89a 	bl	800c98e <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <SystemClock_Config+0x100>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a31      	ldr	r2, [pc, #196]	; (8001928 <SystemClock_Config+0x100>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <SystemClock_Config+0x100>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <SystemClock_Config+0x104>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001882:	4a2a      	ldr	r2, [pc, #168]	; (800192c <SystemClock_Config+0x104>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <SystemClock_Config+0x104>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001896:	2301      	movs	r3, #1
 8001898:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800189a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a0:	2302      	movs	r3, #2
 80018a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018aa:	2304      	movs	r3, #4
 80018ac:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018ae:	2348      	movs	r3, #72	; 0x48
 80018b0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018b6:	2303      	movs	r3, #3
 80018b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018be:	4618      	mov	r0, r3
 80018c0:	f006 fe70 	bl	80085a4 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018ca:	f000 f891 	bl	80019f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ce:	230f      	movs	r3, #15
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2302      	movs	r3, #2
 80018d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018e8:	2102      	movs	r1, #2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f007 f8ca 	bl	8008a84 <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80018f6:	f000 f87b 	bl	80019f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80018fa:	2308      	movs	r3, #8
 80018fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80018fe:	2332      	movs	r3, #50	; 0x32
 8001900:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4618      	mov	r0, r3
 8001910:	f007 fadc 	bl	8008ecc <HAL_RCCEx_PeriphCLKConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800191a:	f000 f869 	bl	80019f0 <Error_Handler>
  }
}
 800191e:	bf00      	nop
 8001920:	3780      	adds	r7, #128	; 0x80
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000

08001930 <menu_bbg>:

/* USER CODE BEGIN 4 */

void menu_bbg()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001936:	481f      	ldr	r0, [pc, #124]	; (80019b4 <menu_bbg+0x84>)
 8001938:	f001 fec2 	bl	80036c0 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font20);
 800193c:	481e      	ldr	r0, [pc, #120]	; (80019b8 <menu_bbg+0x88>)
 800193e:	f001 fea5 	bl	800368c <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 8001942:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001946:	f001 fe87 	bl	8003658 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800194a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800194e:	f001 fe6b 	bl	8003628 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, "BBG", CENTER_MODE);
 8001952:	f001 fdab 	bl	80034ac <BSP_LCD_GetYSize>
 8001956:	4603      	mov	r3, r0
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	b299      	uxth	r1, r3
 800195c:	2301      	movs	r3, #1
 800195e:	4a17      	ldr	r2, [pc, #92]	; (80019bc <menu_bbg+0x8c>)
 8001960:	2000      	movs	r0, #0
 8001962:	f001 ff19 	bl	8003798 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8001966:	4816      	ldr	r0, [pc, #88]	; (80019c0 <menu_bbg+0x90>)
 8001968:	f001 fe90 	bl	800368c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, "Touch screen to begin", CENTER_MODE);
 800196c:	f001 fd9e 	bl	80034ac <BSP_LCD_GetYSize>
 8001970:	4603      	mov	r3, r0
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	3314      	adds	r3, #20
 8001978:	b299      	uxth	r1, r3
 800197a:	2301      	movs	r3, #1
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <menu_bbg+0x94>)
 800197e:	2000      	movs	r0, #0
 8001980:	f001 ff0a 	bl	8003798 <BSP_LCD_DisplayStringAt>

  while (1)
  {
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 8001984:	463b      	mov	r3, r7
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fdea 	bl	8004560 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 800198c:	883b      	ldrh	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f8      	beq.n	8001984 <menu_bbg+0x54>
    {
      BSP_LCD_SetFont(&Font20);
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <menu_bbg+0x88>)
 8001994:	f001 fe7a 	bl	800368c <BSP_LCD_SetFont>

      BSP_LCD_DisplayStringAt(0, 20, "TOUCHED!", CENTER_MODE);
 8001998:	2301      	movs	r3, #1
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <menu_bbg+0x98>)
 800199c:	2114      	movs	r1, #20
 800199e:	2000      	movs	r0, #0
 80019a0:	f001 fefa 	bl	8003798 <BSP_LCD_DisplayStringAt>
      HAL_Delay(500);
 80019a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a8:	f002 fece 	bl	8004748 <HAL_Delay>
      return;
 80019ac:	bf00      	nop
    }
  }
}
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	ffff0000 	.word	0xffff0000
 80019b8:	20000074 	.word	0x20000074
 80019bc:	0800cb04 	.word	0x0800cb04
 80019c0:	2000007c 	.word	0x2000007c
 80019c4:	0800cb08 	.word	0x0800cb08
 80019c8:	0800cb20 	.word	0x0800cb20

080019cc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80019de:	f002 fe93 	bl	8004708 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40001000 	.word	0x40001000

080019f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  /* USER CODE END Error_Handler_Debug */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <Platforma_init>:
#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma *platforma, int x, int y, int w, int h, int k, uint32_t kol)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	615a      	str	r2, [r3, #20]
    rysuj_platforme(platforma);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f821 	bl	8001a78 <rysuj_platforme>
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <zmaz_platforme>:

void zmaz_platforme(Platforma *platforma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <zmaz_platforme+0x34>)
 8001a4a:	f001 fded 	bl	8003628 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b298      	uxth	r0, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	b299      	uxth	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f002 f87f 	bl	8003b68 <BSP_LCD_FillRect>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	ffff0000 	.word	0xffff0000

08001a78 <rysuj_platforme>:

void rysuj_platforme(Platforma *platforma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(platforma->kolor);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fdcf 	bl	8003628 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b298      	uxth	r0, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	b299      	uxth	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f002 f861 	bl	8003b68 <BSP_LCD_FillRect>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <Platforma_przesunDo>:

void Platforma_przesunDo(Platforma *platforma, int x)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
    platforma->polozenie_x = x;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <Platforma_getPolozenieX>:
    platforma->polozenie_x += platforma->krok;
}

// Pobranie położenia X platformy
int Platforma_getPolozenieX(const Platforma *platforma)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
    return platforma->polozenie_x;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <Platforma_getSzerokosc>:
    return platforma->polozenie_y;
}

// Pobranie szerokości platformy
int Platforma_getSzerokosc(const Platforma *platforma)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
    return platforma->szerokosc;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <Platforma_getKrok>:
{
    return platforma->wysokosc;
}

int Platforma_getKrok(const Platforma *platforma)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
    return platforma->krok;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <MX_SPI5_Init+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b44:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b48:	2218      	movs	r2, #24
 8001b4a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b60:	220a      	movs	r2, #10
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_SPI5_Init+0x64>)
 8001b66:	f007 fbee 	bl	8009346 <HAL_SPI_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001b70:	f7ff ff3e 	bl	80019f0 <Error_Handler>
  }

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000574 	.word	0x20000574
 8001b7c:	40015000 	.word	0x40015000

08001b80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_SPI_MspInit+0x84>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12c      	bne.n	8001bfc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_SPI_MspInit+0x88>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_SPI_MspInit+0x88>)
 8001bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_SPI_MspInit+0x88>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_SPI_MspInit+0x88>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_SPI_MspInit+0x88>)
 8001bc8:	f043 0320 	orr.w	r3, r3, #32
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_SPI_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001bda:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001bec:	2305      	movs	r3, #5
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <HAL_SPI_MspInit+0x8c>)
 8001bf8:	f003 fc1e 	bl	8005438 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40015000 	.word	0x40015000
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40021400 	.word	0x40021400

08001c10 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_SPI_MspDeInit+0x30>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10a      	bne.n	8001c38 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_SPI_MspDeInit+0x34>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_SPI_MspDeInit+0x34>)
 8001c28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001c2e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <HAL_SPI_MspDeInit+0x38>)
 8001c34:	f003 fdaa 	bl	800578c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40015000 	.word	0x40015000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40021400 	.word	0x40021400

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_MspInit+0x54>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	f06f 0001 	mvn.w	r0, #1
 8001c92:	f002 fe33 	bl	80048fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	; 0x30
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	2036      	movs	r0, #54	; 0x36
 8001cba:	f002 fe1f 	bl	80048fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cbe:	2036      	movs	r0, #54	; 0x36
 8001cc0:	f002 fe38 	bl	8004934 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <HAL_InitTick+0xa4>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_InitTick+0xa4>)
 8001cce:	f043 0310 	orr.w	r3, r3, #16
 8001cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_InitTick+0xa4>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ce0:	f107 0210 	add.w	r2, r7, #16
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f007 f8bc 	bl	8008e68 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cf0:	f007 f892 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <HAL_InitTick+0xa8>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9b      	lsrs	r3, r3, #18
 8001d04:	3b01      	subs	r3, #1
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_InitTick+0xac>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_InitTick+0xb0>)
 8001d0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_InitTick+0xac>)
 8001d10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_InitTick+0xac>)
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_InitTick+0xac>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_InitTick+0xac>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <HAL_InitTick+0xac>)
 8001d2a:	f008 f897 	bl	8009e5c <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d104      	bne.n	8001d3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d34:	4806      	ldr	r0, [pc, #24]	; (8001d50 <HAL_InitTick+0xac>)
 8001d36:	f008 f8bc 	bl	8009eb2 <HAL_TIM_Base_Start_IT>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3730      	adds	r7, #48	; 0x30
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	431bde83 	.word	0x431bde83
 8001d50:	200005cc 	.word	0x200005cc
 8001d54:	40001000 	.word	0x40001000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_Clear(0xFF000000); // czarny
 8001d6a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001d6e:	f001 fca7 	bl	80036c0 <BSP_LCD_Clear>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler+0xc>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  BSP_LCD_Clear(0xFFFFFF00); // zolty
 8001d78:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001d7c:	f001 fca0 	bl	80036c0 <BSP_LCD_Clear>
 8001d80:	e7fa      	b.n	8001d78 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM6_DAC_IRQHandler+0x10>)
 8001da2:	f008 f8aa 	bl	8009efa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200005cc 	.word	0x200005cc

08001db0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <OTG_HS_IRQHandler+0x10>)
 8001db6:	f003 fe0c 	bl	80059d2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000790 	.word	0x20000790

08001dc4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <LTDC_IRQHandler+0x10>)
 8001dca:	f006 f929 	bl	8008020 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200004c8 	.word	0x200004c8

08001dd8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DMA2D_IRQHandler+0x10>)
 8001dde:	f003 f8ec 	bl	8004fba <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000400 	.word	0x20000400

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f00a fd7a 	bl	800c914 <__errno>
 8001e20:	4602      	mov	r2, r0
 8001e22:	230c      	movs	r3, #12
 8001e24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20030000 	.word	0x20030000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	20000120 	.word	0x20000120
 8001e54:	20000a58 	.word	0x20000a58

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <SystemInit+0x28>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <SystemInit+0x28>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SystemInit+0x28>)
 8001e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e72:	609a      	str	r2, [r3, #8]
#endif
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e98:	463b      	mov	r3, r7
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <MX_TIM1_Init+0x9c>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ecc:	4813      	ldr	r0, [pc, #76]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001ece:	f007 ffc5 	bl	8009e5c <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ed8:	f7ff fd8a 	bl	80019f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001eea:	f008 f90e 	bl	800a10a <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ef4:	f7ff fd7c 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f00:	463b      	mov	r3, r7
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_TIM1_Init+0x98>)
 8001f06:	f008 fb19 	bl	800a53c <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f10:	f7ff fd6e 	bl	80019f0 <Error_Handler>
  }

}
 8001f14:	bf00      	nop
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2000060c 	.word	0x2000060c
 8001f20:	40010000 	.word	0x40010000

08001f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_TIM_Base_MspInit+0x3c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10d      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_TIM_Base_MspInit+0x40>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <HAL_TIM_Base_MspInit+0x40>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_TIM_Base_MspInit+0x40>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40023800 	.word	0x40023800

08001f68 <Touchscreen_Calibration>:
 * @brief  Performs the TS calibration
 * @param  None
 * @retval None
 */
void Touchscreen_Calibration(void)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	71fb      	strb	r3, [r7, #7]

  TouchscreenCalibration_SetHint();
 8001f76:	f000 f8f1 	bl	800215c <TouchscreenCalibration_SetHint>

  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001f7a:	f001 fa8b 	bl	8003494 <BSP_LCD_GetXSize>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	b29c      	uxth	r4, r3
 8001f82:	f001 fa93 	bl	80034ac <BSP_LCD_GetYSize>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f002 faad 	bl	80044ec <BSP_TS_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	71bb      	strb	r3, [r7, #6]

  if (status != TS_OK)
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01c      	beq.n	8001fd6 <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f001 fb5a 	bl	8003658 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001fa4:	4861      	ldr	r0, [pc, #388]	; (800212c <Touchscreen_Calibration+0x1c4>)
 8001fa6:	f001 fb3f 	bl	8003628 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 8001faa:	f001 fa7f 	bl	80034ac <BSP_LCD_GetYSize>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b5f      	subs	r3, #95	; 0x5f
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4a5d      	ldr	r2, [pc, #372]	; (8002130 <Touchscreen_Calibration+0x1c8>)
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f001 fbec 	bl	8003798 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 8001fc0:	f001 fa74 	bl	80034ac <BSP_LCD_GetYSize>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b50      	subs	r3, #80	; 0x50
 8001fca:	b299      	uxth	r1, r3
 8001fcc:	2301      	movs	r3, #1
 8001fce:	4a59      	ldr	r2, [pc, #356]	; (8002134 <Touchscreen_Calibration+0x1cc>)
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f001 fbe1 	bl	8003798 <BSP_LCD_DisplayStringAt>
  }

  while (1)
  {
    if (status == TS_OK)
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 80a0 	bne.w	800211e <Touchscreen_Calibration+0x1b6>
    {
      aLogX[0] = 15;
 8001fde:	4b56      	ldr	r3, [pc, #344]	; (8002138 <Touchscreen_Calibration+0x1d0>)
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 8001fe4:	4b55      	ldr	r3, [pc, #340]	; (800213c <Touchscreen_Calibration+0x1d4>)
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 8001fea:	f001 fa53 	bl	8003494 <BSP_LCD_GetXSize>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b0f      	subs	r3, #15
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <Touchscreen_Calibration+0x1d0>)
 8001ffa:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8001ffc:	f001 fa56 	bl	80034ac <BSP_LCD_GetYSize>
 8002000:	4603      	mov	r3, r0
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b0f      	subs	r3, #15
 8002006:	b29b      	uxth	r3, r3
 8002008:	b21a      	sxth	r2, r3
 800200a:	4b4c      	ldr	r3, [pc, #304]	; (800213c <Touchscreen_Calibration+0x1d4>)
 800200c:	805a      	strh	r2, [r3, #2]

      for (i = 0; i < 2; i++)
 800200e:	2300      	movs	r3, #0
 8002010:	71fb      	strb	r3, [r7, #7]
 8002012:	e015      	b.n	8002040 <Touchscreen_Calibration+0xd8>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4a48      	ldr	r2, [pc, #288]	; (8002138 <Touchscreen_Calibration+0x1d0>)
 8002018:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <Touchscreen_Calibration+0x1d4>)
 8002020:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4a45      	ldr	r2, [pc, #276]	; (8002140 <Touchscreen_Calibration+0x1d8>)
 800202a:	189c      	adds	r4, r3, r2
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4a44      	ldr	r2, [pc, #272]	; (8002144 <Touchscreen_Calibration+0x1dc>)
 8002032:	4413      	add	r3, r2
 8002034:	4622      	mov	r2, r4
 8002036:	f000 f8d1 	bl	80021dc <GetPhysValues>
      for (i = 0; i < 2; i++)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	3301      	adds	r3, #1
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d9e6      	bls.n	8002014 <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * (aLogX[1] - aLogX[0])) / (aPhysX[1] - aPhysX[0]);
 8002046:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <Touchscreen_Calibration+0x1d0>)
 8002048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800204c:	461a      	mov	r2, r3
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <Touchscreen_Calibration+0x1d0>)
 8002050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800205a:	fb02 f203 	mul.w	r2, r2, r3
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <Touchscreen_Calibration+0x1d8>)
 8002060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002064:	4619      	mov	r1, r3
 8002066:	4b36      	ldr	r3, [pc, #216]	; (8002140 <Touchscreen_Calibration+0x1d8>)
 8002068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206c:	1acb      	subs	r3, r1, r3
 800206e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002072:	b21a      	sxth	r2, r3
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <Touchscreen_Calibration+0x1e0>)
 8002076:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0];
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <Touchscreen_Calibration+0x1d0>)
 800207a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	0152      	lsls	r2, r2, #5
 8002084:	1ad2      	subs	r2, r2, r3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <Touchscreen_Calibration+0x1d8>)
 8002090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002094:	b299      	uxth	r1, r3
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <Touchscreen_Calibration+0x1e0>)
 8002098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209c:	b29b      	uxth	r3, r3
 800209e:	fb11 f303 	smulbb	r3, r1, r3
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <Touchscreen_Calibration+0x1e4>)
 80020ac:	801a      	strh	r2, [r3, #0]

      A2 = (1000 * (aLogY[1] - aLogY[0])) / (aPhysY[1] - aPhysY[0]);
 80020ae:	4b23      	ldr	r3, [pc, #140]	; (800213c <Touchscreen_Calibration+0x1d4>)
 80020b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <Touchscreen_Calibration+0x1d4>)
 80020b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020c2:	fb02 f203 	mul.w	r2, r2, r3
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <Touchscreen_Calibration+0x1dc>)
 80020c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <Touchscreen_Calibration+0x1dc>)
 80020d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d4:	1acb      	subs	r3, r1, r3
 80020d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80020da:	b21a      	sxth	r2, r3
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <Touchscreen_Calibration+0x1e8>)
 80020de:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0];
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <Touchscreen_Calibration+0x1d4>)
 80020e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	0152      	lsls	r2, r2, #5
 80020ec:	1ad2      	subs	r2, r2, r3
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <Touchscreen_Calibration+0x1dc>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	b299      	uxth	r1, r3
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <Touchscreen_Calibration+0x1e8>)
 8002100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002104:	b29b      	uxth	r3, r3
 8002106:	fb11 f303 	smulbb	r3, r1, r3
 800210a:	b29b      	uxth	r3, r3
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	b29b      	uxth	r3, r3
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <Touchscreen_Calibration+0x1ec>)
 8002114:	801a      	strh	r2, [r3, #0]

      Calibration_Done = 1;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <Touchscreen_Calibration+0x1f0>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
      return;
 800211c:	e003      	b.n	8002126 <Touchscreen_Calibration+0x1be>
    }

    HAL_Delay(5);
 800211e:	2005      	movs	r0, #5
 8002120:	f002 fb12 	bl	8004748 <HAL_Delay>
    if (status == TS_OK)
 8002124:	e757      	b.n	8001fd6 <Touchscreen_Calibration+0x6e>
  }
}
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bd90      	pop	{r4, r7, pc}
 800212c:	ffff0000 	.word	0xffff0000
 8002130:	0800cb2c 	.word	0x0800cb2c
 8002134:	0800cb34 	.word	0x0800cb34
 8002138:	20000140 	.word	0x20000140
 800213c:	20000144 	.word	0x20000144
 8002140:	20000138 	.word	0x20000138
 8002144:	2000013c 	.word	0x2000013c
 8002148:	2000012e 	.word	0x2000012e
 800214c:	20000132 	.word	0x20000132
 8002150:	20000130 	.word	0x20000130
 8002154:	20000134 	.word	0x20000134
 8002158:	2000012c 	.word	0x2000012c

0800215c <TouchscreenCalibration_SetHint>:
 * @brief  Display calibration hint
 * @param  None
 * @retval None
 */
static void TouchscreenCalibration_SetHint(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f001 faac 	bl	80036c0 <BSP_LCD_Clear>

  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002168:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800216c:	f001 fa5c 	bl	8003628 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f001 fa70 	bl	8003658 <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 8002178:	4814      	ldr	r0, [pc, #80]	; (80021cc <TouchscreenCalibration_SetHint+0x70>)
 800217a:	f001 fa87 	bl	800368c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 27, (uint8_t *)"Before using the Touchscreen", CENTER_MODE);
 800217e:	f001 f995 	bl	80034ac <BSP_LCD_GetYSize>
 8002182:	4603      	mov	r3, r0
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b1b      	subs	r3, #27
 800218a:	b299      	uxth	r1, r3
 800218c:	2301      	movs	r3, #1
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <TouchscreenCalibration_SetHint+0x74>)
 8002190:	2000      	movs	r0, #0
 8002192:	f001 fb01 	bl	8003798 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 12, (uint8_t *)"you need to calibrate it.", CENTER_MODE);
 8002196:	f001 f989 	bl	80034ac <BSP_LCD_GetYSize>
 800219a:	4603      	mov	r3, r0
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b0c      	subs	r3, #12
 80021a2:	b299      	uxth	r1, r3
 80021a4:	2301      	movs	r3, #1
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <TouchscreenCalibration_SetHint+0x78>)
 80021a8:	2000      	movs	r0, #0
 80021aa:	f001 faf5 	bl	8003798 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 3, (uint8_t *)"Press on the black circles", CENTER_MODE);
 80021ae:	f001 f97d 	bl	80034ac <BSP_LCD_GetYSize>
 80021b2:	4603      	mov	r3, r0
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3303      	adds	r3, #3
 80021ba:	b299      	uxth	r1, r3
 80021bc:	2301      	movs	r3, #1
 80021be:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <TouchscreenCalibration_SetHint+0x7c>)
 80021c0:	2000      	movs	r0, #0
 80021c2:	f001 fae9 	bl	8003798 <BSP_LCD_DisplayStringAt>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000084 	.word	0x20000084
 80021d0:	0800cb58 	.word	0x0800cb58
 80021d4:	0800cb78 	.word	0x0800cb78
 80021d8:	0800cb94 	.word	0x0800cb94

080021dc <GetPhysValues>:
 * @param  pPhysX : Physical X position
 * @param  pPhysY : Physical Y position
 * @retval None
 */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t *pPhysX, int16_t *pPhysY)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60ba      	str	r2, [r7, #8]
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4603      	mov	r3, r0
 80021e8:	81fb      	strh	r3, [r7, #14]
 80021ea:	460b      	mov	r3, r1
 80021ec:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80021ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80021f2:	f001 fa19 	bl	8003628 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	89b9      	ldrh	r1, [r7, #12]
 80021fa:	2205      	movs	r2, #5
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 fd0d 	bl	8003c1c <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002202:	f04f 30ff 	mov.w	r0, #4294967295
 8002206:	f001 fa0f 	bl	8003628 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	89b9      	ldrh	r1, [r7, #12]
 800220e:	2202      	movs	r2, #2
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fd03 	bl	8003c1c <BSP_LCD_FillCircle>

  /* Wait until touch is pressed */
  WaitForPressedState(1);
 8002216:	2001      	movs	r0, #1
 8002218:	f000 f820 	bl	800225c <WaitForPressedState>

  BSP_TS_GetState(&TS_State);
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <GetPhysValues+0x7c>)
 800221e:	f002 f99f 	bl	8004560 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <GetPhysValues+0x7c>)
 8002224:	885b      	ldrh	r3, [r3, #2]
 8002226:	b21a      	sxth	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <GetPhysValues+0x7c>)
 800222e:	889b      	ldrh	r3, [r3, #4]
 8002230:	b21a      	sxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	801a      	strh	r2, [r3, #0]

  /* Wait until touch is released */
  WaitForPressedState(0);
 8002236:	2000      	movs	r0, #0
 8002238:	f000 f810 	bl	800225c <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f001 f9f2 	bl	8003628 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	89b9      	ldrh	r1, [r7, #12]
 8002248:	2205      	movs	r2, #5
 800224a:	4618      	mov	r0, r3
 800224c:	f001 fce6 	bl	8003c1c <BSP_LCD_FillCircle>
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000124 	.word	0x20000124

0800225c <WaitForPressedState>:
 * @brief  Wait For Pressed State
 * @param  Pressed: Pressed State
 * @retval None
 */
static void WaitForPressedState(uint8_t Pressed)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef State;

  do
  {
    BSP_TS_GetState(&State);
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4618      	mov	r0, r3
 800226c:	f002 f978 	bl	8004560 <BSP_TS_GetState>
    HAL_Delay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f002 fa69 	bl	8004748 <HAL_Delay>
    if (State.TouchDetected == Pressed)
 8002276:	89ba      	ldrh	r2, [r7, #12]
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	b29b      	uxth	r3, r3
 800227c:	429a      	cmp	r2, r3
 800227e:	d1f2      	bne.n	8002266 <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 8002280:	f002 fa56 	bl	8004730 <HAL_GetTick>
 8002284:	4603      	mov	r3, r0
 8002286:	82fb      	strh	r3, [r7, #22]
      do
      {
        BSP_TS_GetState(&State);
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	4618      	mov	r0, r3
 800228e:	f002 f967 	bl	8004560 <BSP_TS_GetState>
        HAL_Delay(10);
 8002292:	200a      	movs	r0, #10
 8002294:	f002 fa58 	bl	8004748 <HAL_Delay>
        if (State.TouchDetected != Pressed)
 8002298:	89ba      	ldrh	r2, [r7, #12]
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	b29b      	uxth	r3, r3
 800229e:	429a      	cmp	r2, r3
 80022a0:	d108      	bne.n	80022b4 <WaitForPressedState+0x58>
        {
          break;
        }
        else if ((HAL_GetTick() - 100) > TimeStart)
 80022a2:	f002 fa45 	bl	8004730 <HAL_GetTick>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80022ac:	8afb      	ldrh	r3, [r7, #22]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d802      	bhi.n	80022b8 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);
 80022b2:	e7e9      	b.n	8002288 <WaitForPressedState+0x2c>
          break;
 80022b4:	bf00      	nop
    BSP_TS_GetState(&State);
 80022b6:	e7d6      	b.n	8002266 <WaitForPressedState+0xa>
        {
          return;
 80022b8:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <Calibration_GetX>:
 * @brief  Calibrate X position
 * @param  x: X position
 * @retval calibrated x
 */
uint16_t Calibration_GetX(uint16_t x)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
  return (((A1 * x) + B1) / 1000);
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <Calibration_GetX+0x3c>)
 80022cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d0:	461a      	mov	r2, r3
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	fb03 f302 	mul.w	r3, r3, r2
 80022d8:	4a09      	ldr	r2, [pc, #36]	; (8002300 <Calibration_GetX+0x40>)
 80022da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022de:	4413      	add	r3, r2
 80022e0:	4a08      	ldr	r2, [pc, #32]	; (8002304 <Calibration_GetX+0x44>)
 80022e2:	fb82 1203 	smull	r1, r2, r2, r3
 80022e6:	1192      	asrs	r2, r2, #6
 80022e8:	17db      	asrs	r3, r3, #31
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	b29b      	uxth	r3, r3
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	2000012e 	.word	0x2000012e
 8002300:	20000132 	.word	0x20000132
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <Calibration_GetY>:
 * @brief  Calibrate Y position
 * @param  y: Y position
 * @retval calibrated y
 */
uint16_t Calibration_GetY(uint16_t y)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
  return (((A2 * y) + B2) / 1000);
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <Calibration_GetY+0x3c>)
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	461a      	mov	r2, r3
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	fb03 f302 	mul.w	r3, r3, r2
 8002320:	4a09      	ldr	r2, [pc, #36]	; (8002348 <Calibration_GetY+0x40>)
 8002322:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002326:	4413      	add	r3, r2
 8002328:	4a08      	ldr	r2, [pc, #32]	; (800234c <Calibration_GetY+0x44>)
 800232a:	fb82 1203 	smull	r1, r2, r2, r3
 800232e:	1192      	asrs	r2, r2, #6
 8002330:	17db      	asrs	r3, r3, #31
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	b29b      	uxth	r3, r3
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000130 	.word	0x20000130
 8002348:	20000134 	.word	0x20000134
 800234c:	10624dd3 	.word	0x10624dd3

08002350 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <MX_USART1_UART_Init+0x50>)
 8002358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002388:	f008 f968 	bl	800a65c <HAL_UART_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002392:	f7ff fb2d 	bl	80019f0 <Error_Handler>
  }

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000064c 	.word	0x2000064c
 80023a0:	40011000 	.word	0x40011000

080023a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_UART_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12c      	bne.n	8002420 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_UART_MspInit+0x88>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_UART_MspInit+0x88>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_MspInit+0x88>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_UART_MspInit+0x88>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_UART_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002410:	2307      	movs	r3, #7
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_UART_MspInit+0x8c>)
 800241c:	f003 f80c 	bl	8005438 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40011000 	.word	0x40011000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800243a:	e003      	b.n	8002444 <LoopCopyDataInit>

0800243c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800243e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002442:	3104      	adds	r1, #4

08002444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800244a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800244c:	d3f6      	bcc.n	800243c <CopyDataInit>
  ldr  r2, =_sbss
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002450:	e002      	b.n	8002458 <LoopFillZerobss>

08002452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002454:	f842 3b04 	str.w	r3, [r2], #4

08002458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800245a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800245c:	d3f9      	bcc.n	8002452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800245e:	f7ff fcfb 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f00a fa5d 	bl	800c920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7ff f88b 	bl	8001580 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800246c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002470:	080105c4 	.word	0x080105c4
  ldr  r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002478:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 800247c:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8002480:	20000a58 	.word	0x20000a58

08002484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC_IRQHandler>

08002486 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800248a:	f000 fe4b 	bl	8003124 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800248e:	20ca      	movs	r0, #202	; 0xca
 8002490:	f000 f95d 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002494:	20c3      	movs	r0, #195	; 0xc3
 8002496:	f000 f967 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800249a:	2008      	movs	r0, #8
 800249c:	f000 f964 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80024a0:	2050      	movs	r0, #80	; 0x50
 80024a2:	f000 f961 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80024a6:	20cf      	movs	r0, #207	; 0xcf
 80024a8:	f000 f951 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f000 f95b 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80024b2:	20c1      	movs	r0, #193	; 0xc1
 80024b4:	f000 f958 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80024b8:	2030      	movs	r0, #48	; 0x30
 80024ba:	f000 f955 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80024be:	20ed      	movs	r0, #237	; 0xed
 80024c0:	f000 f945 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80024c4:	2064      	movs	r0, #100	; 0x64
 80024c6:	f000 f94f 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f000 f94c 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80024d0:	2012      	movs	r0, #18
 80024d2:	f000 f949 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80024d6:	2081      	movs	r0, #129	; 0x81
 80024d8:	f000 f946 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80024dc:	20e8      	movs	r0, #232	; 0xe8
 80024de:	f000 f936 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80024e2:	2085      	movs	r0, #133	; 0x85
 80024e4:	f000 f940 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f000 f93d 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80024ee:	2078      	movs	r0, #120	; 0x78
 80024f0:	f000 f93a 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80024f4:	20cb      	movs	r0, #203	; 0xcb
 80024f6:	f000 f92a 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80024fa:	2039      	movs	r0, #57	; 0x39
 80024fc:	f000 f934 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002500:	202c      	movs	r0, #44	; 0x2c
 8002502:	f000 f931 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002506:	2000      	movs	r0, #0
 8002508:	f000 f92e 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800250c:	2034      	movs	r0, #52	; 0x34
 800250e:	f000 f92b 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002512:	2002      	movs	r0, #2
 8002514:	f000 f928 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002518:	20f7      	movs	r0, #247	; 0xf7
 800251a:	f000 f918 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800251e:	2020      	movs	r0, #32
 8002520:	f000 f922 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002524:	20ea      	movs	r0, #234	; 0xea
 8002526:	f000 f912 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f000 f91c 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002530:	2000      	movs	r0, #0
 8002532:	f000 f919 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002536:	20b1      	movs	r0, #177	; 0xb1
 8002538:	f000 f909 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800253c:	2000      	movs	r0, #0
 800253e:	f000 f913 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002542:	201b      	movs	r0, #27
 8002544:	f000 f910 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002548:	20b6      	movs	r0, #182	; 0xb6
 800254a:	f000 f900 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800254e:	200a      	movs	r0, #10
 8002550:	f000 f90a 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002554:	20a2      	movs	r0, #162	; 0xa2
 8002556:	f000 f907 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800255a:	20c0      	movs	r0, #192	; 0xc0
 800255c:	f000 f8f7 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002560:	2010      	movs	r0, #16
 8002562:	f000 f901 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002566:	20c1      	movs	r0, #193	; 0xc1
 8002568:	f000 f8f1 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800256c:	2010      	movs	r0, #16
 800256e:	f000 f8fb 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002572:	20c5      	movs	r0, #197	; 0xc5
 8002574:	f000 f8eb 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002578:	2045      	movs	r0, #69	; 0x45
 800257a:	f000 f8f5 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800257e:	2015      	movs	r0, #21
 8002580:	f000 f8f2 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002584:	20c7      	movs	r0, #199	; 0xc7
 8002586:	f000 f8e2 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800258a:	2090      	movs	r0, #144	; 0x90
 800258c:	f000 f8ec 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002590:	2036      	movs	r0, #54	; 0x36
 8002592:	f000 f8dc 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002596:	20c8      	movs	r0, #200	; 0xc8
 8002598:	f000 f8e6 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800259c:	20f2      	movs	r0, #242	; 0xf2
 800259e:	f000 f8d6 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f000 f8e0 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80025a8:	20b0      	movs	r0, #176	; 0xb0
 80025aa:	f000 f8d0 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80025ae:	20c2      	movs	r0, #194	; 0xc2
 80025b0:	f000 f8da 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80025b4:	20b6      	movs	r0, #182	; 0xb6
 80025b6:	f000 f8ca 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80025ba:	200a      	movs	r0, #10
 80025bc:	f000 f8d4 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80025c0:	20a7      	movs	r0, #167	; 0xa7
 80025c2:	f000 f8d1 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80025c6:	2027      	movs	r0, #39	; 0x27
 80025c8:	f000 f8ce 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80025cc:	2004      	movs	r0, #4
 80025ce:	f000 f8cb 	bl	8002768 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80025d2:	202a      	movs	r0, #42	; 0x2a
 80025d4:	f000 f8bb 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025d8:	2000      	movs	r0, #0
 80025da:	f000 f8c5 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 f8c2 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f000 f8bf 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80025ea:	20ef      	movs	r0, #239	; 0xef
 80025ec:	f000 f8bc 	bl	8002768 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80025f0:	202b      	movs	r0, #43	; 0x2b
 80025f2:	f000 f8ac 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f000 f8b6 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f000 f8b3 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002602:	2001      	movs	r0, #1
 8002604:	f000 f8b0 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002608:	203f      	movs	r0, #63	; 0x3f
 800260a:	f000 f8ad 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800260e:	20f6      	movs	r0, #246	; 0xf6
 8002610:	f000 f89d 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002614:	2001      	movs	r0, #1
 8002616:	f000 f8a7 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800261a:	2000      	movs	r0, #0
 800261c:	f000 f8a4 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002620:	2006      	movs	r0, #6
 8002622:	f000 f8a1 	bl	8002768 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002626:	202c      	movs	r0, #44	; 0x2c
 8002628:	f000 f891 	bl	800274e <ili9341_WriteReg>
  LCD_Delay(200);
 800262c:	20c8      	movs	r0, #200	; 0xc8
 800262e:	f000 fe67 	bl	8003300 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002632:	2026      	movs	r0, #38	; 0x26
 8002634:	f000 f88b 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002638:	2001      	movs	r0, #1
 800263a:	f000 f895 	bl	8002768 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800263e:	20e0      	movs	r0, #224	; 0xe0
 8002640:	f000 f885 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002644:	200f      	movs	r0, #15
 8002646:	f000 f88f 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800264a:	2029      	movs	r0, #41	; 0x29
 800264c:	f000 f88c 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002650:	2024      	movs	r0, #36	; 0x24
 8002652:	f000 f889 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002656:	200c      	movs	r0, #12
 8002658:	f000 f886 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800265c:	200e      	movs	r0, #14
 800265e:	f000 f883 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002662:	2009      	movs	r0, #9
 8002664:	f000 f880 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002668:	204e      	movs	r0, #78	; 0x4e
 800266a:	f000 f87d 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800266e:	2078      	movs	r0, #120	; 0x78
 8002670:	f000 f87a 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002674:	203c      	movs	r0, #60	; 0x3c
 8002676:	f000 f877 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800267a:	2009      	movs	r0, #9
 800267c:	f000 f874 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002680:	2013      	movs	r0, #19
 8002682:	f000 f871 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002686:	2005      	movs	r0, #5
 8002688:	f000 f86e 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800268c:	2017      	movs	r0, #23
 800268e:	f000 f86b 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002692:	2011      	movs	r0, #17
 8002694:	f000 f868 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002698:	2000      	movs	r0, #0
 800269a:	f000 f865 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800269e:	20e1      	movs	r0, #225	; 0xe1
 80026a0:	f000 f855 	bl	800274e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f000 f85f 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80026aa:	2016      	movs	r0, #22
 80026ac:	f000 f85c 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80026b0:	201b      	movs	r0, #27
 80026b2:	f000 f859 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80026b6:	2004      	movs	r0, #4
 80026b8:	f000 f856 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80026bc:	2011      	movs	r0, #17
 80026be:	f000 f853 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80026c2:	2007      	movs	r0, #7
 80026c4:	f000 f850 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80026c8:	2031      	movs	r0, #49	; 0x31
 80026ca:	f000 f84d 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80026ce:	2033      	movs	r0, #51	; 0x33
 80026d0:	f000 f84a 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80026d4:	2042      	movs	r0, #66	; 0x42
 80026d6:	f000 f847 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80026da:	2005      	movs	r0, #5
 80026dc:	f000 f844 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80026e0:	200c      	movs	r0, #12
 80026e2:	f000 f841 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80026e6:	200a      	movs	r0, #10
 80026e8:	f000 f83e 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80026ec:	2028      	movs	r0, #40	; 0x28
 80026ee:	f000 f83b 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80026f2:	202f      	movs	r0, #47	; 0x2f
 80026f4:	f000 f838 	bl	8002768 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80026f8:	200f      	movs	r0, #15
 80026fa:	f000 f835 	bl	8002768 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80026fe:	2011      	movs	r0, #17
 8002700:	f000 f825 	bl	800274e <ili9341_WriteReg>
  LCD_Delay(200);
 8002704:	20c8      	movs	r0, #200	; 0xc8
 8002706:	f000 fdfb 	bl	8003300 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800270a:	2029      	movs	r0, #41	; 0x29
 800270c:	f000 f81f 	bl	800274e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002710:	202c      	movs	r0, #44	; 0x2c
 8002712:	f000 f81c 	bl	800274e <ili9341_WriteReg>
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}

0800271a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800271e:	f000 fd01 	bl	8003124 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002722:	2103      	movs	r1, #3
 8002724:	20d3      	movs	r0, #211	; 0xd3
 8002726:	f000 f82c 	bl	8002782 <ili9341_ReadData>
 800272a:	4603      	mov	r3, r0
 800272c:	b29b      	uxth	r3, r3
}
 800272e:	4618      	mov	r0, r3
 8002730:	bd80      	pop	{r7, pc}

08002732 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002736:	2029      	movs	r0, #41	; 0x29
 8002738:	f000 f809 	bl	800274e <ili9341_WriteReg>
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}

08002740 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002744:	2028      	movs	r0, #40	; 0x28
 8002746:	f000 f802 	bl	800274e <ili9341_WriteReg>
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}

0800274e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fd7c 	bl	8003258 <LCD_IO_WriteReg>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fd4d 	bl	8003214 <LCD_IO_WriteData>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	460a      	mov	r2, r1
 800278c:	80fb      	strh	r3, [r7, #6]
 800278e:	4613      	mov	r3, r2
 8002790:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002792:	797a      	ldrb	r2, [r7, #5]
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fd7f 	bl	800329c <LCD_IO_ReadData>
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80027ac:	23f0      	movs	r3, #240	; 0xf0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80027bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fa59 	bl	8002c90 <stmpe811_GetInstance>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2bff      	cmp	r3, #255	; 0xff
 80027e6:	d112      	bne.n	800280e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f000 fa51 	bl	8002c90 <stmpe811_GetInstance>
 80027ee:	4603      	mov	r3, r0
 80027f0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80027f2:	7bbb      	ldrb	r3, [r7, #14]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d80a      	bhi.n	800280e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	b2d1      	uxtb	r1, r2
 80027fe:	4a06      	ldr	r2, [pc, #24]	; (8002818 <stmpe811_Init+0x4c>)
 8002800:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002802:	f000 fd88 	bl	8003316 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f807 	bl	800281c <stmpe811_Reset>
    }
  }
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000148 	.word	0x20000148

0800281c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2202      	movs	r2, #2
 800282c:	2103      	movs	r1, #3
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fd7d 	bl	800332e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002834:	200a      	movs	r0, #10
 8002836:	f000 fdb7 	bl	80033a8 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2200      	movs	r2, #0
 8002840:	2103      	movs	r1, #3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fd73 	bl	800332e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002848:	2002      	movs	r0, #2
 800284a:	f000 fdad 	bl	80033a8 <IOE_Delay>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002856:	b590      	push	{r4, r7, lr}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002860:	f000 fd59 	bl	8003316 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fd72 	bl	8003354 <IOE_Read>
 8002870:	4603      	mov	r3, r0
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd69 	bl	8003354 <IOE_Read>
 8002882:	4603      	mov	r3, r0
 8002884:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002886:	4323      	orrs	r3, r4
 8002888:	b21b      	sxth	r3, r3
 800288a:	b29b      	uxth	r3, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}

08002894 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2109      	movs	r1, #9
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fd53 	bl	8003354 <IOE_Read>
 80028ae:	4603      	mov	r3, r0
 80028b0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	2109      	movs	r1, #9
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fd33 	bl	800332e <IOE_Write>
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2109      	movs	r1, #9
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fd35 	bl	8003354 <IOE_Read>
 80028ea:	4603      	mov	r3, r0
 80028ec:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	2109      	movs	r1, #9
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fd15 	bl	800332e <IOE_Write>
    
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	460a      	mov	r2, r1
 8002916:	80fb      	strh	r3, [r7, #6]
 8002918:	4613      	mov	r3, r2
 800291a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	210a      	movs	r1, #10
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fd14 	bl	8003354 <IOE_Read>
 800292c:	4603      	mov	r3, r0
 800292e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	797b      	ldrb	r3, [r7, #5]
 8002934:	4313      	orrs	r3, r2
 8002936:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	210a      	movs	r1, #10
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fcf4 	bl	800332e <IOE_Write>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	460a      	mov	r2, r1
 8002958:	80fb      	strh	r3, [r7, #6]
 800295a:	4613      	mov	r3, r2
 800295c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	210a      	movs	r1, #10
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fcf3 	bl	8003354 <IOE_Read>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002972:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002976:	43db      	mvns	r3, r3
 8002978:	b25a      	sxtb	r2, r3
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4013      	ands	r3, r2
 8002980:	b25b      	sxtb	r3, r3
 8002982:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	210a      	movs	r1, #10
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fcce 	bl	800332e <IOE_Write>
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	460a      	mov	r2, r1
 80029a4:	80fb      	strh	r3, [r7, #6]
 80029a6:	4613      	mov	r3, r2
 80029a8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	210b      	movs	r1, #11
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fccf 	bl	8003354 <IOE_Read>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	797b      	ldrb	r3, [r7, #5]
 80029bc:	4013      	ands	r3, r2
 80029be:	b2db      	uxtb	r3, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	460a      	mov	r2, r1
 80029d2:	80fb      	strh	r3, [r7, #6]
 80029d4:	4613      	mov	r3, r2
 80029d6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	797a      	ldrb	r2, [r7, #5]
 80029de:	210b      	movs	r1, #11
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fca4 	bl	800332e <IOE_Write>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	6039      	str	r1, [r7, #0]
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2117      	movs	r1, #23
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fca5 	bl	8003354 <IOE_Read>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	b25a      	sxtb	r2, r3
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	2117      	movs	r1, #23
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fc80 	bl	800332e <IOE_Write>
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2104      	movs	r1, #4
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fc84 	bl	8003354 <IOE_Read>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	2104      	movs	r1, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fc64 	bl	800332e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	21f0      	movs	r1, #240	; 0xf0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ffbf 	bl	80029ee <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	2104      	movs	r1, #4
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fc54 	bl	800332e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2249      	movs	r2, #73	; 0x49
 8002a8c:	2120      	movs	r1, #32
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fc4d 	bl	800332e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002a94:	2002      	movs	r0, #2
 8002a96:	f000 fc87 	bl	80033a8 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2121      	movs	r1, #33	; 0x21
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fc43 	bl	800332e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	229a      	movs	r2, #154	; 0x9a
 8002aae:	2141      	movs	r1, #65	; 0x41
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fc3c 	bl	800332e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2201      	movs	r2, #1
 8002abc:	214a      	movs	r1, #74	; 0x4a
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fc35 	bl	800332e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2201      	movs	r2, #1
 8002aca:	214b      	movs	r1, #75	; 0x4b
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fc2e 	bl	800332e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	214b      	movs	r1, #75	; 0x4b
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fc27 	bl	800332e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2156      	movs	r1, #86	; 0x56
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fc20 	bl	800332e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2201      	movs	r2, #1
 8002af4:	2158      	movs	r1, #88	; 0x58
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fc19 	bl	800332e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2201      	movs	r2, #1
 8002b02:	2140      	movs	r1, #64	; 0x40
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fc12 	bl	800332e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	210b      	movs	r1, #11
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fc0b 	bl	800332e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f000 fc45 	bl	80033a8 <IOE_Delay>
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fc0a 	bl	8003354 <IOE_Read>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b80      	cmp	r3, #128	; 0x80
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002b52:	7bbb      	ldrb	r3, [r7, #14]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	214c      	movs	r1, #76	; 0x4c
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fbf8 	bl	8003354 <IOE_Read>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d010      	beq.n	8002b8c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e00d      	b.n	8002b8c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2201      	movs	r2, #1
 8002b76:	214b      	movs	r1, #75	; 0x4b
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fbd8 	bl	800332e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2200      	movs	r2, #0
 8002b84:	214b      	movs	r1, #75	; 0x4b
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fbd1 	bl	800332e <IOE_Write>
  }
  
  return ret;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002ba4:	89fb      	ldrh	r3, [r7, #14]
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	f107 0210 	add.w	r2, r7, #16
 8002bac:	2304      	movs	r3, #4
 8002bae:	21d7      	movs	r1, #215	; 0xd7
 8002bb0:	f000 fbe3 	bl	800337a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002bb4:	7c3b      	ldrb	r3, [r7, #16]
 8002bb6:	061a      	lsls	r2, r3, #24
 8002bb8:	7c7b      	ldrb	r3, [r7, #17]
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	7cbb      	ldrb	r3, [r7, #18]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	7cfa      	ldrb	r2, [r7, #19]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	0d1b      	lsrs	r3, r3, #20
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	214b      	movs	r1, #75	; 0x4b
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fb9e 	bl	800332e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002bf2:	89fb      	ldrh	r3, [r7, #14]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	214b      	movs	r1, #75	; 0x4b
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fb97 	bl	800332e <IOE_Write>
}
 8002c00:	bf00      	nop
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002c12:	f000 fb86 	bl	8003322 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	211f      	movs	r1, #31
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fe76 	bl	800290c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe36 	bl	8002894 <stmpe811_EnableGlobalIT>
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fe47 	bl	80028d0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	211f      	movs	r1, #31
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fe81 	bl	800294e <stmpe811_DisableITSource>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	211f      	movs	r1, #31
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fe99 	bl	800299a <stmpe811_ReadGITStatus>
 8002c68:	4603      	mov	r3, r0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	211f      	movs	r1, #31
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fea1 	bl	80029c8 <stmpe811_ClearGlobalIT>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e00b      	b.n	8002cbc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <stmpe811_GetInstance+0x40>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d101      	bne.n	8002cb6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	e006      	b.n	8002cc4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d9f0      	bls.n	8002ca4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002cc2:	23ff      	movs	r3, #255	; 0xff
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	20000148 	.word	0x20000148

08002cd4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <I2Cx_MspInit+0xdc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d15f      	bne.n	8002da6 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a31      	ldr	r2, [pc, #196]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002d24:	2312      	movs	r3, #18
 8002d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002d30:	2304      	movs	r3, #4
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	481f      	ldr	r0, [pc, #124]	; (8002db8 <I2Cx_MspInit+0xe4>)
 8002d3c:	f002 fb7c 	bl	8005438 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d44:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	481b      	ldr	r0, [pc, #108]	; (8002dbc <I2Cx_MspInit+0xe8>)
 8002d4e:	f002 fb73 	bl	8005438 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d78:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <I2Cx_MspInit+0xe0>)
 8002d80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d84:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	210f      	movs	r1, #15
 8002d8a:	2048      	movs	r0, #72	; 0x48
 8002d8c:	f001 fdb6 	bl	80048fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002d90:	2048      	movs	r0, #72	; 0x48
 8002d92:	f001 fdcf 	bl	8004934 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002d96:	2200      	movs	r2, #0
 8002d98:	210f      	movs	r1, #15
 8002d9a:	2049      	movs	r0, #73	; 0x49
 8002d9c:	f001 fdae 	bl	80048fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002da0:	2049      	movs	r0, #73	; 0x49
 8002da2:	f001 fdc7 	bl	8004934 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002da6:	bf00      	nop
 8002da8:	3728      	adds	r7, #40	; 0x28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40005c00 	.word	0x40005c00
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	40020800 	.word	0x40020800

08002dc0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002dc4:	4814      	ldr	r0, [pc, #80]	; (8002e18 <I2Cx_Init+0x58>)
 8002dc6:	f004 fc77 	bl	80076b8 <HAL_I2C_GetState>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d121      	bne.n	8002e14 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <I2Cx_Init+0x58>)
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <I2Cx_Init+0x5c>)
 8002dd4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <I2Cx_Init+0x58>)
 8002dd8:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <I2Cx_Init+0x60>)
 8002dda:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <I2Cx_Init+0x58>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <I2Cx_Init+0x58>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <I2Cx_Init+0x58>)
 8002dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dee:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <I2Cx_Init+0x58>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <I2Cx_Init+0x58>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <I2Cx_Init+0x58>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <I2Cx_Init+0x58>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002e08:	4803      	ldr	r0, [pc, #12]	; (8002e18 <I2Cx_Init+0x58>)
 8002e0a:	f7ff ff63 	bl	8002cd4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <I2Cx_Init+0x58>)
 8002e10:	f003 ffca 	bl	8006da8 <HAL_I2C_Init>
  }
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000068c 	.word	0x2000068c
 8002e1c:	40005c00 	.word	0x40005c00
 8002e20:	000186a0 	.word	0x000186a0

08002e24 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <I2Cx_ITConfig+0x58>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <I2Cx_ITConfig+0x58>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <I2Cx_ITConfig+0x58>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <I2Cx_ITConfig+0x5c>)
 8002e56:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4809      	ldr	r0, [pc, #36]	; (8002e84 <I2Cx_ITConfig+0x60>)
 8002e5e:	f002 faeb 	bl	8005438 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002e62:	2200      	movs	r2, #0
 8002e64:	210f      	movs	r1, #15
 8002e66:	2028      	movs	r0, #40	; 0x28
 8002e68:	f001 fd48 	bl	80048fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002e6c:	2028      	movs	r0, #40	; 0x28
 8002e6e:	f001 fd61 	bl	8004934 <HAL_NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	10210000 	.word	0x10210000
 8002e84:	40020000 	.word	0x40020000

08002e88 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af04      	add	r7, sp, #16
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
 8002e92:	460b      	mov	r3, r1
 8002e94:	71bb      	strb	r3, [r7, #6]
 8002e96:	4613      	mov	r3, r2
 8002e98:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	b299      	uxth	r1, r3
 8002ea2:	79bb      	ldrb	r3, [r7, #6]
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <I2Cx_WriteData+0x4c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	9302      	str	r3, [sp, #8]
 8002eac:	2301      	movs	r3, #1
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	1d7b      	adds	r3, r7, #5
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4808      	ldr	r0, [pc, #32]	; (8002ed8 <I2Cx_WriteData+0x50>)
 8002eb8:	f004 f8de 	bl	8007078 <HAL_I2C_Mem_Write>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002ec6:	f000 f863 	bl	8002f90 <I2Cx_Error>
  }        
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000064 	.word	0x20000064
 8002ed8:	2000068c 	.word	0x2000068c

08002edc <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af04      	add	r7, sp, #16
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	b299      	uxth	r1, r3
 8002ef8:	79bb      	ldrb	r3, [r7, #6]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <I2Cx_ReadData+0x50>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	9302      	str	r3, [sp, #8]
 8002f02:	2301      	movs	r3, #1
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	f107 030e 	add.w	r3, r7, #14
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4808      	ldr	r0, [pc, #32]	; (8002f30 <I2Cx_ReadData+0x54>)
 8002f10:	f004 f9ac 	bl	800726c <HAL_I2C_Mem_Read>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f1e:	f000 f837 	bl	8002f90 <I2Cx_Error>
  
  }
  return value;
 8002f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000064 	.word	0x20000064
 8002f30:	2000068c 	.word	0x2000068c

08002f34 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	603a      	str	r2, [r7, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
 8002f42:	460b      	mov	r3, r1
 8002f44:	71bb      	strb	r3, [r7, #6]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	b299      	uxth	r1, r3
 8002f52:	79bb      	ldrb	r3, [r7, #6]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <I2Cx_ReadBuffer+0x54>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	88bb      	ldrh	r3, [r7, #4]
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2301      	movs	r3, #1
 8002f66:	4809      	ldr	r0, [pc, #36]	; (8002f8c <I2Cx_ReadBuffer+0x58>)
 8002f68:	f004 f980 	bl	800726c <HAL_I2C_Mem_Read>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e002      	b.n	8002f80 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f7a:	f000 f809 	bl	8002f90 <I2Cx_Error>

    return 1;
 8002f7e:	2301      	movs	r3, #1
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000064 	.word	0x20000064
 8002f8c:	2000068c 	.word	0x2000068c

08002f90 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002f94:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <I2Cx_Error+0x14>)
 8002f96:	f004 f83f 	bl	8007018 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002f9a:	f7ff ff11 	bl	8002dc0 <I2Cx_Init>
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000068c 	.word	0x2000068c

08002fa8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002fac:	4819      	ldr	r0, [pc, #100]	; (8003014 <SPIx_Init+0x6c>)
 8002fae:	f006 fe35 	bl	8009c1c <HAL_SPI_GetState>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d12b      	bne.n	8003010 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <SPIx_Init+0x6c>)
 8002fba:	4a17      	ldr	r2, [pc, #92]	; (8003018 <SPIx_Init+0x70>)
 8002fbc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <SPIx_Init+0x6c>)
 8002fc0:	2218      	movs	r2, #24
 8002fc2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <SPIx_Init+0x6c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <SPIx_Init+0x6c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <SPIx_Init+0x6c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <SPIx_Init+0x6c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <SPIx_Init+0x6c>)
 8002fde:	2207      	movs	r2, #7
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <SPIx_Init+0x6c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <SPIx_Init+0x6c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <SPIx_Init+0x6c>)
 8002ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <SPIx_Init+0x6c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <SPIx_Init+0x6c>)
 8002ffe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003002:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003004:	4803      	ldr	r0, [pc, #12]	; (8003014 <SPIx_Init+0x6c>)
 8003006:	f000 f853 	bl	80030b0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800300a:	4802      	ldr	r0, [pc, #8]	; (8003014 <SPIx_Init+0x6c>)
 800300c:	f006 f99b 	bl	8009346 <HAL_SPI_Init>
  } 
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000014c 	.word	0x2000014c
 8003018:	40015000 	.word	0x40015000

0800301c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	b29a      	uxth	r2, r3
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <SPIx_Read+0x38>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f107 0108 	add.w	r1, r7, #8
 8003036:	4808      	ldr	r0, [pc, #32]	; (8003058 <SPIx_Read+0x3c>)
 8003038:	f006 fb45 	bl	80096c6 <HAL_SPI_Receive>
 800303c:	4603      	mov	r3, r0
 800303e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003046:	f000 f827 	bl	8003098 <SPIx_Error>
  }
  
  return readvalue;
 800304a:	68bb      	ldr	r3, [r7, #8]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000068 	.word	0x20000068
 8003058:	2000014c 	.word	0x2000014c

0800305c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <SPIx_Write+0x34>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	1db9      	adds	r1, r7, #6
 8003070:	2201      	movs	r2, #1
 8003072:	4808      	ldr	r0, [pc, #32]	; (8003094 <SPIx_Write+0x38>)
 8003074:	f006 f9f3 	bl	800945e <HAL_SPI_Transmit>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003082:	f000 f809 	bl	8003098 <SPIx_Error>
  }
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000068 	.word	0x20000068
 8003094:	2000014c 	.word	0x2000014c

08003098 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800309c:	4803      	ldr	r0, [pc, #12]	; (80030ac <SPIx_Error+0x14>)
 800309e:	f006 f9b6 	bl	800940e <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80030a2:	f7ff ff81 	bl	8002fa8 <SPIx_Init>
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000014c 	.word	0x2000014c

080030b0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	4b17      	ldr	r3, [pc, #92]	; (800311c <SPIx_MspInit+0x6c>)
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	4a16      	ldr	r2, [pc, #88]	; (800311c <SPIx_MspInit+0x6c>)
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c6:	6453      	str	r3, [r2, #68]	; 0x44
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <SPIx_MspInit+0x6c>)
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <SPIx_MspInit+0x6c>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	4a0f      	ldr	r2, [pc, #60]	; (800311c <SPIx_MspInit+0x6c>)
 80030de:	f043 0320 	orr.w	r3, r3, #32
 80030e2:	6313      	str	r3, [r2, #48]	; 0x30
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <SPIx_MspInit+0x6c>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80030f0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80030fa:	2302      	movs	r3, #2
 80030fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80030fe:	2301      	movs	r3, #1
 8003100:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003102:	2305      	movs	r3, #5
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	4619      	mov	r1, r3
 800310c:	4804      	ldr	r0, [pc, #16]	; (8003120 <SPIx_MspInit+0x70>)
 800310e:	f002 f993 	bl	8005438 <HAL_GPIO_Init>
}
 8003112:	bf00      	nop
 8003114:	3728      	adds	r7, #40	; 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40021400 	.word	0x40021400

08003124 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <LCD_IO_Init+0xe0>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d164      	bne.n	80031fc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <LCD_IO_Init+0xe0>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <LCD_IO_Init+0xe4>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	4a31      	ldr	r2, [pc, #196]	; (8003208 <LCD_IO_Init+0xe4>)
 8003142:	f043 0308 	orr.w	r3, r3, #8
 8003146:	6313      	str	r3, [r2, #48]	; 0x30
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <LCD_IO_Init+0xe4>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003158:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800315a:	2301      	movs	r3, #1
 800315c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003162:	2302      	movs	r3, #2
 8003164:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	4619      	mov	r1, r3
 800316c:	4827      	ldr	r0, [pc, #156]	; (800320c <LCD_IO_Init+0xe8>)
 800316e:	f002 f963 	bl	8005438 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <LCD_IO_Init+0xe4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a23      	ldr	r2, [pc, #140]	; (8003208 <LCD_IO_Init+0xe4>)
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <LCD_IO_Init+0xe4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800318e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003192:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003194:	2301      	movs	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800319c:	2302      	movs	r3, #2
 800319e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	4619      	mov	r1, r3
 80031a6:	4819      	ldr	r0, [pc, #100]	; (800320c <LCD_IO_Init+0xe8>)
 80031a8:	f002 f946 	bl	8005438 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <LCD_IO_Init+0xe4>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <LCD_IO_Init+0xe4>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	6313      	str	r3, [r2, #48]	; 0x30
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <LCD_IO_Init+0xe4>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80031c8:	2304      	movs	r3, #4
 80031ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80031d4:	2302      	movs	r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	4619      	mov	r1, r3
 80031de:	480c      	ldr	r0, [pc, #48]	; (8003210 <LCD_IO_Init+0xec>)
 80031e0:	f002 f92a 	bl	8005438 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80031e4:	2200      	movs	r2, #0
 80031e6:	2104      	movs	r1, #4
 80031e8:	4809      	ldr	r0, [pc, #36]	; (8003210 <LCD_IO_Init+0xec>)
 80031ea:	f002 fbd9 	bl	80059a0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80031ee:	2201      	movs	r2, #1
 80031f0:	2104      	movs	r1, #4
 80031f2:	4807      	ldr	r0, [pc, #28]	; (8003210 <LCD_IO_Init+0xec>)
 80031f4:	f002 fbd4 	bl	80059a0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80031f8:	f7ff fed6 	bl	8002fa8 <SPIx_Init>
  }
}
 80031fc:	bf00      	nop
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	200001a4 	.word	0x200001a4
 8003208:	40023800 	.word	0x40023800
 800320c:	40020c00 	.word	0x40020c00
 8003210:	40020800 	.word	0x40020800

08003214 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800321e:	2201      	movs	r2, #1
 8003220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003224:	480a      	ldr	r0, [pc, #40]	; (8003250 <LCD_IO_WriteData+0x3c>)
 8003226:	f002 fbbb 	bl	80059a0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800322a:	2200      	movs	r2, #0
 800322c:	2104      	movs	r1, #4
 800322e:	4809      	ldr	r0, [pc, #36]	; (8003254 <LCD_IO_WriteData+0x40>)
 8003230:	f002 fbb6 	bl	80059a0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff10 	bl	800305c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800323c:	2201      	movs	r2, #1
 800323e:	2104      	movs	r1, #4
 8003240:	4804      	ldr	r0, [pc, #16]	; (8003254 <LCD_IO_WriteData+0x40>)
 8003242:	f002 fbad 	bl	80059a0 <HAL_GPIO_WritePin>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40020800 	.word	0x40020800

08003258 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003262:	2200      	movs	r2, #0
 8003264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003268:	480a      	ldr	r0, [pc, #40]	; (8003294 <LCD_IO_WriteReg+0x3c>)
 800326a:	f002 fb99 	bl	80059a0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800326e:	2200      	movs	r2, #0
 8003270:	2104      	movs	r1, #4
 8003272:	4809      	ldr	r0, [pc, #36]	; (8003298 <LCD_IO_WriteReg+0x40>)
 8003274:	f002 fb94 	bl	80059a0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	b29b      	uxth	r3, r3
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff feed 	bl	800305c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003282:	2201      	movs	r2, #1
 8003284:	2104      	movs	r1, #4
 8003286:	4804      	ldr	r0, [pc, #16]	; (8003298 <LCD_IO_WriteReg+0x40>)
 8003288:	f002 fb8a 	bl	80059a0 <HAL_GPIO_WritePin>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40020c00 	.word	0x40020c00
 8003298:	40020800 	.word	0x40020800

0800329c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	460a      	mov	r2, r1
 80032a6:	80fb      	strh	r3, [r7, #6]
 80032a8:	4613      	mov	r3, r2
 80032aa:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80032b0:	2200      	movs	r2, #0
 80032b2:	2104      	movs	r1, #4
 80032b4:	4810      	ldr	r0, [pc, #64]	; (80032f8 <LCD_IO_ReadData+0x5c>)
 80032b6:	f002 fb73 	bl	80059a0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80032ba:	2200      	movs	r2, #0
 80032bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032c0:	480e      	ldr	r0, [pc, #56]	; (80032fc <LCD_IO_ReadData+0x60>)
 80032c2:	f002 fb6d 	bl	80059a0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fec7 	bl	800305c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80032ce:	797b      	ldrb	r3, [r7, #5]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fea3 	bl	800301c <SPIx_Read>
 80032d6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80032d8:	2201      	movs	r2, #1
 80032da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032de:	4807      	ldr	r0, [pc, #28]	; (80032fc <LCD_IO_ReadData+0x60>)
 80032e0:	f002 fb5e 	bl	80059a0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80032e4:	2201      	movs	r2, #1
 80032e6:	2104      	movs	r1, #4
 80032e8:	4803      	ldr	r0, [pc, #12]	; (80032f8 <LCD_IO_ReadData+0x5c>)
 80032ea:	f002 fb59 	bl	80059a0 <HAL_GPIO_WritePin>
  
  return readvalue;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020c00 	.word	0x40020c00

08003300 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f001 fa1d 	bl	8004748 <HAL_Delay>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003316:	b580      	push	{r7, lr}
 8003318:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800331a:	f7ff fd51 	bl	8002dc0 <I2Cx_Init>
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}

08003322 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003326:	f7ff fd7d 	bl	8002e24 <I2Cx_ITConfig>
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}

0800332e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	71fb      	strb	r3, [r7, #7]
 8003338:	460b      	mov	r3, r1
 800333a:	71bb      	strb	r3, [r7, #6]
 800333c:	4613      	mov	r3, r2
 800333e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003340:	797a      	ldrb	r2, [r7, #5]
 8003342:	79b9      	ldrb	r1, [r7, #6]
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fd9e 	bl	8002e88 <I2Cx_WriteData>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	460a      	mov	r2, r1
 800335e:	71fb      	strb	r3, [r7, #7]
 8003360:	4613      	mov	r3, r2
 8003362:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003364:	79ba      	ldrb	r2, [r7, #6]
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fdb6 	bl	8002edc <I2Cx_ReadData>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	603a      	str	r2, [r7, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	4603      	mov	r3, r0
 8003386:	71fb      	strb	r3, [r7, #7]
 8003388:	460b      	mov	r3, r1
 800338a:	71bb      	strb	r3, [r7, #6]
 800338c:	4613      	mov	r3, r2
 800338e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003390:	88bb      	ldrh	r3, [r7, #4]
 8003392:	79b9      	ldrb	r1, [r7, #6]
 8003394:	79f8      	ldrb	r0, [r7, #7]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	f7ff fdcc 	bl	8002f34 <I2Cx_ReadBuffer>
 800339c:	4603      	mov	r3, r0
 800339e:	b29b      	uxth	r3, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 f9c9 	bl	8004748 <HAL_Delay>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <BSP_LCD_Init+0xbc>)
 80033c6:	4a2e      	ldr	r2, [pc, #184]	; (8003480 <BSP_LCD_Init+0xc0>)
 80033c8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80033ca:	4b2c      	ldr	r3, [pc, #176]	; (800347c <BSP_LCD_Init+0xbc>)
 80033cc:	2209      	movs	r2, #9
 80033ce:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <BSP_LCD_Init+0xbc>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80033d6:	4b29      	ldr	r3, [pc, #164]	; (800347c <BSP_LCD_Init+0xbc>)
 80033d8:	221d      	movs	r2, #29
 80033da:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <BSP_LCD_Init+0xbc>)
 80033de:	2203      	movs	r2, #3
 80033e0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <BSP_LCD_Init+0xbc>)
 80033e4:	f240 120d 	movw	r2, #269	; 0x10d
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <BSP_LCD_Init+0xbc>)
 80033ec:	f240 1243 	movw	r2, #323	; 0x143
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <BSP_LCD_Init+0xbc>)
 80033f4:	f240 1217 	movw	r2, #279	; 0x117
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <BSP_LCD_Init+0xbc>)
 80033fc:	f240 1247 	movw	r2, #327	; 0x147
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003402:	4b1e      	ldr	r3, [pc, #120]	; (800347c <BSP_LCD_Init+0xbc>)
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800340a:	4b1c      	ldr	r3, [pc, #112]	; (800347c <BSP_LCD_Init+0xbc>)
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <BSP_LCD_Init+0xbc>)
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <BSP_LCD_Init+0xc4>)
 800341c:	2208      	movs	r2, #8
 800341e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <BSP_LCD_Init+0xc4>)
 8003422:	22c0      	movs	r2, #192	; 0xc0
 8003424:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <BSP_LCD_Init+0xc4>)
 8003428:	2204      	movs	r2, #4
 800342a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <BSP_LCD_Init+0xc4>)
 800342e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003434:	4813      	ldr	r0, [pc, #76]	; (8003484 <BSP_LCD_Init+0xc4>)
 8003436:	f005 fd49 	bl	8008ecc <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <BSP_LCD_Init+0xbc>)
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <BSP_LCD_Init+0xbc>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <BSP_LCD_Init+0xbc>)
 8003448:	2200      	movs	r2, #0
 800344a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <BSP_LCD_Init+0xbc>)
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003452:	f000 fc93 	bl	8003d7c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003456:	4809      	ldr	r0, [pc, #36]	; (800347c <BSP_LCD_Init+0xbc>)
 8003458:	f004 fd12 	bl	8007e80 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <BSP_LCD_Init+0xc8>)
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <BSP_LCD_Init+0xcc>)
 8003460:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <BSP_LCD_Init+0xc8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800346a:	f000 fe75 	bl	8004158 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800346e:	4808      	ldr	r0, [pc, #32]	; (8003490 <BSP_LCD_Init+0xd0>)
 8003470:	f000 f90c 	bl	800368c <BSP_LCD_SetFont>

  return LCD_OK;
 8003474:	2300      	movs	r3, #0
}  
 8003476:	4618      	mov	r0, r3
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200006e0 	.word	0x200006e0
 8003480:	40016800 	.word	0x40016800
 8003484:	200001e8 	.word	0x200001e8
 8003488:	20000788 	.word	0x20000788
 800348c:	20000004 	.word	0x20000004
 8003490:	2000006c 	.word	0x2000006c

08003494 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <BSP_LCD_GetXSize+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	4798      	blx	r3
 80034a0:	4603      	mov	r3, r0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000788 	.word	0x20000788

080034ac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <BSP_LCD_GetYSize+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	4798      	blx	r3
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000788 	.word	0x20000788

080034c4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b090      	sub	sp, #64	; 0x40
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80034d4:	f7ff ffde 	bl	8003494 <BSP_LCD_GetXSize>
 80034d8:	4603      	mov	r3, r0
 80034da:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80034e0:	f7ff ffe4 	bl	80034ac <BSP_LCD_GetYSize>
 80034e4:	4603      	mov	r3, r0
 80034e6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80034f0:	23ff      	movs	r3, #255	; 0xff
 80034f2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800350a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003510:	2307      	movs	r3, #7
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003514:	f7ff ffbe 	bl	8003494 <BSP_LCD_GetXSize>
 8003518:	4603      	mov	r3, r0
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800351c:	f7ff ffc6 	bl	80034ac <BSP_LCD_GetYSize>
 8003520:	4603      	mov	r3, r0
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	4619      	mov	r1, r3
 800352c:	4814      	ldr	r0, [pc, #80]	; (8003580 <BSP_LCD_LayerDefaultInit+0xbc>)
 800352e:	f004 fe39 	bl	80081a4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	4913      	ldr	r1, [pc, #76]	; (8003584 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3304      	adds	r3, #4
 8003542:	f04f 32ff 	mov.w	r2, #4294967295
 8003546:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	490e      	ldr	r1, [pc, #56]	; (8003584 <BSP_LCD_LayerDefaultInit+0xc0>)
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3308      	adds	r3, #8
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <BSP_LCD_LayerDefaultInit+0xc4>)
 800355a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	4909      	ldr	r1, [pc, #36]	; (8003584 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800356e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003570:	4803      	ldr	r0, [pc, #12]	; (8003580 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003572:	f004 fe55 	bl	8008220 <HAL_LTDC_EnableDither>
}
 8003576:	bf00      	nop
 8003578:	3740      	adds	r7, #64	; 0x40
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200006e0 	.word	0x200006e0
 8003584:	2000021c 	.word	0x2000021c
 8003588:	2000006c 	.word	0x2000006c

0800358c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <BSP_LCD_SelectLayer+0x1c>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000218 	.word	0x20000218

080035ac <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d112      	bne.n	80035e4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <BSP_LCD_SetLayerVisible+0x78>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	01db      	lsls	r3, r3, #7
 80035c8:	4413      	add	r3, r2
 80035ca:	3384      	adds	r3, #132	; 0x84
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <BSP_LCD_SetLayerVisible+0x78>)
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	4611      	mov	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	01d2      	lsls	r2, r2, #7
 80035d8:	440a      	add	r2, r1
 80035da:	3284      	adds	r2, #132	; 0x84
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e011      	b.n	8003608 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <BSP_LCD_SetLayerVisible+0x78>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	01db      	lsls	r3, r3, #7
 80035ee:	4413      	add	r3, r2
 80035f0:	3384      	adds	r3, #132	; 0x84
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <BSP_LCD_SetLayerVisible+0x78>)
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	4611      	mov	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	01d2      	lsls	r2, r2, #7
 80035fe:	440a      	add	r2, r1
 8003600:	3284      	adds	r2, #132	; 0x84
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <BSP_LCD_SetLayerVisible+0x78>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <BSP_LCD_SetLayerVisible+0x78>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	200006e0 	.word	0x200006e0

08003628 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <BSP_LCD_SetTextColor+0x28>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4907      	ldr	r1, [pc, #28]	; (8003654 <BSP_LCD_SetTextColor+0x2c>)
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	601a      	str	r2, [r3, #0]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20000218 	.word	0x20000218
 8003654:	2000021c 	.word	0x2000021c

08003658 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <BSP_LCD_SetBackColor+0x2c>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4908      	ldr	r1, [pc, #32]	; (8003688 <BSP_LCD_SetBackColor+0x30>)
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	3304      	adds	r3, #4
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	601a      	str	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000218 	.word	0x20000218
 8003688:	2000021c 	.word	0x2000021c

0800368c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <BSP_LCD_SetFont+0x2c>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4908      	ldr	r1, [pc, #32]	; (80036bc <BSP_LCD_SetFont+0x30>)
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3308      	adds	r3, #8
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000218 	.word	0x20000218
 80036bc:	2000021c 	.word	0x2000021c

080036c0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <BSP_LCD_Clear+0x48>)
 80036ca:	681c      	ldr	r4, [r3, #0]
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <BSP_LCD_Clear+0x48>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0e      	ldr	r2, [pc, #56]	; (800370c <BSP_LCD_Clear+0x4c>)
 80036d2:	2134      	movs	r1, #52	; 0x34
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461d      	mov	r5, r3
 80036e0:	f7ff fed8 	bl	8003494 <BSP_LCD_GetXSize>
 80036e4:	4606      	mov	r6, r0
 80036e6:	f7ff fee1 	bl	80034ac <BSP_LCD_GetYSize>
 80036ea:	4602      	mov	r2, r0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	4632      	mov	r2, r6
 80036f8:	4629      	mov	r1, r5
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 fcf4 	bl	80040e8 <FillBuffer>
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	20000218 	.word	0x20000218
 800370c:	200006e0 	.word	0x200006e0

08003710 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	80fb      	strh	r3, [r7, #6]
 800371a:	460b      	mov	r3, r1
 800371c:	80bb      	strh	r3, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <BSP_LCD_DisplayChar+0x80>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	491b      	ldr	r1, [pc, #108]	; (8003794 <BSP_LCD_DisplayChar+0x84>)
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3308      	adds	r3, #8
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <BSP_LCD_DisplayChar+0x80>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4c14      	ldr	r4, [pc, #80]	; (8003794 <BSP_LCD_DisplayChar+0x84>)
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4423      	add	r3, r4
 800374e:	3308      	adds	r3, #8
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003754:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <BSP_LCD_DisplayChar+0x80>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4c0d      	ldr	r4, [pc, #52]	; (8003794 <BSP_LCD_DisplayChar+0x84>)
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4423      	add	r3, r4
 8003768:	3308      	adds	r3, #8
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	889b      	ldrh	r3, [r3, #4]
 800376e:	3307      	adds	r3, #7
 8003770:	2b00      	cmp	r3, #0
 8003772:	da00      	bge.n	8003776 <BSP_LCD_DisplayChar+0x66>
 8003774:	3307      	adds	r3, #7
 8003776:	10db      	asrs	r3, r3, #3
 8003778:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800377c:	18ca      	adds	r2, r1, r3
 800377e:	88b9      	ldrh	r1, [r7, #4]
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fbf6 	bl	8003f74 <DrawChar>
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bd90      	pop	{r4, r7, pc}
 8003790:	20000218 	.word	0x20000218
 8003794:	2000021c 	.word	0x2000021c

08003798 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	60ba      	str	r2, [r7, #8]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	81fb      	strh	r3, [r7, #14]
 80037a6:	460b      	mov	r3, r1
 80037a8:	81bb      	strh	r3, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80037ae:	2301      	movs	r3, #1
 80037b0:	83fb      	strh	r3, [r7, #30]
 80037b2:	2300      	movs	r3, #0
 80037b4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80037c2:	e002      	b.n	80037ca <BSP_LCD_DisplayStringAt+0x32>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	3301      	adds	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	617a      	str	r2, [r7, #20]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f6      	bne.n	80037c4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80037d6:	f7ff fe5d 	bl	8003494 <BSP_LCD_GetXSize>
 80037da:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <BSP_LCD_DisplayStringAt+0x16c>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	494a      	ldr	r1, [pc, #296]	; (8003908 <BSP_LCD_DisplayStringAt+0x170>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3308      	adds	r3, #8
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	889b      	ldrh	r3, [r3, #4]
 80037f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f4:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d01c      	beq.n	8003836 <BSP_LCD_DisplayStringAt+0x9e>
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d017      	beq.n	8003830 <BSP_LCD_DisplayStringAt+0x98>
 8003800:	2b01      	cmp	r3, #1
 8003802:	d12e      	bne.n	8003862 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	1ad1      	subs	r1, r2, r3
 800380a:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <BSP_LCD_DisplayStringAt+0x16c>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	483e      	ldr	r0, [pc, #248]	; (8003908 <BSP_LCD_DisplayStringAt+0x170>)
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4403      	add	r3, r0
 800381a:	3308      	adds	r3, #8
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	889b      	ldrh	r3, [r3, #4]
 8003820:	fb03 f301 	mul.w	r3, r3, r1
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	89fb      	ldrh	r3, [r7, #14]
 800382a:	4413      	add	r3, r2
 800382c:	83fb      	strh	r3, [r7, #30]
      break;
 800382e:	e01b      	b.n	8003868 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003830:	89fb      	ldrh	r3, [r7, #14]
 8003832:	83fb      	strh	r3, [r7, #30]
      break;
 8003834:	e018      	b.n	8003868 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	b299      	uxth	r1, r3
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <BSP_LCD_DisplayStringAt+0x16c>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4831      	ldr	r0, [pc, #196]	; (8003908 <BSP_LCD_DisplayStringAt+0x170>)
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4403      	add	r3, r0
 800384e:	3308      	adds	r3, #8
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	889b      	ldrh	r3, [r3, #4]
 8003854:	fb11 f303 	smulbb	r3, r1, r3
 8003858:	b29a      	uxth	r2, r3
 800385a:	89fb      	ldrh	r3, [r7, #14]
 800385c:	4413      	add	r3, r2
 800385e:	83fb      	strh	r3, [r7, #30]
      break;
 8003860:	e002      	b.n	8003868 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8003862:	89fb      	ldrh	r3, [r7, #14]
 8003864:	83fb      	strh	r3, [r7, #30]
      break;
 8003866:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003868:	e01a      	b.n	80038a0 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	89b9      	ldrh	r1, [r7, #12]
 8003870:	8bfb      	ldrh	r3, [r7, #30]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff4c 	bl	8003710 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <BSP_LCD_DisplayStringAt+0x16c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4922      	ldr	r1, [pc, #136]	; (8003908 <BSP_LCD_DisplayStringAt+0x170>)
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3308      	adds	r3, #8
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	889a      	ldrh	r2, [r3, #4]
 800388e:	8bfb      	ldrh	r3, [r7, #30]
 8003890:	4413      	add	r3, r2
 8003892:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3301      	adds	r3, #1
 8003898:	60bb      	str	r3, [r7, #8]
    i++;
 800389a:	8bbb      	ldrh	r3, [r7, #28]
 800389c:	3301      	adds	r3, #1
 800389e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2dc      	uxtb	r4, r3
 80038ae:	f7ff fdf1 	bl	8003494 <BSP_LCD_GetXSize>
 80038b2:	4605      	mov	r5, r0
 80038b4:	8bb9      	ldrh	r1, [r7, #28]
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <BSP_LCD_DisplayStringAt+0x16c>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4813      	ldr	r0, [pc, #76]	; (8003908 <BSP_LCD_DisplayStringAt+0x170>)
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4403      	add	r3, r0
 80038c6:	3308      	adds	r3, #8
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	889b      	ldrh	r3, [r3, #4]
 80038cc:	fb03 f301 	mul.w	r3, r3, r1
 80038d0:	1aeb      	subs	r3, r5, r3
 80038d2:	b299      	uxth	r1, r3
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <BSP_LCD_DisplayStringAt+0x16c>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	480b      	ldr	r0, [pc, #44]	; (8003908 <BSP_LCD_DisplayStringAt+0x170>)
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4403      	add	r3, r0
 80038e4:	3308      	adds	r3, #8
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	889b      	ldrh	r3, [r3, #4]
 80038ea:	4299      	cmp	r1, r3
 80038ec:	bf2c      	ite	cs
 80038ee:	2301      	movcs	r3, #1
 80038f0:	2300      	movcc	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	4023      	ands	r3, r4
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1b6      	bne.n	800386a <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80038fc:	bf00      	nop
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bdb0      	pop	{r4, r5, r7, pc}
 8003904:	20000218 	.word	0x20000218
 8003908:	2000021c 	.word	0x2000021c

0800390c <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af02      	add	r7, sp, #8
 8003912:	4603      	mov	r3, r0
 8003914:	80fb      	strh	r3, [r7, #6]
 8003916:	460b      	mov	r3, r1
 8003918:	80bb      	strh	r3, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003922:	4b16      	ldr	r3, [pc, #88]	; (800397c <BSP_LCD_DrawHLine+0x70>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a16      	ldr	r2, [pc, #88]	; (8003980 <BSP_LCD_DrawHLine+0x74>)
 8003928:	2134      	movs	r1, #52	; 0x34
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	335c      	adds	r3, #92	; 0x5c
 8003932:	681c      	ldr	r4, [r3, #0]
 8003934:	f7ff fdae 	bl	8003494 <BSP_LCD_GetXSize>
 8003938:	4602      	mov	r2, r0
 800393a:	88bb      	ldrh	r3, [r7, #4]
 800393c:	fb03 f202 	mul.w	r2, r3, r2
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4423      	add	r3, r4
 8003948:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <BSP_LCD_DrawHLine+0x70>)
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	68fc      	ldr	r4, [r7, #12]
 8003950:	887d      	ldrh	r5, [r7, #2]
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <BSP_LCD_DrawHLine+0x70>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	490b      	ldr	r1, [pc, #44]	; (8003984 <BSP_LCD_DrawHLine+0x78>)
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2301      	movs	r3, #1
 800396c:	462a      	mov	r2, r5
 800396e:	4621      	mov	r1, r4
 8003970:	f000 fbba 	bl	80040e8 <FillBuffer>
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bdb0      	pop	{r4, r5, r7, pc}
 800397c:	20000218 	.word	0x20000218
 8003980:	200006e0 	.word	0x200006e0
 8003984:	2000021c 	.word	0x2000021c

08003988 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	80fb      	strh	r3, [r7, #6]
 8003992:	460b      	mov	r3, r1
 8003994:	80bb      	strh	r3, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	f1c3 0303 	rsb	r3, r3, #3
 80039a2:	617b      	str	r3, [r7, #20]
  curx = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80039ac:	e0cf      	b.n	8003b4e <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	4413      	add	r3, r2
 80039b6:	b298      	uxth	r0, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	88ba      	ldrh	r2, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	b29c      	uxth	r4, r3
 80039c2:	4b67      	ldr	r3, [pc, #412]	; (8003b60 <BSP_LCD_DrawCircle+0x1d8>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4967      	ldr	r1, [pc, #412]	; (8003b64 <BSP_LCD_DrawCircle+0x1dc>)
 80039c8:	4613      	mov	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4621      	mov	r1, r4
 80039d8:	f000 faa6 	bl	8003f28 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	88fa      	ldrh	r2, [r7, #6]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	b298      	uxth	r0, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	88ba      	ldrh	r2, [r7, #4]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	b29c      	uxth	r4, r3
 80039f0:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <BSP_LCD_DrawCircle+0x1d8>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	495b      	ldr	r1, [pc, #364]	; (8003b64 <BSP_LCD_DrawCircle+0x1dc>)
 80039f6:	4613      	mov	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	4621      	mov	r1, r4
 8003a06:	f000 fa8f 	bl	8003f28 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	4413      	add	r3, r2
 8003a12:	b298      	uxth	r0, r3
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	88ba      	ldrh	r2, [r7, #4]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	b29c      	uxth	r4, r3
 8003a1e:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <BSP_LCD_DrawCircle+0x1d8>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4950      	ldr	r1, [pc, #320]	; (8003b64 <BSP_LCD_DrawCircle+0x1dc>)
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4621      	mov	r1, r4
 8003a34:	f000 fa78 	bl	8003f28 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	b298      	uxth	r0, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	88ba      	ldrh	r2, [r7, #4]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	b29c      	uxth	r4, r3
 8003a4c:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <BSP_LCD_DrawCircle+0x1d8>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4944      	ldr	r1, [pc, #272]	; (8003b64 <BSP_LCD_DrawCircle+0x1dc>)
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4621      	mov	r1, r4
 8003a62:	f000 fa61 	bl	8003f28 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	b298      	uxth	r0, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	88bb      	ldrh	r3, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	b29c      	uxth	r4, r3
 8003a7a:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <BSP_LCD_DrawCircle+0x1d8>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4939      	ldr	r1, [pc, #228]	; (8003b64 <BSP_LCD_DrawCircle+0x1dc>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4621      	mov	r1, r4
 8003a90:	f000 fa4a 	bl	8003f28 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	b298      	uxth	r0, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	88bb      	ldrh	r3, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	b29c      	uxth	r4, r3
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <BSP_LCD_DrawCircle+0x1d8>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	492d      	ldr	r1, [pc, #180]	; (8003b64 <BSP_LCD_DrawCircle+0x1dc>)
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4621      	mov	r1, r4
 8003abe:	f000 fa33 	bl	8003f28 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	4413      	add	r3, r2
 8003aca:	b298      	uxth	r0, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	88bb      	ldrh	r3, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	b29c      	uxth	r4, r3
 8003ad6:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <BSP_LCD_DrawCircle+0x1d8>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4922      	ldr	r1, [pc, #136]	; (8003b64 <BSP_LCD_DrawCircle+0x1dc>)
 8003adc:	4613      	mov	r3, r2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4621      	mov	r1, r4
 8003aec:	f000 fa1c 	bl	8003f28 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	88fa      	ldrh	r2, [r7, #6]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	b298      	uxth	r0, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	88bb      	ldrh	r3, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	b29c      	uxth	r4, r3
 8003b04:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <BSP_LCD_DrawCircle+0x1d8>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4916      	ldr	r1, [pc, #88]	; (8003b64 <BSP_LCD_DrawCircle+0x1dc>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	f000 fa05 	bl	8003f28 <BSP_LCD_DrawPixel>

    if (d < 0)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da06      	bge.n	8003b32 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	009a      	lsls	r2, r3, #2
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3306      	adds	r3, #6
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e00a      	b.n	8003b48 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	009a      	lsls	r2, r3, #2
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	330a      	adds	r3, #10
 8003b40:	617b      	str	r3, [r7, #20]
      cury--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	f67f af2b 	bls.w	80039ae <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd90      	pop	{r4, r7, pc}
 8003b60:	20000218 	.word	0x20000218
 8003b64:	2000021c 	.word	0x2000021c

08003b68 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af02      	add	r7, sp, #8
 8003b70:	4604      	mov	r4, r0
 8003b72:	4608      	mov	r0, r1
 8003b74:	4611      	mov	r1, r2
 8003b76:	461a      	mov	r2, r3
 8003b78:	4623      	mov	r3, r4
 8003b7a:	80fb      	strh	r3, [r7, #6]
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	80bb      	strh	r3, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <BSP_LCD_FillRect+0xa8>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4920      	ldr	r1, [pc, #128]	; (8003c14 <BSP_LCD_FillRect+0xac>)
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fd42 	bl	8003628 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <BSP_LCD_FillRect+0xa8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <BSP_LCD_FillRect+0xb0>)
 8003baa:	2134      	movs	r1, #52	; 0x34
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	335c      	adds	r3, #92	; 0x5c
 8003bb4:	681c      	ldr	r4, [r3, #0]
 8003bb6:	f7ff fc6d 	bl	8003494 <BSP_LCD_GetXSize>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	88bb      	ldrh	r3, [r7, #4]
 8003bbe:	fb03 f202 	mul.w	r2, r3, r2
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4423      	add	r3, r4
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <BSP_LCD_FillRect+0xa8>)
 8003bce:	681c      	ldr	r4, [r3, #0]
 8003bd0:	68fd      	ldr	r5, [r7, #12]
 8003bd2:	887e      	ldrh	r6, [r7, #2]
 8003bd4:	f8b7 8000 	ldrh.w	r8, [r7]
 8003bd8:	f7ff fc5c 	bl	8003494 <BSP_LCD_GetXSize>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	1ad1      	subs	r1, r2, r3
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <BSP_LCD_FillRect+0xa8>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	480b      	ldr	r0, [pc, #44]	; (8003c14 <BSP_LCD_FillRect+0xac>)
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4403      	add	r3, r0
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	9100      	str	r1, [sp, #0]
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	4632      	mov	r2, r6
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f000 fa72 	bl	80040e8 <FillBuffer>
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000218 	.word	0x20000218
 8003c14:	2000021c 	.word	0x2000021c
 8003c18:	200006e0 	.word	0x200006e0

08003c1c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	80fb      	strh	r3, [r7, #6]
 8003c26:	460b      	mov	r3, r1
 8003c28:	80bb      	strh	r3, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	f1c3 0303 	rsb	r3, r3, #3
 8003c36:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003c40:	4b44      	ldr	r3, [pc, #272]	; (8003d54 <BSP_LCD_FillCircle+0x138>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4944      	ldr	r1, [pc, #272]	; (8003d58 <BSP_LCD_FillCircle+0x13c>)
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fce8 	bl	8003628 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003c58:	e061      	b.n	8003d1e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d021      	beq.n	8003ca4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	b298      	uxth	r0, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	88bb      	ldrh	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	b299      	uxth	r1, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f7ff fe45 	bl	800390c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	88fa      	ldrh	r2, [r7, #6]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	b298      	uxth	r0, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	88ba      	ldrh	r2, [r7, #4]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	b299      	uxth	r1, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f7ff fe34 	bl	800390c <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d021      	beq.n	8003cee <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	b298      	uxth	r0, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	88ba      	ldrh	r2, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	b299      	uxth	r1, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f7ff fe20 	bl	800390c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	b298      	uxth	r0, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	88bb      	ldrh	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	b299      	uxth	r1, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f7ff fe0f 	bl	800390c <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	da06      	bge.n	8003d02 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	009a      	lsls	r2, r3, #2
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3306      	adds	r3, #6
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e00a      	b.n	8003d18 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	330a      	adds	r3, #10
 8003d10:	617b      	str	r3, [r7, #20]
      cury--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d999      	bls.n	8003c5a <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <BSP_LCD_FillCircle+0x138>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	490b      	ldr	r1, [pc, #44]	; (8003d58 <BSP_LCD_FillCircle+0x13c>)
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fc75 	bl	8003628 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	88b9      	ldrh	r1, [r7, #4]
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fe1f 	bl	8003988 <BSP_LCD_DrawCircle>
}
 8003d4a:	bf00      	nop
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000218 	.word	0x20000218
 8003d58:	2000021c 	.word	0x2000021c

08003d5c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <BSP_LCD_DisplayOn+0x1c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003d6a:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <BSP_LCD_DisplayOn+0x1c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4798      	blx	r3
  }
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000788 	.word	0x20000788

08003d7c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08e      	sub	sp, #56	; 0x38
 8003d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	4a60      	ldr	r2, [pc, #384]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003d8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d90:	6453      	str	r3, [r2, #68]	; 0x44
 8003d92:	4b5e      	ldr	r3, [pc, #376]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	4b5a      	ldr	r3, [pc, #360]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	4a59      	ldr	r2, [pc, #356]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dac:	6313      	str	r3, [r2, #48]	; 0x30
 8003dae:	4b57      	ldr	r3, [pc, #348]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dca:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a4b      	ldr	r2, [pc, #300]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	4b45      	ldr	r3, [pc, #276]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a44      	ldr	r2, [pc, #272]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	4b42      	ldr	r3, [pc, #264]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e18:	f043 0308 	orr.w	r3, r3, #8
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a36      	ldr	r2, [pc, #216]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e34:	f043 0320 	orr.w	r3, r3, #32
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	4a2f      	ldr	r2, [pc, #188]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e54:	6313      	str	r3, [r2, #48]	; 0x30
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <BSP_LCD_MspInit+0x190>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003e62:	f641 0358 	movw	r3, #6232	; 0x1858
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003e70:	2302      	movs	r3, #2
 8003e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003e74:	230e      	movs	r3, #14
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4824      	ldr	r0, [pc, #144]	; (8003f10 <BSP_LCD_MspInit+0x194>)
 8003e80:	f001 fada 	bl	8005438 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003e84:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4820      	ldr	r0, [pc, #128]	; (8003f14 <BSP_LCD_MspInit+0x198>)
 8003e92:	f001 fad1 	bl	8005438 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003e96:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	481d      	ldr	r0, [pc, #116]	; (8003f18 <BSP_LCD_MspInit+0x19c>)
 8003ea4:	f001 fac8 	bl	8005438 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003ea8:	2348      	movs	r3, #72	; 0x48
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	481a      	ldr	r0, [pc, #104]	; (8003f1c <BSP_LCD_MspInit+0x1a0>)
 8003eb4:	f001 fac0 	bl	8005438 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4816      	ldr	r0, [pc, #88]	; (8003f20 <BSP_LCD_MspInit+0x1a4>)
 8003ec6:	f001 fab7 	bl	8005438 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003eca:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4813      	ldr	r0, [pc, #76]	; (8003f24 <BSP_LCD_MspInit+0x1a8>)
 8003ed8:	f001 faae 	bl	8005438 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003edc:	2303      	movs	r3, #3
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003ee0:	2309      	movs	r3, #9
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ee8:	4619      	mov	r1, r3
 8003eea:	480a      	ldr	r0, [pc, #40]	; (8003f14 <BSP_LCD_MspInit+0x198>)
 8003eec:	f001 faa4 	bl	8005438 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003ef0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003efa:	4619      	mov	r1, r3
 8003efc:	4809      	ldr	r0, [pc, #36]	; (8003f24 <BSP_LCD_MspInit+0x1a8>)
 8003efe:	f001 fa9b 	bl	8005438 <HAL_GPIO_Init>
}
 8003f02:	bf00      	nop
 8003f04:	3738      	adds	r7, #56	; 0x38
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40020400 	.word	0x40020400
 8003f18:	40020800 	.word	0x40020800
 8003f1c:	40020c00 	.word	0x40020c00
 8003f20:	40021400 	.word	0x40021400
 8003f24:	40021800 	.word	0x40021800

08003f28 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	603a      	str	r2, [r7, #0]
 8003f32:	80fb      	strh	r3, [r7, #6]
 8003f34:	460b      	mov	r3, r1
 8003f36:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <BSP_LCD_DrawPixel+0x44>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <BSP_LCD_DrawPixel+0x48>)
 8003f3e:	2134      	movs	r1, #52	; 0x34
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	335c      	adds	r3, #92	; 0x5c
 8003f48:	681c      	ldr	r4, [r3, #0]
 8003f4a:	88bd      	ldrh	r5, [r7, #4]
 8003f4c:	f7ff faa2 	bl	8003494 <BSP_LCD_GetXSize>
 8003f50:	4603      	mov	r3, r0
 8003f52:	fb03 f205 	mul.w	r2, r3, r5
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4423      	add	r3, r4
 8003f5e:	461a      	mov	r2, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6013      	str	r3, [r2, #0]
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6c:	20000218 	.word	0x20000218
 8003f70:	200006e0 	.word	0x200006e0

08003f74 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	603a      	str	r2, [r7, #0]
 8003f7e:	80fb      	strh	r3, [r7, #6]
 8003f80:	460b      	mov	r3, r1
 8003f82:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <DrawChar+0x16c>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4953      	ldr	r1, [pc, #332]	; (80040e4 <DrawChar+0x170>)
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	88db      	ldrh	r3, [r3, #6]
 8003fa6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003fa8:	4b4d      	ldr	r3, [pc, #308]	; (80040e0 <DrawChar+0x16c>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	494d      	ldr	r1, [pc, #308]	; (80040e4 <DrawChar+0x170>)
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3308      	adds	r3, #8
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	889b      	ldrh	r3, [r3, #4]
 8003fbe:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003fc0:	8a3b      	ldrh	r3, [r7, #16]
 8003fc2:	3307      	adds	r3, #7
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	da00      	bge.n	8003fca <DrawChar+0x56>
 8003fc8:	3307      	adds	r3, #7
 8003fca:	10db      	asrs	r3, r3, #3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	8a3b      	ldrh	r3, [r7, #16]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e076      	b.n	80040ce <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003fe0:	8a3b      	ldrh	r3, [r7, #16]
 8003fe2:	3307      	adds	r3, #7
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da00      	bge.n	8003fea <DrawChar+0x76>
 8003fe8:	3307      	adds	r3, #7
 8003fea:	10db      	asrs	r3, r3, #3
 8003fec:	461a      	mov	r2, r3
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fb03 f302 	mul.w	r3, r3, r2
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003ffa:	8a3b      	ldrh	r3, [r7, #16]
 8003ffc:	3307      	adds	r3, #7
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da00      	bge.n	8004004 <DrawChar+0x90>
 8004002:	3307      	adds	r3, #7
 8004004:	10db      	asrs	r3, r3, #3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d002      	beq.n	8004010 <DrawChar+0x9c>
 800400a:	2b02      	cmp	r3, #2
 800400c:	d004      	beq.n	8004018 <DrawChar+0xa4>
 800400e:	e00c      	b.n	800402a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	617b      	str	r3, [r7, #20]
      break;
 8004016:	e016      	b.n	8004046 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	3201      	adds	r2, #1
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e00d      	b.n	8004046 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	041a      	lsls	r2, r3, #16
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3301      	adds	r3, #1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	4313      	orrs	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	3202      	adds	r2, #2
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
      break;
 8004044:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	e036      	b.n	80040ba <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800404c:	8a3a      	ldrh	r2, [r7, #16]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	4413      	add	r3, r2
 8004056:	3b01      	subs	r3, #1
 8004058:	2201      	movs	r2, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	461a      	mov	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d012      	beq.n	800408e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	b29a      	uxth	r2, r3
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	4413      	add	r3, r2
 8004070:	b298      	uxth	r0, r3
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <DrawChar+0x16c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	491b      	ldr	r1, [pc, #108]	; (80040e4 <DrawChar+0x170>)
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	88bb      	ldrh	r3, [r7, #4]
 8004086:	4619      	mov	r1, r3
 8004088:	f7ff ff4e 	bl	8003f28 <BSP_LCD_DrawPixel>
 800408c:	e012      	b.n	80040b4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	b29a      	uxth	r2, r3
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	4413      	add	r3, r2
 8004096:	b298      	uxth	r0, r3
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <DrawChar+0x16c>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4911      	ldr	r1, [pc, #68]	; (80040e4 <DrawChar+0x170>)
 800409e:	4613      	mov	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3304      	adds	r3, #4
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	88bb      	ldrh	r3, [r7, #4]
 80040ae:	4619      	mov	r1, r3
 80040b0:	f7ff ff3a 	bl	8003f28 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	3301      	adds	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	8a3b      	ldrh	r3, [r7, #16]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3c4      	bcc.n	800404c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80040c2:	88bb      	ldrh	r3, [r7, #4]
 80040c4:	3301      	adds	r3, #1
 80040c6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	8a7b      	ldrh	r3, [r7, #18]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d384      	bcc.n	8003fe0 <DrawChar+0x6c>
  }
}
 80040d6:	bf00      	nop
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000218 	.word	0x20000218
 80040e4:	2000021c 	.word	0x2000021c

080040e8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80040f6:	4b16      	ldr	r3, [pc, #88]	; (8004150 <FillBuffer+0x68>)
 80040f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040fc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <FillBuffer+0x68>)
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004104:	4a12      	ldr	r2, [pc, #72]	; (8004150 <FillBuffer+0x68>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <FillBuffer+0x68>)
 800410c:	4a11      	ldr	r2, [pc, #68]	; (8004154 <FillBuffer+0x6c>)
 800410e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004110:	480f      	ldr	r0, [pc, #60]	; (8004150 <FillBuffer+0x68>)
 8004112:	f000 fdf5 	bl	8004d00 <HAL_DMA2D_Init>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d115      	bne.n	8004148 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800411c:	68f9      	ldr	r1, [r7, #12]
 800411e:	480c      	ldr	r0, [pc, #48]	; (8004150 <FillBuffer+0x68>)
 8004120:	f001 f85c 	bl	80051dc <HAL_DMA2D_ConfigLayer>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10e      	bne.n	8004148 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69f9      	ldr	r1, [r7, #28]
 8004134:	4806      	ldr	r0, [pc, #24]	; (8004150 <FillBuffer+0x68>)
 8004136:	f000 fe2c 	bl	8004d92 <HAL_DMA2D_Start>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004140:	210a      	movs	r1, #10
 8004142:	4803      	ldr	r0, [pc, #12]	; (8004150 <FillBuffer+0x68>)
 8004144:	f000 fe50 	bl	8004de8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200001a8 	.word	0x200001a8
 8004154:	4002b000 	.word	0x4002b000

08004158 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <BSP_SDRAM_Init+0xac>)
 800415e:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <BSP_SDRAM_Init+0xb0>)
 8004160:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004162:	4b2a      	ldr	r3, [pc, #168]	; (800420c <BSP_SDRAM_Init+0xb4>)
 8004164:	2202      	movs	r2, #2
 8004166:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004168:	4b28      	ldr	r3, [pc, #160]	; (800420c <BSP_SDRAM_Init+0xb4>)
 800416a:	2207      	movs	r2, #7
 800416c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <BSP_SDRAM_Init+0xb4>)
 8004170:	2204      	movs	r2, #4
 8004172:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <BSP_SDRAM_Init+0xb4>)
 8004176:	2207      	movs	r2, #7
 8004178:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800417a:	4b24      	ldr	r3, [pc, #144]	; (800420c <BSP_SDRAM_Init+0xb4>)
 800417c:	2202      	movs	r2, #2
 800417e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004180:	4b22      	ldr	r3, [pc, #136]	; (800420c <BSP_SDRAM_Init+0xb4>)
 8004182:	2202      	movs	r2, #2
 8004184:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <BSP_SDRAM_Init+0xb4>)
 8004188:	2202      	movs	r2, #2
 800418a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <BSP_SDRAM_Init+0xac>)
 800418e:	2201      	movs	r2, #1
 8004190:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004192:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <BSP_SDRAM_Init+0xac>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <BSP_SDRAM_Init+0xac>)
 800419a:	2204      	movs	r2, #4
 800419c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800419e:	4b19      	ldr	r3, [pc, #100]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041a0:	2210      	movs	r2, #16
 80041a2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041a6:	2240      	movs	r2, #64	; 0x40
 80041a8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80041b0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041be:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80041c6:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80041ce:	2100      	movs	r1, #0
 80041d0:	480c      	ldr	r0, [pc, #48]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041d2:	f000 f87f 	bl	80042d4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80041d6:	490d      	ldr	r1, [pc, #52]	; (800420c <BSP_SDRAM_Init+0xb4>)
 80041d8:	480a      	ldr	r0, [pc, #40]	; (8004204 <BSP_SDRAM_Init+0xac>)
 80041da:	f005 f835 	bl	8009248 <HAL_SDRAM_Init>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <BSP_SDRAM_Init+0xb8>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e002      	b.n	80041f2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <BSP_SDRAM_Init+0xb8>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80041f2:	f240 506a 	movw	r0, #1386	; 0x56a
 80041f6:	f000 f80d 	bl	8004214 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <BSP_SDRAM_Init+0xb8>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000234 	.word	0x20000234
 8004208:	a0000140 	.word	0xa0000140
 800420c:	20000268 	.word	0x20000268
 8004210:	2000008c 	.word	0x2000008c

08004214 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004228:	2208      	movs	r2, #8
 800422a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800422e:	2201      	movs	r2, #1
 8004230:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004234:	2200      	movs	r2, #0
 8004236:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800423c:	4923      	ldr	r1, [pc, #140]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800423e:	4824      	ldr	r0, [pc, #144]	; (80042d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004240:	f005 f836 	bl	80092b0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004244:	2001      	movs	r0, #1
 8004246:	f000 fa7f 	bl	8004748 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800424c:	2202      	movs	r2, #2
 800424e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004250:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004252:	2208      	movs	r2, #8
 8004254:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004258:	2201      	movs	r2, #1
 800425a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800425e:	2200      	movs	r2, #0
 8004260:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004266:	4919      	ldr	r1, [pc, #100]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004268:	4819      	ldr	r0, [pc, #100]	; (80042d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800426a:	f005 f821 	bl	80092b0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004270:	2203      	movs	r2, #3
 8004272:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004276:	2208      	movs	r2, #8
 8004278:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800427c:	2204      	movs	r2, #4
 800427e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004280:	4b12      	ldr	r3, [pc, #72]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004282:	2200      	movs	r2, #0
 8004284:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428a:	4910      	ldr	r1, [pc, #64]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800428c:	4810      	ldr	r0, [pc, #64]	; (80042d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800428e:	f005 f80f 	bl	80092b0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004292:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004296:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800429a:	2204      	movs	r2, #4
 800429c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a0:	2208      	movs	r2, #8
 80042a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a07      	ldr	r2, [pc, #28]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80042b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b4:	4905      	ldr	r1, [pc, #20]	; (80042cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042b6:	4806      	ldr	r0, [pc, #24]	; (80042d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042b8:	f004 fffa 	bl	80092b0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4804      	ldr	r0, [pc, #16]	; (80042d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042c0:	f005 f821 	bl	8009306 <HAL_SDRAM_ProgramRefreshRate>
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000284 	.word	0x20000284
 80042d0:	20000234 	.word	0x20000234

080042d4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b090      	sub	sp, #64	; 0x40
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80ec 	beq.w	80044be <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ea:	4b77      	ldr	r3, [pc, #476]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4a76      	ldr	r2, [pc, #472]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6393      	str	r3, [r2, #56]	; 0x38
 80042f6:	4b74      	ldr	r3, [pc, #464]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
 8004306:	4b70      	ldr	r3, [pc, #448]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	4a6f      	ldr	r2, [pc, #444]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 800430c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004310:	6313      	str	r3, [r2, #48]	; 0x30
 8004312:	4b6d      	ldr	r3, [pc, #436]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	623b      	str	r3, [r7, #32]
 8004322:	4b69      	ldr	r3, [pc, #420]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	4a68      	ldr	r2, [pc, #416]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	6313      	str	r3, [r2, #48]	; 0x30
 800432e:	4b66      	ldr	r3, [pc, #408]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	4b62      	ldr	r3, [pc, #392]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4a61      	ldr	r2, [pc, #388]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004344:	f043 0304 	orr.w	r3, r3, #4
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
 800434a:	4b5f      	ldr	r3, [pc, #380]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	4a5a      	ldr	r2, [pc, #360]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004360:	f043 0308 	orr.w	r3, r3, #8
 8004364:	6313      	str	r3, [r2, #48]	; 0x30
 8004366:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	4b54      	ldr	r3, [pc, #336]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	4a53      	ldr	r2, [pc, #332]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 800437c:	f043 0310 	orr.w	r3, r3, #16
 8004380:	6313      	str	r3, [r2, #48]	; 0x30
 8004382:	4b51      	ldr	r3, [pc, #324]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	4a4c      	ldr	r2, [pc, #304]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 8004398:	f043 0320 	orr.w	r3, r3, #32
 800439c:	6313      	str	r3, [r2, #48]	; 0x30
 800439e:	4b4a      	ldr	r3, [pc, #296]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	4a45      	ldr	r2, [pc, #276]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 80043b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ba:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <BSP_SDRAM_MspInit+0x1f4>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80043c6:	2302      	movs	r3, #2
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80043ca:	2302      	movs	r3, #2
 80043cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80043d2:	230c      	movs	r3, #12
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80043d6:	2360      	movs	r3, #96	; 0x60
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80043da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043de:	4619      	mov	r1, r3
 80043e0:	483a      	ldr	r0, [pc, #232]	; (80044cc <BSP_SDRAM_MspInit+0x1f8>)
 80043e2:	f001 f829 	bl	8005438 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80043e6:	2301      	movs	r3, #1
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80043ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ee:	4619      	mov	r1, r3
 80043f0:	4837      	ldr	r0, [pc, #220]	; (80044d0 <BSP_SDRAM_MspInit+0x1fc>)
 80043f2:	f001 f821 	bl	8005438 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80043f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80043fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004400:	4619      	mov	r1, r3
 8004402:	4834      	ldr	r0, [pc, #208]	; (80044d4 <BSP_SDRAM_MspInit+0x200>)
 8004404:	f001 f818 	bl	8005438 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004408:	f64f 7383 	movw	r3, #65411	; 0xff83
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800440e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004412:	4619      	mov	r1, r3
 8004414:	4830      	ldr	r0, [pc, #192]	; (80044d8 <BSP_SDRAM_MspInit+0x204>)
 8004416:	f001 f80f 	bl	8005438 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800441a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004424:	4619      	mov	r1, r3
 8004426:	482d      	ldr	r0, [pc, #180]	; (80044dc <BSP_SDRAM_MspInit+0x208>)
 8004428:	f001 f806 	bl	8005438 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800442c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004436:	4619      	mov	r1, r3
 8004438:	4829      	ldr	r0, [pc, #164]	; (80044e0 <BSP_SDRAM_MspInit+0x20c>)
 800443a:	f000 fffd 	bl	8005438 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800443e:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004444:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800444a:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 800444c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004450:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 8004454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004458:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800445a:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 800445c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004460:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 8004464:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004468:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 800446c:	2200      	movs	r2, #0
 800446e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004470:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 8004472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004476:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 800447a:	2200      	movs	r2, #0
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 8004480:	2203      	movs	r2, #3
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004484:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 8004486:	2200      	movs	r2, #0
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 8004492:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <BSP_SDRAM_MspInit+0x214>)
 8004494:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
 800449c:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80044a2:	4810      	ldr	r0, [pc, #64]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 80044a4:	f000 fb1e 	bl	8004ae4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80044a8:	480e      	ldr	r0, [pc, #56]	; (80044e4 <BSP_SDRAM_MspInit+0x210>)
 80044aa:	f000 fa6d 	bl	8004988 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80044ae:	2200      	movs	r2, #0
 80044b0:	210f      	movs	r1, #15
 80044b2:	2038      	movs	r0, #56	; 0x38
 80044b4:	f000 fa22 	bl	80048fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80044b8:	2038      	movs	r0, #56	; 0x38
 80044ba:	f000 fa3b 	bl	8004934 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80044be:	bf00      	nop
 80044c0:	3740      	adds	r7, #64	; 0x40
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40020400 	.word	0x40020400
 80044d0:	40020800 	.word	0x40020800
 80044d4:	40020c00 	.word	0x40020c00
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40021400 	.word	0x40021400
 80044e0:	40021800 	.word	0x40021800
 80044e4:	20000294 	.word	0x20000294
 80044e8:	40026410 	.word	0x40026410

080044ec <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	460a      	mov	r2, r1
 80044f6:	80fb      	strh	r3, [r7, #6]
 80044f8:	4613      	mov	r3, r2
 80044fa:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004500:	4a13      	ldr	r2, [pc, #76]	; (8004550 <BSP_TS_Init+0x64>)
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004506:	4a13      	ldr	r2, [pc, #76]	; (8004554 <BSP_TS_Init+0x68>)
 8004508:	88bb      	ldrh	r3, [r7, #4]
 800450a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800450c:	4b12      	ldr	r3, [pc, #72]	; (8004558 <BSP_TS_Init+0x6c>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2082      	movs	r0, #130	; 0x82
 8004512:	4798      	blx	r3
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	f640 0311 	movw	r3, #2065	; 0x811
 800451c:	429a      	cmp	r2, r3
 800451e:	d104      	bne.n	800452a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004520:	4b0e      	ldr	r3, [pc, #56]	; (800455c <BSP_TS_Init+0x70>)
 8004522:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <BSP_TS_Init+0x6c>)
 8004524:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <BSP_TS_Init+0x70>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2082      	movs	r0, #130	; 0x82
 8004538:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <BSP_TS_Init+0x70>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2082      	movs	r0, #130	; 0x82
 8004542:	4798      	blx	r3
  }

  return ret;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	200002f8 	.word	0x200002f8
 8004554:	200002fa 	.word	0x200002fa
 8004558:	2000003c 	.word	0x2000003c
 800455c:	200002f4 	.word	0x200002f4

08004560 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004568:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <BSP_TS_GetState+0x148>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2082      	movs	r0, #130	; 0x82
 8004570:	4798      	blx	r3
 8004572:	4603      	mov	r3, r0
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 808d 	beq.w	800469e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004584:	4b48      	ldr	r3, [pc, #288]	; (80046a8 <BSP_TS_GetState+0x148>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f107 020c 	add.w	r2, r7, #12
 800458e:	f107 010e 	add.w	r1, r7, #14
 8004592:	2082      	movs	r0, #130	; 0x82
 8004594:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004596:	89bb      	ldrh	r3, [r7, #12]
 8004598:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800459c:	b29b      	uxth	r3, r3
 800459e:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80045a0:	89bb      	ldrh	r3, [r7, #12]
 80045a2:	4a42      	ldr	r2, [pc, #264]	; (80046ac <BSP_TS_GetState+0x14c>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	08db      	lsrs	r3, r3, #3
 80045aa:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80045ac:	8abb      	ldrh	r3, [r7, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	82bb      	strh	r3, [r7, #20]
 80045b6:	e008      	b.n	80045ca <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80045b8:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <BSP_TS_GetState+0x150>)
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	8aba      	ldrh	r2, [r7, #20]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d903      	bls.n	80045ca <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <BSP_TS_GetState+0x150>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80045ca:	8abb      	ldrh	r3, [r7, #20]
 80045cc:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80045ce:	89fb      	ldrh	r3, [r7, #14]
 80045d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d806      	bhi.n	80045e6 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80045d8:	89fb      	ldrh	r3, [r7, #14]
 80045da:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80045de:	330e      	adds	r3, #14
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	81fb      	strh	r3, [r7, #14]
 80045e4:	e005      	b.n	80045f2 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80045e6:	89fb      	ldrh	r3, [r7, #14]
 80045e8:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80045ec:	3308      	adds	r3, #8
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80045f2:	89fb      	ldrh	r3, [r7, #14]
 80045f4:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <BSP_TS_GetState+0x154>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	08db      	lsrs	r3, r3, #3
 80045fc:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80045fe:	8afb      	ldrh	r3, [r7, #22]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	82fb      	strh	r3, [r7, #22]
 8004608:	e008      	b.n	800461c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800460a:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <BSP_TS_GetState+0x158>)
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	8afa      	ldrh	r2, [r7, #22]
 8004610:	429a      	cmp	r2, r3
 8004612:	d903      	bls.n	800461c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <BSP_TS_GetState+0x158>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	3b01      	subs	r3, #1
 800461a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004620:	89fb      	ldrh	r3, [r7, #14]
 8004622:	461a      	mov	r2, r3
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <BSP_TS_GetState+0x15c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d906      	bls.n	800463a <BSP_TS_GetState+0xda>
 800462c:	89fa      	ldrh	r2, [r7, #14]
 800462e:	4b23      	ldr	r3, [pc, #140]	; (80046bc <BSP_TS_GetState+0x15c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	b29b      	uxth	r3, r3
 8004638:	e005      	b.n	8004646 <BSP_TS_GetState+0xe6>
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <BSP_TS_GetState+0x15c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	b29a      	uxth	r2, r3
 8004640:	89fb      	ldrh	r3, [r7, #14]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	b29b      	uxth	r3, r3
 8004646:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004648:	89bb      	ldrh	r3, [r7, #12]
 800464a:	461a      	mov	r2, r3
 800464c:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <BSP_TS_GetState+0x160>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d906      	bls.n	8004662 <BSP_TS_GetState+0x102>
 8004654:	89ba      	ldrh	r2, [r7, #12]
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <BSP_TS_GetState+0x160>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	b29b      	uxth	r3, r3
 8004660:	e005      	b.n	800466e <BSP_TS_GetState+0x10e>
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <BSP_TS_GetState+0x160>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	b29a      	uxth	r2, r3
 8004668:	89bb      	ldrh	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	b29b      	uxth	r3, r3
 800466e:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004670:	8a7a      	ldrh	r2, [r7, #18]
 8004672:	8a3b      	ldrh	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	2b05      	cmp	r3, #5
 8004678:	dd07      	ble.n	800468a <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800467a:	89fb      	ldrh	r3, [r7, #14]
 800467c:	461a      	mov	r2, r3
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <BSP_TS_GetState+0x15c>)
 8004680:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004682:	89bb      	ldrh	r3, [r7, #12]
 8004684:	461a      	mov	r2, r3
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <BSP_TS_GetState+0x160>)
 8004688:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <BSP_TS_GetState+0x15c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <BSP_TS_GetState+0x160>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	809a      	strh	r2, [r3, #4]
  }
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	200002f4 	.word	0x200002f4
 80046ac:	ba2e8ba3 	.word	0xba2e8ba3
 80046b0:	200002fa 	.word	0x200002fa
 80046b4:	88888889 	.word	0x88888889
 80046b8:	200002f8 	.word	0x200002f8
 80046bc:	200002fc 	.word	0x200002fc
 80046c0:	20000300 	.word	0x20000300

080046c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046c8:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <HAL_Init+0x40>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <HAL_Init+0x40>)
 80046ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_Init+0x40>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <HAL_Init+0x40>)
 80046da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_Init+0x40>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a07      	ldr	r2, [pc, #28]	; (8004704 <HAL_Init+0x40>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ec:	2003      	movs	r0, #3
 80046ee:	f000 f8fa 	bl	80048e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046f2:	2000      	movs	r0, #0
 80046f4:	f7fd fad6 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f8:	f7fd faa8 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023c00 	.word	0x40023c00

08004708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_IncTick+0x20>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_IncTick+0x24>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4413      	add	r3, r2
 8004718:	4a04      	ldr	r2, [pc, #16]	; (800472c <HAL_IncTick+0x24>)
 800471a:	6013      	str	r3, [r2, #0]
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000094 	.word	0x20000094
 800472c:	2000078c 	.word	0x2000078c

08004730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return uwTick;
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <HAL_GetTick+0x14>)
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	2000078c 	.word	0x2000078c

08004748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004750:	f7ff ffee 	bl	8004730 <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d005      	beq.n	800476e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_Delay+0x40>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800476e:	bf00      	nop
 8004770:	f7ff ffde 	bl	8004730 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d8f7      	bhi.n	8004770 <HAL_Delay+0x28>
  {
  }
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000094 	.word	0x20000094

0800478c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <__NVIC_SetPriorityGrouping+0x44>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047a8:	4013      	ands	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047be:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <__NVIC_SetPriorityGrouping+0x44>)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	60d3      	str	r3, [r2, #12]
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <__NVIC_GetPriorityGrouping+0x18>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	0a1b      	lsrs	r3, r3, #8
 80047de:	f003 0307 	and.w	r3, r3, #7
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	db0b      	blt.n	800481a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	f003 021f 	and.w	r2, r3, #31
 8004808:	4907      	ldr	r1, [pc, #28]	; (8004828 <__NVIC_EnableIRQ+0x38>)
 800480a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2001      	movs	r0, #1
 8004812:	fa00 f202 	lsl.w	r2, r0, r2
 8004816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	e000e100 	.word	0xe000e100

0800482c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	6039      	str	r1, [r7, #0]
 8004836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483c:	2b00      	cmp	r3, #0
 800483e:	db0a      	blt.n	8004856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	b2da      	uxtb	r2, r3
 8004844:	490c      	ldr	r1, [pc, #48]	; (8004878 <__NVIC_SetPriority+0x4c>)
 8004846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484a:	0112      	lsls	r2, r2, #4
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	440b      	add	r3, r1
 8004850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004854:	e00a      	b.n	800486c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4908      	ldr	r1, [pc, #32]	; (800487c <__NVIC_SetPriority+0x50>)
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	3b04      	subs	r3, #4
 8004864:	0112      	lsls	r2, r2, #4
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	440b      	add	r3, r1
 800486a:	761a      	strb	r2, [r3, #24]
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	e000e100 	.word	0xe000e100
 800487c:	e000ed00 	.word	0xe000ed00

08004880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f1c3 0307 	rsb	r3, r3, #7
 800489a:	2b04      	cmp	r3, #4
 800489c:	bf28      	it	cs
 800489e:	2304      	movcs	r3, #4
 80048a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3304      	adds	r3, #4
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d902      	bls.n	80048b0 <NVIC_EncodePriority+0x30>
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3b03      	subs	r3, #3
 80048ae:	e000      	b.n	80048b2 <NVIC_EncodePriority+0x32>
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b4:	f04f 32ff 	mov.w	r2, #4294967295
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	401a      	ands	r2, r3
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c8:	f04f 31ff 	mov.w	r1, #4294967295
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	43d9      	mvns	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d8:	4313      	orrs	r3, r2
         );
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3724      	adds	r7, #36	; 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff ff4c 	bl	800478c <__NVIC_SetPriorityGrouping>
}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800490e:	f7ff ff61 	bl	80047d4 <__NVIC_GetPriorityGrouping>
 8004912:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	6978      	ldr	r0, [r7, #20]
 800491a:	f7ff ffb1 	bl	8004880 <NVIC_EncodePriority>
 800491e:	4602      	mov	r2, r0
 8004920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff ff80 	bl	800482c <__NVIC_SetPriority>
}
 800492c:	bf00      	nop
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff ff54 	bl	80047f0 <__NVIC_EnableIRQ>
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e00e      	b.n	8004980 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	795b      	ldrb	r3, [r3, #5]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fb fff4 	bl	8000960 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004994:	f7ff fecc 	bl	8004730 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e099      	b.n	8004ad8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c4:	e00f      	b.n	80049e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049c6:	f7ff feb3 	bl	8004730 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d908      	bls.n	80049e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e078      	b.n	8004ad8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e8      	bne.n	80049c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4b38      	ldr	r3, [pc, #224]	; (8004ae0 <HAL_DMA_Init+0x158>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d107      	bne.n	8004a50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d117      	bne.n	8004aaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f8bd 	bl	8004c0c <DMA_CheckFifoParam>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e016      	b.n	8004ad8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f874 	bl	8004ba0 <DMA_CalcBaseAndBitshift>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac0:	223f      	movs	r2, #63	; 0x3f
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	f010803f 	.word	0xf010803f

08004ae4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e050      	b.n	8004b98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d101      	bne.n	8004b06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
 8004b04:	e048      	b.n	8004b98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2221      	movs	r2, #33	; 0x21
 8004b44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f82a 	bl	8004ba0 <DMA_CalcBaseAndBitshift>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b78:	223f      	movs	r2, #63	; 0x3f
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3b10      	subs	r3, #16
 8004bb0:	4a14      	ldr	r2, [pc, #80]	; (8004c04 <DMA_CalcBaseAndBitshift+0x64>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bba:	4a13      	ldr	r2, [pc, #76]	; (8004c08 <DMA_CalcBaseAndBitshift+0x68>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d909      	bls.n	8004be2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	659a      	str	r2, [r3, #88]	; 0x58
 8004be0:	e007      	b.n	8004bf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	aaaaaaab 	.word	0xaaaaaaab
 8004c08:	080105ac 	.word	0x080105ac

08004c0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11f      	bne.n	8004c66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d855      	bhi.n	8004cd8 <DMA_CheckFifoParam+0xcc>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <DMA_CheckFifoParam+0x28>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c45 	.word	0x08004c45
 8004c38:	08004c57 	.word	0x08004c57
 8004c3c:	08004c45 	.word	0x08004c45
 8004c40:	08004cd9 	.word	0x08004cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d045      	beq.n	8004cdc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c54:	e042      	b.n	8004cdc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c5e:	d13f      	bne.n	8004ce0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e03c      	b.n	8004ce0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6e:	d121      	bne.n	8004cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d836      	bhi.n	8004ce4 <DMA_CheckFifoParam+0xd8>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <DMA_CheckFifoParam+0x70>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004c8d 	.word	0x08004c8d
 8004c80:	08004c93 	.word	0x08004c93
 8004c84:	08004c8d 	.word	0x08004c8d
 8004c88:	08004ca5 	.word	0x08004ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c90:	e02f      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d024      	beq.n	8004ce8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca2:	e021      	b.n	8004ce8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cac:	d11e      	bne.n	8004cec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cb2:	e01b      	b.n	8004cec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d902      	bls.n	8004cc0 <DMA_CheckFifoParam+0xb4>
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d003      	beq.n	8004cc6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cbe:	e018      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e015      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00e      	beq.n	8004cf0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd6:	e00b      	b.n	8004cf0 <DMA_CheckFifoParam+0xe4>
      break;
 8004cd8:	bf00      	nop
 8004cda:	e00a      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cdc:	bf00      	nop
 8004cde:	e008      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ce0:	bf00      	nop
 8004ce2:	e006      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ce4:	bf00      	nop
 8004ce6:	e004      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ce8:	bf00      	nop
 8004cea:	e002      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;   
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cf0:	bf00      	nop
    }
  } 
  
  return status; 
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e03b      	b.n	8004d8a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fb fe6e 	bl	8000a08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	f023 0107 	bic.w	r1, r3, #7
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68d1      	ldr	r1, [r2, #12]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	430b      	orrs	r3, r1
 8004d78:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b086      	sub	sp, #24
 8004d96:	af02      	add	r7, sp, #8
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_DMA2D_Start+0x1c>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e018      	b.n	8004de0 <HAL_DMA2D_Start+0x4e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fa99 	bl	8005300 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d056      	beq.n	8004eb2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004e04:	f7ff fc94 	bl	8004730 <HAL_GetTick>
 8004e08:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004e0a:	e04b      	b.n	8004ea4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d023      	beq.n	8004e66 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2c:	f043 0202 	orr.w	r2, r3, #2
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	f043 0201 	orr.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2221      	movs	r2, #33	; 0x21
 8004e50:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2204      	movs	r2, #4
 8004e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e0a5      	b.n	8004fb2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d01a      	beq.n	8004ea4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004e6e:	f7ff fc5f 	bl	8004730 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <HAL_DMA2D_PollForTransfer+0x9c>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10f      	bne.n	8004ea4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2203      	movs	r2, #3
 8004e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e086      	b.n	8004fb2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0ac      	beq.n	8004e0c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d061      	beq.n	8004f98 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ed4:	f7ff fc2c 	bl	8004730 <HAL_GetTick>
 8004ed8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004eda:	e056      	b.n	8004f8a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02e      	beq.n	8004f4c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	f043 0204 	orr.w	r2, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	f043 0201 	orr.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2229      	movs	r2, #41	; 0x29
 8004f36:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e032      	b.n	8004fb2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d01a      	beq.n	8004f8a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004f54:	f7ff fbec 	bl	8004730 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <HAL_DMA2D_PollForTransfer+0x182>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10f      	bne.n	8004f8a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2203      	movs	r2, #3
 8004f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e013      	b.n	8004fb2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0a1      	beq.n	8004edc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2212      	movs	r2, #18
 8004f9e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d026      	beq.n	800502a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d021      	beq.n	800502a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	f043 0201 	orr.w	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2201      	movs	r2, #1
 8005008:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2204      	movs	r2, #4
 800500e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d026      	beq.n	8005082 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d021      	beq.n	8005082 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2220      	movs	r2, #32
 8005054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2204      	movs	r2, #4
 8005066:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d026      	beq.n	80050da <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005092:	2b00      	cmp	r3, #0
 8005094:	d021      	beq.n	80050da <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2208      	movs	r2, #8
 80050ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2204      	movs	r2, #4
 80050be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00e      	beq.n	800510c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2204      	movs	r2, #4
 8005104:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f853 	bl	80051b2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d024      	beq.n	8005160 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01f      	beq.n	8005160 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800512e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2202      	movs	r2, #2
 8005136:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01f      	beq.n	80051aa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01a      	beq.n	80051aa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005182:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2210      	movs	r2, #16
 800518a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f80e 	bl	80051c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_DMA2D_ConfigLayer+0x20>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e079      	b.n	80052f0 <HAL_DMA2D_ConfigLayer+0x114>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	3318      	adds	r3, #24
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	041b      	lsls	r3, r3, #16
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005226:	4b35      	ldr	r3, [pc, #212]	; (80052fc <HAL_DMA2D_ConfigLayer+0x120>)
 8005228:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b0a      	cmp	r3, #10
 8005230:	d003      	beq.n	800523a <HAL_DMA2D_ConfigLayer+0x5e>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b09      	cmp	r3, #9
 8005238:	d107      	bne.n	800524a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e005      	b.n	8005256 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d120      	bne.n	800529e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	43db      	mvns	r3, r3
 8005266:	ea02 0103 	and.w	r1, r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	430a      	orrs	r2, r1
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b0a      	cmp	r3, #10
 8005284:	d003      	beq.n	800528e <HAL_DMA2D_ConfigLayer+0xb2>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b09      	cmp	r3, #9
 800528c:	d127      	bne.n	80052de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800529a:	629a      	str	r2, [r3, #40]	; 0x28
 800529c:	e01f      	b.n	80052de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	43db      	mvns	r3, r3
 80052a8:	ea02 0103 	and.w	r1, r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b0a      	cmp	r3, #10
 80052c6:	d003      	beq.n	80052d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b09      	cmp	r3, #9
 80052ce:	d106      	bne.n	80052de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80052dc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	ff03000f 	.word	0xff03000f

08005300 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005300:	b480      	push	{r7}
 8005302:	b08b      	sub	sp, #44	; 0x2c
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	041a      	lsls	r2, r3, #16
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	431a      	orrs	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005338:	d174      	bne.n	8005424 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005340:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005348:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005350:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	431a      	orrs	r2, r3
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	4313      	orrs	r3, r2
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
 8005370:	e053      	b.n	800541a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d106      	bne.n	8005388 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4313      	orrs	r3, r2
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
 8005386:	e048      	b.n	800541a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d111      	bne.n	80053b4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	0cdb      	lsrs	r3, r3, #19
 8005394:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	0a9b      	lsrs	r3, r3, #10
 800539a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	08db      	lsrs	r3, r3, #3
 80053a0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	02db      	lsls	r3, r3, #11
 80053aa:	4313      	orrs	r3, r2
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
 80053b2:	e032      	b.n	800541a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d117      	bne.n	80053ec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	0fdb      	lsrs	r3, r3, #31
 80053c0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	0cdb      	lsrs	r3, r3, #19
 80053c6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	0adb      	lsrs	r3, r3, #11
 80053cc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	08db      	lsrs	r3, r3, #3
 80053d2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	431a      	orrs	r2, r3
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	03db      	lsls	r3, r3, #15
 80053e2:	4313      	orrs	r3, r2
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	e016      	b.n	800541a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	0f1b      	lsrs	r3, r3, #28
 80053f0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	0d1b      	lsrs	r3, r3, #20
 80053f6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	0b1b      	lsrs	r3, r3, #12
 80053fc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	011a      	lsls	r2, r3, #4
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	431a      	orrs	r2, r3
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	4313      	orrs	r3, r2
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005422:	e003      	b.n	800542c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	60da      	str	r2, [r3, #12]
}
 800542c:	bf00      	nop
 800542e:	372c      	adds	r7, #44	; 0x2c
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005438:	b480      	push	{r7}
 800543a:	b089      	sub	sp, #36	; 0x24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800544e:	2300      	movs	r3, #0
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	e177      	b.n	8005744 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005454:	2201      	movs	r2, #1
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4013      	ands	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	429a      	cmp	r2, r3
 800546e:	f040 8166 	bne.w	800573e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d00b      	beq.n	8005492 <HAL_GPIO_Init+0x5a>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d007      	beq.n	8005492 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005486:	2b11      	cmp	r3, #17
 8005488:	d003      	beq.n	8005492 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b12      	cmp	r3, #18
 8005490:	d130      	bne.n	80054f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	2203      	movs	r2, #3
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4013      	ands	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054c8:	2201      	movs	r2, #1
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4013      	ands	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 0201 	and.w	r2, r3, #1
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	2203      	movs	r2, #3
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4013      	ands	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d003      	beq.n	8005534 <HAL_GPIO_Init+0xfc>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b12      	cmp	r3, #18
 8005532:	d123      	bne.n	800557c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	08da      	lsrs	r2, r3, #3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3208      	adds	r2, #8
 800553c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	220f      	movs	r2, #15
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	43db      	mvns	r3, r3
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	4313      	orrs	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	08da      	lsrs	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3208      	adds	r2, #8
 8005576:	69b9      	ldr	r1, [r7, #24]
 8005578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2203      	movs	r2, #3
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4013      	ands	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 0203 	and.w	r2, r3, #3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 80c0 	beq.w	800573e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	4b65      	ldr	r3, [pc, #404]	; (8005758 <HAL_GPIO_Init+0x320>)
 80055c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c6:	4a64      	ldr	r2, [pc, #400]	; (8005758 <HAL_GPIO_Init+0x320>)
 80055c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055cc:	6453      	str	r3, [r2, #68]	; 0x44
 80055ce:	4b62      	ldr	r3, [pc, #392]	; (8005758 <HAL_GPIO_Init+0x320>)
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055da:	4a60      	ldr	r2, [pc, #384]	; (800575c <HAL_GPIO_Init+0x324>)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	089b      	lsrs	r3, r3, #2
 80055e0:	3302      	adds	r3, #2
 80055e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	220f      	movs	r2, #15
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	43db      	mvns	r3, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4013      	ands	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a57      	ldr	r2, [pc, #348]	; (8005760 <HAL_GPIO_Init+0x328>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d037      	beq.n	8005676 <HAL_GPIO_Init+0x23e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a56      	ldr	r2, [pc, #344]	; (8005764 <HAL_GPIO_Init+0x32c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_GPIO_Init+0x23a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a55      	ldr	r2, [pc, #340]	; (8005768 <HAL_GPIO_Init+0x330>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d02b      	beq.n	800566e <HAL_GPIO_Init+0x236>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a54      	ldr	r2, [pc, #336]	; (800576c <HAL_GPIO_Init+0x334>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d025      	beq.n	800566a <HAL_GPIO_Init+0x232>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a53      	ldr	r2, [pc, #332]	; (8005770 <HAL_GPIO_Init+0x338>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01f      	beq.n	8005666 <HAL_GPIO_Init+0x22e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a52      	ldr	r2, [pc, #328]	; (8005774 <HAL_GPIO_Init+0x33c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d019      	beq.n	8005662 <HAL_GPIO_Init+0x22a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a51      	ldr	r2, [pc, #324]	; (8005778 <HAL_GPIO_Init+0x340>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_GPIO_Init+0x226>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a50      	ldr	r2, [pc, #320]	; (800577c <HAL_GPIO_Init+0x344>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00d      	beq.n	800565a <HAL_GPIO_Init+0x222>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a4f      	ldr	r2, [pc, #316]	; (8005780 <HAL_GPIO_Init+0x348>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <HAL_GPIO_Init+0x21e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a4e      	ldr	r2, [pc, #312]	; (8005784 <HAL_GPIO_Init+0x34c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d101      	bne.n	8005652 <HAL_GPIO_Init+0x21a>
 800564e:	2309      	movs	r3, #9
 8005650:	e012      	b.n	8005678 <HAL_GPIO_Init+0x240>
 8005652:	230a      	movs	r3, #10
 8005654:	e010      	b.n	8005678 <HAL_GPIO_Init+0x240>
 8005656:	2308      	movs	r3, #8
 8005658:	e00e      	b.n	8005678 <HAL_GPIO_Init+0x240>
 800565a:	2307      	movs	r3, #7
 800565c:	e00c      	b.n	8005678 <HAL_GPIO_Init+0x240>
 800565e:	2306      	movs	r3, #6
 8005660:	e00a      	b.n	8005678 <HAL_GPIO_Init+0x240>
 8005662:	2305      	movs	r3, #5
 8005664:	e008      	b.n	8005678 <HAL_GPIO_Init+0x240>
 8005666:	2304      	movs	r3, #4
 8005668:	e006      	b.n	8005678 <HAL_GPIO_Init+0x240>
 800566a:	2303      	movs	r3, #3
 800566c:	e004      	b.n	8005678 <HAL_GPIO_Init+0x240>
 800566e:	2302      	movs	r3, #2
 8005670:	e002      	b.n	8005678 <HAL_GPIO_Init+0x240>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_GPIO_Init+0x240>
 8005676:	2300      	movs	r3, #0
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	f002 0203 	and.w	r2, r2, #3
 800567e:	0092      	lsls	r2, r2, #2
 8005680:	4093      	lsls	r3, r2
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005688:	4934      	ldr	r1, [pc, #208]	; (800575c <HAL_GPIO_Init+0x324>)
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	3302      	adds	r3, #2
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005696:	4b3c      	ldr	r3, [pc, #240]	; (8005788 <HAL_GPIO_Init+0x350>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	43db      	mvns	r3, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4013      	ands	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056ba:	4a33      	ldr	r2, [pc, #204]	; (8005788 <HAL_GPIO_Init+0x350>)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056c0:	4b31      	ldr	r3, [pc, #196]	; (8005788 <HAL_GPIO_Init+0x350>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056e4:	4a28      	ldr	r2, [pc, #160]	; (8005788 <HAL_GPIO_Init+0x350>)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ea:	4b27      	ldr	r3, [pc, #156]	; (8005788 <HAL_GPIO_Init+0x350>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	43db      	mvns	r3, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4013      	ands	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800570e:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <HAL_GPIO_Init+0x350>)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005714:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <HAL_GPIO_Init+0x350>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	43db      	mvns	r3, r3
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	4013      	ands	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005738:	4a13      	ldr	r2, [pc, #76]	; (8005788 <HAL_GPIO_Init+0x350>)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3301      	adds	r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	f67f ae84 	bls.w	8005454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800574c:	bf00      	nop
 800574e:	3724      	adds	r7, #36	; 0x24
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40023800 	.word	0x40023800
 800575c:	40013800 	.word	0x40013800
 8005760:	40020000 	.word	0x40020000
 8005764:	40020400 	.word	0x40020400
 8005768:	40020800 	.word	0x40020800
 800576c:	40020c00 	.word	0x40020c00
 8005770:	40021000 	.word	0x40021000
 8005774:	40021400 	.word	0x40021400
 8005778:	40021800 	.word	0x40021800
 800577c:	40021c00 	.word	0x40021c00
 8005780:	40022000 	.word	0x40022000
 8005784:	40022400 	.word	0x40022400
 8005788:	40013c00 	.word	0x40013c00

0800578c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e0d9      	b.n	800595c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057a8:	2201      	movs	r2, #1
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4013      	ands	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	429a      	cmp	r2, r3
 80057c0:	f040 80c9 	bne.w	8005956 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80057c4:	4a6a      	ldr	r2, [pc, #424]	; (8005970 <HAL_GPIO_DeInit+0x1e4>)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	3302      	adds	r3, #2
 80057cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	220f      	movs	r2, #15
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a62      	ldr	r2, [pc, #392]	; (8005974 <HAL_GPIO_DeInit+0x1e8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d037      	beq.n	800585e <HAL_GPIO_DeInit+0xd2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a61      	ldr	r2, [pc, #388]	; (8005978 <HAL_GPIO_DeInit+0x1ec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d031      	beq.n	800585a <HAL_GPIO_DeInit+0xce>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a60      	ldr	r2, [pc, #384]	; (800597c <HAL_GPIO_DeInit+0x1f0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d02b      	beq.n	8005856 <HAL_GPIO_DeInit+0xca>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a5f      	ldr	r2, [pc, #380]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d025      	beq.n	8005852 <HAL_GPIO_DeInit+0xc6>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a5e      	ldr	r2, [pc, #376]	; (8005984 <HAL_GPIO_DeInit+0x1f8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01f      	beq.n	800584e <HAL_GPIO_DeInit+0xc2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a5d      	ldr	r2, [pc, #372]	; (8005988 <HAL_GPIO_DeInit+0x1fc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d019      	beq.n	800584a <HAL_GPIO_DeInit+0xbe>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a5c      	ldr	r2, [pc, #368]	; (800598c <HAL_GPIO_DeInit+0x200>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <HAL_GPIO_DeInit+0xba>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a5b      	ldr	r2, [pc, #364]	; (8005990 <HAL_GPIO_DeInit+0x204>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00d      	beq.n	8005842 <HAL_GPIO_DeInit+0xb6>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a5a      	ldr	r2, [pc, #360]	; (8005994 <HAL_GPIO_DeInit+0x208>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <HAL_GPIO_DeInit+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a59      	ldr	r2, [pc, #356]	; (8005998 <HAL_GPIO_DeInit+0x20c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <HAL_GPIO_DeInit+0xae>
 8005836:	2309      	movs	r3, #9
 8005838:	e012      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 800583a:	230a      	movs	r3, #10
 800583c:	e010      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 800583e:	2308      	movs	r3, #8
 8005840:	e00e      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 8005842:	2307      	movs	r3, #7
 8005844:	e00c      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 8005846:	2306      	movs	r3, #6
 8005848:	e00a      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 800584a:	2305      	movs	r3, #5
 800584c:	e008      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 800584e:	2304      	movs	r3, #4
 8005850:	e006      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 8005852:	2303      	movs	r3, #3
 8005854:	e004      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 8005856:	2302      	movs	r3, #2
 8005858:	e002      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_GPIO_DeInit+0xd4>
 800585e:	2300      	movs	r3, #0
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	f002 0203 	and.w	r2, r2, #3
 8005866:	0092      	lsls	r2, r2, #2
 8005868:	4093      	lsls	r3, r2
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d132      	bne.n	80058d6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005870:	4b4a      	ldr	r3, [pc, #296]	; (800599c <HAL_GPIO_DeInit+0x210>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	43db      	mvns	r3, r3
 8005878:	4948      	ldr	r1, [pc, #288]	; (800599c <HAL_GPIO_DeInit+0x210>)
 800587a:	4013      	ands	r3, r2
 800587c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800587e:	4b47      	ldr	r3, [pc, #284]	; (800599c <HAL_GPIO_DeInit+0x210>)
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	43db      	mvns	r3, r3
 8005886:	4945      	ldr	r1, [pc, #276]	; (800599c <HAL_GPIO_DeInit+0x210>)
 8005888:	4013      	ands	r3, r2
 800588a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800588c:	4b43      	ldr	r3, [pc, #268]	; (800599c <HAL_GPIO_DeInit+0x210>)
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	43db      	mvns	r3, r3
 8005894:	4941      	ldr	r1, [pc, #260]	; (800599c <HAL_GPIO_DeInit+0x210>)
 8005896:	4013      	ands	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800589a:	4b40      	ldr	r3, [pc, #256]	; (800599c <HAL_GPIO_DeInit+0x210>)
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	493e      	ldr	r1, [pc, #248]	; (800599c <HAL_GPIO_DeInit+0x210>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	220f      	movs	r2, #15
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80058b8:	4a2d      	ldr	r2, [pc, #180]	; (8005970 <HAL_GPIO_DeInit+0x1e4>)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	089b      	lsrs	r3, r3, #2
 80058be:	3302      	adds	r3, #2
 80058c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	43da      	mvns	r2, r3
 80058c8:	4829      	ldr	r0, [pc, #164]	; (8005970 <HAL_GPIO_DeInit+0x1e4>)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	400a      	ands	r2, r1
 80058d0:	3302      	adds	r3, #2
 80058d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	2103      	movs	r1, #3
 80058e0:	fa01 f303 	lsl.w	r3, r1, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	401a      	ands	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	08da      	lsrs	r2, r3, #3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3208      	adds	r2, #8
 80058f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	220f      	movs	r2, #15
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	08d2      	lsrs	r2, r2, #3
 800590c:	4019      	ands	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3208      	adds	r2, #8
 8005912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	2103      	movs	r1, #3
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	43db      	mvns	r3, r3
 8005926:	401a      	ands	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	2101      	movs	r1, #1
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	fa01 f303 	lsl.w	r3, r1, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	401a      	ands	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	2103      	movs	r1, #3
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	401a      	ands	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	3301      	adds	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b0f      	cmp	r3, #15
 8005960:	f67f af22 	bls.w	80057a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40013800 	.word	0x40013800
 8005974:	40020000 	.word	0x40020000
 8005978:	40020400 	.word	0x40020400
 800597c:	40020800 	.word	0x40020800
 8005980:	40020c00 	.word	0x40020c00
 8005984:	40021000 	.word	0x40021000
 8005988:	40021400 	.word	0x40021400
 800598c:	40021800 	.word	0x40021800
 8005990:	40021c00 	.word	0x40021c00
 8005994:	40022000 	.word	0x40022000
 8005998:	40022400 	.word	0x40022400
 800599c:	40013c00 	.word	0x40013c00

080059a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
 80059ac:	4613      	mov	r3, r2
 80059ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059b0:	787b      	ldrb	r3, [r7, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059b6:	887a      	ldrh	r2, [r7, #2]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059bc:	e003      	b.n	80059c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	041a      	lsls	r2, r3, #16
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	619a      	str	r2, [r3, #24]
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f005 fbe9 	bl	800b1c0 <USB_GetMode>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	f040 80ef 	bne.w	8005bd4 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f005 fbcd 	bl	800b19a <USB_ReadInterrupts>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80e5 	beq.w	8005bd2 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f005 fbc4 	bl	800b19a <USB_ReadInterrupts>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a1c:	d104      	bne.n	8005a28 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f005 fbb4 	bl	800b19a <USB_ReadInterrupts>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a3c:	d104      	bne.n	8005a48 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f005 fba4 	bl	800b19a <USB_ReadInterrupts>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a5c:	d104      	bne.n	8005a68 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005a66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f005 fb94 	bl	800b19a <USB_ReadInterrupts>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d103      	bne.n	8005a84 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2202      	movs	r2, #2
 8005a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f005 fb86 	bl	800b19a <USB_ReadInterrupts>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a98:	d115      	bne.n	8005ac6 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005aa2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d108      	bne.n	8005ac6 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f006 fea9 	bl	800c80c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f005 fb8b 	bl	800b1dc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f005 fb65 	bl	800b19a <USB_ReadInterrupts>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ada:	d102      	bne.n	8005ae2 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 f8ef 	bl	8006cc0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f005 fb57 	bl	800b19a <USB_ReadInterrupts>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d106      	bne.n	8005b04 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f006 fe6c 	bl	800c7d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2208      	movs	r2, #8
 8005b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f005 fb46 	bl	800b19a <USB_ReadInterrupts>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b18:	d138      	bne.n	8005b8c <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f005 fb96 	bl	800b250 <USB_HC_ReadInterrupt>
 8005b24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e025      	b.n	8005b78 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d018      	beq.n	8005b72 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b56:	d106      	bne.n	8005b66 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f858 	bl	8005c14 <HCD_HC_IN_IRQHandler>
 8005b64:	e005      	b.n	8005b72 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fc86 	bl	800647e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	3301      	adds	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d3d4      	bcc.n	8005b2c <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f005 fb02 	bl	800b19a <USB_ReadInterrupts>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d101      	bne.n	8005ba4 <HAL_HCD_IRQHandler+0x1d2>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_HCD_IRQHandler+0x1d4>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d014      	beq.n	8005bd4 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0210 	bic.w	r2, r2, #16
 8005bb8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 ffd4 	bl	8006b68 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0210 	orr.w	r2, r2, #16
 8005bce:	619a      	str	r2, [r3, #24]
 8005bd0:	e000      	b.n	8005bd4 <HAL_HCD_IRQHandler+0x202>
      return;
 8005bd2:	bf00      	nop
    }
  }
}
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_HCD_Stop+0x16>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e00d      	b.n	8005c0c <HAL_HCD_Stop+0x32>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f005 fc37 	bl	800b470 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d119      	bne.n	8005c78 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	461a      	mov	r2, r3
 8005c52:	2304      	movs	r3, #4
 8005c54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c70:	f043 0302 	orr.w	r3, r3, #2
 8005c74:	60d3      	str	r3, [r2, #12]
 8005c76:	e0ce      	b.n	8005e16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8e:	d12c      	bne.n	8005cea <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	440b      	add	r3, r1
 8005cb2:	335d      	adds	r3, #93	; 0x5d
 8005cb4:	2207      	movs	r2, #7
 8005cb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd2:	f043 0302 	orr.w	r3, r3, #2
 8005cd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f005 fac5 	bl	800b272 <USB_HC_Halt>
 8005ce8:	e095      	b.n	8005e16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d109      	bne.n	8005d14 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2320      	movs	r3, #32
 8005d10:	6093      	str	r3, [r2, #8]
 8005d12:	e080      	b.n	8005e16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d134      	bne.n	8005d94 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d44:	f043 0302 	orr.w	r3, r3, #2
 8005d48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	440b      	add	r3, r1
 8005d58:	335d      	adds	r3, #93	; 0x5d
 8005d5a:	2205      	movs	r2, #5
 8005d5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2308      	movs	r3, #8
 8005d80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f005 fa70 	bl	800b272 <USB_HC_Halt>
 8005d92:	e040      	b.n	8005e16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005daa:	d134      	bne.n	8005e16 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc6:	f043 0302 	orr.w	r3, r3, #2
 8005dca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f005 fa4b 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	461a      	mov	r2, r3
 8005dea:	2310      	movs	r3, #16
 8005dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	335d      	adds	r3, #93	; 0x5d
 8005dfe:	2208      	movs	r2, #8
 8005e00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e14:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2c:	d122      	bne.n	8005e74 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e48:	f043 0302 	orr.w	r3, r3, #2
 8005e4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f005 fa0a 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e70:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005e72:	e300      	b.n	8006476 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	f040 80fd 	bne.w	8006086 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01b      	beq.n	8005ecc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3348      	adds	r3, #72	; 0x48
 8005ea4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	0159      	lsls	r1, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	440b      	add	r3, r1
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005eb8:	1ad1      	subs	r1, r2, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4403      	add	r3, r0
 8005ec8:	334c      	adds	r3, #76	; 0x4c
 8005eca:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	440b      	add	r3, r1
 8005eda:	335d      	adds	r3, #93	; 0x5d
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	440b      	add	r3, r1
 8005eee:	3358      	adds	r3, #88	; 0x58
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f00:	461a      	mov	r2, r3
 8005f02:	2301      	movs	r3, #1
 8005f04:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	440b      	add	r3, r1
 8005f14:	333f      	adds	r3, #63	; 0x3f
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	440b      	add	r3, r1
 8005f2a:	333f      	adds	r3, #63	; 0x3f
 8005f2c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d121      	bne.n	8005f76 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f4c:	f043 0302 	orr.w	r3, r3, #2
 8005f50:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f005 f988 	bl	800b272 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	461a      	mov	r2, r3
 8005f70:	2310      	movs	r3, #16
 8005f72:	6093      	str	r3, [r2, #8]
 8005f74:	e070      	b.n	8006058 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	440b      	add	r3, r1
 8005f84:	333f      	adds	r3, #63	; 0x3f
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d12a      	bne.n	8005fe2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005faa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	440b      	add	r3, r1
 8005fba:	335c      	adds	r3, #92	; 0x5c
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	b2d8      	uxtb	r0, r3
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	440b      	add	r3, r1
 8005fd2:	335c      	adds	r3, #92	; 0x5c
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4601      	mov	r1, r0
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f006 fc24 	bl	800c828 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005fe0:	e03a      	b.n	8006058 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	440b      	add	r3, r1
 8005ff0:	333f      	adds	r3, #63	; 0x3f
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d12f      	bne.n	8006058 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	440b      	add	r3, r1
 8006006:	335c      	adds	r3, #92	; 0x5c
 8006008:	2201      	movs	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	3350      	adds	r3, #80	; 0x50
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f083 0301 	eor.w	r3, r3, #1
 8006022:	b2d8      	uxtb	r0, r3
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	440b      	add	r3, r1
 8006032:	3350      	adds	r3, #80	; 0x50
 8006034:	4602      	mov	r2, r0
 8006036:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	b2d8      	uxtb	r0, r3
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	440b      	add	r3, r1
 800604a:	335c      	adds	r3, #92	; 0x5c
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	4601      	mov	r1, r0
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f006 fbe8 	bl	800c828 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	440b      	add	r3, r1
 8006066:	3350      	adds	r3, #80	; 0x50
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	f083 0301 	eor.w	r3, r3, #1
 800606e:	b2d8      	uxtb	r0, r3
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	3350      	adds	r3, #80	; 0x50
 8006080:	4602      	mov	r2, r0
 8006082:	701a      	strb	r2, [r3, #0]
}
 8006084:	e1f7      	b.n	8006476 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4413      	add	r3, r2
 800608e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b02      	cmp	r3, #2
 800609a:	f040 811a 	bne.w	80062d2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b8:	f023 0302 	bic.w	r3, r3, #2
 80060bc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	440b      	add	r3, r1
 80060cc:	335d      	adds	r3, #93	; 0x5d
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d10a      	bne.n	80060ea <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	440b      	add	r3, r1
 80060e2:	335c      	adds	r3, #92	; 0x5c
 80060e4:	2201      	movs	r2, #1
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e0d9      	b.n	800629e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	440b      	add	r3, r1
 80060f8:	335d      	adds	r3, #93	; 0x5d
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d10a      	bne.n	8006116 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	440b      	add	r3, r1
 800610e:	335c      	adds	r3, #92	; 0x5c
 8006110:	2205      	movs	r2, #5
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	e0c3      	b.n	800629e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	440b      	add	r3, r1
 8006124:	335d      	adds	r3, #93	; 0x5d
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b06      	cmp	r3, #6
 800612a:	d00a      	beq.n	8006142 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	440b      	add	r3, r1
 800613a:	335d      	adds	r3, #93	; 0x5d
 800613c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800613e:	2b08      	cmp	r3, #8
 8006140:	d156      	bne.n	80061f0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	440b      	add	r3, r1
 8006150:	3358      	adds	r3, #88	; 0x58
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	1c59      	adds	r1, r3, #1
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4403      	add	r3, r0
 8006164:	3358      	adds	r3, #88	; 0x58
 8006166:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	440b      	add	r3, r1
 8006176:	3358      	adds	r3, #88	; 0x58
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d914      	bls.n	80061a8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	440b      	add	r3, r1
 800618c:	3358      	adds	r3, #88	; 0x58
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	440b      	add	r3, r1
 80061a0:	335c      	adds	r3, #92	; 0x5c
 80061a2:	2204      	movs	r2, #4
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	e009      	b.n	80061bc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	440b      	add	r3, r1
 80061b6:	335c      	adds	r3, #92	; 0x5c
 80061b8:	2202      	movs	r2, #2
 80061ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e8:	461a      	mov	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e056      	b.n	800629e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	440b      	add	r3, r1
 80061fe:	335d      	adds	r3, #93	; 0x5d
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d123      	bne.n	800624e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	440b      	add	r3, r1
 8006214:	335c      	adds	r3, #92	; 0x5c
 8006216:	2202      	movs	r2, #2
 8006218:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006230:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006238:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4413      	add	r3, r2
 8006242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006246:	461a      	mov	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	e027      	b.n	800629e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	440b      	add	r3, r1
 800625c:	335d      	adds	r3, #93	; 0x5d
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b07      	cmp	r3, #7
 8006262:	d11c      	bne.n	800629e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	440b      	add	r3, r1
 8006272:	3358      	adds	r3, #88	; 0x58
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4403      	add	r3, r0
 8006286:	3358      	adds	r3, #88	; 0x58
 8006288:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	440b      	add	r3, r1
 8006298:	335c      	adds	r3, #92	; 0x5c
 800629a:	2204      	movs	r2, #4
 800629c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	461a      	mov	r2, r3
 80062ac:	2302      	movs	r3, #2
 80062ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	b2d8      	uxtb	r0, r3
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	440b      	add	r3, r1
 80062c2:	335c      	adds	r3, #92	; 0x5c
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	4601      	mov	r1, r0
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f006 faac 	bl	800c828 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80062d0:	e0d1      	b.n	8006476 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d13e      	bne.n	8006366 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006302:	f043 0302 	orr.w	r3, r3, #2
 8006306:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	440b      	add	r3, r1
 8006316:	3358      	adds	r3, #88	; 0x58
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	1c59      	adds	r1, r3, #1
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	4403      	add	r3, r0
 800632a:	3358      	adds	r3, #88	; 0x58
 800632c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	440b      	add	r3, r1
 800633c:	335d      	adds	r3, #93	; 0x5d
 800633e:	2206      	movs	r2, #6
 8006340:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	4611      	mov	r1, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f004 ff90 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	461a      	mov	r2, r3
 8006360:	2380      	movs	r3, #128	; 0x80
 8006362:	6093      	str	r3, [r2, #8]
}
 8006364:	e087      	b.n	8006476 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4413      	add	r3, r2
 800636e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b10      	cmp	r3, #16
 800637a:	d17c      	bne.n	8006476 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	333f      	adds	r3, #63	; 0x3f
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d122      	bne.n	80063d8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	440b      	add	r3, r1
 80063a0:	3358      	adds	r3, #88	; 0x58
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c0:	f043 0302 	orr.w	r3, r3, #2
 80063c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	4611      	mov	r1, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f004 ff4e 	bl	800b272 <USB_HC_Halt>
 80063d6:	e045      	b.n	8006464 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	440b      	add	r3, r1
 80063e6:	333f      	adds	r3, #63	; 0x3f
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	440b      	add	r3, r1
 80063fc:	333f      	adds	r3, #63	; 0x3f
 80063fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006400:	2b02      	cmp	r3, #2
 8006402:	d12f      	bne.n	8006464 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	440b      	add	r3, r1
 8006412:	3358      	adds	r3, #88	; 0x58
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d121      	bne.n	8006464 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	440b      	add	r3, r1
 800642e:	335d      	adds	r3, #93	; 0x5d
 8006430:	2203      	movs	r2, #3
 8006432:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	440a      	add	r2, r1
 800644a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800644e:	f043 0302 	orr.w	r3, r3, #2
 8006452:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f004 ff07 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	461a      	mov	r2, r3
 8006472:	2310      	movs	r3, #16
 8006474:	6093      	str	r3, [r2, #8]
}
 8006476:	bf00      	nop
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d119      	bne.n	80064e2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	461a      	mov	r2, r3
 80064bc:	2304      	movs	r3, #4
 80064be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064da:	f043 0302 	orr.w	r3, r3, #2
 80064de:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80064e0:	e33e      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d141      	bne.n	800657c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006504:	461a      	mov	r2, r3
 8006506:	2320      	movs	r3, #32
 8006508:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	440b      	add	r3, r1
 8006518:	333d      	adds	r3, #61	; 0x3d
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	f040 831f 	bne.w	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	440b      	add	r3, r1
 8006530:	333d      	adds	r3, #61	; 0x3d
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	440b      	add	r3, r1
 8006544:	335c      	adds	r3, #92	; 0x5c
 8006546:	2202      	movs	r2, #2
 8006548:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4413      	add	r3, r2
 8006552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	440a      	add	r2, r1
 8006560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006564:	f043 0302 	orr.w	r3, r3, #2
 8006568:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f004 fe7c 	bl	800b272 <USB_HC_Halt>
}
 800657a:	e2f1      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d13f      	bne.n	8006612 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	440b      	add	r3, r1
 80065a0:	335d      	adds	r3, #93	; 0x5d
 80065a2:	2204      	movs	r2, #4
 80065a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	440b      	add	r3, r1
 80065b4:	333d      	adds	r3, #61	; 0x3d
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	440b      	add	r3, r1
 80065c8:	3358      	adds	r3, #88	; 0x58
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e8:	f043 0302 	orr.w	r3, r3, #2
 80065ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f004 fe3a 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4413      	add	r3, r2
 8006606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660a:	461a      	mov	r2, r3
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	6093      	str	r3, [r2, #8]
}
 8006610:	e2a6      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4413      	add	r3, r2
 800661a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006628:	d122      	bne.n	8006670 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	440a      	add	r2, r1
 8006640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006644:	f043 0302 	orr.w	r3, r3, #2
 8006648:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f004 fe0c 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	461a      	mov	r2, r3
 8006668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800666c:	6093      	str	r3, [r2, #8]
}
 800666e:	e277      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	d135      	bne.n	80066f2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	440b      	add	r3, r1
 8006694:	3358      	adds	r3, #88	; 0x58
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	4611      	mov	r1, r2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f004 fdd4 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d6:	461a      	mov	r2, r3
 80066d8:	2301      	movs	r3, #1
 80066da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	440b      	add	r3, r1
 80066ea:	335d      	adds	r3, #93	; 0x5d
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
}
 80066f0:	e236      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d12b      	bne.n	8006760 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4413      	add	r3, r2
 8006710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006714:	461a      	mov	r2, r3
 8006716:	2308      	movs	r3, #8
 8006718:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006734:	f043 0302 	orr.w	r3, r3, #2
 8006738:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f004 fd94 	bl	800b272 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	335d      	adds	r3, #93	; 0x5d
 800675a:	2205      	movs	r2, #5
 800675c:	701a      	strb	r2, [r3, #0]
}
 800675e:	e1ff      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b10      	cmp	r3, #16
 8006774:	d155      	bne.n	8006822 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	440b      	add	r3, r1
 8006784:	3358      	adds	r3, #88	; 0x58
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	440b      	add	r3, r1
 8006798:	335d      	adds	r3, #93	; 0x5d
 800679a:	2203      	movs	r2, #3
 800679c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	440b      	add	r3, r1
 80067ac:	333d      	adds	r3, #61	; 0x3d
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d114      	bne.n	80067de <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	440b      	add	r3, r1
 80067c2:	333c      	adds	r3, #60	; 0x3c
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	440b      	add	r3, r1
 80067d8:	333d      	adds	r3, #61	; 0x3d
 80067da:	2201      	movs	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	4611      	mov	r1, r2
 8006808:	4618      	mov	r0, r3
 800680a:	f004 fd32 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681a:	461a      	mov	r2, r3
 800681c:	2310      	movs	r3, #16
 800681e:	6093      	str	r3, [r2, #8]
}
 8006820:	e19e      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006834:	2b80      	cmp	r3, #128	; 0x80
 8006836:	d12b      	bne.n	8006890 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4413      	add	r3, r2
 8006840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	440a      	add	r2, r1
 800684e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006852:	f043 0302 	orr.w	r3, r3, #2
 8006856:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f004 fd05 	bl	800b272 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	440b      	add	r3, r1
 8006876:	335d      	adds	r3, #93	; 0x5d
 8006878:	2206      	movs	r2, #6
 800687a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006888:	461a      	mov	r2, r3
 800688a:	2380      	movs	r3, #128	; 0x80
 800688c:	6093      	str	r3, [r2, #8]
}
 800688e:	e167      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4413      	add	r3, r2
 8006898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a6:	d135      	bne.n	8006914 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c2:	f043 0302 	orr.w	r3, r3, #2
 80068c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f004 fccd 	bl	800b272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e4:	461a      	mov	r2, r3
 80068e6:	2310      	movs	r3, #16
 80068e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	461a      	mov	r2, r3
 80068f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	440b      	add	r3, r1
 800690c:	335d      	adds	r3, #93	; 0x5d
 800690e:	2208      	movs	r2, #8
 8006910:	701a      	strb	r2, [r3, #0]
}
 8006912:	e125      	b.n	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4413      	add	r3, r2
 800691c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b02      	cmp	r3, #2
 8006928:	f040 811a 	bne.w	8006b60 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	440a      	add	r2, r1
 8006942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006946:	f023 0302 	bic.w	r3, r3, #2
 800694a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	440b      	add	r3, r1
 800695a:	335d      	adds	r3, #93	; 0x5d
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d137      	bne.n	80069d2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	440b      	add	r3, r1
 8006970:	335c      	adds	r3, #92	; 0x5c
 8006972:	2201      	movs	r2, #1
 8006974:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	440b      	add	r3, r1
 8006984:	333f      	adds	r3, #63	; 0x3f
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d00b      	beq.n	80069a4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	440b      	add	r3, r1
 800699a:	333f      	adds	r3, #63	; 0x3f
 800699c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800699e:	2b03      	cmp	r3, #3
 80069a0:	f040 80c5 	bne.w	8006b2e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	440b      	add	r3, r1
 80069b2:	3351      	adds	r3, #81	; 0x51
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	f083 0301 	eor.w	r3, r3, #1
 80069ba:	b2d8      	uxtb	r0, r3
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	440b      	add	r3, r1
 80069ca:	3351      	adds	r3, #81	; 0x51
 80069cc:	4602      	mov	r2, r0
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e0ad      	b.n	8006b2e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	440b      	add	r3, r1
 80069e0:	335d      	adds	r3, #93	; 0x5d
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d10a      	bne.n	80069fe <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	440b      	add	r3, r1
 80069f6:	335c      	adds	r3, #92	; 0x5c
 80069f8:	2202      	movs	r2, #2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	e097      	b.n	8006b2e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	440b      	add	r3, r1
 8006a0c:	335d      	adds	r3, #93	; 0x5d
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d10a      	bne.n	8006a2a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	440b      	add	r3, r1
 8006a22:	335c      	adds	r3, #92	; 0x5c
 8006a24:	2202      	movs	r2, #2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	e081      	b.n	8006b2e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	440b      	add	r3, r1
 8006a38:	335d      	adds	r3, #93	; 0x5d
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b05      	cmp	r3, #5
 8006a3e:	d10a      	bne.n	8006a56 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	335c      	adds	r3, #92	; 0x5c
 8006a50:	2205      	movs	r2, #5
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	e06b      	b.n	8006b2e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	440b      	add	r3, r1
 8006a64:	335d      	adds	r3, #93	; 0x5d
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b06      	cmp	r3, #6
 8006a6a:	d00a      	beq.n	8006a82 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	440b      	add	r3, r1
 8006a7a:	335d      	adds	r3, #93	; 0x5d
 8006a7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d155      	bne.n	8006b2e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	440b      	add	r3, r1
 8006a90:	3358      	adds	r3, #88	; 0x58
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	1c59      	adds	r1, r3, #1
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	4403      	add	r3, r0
 8006aa4:	3358      	adds	r3, #88	; 0x58
 8006aa6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	440b      	add	r3, r1
 8006ab6:	3358      	adds	r3, #88	; 0x58
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d914      	bls.n	8006ae8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	440b      	add	r3, r1
 8006acc:	3358      	adds	r3, #88	; 0x58
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	440b      	add	r3, r1
 8006ae0:	335c      	adds	r3, #92	; 0x5c
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e009      	b.n	8006afc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	440b      	add	r3, r1
 8006af6:	335c      	adds	r3, #92	; 0x5c
 8006af8:	2202      	movs	r2, #2
 8006afa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b12:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b1a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b28:	461a      	mov	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	b2d8      	uxtb	r0, r3
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	440b      	add	r3, r1
 8006b52:	335c      	adds	r3, #92	; 0x5c
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	4601      	mov	r1, r0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f005 fe64 	bl	800c828 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006b60:	bf00      	nop
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	; 0x28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	0c5b      	lsrs	r3, r3, #17
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b9c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d003      	beq.n	8006bac <HCD_RXQLVL_IRQHandler+0x44>
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	f000 8082 	beq.w	8006cae <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006baa:	e083      	b.n	8006cb4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d07f      	beq.n	8006cb2 <HCD_RXQLVL_IRQHandler+0x14a>
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3344      	adds	r3, #68	; 0x44
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d074      	beq.n	8006cb2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	440b      	add	r3, r1
 8006bda:	3344      	adds	r3, #68	; 0x44
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	b292      	uxth	r2, r2
 8006be2:	4619      	mov	r1, r3
 8006be4:	f004 fab0 	bl	800b148 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	440b      	add	r3, r1
 8006bf6:	3344      	adds	r3, #68	; 0x44
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	18d1      	adds	r1, r2, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4403      	add	r3, r0
 8006c0c:	3344      	adds	r3, #68	; 0x44
 8006c0e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	440b      	add	r3, r1
 8006c1e:	334c      	adds	r3, #76	; 0x4c
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	18d1      	adds	r1, r2, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	4403      	add	r3, r0
 8006c34:	334c      	adds	r3, #76	; 0x4c
 8006c36:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <HCD_RXQLVL_IRQHandler+0x154>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d031      	beq.n	8006cb2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c64:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c6c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	440b      	add	r3, r1
 8006c8e:	3350      	adds	r3, #80	; 0x50
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	f083 0301 	eor.w	r3, r3, #1
 8006c96:	b2d8      	uxtb	r0, r3
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3350      	adds	r3, #80	; 0x50
 8006ca8:	4602      	mov	r2, r0
 8006caa:	701a      	strb	r2, [r3, #0]
      break;
 8006cac:	e001      	b.n	8006cb2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006cb2:	bf00      	nop
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	3728      	adds	r7, #40	; 0x28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	1ff80000 	.word	0x1ff80000

08006cc0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d10b      	bne.n	8006d10 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d102      	bne.n	8006d08 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f005 fd74 	bl	800c7f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f043 0302 	orr.w	r3, r3, #2
 8006d0e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d132      	bne.n	8006d80 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f043 0308 	orr.w	r3, r3, #8
 8006d20:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d126      	bne.n	8006d7a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d113      	bne.n	8006d5c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d3e:	d106      	bne.n	8006d4e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2102      	movs	r1, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f004 fa48 	bl	800b1dc <USB_InitFSLSPClkSel>
 8006d4c:	e011      	b.n	8006d72 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2101      	movs	r1, #1
 8006d54:	4618      	mov	r0, r3
 8006d56:	f004 fa41 	bl	800b1dc <USB_InitFSLSPClkSel>
 8006d5a:	e00a      	b.n	8006d72 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d106      	bne.n	8006d72 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d70:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f005 fd6a 	bl	800c84c <HAL_HCD_PortEnabled_Callback>
 8006d78:	e002      	b.n	8006d80 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f005 fd74 	bl	800c868 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d103      	bne.n	8006d92 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f043 0320 	orr.w	r3, r3, #32
 8006d90:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6013      	str	r3, [r2, #0]
}
 8006d9e:	bf00      	nop
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e11f      	b.n	8006ffa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fa f88a 	bl	8000ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2224      	movs	r2, #36	; 0x24
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0201 	bic.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e0c:	f002 f804 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 8006e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	4a7b      	ldr	r2, [pc, #492]	; (8007004 <HAL_I2C_Init+0x25c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d807      	bhi.n	8006e2c <HAL_I2C_Init+0x84>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a7a      	ldr	r2, [pc, #488]	; (8007008 <HAL_I2C_Init+0x260>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	bf94      	ite	ls
 8006e24:	2301      	movls	r3, #1
 8006e26:	2300      	movhi	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	e006      	b.n	8006e3a <HAL_I2C_Init+0x92>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4a77      	ldr	r2, [pc, #476]	; (800700c <HAL_I2C_Init+0x264>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	bf94      	ite	ls
 8006e34:	2301      	movls	r3, #1
 8006e36:	2300      	movhi	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e0db      	b.n	8006ffa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4a72      	ldr	r2, [pc, #456]	; (8007010 <HAL_I2C_Init+0x268>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	0c9b      	lsrs	r3, r3, #18
 8006e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	4a64      	ldr	r2, [pc, #400]	; (8007004 <HAL_I2C_Init+0x25c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d802      	bhi.n	8006e7c <HAL_I2C_Init+0xd4>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	e009      	b.n	8006e90 <HAL_I2C_Init+0xe8>
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	4a63      	ldr	r2, [pc, #396]	; (8007014 <HAL_I2C_Init+0x26c>)
 8006e88:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8c:	099b      	lsrs	r3, r3, #6
 8006e8e:	3301      	adds	r3, #1
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6812      	ldr	r2, [r2, #0]
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ea2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	4956      	ldr	r1, [pc, #344]	; (8007004 <HAL_I2C_Init+0x25c>)
 8006eac:	428b      	cmp	r3, r1
 8006eae:	d80d      	bhi.n	8006ecc <HAL_I2C_Init+0x124>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1e59      	subs	r1, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	bf38      	it	cc
 8006ec8:	2304      	movcc	r3, #4
 8006eca:	e04f      	b.n	8006f6c <HAL_I2C_Init+0x1c4>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d111      	bne.n	8006ef8 <HAL_I2C_Init+0x150>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1e58      	subs	r0, r3, #1
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6859      	ldr	r1, [r3, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	440b      	add	r3, r1
 8006ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	e012      	b.n	8006f1e <HAL_I2C_Init+0x176>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	1e58      	subs	r0, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6859      	ldr	r1, [r3, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	0099      	lsls	r1, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f0e:	3301      	adds	r3, #1
 8006f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <HAL_I2C_Init+0x17e>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e022      	b.n	8006f6c <HAL_I2C_Init+0x1c4>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10e      	bne.n	8006f4c <HAL_I2C_Init+0x1a4>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1e58      	subs	r0, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6859      	ldr	r1, [r3, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	440b      	add	r3, r1
 8006f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f40:	3301      	adds	r3, #1
 8006f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4a:	e00f      	b.n	8006f6c <HAL_I2C_Init+0x1c4>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	1e58      	subs	r0, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6859      	ldr	r1, [r3, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	0099      	lsls	r1, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f62:	3301      	adds	r3, #1
 8006f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	6809      	ldr	r1, [r1, #0]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6911      	ldr	r1, [r2, #16]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68d2      	ldr	r2, [r2, #12]
 8006fa6:	4311      	orrs	r1, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	430b      	orrs	r3, r1
 8006fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	000186a0 	.word	0x000186a0
 8007008:	001e847f 	.word	0x001e847f
 800700c:	003d08ff 	.word	0x003d08ff
 8007010:	431bde83 	.word	0x431bde83
 8007014:	10624dd3 	.word	0x10624dd3

08007018 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e021      	b.n	800706e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2224      	movs	r2, #36	; 0x24
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7f9 ffba 	bl	8000fbc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	4608      	mov	r0, r1
 8007082:	4611      	mov	r1, r2
 8007084:	461a      	mov	r2, r3
 8007086:	4603      	mov	r3, r0
 8007088:	817b      	strh	r3, [r7, #10]
 800708a:	460b      	mov	r3, r1
 800708c:	813b      	strh	r3, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007092:	f7fd fb4d 	bl	8004730 <HAL_GetTick>
 8007096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	f040 80d9 	bne.w	8007258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	2319      	movs	r3, #25
 80070ac:	2201      	movs	r2, #1
 80070ae:	496d      	ldr	r1, [pc, #436]	; (8007264 <HAL_I2C_Mem_Write+0x1ec>)
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 fc8d 	bl	80079d0 <I2C_WaitOnFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
 80070be:	e0cc      	b.n	800725a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_I2C_Mem_Write+0x56>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e0c5      	b.n	800725a <HAL_I2C_Mem_Write+0x1e2>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d007      	beq.n	80070f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2221      	movs	r2, #33	; 0x21
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2240      	movs	r2, #64	; 0x40
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a3a      	ldr	r2, [r7, #32]
 800711e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4a4d      	ldr	r2, [pc, #308]	; (8007268 <HAL_I2C_Mem_Write+0x1f0>)
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007136:	88f8      	ldrh	r0, [r7, #6]
 8007138:	893a      	ldrh	r2, [r7, #8]
 800713a:	8979      	ldrh	r1, [r7, #10]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	4603      	mov	r3, r0
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fac4 	bl	80076d4 <I2C_RequestMemoryWrite>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d052      	beq.n	80071f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e081      	b.n	800725a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fd0e 	bl	8007b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00d      	beq.n	8007182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b04      	cmp	r3, #4
 800716c:	d107      	bne.n	800717e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e06b      	b.n	800725a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	781a      	ldrb	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d11b      	bne.n	80071f8 <HAL_I2C_Mem_Write+0x180>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d017      	beq.n	80071f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	781a      	ldrb	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1aa      	bne.n	8007156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fcfa 	bl	8007bfe <I2C_WaitOnBTFFlagUntilTimeout>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00d      	beq.n	800722c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	2b04      	cmp	r3, #4
 8007216:	d107      	bne.n	8007228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e016      	b.n	800725a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800723a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	e000      	b.n	800725a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	00100002 	.word	0x00100002
 8007268:	ffff0000 	.word	0xffff0000

0800726c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08c      	sub	sp, #48	; 0x30
 8007270:	af02      	add	r7, sp, #8
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	4608      	mov	r0, r1
 8007276:	4611      	mov	r1, r2
 8007278:	461a      	mov	r2, r3
 800727a:	4603      	mov	r3, r0
 800727c:	817b      	strh	r3, [r7, #10]
 800727e:	460b      	mov	r3, r1
 8007280:	813b      	strh	r3, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007286:	f7fd fa53 	bl	8004730 <HAL_GetTick>
 800728a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b20      	cmp	r3, #32
 8007296:	f040 8208 	bne.w	80076aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	2319      	movs	r3, #25
 80072a0:	2201      	movs	r2, #1
 80072a2:	497b      	ldr	r1, [pc, #492]	; (8007490 <HAL_I2C_Mem_Read+0x224>)
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fb93 	bl	80079d0 <I2C_WaitOnFlagUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80072b0:	2302      	movs	r3, #2
 80072b2:	e1fb      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_I2C_Mem_Read+0x56>
 80072be:	2302      	movs	r3, #2
 80072c0:	e1f4      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d007      	beq.n	80072e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2222      	movs	r2, #34	; 0x22
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2240      	movs	r2, #64	; 0x40
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4a5b      	ldr	r2, [pc, #364]	; (8007494 <HAL_I2C_Mem_Read+0x228>)
 8007328:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800732a:	88f8      	ldrh	r0, [r7, #6]
 800732c:	893a      	ldrh	r2, [r7, #8]
 800732e:	8979      	ldrh	r1, [r7, #10]
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	4603      	mov	r3, r0
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fa60 	bl	8007800 <I2C_RequestMemoryRead>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e1b0      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d113      	bne.n	800737a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007352:	2300      	movs	r3, #0
 8007354:	623b      	str	r3, [r7, #32]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	623b      	str	r3, [r7, #32]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	623b      	str	r3, [r7, #32]
 8007366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e184      	b.n	8007684 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737e:	2b01      	cmp	r3, #1
 8007380:	d11b      	bne.n	80073ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	61fb      	str	r3, [r7, #28]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e164      	b.n	8007684 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d11b      	bne.n	80073fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073e2:	2300      	movs	r3, #0
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	e144      	b.n	8007684 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007410:	e138      	b.n	8007684 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007416:	2b03      	cmp	r3, #3
 8007418:	f200 80f1 	bhi.w	80075fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007420:	2b01      	cmp	r3, #1
 8007422:	d123      	bne.n	800746c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fc29 	bl	8007c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e139      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	855a      	strh	r2, [r3, #42]	; 0x2a
 800746a:	e10b      	b.n	8007684 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007470:	2b02      	cmp	r3, #2
 8007472:	d14e      	bne.n	8007512 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	2200      	movs	r2, #0
 800747c:	4906      	ldr	r1, [pc, #24]	; (8007498 <HAL_I2C_Mem_Read+0x22c>)
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 faa6 	bl	80079d0 <I2C_WaitOnFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d008      	beq.n	800749c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e10e      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
 800748e:	bf00      	nop
 8007490:	00100002 	.word	0x00100002
 8007494:	ffff0000 	.word	0xffff0000
 8007498:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691a      	ldr	r2, [r3, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007510:	e0b8      	b.n	8007684 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2200      	movs	r2, #0
 800751a:	4966      	ldr	r1, [pc, #408]	; (80076b4 <HAL_I2C_Mem_Read+0x448>)
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 fa57 	bl	80079d0 <I2C_WaitOnFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e0bf      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	2200      	movs	r2, #0
 8007576:	494f      	ldr	r1, [pc, #316]	; (80076b4 <HAL_I2C_Mem_Read+0x448>)
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 fa29 	bl	80079d0 <I2C_WaitOnFlagUntilTimeout>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e091      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075fc:	e042      	b.n	8007684 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 fb3c 	bl	8007c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e04c      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f003 0304 	and.w	r3, r3, #4
 800764e:	2b04      	cmp	r3, #4
 8007650:	d118      	bne.n	8007684 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	b2d2      	uxtb	r2, r2
 800765e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007688:	2b00      	cmp	r3, #0
 800768a:	f47f aec2 	bne.w	8007412 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e000      	b.n	80076ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80076aa:	2302      	movs	r3, #2
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3728      	adds	r7, #40	; 0x28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	00010004 	.word	0x00010004

080076b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c6:	b2db      	uxtb	r3, r3
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af02      	add	r7, sp, #8
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	461a      	mov	r2, r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	817b      	strh	r3, [r7, #10]
 80076e6:	460b      	mov	r3, r1
 80076e8:	813b      	strh	r3, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	2200      	movs	r2, #0
 8007706:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f960 	bl	80079d0 <I2C_WaitOnFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007724:	d103      	bne.n	800772e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e05f      	b.n	80077f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007732:	897b      	ldrh	r3, [r7, #10]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007740:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	6a3a      	ldr	r2, [r7, #32]
 8007746:	492d      	ldr	r1, [pc, #180]	; (80077fc <I2C_RequestMemoryWrite+0x128>)
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f998 	bl	8007a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e04c      	b.n	80077f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800776e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007770:	6a39      	ldr	r1, [r7, #32]
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 fa02 	bl	8007b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00d      	beq.n	800779a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	2b04      	cmp	r3, #4
 8007784:	d107      	bne.n	8007796 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007794:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e02b      	b.n	80077f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d105      	bne.n	80077ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077a0:	893b      	ldrh	r3, [r7, #8]
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	611a      	str	r2, [r3, #16]
 80077aa:	e021      	b.n	80077f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077ac:	893b      	ldrh	r3, [r7, #8]
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077bc:	6a39      	ldr	r1, [r7, #32]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 f9dc 	bl	8007b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d107      	bne.n	80077e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e005      	b.n	80077f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077e6:	893b      	ldrh	r3, [r7, #8]
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	00010002 	.word	0x00010002

08007800 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	4608      	mov	r0, r1
 800780a:	4611      	mov	r1, r2
 800780c:	461a      	mov	r2, r3
 800780e:	4603      	mov	r3, r0
 8007810:	817b      	strh	r3, [r7, #10]
 8007812:	460b      	mov	r3, r1
 8007814:	813b      	strh	r3, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007828:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	2200      	movs	r2, #0
 8007842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f8c2 	bl	80079d0 <I2C_WaitOnFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00d      	beq.n	800786e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007860:	d103      	bne.n	800786a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e0aa      	b.n	80079c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800786e:	897b      	ldrh	r3, [r7, #10]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800787c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	6a3a      	ldr	r2, [r7, #32]
 8007882:	4952      	ldr	r1, [pc, #328]	; (80079cc <I2C_RequestMemoryRead+0x1cc>)
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f8fa 	bl	8007a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e097      	b.n	80079c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ac:	6a39      	ldr	r1, [r7, #32]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 f964 	bl	8007b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00d      	beq.n	80078d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d107      	bne.n	80078d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e076      	b.n	80079c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d105      	bne.n	80078e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078dc:	893b      	ldrh	r3, [r7, #8]
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	611a      	str	r2, [r3, #16]
 80078e6:	e021      	b.n	800792c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078e8:	893b      	ldrh	r3, [r7, #8]
 80078ea:	0a1b      	lsrs	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f8:	6a39      	ldr	r1, [r7, #32]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f93e 	bl	8007b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00d      	beq.n	8007922 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	2b04      	cmp	r3, #4
 800790c:	d107      	bne.n	800791e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800791c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e050      	b.n	80079c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007922:	893b      	ldrh	r3, [r7, #8]
 8007924:	b2da      	uxtb	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800792c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792e:	6a39      	ldr	r1, [r7, #32]
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f923 	bl	8007b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00d      	beq.n	8007958 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	2b04      	cmp	r3, #4
 8007942:	d107      	bne.n	8007954 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007952:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e035      	b.n	80079c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007966:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	2200      	movs	r2, #0
 8007970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f82b 	bl	80079d0 <I2C_WaitOnFlagUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800798a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800798e:	d103      	bne.n	8007998 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e013      	b.n	80079c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800799c:	897b      	ldrh	r3, [r7, #10]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f043 0301 	orr.w	r3, r3, #1
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	6a3a      	ldr	r2, [r7, #32]
 80079b0:	4906      	ldr	r1, [pc, #24]	; (80079cc <I2C_RequestMemoryRead+0x1cc>)
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f863 	bl	8007a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	00010002 	.word	0x00010002

080079d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	4613      	mov	r3, r2
 80079de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079e0:	e025      	b.n	8007a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e8:	d021      	beq.n	8007a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ea:	f7fc fea1 	bl	8004730 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d302      	bcc.n	8007a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d116      	bne.n	8007a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f043 0220 	orr.w	r2, r3, #32
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e023      	b.n	8007a76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	0c1b      	lsrs	r3, r3, #16
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d10d      	bne.n	8007a54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	43da      	mvns	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4013      	ands	r3, r2
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bf0c      	ite	eq
 8007a4a:	2301      	moveq	r3, #1
 8007a4c:	2300      	movne	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	e00c      	b.n	8007a6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	43da      	mvns	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4013      	ands	r3, r2
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bf0c      	ite	eq
 8007a66:	2301      	moveq	r3, #1
 8007a68:	2300      	movne	r3, #0
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d0b6      	beq.n	80079e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a8c:	e051      	b.n	8007b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9c:	d123      	bne.n	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ab6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f043 0204 	orr.w	r2, r3, #4
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e046      	b.n	8007b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aec:	d021      	beq.n	8007b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aee:	f7fc fe1f 	bl	8004730 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d302      	bcc.n	8007b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d116      	bne.n	8007b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f043 0220 	orr.w	r2, r3, #32
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e020      	b.n	8007b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	0c1b      	lsrs	r3, r3, #16
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d10c      	bne.n	8007b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	43da      	mvns	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4013      	ands	r3, r2
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf14      	ite	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	2300      	moveq	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	e00b      	b.n	8007b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	43da      	mvns	r2, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4013      	ands	r3, r2
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf14      	ite	ne
 8007b68:	2301      	movne	r3, #1
 8007b6a:	2300      	moveq	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d18d      	bne.n	8007a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b88:	e02d      	b.n	8007be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 f8ce 	bl	8007d2c <I2C_IsAcknowledgeFailed>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e02d      	b.n	8007bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d021      	beq.n	8007be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba2:	f7fc fdc5 	bl	8004730 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d302      	bcc.n	8007bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d116      	bne.n	8007be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f043 0220 	orr.w	r2, r3, #32
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e007      	b.n	8007bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf0:	2b80      	cmp	r3, #128	; 0x80
 8007bf2:	d1ca      	bne.n	8007b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c0a:	e02d      	b.n	8007c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f88d 	bl	8007d2c <I2C_IsAcknowledgeFailed>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e02d      	b.n	8007c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d021      	beq.n	8007c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c24:	f7fc fd84 	bl	8004730 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d302      	bcc.n	8007c3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d116      	bne.n	8007c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	f043 0220 	orr.w	r2, r3, #32
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e007      	b.n	8007c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d1ca      	bne.n	8007c0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c8c:	e042      	b.n	8007d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d119      	bne.n	8007cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0210 	mvn.w	r2, #16
 8007ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e029      	b.n	8007d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd0:	f7fc fd2e 	bl	8004730 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d302      	bcc.n	8007ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d116      	bne.n	8007d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	f043 0220 	orr.w	r2, r3, #32
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e007      	b.n	8007d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d1b5      	bne.n	8007c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d42:	d11b      	bne.n	8007d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	f043 0204 	orr.w	r2, r3, #4
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d129      	bne.n	8007df4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2224      	movs	r2, #36	; 0x24
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0201 	bic.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0210 	bic.w	r2, r2, #16
 8007dc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d12a      	bne.n	8007e72 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	; 0x24
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007e3c:	89fb      	ldrh	r3, [r7, #14]
 8007e3e:	f023 030f 	bic.w	r3, r3, #15
 8007e42:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	89fb      	ldrh	r3, [r7, #14]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	89fa      	ldrh	r2, [r7, #14]
 8007e54:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0201 	orr.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e000      	b.n	8007e74 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007e72:	2302      	movs	r3, #2
  }
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e0bf      	b.n	8008012 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d106      	bne.n	8007eac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7f9 fa54 	bl	8001354 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007ec2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6999      	ldr	r1, [r3, #24]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ed8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6899      	ldr	r1, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b4a      	ldr	r3, [pc, #296]	; (800801c <HAL_LTDC_Init+0x19c>)
 8007ef4:	400b      	ands	r3, r1
 8007ef6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6899      	ldr	r1, [r3, #8]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68d9      	ldr	r1, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	4b3e      	ldr	r3, [pc, #248]	; (800801c <HAL_LTDC_Init+0x19c>)
 8007f22:	400b      	ands	r3, r1
 8007f24:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68d9      	ldr	r1, [r3, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a1a      	ldr	r2, [r3, #32]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6919      	ldr	r1, [r3, #16]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b33      	ldr	r3, [pc, #204]	; (800801c <HAL_LTDC_Init+0x19c>)
 8007f50:	400b      	ands	r3, r1
 8007f52:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	041b      	lsls	r3, r3, #16
 8007f5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6919      	ldr	r1, [r3, #16]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6959      	ldr	r1, [r3, #20]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	4b27      	ldr	r3, [pc, #156]	; (800801c <HAL_LTDC_Init+0x19c>)
 8007f7e:	400b      	ands	r3, r1
 8007f80:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6959      	ldr	r1, [r3, #20]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007fb0:	041b      	lsls	r3, r3, #16
 8007fb2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0206 	orr.w	r2, r2, #6
 8007fee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	f000f800 	.word	0xf000f800

08008020 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f003 0304 	and.w	r3, r3, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	d023      	beq.n	800808a <HAL_LTDC_IRQHandler+0x6a>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01e      	beq.n	800808a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0204 	bic.w	r2, r2, #4
 800805a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2204      	movs	r2, #4
 8008062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800806a:	f043 0201 	orr.w	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2204      	movs	r2, #4
 8008078:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f86f 	bl	8008168 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d023      	beq.n	80080dc <HAL_LTDC_IRQHandler+0xbc>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d01e      	beq.n	80080dc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0202 	bic.w	r2, r2, #2
 80080ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2202      	movs	r2, #2
 80080b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080bc:	f043 0202 	orr.w	r2, r3, #2
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2204      	movs	r2, #4
 80080ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f846 	bl	8008168 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01b      	beq.n	800811e <HAL_LTDC_IRQHandler+0xfe>
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d016      	beq.n	800811e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f82f 	bl	800817c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0308 	and.w	r3, r3, #8
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <HAL_LTDC_IRQHandler+0x140>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d016      	beq.n	8008160 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0208 	bic.w	r2, r2, #8
 8008140:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2208      	movs	r2, #8
 8008148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f818 	bl	8008190 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008160:	bf00      	nop
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80081a4:	b5b0      	push	{r4, r5, r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_LTDC_ConfigLayer+0x1a>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e02c      	b.n	8008218 <HAL_LTDC_ConfigLayer+0x74>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2202      	movs	r2, #2
 80081ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2134      	movs	r1, #52	; 0x34
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4614      	mov	r4, r2
 80081e2:	461d      	mov	r5, r3
 80081e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f83b 	bl	8008274 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2201      	movs	r2, #1
 8008204:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bdb0      	pop	{r4, r5, r7, pc}

08008220 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_LTDC_EnableDither+0x16>
 8008232:	2302      	movs	r3, #2
 8008234:	e016      	b.n	8008264 <HAL_LTDC_EnableDither+0x44>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2202      	movs	r2, #2
 8008242:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008246:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <HAL_LTDC_EnableDither+0x50>)
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	4a09      	ldr	r2, [pc, #36]	; (8008270 <HAL_LTDC_EnableDither+0x50>)
 800824c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008250:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	40016800 	.word	0x40016800

08008274 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008274:	b480      	push	{r7}
 8008276:	b089      	sub	sp, #36	; 0x24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008290:	4413      	add	r3, r2
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	01db      	lsls	r3, r3, #7
 80082a0:	4413      	add	r3, r2
 80082a2:	3384      	adds	r3, #132	; 0x84
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	4611      	mov	r1, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	01d2      	lsls	r2, r2, #7
 80082b0:	440a      	add	r2, r1
 80082b2:	3284      	adds	r2, #132	; 0x84
 80082b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80082b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	0c1b      	lsrs	r3, r3, #16
 80082c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ca:	4413      	add	r3, r2
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	01db      	lsls	r3, r3, #7
 80082d8:	440b      	add	r3, r1
 80082da:	3384      	adds	r3, #132	; 0x84
 80082dc:	4619      	mov	r1, r3
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082f2:	4413      	add	r3, r2
 80082f4:	041b      	lsls	r3, r3, #16
 80082f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	01db      	lsls	r3, r3, #7
 8008302:	4413      	add	r3, r2
 8008304:	3384      	adds	r3, #132	; 0x84
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	6812      	ldr	r2, [r2, #0]
 800830c:	4611      	mov	r1, r2
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	01d2      	lsls	r2, r2, #7
 8008312:	440a      	add	r2, r1
 8008314:	3284      	adds	r2, #132	; 0x84
 8008316:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800831a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800832a:	4413      	add	r3, r2
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4619      	mov	r1, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	01db      	lsls	r3, r3, #7
 8008338:	440b      	add	r3, r1
 800833a:	3384      	adds	r3, #132	; 0x84
 800833c:	4619      	mov	r1, r3
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	4313      	orrs	r3, r2
 8008342:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	01db      	lsls	r3, r3, #7
 800834e:	4413      	add	r3, r2
 8008350:	3384      	adds	r3, #132	; 0x84
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	4611      	mov	r1, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	01d2      	lsls	r2, r2, #7
 800835e:	440a      	add	r2, r1
 8008360:	3284      	adds	r2, #132	; 0x84
 8008362:	f023 0307 	bic.w	r3, r3, #7
 8008366:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	01db      	lsls	r3, r3, #7
 8008372:	4413      	add	r3, r2
 8008374:	3384      	adds	r3, #132	; 0x84
 8008376:	461a      	mov	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800838e:	041b      	lsls	r3, r3, #16
 8008390:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	061b      	lsls	r3, r3, #24
 8008398:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	01db      	lsls	r3, r3, #7
 80083a4:	4413      	add	r3, r2
 80083a6:	3384      	adds	r3, #132	; 0x84
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	01db      	lsls	r3, r3, #7
 80083b4:	4413      	add	r3, r2
 80083b6:	3384      	adds	r3, #132	; 0x84
 80083b8:	461a      	mov	r2, r3
 80083ba:	2300      	movs	r3, #0
 80083bc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083c4:	461a      	mov	r2, r3
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	431a      	orrs	r2, r3
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	431a      	orrs	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4619      	mov	r1, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	01db      	lsls	r3, r3, #7
 80083d8:	440b      	add	r3, r1
 80083da:	3384      	adds	r3, #132	; 0x84
 80083dc:	4619      	mov	r1, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	01db      	lsls	r3, r3, #7
 80083ee:	4413      	add	r3, r2
 80083f0:	3384      	adds	r3, #132	; 0x84
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	4611      	mov	r1, r2
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	01d2      	lsls	r2, r2, #7
 80083fe:	440a      	add	r2, r1
 8008400:	3284      	adds	r2, #132	; 0x84
 8008402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008406:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	01db      	lsls	r3, r3, #7
 8008412:	4413      	add	r3, r2
 8008414:	3384      	adds	r3, #132	; 0x84
 8008416:	461a      	mov	r2, r3
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	01db      	lsls	r3, r3, #7
 8008428:	4413      	add	r3, r2
 800842a:	3384      	adds	r3, #132	; 0x84
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	4611      	mov	r1, r2
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	01d2      	lsls	r2, r2, #7
 8008438:	440a      	add	r2, r1
 800843a:	3284      	adds	r2, #132	; 0x84
 800843c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008440:	f023 0307 	bic.w	r3, r3, #7
 8008444:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	69da      	ldr	r2, [r3, #28]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	6809      	ldr	r1, [r1, #0]
 8008452:	4608      	mov	r0, r1
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	01c9      	lsls	r1, r1, #7
 8008458:	4401      	add	r1, r0
 800845a:	3184      	adds	r1, #132	; 0x84
 800845c:	4313      	orrs	r3, r2
 800845e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	01db      	lsls	r3, r3, #7
 800846a:	4413      	add	r3, r2
 800846c:	3384      	adds	r3, #132	; 0x84
 800846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	01db      	lsls	r3, r3, #7
 800847a:	4413      	add	r3, r2
 800847c:	3384      	adds	r3, #132	; 0x84
 800847e:	461a      	mov	r2, r3
 8008480:	2300      	movs	r3, #0
 8008482:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	01db      	lsls	r3, r3, #7
 800848e:	4413      	add	r3, r2
 8008490:	3384      	adds	r3, #132	; 0x84
 8008492:	461a      	mov	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80084a2:	2304      	movs	r3, #4
 80084a4:	61fb      	str	r3, [r7, #28]
 80084a6:	e01b      	b.n	80084e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d102      	bne.n	80084b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80084b0:	2303      	movs	r3, #3
 80084b2:	61fb      	str	r3, [r7, #28]
 80084b4:	e014      	b.n	80084e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d00b      	beq.n	80084d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d007      	beq.n	80084d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d003      	beq.n	80084d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084d2:	2b07      	cmp	r3, #7
 80084d4:	d102      	bne.n	80084dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80084d6:	2302      	movs	r3, #2
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	e001      	b.n	80084e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80084dc:	2301      	movs	r3, #1
 80084de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	01db      	lsls	r3, r3, #7
 80084ea:	4413      	add	r3, r2
 80084ec:	3384      	adds	r3, #132	; 0x84
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	4611      	mov	r1, r2
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	01d2      	lsls	r2, r2, #7
 80084fa:	440a      	add	r2, r1
 80084fc:	3284      	adds	r2, #132	; 0x84
 80084fe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008502:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	041a      	lsls	r2, r3, #16
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	6859      	ldr	r1, [r3, #4]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	1acb      	subs	r3, r1, r3
 800851a:	69f9      	ldr	r1, [r7, #28]
 800851c:	fb01 f303 	mul.w	r3, r1, r3
 8008520:	3303      	adds	r3, #3
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	6809      	ldr	r1, [r1, #0]
 8008526:	4608      	mov	r0, r1
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	01c9      	lsls	r1, r1, #7
 800852c:	4401      	add	r1, r0
 800852e:	3184      	adds	r1, #132	; 0x84
 8008530:	4313      	orrs	r3, r2
 8008532:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	01db      	lsls	r3, r3, #7
 800853e:	4413      	add	r3, r2
 8008540:	3384      	adds	r3, #132	; 0x84
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	4611      	mov	r1, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	01d2      	lsls	r2, r2, #7
 800854e:	440a      	add	r2, r1
 8008550:	3284      	adds	r2, #132	; 0x84
 8008552:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	01db      	lsls	r3, r3, #7
 8008566:	4413      	add	r3, r2
 8008568:	3384      	adds	r3, #132	; 0x84
 800856a:	461a      	mov	r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	01db      	lsls	r3, r3, #7
 800857c:	4413      	add	r3, r2
 800857e:	3384      	adds	r3, #132	; 0x84
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	4611      	mov	r1, r2
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	01d2      	lsls	r2, r2, #7
 800858c:	440a      	add	r2, r1
 800858e:	3284      	adds	r2, #132	; 0x84
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	6013      	str	r3, [r2, #0]
}
 8008596:	bf00      	nop
 8008598:	3724      	adds	r7, #36	; 0x24
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e25b      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d075      	beq.n	80086ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085c2:	4ba3      	ldr	r3, [pc, #652]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f003 030c 	and.w	r3, r3, #12
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d00c      	beq.n	80085e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085ce:	4ba0      	ldr	r3, [pc, #640]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085d6:	2b08      	cmp	r3, #8
 80085d8:	d112      	bne.n	8008600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085da:	4b9d      	ldr	r3, [pc, #628]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085e6:	d10b      	bne.n	8008600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085e8:	4b99      	ldr	r3, [pc, #612]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d05b      	beq.n	80086ac <HAL_RCC_OscConfig+0x108>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d157      	bne.n	80086ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e236      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008608:	d106      	bne.n	8008618 <HAL_RCC_OscConfig+0x74>
 800860a:	4b91      	ldr	r3, [pc, #580]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a90      	ldr	r2, [pc, #576]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	e01d      	b.n	8008654 <HAL_RCC_OscConfig+0xb0>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008620:	d10c      	bne.n	800863c <HAL_RCC_OscConfig+0x98>
 8008622:	4b8b      	ldr	r3, [pc, #556]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a8a      	ldr	r2, [pc, #552]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	4b88      	ldr	r3, [pc, #544]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a87      	ldr	r2, [pc, #540]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	e00b      	b.n	8008654 <HAL_RCC_OscConfig+0xb0>
 800863c:	4b84      	ldr	r3, [pc, #528]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a83      	ldr	r2, [pc, #524]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	4b81      	ldr	r3, [pc, #516]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a80      	ldr	r2, [pc, #512]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 800864e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d013      	beq.n	8008684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800865c:	f7fc f868 	bl	8004730 <HAL_GetTick>
 8008660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008662:	e008      	b.n	8008676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008664:	f7fc f864 	bl	8004730 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b64      	cmp	r3, #100	; 0x64
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e1fb      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008676:	4b76      	ldr	r3, [pc, #472]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0f0      	beq.n	8008664 <HAL_RCC_OscConfig+0xc0>
 8008682:	e014      	b.n	80086ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008684:	f7fc f854 	bl	8004730 <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800868c:	f7fc f850 	bl	8004730 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b64      	cmp	r3, #100	; 0x64
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e1e7      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800869e:	4b6c      	ldr	r3, [pc, #432]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f0      	bne.n	800868c <HAL_RCC_OscConfig+0xe8>
 80086aa:	e000      	b.n	80086ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d063      	beq.n	8008782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086ba:	4b65      	ldr	r3, [pc, #404]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f003 030c 	and.w	r3, r3, #12
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00b      	beq.n	80086de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086c6:	4b62      	ldr	r3, [pc, #392]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086ce:	2b08      	cmp	r3, #8
 80086d0:	d11c      	bne.n	800870c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086d2:	4b5f      	ldr	r3, [pc, #380]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d116      	bne.n	800870c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086de:	4b5c      	ldr	r3, [pc, #368]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d005      	beq.n	80086f6 <HAL_RCC_OscConfig+0x152>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d001      	beq.n	80086f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e1bb      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086f6:	4b56      	ldr	r3, [pc, #344]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	4952      	ldr	r1, [pc, #328]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008706:	4313      	orrs	r3, r2
 8008708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800870a:	e03a      	b.n	8008782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d020      	beq.n	8008756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008714:	4b4f      	ldr	r3, [pc, #316]	; (8008854 <HAL_RCC_OscConfig+0x2b0>)
 8008716:	2201      	movs	r2, #1
 8008718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871a:	f7fc f809 	bl	8004730 <HAL_GetTick>
 800871e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008720:	e008      	b.n	8008734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008722:	f7fc f805 	bl	8004730 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d901      	bls.n	8008734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e19c      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008734:	4b46      	ldr	r3, [pc, #280]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0f0      	beq.n	8008722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008740:	4b43      	ldr	r3, [pc, #268]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	4940      	ldr	r1, [pc, #256]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008750:	4313      	orrs	r3, r2
 8008752:	600b      	str	r3, [r1, #0]
 8008754:	e015      	b.n	8008782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008756:	4b3f      	ldr	r3, [pc, #252]	; (8008854 <HAL_RCC_OscConfig+0x2b0>)
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875c:	f7fb ffe8 	bl	8004730 <HAL_GetTick>
 8008760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008762:	e008      	b.n	8008776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008764:	f7fb ffe4 	bl	8004730 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b02      	cmp	r3, #2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e17b      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008776:	4b36      	ldr	r3, [pc, #216]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f0      	bne.n	8008764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d030      	beq.n	80087f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d016      	beq.n	80087c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008796:	4b30      	ldr	r3, [pc, #192]	; (8008858 <HAL_RCC_OscConfig+0x2b4>)
 8008798:	2201      	movs	r2, #1
 800879a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879c:	f7fb ffc8 	bl	8004730 <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087a4:	f7fb ffc4 	bl	8004730 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e15b      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087b6:	4b26      	ldr	r3, [pc, #152]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80087b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0f0      	beq.n	80087a4 <HAL_RCC_OscConfig+0x200>
 80087c2:	e015      	b.n	80087f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087c4:	4b24      	ldr	r3, [pc, #144]	; (8008858 <HAL_RCC_OscConfig+0x2b4>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087ca:	f7fb ffb1 	bl	8004730 <HAL_GetTick>
 80087ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087d0:	e008      	b.n	80087e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087d2:	f7fb ffad 	bl	8004730 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e144      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087e4:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 80087e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f0      	bne.n	80087d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 80a0 	beq.w	800893e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008802:	4b13      	ldr	r3, [pc, #76]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10f      	bne.n	800882e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800880e:	2300      	movs	r3, #0
 8008810:	60bb      	str	r3, [r7, #8]
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	4a0e      	ldr	r2, [pc, #56]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800881c:	6413      	str	r3, [r2, #64]	; 0x40
 800881e:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <HAL_RCC_OscConfig+0x2ac>)
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008826:	60bb      	str	r3, [r7, #8]
 8008828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800882a:	2301      	movs	r3, #1
 800882c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800882e:	4b0b      	ldr	r3, [pc, #44]	; (800885c <HAL_RCC_OscConfig+0x2b8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008836:	2b00      	cmp	r3, #0
 8008838:	d121      	bne.n	800887e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800883a:	4b08      	ldr	r3, [pc, #32]	; (800885c <HAL_RCC_OscConfig+0x2b8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a07      	ldr	r2, [pc, #28]	; (800885c <HAL_RCC_OscConfig+0x2b8>)
 8008840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008846:	f7fb ff73 	bl	8004730 <HAL_GetTick>
 800884a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800884c:	e011      	b.n	8008872 <HAL_RCC_OscConfig+0x2ce>
 800884e:	bf00      	nop
 8008850:	40023800 	.word	0x40023800
 8008854:	42470000 	.word	0x42470000
 8008858:	42470e80 	.word	0x42470e80
 800885c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008860:	f7fb ff66 	bl	8004730 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e0fd      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008872:	4b81      	ldr	r3, [pc, #516]	; (8008a78 <HAL_RCC_OscConfig+0x4d4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0f0      	beq.n	8008860 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d106      	bne.n	8008894 <HAL_RCC_OscConfig+0x2f0>
 8008886:	4b7d      	ldr	r3, [pc, #500]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 8008888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888a:	4a7c      	ldr	r2, [pc, #496]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 800888c:	f043 0301 	orr.w	r3, r3, #1
 8008890:	6713      	str	r3, [r2, #112]	; 0x70
 8008892:	e01c      	b.n	80088ce <HAL_RCC_OscConfig+0x32a>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	2b05      	cmp	r3, #5
 800889a:	d10c      	bne.n	80088b6 <HAL_RCC_OscConfig+0x312>
 800889c:	4b77      	ldr	r3, [pc, #476]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 800889e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a0:	4a76      	ldr	r2, [pc, #472]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80088a2:	f043 0304 	orr.w	r3, r3, #4
 80088a6:	6713      	str	r3, [r2, #112]	; 0x70
 80088a8:	4b74      	ldr	r3, [pc, #464]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80088aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ac:	4a73      	ldr	r2, [pc, #460]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	6713      	str	r3, [r2, #112]	; 0x70
 80088b4:	e00b      	b.n	80088ce <HAL_RCC_OscConfig+0x32a>
 80088b6:	4b71      	ldr	r3, [pc, #452]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	4a70      	ldr	r2, [pc, #448]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80088bc:	f023 0301 	bic.w	r3, r3, #1
 80088c0:	6713      	str	r3, [r2, #112]	; 0x70
 80088c2:	4b6e      	ldr	r3, [pc, #440]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	4a6d      	ldr	r2, [pc, #436]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80088c8:	f023 0304 	bic.w	r3, r3, #4
 80088cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d015      	beq.n	8008902 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d6:	f7fb ff2b 	bl	8004730 <HAL_GetTick>
 80088da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088dc:	e00a      	b.n	80088f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088de:	f7fb ff27 	bl	8004730 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e0bc      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088f4:	4b61      	ldr	r3, [pc, #388]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80088f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0ee      	beq.n	80088de <HAL_RCC_OscConfig+0x33a>
 8008900:	e014      	b.n	800892c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008902:	f7fb ff15 	bl	8004730 <HAL_GetTick>
 8008906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008908:	e00a      	b.n	8008920 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800890a:	f7fb ff11 	bl	8004730 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	f241 3288 	movw	r2, #5000	; 0x1388
 8008918:	4293      	cmp	r3, r2
 800891a:	d901      	bls.n	8008920 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e0a6      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008920:	4b56      	ldr	r3, [pc, #344]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 8008922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1ee      	bne.n	800890a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d105      	bne.n	800893e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008932:	4b52      	ldr	r3, [pc, #328]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	4a51      	ldr	r2, [pc, #324]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 8008938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800893c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 8092 	beq.w	8008a6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008948:	4b4c      	ldr	r3, [pc, #304]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 030c 	and.w	r3, r3, #12
 8008950:	2b08      	cmp	r3, #8
 8008952:	d05c      	beq.n	8008a0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d141      	bne.n	80089e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800895c:	4b48      	ldr	r3, [pc, #288]	; (8008a80 <HAL_RCC_OscConfig+0x4dc>)
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008962:	f7fb fee5 	bl	8004730 <HAL_GetTick>
 8008966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008968:	e008      	b.n	800897c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800896a:	f7fb fee1 	bl	8004730 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b02      	cmp	r3, #2
 8008976:	d901      	bls.n	800897c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e078      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800897c:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1f0      	bne.n	800896a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	69da      	ldr	r2, [r3, #28]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	431a      	orrs	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	019b      	lsls	r3, r3, #6
 8008998:	431a      	orrs	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	085b      	lsrs	r3, r3, #1
 80089a0:	3b01      	subs	r3, #1
 80089a2:	041b      	lsls	r3, r3, #16
 80089a4:	431a      	orrs	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089aa:	061b      	lsls	r3, r3, #24
 80089ac:	4933      	ldr	r1, [pc, #204]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089b2:	4b33      	ldr	r3, [pc, #204]	; (8008a80 <HAL_RCC_OscConfig+0x4dc>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b8:	f7fb feba 	bl	8004730 <HAL_GetTick>
 80089bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089c0:	f7fb feb6 	bl	8004730 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e04d      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089d2:	4b2a      	ldr	r3, [pc, #168]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f0      	beq.n	80089c0 <HAL_RCC_OscConfig+0x41c>
 80089de:	e045      	b.n	8008a6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e0:	4b27      	ldr	r3, [pc, #156]	; (8008a80 <HAL_RCC_OscConfig+0x4dc>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089e6:	f7fb fea3 	bl	8004730 <HAL_GetTick>
 80089ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089ee:	f7fb fe9f 	bl	8004730 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e036      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a00:	4b1e      	ldr	r3, [pc, #120]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f0      	bne.n	80089ee <HAL_RCC_OscConfig+0x44a>
 8008a0c:	e02e      	b.n	8008a6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d101      	bne.n	8008a1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e029      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a1a:	4b18      	ldr	r3, [pc, #96]	; (8008a7c <HAL_RCC_OscConfig+0x4d8>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d11c      	bne.n	8008a68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d115      	bne.n	8008a68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a42:	4013      	ands	r3, r2
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d10d      	bne.n	8008a68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d106      	bne.n	8008a68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d001      	beq.n	8008a6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e000      	b.n	8008a6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40007000 	.word	0x40007000
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	42470060 	.word	0x42470060

08008a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e0cc      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a98:	4b68      	ldr	r3, [pc, #416]	; (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d90c      	bls.n	8008ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aa6:	4b65      	ldr	r3, [pc, #404]	; (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aae:	4b63      	ldr	r3, [pc, #396]	; (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 030f 	and.w	r3, r3, #15
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d001      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e0b8      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d020      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0304 	and.w	r3, r3, #4
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ad8:	4b59      	ldr	r3, [pc, #356]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	4a58      	ldr	r2, [pc, #352]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0308 	and.w	r3, r3, #8
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008af0:	4b53      	ldr	r3, [pc, #332]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	4a52      	ldr	r2, [pc, #328]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008afc:	4b50      	ldr	r3, [pc, #320]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	494d      	ldr	r1, [pc, #308]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d044      	beq.n	8008ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d107      	bne.n	8008b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b22:	4b47      	ldr	r3, [pc, #284]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d119      	bne.n	8008b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e07f      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d003      	beq.n	8008b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d107      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b42:	4b3f      	ldr	r3, [pc, #252]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d109      	bne.n	8008b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e06f      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b52:	4b3b      	ldr	r3, [pc, #236]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e067      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b62:	4b37      	ldr	r3, [pc, #220]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f023 0203 	bic.w	r2, r3, #3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	4934      	ldr	r1, [pc, #208]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b74:	f7fb fddc 	bl	8004730 <HAL_GetTick>
 8008b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b7a:	e00a      	b.n	8008b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b7c:	f7fb fdd8 	bl	8004730 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e04f      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b92:	4b2b      	ldr	r3, [pc, #172]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 020c 	and.w	r2, r3, #12
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d1eb      	bne.n	8008b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ba4:	4b25      	ldr	r3, [pc, #148]	; (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d20c      	bcs.n	8008bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bb2:	4b22      	ldr	r3, [pc, #136]	; (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bba:	4b20      	ldr	r3, [pc, #128]	; (8008c3c <HAL_RCC_ClockConfig+0x1b8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d001      	beq.n	8008bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e032      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d008      	beq.n	8008bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bd8:	4b19      	ldr	r3, [pc, #100]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	4916      	ldr	r1, [pc, #88]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bf6:	4b12      	ldr	r3, [pc, #72]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	490e      	ldr	r1, [pc, #56]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c0a:	f000 f821 	bl	8008c50 <HAL_RCC_GetSysClockFreq>
 8008c0e:	4601      	mov	r1, r0
 8008c10:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <HAL_RCC_ClockConfig+0x1bc>)
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	091b      	lsrs	r3, r3, #4
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	4a0a      	ldr	r2, [pc, #40]	; (8008c44 <HAL_RCC_ClockConfig+0x1c0>)
 8008c1c:	5cd3      	ldrb	r3, [r2, r3]
 8008c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8008c22:	4a09      	ldr	r2, [pc, #36]	; (8008c48 <HAL_RCC_ClockConfig+0x1c4>)
 8008c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c26:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <HAL_RCC_ClockConfig+0x1c8>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7f9 f83a 	bl	8001ca4 <HAL_InitTick>

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40023c00 	.word	0x40023c00
 8008c40:	40023800 	.word	0x40023800
 8008c44:	0800cbb0 	.word	0x0800cbb0
 8008c48:	20000000 	.word	0x20000000
 8008c4c:	20000090 	.word	0x20000090

08008c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	607b      	str	r3, [r7, #4]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c66:	4b63      	ldr	r3, [pc, #396]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f003 030c 	and.w	r3, r3, #12
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d007      	beq.n	8008c82 <HAL_RCC_GetSysClockFreq+0x32>
 8008c72:	2b08      	cmp	r3, #8
 8008c74:	d008      	beq.n	8008c88 <HAL_RCC_GetSysClockFreq+0x38>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f040 80b4 	bne.w	8008de4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c7c:	4b5e      	ldr	r3, [pc, #376]	; (8008df8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008c7e:	60bb      	str	r3, [r7, #8]
       break;
 8008c80:	e0b3      	b.n	8008dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c82:	4b5e      	ldr	r3, [pc, #376]	; (8008dfc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008c84:	60bb      	str	r3, [r7, #8]
      break;
 8008c86:	e0b0      	b.n	8008dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c88:	4b5a      	ldr	r3, [pc, #360]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c92:	4b58      	ldr	r3, [pc, #352]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d04a      	beq.n	8008d34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c9e:	4b55      	ldr	r3, [pc, #340]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	099b      	lsrs	r3, r3, #6
 8008ca4:	f04f 0400 	mov.w	r4, #0
 8008ca8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	ea03 0501 	and.w	r5, r3, r1
 8008cb4:	ea04 0602 	and.w	r6, r4, r2
 8008cb8:	4629      	mov	r1, r5
 8008cba:	4632      	mov	r2, r6
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	f04f 0400 	mov.w	r4, #0
 8008cc4:	0154      	lsls	r4, r2, #5
 8008cc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008cca:	014b      	lsls	r3, r1, #5
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4622      	mov	r2, r4
 8008cd0:	1b49      	subs	r1, r1, r5
 8008cd2:	eb62 0206 	sbc.w	r2, r2, r6
 8008cd6:	f04f 0300 	mov.w	r3, #0
 8008cda:	f04f 0400 	mov.w	r4, #0
 8008cde:	0194      	lsls	r4, r2, #6
 8008ce0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ce4:	018b      	lsls	r3, r1, #6
 8008ce6:	1a5b      	subs	r3, r3, r1
 8008ce8:	eb64 0402 	sbc.w	r4, r4, r2
 8008cec:	f04f 0100 	mov.w	r1, #0
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	00e2      	lsls	r2, r4, #3
 8008cf6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008cfa:	00d9      	lsls	r1, r3, #3
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4614      	mov	r4, r2
 8008d00:	195b      	adds	r3, r3, r5
 8008d02:	eb44 0406 	adc.w	r4, r4, r6
 8008d06:	f04f 0100 	mov.w	r1, #0
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	0262      	lsls	r2, r4, #9
 8008d10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008d14:	0259      	lsls	r1, r3, #9
 8008d16:	460b      	mov	r3, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f04f 0400 	mov.w	r4, #0
 8008d24:	461a      	mov	r2, r3
 8008d26:	4623      	mov	r3, r4
 8008d28:	f7f7 fa62 	bl	80001f0 <__aeabi_uldivmod>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	e049      	b.n	8008dc8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d34:	4b2f      	ldr	r3, [pc, #188]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	099b      	lsrs	r3, r3, #6
 8008d3a:	f04f 0400 	mov.w	r4, #0
 8008d3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d42:	f04f 0200 	mov.w	r2, #0
 8008d46:	ea03 0501 	and.w	r5, r3, r1
 8008d4a:	ea04 0602 	and.w	r6, r4, r2
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4632      	mov	r2, r6
 8008d52:	f04f 0300 	mov.w	r3, #0
 8008d56:	f04f 0400 	mov.w	r4, #0
 8008d5a:	0154      	lsls	r4, r2, #5
 8008d5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d60:	014b      	lsls	r3, r1, #5
 8008d62:	4619      	mov	r1, r3
 8008d64:	4622      	mov	r2, r4
 8008d66:	1b49      	subs	r1, r1, r5
 8008d68:	eb62 0206 	sbc.w	r2, r2, r6
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	f04f 0400 	mov.w	r4, #0
 8008d74:	0194      	lsls	r4, r2, #6
 8008d76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d7a:	018b      	lsls	r3, r1, #6
 8008d7c:	1a5b      	subs	r3, r3, r1
 8008d7e:	eb64 0402 	sbc.w	r4, r4, r2
 8008d82:	f04f 0100 	mov.w	r1, #0
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	00e2      	lsls	r2, r4, #3
 8008d8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d90:	00d9      	lsls	r1, r3, #3
 8008d92:	460b      	mov	r3, r1
 8008d94:	4614      	mov	r4, r2
 8008d96:	195b      	adds	r3, r3, r5
 8008d98:	eb44 0406 	adc.w	r4, r4, r6
 8008d9c:	f04f 0100 	mov.w	r1, #0
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	02a2      	lsls	r2, r4, #10
 8008da6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008daa:	0299      	lsls	r1, r3, #10
 8008dac:	460b      	mov	r3, r1
 8008dae:	4614      	mov	r4, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	4621      	mov	r1, r4
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f04f 0400 	mov.w	r4, #0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	f7f7 fa17 	bl	80001f0 <__aeabi_uldivmod>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	0c1b      	lsrs	r3, r3, #16
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de0:	60bb      	str	r3, [r7, #8]
      break;
 8008de2:	e002      	b.n	8008dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008de4:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008de6:	60bb      	str	r3, [r7, #8]
      break;
 8008de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dea:	68bb      	ldr	r3, [r7, #8]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df4:	40023800 	.word	0x40023800
 8008df8:	00f42400 	.word	0x00f42400
 8008dfc:	007a1200 	.word	0x007a1200

08008e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e00:	b480      	push	{r7}
 8008e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e04:	4b03      	ldr	r3, [pc, #12]	; (8008e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e06:	681b      	ldr	r3, [r3, #0]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20000000 	.word	0x20000000

08008e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e1c:	f7ff fff0 	bl	8008e00 <HAL_RCC_GetHCLKFreq>
 8008e20:	4601      	mov	r1, r0
 8008e22:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	0a9b      	lsrs	r3, r3, #10
 8008e28:	f003 0307 	and.w	r3, r3, #7
 8008e2c:	4a03      	ldr	r2, [pc, #12]	; (8008e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e2e:	5cd3      	ldrb	r3, [r2, r3]
 8008e30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	0800cbc0 	.word	0x0800cbc0

08008e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e44:	f7ff ffdc 	bl	8008e00 <HAL_RCC_GetHCLKFreq>
 8008e48:	4601      	mov	r1, r0
 8008e4a:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	0b5b      	lsrs	r3, r3, #13
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	4a03      	ldr	r2, [pc, #12]	; (8008e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e56:	5cd3      	ldrb	r3, [r2, r3]
 8008e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	40023800 	.word	0x40023800
 8008e64:	0800cbc0 	.word	0x0800cbc0

08008e68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	220f      	movs	r2, #15
 8008e76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e78:	4b12      	ldr	r3, [pc, #72]	; (8008ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f003 0203 	and.w	r2, r3, #3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e84:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e90:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e9c:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	08db      	lsrs	r3, r3, #3
 8008ea2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008eaa:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <HAL_RCC_GetClockConfig+0x60>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	601a      	str	r2, [r3, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40023800 	.word	0x40023800
 8008ec8:	40023c00 	.word	0x40023c00

08008ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10b      	bne.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d105      	bne.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d075      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f00:	4bad      	ldr	r3, [pc, #692]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f06:	f7fb fc13 	bl	8004730 <HAL_GetTick>
 8008f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f0c:	e008      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f0e:	f7fb fc0f 	bl	8004730 <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d901      	bls.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e18b      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f20:	4ba6      	ldr	r3, [pc, #664]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1f0      	bne.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d009      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	019a      	lsls	r2, r3, #6
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	071b      	lsls	r3, r3, #28
 8008f44:	499d      	ldr	r1, [pc, #628]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01f      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f58:	4b98      	ldr	r3, [pc, #608]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f5e:	0f1b      	lsrs	r3, r3, #28
 8008f60:	f003 0307 	and.w	r3, r3, #7
 8008f64:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	019a      	lsls	r2, r3, #6
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	061b      	lsls	r3, r3, #24
 8008f72:	431a      	orrs	r2, r3
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	071b      	lsls	r3, r3, #28
 8008f78:	4990      	ldr	r1, [pc, #576]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008f80:	4b8e      	ldr	r3, [pc, #568]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f86:	f023 021f 	bic.w	r2, r3, #31
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	498a      	ldr	r1, [pc, #552]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00d      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	019a      	lsls	r2, r3, #6
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	061b      	lsls	r3, r3, #24
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	071b      	lsls	r3, r3, #28
 8008fb8:	4980      	ldr	r1, [pc, #512]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008fc0:	4b7d      	ldr	r3, [pc, #500]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fc6:	f7fb fbb3 	bl	8004730 <HAL_GetTick>
 8008fca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fcc:	e008      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008fce:	f7fb fbaf 	bl	8004730 <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d901      	bls.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e12b      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fe0:	4b76      	ldr	r3, [pc, #472]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0f0      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d105      	bne.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009000:	2b00      	cmp	r3, #0
 8009002:	d079      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009004:	4b6e      	ldr	r3, [pc, #440]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800900a:	f7fb fb91 	bl	8004730 <HAL_GetTick>
 800900e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009010:	e008      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009012:	f7fb fb8d 	bl	8004730 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d901      	bls.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e109      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009024:	4b65      	ldr	r3, [pc, #404]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800902c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009030:	d0ef      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	d020      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800903e:	4b5f      	ldr	r3, [pc, #380]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009044:	0f1b      	lsrs	r3, r3, #28
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	019a      	lsls	r2, r3, #6
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	061b      	lsls	r3, r3, #24
 8009058:	431a      	orrs	r2, r3
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	071b      	lsls	r3, r3, #28
 800905e:	4957      	ldr	r1, [pc, #348]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009060:	4313      	orrs	r3, r2
 8009062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009066:	4b55      	ldr	r3, [pc, #340]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800906c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	3b01      	subs	r3, #1
 8009076:	021b      	lsls	r3, r3, #8
 8009078:	4950      	ldr	r1, [pc, #320]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800907a:	4313      	orrs	r3, r2
 800907c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0308 	and.w	r3, r3, #8
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01e      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800908c:	4b4b      	ldr	r3, [pc, #300]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800908e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009092:	0e1b      	lsrs	r3, r3, #24
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	019a      	lsls	r2, r3, #6
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	061b      	lsls	r3, r3, #24
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	071b      	lsls	r3, r3, #28
 80090ac:	4943      	ldr	r1, [pc, #268]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80090b4:	4b41      	ldr	r3, [pc, #260]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	493e      	ldr	r1, [pc, #248]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80090ca:	4b3d      	ldr	r3, [pc, #244]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090cc:	2201      	movs	r2, #1
 80090ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80090d0:	f7fb fb2e 	bl	8004730 <HAL_GetTick>
 80090d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80090d6:	e008      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80090d8:	f7fb fb2a 	bl	8004730 <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d901      	bls.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e0a6      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80090ea:	4b34      	ldr	r3, [pc, #208]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f6:	d1ef      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0320 	and.w	r3, r3, #32
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 808d 	beq.w	8009220 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	4b2c      	ldr	r3, [pc, #176]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	4a2b      	ldr	r2, [pc, #172]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009114:	6413      	str	r3, [r2, #64]	; 0x40
 8009116:	4b29      	ldr	r3, [pc, #164]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009122:	4b28      	ldr	r3, [pc, #160]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a27      	ldr	r2, [pc, #156]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800912c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800912e:	f7fb faff 	bl	8004730 <HAL_GetTick>
 8009132:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009134:	e008      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009136:	f7fb fafb 	bl	8004730 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e077      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009148:	4b1e      	ldr	r3, [pc, #120]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0f0      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009154:	4b19      	ldr	r3, [pc, #100]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800915c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d039      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	429a      	cmp	r2, r3
 8009170:	d032      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009172:	4b12      	ldr	r3, [pc, #72]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800917a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800917c:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800917e:	2201      	movs	r2, #1
 8009180:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009182:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009188:	4a0c      	ldr	r2, [pc, #48]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b01      	cmp	r3, #1
 8009198:	d11e      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800919a:	f7fb fac9 	bl	8004730 <HAL_GetTick>
 800919e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091a0:	e014      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091a2:	f7fb fac5 	bl	8004730 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d90b      	bls.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e03f      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80091b8:	42470068 	.word	0x42470068
 80091bc:	40023800 	.word	0x40023800
 80091c0:	42470070 	.word	0x42470070
 80091c4:	40007000 	.word	0x40007000
 80091c8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091cc:	4b1c      	ldr	r3, [pc, #112]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0e4      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091e4:	d10d      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80091e6:	4b16      	ldr	r3, [pc, #88]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091fa:	4911      	ldr	r1, [pc, #68]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	608b      	str	r3, [r1, #8]
 8009200:	e005      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009202:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	4a0e      	ldr	r2, [pc, #56]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009208:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800920c:	6093      	str	r3, [r2, #8]
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800921a:	4909      	ldr	r1, [pc, #36]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800921c:	4313      	orrs	r3, r2
 800921e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009232:	4b04      	ldr	r3, [pc, #16]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009234:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	40023800 	.word	0x40023800
 8009244:	424711e0 	.word	0x424711e0

08009248 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e025      	b.n	80092a8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7f7 fcd3 	bl	8000c1c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2202      	movs	r2, #2
 800927a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3304      	adds	r3, #4
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f001 fdb1 	bl	800adf0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	461a      	mov	r2, r3
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	f001 fe1c 	bl	800aed6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d101      	bne.n	80092cc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80092c8:	2302      	movs	r3, #2
 80092ca:	e018      	b.n	80092fe <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 fe79 	bl	800afd4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d104      	bne.n	80092f4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2205      	movs	r2, #5
 80092ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80092f2:	e003      	b.n	80092fc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b082      	sub	sp, #8
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d101      	bne.n	8009320 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800931c:	2302      	movs	r3, #2
 800931e:	e00e      	b.n	800933e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f001 fe8c 	bl	800b04c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e056      	b.n	8009406 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7f8 fc04 	bl	8001b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800938e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	431a      	orrs	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	431a      	orrs	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093b4:	431a      	orrs	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	431a      	orrs	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	ea42 0103 	orr.w	r1, r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	0c1b      	lsrs	r3, r3, #16
 80093d6:	f003 0104 	and.w	r1, r3, #4
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69da      	ldr	r2, [r3, #28]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e01a      	b.n	8009456 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009436:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7f8 fbe9 	bl	8001c10 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b088      	sub	sp, #32
 8009462:	af00      	add	r7, sp, #0
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	4613      	mov	r3, r2
 800946c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009478:	2b01      	cmp	r3, #1
 800947a:	d101      	bne.n	8009480 <HAL_SPI_Transmit+0x22>
 800947c:	2302      	movs	r3, #2
 800947e:	e11e      	b.n	80096be <HAL_SPI_Transmit+0x260>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009488:	f7fb f952 	bl	8004730 <HAL_GetTick>
 800948c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b01      	cmp	r3, #1
 800949c:	d002      	beq.n	80094a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800949e:	2302      	movs	r3, #2
 80094a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094a2:	e103      	b.n	80096ac <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <HAL_SPI_Transmit+0x52>
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d102      	bne.n	80094b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094b4:	e0fa      	b.n	80096ac <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2203      	movs	r2, #3
 80094ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	88fa      	ldrh	r2, [r7, #6]
 80094ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	88fa      	ldrh	r2, [r7, #6]
 80094d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094fc:	d107      	bne.n	800950e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800950c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	d007      	beq.n	800952c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800952a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009534:	d14b      	bne.n	80095ce <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <HAL_SPI_Transmit+0xe6>
 800953e:	8afb      	ldrh	r3, [r7, #22]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d13e      	bne.n	80095c2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009548:	881a      	ldrh	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009554:	1c9a      	adds	r2, r3, #2
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800955e:	b29b      	uxth	r3, r3
 8009560:	3b01      	subs	r3, #1
 8009562:	b29a      	uxth	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009568:	e02b      	b.n	80095c2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b02      	cmp	r3, #2
 8009576:	d112      	bne.n	800959e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	881a      	ldrh	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009588:	1c9a      	adds	r2, r3, #2
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	86da      	strh	r2, [r3, #54]	; 0x36
 800959c:	e011      	b.n	80095c2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800959e:	f7fb f8c7 	bl	8004730 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d803      	bhi.n	80095b6 <HAL_SPI_Transmit+0x158>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d102      	bne.n	80095bc <HAL_SPI_Transmit+0x15e>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095c0:	e074      	b.n	80096ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1ce      	bne.n	800956a <HAL_SPI_Transmit+0x10c>
 80095cc:	e04c      	b.n	8009668 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <HAL_SPI_Transmit+0x17e>
 80095d6:	8afb      	ldrh	r3, [r7, #22]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d140      	bne.n	800965e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	330c      	adds	r3, #12
 80095e6:	7812      	ldrb	r2, [r2, #0]
 80095e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009602:	e02c      	b.n	800965e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b02      	cmp	r3, #2
 8009610:	d113      	bne.n	800963a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	330c      	adds	r3, #12
 800961c:	7812      	ldrb	r2, [r2, #0]
 800961e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	86da      	strh	r2, [r3, #54]	; 0x36
 8009638:	e011      	b.n	800965e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800963a:	f7fb f879 	bl	8004730 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d803      	bhi.n	8009652 <HAL_SPI_Transmit+0x1f4>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d102      	bne.n	8009658 <HAL_SPI_Transmit+0x1fa>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800965c:	e026      	b.n	80096ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009662:	b29b      	uxth	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1cd      	bne.n	8009604 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 fbb3 	bl	8009dd8 <SPI_EndRxTxTransaction>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009686:	2300      	movs	r3, #0
 8009688:	613b      	str	r3, [r7, #16]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	613b      	str	r3, [r7, #16]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	77fb      	strb	r3, [r7, #31]
 80096a8:	e000      	b.n	80096ac <HAL_SPI_Transmit+0x24e>
  }

error:
 80096aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3720      	adds	r7, #32
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b088      	sub	sp, #32
 80096ca:	af02      	add	r7, sp, #8
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	603b      	str	r3, [r7, #0]
 80096d2:	4613      	mov	r3, r2
 80096d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096e2:	d112      	bne.n	800970a <HAL_SPI_Receive+0x44>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10e      	bne.n	800970a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2204      	movs	r2, #4
 80096f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80096f4:	88fa      	ldrh	r2, [r7, #6]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	4613      	mov	r3, r2
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f8e9 	bl	80098d8 <HAL_SPI_TransmitReceive>
 8009706:	4603      	mov	r3, r0
 8009708:	e0e2      	b.n	80098d0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009710:	2b01      	cmp	r3, #1
 8009712:	d101      	bne.n	8009718 <HAL_SPI_Receive+0x52>
 8009714:	2302      	movs	r3, #2
 8009716:	e0db      	b.n	80098d0 <HAL_SPI_Receive+0x20a>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009720:	f7fb f806 	bl	8004730 <HAL_GetTick>
 8009724:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b01      	cmp	r3, #1
 8009730:	d002      	beq.n	8009738 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009732:	2302      	movs	r3, #2
 8009734:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009736:	e0c2      	b.n	80098be <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <HAL_SPI_Receive+0x7e>
 800973e:	88fb      	ldrh	r3, [r7, #6]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d102      	bne.n	800974a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009748:	e0b9      	b.n	80098be <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2204      	movs	r2, #4
 800974e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	88fa      	ldrh	r2, [r7, #6]
 8009762:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	88fa      	ldrh	r2, [r7, #6]
 8009768:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009790:	d107      	bne.n	80097a2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b40      	cmp	r3, #64	; 0x40
 80097ae:	d007      	beq.n	80097c0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d162      	bne.n	800988e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80097c8:	e02e      	b.n	8009828 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d115      	bne.n	8009804 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f103 020c 	add.w	r2, r3, #12
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	b2d2      	uxtb	r2, r2
 80097e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009802:	e011      	b.n	8009828 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009804:	f7fa ff94 	bl	8004730 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d803      	bhi.n	800981c <HAL_SPI_Receive+0x156>
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d102      	bne.n	8009822 <HAL_SPI_Receive+0x15c>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009826:	e04a      	b.n	80098be <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800982c:	b29b      	uxth	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1cb      	bne.n	80097ca <HAL_SPI_Receive+0x104>
 8009832:	e031      	b.n	8009898 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b01      	cmp	r3, #1
 8009840:	d113      	bne.n	800986a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	b292      	uxth	r2, r2
 800984e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	1c9a      	adds	r2, r3, #2
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009868:	e011      	b.n	800988e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800986a:	f7fa ff61 	bl	8004730 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d803      	bhi.n	8009882 <HAL_SPI_Receive+0x1bc>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009880:	d102      	bne.n	8009888 <HAL_SPI_Receive+0x1c2>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800988c:	e017      	b.n	80098be <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009892:	b29b      	uxth	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1cd      	bne.n	8009834 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 fa35 	bl	8009d0c <SPI_EndRxTransaction>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2220      	movs	r2, #32
 80098ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d002      	beq.n	80098bc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	75fb      	strb	r3, [r7, #23]
 80098ba:	e000      	b.n	80098be <HAL_SPI_Receive+0x1f8>
  }

error :
 80098bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08c      	sub	sp, #48	; 0x30
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098e6:	2301      	movs	r3, #1
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d101      	bne.n	80098fe <HAL_SPI_TransmitReceive+0x26>
 80098fa:	2302      	movs	r3, #2
 80098fc:	e18a      	b.n	8009c14 <HAL_SPI_TransmitReceive+0x33c>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009906:	f7fa ff13 	bl	8004730 <HAL_GetTick>
 800990a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800991c:	887b      	ldrh	r3, [r7, #2]
 800991e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009924:	2b01      	cmp	r3, #1
 8009926:	d00f      	beq.n	8009948 <HAL_SPI_TransmitReceive+0x70>
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800992e:	d107      	bne.n	8009940 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d103      	bne.n	8009940 <HAL_SPI_TransmitReceive+0x68>
 8009938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800993c:	2b04      	cmp	r3, #4
 800993e:	d003      	beq.n	8009948 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009940:	2302      	movs	r3, #2
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009946:	e15b      	b.n	8009c00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d005      	beq.n	800995a <HAL_SPI_TransmitReceive+0x82>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <HAL_SPI_TransmitReceive+0x82>
 8009954:	887b      	ldrh	r3, [r7, #2]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d103      	bne.n	8009962 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009960:	e14e      	b.n	8009c00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b04      	cmp	r3, #4
 800996c:	d003      	beq.n	8009976 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2205      	movs	r2, #5
 8009972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	887a      	ldrh	r2, [r7, #2]
 8009986:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	887a      	ldrh	r2, [r7, #2]
 800998c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	887a      	ldrh	r2, [r7, #2]
 8009998:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	887a      	ldrh	r2, [r7, #2]
 800999e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d007      	beq.n	80099ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099d2:	d178      	bne.n	8009ac6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <HAL_SPI_TransmitReceive+0x10a>
 80099dc:	8b7b      	ldrh	r3, [r7, #26]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d166      	bne.n	8009ab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e6:	881a      	ldrh	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f2:	1c9a      	adds	r2, r3, #2
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	3b01      	subs	r3, #1
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a06:	e053      	b.n	8009ab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d11b      	bne.n	8009a4e <HAL_SPI_TransmitReceive+0x176>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d016      	beq.n	8009a4e <HAL_SPI_TransmitReceive+0x176>
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d113      	bne.n	8009a4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2a:	881a      	ldrh	r2, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a36:	1c9a      	adds	r2, r3, #2
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d119      	bne.n	8009a90 <HAL_SPI_TransmitReceive+0x1b8>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d014      	beq.n	8009a90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	b292      	uxth	r2, r2
 8009a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	1c9a      	adds	r2, r3, #2
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b01      	subs	r3, #1
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a90:	f7fa fe4e 	bl	8004730 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d807      	bhi.n	8009ab0 <HAL_SPI_TransmitReceive+0x1d8>
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa6:	d003      	beq.n	8009ab0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009aae:	e0a7      	b.n	8009c00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1a6      	bne.n	8009a08 <HAL_SPI_TransmitReceive+0x130>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1a1      	bne.n	8009a08 <HAL_SPI_TransmitReceive+0x130>
 8009ac4:	e07c      	b.n	8009bc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <HAL_SPI_TransmitReceive+0x1fc>
 8009ace:	8b7b      	ldrh	r3, [r7, #26]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d16b      	bne.n	8009bac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	330c      	adds	r3, #12
 8009ade:	7812      	ldrb	r2, [r2, #0]
 8009ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	3b01      	subs	r3, #1
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009afa:	e057      	b.n	8009bac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d11c      	bne.n	8009b44 <HAL_SPI_TransmitReceive+0x26c>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d017      	beq.n	8009b44 <HAL_SPI_TransmitReceive+0x26c>
 8009b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d114      	bne.n	8009b44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	330c      	adds	r3, #12
 8009b24:	7812      	ldrb	r2, [r2, #0]
 8009b26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d119      	bne.n	8009b86 <HAL_SPI_TransmitReceive+0x2ae>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d014      	beq.n	8009b86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	b2d2      	uxtb	r2, r2
 8009b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b82:	2301      	movs	r3, #1
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b86:	f7fa fdd3 	bl	8004730 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d803      	bhi.n	8009b9e <HAL_SPI_TransmitReceive+0x2c6>
 8009b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9c:	d102      	bne.n	8009ba4 <HAL_SPI_TransmitReceive+0x2cc>
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009baa:	e029      	b.n	8009c00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1a2      	bne.n	8009afc <HAL_SPI_TransmitReceive+0x224>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d19d      	bne.n	8009afc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 f907 	bl	8009dd8 <SPI_EndRxTxTransaction>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009bdc:	e010      	b.n	8009c00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009be6:	2300      	movs	r3, #0
 8009be8:	617b      	str	r3, [r7, #20]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	617b      	str	r3, [r7, #20]
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	e000      	b.n	8009c00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3730      	adds	r7, #48	; 0x30
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c2a:	b2db      	uxtb	r3, r3
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	603b      	str	r3, [r7, #0]
 8009c44:	4613      	mov	r3, r2
 8009c46:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c48:	e04c      	b.n	8009ce4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d048      	beq.n	8009ce4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009c52:	f7fa fd6d 	bl	8004730 <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d902      	bls.n	8009c68 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d13d      	bne.n	8009ce4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c80:	d111      	bne.n	8009ca6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c8a:	d004      	beq.n	8009c96 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c94:	d107      	bne.n	8009ca6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ca4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cae:	d10f      	bne.n	8009cd0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e00f      	b.n	8009d04 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4013      	ands	r3, r2
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	bf0c      	ite	eq
 8009cf4:	2301      	moveq	r3, #1
 8009cf6:	2300      	movne	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d1a3      	bne.n	8009c4a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d20:	d111      	bne.n	8009d46 <SPI_EndRxTransaction+0x3a>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d2a:	d004      	beq.n	8009d36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d34:	d107      	bne.n	8009d46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d4e:	d12a      	bne.n	8009da6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d58:	d012      	beq.n	8009d80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2200      	movs	r2, #0
 8009d62:	2180      	movs	r1, #128	; 0x80
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff ff67 	bl	8009c38 <SPI_WaitFlagStateUntilTimeout>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d02d      	beq.n	8009dcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d74:	f043 0220 	orr.w	r2, r3, #32
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e026      	b.n	8009dce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2200      	movs	r2, #0
 8009d88:	2101      	movs	r1, #1
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f7ff ff54 	bl	8009c38 <SPI_WaitFlagStateUntilTimeout>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01a      	beq.n	8009dcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9a:	f043 0220 	orr.w	r2, r3, #32
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e013      	b.n	8009dce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	2101      	movs	r1, #1
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7ff ff41 	bl	8009c38 <SPI_WaitFlagStateUntilTimeout>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d007      	beq.n	8009dcc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc0:	f043 0220 	orr.w	r2, r3, #32
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e000      	b.n	8009dce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009de4:	4b1b      	ldr	r3, [pc, #108]	; (8009e54 <SPI_EndRxTxTransaction+0x7c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a1b      	ldr	r2, [pc, #108]	; (8009e58 <SPI_EndRxTxTransaction+0x80>)
 8009dea:	fba2 2303 	umull	r2, r3, r2, r3
 8009dee:	0d5b      	lsrs	r3, r3, #21
 8009df0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009df4:	fb02 f303 	mul.w	r3, r2, r3
 8009df8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e02:	d112      	bne.n	8009e2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2180      	movs	r1, #128	; 0x80
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7ff ff12 	bl	8009c38 <SPI_WaitFlagStateUntilTimeout>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d016      	beq.n	8009e48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1e:	f043 0220 	orr.w	r2, r3, #32
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e00f      	b.n	8009e4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00a      	beq.n	8009e46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	3b01      	subs	r3, #1
 8009e34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e40:	2b80      	cmp	r3, #128	; 0x80
 8009e42:	d0f2      	beq.n	8009e2a <SPI_EndRxTxTransaction+0x52>
 8009e44:	e000      	b.n	8009e48 <SPI_EndRxTxTransaction+0x70>
        break;
 8009e46:	bf00      	nop
  }

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000000 	.word	0x20000000
 8009e58:	165e9f81 	.word	0x165e9f81

08009e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e01d      	b.n	8009eaa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d106      	bne.n	8009e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7f8 f84e 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3304      	adds	r3, #4
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f000 fa14 	bl	800a2c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f042 0201 	orr.w	r2, r2, #1
 8009ec8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b06      	cmp	r3, #6
 8009eda:	d007      	beq.n	8009eec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f042 0201 	orr.w	r2, r2, #1
 8009eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d122      	bne.n	8009f56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d11b      	bne.n	8009f56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f06f 0202 	mvn.w	r2, #2
 8009f26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	f003 0303 	and.w	r3, r3, #3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f9a5 	bl	800a28c <HAL_TIM_IC_CaptureCallback>
 8009f42:	e005      	b.n	8009f50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f997 	bl	800a278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f9a8 	bl	800a2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d122      	bne.n	8009faa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	f003 0304 	and.w	r3, r3, #4
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d11b      	bne.n	8009faa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f06f 0204 	mvn.w	r2, #4
 8009f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f97b 	bl	800a28c <HAL_TIM_IC_CaptureCallback>
 8009f96:	e005      	b.n	8009fa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f96d 	bl	800a278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f97e 	bl	800a2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	f003 0308 	and.w	r3, r3, #8
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d122      	bne.n	8009ffe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	f003 0308 	and.w	r3, r3, #8
 8009fc2:	2b08      	cmp	r3, #8
 8009fc4:	d11b      	bne.n	8009ffe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f06f 0208 	mvn.w	r2, #8
 8009fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2204      	movs	r2, #4
 8009fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	f003 0303 	and.w	r3, r3, #3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f951 	bl	800a28c <HAL_TIM_IC_CaptureCallback>
 8009fea:	e005      	b.n	8009ff8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f943 	bl	800a278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f954 	bl	800a2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	f003 0310 	and.w	r3, r3, #16
 800a008:	2b10      	cmp	r3, #16
 800a00a:	d122      	bne.n	800a052 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f003 0310 	and.w	r3, r3, #16
 800a016:	2b10      	cmp	r3, #16
 800a018:	d11b      	bne.n	800a052 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f06f 0210 	mvn.w	r2, #16
 800a022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2208      	movs	r2, #8
 800a028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a034:	2b00      	cmp	r3, #0
 800a036:	d003      	beq.n	800a040 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f927 	bl	800a28c <HAL_TIM_IC_CaptureCallback>
 800a03e:	e005      	b.n	800a04c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f919 	bl	800a278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f92a 	bl	800a2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d10e      	bne.n	800a07e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d107      	bne.n	800a07e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f06f 0201 	mvn.w	r2, #1
 800a076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7f7 fca7 	bl	80019cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a088:	2b80      	cmp	r3, #128	; 0x80
 800a08a:	d10e      	bne.n	800a0aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a096:	2b80      	cmp	r3, #128	; 0x80
 800a098:	d107      	bne.n	800a0aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 facf 	bl	800a648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	d10e      	bne.n	800a0d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c2:	2b40      	cmp	r3, #64	; 0x40
 800a0c4:	d107      	bne.n	800a0d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f8ef 	bl	800a2b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b20      	cmp	r3, #32
 800a0e2:	d10e      	bne.n	800a102 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f003 0320 	and.w	r3, r3, #32
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	d107      	bne.n	800a102 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f06f 0220 	mvn.w	r2, #32
 800a0fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fa99 	bl	800a634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a102:	bf00      	nop
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_TIM_ConfigClockSource+0x18>
 800a11e:	2302      	movs	r3, #2
 800a120:	e0a6      	b.n	800a270 <HAL_TIM_ConfigClockSource+0x166>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2202      	movs	r2, #2
 800a12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a140:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a148:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b40      	cmp	r3, #64	; 0x40
 800a158:	d067      	beq.n	800a22a <HAL_TIM_ConfigClockSource+0x120>
 800a15a:	2b40      	cmp	r3, #64	; 0x40
 800a15c:	d80b      	bhi.n	800a176 <HAL_TIM_ConfigClockSource+0x6c>
 800a15e:	2b10      	cmp	r3, #16
 800a160:	d073      	beq.n	800a24a <HAL_TIM_ConfigClockSource+0x140>
 800a162:	2b10      	cmp	r3, #16
 800a164:	d802      	bhi.n	800a16c <HAL_TIM_ConfigClockSource+0x62>
 800a166:	2b00      	cmp	r3, #0
 800a168:	d06f      	beq.n	800a24a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a16a:	e078      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a16c:	2b20      	cmp	r3, #32
 800a16e:	d06c      	beq.n	800a24a <HAL_TIM_ConfigClockSource+0x140>
 800a170:	2b30      	cmp	r3, #48	; 0x30
 800a172:	d06a      	beq.n	800a24a <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a174:	e073      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a176:	2b70      	cmp	r3, #112	; 0x70
 800a178:	d00d      	beq.n	800a196 <HAL_TIM_ConfigClockSource+0x8c>
 800a17a:	2b70      	cmp	r3, #112	; 0x70
 800a17c:	d804      	bhi.n	800a188 <HAL_TIM_ConfigClockSource+0x7e>
 800a17e:	2b50      	cmp	r3, #80	; 0x50
 800a180:	d033      	beq.n	800a1ea <HAL_TIM_ConfigClockSource+0xe0>
 800a182:	2b60      	cmp	r3, #96	; 0x60
 800a184:	d041      	beq.n	800a20a <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a186:	e06a      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a18c:	d066      	beq.n	800a25c <HAL_TIM_ConfigClockSource+0x152>
 800a18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a192:	d017      	beq.n	800a1c4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a194:	e063      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6899      	ldr	r1, [r3, #8]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f000 f9a9 	bl	800a4fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	609a      	str	r2, [r3, #8]
      break;
 800a1c2:	e04c      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	6899      	ldr	r1, [r3, #8]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f000 f992 	bl	800a4fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689a      	ldr	r2, [r3, #8]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e6:	609a      	str	r2, [r3, #8]
      break;
 800a1e8:	e039      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	6859      	ldr	r1, [r3, #4]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f000 f906 	bl	800a408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2150      	movs	r1, #80	; 0x50
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f95f 	bl	800a4c6 <TIM_ITRx_SetConfig>
      break;
 800a208:	e029      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	6859      	ldr	r1, [r3, #4]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	461a      	mov	r2, r3
 800a218:	f000 f925 	bl	800a466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2160      	movs	r1, #96	; 0x60
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f94f 	bl	800a4c6 <TIM_ITRx_SetConfig>
      break;
 800a228:	e019      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	6859      	ldr	r1, [r3, #4]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	461a      	mov	r2, r3
 800a238:	f000 f8e6 	bl	800a408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2140      	movs	r1, #64	; 0x40
 800a242:	4618      	mov	r0, r3
 800a244:	f000 f93f 	bl	800a4c6 <TIM_ITRx_SetConfig>
      break;
 800a248:	e009      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4619      	mov	r1, r3
 800a254:	4610      	mov	r0, r2
 800a256:	f000 f936 	bl	800a4c6 <TIM_ITRx_SetConfig>
      break;
 800a25a:	e000      	b.n	800a25e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a25c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a40      	ldr	r2, [pc, #256]	; (800a3dc <TIM_Base_SetConfig+0x114>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d013      	beq.n	800a308 <TIM_Base_SetConfig+0x40>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2e6:	d00f      	beq.n	800a308 <TIM_Base_SetConfig+0x40>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a3d      	ldr	r2, [pc, #244]	; (800a3e0 <TIM_Base_SetConfig+0x118>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d00b      	beq.n	800a308 <TIM_Base_SetConfig+0x40>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a3c      	ldr	r2, [pc, #240]	; (800a3e4 <TIM_Base_SetConfig+0x11c>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d007      	beq.n	800a308 <TIM_Base_SetConfig+0x40>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a3b      	ldr	r2, [pc, #236]	; (800a3e8 <TIM_Base_SetConfig+0x120>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d003      	beq.n	800a308 <TIM_Base_SetConfig+0x40>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a3a      	ldr	r2, [pc, #232]	; (800a3ec <TIM_Base_SetConfig+0x124>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d108      	bne.n	800a31a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a30e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a2f      	ldr	r2, [pc, #188]	; (800a3dc <TIM_Base_SetConfig+0x114>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d02b      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a328:	d027      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a2c      	ldr	r2, [pc, #176]	; (800a3e0 <TIM_Base_SetConfig+0x118>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d023      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a2b      	ldr	r2, [pc, #172]	; (800a3e4 <TIM_Base_SetConfig+0x11c>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d01f      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a2a      	ldr	r2, [pc, #168]	; (800a3e8 <TIM_Base_SetConfig+0x120>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d01b      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a29      	ldr	r2, [pc, #164]	; (800a3ec <TIM_Base_SetConfig+0x124>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d017      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a28      	ldr	r2, [pc, #160]	; (800a3f0 <TIM_Base_SetConfig+0x128>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d013      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a27      	ldr	r2, [pc, #156]	; (800a3f4 <TIM_Base_SetConfig+0x12c>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00f      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a26      	ldr	r2, [pc, #152]	; (800a3f8 <TIM_Base_SetConfig+0x130>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d00b      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a25      	ldr	r2, [pc, #148]	; (800a3fc <TIM_Base_SetConfig+0x134>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d007      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a24      	ldr	r2, [pc, #144]	; (800a400 <TIM_Base_SetConfig+0x138>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d003      	beq.n	800a37a <TIM_Base_SetConfig+0xb2>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a23      	ldr	r2, [pc, #140]	; (800a404 <TIM_Base_SetConfig+0x13c>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d108      	bne.n	800a38c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	4313      	orrs	r3, r2
 800a398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a0a      	ldr	r2, [pc, #40]	; (800a3dc <TIM_Base_SetConfig+0x114>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d003      	beq.n	800a3c0 <TIM_Base_SetConfig+0xf8>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a0c      	ldr	r2, [pc, #48]	; (800a3ec <TIM_Base_SetConfig+0x124>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d103      	bne.n	800a3c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	615a      	str	r2, [r3, #20]
}
 800a3ce:	bf00      	nop
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	40010000 	.word	0x40010000
 800a3e0:	40000400 	.word	0x40000400
 800a3e4:	40000800 	.word	0x40000800
 800a3e8:	40000c00 	.word	0x40000c00
 800a3ec:	40010400 	.word	0x40010400
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	40014400 	.word	0x40014400
 800a3f8:	40014800 	.word	0x40014800
 800a3fc:	40001800 	.word	0x40001800
 800a400:	40001c00 	.word	0x40001c00
 800a404:	40002000 	.word	0x40002000

0800a408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6a1b      	ldr	r3, [r3, #32]
 800a418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	f023 0201 	bic.w	r2, r3, #1
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	011b      	lsls	r3, r3, #4
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f023 030a 	bic.w	r3, r3, #10
 800a444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	621a      	str	r2, [r3, #32]
}
 800a45a:	bf00      	nop
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a466:	b480      	push	{r7}
 800a468:	b087      	sub	sp, #28
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	60f8      	str	r0, [r7, #12]
 800a46e:	60b9      	str	r1, [r7, #8]
 800a470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	f023 0210 	bic.w	r2, r3, #16
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	031b      	lsls	r3, r3, #12
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	4313      	orrs	r3, r2
 800a49a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	011b      	lsls	r3, r3, #4
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	621a      	str	r2, [r3, #32]
}
 800a4ba:	bf00      	nop
 800a4bc:	371c      	adds	r7, #28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	f043 0307 	orr.w	r3, r3, #7
 800a4e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	609a      	str	r2, [r3, #8]
}
 800a4f0:	bf00      	nop
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	021a      	lsls	r2, r3, #8
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	431a      	orrs	r2, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	4313      	orrs	r3, r2
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	4313      	orrs	r3, r2
 800a528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	609a      	str	r2, [r3, #8]
}
 800a530:	bf00      	nop
 800a532:	371c      	adds	r7, #28
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d101      	bne.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a550:	2302      	movs	r3, #2
 800a552:	e05a      	b.n	800a60a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a57a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	4313      	orrs	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a21      	ldr	r2, [pc, #132]	; (800a618 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d022      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a0:	d01d      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a1d      	ldr	r2, [pc, #116]	; (800a61c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d018      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a1b      	ldr	r2, [pc, #108]	; (800a620 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d013      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a1a      	ldr	r2, [pc, #104]	; (800a624 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00e      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a18      	ldr	r2, [pc, #96]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d009      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a17      	ldr	r2, [pc, #92]	; (800a62c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d004      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a15      	ldr	r2, [pc, #84]	; (800a630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d10c      	bne.n	800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	40010000 	.word	0x40010000
 800a61c:	40000400 	.word	0x40000400
 800a620:	40000800 	.word	0x40000800
 800a624:	40000c00 	.word	0x40000c00
 800a628:	40010400 	.word	0x40010400
 800a62c:	40014000 	.word	0x40014000
 800a630:	40001800 	.word	0x40001800

0800a634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e03f      	b.n	800a6ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7f7 fe8e 	bl	80023a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2224      	movs	r2, #36	; 0x24
 800a68c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a69e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f829 	bl	800a6f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	691a      	ldr	r2, [r3, #16]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	695a      	ldr	r2, [r3, #20]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	b085      	sub	sp, #20
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68da      	ldr	r2, [r3, #12]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	430a      	orrs	r2, r1
 800a716:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	431a      	orrs	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	431a      	orrs	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	69db      	ldr	r3, [r3, #28]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a73a:	f023 030c 	bic.w	r3, r3, #12
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6812      	ldr	r2, [r2, #0]
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	430b      	orrs	r3, r1
 800a746:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a766:	f040 818b 	bne.w	800aa80 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4ac1      	ldr	r2, [pc, #772]	; (800aa74 <UART_SetConfig+0x37c>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d005      	beq.n	800a780 <UART_SetConfig+0x88>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4abf      	ldr	r2, [pc, #764]	; (800aa78 <UART_SetConfig+0x380>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	f040 80bd 	bne.w	800a8fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a780:	f7fe fb5e 	bl	8008e40 <HAL_RCC_GetPCLK2Freq>
 800a784:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	461d      	mov	r5, r3
 800a78a:	f04f 0600 	mov.w	r6, #0
 800a78e:	46a8      	mov	r8, r5
 800a790:	46b1      	mov	r9, r6
 800a792:	eb18 0308 	adds.w	r3, r8, r8
 800a796:	eb49 0409 	adc.w	r4, r9, r9
 800a79a:	4698      	mov	r8, r3
 800a79c:	46a1      	mov	r9, r4
 800a79e:	eb18 0805 	adds.w	r8, r8, r5
 800a7a2:	eb49 0906 	adc.w	r9, r9, r6
 800a7a6:	f04f 0100 	mov.w	r1, #0
 800a7aa:	f04f 0200 	mov.w	r2, #0
 800a7ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a7b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7ba:	4688      	mov	r8, r1
 800a7bc:	4691      	mov	r9, r2
 800a7be:	eb18 0005 	adds.w	r0, r8, r5
 800a7c2:	eb49 0106 	adc.w	r1, r9, r6
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	461d      	mov	r5, r3
 800a7cc:	f04f 0600 	mov.w	r6, #0
 800a7d0:	196b      	adds	r3, r5, r5
 800a7d2:	eb46 0406 	adc.w	r4, r6, r6
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4623      	mov	r3, r4
 800a7da:	f7f5 fd09 	bl	80001f0 <__aeabi_uldivmod>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	4ba5      	ldr	r3, [pc, #660]	; (800aa7c <UART_SetConfig+0x384>)
 800a7e6:	fba3 2302 	umull	r2, r3, r3, r2
 800a7ea:	095b      	lsrs	r3, r3, #5
 800a7ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	461d      	mov	r5, r3
 800a7f4:	f04f 0600 	mov.w	r6, #0
 800a7f8:	46a9      	mov	r9, r5
 800a7fa:	46b2      	mov	sl, r6
 800a7fc:	eb19 0309 	adds.w	r3, r9, r9
 800a800:	eb4a 040a 	adc.w	r4, sl, sl
 800a804:	4699      	mov	r9, r3
 800a806:	46a2      	mov	sl, r4
 800a808:	eb19 0905 	adds.w	r9, r9, r5
 800a80c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a810:	f04f 0100 	mov.w	r1, #0
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a81c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a824:	4689      	mov	r9, r1
 800a826:	4692      	mov	sl, r2
 800a828:	eb19 0005 	adds.w	r0, r9, r5
 800a82c:	eb4a 0106 	adc.w	r1, sl, r6
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	461d      	mov	r5, r3
 800a836:	f04f 0600 	mov.w	r6, #0
 800a83a:	196b      	adds	r3, r5, r5
 800a83c:	eb46 0406 	adc.w	r4, r6, r6
 800a840:	461a      	mov	r2, r3
 800a842:	4623      	mov	r3, r4
 800a844:	f7f5 fcd4 	bl	80001f0 <__aeabi_uldivmod>
 800a848:	4603      	mov	r3, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	461a      	mov	r2, r3
 800a84e:	4b8b      	ldr	r3, [pc, #556]	; (800aa7c <UART_SetConfig+0x384>)
 800a850:	fba3 1302 	umull	r1, r3, r3, r2
 800a854:	095b      	lsrs	r3, r3, #5
 800a856:	2164      	movs	r1, #100	; 0x64
 800a858:	fb01 f303 	mul.w	r3, r1, r3
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	3332      	adds	r3, #50	; 0x32
 800a862:	4a86      	ldr	r2, [pc, #536]	; (800aa7c <UART_SetConfig+0x384>)
 800a864:	fba2 2303 	umull	r2, r3, r2, r3
 800a868:	095b      	lsrs	r3, r3, #5
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a870:	4498      	add	r8, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	461d      	mov	r5, r3
 800a876:	f04f 0600 	mov.w	r6, #0
 800a87a:	46a9      	mov	r9, r5
 800a87c:	46b2      	mov	sl, r6
 800a87e:	eb19 0309 	adds.w	r3, r9, r9
 800a882:	eb4a 040a 	adc.w	r4, sl, sl
 800a886:	4699      	mov	r9, r3
 800a888:	46a2      	mov	sl, r4
 800a88a:	eb19 0905 	adds.w	r9, r9, r5
 800a88e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a892:	f04f 0100 	mov.w	r1, #0
 800a896:	f04f 0200 	mov.w	r2, #0
 800a89a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a89e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8a6:	4689      	mov	r9, r1
 800a8a8:	4692      	mov	sl, r2
 800a8aa:	eb19 0005 	adds.w	r0, r9, r5
 800a8ae:	eb4a 0106 	adc.w	r1, sl, r6
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	461d      	mov	r5, r3
 800a8b8:	f04f 0600 	mov.w	r6, #0
 800a8bc:	196b      	adds	r3, r5, r5
 800a8be:	eb46 0406 	adc.w	r4, r6, r6
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4623      	mov	r3, r4
 800a8c6:	f7f5 fc93 	bl	80001f0 <__aeabi_uldivmod>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4b6a      	ldr	r3, [pc, #424]	; (800aa7c <UART_SetConfig+0x384>)
 800a8d2:	fba3 1302 	umull	r1, r3, r3, r2
 800a8d6:	095b      	lsrs	r3, r3, #5
 800a8d8:	2164      	movs	r1, #100	; 0x64
 800a8da:	fb01 f303 	mul.w	r3, r1, r3
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	3332      	adds	r3, #50	; 0x32
 800a8e4:	4a65      	ldr	r2, [pc, #404]	; (800aa7c <UART_SetConfig+0x384>)
 800a8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ea:	095b      	lsrs	r3, r3, #5
 800a8ec:	f003 0207 	and.w	r2, r3, #7
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4442      	add	r2, r8
 800a8f6:	609a      	str	r2, [r3, #8]
 800a8f8:	e26f      	b.n	800adda <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8fa:	f7fe fa8d 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 800a8fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	461d      	mov	r5, r3
 800a904:	f04f 0600 	mov.w	r6, #0
 800a908:	46a8      	mov	r8, r5
 800a90a:	46b1      	mov	r9, r6
 800a90c:	eb18 0308 	adds.w	r3, r8, r8
 800a910:	eb49 0409 	adc.w	r4, r9, r9
 800a914:	4698      	mov	r8, r3
 800a916:	46a1      	mov	r9, r4
 800a918:	eb18 0805 	adds.w	r8, r8, r5
 800a91c:	eb49 0906 	adc.w	r9, r9, r6
 800a920:	f04f 0100 	mov.w	r1, #0
 800a924:	f04f 0200 	mov.w	r2, #0
 800a928:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a92c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a930:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a934:	4688      	mov	r8, r1
 800a936:	4691      	mov	r9, r2
 800a938:	eb18 0005 	adds.w	r0, r8, r5
 800a93c:	eb49 0106 	adc.w	r1, r9, r6
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	461d      	mov	r5, r3
 800a946:	f04f 0600 	mov.w	r6, #0
 800a94a:	196b      	adds	r3, r5, r5
 800a94c:	eb46 0406 	adc.w	r4, r6, r6
 800a950:	461a      	mov	r2, r3
 800a952:	4623      	mov	r3, r4
 800a954:	f7f5 fc4c 	bl	80001f0 <__aeabi_uldivmod>
 800a958:	4603      	mov	r3, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	461a      	mov	r2, r3
 800a95e:	4b47      	ldr	r3, [pc, #284]	; (800aa7c <UART_SetConfig+0x384>)
 800a960:	fba3 2302 	umull	r2, r3, r3, r2
 800a964:	095b      	lsrs	r3, r3, #5
 800a966:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	461d      	mov	r5, r3
 800a96e:	f04f 0600 	mov.w	r6, #0
 800a972:	46a9      	mov	r9, r5
 800a974:	46b2      	mov	sl, r6
 800a976:	eb19 0309 	adds.w	r3, r9, r9
 800a97a:	eb4a 040a 	adc.w	r4, sl, sl
 800a97e:	4699      	mov	r9, r3
 800a980:	46a2      	mov	sl, r4
 800a982:	eb19 0905 	adds.w	r9, r9, r5
 800a986:	eb4a 0a06 	adc.w	sl, sl, r6
 800a98a:	f04f 0100 	mov.w	r1, #0
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a99a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a99e:	4689      	mov	r9, r1
 800a9a0:	4692      	mov	sl, r2
 800a9a2:	eb19 0005 	adds.w	r0, r9, r5
 800a9a6:	eb4a 0106 	adc.w	r1, sl, r6
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	461d      	mov	r5, r3
 800a9b0:	f04f 0600 	mov.w	r6, #0
 800a9b4:	196b      	adds	r3, r5, r5
 800a9b6:	eb46 0406 	adc.w	r4, r6, r6
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	4623      	mov	r3, r4
 800a9be:	f7f5 fc17 	bl	80001f0 <__aeabi_uldivmod>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	4b2c      	ldr	r3, [pc, #176]	; (800aa7c <UART_SetConfig+0x384>)
 800a9ca:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ce:	095b      	lsrs	r3, r3, #5
 800a9d0:	2164      	movs	r1, #100	; 0x64
 800a9d2:	fb01 f303 	mul.w	r3, r1, r3
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	3332      	adds	r3, #50	; 0x32
 800a9dc:	4a27      	ldr	r2, [pc, #156]	; (800aa7c <UART_SetConfig+0x384>)
 800a9de:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e2:	095b      	lsrs	r3, r3, #5
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9ea:	4498      	add	r8, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	461d      	mov	r5, r3
 800a9f0:	f04f 0600 	mov.w	r6, #0
 800a9f4:	46a9      	mov	r9, r5
 800a9f6:	46b2      	mov	sl, r6
 800a9f8:	eb19 0309 	adds.w	r3, r9, r9
 800a9fc:	eb4a 040a 	adc.w	r4, sl, sl
 800aa00:	4699      	mov	r9, r3
 800aa02:	46a2      	mov	sl, r4
 800aa04:	eb19 0905 	adds.w	r9, r9, r5
 800aa08:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa0c:	f04f 0100 	mov.w	r1, #0
 800aa10:	f04f 0200 	mov.w	r2, #0
 800aa14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa20:	4689      	mov	r9, r1
 800aa22:	4692      	mov	sl, r2
 800aa24:	eb19 0005 	adds.w	r0, r9, r5
 800aa28:	eb4a 0106 	adc.w	r1, sl, r6
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	461d      	mov	r5, r3
 800aa32:	f04f 0600 	mov.w	r6, #0
 800aa36:	196b      	adds	r3, r5, r5
 800aa38:	eb46 0406 	adc.w	r4, r6, r6
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	4623      	mov	r3, r4
 800aa40:	f7f5 fbd6 	bl	80001f0 <__aeabi_uldivmod>
 800aa44:	4603      	mov	r3, r0
 800aa46:	460c      	mov	r4, r1
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <UART_SetConfig+0x384>)
 800aa4c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa50:	095b      	lsrs	r3, r3, #5
 800aa52:	2164      	movs	r1, #100	; 0x64
 800aa54:	fb01 f303 	mul.w	r3, r1, r3
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	3332      	adds	r3, #50	; 0x32
 800aa5e:	4a07      	ldr	r2, [pc, #28]	; (800aa7c <UART_SetConfig+0x384>)
 800aa60:	fba2 2303 	umull	r2, r3, r2, r3
 800aa64:	095b      	lsrs	r3, r3, #5
 800aa66:	f003 0207 	and.w	r2, r3, #7
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4442      	add	r2, r8
 800aa70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aa72:	e1b2      	b.n	800adda <UART_SetConfig+0x6e2>
 800aa74:	40011000 	.word	0x40011000
 800aa78:	40011400 	.word	0x40011400
 800aa7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4ad7      	ldr	r2, [pc, #860]	; (800ade4 <UART_SetConfig+0x6ec>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d005      	beq.n	800aa96 <UART_SetConfig+0x39e>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4ad6      	ldr	r2, [pc, #856]	; (800ade8 <UART_SetConfig+0x6f0>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	f040 80d1 	bne.w	800ac38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa96:	f7fe f9d3 	bl	8008e40 <HAL_RCC_GetPCLK2Freq>
 800aa9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	469a      	mov	sl, r3
 800aaa0:	f04f 0b00 	mov.w	fp, #0
 800aaa4:	46d0      	mov	r8, sl
 800aaa6:	46d9      	mov	r9, fp
 800aaa8:	eb18 0308 	adds.w	r3, r8, r8
 800aaac:	eb49 0409 	adc.w	r4, r9, r9
 800aab0:	4698      	mov	r8, r3
 800aab2:	46a1      	mov	r9, r4
 800aab4:	eb18 080a 	adds.w	r8, r8, sl
 800aab8:	eb49 090b 	adc.w	r9, r9, fp
 800aabc:	f04f 0100 	mov.w	r1, #0
 800aac0:	f04f 0200 	mov.w	r2, #0
 800aac4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aac8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aacc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aad0:	4688      	mov	r8, r1
 800aad2:	4691      	mov	r9, r2
 800aad4:	eb1a 0508 	adds.w	r5, sl, r8
 800aad8:	eb4b 0609 	adc.w	r6, fp, r9
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	4619      	mov	r1, r3
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	f04f 0300 	mov.w	r3, #0
 800aaea:	f04f 0400 	mov.w	r4, #0
 800aaee:	0094      	lsls	r4, r2, #2
 800aaf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aaf4:	008b      	lsls	r3, r1, #2
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	4623      	mov	r3, r4
 800aafa:	4628      	mov	r0, r5
 800aafc:	4631      	mov	r1, r6
 800aafe:	f7f5 fb77 	bl	80001f0 <__aeabi_uldivmod>
 800ab02:	4603      	mov	r3, r0
 800ab04:	460c      	mov	r4, r1
 800ab06:	461a      	mov	r2, r3
 800ab08:	4bb8      	ldr	r3, [pc, #736]	; (800adec <UART_SetConfig+0x6f4>)
 800ab0a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab0e:	095b      	lsrs	r3, r3, #5
 800ab10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	469b      	mov	fp, r3
 800ab18:	f04f 0c00 	mov.w	ip, #0
 800ab1c:	46d9      	mov	r9, fp
 800ab1e:	46e2      	mov	sl, ip
 800ab20:	eb19 0309 	adds.w	r3, r9, r9
 800ab24:	eb4a 040a 	adc.w	r4, sl, sl
 800ab28:	4699      	mov	r9, r3
 800ab2a:	46a2      	mov	sl, r4
 800ab2c:	eb19 090b 	adds.w	r9, r9, fp
 800ab30:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab34:	f04f 0100 	mov.w	r1, #0
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab48:	4689      	mov	r9, r1
 800ab4a:	4692      	mov	sl, r2
 800ab4c:	eb1b 0509 	adds.w	r5, fp, r9
 800ab50:	eb4c 060a 	adc.w	r6, ip, sl
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	f04f 0200 	mov.w	r2, #0
 800ab5e:	f04f 0300 	mov.w	r3, #0
 800ab62:	f04f 0400 	mov.w	r4, #0
 800ab66:	0094      	lsls	r4, r2, #2
 800ab68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab6c:	008b      	lsls	r3, r1, #2
 800ab6e:	461a      	mov	r2, r3
 800ab70:	4623      	mov	r3, r4
 800ab72:	4628      	mov	r0, r5
 800ab74:	4631      	mov	r1, r6
 800ab76:	f7f5 fb3b 	bl	80001f0 <__aeabi_uldivmod>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4b9a      	ldr	r3, [pc, #616]	; (800adec <UART_SetConfig+0x6f4>)
 800ab82:	fba3 1302 	umull	r1, r3, r3, r2
 800ab86:	095b      	lsrs	r3, r3, #5
 800ab88:	2164      	movs	r1, #100	; 0x64
 800ab8a:	fb01 f303 	mul.w	r3, r1, r3
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	011b      	lsls	r3, r3, #4
 800ab92:	3332      	adds	r3, #50	; 0x32
 800ab94:	4a95      	ldr	r2, [pc, #596]	; (800adec <UART_SetConfig+0x6f4>)
 800ab96:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9a:	095b      	lsrs	r3, r3, #5
 800ab9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aba0:	4498      	add	r8, r3
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	469b      	mov	fp, r3
 800aba6:	f04f 0c00 	mov.w	ip, #0
 800abaa:	46d9      	mov	r9, fp
 800abac:	46e2      	mov	sl, ip
 800abae:	eb19 0309 	adds.w	r3, r9, r9
 800abb2:	eb4a 040a 	adc.w	r4, sl, sl
 800abb6:	4699      	mov	r9, r3
 800abb8:	46a2      	mov	sl, r4
 800abba:	eb19 090b 	adds.w	r9, r9, fp
 800abbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800abc2:	f04f 0100 	mov.w	r1, #0
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800abd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800abd6:	4689      	mov	r9, r1
 800abd8:	4692      	mov	sl, r2
 800abda:	eb1b 0509 	adds.w	r5, fp, r9
 800abde:	eb4c 060a 	adc.w	r6, ip, sl
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	4619      	mov	r1, r3
 800abe8:	f04f 0200 	mov.w	r2, #0
 800abec:	f04f 0300 	mov.w	r3, #0
 800abf0:	f04f 0400 	mov.w	r4, #0
 800abf4:	0094      	lsls	r4, r2, #2
 800abf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abfa:	008b      	lsls	r3, r1, #2
 800abfc:	461a      	mov	r2, r3
 800abfe:	4623      	mov	r3, r4
 800ac00:	4628      	mov	r0, r5
 800ac02:	4631      	mov	r1, r6
 800ac04:	f7f5 faf4 	bl	80001f0 <__aeabi_uldivmod>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	4b77      	ldr	r3, [pc, #476]	; (800adec <UART_SetConfig+0x6f4>)
 800ac10:	fba3 1302 	umull	r1, r3, r3, r2
 800ac14:	095b      	lsrs	r3, r3, #5
 800ac16:	2164      	movs	r1, #100	; 0x64
 800ac18:	fb01 f303 	mul.w	r3, r1, r3
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	011b      	lsls	r3, r3, #4
 800ac20:	3332      	adds	r3, #50	; 0x32
 800ac22:	4a72      	ldr	r2, [pc, #456]	; (800adec <UART_SetConfig+0x6f4>)
 800ac24:	fba2 2303 	umull	r2, r3, r2, r3
 800ac28:	095b      	lsrs	r3, r3, #5
 800ac2a:	f003 020f 	and.w	r2, r3, #15
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4442      	add	r2, r8
 800ac34:	609a      	str	r2, [r3, #8]
 800ac36:	e0d0      	b.n	800adda <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac38:	f7fe f8ee 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 800ac3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	469a      	mov	sl, r3
 800ac42:	f04f 0b00 	mov.w	fp, #0
 800ac46:	46d0      	mov	r8, sl
 800ac48:	46d9      	mov	r9, fp
 800ac4a:	eb18 0308 	adds.w	r3, r8, r8
 800ac4e:	eb49 0409 	adc.w	r4, r9, r9
 800ac52:	4698      	mov	r8, r3
 800ac54:	46a1      	mov	r9, r4
 800ac56:	eb18 080a 	adds.w	r8, r8, sl
 800ac5a:	eb49 090b 	adc.w	r9, r9, fp
 800ac5e:	f04f 0100 	mov.w	r1, #0
 800ac62:	f04f 0200 	mov.w	r2, #0
 800ac66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac72:	4688      	mov	r8, r1
 800ac74:	4691      	mov	r9, r2
 800ac76:	eb1a 0508 	adds.w	r5, sl, r8
 800ac7a:	eb4b 0609 	adc.w	r6, fp, r9
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	4619      	mov	r1, r3
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	f04f 0300 	mov.w	r3, #0
 800ac8c:	f04f 0400 	mov.w	r4, #0
 800ac90:	0094      	lsls	r4, r2, #2
 800ac92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac96:	008b      	lsls	r3, r1, #2
 800ac98:	461a      	mov	r2, r3
 800ac9a:	4623      	mov	r3, r4
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	4631      	mov	r1, r6
 800aca0:	f7f5 faa6 	bl	80001f0 <__aeabi_uldivmod>
 800aca4:	4603      	mov	r3, r0
 800aca6:	460c      	mov	r4, r1
 800aca8:	461a      	mov	r2, r3
 800acaa:	4b50      	ldr	r3, [pc, #320]	; (800adec <UART_SetConfig+0x6f4>)
 800acac:	fba3 2302 	umull	r2, r3, r3, r2
 800acb0:	095b      	lsrs	r3, r3, #5
 800acb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	469b      	mov	fp, r3
 800acba:	f04f 0c00 	mov.w	ip, #0
 800acbe:	46d9      	mov	r9, fp
 800acc0:	46e2      	mov	sl, ip
 800acc2:	eb19 0309 	adds.w	r3, r9, r9
 800acc6:	eb4a 040a 	adc.w	r4, sl, sl
 800acca:	4699      	mov	r9, r3
 800accc:	46a2      	mov	sl, r4
 800acce:	eb19 090b 	adds.w	r9, r9, fp
 800acd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800acd6:	f04f 0100 	mov.w	r1, #0
 800acda:	f04f 0200 	mov.w	r2, #0
 800acde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ace2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ace6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acea:	4689      	mov	r9, r1
 800acec:	4692      	mov	sl, r2
 800acee:	eb1b 0509 	adds.w	r5, fp, r9
 800acf2:	eb4c 060a 	adc.w	r6, ip, sl
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	4619      	mov	r1, r3
 800acfc:	f04f 0200 	mov.w	r2, #0
 800ad00:	f04f 0300 	mov.w	r3, #0
 800ad04:	f04f 0400 	mov.w	r4, #0
 800ad08:	0094      	lsls	r4, r2, #2
 800ad0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad0e:	008b      	lsls	r3, r1, #2
 800ad10:	461a      	mov	r2, r3
 800ad12:	4623      	mov	r3, r4
 800ad14:	4628      	mov	r0, r5
 800ad16:	4631      	mov	r1, r6
 800ad18:	f7f5 fa6a 	bl	80001f0 <__aeabi_uldivmod>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	460c      	mov	r4, r1
 800ad20:	461a      	mov	r2, r3
 800ad22:	4b32      	ldr	r3, [pc, #200]	; (800adec <UART_SetConfig+0x6f4>)
 800ad24:	fba3 1302 	umull	r1, r3, r3, r2
 800ad28:	095b      	lsrs	r3, r3, #5
 800ad2a:	2164      	movs	r1, #100	; 0x64
 800ad2c:	fb01 f303 	mul.w	r3, r1, r3
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	011b      	lsls	r3, r3, #4
 800ad34:	3332      	adds	r3, #50	; 0x32
 800ad36:	4a2d      	ldr	r2, [pc, #180]	; (800adec <UART_SetConfig+0x6f4>)
 800ad38:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3c:	095b      	lsrs	r3, r3, #5
 800ad3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad42:	4498      	add	r8, r3
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	469b      	mov	fp, r3
 800ad48:	f04f 0c00 	mov.w	ip, #0
 800ad4c:	46d9      	mov	r9, fp
 800ad4e:	46e2      	mov	sl, ip
 800ad50:	eb19 0309 	adds.w	r3, r9, r9
 800ad54:	eb4a 040a 	adc.w	r4, sl, sl
 800ad58:	4699      	mov	r9, r3
 800ad5a:	46a2      	mov	sl, r4
 800ad5c:	eb19 090b 	adds.w	r9, r9, fp
 800ad60:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad64:	f04f 0100 	mov.w	r1, #0
 800ad68:	f04f 0200 	mov.w	r2, #0
 800ad6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad78:	4689      	mov	r9, r1
 800ad7a:	4692      	mov	sl, r2
 800ad7c:	eb1b 0509 	adds.w	r5, fp, r9
 800ad80:	eb4c 060a 	adc.w	r6, ip, sl
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	f04f 0200 	mov.w	r2, #0
 800ad8e:	f04f 0300 	mov.w	r3, #0
 800ad92:	f04f 0400 	mov.w	r4, #0
 800ad96:	0094      	lsls	r4, r2, #2
 800ad98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad9c:	008b      	lsls	r3, r1, #2
 800ad9e:	461a      	mov	r2, r3
 800ada0:	4623      	mov	r3, r4
 800ada2:	4628      	mov	r0, r5
 800ada4:	4631      	mov	r1, r6
 800ada6:	f7f5 fa23 	bl	80001f0 <__aeabi_uldivmod>
 800adaa:	4603      	mov	r3, r0
 800adac:	460c      	mov	r4, r1
 800adae:	461a      	mov	r2, r3
 800adb0:	4b0e      	ldr	r3, [pc, #56]	; (800adec <UART_SetConfig+0x6f4>)
 800adb2:	fba3 1302 	umull	r1, r3, r3, r2
 800adb6:	095b      	lsrs	r3, r3, #5
 800adb8:	2164      	movs	r1, #100	; 0x64
 800adba:	fb01 f303 	mul.w	r3, r1, r3
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	011b      	lsls	r3, r3, #4
 800adc2:	3332      	adds	r3, #50	; 0x32
 800adc4:	4a09      	ldr	r2, [pc, #36]	; (800adec <UART_SetConfig+0x6f4>)
 800adc6:	fba2 2303 	umull	r2, r3, r2, r3
 800adca:	095b      	lsrs	r3, r3, #5
 800adcc:	f003 020f 	and.w	r2, r3, #15
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4442      	add	r2, r8
 800add6:	609a      	str	r2, [r3, #8]
}
 800add8:	e7ff      	b.n	800adda <UART_SetConfig+0x6e2>
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	40011000 	.word	0x40011000
 800ade8:	40011400 	.word	0x40011400
 800adec:	51eb851f 	.word	0x51eb851f

0800adf0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d029      	beq.n	800ae5e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae1a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae24:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800ae2a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800ae30:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800ae36:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800ae3c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800ae42:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800ae48:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800ae4e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	e034      	b.n	800aec8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae6a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae74:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ae7a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae92:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae9c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800aea2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800aea8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800aeae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800aeb4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b087      	sub	sp, #28
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800aee2:	2300      	movs	r3, #0
 800aee4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d02e      	beq.n	800af4e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aefc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	3b01      	subs	r3, #1
 800af0a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af0c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	3b01      	subs	r3, #1
 800af14:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800af16:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800af20:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	3b01      	subs	r3, #1
 800af28:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af2a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	3b01      	subs	r3, #1
 800af32:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800af34:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af3e:	4313      	orrs	r3, r2
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	609a      	str	r2, [r3, #8]
 800af4c:	e03b      	b.n	800afc6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af5e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	3b01      	subs	r3, #1
 800af66:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af70:	4313      	orrs	r3, r2
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	4313      	orrs	r3, r2
 800af76:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af84:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	3b01      	subs	r3, #1
 800af92:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af94:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800af9e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800afa8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	3b01      	subs	r3, #1
 800afb0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800afb2:	4313      	orrs	r3, r2
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	371c      	adds	r7, #28
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aff0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800affa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b002:	4313      	orrs	r3, r2
 800b004:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b00c:	f7f9 fb90 	bl	8004730 <HAL_GetTick>
 800b010:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b012:	e010      	b.n	800b036 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01a:	d00c      	beq.n	800b036 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d007      	beq.n	800b032 <FMC_SDRAM_SendCommand+0x5e>
 800b022:	f7f9 fb85 	bl	8004730 <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d201      	bcs.n	800b036 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e006      	b.n	800b044 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	f003 0320 	and.w	r3, r3, #32
 800b03e:	2b20      	cmp	r3, #32
 800b040:	d0e8      	beq.n	800b014 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	695a      	ldr	r2, [r3, #20]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	431a      	orrs	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b072:	b480      	push	{r7}
 800b074:	b083      	sub	sp, #12
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	f043 0201 	orr.w	r2, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f023 0201 	bic.w	r2, r3, #1
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
	...

0800b0b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	019b      	lsls	r3, r3, #6
 800b0ca:	f043 0220 	orr.w	r2, r3, #32
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4a09      	ldr	r2, [pc, #36]	; (800b100 <USB_FlushTxFifo+0x48>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d901      	bls.n	800b0e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e006      	b.n	800b0f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	f003 0320 	and.w	r3, r3, #32
 800b0ec:	2b20      	cmp	r3, #32
 800b0ee:	d0f0      	beq.n	800b0d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	00030d40 	.word	0x00030d40

0800b104 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2210      	movs	r2, #16
 800b114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3301      	adds	r3, #1
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4a09      	ldr	r2, [pc, #36]	; (800b144 <USB_FlushRxFifo+0x40>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d901      	bls.n	800b128 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e006      	b.n	800b136 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	f003 0310 	and.w	r3, r3, #16
 800b130:	2b10      	cmp	r3, #16
 800b132:	d0f0      	beq.n	800b116 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	00030d40 	.word	0x00030d40

0800b148 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b148:	b480      	push	{r7}
 800b14a:	b089      	sub	sp, #36	; 0x24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	4613      	mov	r3, r2
 800b154:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	3303      	adds	r3, #3
 800b162:	089b      	lsrs	r3, r3, #2
 800b164:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b166:	2300      	movs	r3, #0
 800b168:	61bb      	str	r3, [r7, #24]
 800b16a:	e00b      	b.n	800b184 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	601a      	str	r2, [r3, #0]
    pDest++;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	3304      	adds	r3, #4
 800b17c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	3301      	adds	r3, #1
 800b182:	61bb      	str	r3, [r7, #24]
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d3ef      	bcc.n	800b16c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b18c:	69fb      	ldr	r3, [r7, #28]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3724      	adds	r7, #36	; 0x24
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b085      	sub	sp, #20
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b1fa:	f023 0303 	bic.w	r3, r3, #3
 800b1fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	68f9      	ldr	r1, [r7, #12]
 800b210:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b214:	4313      	orrs	r3, r2
 800b216:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d107      	bne.n	800b22e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b224:	461a      	mov	r2, r3
 800b226:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b22a:	6053      	str	r3, [r2, #4]
 800b22c:	e009      	b.n	800b242 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b22e:	78fb      	ldrb	r3, [r7, #3]
 800b230:	2b02      	cmp	r3, #2
 800b232:	d106      	bne.n	800b242 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b23a:	461a      	mov	r2, r3
 800b23c:	f241 7370 	movw	r3, #6000	; 0x1770
 800b240:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	b29b      	uxth	r3, r3
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b272:	b480      	push	{r7}
 800b274:	b087      	sub	sp, #28
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	460b      	mov	r3, r1
 800b27c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b282:	78fb      	ldrb	r3, [r7, #3]
 800b284:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b286:	2300      	movs	r3, #0
 800b288:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	015a      	lsls	r2, r3, #5
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	4413      	add	r3, r2
 800b292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	0c9b      	lsrs	r3, r3, #18
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <USB_HC_Halt+0x3a>
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d16c      	bne.n	800b386 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	015a      	lsls	r2, r3, #5
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	0151      	lsls	r1, r2, #5
 800b2be:	693a      	ldr	r2, [r7, #16]
 800b2c0:	440a      	add	r2, r1
 800b2c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2ca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d143      	bne.n	800b360 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	0151      	lsls	r1, r2, #5
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	440a      	add	r2, r1
 800b2ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	015a      	lsls	r2, r3, #5
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	4413      	add	r3, r2
 800b300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	0151      	lsls	r1, r2, #5
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	440a      	add	r2, r1
 800b30e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b316:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	015a      	lsls	r2, r3, #5
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	4413      	add	r3, r2
 800b320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	0151      	lsls	r1, r2, #5
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	440a      	add	r2, r1
 800b32e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b336:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	3301      	adds	r3, #1
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b344:	d81d      	bhi.n	800b382 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b35c:	d0ec      	beq.n	800b338 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b35e:	e080      	b.n	800b462 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	015a      	lsls	r2, r3, #5
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	4413      	add	r3, r2
 800b368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	0151      	lsls	r1, r2, #5
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	440a      	add	r2, r1
 800b376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b37a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b37e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b380:	e06f      	b.n	800b462 <USB_HC_Halt+0x1f0>
          break;
 800b382:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b384:	e06d      	b.n	800b462 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	015a      	lsls	r2, r3, #5
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	4413      	add	r3, r2
 800b38e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	0151      	lsls	r1, r2, #5
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	440a      	add	r2, r1
 800b39c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d143      	bne.n	800b43e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	0151      	lsls	r1, r2, #5
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	440a      	add	r2, r1
 800b3cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	0151      	lsls	r1, r2, #5
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	440a      	add	r2, r1
 800b3ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	015a      	lsls	r2, r3, #5
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	0151      	lsls	r1, r2, #5
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	440a      	add	r2, r1
 800b40c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b414:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	3301      	adds	r3, #1
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b422:	d81d      	bhi.n	800b460 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b43a:	d0ec      	beq.n	800b416 <USB_HC_Halt+0x1a4>
 800b43c:	e011      	b.n	800b462 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	015a      	lsls	r2, r3, #5
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	4413      	add	r3, r2
 800b446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	0151      	lsls	r1, r2, #5
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	440a      	add	r2, r1
 800b454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	e000      	b.n	800b462 <USB_HC_Halt+0x1f0>
          break;
 800b460:	bf00      	nop
    }
  }

  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	371c      	adds	r7, #28
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b47c:	2300      	movs	r3, #0
 800b47e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff fe07 	bl	800b094 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b486:	2110      	movs	r1, #16
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff fe15 	bl	800b0b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff fe38 	bl	800b104 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b494:	2300      	movs	r3, #0
 800b496:	613b      	str	r3, [r7, #16]
 800b498:	e01f      	b.n	800b4da <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	015a      	lsls	r2, r3, #5
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4c0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	613b      	str	r3, [r7, #16]
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	2b0f      	cmp	r3, #15
 800b4de:	d9dc      	bls.n	800b49a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	613b      	str	r3, [r7, #16]
 800b4e4:	e034      	b.n	800b550 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	015a      	lsls	r2, r3, #5
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4fc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b504:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b50c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b51a:	461a      	mov	r2, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	3301      	adds	r3, #1
 800b524:	617b      	str	r3, [r7, #20]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b52c:	d80c      	bhi.n	800b548 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	015a      	lsls	r2, r3, #5
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	4413      	add	r3, r2
 800b536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b544:	d0ec      	beq.n	800b520 <USB_StopHost+0xb0>
 800b546:	e000      	b.n	800b54a <USB_StopHost+0xda>
        break;
 800b548:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3301      	adds	r3, #1
 800b54e:	613b      	str	r3, [r7, #16]
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	2b0f      	cmp	r3, #15
 800b554:	d9c7      	bls.n	800b4e6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b55c:	461a      	mov	r2, r3
 800b55e:	f04f 33ff 	mov.w	r3, #4294967295
 800b562:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f04f 32ff 	mov.w	r2, #4294967295
 800b56a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff fd80 	bl	800b072 <USB_EnableGlobalInt>

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f804 	bl	800b5a0 <USBH_HandleSof>
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b0b      	cmp	r3, #11
 800b5b0:	d10a      	bne.n	800b5c8 <USBH_HandleSof+0x28>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	4798      	blx	r3
  }
}
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	f000 f8ae 	bl	800b758 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b5fc:	bf00      	nop
}
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b614:	bf00      	nop
}
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b654:	2200      	movs	r2, #0
 800b656:	4619      	mov	r1, r3
 800b658:	f000 f87e 	bl	800b758 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b082      	sub	sp, #8
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f001 f8fc 	bl	800c884 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	791b      	ldrb	r3, [r3, #4]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f830 	bl	800b6f8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	795b      	ldrb	r3, [r3, #5]
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f82a 	bl	800b6f8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	f000 f84c 	bl	800b758 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	f000 f835 	bl	800b758 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	2b0a      	cmp	r3, #10
 800b708:	d80d      	bhi.n	800b726 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b70a:	78fb      	ldrb	r3, [r7, #3]
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	33e0      	adds	r3, #224	; 0xe0
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	78fb      	ldrb	r3, [r7, #3]
 800b718:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b71c:	6879      	ldr	r1, [r7, #4]
 800b71e:	33e0      	adds	r3, #224	; 0xe0
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	440b      	add	r3, r1
 800b724:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b73a:	f3ef 8305 	mrs	r3, IPSR
 800b73e:	607b      	str	r3, [r7, #4]
  return(result);
 800b740:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b742:	2b00      	cmp	r3, #0
 800b744:	bf14      	ite	ne
 800b746:	2301      	movne	r3, #1
 800b748:	2300      	moveq	r3, #0
 800b74a:	b2db      	uxtb	r3, r3
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b764:	2300      	movs	r3, #0
 800b766:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <osMessagePut+0x1e>
    ticks = 1;
 800b772:	2301      	movs	r3, #1
 800b774:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b776:	f7ff ffdd 	bl	800b734 <inHandlerMode>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d018      	beq.n	800b7b2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b780:	f107 0210 	add.w	r2, r7, #16
 800b784:	f107 0108 	add.w	r1, r7, #8
 800b788:	2300      	movs	r3, #0
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f000 f9a6 	bl	800badc <xQueueGenericSendFromISR>
 800b790:	4603      	mov	r3, r0
 800b792:	2b01      	cmp	r3, #1
 800b794:	d001      	beq.n	800b79a <osMessagePut+0x42>
      return osErrorOS;
 800b796:	23ff      	movs	r3, #255	; 0xff
 800b798:	e018      	b.n	800b7cc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d014      	beq.n	800b7ca <osMessagePut+0x72>
 800b7a0:	4b0c      	ldr	r3, [pc, #48]	; (800b7d4 <osMessagePut+0x7c>)
 800b7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	e00b      	b.n	800b7ca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b7b2:	f107 0108 	add.w	r1, r7, #8
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 f894 	bl	800b8e8 <xQueueGenericSend>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d001      	beq.n	800b7ca <osMessagePut+0x72>
      return osErrorOS;
 800b7c6:	23ff      	movs	r3, #255	; 0xff
 800b7c8:	e000      	b.n	800b7cc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	e000ed04 	.word	0xe000ed04

0800b7d8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	689a      	ldr	r2, [r3, #8]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	601a      	str	r2, [r3, #0]
}
 800b814:	bf00      	nop
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d103      	bne.n	800b840 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	e00c      	b.n	800b85a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3308      	adds	r3, #8
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	e002      	b.n	800b84e <vListInsert+0x2e>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	429a      	cmp	r2, r3
 800b858:	d2f6      	bcs.n	800b848 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	601a      	str	r2, [r3, #0]
}
 800b886:	bf00      	nop
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b892:	b480      	push	{r7}
 800b894:	b085      	sub	sp, #20
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	6892      	ldr	r2, [r2, #8]
 800b8a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6852      	ldr	r2, [r2, #4]
 800b8b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d103      	bne.n	800b8c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	689a      	ldr	r2, [r3, #8]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	1e5a      	subs	r2, r3, #1
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08e      	sub	sp, #56	; 0x38
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	2b00      	cmp	r3, #0
 800b902:	d109      	bne.n	800b918 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	62bb      	str	r3, [r7, #40]	; 0x28
 800b916:	e7fe      	b.n	800b916 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d103      	bne.n	800b926 <xQueueGenericSend+0x3e>
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <xQueueGenericSend+0x42>
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <xQueueGenericSend+0x44>
 800b92a:	2300      	movs	r3, #0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d109      	bne.n	800b944 <xQueueGenericSend+0x5c>
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
 800b942:	e7fe      	b.n	800b942 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2b02      	cmp	r3, #2
 800b948:	d103      	bne.n	800b952 <xQueueGenericSend+0x6a>
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d101      	bne.n	800b956 <xQueueGenericSend+0x6e>
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <xQueueGenericSend+0x70>
 800b956:	2300      	movs	r3, #0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d109      	bne.n	800b970 <xQueueGenericSend+0x88>
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	623b      	str	r3, [r7, #32]
 800b96e:	e7fe      	b.n	800b96e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b970:	f000 fd26 	bl	800c3c0 <xTaskGetSchedulerState>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d102      	bne.n	800b980 <xQueueGenericSend+0x98>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <xQueueGenericSend+0x9c>
 800b980:	2301      	movs	r3, #1
 800b982:	e000      	b.n	800b986 <xQueueGenericSend+0x9e>
 800b984:	2300      	movs	r3, #0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d109      	bne.n	800b99e <xQueueGenericSend+0xb6>
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	61fb      	str	r3, [r7, #28]
 800b99c:	e7fe      	b.n	800b99c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b99e:	f000 fe2b 	bl	800c5f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d302      	bcc.n	800b9b4 <xQueueGenericSend+0xcc>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d129      	bne.n	800ba08 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	68b9      	ldr	r1, [r7, #8]
 800b9b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ba:	f000 f923 	bl	800bc04 <prvCopyDataToQueue>
 800b9be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d010      	beq.n	800b9ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ca:	3324      	adds	r3, #36	; 0x24
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 fbf3 	bl	800c1b8 <xTaskRemoveFromEventList>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d013      	beq.n	800ba00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9d8:	4b3f      	ldr	r3, [pc, #252]	; (800bad8 <xQueueGenericSend+0x1f0>)
 800b9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	e00a      	b.n	800ba00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d007      	beq.n	800ba00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b9f0:	4b39      	ldr	r3, [pc, #228]	; (800bad8 <xQueueGenericSend+0x1f0>)
 800b9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba00:	f000 fe28 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e063      	b.n	800bad0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d103      	bne.n	800ba16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba0e:	f000 fe21 	bl	800c654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	e05c      	b.n	800bad0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba1c:	f107 0314 	add.w	r3, r7, #20
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 fc2b 	bl	800c27c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba26:	2301      	movs	r3, #1
 800ba28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba2a:	f000 fe13 	bl	800c654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba2e:	f000 f9bd 	bl	800bdac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba32:	f000 fde1 	bl	800c5f8 <vPortEnterCritical>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba3c:	b25b      	sxtb	r3, r3
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba42:	d103      	bne.n	800ba4c <xQueueGenericSend+0x164>
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba52:	b25b      	sxtb	r3, r3
 800ba54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba58:	d103      	bne.n	800ba62 <xQueueGenericSend+0x17a>
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba62:	f000 fdf7 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba66:	1d3a      	adds	r2, r7, #4
 800ba68:	f107 0314 	add.w	r3, r7, #20
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 fc1a 	bl	800c2a8 <xTaskCheckForTimeOut>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d124      	bne.n	800bac4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba7c:	f000 f97e 	bl	800bd7c <prvIsQueueFull>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d018      	beq.n	800bab8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	3310      	adds	r3, #16
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 fb6e 	bl	800c170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba96:	f000 f91f 	bl	800bcd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba9a:	f000 f995 	bl	800bdc8 <xTaskResumeAll>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f47f af7c 	bne.w	800b99e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800baa6:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <xQueueGenericSend+0x1f0>)
 800baa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	e772      	b.n	800b99e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baba:	f000 f90d 	bl	800bcd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800babe:	f000 f983 	bl	800bdc8 <xTaskResumeAll>
 800bac2:	e76c      	b.n	800b99e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bac6:	f000 f907 	bl	800bcd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800baca:	f000 f97d 	bl	800bdc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3738      	adds	r7, #56	; 0x38
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	e000ed04 	.word	0xe000ed04

0800badc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08e      	sub	sp, #56	; 0x38
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d109      	bne.n	800bb08 <xQueueGenericSendFromISR+0x2c>
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
 800bb06:	e7fe      	b.n	800bb06 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d103      	bne.n	800bb16 <xQueueGenericSendFromISR+0x3a>
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <xQueueGenericSendFromISR+0x3e>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <xQueueGenericSendFromISR+0x40>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d109      	bne.n	800bb34 <xQueueGenericSendFromISR+0x58>
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	623b      	str	r3, [r7, #32]
 800bb32:	e7fe      	b.n	800bb32 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d103      	bne.n	800bb42 <xQueueGenericSendFromISR+0x66>
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d101      	bne.n	800bb46 <xQueueGenericSendFromISR+0x6a>
 800bb42:	2301      	movs	r3, #1
 800bb44:	e000      	b.n	800bb48 <xQueueGenericSendFromISR+0x6c>
 800bb46:	2300      	movs	r3, #0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d109      	bne.n	800bb60 <xQueueGenericSendFromISR+0x84>
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	61fb      	str	r3, [r7, #28]
 800bb5e:	e7fe      	b.n	800bb5e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb60:	f000 fdfa 	bl	800c758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb64:	f3ef 8211 	mrs	r2, BASEPRI
 800bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	61ba      	str	r2, [r7, #24]
 800bb7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bb7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d302      	bcc.n	800bb92 <xQueueGenericSendFromISR+0xb6>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d12c      	bne.n	800bbec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	68b9      	ldr	r1, [r7, #8]
 800bba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba2:	f000 f82f 	bl	800bc04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bba6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d112      	bne.n	800bbd6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d016      	beq.n	800bbe6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	3324      	adds	r3, #36	; 0x24
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 fafb 	bl	800c1b8 <xTaskRemoveFromEventList>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00e      	beq.n	800bbe6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00b      	beq.n	800bbe6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	e007      	b.n	800bbe6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbda:	3301      	adds	r3, #1
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	b25a      	sxtb	r2, r3
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bbea:	e001      	b.n	800bbf0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	637b      	str	r3, [r7, #52]	; 0x34
 800bbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3738      	adds	r7, #56	; 0x38
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc10:	2300      	movs	r3, #0
 800bc12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10d      	bne.n	800bc3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d14d      	bne.n	800bcc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 fbe4 	bl	800c3fc <xTaskPriorityDisinherit>
 800bc34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	609a      	str	r2, [r3, #8]
 800bc3c:	e043      	b.n	800bcc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d119      	bne.n	800bc78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6858      	ldr	r0, [r3, #4]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	68b9      	ldr	r1, [r7, #8]
 800bc50:	f000 fe92 	bl	800c978 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	685a      	ldr	r2, [r3, #4]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5c:	441a      	add	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d32b      	bcc.n	800bcc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	605a      	str	r2, [r3, #4]
 800bc76:	e026      	b.n	800bcc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	68d8      	ldr	r0, [r3, #12]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc80:	461a      	mov	r2, r3
 800bc82:	68b9      	ldr	r1, [r7, #8]
 800bc84:	f000 fe78 	bl	800c978 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc90:	425b      	negs	r3, r3
 800bc92:	441a      	add	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	68da      	ldr	r2, [r3, #12]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d207      	bcs.n	800bcb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	689a      	ldr	r2, [r3, #8]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	425b      	negs	r3, r3
 800bcae:	441a      	add	r2, r3
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d105      	bne.n	800bcc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	1c5a      	adds	r2, r3, #1
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bcce:	697b      	ldr	r3, [r7, #20]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3718      	adds	r7, #24
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bce0:	f000 fc8a 	bl	800c5f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcec:	e011      	b.n	800bd12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d012      	beq.n	800bd1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	3324      	adds	r3, #36	; 0x24
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 fa5c 	bl	800c1b8 <xTaskRemoveFromEventList>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd06:	f000 fb2f 	bl	800c368 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	dce9      	bgt.n	800bcee <prvUnlockQueue+0x16>
 800bd1a:	e000      	b.n	800bd1e <prvUnlockQueue+0x46>
					break;
 800bd1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	22ff      	movs	r2, #255	; 0xff
 800bd22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd26:	f000 fc95 	bl	800c654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd2a:	f000 fc65 	bl	800c5f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd36:	e011      	b.n	800bd5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d012      	beq.n	800bd66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3310      	adds	r3, #16
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fa37 	bl	800c1b8 <xTaskRemoveFromEventList>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd50:	f000 fb0a 	bl	800c368 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	dce9      	bgt.n	800bd38 <prvUnlockQueue+0x60>
 800bd64:	e000      	b.n	800bd68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	22ff      	movs	r2, #255	; 0xff
 800bd6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd70:	f000 fc70 	bl	800c654 <vPortExitCritical>
}
 800bd74:	bf00      	nop
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd84:	f000 fc38 	bl	800c5f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d102      	bne.n	800bd9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd94:	2301      	movs	r3, #1
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	e001      	b.n	800bd9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd9e:	f000 fc59 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800bda2:	68fb      	ldr	r3, [r7, #12]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdac:	b480      	push	{r7}
 800bdae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bdb0:	4b04      	ldr	r3, [pc, #16]	; (800bdc4 <vTaskSuspendAll+0x18>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	4a03      	ldr	r2, [pc, #12]	; (800bdc4 <vTaskSuspendAll+0x18>)
 800bdb8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bdba:	bf00      	nop
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	200003e4 	.word	0x200003e4

0800bdc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bdd6:	4b41      	ldr	r3, [pc, #260]	; (800bedc <xTaskResumeAll+0x114>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <xTaskResumeAll+0x2a>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	e7fe      	b.n	800bdf0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdf2:	f000 fc01 	bl	800c5f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdf6:	4b39      	ldr	r3, [pc, #228]	; (800bedc <xTaskResumeAll+0x114>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	4a37      	ldr	r2, [pc, #220]	; (800bedc <xTaskResumeAll+0x114>)
 800bdfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be00:	4b36      	ldr	r3, [pc, #216]	; (800bedc <xTaskResumeAll+0x114>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d161      	bne.n	800becc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be08:	4b35      	ldr	r3, [pc, #212]	; (800bee0 <xTaskResumeAll+0x118>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d05d      	beq.n	800becc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be10:	e02e      	b.n	800be70 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be12:	4b34      	ldr	r3, [pc, #208]	; (800bee4 <xTaskResumeAll+0x11c>)
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3318      	adds	r3, #24
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff fd37 	bl	800b892 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	3304      	adds	r3, #4
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff fd32 	bl	800b892 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be32:	2201      	movs	r2, #1
 800be34:	409a      	lsls	r2, r3
 800be36:	4b2c      	ldr	r3, [pc, #176]	; (800bee8 <xTaskResumeAll+0x120>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	4a2a      	ldr	r2, [pc, #168]	; (800bee8 <xTaskResumeAll+0x120>)
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be44:	4613      	mov	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4a27      	ldr	r2, [pc, #156]	; (800beec <xTaskResumeAll+0x124>)
 800be4e:	441a      	add	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3304      	adds	r3, #4
 800be54:	4619      	mov	r1, r3
 800be56:	4610      	mov	r0, r2
 800be58:	f7ff fcbe 	bl	800b7d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be60:	4b23      	ldr	r3, [pc, #140]	; (800bef0 <xTaskResumeAll+0x128>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be66:	429a      	cmp	r2, r3
 800be68:	d302      	bcc.n	800be70 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800be6a:	4b22      	ldr	r3, [pc, #136]	; (800bef4 <xTaskResumeAll+0x12c>)
 800be6c:	2201      	movs	r2, #1
 800be6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be70:	4b1c      	ldr	r3, [pc, #112]	; (800bee4 <xTaskResumeAll+0x11c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1cc      	bne.n	800be12 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be7e:	f000 fa7f 	bl	800c380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800be82:	4b1d      	ldr	r3, [pc, #116]	; (800bef8 <xTaskResumeAll+0x130>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d010      	beq.n	800beb0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be8e:	f000 f837 	bl	800bf00 <xTaskIncrementTick>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800be98:	4b16      	ldr	r3, [pc, #88]	; (800bef4 <xTaskResumeAll+0x12c>)
 800be9a:	2201      	movs	r2, #1
 800be9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1f1      	bne.n	800be8e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800beaa:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <xTaskResumeAll+0x130>)
 800beac:	2200      	movs	r2, #0
 800beae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800beb0:	4b10      	ldr	r3, [pc, #64]	; (800bef4 <xTaskResumeAll+0x12c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d009      	beq.n	800becc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800beb8:	2301      	movs	r3, #1
 800beba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bebc:	4b0f      	ldr	r3, [pc, #60]	; (800befc <xTaskResumeAll+0x134>)
 800bebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800becc:	f000 fbc2 	bl	800c654 <vPortExitCritical>

	return xAlreadyYielded;
 800bed0:	68bb      	ldr	r3, [r7, #8]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	200003e4 	.word	0x200003e4
 800bee0:	200003c4 	.word	0x200003c4
 800bee4:	2000039c 	.word	0x2000039c
 800bee8:	200003cc 	.word	0x200003cc
 800beec:	20000308 	.word	0x20000308
 800bef0:	20000304 	.word	0x20000304
 800bef4:	200003d8 	.word	0x200003d8
 800bef8:	200003d4 	.word	0x200003d4
 800befc:	e000ed04 	.word	0xe000ed04

0800bf00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf06:	2300      	movs	r3, #0
 800bf08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf0a:	4b4e      	ldr	r3, [pc, #312]	; (800c044 <xTaskIncrementTick+0x144>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f040 8087 	bne.w	800c022 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf14:	4b4c      	ldr	r3, [pc, #304]	; (800c048 <xTaskIncrementTick+0x148>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf1c:	4a4a      	ldr	r2, [pc, #296]	; (800c048 <xTaskIncrementTick+0x148>)
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d11f      	bne.n	800bf68 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf28:	4b48      	ldr	r3, [pc, #288]	; (800c04c <xTaskIncrementTick+0x14c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d009      	beq.n	800bf46 <xTaskIncrementTick+0x46>
 800bf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf36:	f383 8811 	msr	BASEPRI, r3
 800bf3a:	f3bf 8f6f 	isb	sy
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	603b      	str	r3, [r7, #0]
 800bf44:	e7fe      	b.n	800bf44 <xTaskIncrementTick+0x44>
 800bf46:	4b41      	ldr	r3, [pc, #260]	; (800c04c <xTaskIncrementTick+0x14c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	4b40      	ldr	r3, [pc, #256]	; (800c050 <xTaskIncrementTick+0x150>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a3e      	ldr	r2, [pc, #248]	; (800c04c <xTaskIncrementTick+0x14c>)
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	4a3e      	ldr	r2, [pc, #248]	; (800c050 <xTaskIncrementTick+0x150>)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	4b3e      	ldr	r3, [pc, #248]	; (800c054 <xTaskIncrementTick+0x154>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	4a3c      	ldr	r2, [pc, #240]	; (800c054 <xTaskIncrementTick+0x154>)
 800bf62:	6013      	str	r3, [r2, #0]
 800bf64:	f000 fa0c 	bl	800c380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf68:	4b3b      	ldr	r3, [pc, #236]	; (800c058 <xTaskIncrementTick+0x158>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d348      	bcc.n	800c004 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf72:	4b36      	ldr	r3, [pc, #216]	; (800c04c <xTaskIncrementTick+0x14c>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d104      	bne.n	800bf86 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf7c:	4b36      	ldr	r3, [pc, #216]	; (800c058 <xTaskIncrementTick+0x158>)
 800bf7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf82:	601a      	str	r2, [r3, #0]
					break;
 800bf84:	e03e      	b.n	800c004 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf86:	4b31      	ldr	r3, [pc, #196]	; (800c04c <xTaskIncrementTick+0x14c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d203      	bcs.n	800bfa6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf9e:	4a2e      	ldr	r2, [pc, #184]	; (800c058 <xTaskIncrementTick+0x158>)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bfa4:	e02e      	b.n	800c004 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7ff fc71 	bl	800b892 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d004      	beq.n	800bfc2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	3318      	adds	r3, #24
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff fc68 	bl	800b892 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	409a      	lsls	r2, r3
 800bfca:	4b24      	ldr	r3, [pc, #144]	; (800c05c <xTaskIncrementTick+0x15c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	4a22      	ldr	r2, [pc, #136]	; (800c05c <xTaskIncrementTick+0x15c>)
 800bfd2:	6013      	str	r3, [r2, #0]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd8:	4613      	mov	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4413      	add	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	4a1f      	ldr	r2, [pc, #124]	; (800c060 <xTaskIncrementTick+0x160>)
 800bfe2:	441a      	add	r2, r3
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	3304      	adds	r3, #4
 800bfe8:	4619      	mov	r1, r3
 800bfea:	4610      	mov	r0, r2
 800bfec:	f7ff fbf4 	bl	800b7d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff4:	4b1b      	ldr	r3, [pc, #108]	; (800c064 <xTaskIncrementTick+0x164>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d3b9      	bcc.n	800bf72 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bffe:	2301      	movs	r3, #1
 800c000:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c002:	e7b6      	b.n	800bf72 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c004:	4b17      	ldr	r3, [pc, #92]	; (800c064 <xTaskIncrementTick+0x164>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00a:	4915      	ldr	r1, [pc, #84]	; (800c060 <xTaskIncrementTick+0x160>)
 800c00c:	4613      	mov	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	440b      	add	r3, r1
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d907      	bls.n	800c02c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c01c:	2301      	movs	r3, #1
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	e004      	b.n	800c02c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c022:	4b11      	ldr	r3, [pc, #68]	; (800c068 <xTaskIncrementTick+0x168>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3301      	adds	r3, #1
 800c028:	4a0f      	ldr	r2, [pc, #60]	; (800c068 <xTaskIncrementTick+0x168>)
 800c02a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c02c:	4b0f      	ldr	r3, [pc, #60]	; (800c06c <xTaskIncrementTick+0x16c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c034:	2301      	movs	r3, #1
 800c036:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c038:	697b      	ldr	r3, [r7, #20]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	200003e4 	.word	0x200003e4
 800c048:	200003c8 	.word	0x200003c8
 800c04c:	20000394 	.word	0x20000394
 800c050:	20000398 	.word	0x20000398
 800c054:	200003dc 	.word	0x200003dc
 800c058:	200003e0 	.word	0x200003e0
 800c05c:	200003cc 	.word	0x200003cc
 800c060:	20000308 	.word	0x20000308
 800c064:	20000304 	.word	0x20000304
 800c068:	200003d4 	.word	0x200003d4
 800c06c:	200003d8 	.word	0x200003d8

0800c070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c076:	4b39      	ldr	r3, [pc, #228]	; (800c15c <vTaskSwitchContext+0xec>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d003      	beq.n	800c086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c07e:	4b38      	ldr	r3, [pc, #224]	; (800c160 <vTaskSwitchContext+0xf0>)
 800c080:	2201      	movs	r2, #1
 800c082:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c084:	e065      	b.n	800c152 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800c086:	4b36      	ldr	r3, [pc, #216]	; (800c160 <vTaskSwitchContext+0xf0>)
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c08c:	4b35      	ldr	r3, [pc, #212]	; (800c164 <vTaskSwitchContext+0xf4>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c092:	61fb      	str	r3, [r7, #28]
 800c094:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c098:	61bb      	str	r3, [r7, #24]
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d111      	bne.n	800c0c8 <vTaskSwitchContext+0x58>
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69ba      	ldr	r2, [r7, #24]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d10b      	bne.n	800c0c8 <vTaskSwitchContext+0x58>
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	69ba      	ldr	r2, [r7, #24]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d105      	bne.n	800c0c8 <vTaskSwitchContext+0x58>
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	330c      	adds	r3, #12
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d008      	beq.n	800c0da <vTaskSwitchContext+0x6a>
 800c0c8:	4b26      	ldr	r3, [pc, #152]	; (800c164 <vTaskSwitchContext+0xf4>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	4b25      	ldr	r3, [pc, #148]	; (800c164 <vTaskSwitchContext+0xf4>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3334      	adds	r3, #52	; 0x34
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	f7f4 fdab 	bl	8000c30 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0da:	4b23      	ldr	r3, [pc, #140]	; (800c168 <vTaskSwitchContext+0xf8>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	fab3 f383 	clz	r3, r3
 800c0e6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c0e8:	7afb      	ldrb	r3, [r7, #11]
 800c0ea:	f1c3 031f 	rsb	r3, r3, #31
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	491e      	ldr	r1, [pc, #120]	; (800c16c <vTaskSwitchContext+0xfc>)
 800c0f2:	697a      	ldr	r2, [r7, #20]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d109      	bne.n	800c118 <vTaskSwitchContext+0xa8>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	607b      	str	r3, [r7, #4]
 800c116:	e7fe      	b.n	800c116 <vTaskSwitchContext+0xa6>
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4a12      	ldr	r2, [pc, #72]	; (800c16c <vTaskSwitchContext+0xfc>)
 800c124:	4413      	add	r3, r2
 800c126:	613b      	str	r3, [r7, #16]
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	605a      	str	r2, [r3, #4]
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	3308      	adds	r3, #8
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d104      	bne.n	800c148 <vTaskSwitchContext+0xd8>
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	605a      	str	r2, [r3, #4]
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	4a05      	ldr	r2, [pc, #20]	; (800c164 <vTaskSwitchContext+0xf4>)
 800c150:	6013      	str	r3, [r2, #0]
}
 800c152:	bf00      	nop
 800c154:	3720      	adds	r7, #32
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	200003e4 	.word	0x200003e4
 800c160:	200003d8 	.word	0x200003d8
 800c164:	20000304 	.word	0x20000304
 800c168:	200003cc 	.word	0x200003cc
 800c16c:	20000308 	.word	0x20000308

0800c170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d109      	bne.n	800c194 <vTaskPlaceOnEventList+0x24>
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	e7fe      	b.n	800c192 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c194:	4b07      	ldr	r3, [pc, #28]	; (800c1b4 <vTaskPlaceOnEventList+0x44>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3318      	adds	r3, #24
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7ff fb3f 	bl	800b820 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	6838      	ldr	r0, [r7, #0]
 800c1a6:	f000 f9ad 	bl	800c504 <prvAddCurrentTaskToDelayedList>
}
 800c1aa:	bf00      	nop
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000304 	.word	0x20000304

0800c1b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d109      	bne.n	800c1e2 <xTaskRemoveFromEventList+0x2a>
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	60fb      	str	r3, [r7, #12]
 800c1e0:	e7fe      	b.n	800c1e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	3318      	adds	r3, #24
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff fb53 	bl	800b892 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1ec:	4b1d      	ldr	r3, [pc, #116]	; (800c264 <xTaskRemoveFromEventList+0xac>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d11c      	bne.n	800c22e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7ff fb4a 	bl	800b892 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c202:	2201      	movs	r2, #1
 800c204:	409a      	lsls	r2, r3
 800c206:	4b18      	ldr	r3, [pc, #96]	; (800c268 <xTaskRemoveFromEventList+0xb0>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	4a16      	ldr	r2, [pc, #88]	; (800c268 <xTaskRemoveFromEventList+0xb0>)
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4a13      	ldr	r2, [pc, #76]	; (800c26c <xTaskRemoveFromEventList+0xb4>)
 800c21e:	441a      	add	r2, r3
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f7ff fad6 	bl	800b7d8 <vListInsertEnd>
 800c22c:	e005      	b.n	800c23a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	3318      	adds	r3, #24
 800c232:	4619      	mov	r1, r3
 800c234:	480e      	ldr	r0, [pc, #56]	; (800c270 <xTaskRemoveFromEventList+0xb8>)
 800c236:	f7ff facf 	bl	800b7d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23e:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <xTaskRemoveFromEventList+0xbc>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c244:	429a      	cmp	r2, r3
 800c246:	d905      	bls.n	800c254 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c248:	2301      	movs	r3, #1
 800c24a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <xTaskRemoveFromEventList+0xc0>)
 800c24e:	2201      	movs	r2, #1
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	e001      	b.n	800c258 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c254:	2300      	movs	r3, #0
 800c256:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c258:	697b      	ldr	r3, [r7, #20]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	200003e4 	.word	0x200003e4
 800c268:	200003cc 	.word	0x200003cc
 800c26c:	20000308 	.word	0x20000308
 800c270:	2000039c 	.word	0x2000039c
 800c274:	20000304 	.word	0x20000304
 800c278:	200003d8 	.word	0x200003d8

0800c27c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c284:	4b06      	ldr	r3, [pc, #24]	; (800c2a0 <vTaskInternalSetTimeOutState+0x24>)
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c28c:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <vTaskInternalSetTimeOutState+0x28>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	605a      	str	r2, [r3, #4]
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	200003dc 	.word	0x200003dc
 800c2a4:	200003c8 	.word	0x200003c8

0800c2a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d109      	bne.n	800c2cc <xTaskCheckForTimeOut+0x24>
 800c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	613b      	str	r3, [r7, #16]
 800c2ca:	e7fe      	b.n	800c2ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d109      	bne.n	800c2e6 <xTaskCheckForTimeOut+0x3e>
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	e7fe      	b.n	800c2e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c2e6:	f000 f987 	bl	800c5f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2ea:	4b1d      	ldr	r3, [pc, #116]	; (800c360 <xTaskCheckForTimeOut+0xb8>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c302:	d102      	bne.n	800c30a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c304:	2300      	movs	r3, #0
 800c306:	61fb      	str	r3, [r7, #28]
 800c308:	e023      	b.n	800c352 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	4b15      	ldr	r3, [pc, #84]	; (800c364 <xTaskCheckForTimeOut+0xbc>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	429a      	cmp	r2, r3
 800c314:	d007      	beq.n	800c326 <xTaskCheckForTimeOut+0x7e>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	69ba      	ldr	r2, [r7, #24]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d302      	bcc.n	800c326 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c320:	2301      	movs	r3, #1
 800c322:	61fb      	str	r3, [r7, #28]
 800c324:	e015      	b.n	800c352 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d20b      	bcs.n	800c348 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7ff ff9d 	bl	800c27c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c342:	2300      	movs	r3, #0
 800c344:	61fb      	str	r3, [r7, #28]
 800c346:	e004      	b.n	800c352 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	2200      	movs	r2, #0
 800c34c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c34e:	2301      	movs	r3, #1
 800c350:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c352:	f000 f97f 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800c356:	69fb      	ldr	r3, [r7, #28]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3720      	adds	r7, #32
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	200003c8 	.word	0x200003c8
 800c364:	200003dc 	.word	0x200003dc

0800c368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c368:	b480      	push	{r7}
 800c36a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c36c:	4b03      	ldr	r3, [pc, #12]	; (800c37c <vTaskMissedYield+0x14>)
 800c36e:	2201      	movs	r2, #1
 800c370:	601a      	str	r2, [r3, #0]
}
 800c372:	bf00      	nop
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	200003d8 	.word	0x200003d8

0800c380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c386:	4b0c      	ldr	r3, [pc, #48]	; (800c3b8 <prvResetNextTaskUnblockTime+0x38>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d104      	bne.n	800c39a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c390:	4b0a      	ldr	r3, [pc, #40]	; (800c3bc <prvResetNextTaskUnblockTime+0x3c>)
 800c392:	f04f 32ff 	mov.w	r2, #4294967295
 800c396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c398:	e008      	b.n	800c3ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c39a:	4b07      	ldr	r3, [pc, #28]	; (800c3b8 <prvResetNextTaskUnblockTime+0x38>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	4a04      	ldr	r2, [pc, #16]	; (800c3bc <prvResetNextTaskUnblockTime+0x3c>)
 800c3aa:	6013      	str	r3, [r2, #0]
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	20000394 	.word	0x20000394
 800c3bc:	200003e0 	.word	0x200003e0

0800c3c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3c6:	4b0b      	ldr	r3, [pc, #44]	; (800c3f4 <xTaskGetSchedulerState+0x34>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d102      	bne.n	800c3d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	e008      	b.n	800c3e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3d4:	4b08      	ldr	r3, [pc, #32]	; (800c3f8 <xTaskGetSchedulerState+0x38>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d102      	bne.n	800c3e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3dc:	2302      	movs	r3, #2
 800c3de:	607b      	str	r3, [r7, #4]
 800c3e0:	e001      	b.n	800c3e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3e6:	687b      	ldr	r3, [r7, #4]
	}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	200003d0 	.word	0x200003d0
 800c3f8:	200003e4 	.word	0x200003e4

0800c3fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c408:	2300      	movs	r3, #0
 800c40a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d06c      	beq.n	800c4ec <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c412:	4b39      	ldr	r3, [pc, #228]	; (800c4f8 <xTaskPriorityDisinherit+0xfc>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d009      	beq.n	800c430 <xTaskPriorityDisinherit+0x34>
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	e7fe      	b.n	800c42e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c434:	2b00      	cmp	r3, #0
 800c436:	d109      	bne.n	800c44c <xTaskPriorityDisinherit+0x50>
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	60bb      	str	r3, [r7, #8]
 800c44a:	e7fe      	b.n	800c44a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c450:	1e5a      	subs	r2, r3, #1
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45e:	429a      	cmp	r2, r3
 800c460:	d044      	beq.n	800c4ec <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c466:	2b00      	cmp	r3, #0
 800c468:	d140      	bne.n	800c4ec <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	3304      	adds	r3, #4
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff fa0f 	bl	800b892 <uxListRemove>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d115      	bne.n	800c4a6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47e:	491f      	ldr	r1, [pc, #124]	; (800c4fc <xTaskPriorityDisinherit+0x100>)
 800c480:	4613      	mov	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	440b      	add	r3, r1
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10a      	bne.n	800c4a6 <xTaskPriorityDisinherit+0xaa>
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c494:	2201      	movs	r2, #1
 800c496:	fa02 f303 	lsl.w	r3, r2, r3
 800c49a:	43da      	mvns	r2, r3
 800c49c:	4b18      	ldr	r3, [pc, #96]	; (800c500 <xTaskPriorityDisinherit+0x104>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	4a17      	ldr	r2, [pc, #92]	; (800c500 <xTaskPriorityDisinherit+0x104>)
 800c4a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b2:	f1c3 0207 	rsb	r2, r3, #7
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4be:	2201      	movs	r2, #1
 800c4c0:	409a      	lsls	r2, r3
 800c4c2:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <xTaskPriorityDisinherit+0x104>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	4a0d      	ldr	r2, [pc, #52]	; (800c500 <xTaskPriorityDisinherit+0x104>)
 800c4ca:	6013      	str	r3, [r2, #0]
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	4a08      	ldr	r2, [pc, #32]	; (800c4fc <xTaskPriorityDisinherit+0x100>)
 800c4da:	441a      	add	r2, r3
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	f7ff f978 	bl	800b7d8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4ec:	697b      	ldr	r3, [r7, #20]
	}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000304 	.word	0x20000304
 800c4fc:	20000308 	.word	0x20000308
 800c500:	200003cc 	.word	0x200003cc

0800c504 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c50e:	4b29      	ldr	r3, [pc, #164]	; (800c5b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c514:	4b28      	ldr	r3, [pc, #160]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3304      	adds	r3, #4
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7ff f9b9 	bl	800b892 <uxListRemove>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10b      	bne.n	800c53e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c526:	4b24      	ldr	r3, [pc, #144]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52c:	2201      	movs	r2, #1
 800c52e:	fa02 f303 	lsl.w	r3, r2, r3
 800c532:	43da      	mvns	r2, r3
 800c534:	4b21      	ldr	r3, [pc, #132]	; (800c5bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4013      	ands	r3, r2
 800c53a:	4a20      	ldr	r2, [pc, #128]	; (800c5bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c53c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d10a      	bne.n	800c55c <prvAddCurrentTaskToDelayedList+0x58>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d007      	beq.n	800c55c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c54c:	4b1a      	ldr	r3, [pc, #104]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3304      	adds	r3, #4
 800c552:	4619      	mov	r1, r3
 800c554:	481a      	ldr	r0, [pc, #104]	; (800c5c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c556:	f7ff f93f 	bl	800b7d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c55a:	e026      	b.n	800c5aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4413      	add	r3, r2
 800c562:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c564:	4b14      	ldr	r3, [pc, #80]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	429a      	cmp	r2, r3
 800c572:	d209      	bcs.n	800c588 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c574:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	4b0f      	ldr	r3, [pc, #60]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3304      	adds	r3, #4
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7ff f94d 	bl	800b820 <vListInsert>
}
 800c586:	e010      	b.n	800c5aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c588:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3304      	adds	r3, #4
 800c592:	4619      	mov	r1, r3
 800c594:	4610      	mov	r0, r2
 800c596:	f7ff f943 	bl	800b820 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c59a:	4b0c      	ldr	r3, [pc, #48]	; (800c5cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d202      	bcs.n	800c5aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5a4:	4a09      	ldr	r2, [pc, #36]	; (800c5cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	6013      	str	r3, [r2, #0]
}
 800c5aa:	bf00      	nop
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	200003c8 	.word	0x200003c8
 800c5b8:	20000304 	.word	0x20000304
 800c5bc:	200003cc 	.word	0x200003cc
 800c5c0:	200003b0 	.word	0x200003b0
 800c5c4:	20000398 	.word	0x20000398
 800c5c8:	20000394 	.word	0x20000394
 800c5cc:	200003e0 	.word	0x200003e0

0800c5d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5d0:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <pxCurrentTCBConst2>)
 800c5d2:	6819      	ldr	r1, [r3, #0]
 800c5d4:	6808      	ldr	r0, [r1, #0]
 800c5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5da:	f380 8809 	msr	PSP, r0
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f04f 0000 	mov.w	r0, #0
 800c5e6:	f380 8811 	msr	BASEPRI, r0
 800c5ea:	4770      	bx	lr
 800c5ec:	f3af 8000 	nop.w

0800c5f0 <pxCurrentTCBConst2>:
 800c5f0:	20000304 	.word	0x20000304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop

0800c5f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c610:	4b0e      	ldr	r3, [pc, #56]	; (800c64c <vPortEnterCritical+0x54>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3301      	adds	r3, #1
 800c616:	4a0d      	ldr	r2, [pc, #52]	; (800c64c <vPortEnterCritical+0x54>)
 800c618:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c61a:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <vPortEnterCritical+0x54>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d10e      	bne.n	800c640 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c622:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <vPortEnterCritical+0x58>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d009      	beq.n	800c640 <vPortEnterCritical+0x48>
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	603b      	str	r3, [r7, #0]
 800c63e:	e7fe      	b.n	800c63e <vPortEnterCritical+0x46>
	}
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	20000098 	.word	0x20000098
 800c650:	e000ed04 	.word	0xe000ed04

0800c654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c65a:	4b11      	ldr	r3, [pc, #68]	; (800c6a0 <vPortExitCritical+0x4c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d109      	bne.n	800c676 <vPortExitCritical+0x22>
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	607b      	str	r3, [r7, #4]
 800c674:	e7fe      	b.n	800c674 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c676:	4b0a      	ldr	r3, [pc, #40]	; (800c6a0 <vPortExitCritical+0x4c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	4a08      	ldr	r2, [pc, #32]	; (800c6a0 <vPortExitCritical+0x4c>)
 800c67e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c680:	4b07      	ldr	r3, [pc, #28]	; (800c6a0 <vPortExitCritical+0x4c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d104      	bne.n	800c692 <vPortExitCritical+0x3e>
 800c688:	2300      	movs	r3, #0
 800c68a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c692:	bf00      	nop
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	20000098 	.word	0x20000098
	...

0800c6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6b0:	f3ef 8009 	mrs	r0, PSP
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	4b15      	ldr	r3, [pc, #84]	; (800c710 <pxCurrentTCBConst>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	f01e 0f10 	tst.w	lr, #16
 800c6c0:	bf08      	it	eq
 800c6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	6010      	str	r0, [r2, #0]
 800c6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6d4:	f380 8811 	msr	BASEPRI, r0
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f7ff fcc6 	bl	800c070 <vTaskSwitchContext>
 800c6e4:	f04f 0000 	mov.w	r0, #0
 800c6e8:	f380 8811 	msr	BASEPRI, r0
 800c6ec:	bc09      	pop	{r0, r3}
 800c6ee:	6819      	ldr	r1, [r3, #0]
 800c6f0:	6808      	ldr	r0, [r1, #0]
 800c6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f6:	f01e 0f10 	tst.w	lr, #16
 800c6fa:	bf08      	it	eq
 800c6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c700:	f380 8809 	msr	PSP, r0
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	f3af 8000 	nop.w

0800c710 <pxCurrentTCBConst>:
 800c710:	20000304 	.word	0x20000304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop

0800c718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c730:	f7ff fbe6 	bl	800bf00 <xTaskIncrementTick>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c73a:	4b06      	ldr	r3, [pc, #24]	; (800c754 <SysTick_Handler+0x3c>)
 800c73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c740:	601a      	str	r2, [r3, #0]
 800c742:	2300      	movs	r3, #0
 800c744:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c74c:	bf00      	nop
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	e000ed04 	.word	0xe000ed04

0800c758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c75e:	f3ef 8305 	mrs	r3, IPSR
 800c762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b0f      	cmp	r3, #15
 800c768:	d913      	bls.n	800c792 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c76a:	4a16      	ldr	r2, [pc, #88]	; (800c7c4 <vPortValidateInterruptPriority+0x6c>)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c774:	4b14      	ldr	r3, [pc, #80]	; (800c7c8 <vPortValidateInterruptPriority+0x70>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	7afa      	ldrb	r2, [r7, #11]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d209      	bcs.n	800c792 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	607b      	str	r3, [r7, #4]
 800c790:	e7fe      	b.n	800c790 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c792:	4b0e      	ldr	r3, [pc, #56]	; (800c7cc <vPortValidateInterruptPriority+0x74>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c79a:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <vPortValidateInterruptPriority+0x78>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d909      	bls.n	800c7b6 <vPortValidateInterruptPriority+0x5e>
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	603b      	str	r3, [r7, #0]
 800c7b4:	e7fe      	b.n	800c7b4 <vPortValidateInterruptPriority+0x5c>
	}
 800c7b6:	bf00      	nop
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	e000e3f0 	.word	0xe000e3f0
 800c7c8:	200003e8 	.word	0x200003e8
 800c7cc:	e000ed0c 	.word	0xe000ed0c
 800c7d0:	200003ec 	.word	0x200003ec

0800c7d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe feca 	bl	800b57c <USBH_LL_IncTimer>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fe ff0e 	bl	800b620 <USBH_LL_Connect>
}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe ff23 	bl	800b666 <USBH_LL_Disconnect>
}
 800c820:	bf00      	nop
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	70fb      	strb	r3, [r7, #3]
 800c834:	4613      	mov	r3, r2
 800c836:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe ff43 	bl	800b6ca <USBH_LL_NotifyURBChange>
#endif
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe feb8 	bl	800b5d0 <USBH_LL_PortEnabled>
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe fec4 	bl	800b604 <USBH_LL_PortDisabled>
}
 800c87c:	bf00      	nop
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c890:	2300      	movs	r3, #0
 800c892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f9 f99d 	bl	8005bda <HAL_HCD_Stop>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8a4:	7bfb      	ldrb	r3, [r7, #15]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 f808 	bl	800c8bc <USBH_Get_USB_Status>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
	...

0800c8bc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c8ca:	79fb      	ldrb	r3, [r7, #7]
 800c8cc:	2b03      	cmp	r3, #3
 800c8ce:	d817      	bhi.n	800c900 <USBH_Get_USB_Status+0x44>
 800c8d0:	a201      	add	r2, pc, #4	; (adr r2, 800c8d8 <USBH_Get_USB_Status+0x1c>)
 800c8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d6:	bf00      	nop
 800c8d8:	0800c8e9 	.word	0x0800c8e9
 800c8dc:	0800c8ef 	.word	0x0800c8ef
 800c8e0:	0800c8f5 	.word	0x0800c8f5
 800c8e4:	0800c8fb 	.word	0x0800c8fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ec:	e00b      	b.n	800c906 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8f2:	e008      	b.n	800c906 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8f8:	e005      	b.n	800c906 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c8fe:	e002      	b.n	800c906 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c900:	2302      	movs	r3, #2
 800c902:	73fb      	strb	r3, [r7, #15]
    break;
 800c904:	bf00      	nop
  }
  return usb_status;
 800c906:	7bfb      	ldrb	r3, [r7, #15]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <__errno>:
 800c914:	4b01      	ldr	r3, [pc, #4]	; (800c91c <__errno+0x8>)
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	2000009c 	.word	0x2000009c

0800c920 <__libc_init_array>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	4e0d      	ldr	r6, [pc, #52]	; (800c958 <__libc_init_array+0x38>)
 800c924:	4c0d      	ldr	r4, [pc, #52]	; (800c95c <__libc_init_array+0x3c>)
 800c926:	1ba4      	subs	r4, r4, r6
 800c928:	10a4      	asrs	r4, r4, #2
 800c92a:	2500      	movs	r5, #0
 800c92c:	42a5      	cmp	r5, r4
 800c92e:	d109      	bne.n	800c944 <__libc_init_array+0x24>
 800c930:	4e0b      	ldr	r6, [pc, #44]	; (800c960 <__libc_init_array+0x40>)
 800c932:	4c0c      	ldr	r4, [pc, #48]	; (800c964 <__libc_init_array+0x44>)
 800c934:	f000 f8d4 	bl	800cae0 <_init>
 800c938:	1ba4      	subs	r4, r4, r6
 800c93a:	10a4      	asrs	r4, r4, #2
 800c93c:	2500      	movs	r5, #0
 800c93e:	42a5      	cmp	r5, r4
 800c940:	d105      	bne.n	800c94e <__libc_init_array+0x2e>
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c948:	4798      	blx	r3
 800c94a:	3501      	adds	r5, #1
 800c94c:	e7ee      	b.n	800c92c <__libc_init_array+0xc>
 800c94e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c952:	4798      	blx	r3
 800c954:	3501      	adds	r5, #1
 800c956:	e7f2      	b.n	800c93e <__libc_init_array+0x1e>
 800c958:	080105bc 	.word	0x080105bc
 800c95c:	080105bc 	.word	0x080105bc
 800c960:	080105bc 	.word	0x080105bc
 800c964:	080105c0 	.word	0x080105c0

0800c968 <malloc>:
 800c968:	4b02      	ldr	r3, [pc, #8]	; (800c974 <malloc+0xc>)
 800c96a:	4601      	mov	r1, r0
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	f000 b817 	b.w	800c9a0 <_malloc_r>
 800c972:	bf00      	nop
 800c974:	2000009c 	.word	0x2000009c

0800c978 <memcpy>:
 800c978:	b510      	push	{r4, lr}
 800c97a:	1e43      	subs	r3, r0, #1
 800c97c:	440a      	add	r2, r1
 800c97e:	4291      	cmp	r1, r2
 800c980:	d100      	bne.n	800c984 <memcpy+0xc>
 800c982:	bd10      	pop	{r4, pc}
 800c984:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c988:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c98c:	e7f7      	b.n	800c97e <memcpy+0x6>

0800c98e <memset>:
 800c98e:	4402      	add	r2, r0
 800c990:	4603      	mov	r3, r0
 800c992:	4293      	cmp	r3, r2
 800c994:	d100      	bne.n	800c998 <memset+0xa>
 800c996:	4770      	bx	lr
 800c998:	f803 1b01 	strb.w	r1, [r3], #1
 800c99c:	e7f9      	b.n	800c992 <memset+0x4>
	...

0800c9a0 <_malloc_r>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	1ccd      	adds	r5, r1, #3
 800c9a4:	f025 0503 	bic.w	r5, r5, #3
 800c9a8:	3508      	adds	r5, #8
 800c9aa:	2d0c      	cmp	r5, #12
 800c9ac:	bf38      	it	cc
 800c9ae:	250c      	movcc	r5, #12
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	db01      	blt.n	800c9ba <_malloc_r+0x1a>
 800c9b6:	42a9      	cmp	r1, r5
 800c9b8:	d903      	bls.n	800c9c2 <_malloc_r+0x22>
 800c9ba:	230c      	movs	r3, #12
 800c9bc:	6033      	str	r3, [r6, #0]
 800c9be:	2000      	movs	r0, #0
 800c9c0:	bd70      	pop	{r4, r5, r6, pc}
 800c9c2:	f000 f88b 	bl	800cadc <__malloc_lock>
 800c9c6:	4a21      	ldr	r2, [pc, #132]	; (800ca4c <_malloc_r+0xac>)
 800c9c8:	6814      	ldr	r4, [r2, #0]
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	b991      	cbnz	r1, 800c9f4 <_malloc_r+0x54>
 800c9ce:	4c20      	ldr	r4, [pc, #128]	; (800ca50 <_malloc_r+0xb0>)
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	b91b      	cbnz	r3, 800c9dc <_malloc_r+0x3c>
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f000 f871 	bl	800cabc <_sbrk_r>
 800c9da:	6020      	str	r0, [r4, #0]
 800c9dc:	4629      	mov	r1, r5
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f000 f86c 	bl	800cabc <_sbrk_r>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d124      	bne.n	800ca32 <_malloc_r+0x92>
 800c9e8:	230c      	movs	r3, #12
 800c9ea:	6033      	str	r3, [r6, #0]
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f000 f876 	bl	800cade <__malloc_unlock>
 800c9f2:	e7e4      	b.n	800c9be <_malloc_r+0x1e>
 800c9f4:	680b      	ldr	r3, [r1, #0]
 800c9f6:	1b5b      	subs	r3, r3, r5
 800c9f8:	d418      	bmi.n	800ca2c <_malloc_r+0x8c>
 800c9fa:	2b0b      	cmp	r3, #11
 800c9fc:	d90f      	bls.n	800ca1e <_malloc_r+0x7e>
 800c9fe:	600b      	str	r3, [r1, #0]
 800ca00:	50cd      	str	r5, [r1, r3]
 800ca02:	18cc      	adds	r4, r1, r3
 800ca04:	4630      	mov	r0, r6
 800ca06:	f000 f86a 	bl	800cade <__malloc_unlock>
 800ca0a:	f104 000b 	add.w	r0, r4, #11
 800ca0e:	1d23      	adds	r3, r4, #4
 800ca10:	f020 0007 	bic.w	r0, r0, #7
 800ca14:	1ac3      	subs	r3, r0, r3
 800ca16:	d0d3      	beq.n	800c9c0 <_malloc_r+0x20>
 800ca18:	425a      	negs	r2, r3
 800ca1a:	50e2      	str	r2, [r4, r3]
 800ca1c:	e7d0      	b.n	800c9c0 <_malloc_r+0x20>
 800ca1e:	428c      	cmp	r4, r1
 800ca20:	684b      	ldr	r3, [r1, #4]
 800ca22:	bf16      	itet	ne
 800ca24:	6063      	strne	r3, [r4, #4]
 800ca26:	6013      	streq	r3, [r2, #0]
 800ca28:	460c      	movne	r4, r1
 800ca2a:	e7eb      	b.n	800ca04 <_malloc_r+0x64>
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	6849      	ldr	r1, [r1, #4]
 800ca30:	e7cc      	b.n	800c9cc <_malloc_r+0x2c>
 800ca32:	1cc4      	adds	r4, r0, #3
 800ca34:	f024 0403 	bic.w	r4, r4, #3
 800ca38:	42a0      	cmp	r0, r4
 800ca3a:	d005      	beq.n	800ca48 <_malloc_r+0xa8>
 800ca3c:	1a21      	subs	r1, r4, r0
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f000 f83c 	bl	800cabc <_sbrk_r>
 800ca44:	3001      	adds	r0, #1
 800ca46:	d0cf      	beq.n	800c9e8 <_malloc_r+0x48>
 800ca48:	6025      	str	r5, [r4, #0]
 800ca4a:	e7db      	b.n	800ca04 <_malloc_r+0x64>
 800ca4c:	200003f0 	.word	0x200003f0
 800ca50:	200003f4 	.word	0x200003f4

0800ca54 <rand>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4b13      	ldr	r3, [pc, #76]	; (800caa4 <rand+0x50>)
 800ca58:	681c      	ldr	r4, [r3, #0]
 800ca5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca5c:	b97b      	cbnz	r3, 800ca7e <rand+0x2a>
 800ca5e:	2018      	movs	r0, #24
 800ca60:	f7ff ff82 	bl	800c968 <malloc>
 800ca64:	4a10      	ldr	r2, [pc, #64]	; (800caa8 <rand+0x54>)
 800ca66:	4b11      	ldr	r3, [pc, #68]	; (800caac <rand+0x58>)
 800ca68:	63a0      	str	r0, [r4, #56]	; 0x38
 800ca6a:	e9c0 2300 	strd	r2, r3, [r0]
 800ca6e:	4b10      	ldr	r3, [pc, #64]	; (800cab0 <rand+0x5c>)
 800ca70:	6083      	str	r3, [r0, #8]
 800ca72:	230b      	movs	r3, #11
 800ca74:	8183      	strh	r3, [r0, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ca7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ca80:	480c      	ldr	r0, [pc, #48]	; (800cab4 <rand+0x60>)
 800ca82:	690a      	ldr	r2, [r1, #16]
 800ca84:	694b      	ldr	r3, [r1, #20]
 800ca86:	4c0c      	ldr	r4, [pc, #48]	; (800cab8 <rand+0x64>)
 800ca88:	4350      	muls	r0, r2
 800ca8a:	fb04 0003 	mla	r0, r4, r3, r0
 800ca8e:	fba2 2304 	umull	r2, r3, r2, r4
 800ca92:	4403      	add	r3, r0
 800ca94:	1c54      	adds	r4, r2, #1
 800ca96:	f143 0500 	adc.w	r5, r3, #0
 800ca9a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800ca9e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	2000009c 	.word	0x2000009c
 800caa8:	abcd330e 	.word	0xabcd330e
 800caac:	e66d1234 	.word	0xe66d1234
 800cab0:	0005deec 	.word	0x0005deec
 800cab4:	5851f42d 	.word	0x5851f42d
 800cab8:	4c957f2d 	.word	0x4c957f2d

0800cabc <_sbrk_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4c06      	ldr	r4, [pc, #24]	; (800cad8 <_sbrk_r+0x1c>)
 800cac0:	2300      	movs	r3, #0
 800cac2:	4605      	mov	r5, r0
 800cac4:	4608      	mov	r0, r1
 800cac6:	6023      	str	r3, [r4, #0]
 800cac8:	f7f5 f990 	bl	8001dec <_sbrk>
 800cacc:	1c43      	adds	r3, r0, #1
 800cace:	d102      	bne.n	800cad6 <_sbrk_r+0x1a>
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	b103      	cbz	r3, 800cad6 <_sbrk_r+0x1a>
 800cad4:	602b      	str	r3, [r5, #0]
 800cad6:	bd38      	pop	{r3, r4, r5, pc}
 800cad8:	20000a54 	.word	0x20000a54

0800cadc <__malloc_lock>:
 800cadc:	4770      	bx	lr

0800cade <__malloc_unlock>:
 800cade:	4770      	bx	lr

0800cae0 <_init>:
 800cae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae2:	bf00      	nop
 800cae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cae6:	bc08      	pop	{r3}
 800cae8:	469e      	mov	lr, r3
 800caea:	4770      	bx	lr

0800caec <_fini>:
 800caec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caee:	bf00      	nop
 800caf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caf2:	bc08      	pop	{r3}
 800caf4:	469e      	mov	lr, r3
 800caf6:	4770      	bx	lr
