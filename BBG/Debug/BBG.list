
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a470  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b38  0800a620  0800a620  0001a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c158  0800c158  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c160  0800c160  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c160  0800c160  0001c160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c164  0800c164  0001c164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800c168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  200000bc  0800c224  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  0800c224  00020984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003da14  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006eb8  00000000  00000000  0005db00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025e0  00000000  00000000  000649b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022e8  00000000  00000000  00066f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fe11  00000000  00000000  00069280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028082  00000000  00000000  00099091  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f62a9  00000000  00000000  000c1113  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b73bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fbc  00000000  00000000  001b7438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a608 	.word	0x0800a608

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	0800a608 	.word	0x0800a608

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
////
////	bbg->kulka = kulka;
////	rysuj_kulke(bbg->kulka);
//}

void BBG_init(BBG* bbg, Platforma *platforma, Klocek **klocki, Kulka *kulka, int lkl) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	60da      	str	r2, [r3, #12]
    bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
    rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f001 f888 	bl	8001624 <rysuj_platforme>

    bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e00b      	b.n	8000538 <BBG_init+0x48>
        rysuj_klocek(bbg->klocki[i]);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fc49 	bl	8000dc4 <rysuj_klocek>
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbee      	blt.n	8000520 <BBG_init+0x30>
    }

    bbg->kulka = kulka;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	609a      	str	r2, [r3, #8]
    rysuj_kulke(bbg->kulka);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fc73 	bl	8000e38 <rysuj_kulke>
}
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <BBG_obsluga_zbicia_klocka>:




void BBG_obsluga_zbicia_klocka(BBG* bbg) {
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e0ad      	b.n	80006c6 <BBG_obsluga_zbicia_klocka+0x16a>
        // Sprawdź, czy kulka zderzyła się z klockiem
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	685a      	ldr	r2, [r3, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	441a      	add	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6859      	ldr	r1, [r3, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	f2c0 809a 	blt.w	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	1ad2      	subs	r2, r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6859      	ldr	r1, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	440b      	add	r3, r1
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6859      	ldr	r1, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6858      	ldr	r0, [r3, #4]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4403      	add	r3, r0
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	440b      	add	r3, r1
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 80005b8:	429a      	cmp	r2, r3
 80005ba:	f300 8081 	bgt.w	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	441a      	add	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6859      	ldr	r1, [r3, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005da:	429a      	cmp	r2, r3
 80005dc:	db70      	blt.n	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_x - bbg->kulka->promien <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	1ad2      	subs	r2, r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6859      	ldr	r1, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	440b      	add	r3, r1
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6858      	ldr	r0, [r3, #4]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4403      	add	r3, r0
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	440b      	add	r3, r1
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 800060a:	429a      	cmp	r2, r3
 800060c:	dc58      	bgt.n	80006c0 <BBG_obsluga_zbicia_klocka+0x164>

            // Odwróć kierunek prędkości kulki
            bbg->kulka->predkosc_x *= -1;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	68da      	ldr	r2, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4252      	negs	r2, r2
 800061a:	60da      	str	r2, [r3, #12]
            bbg->kulka->predkosc_y *= -1;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	691a      	ldr	r2, [r3, #16]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4252      	negs	r2, r2
 8000628:	611a      	str	r2, [r3, #16]

            // zamaluj miejsce zbitego klocka
            BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800062a:	482d      	ldr	r0, [pc, #180]	; (80006e0 <BBG_obsluga_zbicia_klocka+0x184>)
 800062c:	f001 ff44 	bl	80024b8 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000630:	482b      	ldr	r0, [pc, #172]	; (80006e0 <BBG_obsluga_zbicia_klocka+0x184>)
 8000632:	f001 ff29 	bl	8002488 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	b298      	uxth	r0, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	b299      	uxth	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	b29c      	uxth	r4, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4622      	mov	r2, r4
 8000678:	f002 f8a8 	bl	80027cc <BSP_LCD_FillRect>

            // Usuń trafiony klocek z tablicy klocków
            //free(bbg->klocki[i]);

            // Przesuń pozostałe klocki w tablicy, aby zapełnić lukę po usuniętym klocku
            for (int j = i; j < bbg->liczba_klockow - 1; j++) {
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	e00f      	b.n	80006a2 <BBG_obsluga_zbicia_klocka+0x146>
                bbg->klocki[j] = bbg->klocki[j + 1];
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	441a      	add	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6859      	ldr	r1, [r3, #4]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	6812      	ldr	r2, [r2, #0]
 800069a:	601a      	str	r2, [r3, #0]
            for (int j = i; j < bbg->liczba_klockow - 1; j++) {
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	3301      	adds	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dbe9      	blt.n	8000682 <BBG_obsluga_zbicia_klocka+0x126>
            }

            // Zmniejsz liczbę klocków o 1
            bbg->liczba_klockow--;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	1e5a      	subs	r2, r3, #1
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]

            // Przerwij pętlę, gdy trafiony zostanie tylko jeden klocek
            if (bbg->liczba_klockow == 0) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d009      	beq.n	80006d4 <BBG_obsluga_zbicia_klocka+0x178>
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	f6ff af4c 	blt.w	800056a <BBG_obsluga_zbicia_klocka+0xe>
                break;
            }
        }
    }
}
 80006d2:	e000      	b.n	80006d6 <BBG_obsluga_zbicia_klocka+0x17a>
                break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	bf00      	nop
 80006e0:	ffff0000 	.word	0xffff0000

080006e4 <BBG_ruchKulki>:
    // Przykładowa obsługa dotyku
    printf("Obsługa dotyku ekranu\n");
}

// Ruch kulki (przykładowa implementacja)
void BBG_ruchKulki(BBG* bbg) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    // Przykładowy ruch kulki
    Kulka_ruch(bbg->kulka);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fbbb 	bl	8000e6c <Kulka_ruch>
    rysuj_kulke(bbg->kulka);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fb9c 	bl	8000e38 <rysuj_kulke>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CRC_Init+0x20>)
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <MX_CRC_Init+0x24>)
 8000710:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_CRC_Init+0x20>)
 8000714:	f002 fd98 	bl	8003248 <HAL_CRC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800071e:	f000 ff5b 	bl	80015d8 <Error_Handler>
  }

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000037c 	.word	0x2000037c
 800072c:	40023000 	.word	0x40023000

08000730 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0b      	ldr	r2, [pc, #44]	; (800076c <HAL_CRC_MspInit+0x3c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d10d      	bne.n	800075e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_CRC_MspInit+0x40>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <HAL_CRC_MspInit+0x40>)
 800074c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_CRC_MspInit+0x40>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023000 	.word	0x40023000
 8000770:	40023800 	.word	0x40023800

08000774 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_DMA2D_Init+0x60>)
 800077c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007aa:	f002 ff25 	bl	80035f8 <HAL_DMA2D_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007b4:	f000 ff10 	bl	80015d8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007b8:	2101      	movs	r1, #1
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007bc:	f003 f98a 	bl	8003ad4 <HAL_DMA2D_ConfigLayer>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007c6:	f000 ff07 	bl	80015d8 <Error_Handler>
  }

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000384 	.word	0x20000384
 80007d4:	4002b000 	.word	0x4002b000

080007d8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_DMA2D_MspInit+0x48>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d115      	bne.n	8000816 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_DMA2D_MspInit+0x4c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <HAL_DMA2D_MspInit+0x4c>)
 80007f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_DMA2D_MspInit+0x4c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2105      	movs	r1, #5
 800080a:	205a      	movs	r0, #90	; 0x5a
 800080c:	f002 fcf2 	bl	80031f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000810:	205a      	movs	r0, #90	; 0x5a
 8000812:	f002 fd0b 	bl	800322c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	4002b000 	.word	0x4002b000
 8000824:	40023800 	.word	0x40023800

08000828 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_FMC_Init+0x98>)
 8000842:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <MX_FMC_Init+0x9c>)
 8000844:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_FMC_Init+0x98>)
 8000848:	2201      	movs	r2, #1
 800084a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_FMC_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_FMC_Init+0x98>)
 8000854:	2204      	movs	r2, #4
 8000856:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_FMC_Init+0x98>)
 800085a:	2210      	movs	r2, #16
 800085c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_FMC_Init+0x98>)
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_FMC_Init+0x98>)
 8000866:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800086a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_FMC_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_FMC_Init+0x98>)
 8000874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000878:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_FMC_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_FMC_Init+0x98>)
 8000882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000894:	2307      	movs	r3, #7
 8000896:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000898:	2303      	movs	r3, #3
 800089a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_FMC_Init+0x98>)
 80008aa:	f006 fa91 	bl	8006dd0 <HAL_SDRAM_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008b4:	f000 fe90 	bl	80015d8 <Error_Handler>
  }

}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200003c4 	.word	0x200003c4
 80008c4:	a0000140 	.word	0xa0000140

080008c8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <HAL_FMC_MspInit+0x104>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d16f      	bne.n	80009c4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80008e4:	4b39      	ldr	r3, [pc, #228]	; (80009cc <HAL_FMC_MspInit+0x104>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_FMC_MspInit+0x108>)
 80008f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <HAL_FMC_MspInit+0x108>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6393      	str	r3, [r2, #56]	; 0x38
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_FMC_MspInit+0x108>)
 80008fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000906:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800090a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000918:	230c      	movs	r3, #12
 800091a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	482c      	ldr	r0, [pc, #176]	; (80009d4 <HAL_FMC_MspInit+0x10c>)
 8000922:	f003 fa05 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000936:	230c      	movs	r3, #12
 8000938:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4826      	ldr	r0, [pc, #152]	; (80009d8 <HAL_FMC_MspInit+0x110>)
 8000940:	f003 f9f6 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000944:	f248 1333 	movw	r3, #33075	; 0x8133
 8000948:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4619      	mov	r1, r3
 800095e:	481f      	ldr	r0, [pc, #124]	; (80009dc <HAL_FMC_MspInit+0x114>)
 8000960:	f003 f9e6 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000964:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000968:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4818      	ldr	r0, [pc, #96]	; (80009e0 <HAL_FMC_MspInit+0x118>)
 8000980:	f003 f9d6 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000984:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000988:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <HAL_FMC_MspInit+0x11c>)
 80009a0:	f003 f9c6 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b4:	230c      	movs	r3, #12
 80009b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <HAL_FMC_MspInit+0x120>)
 80009be:	f003 f9b7 	bl	8003d30 <HAL_GPIO_Init>
 80009c2:	e000      	b.n	80009c6 <HAL_FMC_MspInit+0xfe>
    return;
 80009c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000d8 	.word	0x200000d8
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021400 	.word	0x40021400
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	40020400 	.word	0x40020400

080009ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80009f4:	f7ff ff68 	bl	80008c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
 8000a32:	4b7a      	ldr	r3, [pc, #488]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a79      	ldr	r2, [pc, #484]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b77      	ldr	r3, [pc, #476]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	623b      	str	r3, [r7, #32]
 8000a48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a72      	ldr	r2, [pc, #456]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b70      	ldr	r3, [pc, #448]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a6b      	ldr	r2, [pc, #428]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b69      	ldr	r3, [pc, #420]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a64      	ldr	r2, [pc, #400]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a5d      	ldr	r2, [pc, #372]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b5b      	ldr	r3, [pc, #364]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a56      	ldr	r2, [pc, #344]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a4f      	ldr	r2, [pc, #316]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b49      	ldr	r3, [pc, #292]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a48      	ldr	r2, [pc, #288]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <MX_GPIO_Init+0x204>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2116      	movs	r1, #22
 8000b12:	4843      	ldr	r0, [pc, #268]	; (8000c20 <MX_GPIO_Init+0x208>)
 8000b14:	f003 fbc0 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	4841      	ldr	r0, [pc, #260]	; (8000c24 <MX_GPIO_Init+0x20c>)
 8000b1e:	f003 fbbb 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b28:	483f      	ldr	r0, [pc, #252]	; (8000c28 <MX_GPIO_Init+0x210>)
 8000b2a:	f003 fbb5 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b34:	483d      	ldr	r0, [pc, #244]	; (8000c2c <MX_GPIO_Init+0x214>)
 8000b36:	f003 fbaf 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b3a:	2316      	movs	r3, #22
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4833      	ldr	r0, [pc, #204]	; (8000c20 <MX_GPIO_Init+0x208>)
 8000b52:	f003 f8ed 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b56:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <MX_GPIO_Init+0x218>)
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482e      	ldr	r0, [pc, #184]	; (8000c24 <MX_GPIO_Init+0x20c>)
 8000b6c:	f003 f8e0 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4827      	ldr	r0, [pc, #156]	; (8000c24 <MX_GPIO_Init+0x20c>)
 8000b88:	f003 f8d2 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_GPIO_Init+0x218>)
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <MX_GPIO_Init+0x208>)
 8000ba0:	f003 f8c6 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <MX_GPIO_Init+0x21c>)
 8000bb8:	f003 f8ba 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <MX_GPIO_Init+0x210>)
 8000bd2:	f003 f8ad 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000bd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_GPIO_Init+0x210>)
 8000bf0:	f003 f89e 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_GPIO_Init+0x214>)
 8000c0e:	f003 f88f 	bl	8003d30 <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	; 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020c00 	.word	0x40020c00
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	10120000 	.word	0x10120000
 8000c34:	40020400 	.word	0x40020400

08000c38 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <MX_I2C3_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c44:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <MX_I2C3_Init+0x7c>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c76:	f004 fd13 	bl	80056a0 <HAL_I2C_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f000 fcaa 	bl	80015d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c88:	f004 fe42 	bl	8005910 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000c92:	f000 fca1 	bl	80015d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_I2C3_Init+0x74>)
 8000c9a:	f004 fe75 	bl	8005988 <HAL_I2CEx_ConfigDigitalFilter>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000ca4:	f000 fc98 	bl	80015d8 <Error_Handler>
  }

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200003f8 	.word	0x200003f8
 8000cb0:	40005c00 	.word	0x40005c00
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <HAL_I2C_MspInit+0xc4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d14b      	bne.n	8000d72 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d24:	2304      	movs	r3, #4
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <HAL_I2C_MspInit+0xcc>)
 8000d30:	f002 fffe 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d46:	2304      	movs	r3, #4
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <HAL_I2C_MspInit+0xd0>)
 8000d52:	f002 ffed 	bl	8003d30 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_I2C_MspInit+0xc8>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40005c00 	.word	0x40005c00
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020000 	.word	0x40020000

08000d8c <Klocek_init>:
#include "klocek.h"
#include "main.h"


// Inicjalizacja struktury Klocek
void Klocek_init(Klocek* k, int x, int y, int w, int h, uint32_t kol) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	601a      	str	r2, [r3, #0]
    k->pozycja_y = y;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	605a      	str	r2, [r3, #4]
    k->szerokosc = w;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	609a      	str	r2, [r3, #8]
    k->wysokosc = h;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	60da      	str	r2, [r3, #12]
    k->kolor = kol;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	611a      	str	r2, [r3, #16]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <rysuj_klocek>:

void rysuj_klocek(Klocek* k){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(k->kolor);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fb59 	bl	8002488 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	b298      	uxth	r0, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	b299      	uxth	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	f001 fced 	bl	80027cc <BSP_LCD_FillRect>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <Kulka_init>:
 */
#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka* kulka, int x, int y, int r, int vx, int vy, uint32_t kol) {
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	603b      	str	r3, [r7, #0]
    kulka->polozenie_x = x;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	601a      	str	r2, [r3, #0]
    kulka->polozenie_y = y;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	605a      	str	r2, [r3, #4]
    kulka->promien = r;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	609a      	str	r2, [r3, #8]
    kulka->predkosc_x = vx;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
    kulka->predkosc_y = vy;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	611a      	str	r2, [r3, #16]
    kulka->kolor = kol;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6a3a      	ldr	r2, [r7, #32]
 8000e2a:	615a      	str	r2, [r3, #20]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <rysuj_kulke>:

void rysuj_kulke(Kulka* kulka){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fb1f 	bl	8002488 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	b298      	uxth	r0, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	b299      	uxth	r1, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f001 fd0f 	bl	8002880 <BSP_LCD_FillCircle>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <Kulka_ruch>:
void Kulka_ruch(Kulka* kulka) {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	// Zamaluj stary stan kulki
	BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8000e74:	482f      	ldr	r0, [pc, #188]	; (8000f34 <Kulka_ruch+0xc8>)
 8000e76:	f001 fb07 	bl	8002488 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	b298      	uxth	r0, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	b299      	uxth	r1, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f001 fcf7 	bl	8002880 <BSP_LCD_FillCircle>

	// Oblicz nowe położenie kulki
	int nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
	int nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60bb      	str	r3, [r7, #8]

	// Sprawdź zderzenie z lewą i prawą krawędzią ekranu
	if (nowe_polozenie_x - kulka->promien < 0 || nowe_polozenie_x + kulka->promien > BSP_LCD_GetXSize()) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db09      	blt.n	8000eca <Kulka_ruch+0x5e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	461c      	mov	r4, r3
 8000ec0:	f001 fa56 	bl	8002370 <BSP_LCD_GetXSize>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	d904      	bls.n	8000ed4 <Kulka_ruch+0x68>
		// Zderzenie z lewą lub prawą krawędzią, zmień kierunek prędkości poziomej
		kulka->predkosc_x = -kulka->predkosc_x;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	425a      	negs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	60da      	str	r2, [r3, #12]
	}

	// Sprawdź zderzenie z górną i dolną krawędzią ekranu
	if (nowe_polozenie_y - kulka->promien < 0 || nowe_polozenie_y + kulka->promien > BSP_LCD_GetYSize()) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db09      	blt.n	8000ef4 <Kulka_ruch+0x88>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	461c      	mov	r4, r3
 8000eea:	f001 fa4d 	bl	8002388 <BSP_LCD_GetYSize>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	d904      	bls.n	8000efe <Kulka_ruch+0x92>
		// Zderzenie z górną lub dolną krawędzią, zmień kierunek prędkości pionowej
		kulka->predkosc_y = -kulka->predkosc_y;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	425a      	negs	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	611a      	str	r2, [r3, #16]
	}

	// Aktualizuj położenie kulki na nowe pozycje
	kulka->polozenie_x = nowe_polozenie_x;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = nowe_polozenie_y;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	605a      	str	r2, [r3, #4]

	// Narysuj kulke na nowej pozycji
	BSP_LCD_SetTextColor(kulka->kolor);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 faba 	bl	8002488 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	b298      	uxth	r0, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	f001 fcaa 	bl	8002880 <BSP_LCD_FillCircle>
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	ffff0000 	.word	0xffff0000

08000f38 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09a      	sub	sp, #104	; 0x68
 8000f3c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f42:	2234      	movs	r2, #52	; 0x34
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f009 fae9 	bl	800a51e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2234      	movs	r2, #52	; 0x34
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f009 fae3 	bl	800a51e <memset>

  hltdc.Instance = LTDC;
 8000f58:	4b4f      	ldr	r3, [pc, #316]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f5a:	4a50      	ldr	r2, [pc, #320]	; (800109c <MX_LTDC_Init+0x164>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f5e:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f64:	4b4c      	ldr	r3, [pc, #304]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f6a:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f70:	4b49      	ldr	r3, [pc, #292]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000f76:	4b48      	ldr	r3, [pc, #288]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f78:	2209      	movs	r2, #9
 8000f7a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000f7c:	4b46      	ldr	r3, [pc, #280]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000f82:	4b45      	ldr	r3, [pc, #276]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f84:	221d      	movs	r2, #29
 8000f86:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000f88:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000f8e:	4b42      	ldr	r3, [pc, #264]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f90:	f240 120d 	movw	r2, #269	; 0x10d
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000f96:	4b40      	ldr	r3, [pc, #256]	; (8001098 <MX_LTDC_Init+0x160>)
 8000f98:	f240 1243 	movw	r2, #323	; 0x143
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <MX_LTDC_Init+0x160>)
 8000fa0:	f240 1217 	movw	r2, #279	; 0x117
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_LTDC_Init+0x160>)
 8000fa8:	f240 1247 	movw	r2, #327	; 0x147
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_LTDC_Init+0x160>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_LTDC_Init+0x160>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <MX_LTDC_Init+0x160>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fc6:	4834      	ldr	r0, [pc, #208]	; (8001098 <MX_LTDC_Init+0x160>)
 8000fc8:	f004 fd1e 	bl	8005a08 <HAL_LTDC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fd2:	f000 fb01 	bl	80015d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000fda:	23f0      	movs	r3, #240	; 0xf0
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000fe2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000fec:	23ff      	movs	r3, #255	; 0xff
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ff4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff8:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000ffe:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001004:	23f0      	movs	r3, #240	; 0xf0
 8001006:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001008:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800100c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	481b      	ldr	r0, [pc, #108]	; (8001098 <MX_LTDC_Init+0x160>)
 800102a:	f004 fe7f 	bl	8005d2c <HAL_LTDC_ConfigLayer>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001034:	f000 fad0 	bl	80015d8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001054:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001056:	2305      	movs	r3, #5
 8001058:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_LTDC_Init+0x160>)
 8001080:	f004 fe54 	bl	8005d2c <HAL_LTDC_ConfigLayer>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 800108a:	f000 faa5 	bl	80015d8 <Error_Handler>
  }

}
 800108e:	bf00      	nop
 8001090:	3768      	adds	r7, #104	; 0x68
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000044c 	.word	0x2000044c
 800109c:	40016800 	.word	0x40016800

080010a0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	; 0x38
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a7b      	ldr	r2, [pc, #492]	; (80012ac <HAL_LTDC_MspInit+0x20c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	f040 80f0 	bne.w	80012a4 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	4b79      	ldr	r3, [pc, #484]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	4a78      	ldr	r2, [pc, #480]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 80010ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010d2:	6453      	str	r3, [r2, #68]	; 0x44
 80010d4:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010dc:	623b      	str	r3, [r7, #32]
 80010de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a71      	ldr	r2, [pc, #452]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a6a      	ldr	r2, [pc, #424]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a63      	ldr	r2, [pc, #396]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	4b5d      	ldr	r3, [pc, #372]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a5c      	ldr	r2, [pc, #368]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 800113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	4b56      	ldr	r3, [pc, #344]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a55      	ldr	r2, [pc, #340]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <HAL_LTDC_MspInit+0x210>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800119a:	230e      	movs	r3, #14
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	4843      	ldr	r0, [pc, #268]	; (80012b4 <HAL_LTDC_MspInit+0x214>)
 80011a6:	f002 fdc3 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011aa:	f641 0358 	movw	r3, #6232	; 0x1858
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011bc:	230e      	movs	r3, #14
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	483c      	ldr	r0, [pc, #240]	; (80012b8 <HAL_LTDC_MspInit+0x218>)
 80011c8:	f002 fdb2 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011cc:	2303      	movs	r3, #3
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011dc:	2309      	movs	r3, #9
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4835      	ldr	r0, [pc, #212]	; (80012bc <HAL_LTDC_MspInit+0x21c>)
 80011e8:	f002 fda2 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011ec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011fe:	230e      	movs	r3, #14
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	482c      	ldr	r0, [pc, #176]	; (80012bc <HAL_LTDC_MspInit+0x21c>)
 800120a:	f002 fd91 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800120e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001220:	230e      	movs	r3, #14
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4825      	ldr	r0, [pc, #148]	; (80012c0 <HAL_LTDC_MspInit+0x220>)
 800122c:	f002 fd80 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001230:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001242:	230e      	movs	r3, #14
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <HAL_LTDC_MspInit+0x224>)
 800124e:	f002 fd6f 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001252:	2348      	movs	r3, #72	; 0x48
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001262:	230e      	movs	r3, #14
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4816      	ldr	r0, [pc, #88]	; (80012c8 <HAL_LTDC_MspInit+0x228>)
 800126e:	f002 fd5f 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001272:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001284:	2309      	movs	r3, #9
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <HAL_LTDC_MspInit+0x220>)
 8001290:	f002 fd4e 	bl	8003d30 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2105      	movs	r1, #5
 8001298:	2058      	movs	r0, #88	; 0x58
 800129a:	f001 ffab 	bl	80031f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800129e:	2058      	movs	r0, #88	; 0x58
 80012a0:	f001 ffc4 	bl	800322c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80012a4:	bf00      	nop
 80012a6:	3738      	adds	r7, #56	; 0x38
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40016800 	.word	0x40016800
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b0a1      	sub	sp, #132	; 0x84
 80012d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d2:	f001 fe73 	bl	8002fbc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d6:	f000 f8e9 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012da:	f7ff fb9d 	bl	8000a18 <MX_GPIO_Init>
  MX_CRC_Init();
 80012de:	f7ff fa13 	bl	8000708 <MX_CRC_Init>
  MX_DMA2D_Init();
 80012e2:	f7ff fa47 	bl	8000774 <MX_DMA2D_Init>
  MX_FMC_Init();
 80012e6:	f7ff fa9f 	bl	8000828 <MX_FMC_Init>
  MX_I2C3_Init();
 80012ea:	f7ff fca5 	bl	8000c38 <MX_I2C3_Init>
  MX_LTDC_Init();
 80012ee:	f7ff fe23 	bl	8000f38 <MX_LTDC_Init>
  MX_SPI5_Init();
 80012f2:	f000 f9b3 	bl	800165c <MX_SPI5_Init>
  MX_TIM1_Init();
 80012f6:	f000 fb69 	bl	80019cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80012fa:	f000 fbd9 	bl	8001ab0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int odswiezanie = 16;
 80012fe:	2310      	movs	r3, #16
 8001300:	663b      	str	r3, [r7, #96]	; 0x60
      BSP_LCD_Init();
 8001302:	f000 ffcb 	bl	800229c <BSP_LCD_Init>
      BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 8001306:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800130a:	2000      	movs	r0, #0
 800130c:	f001 f848 	bl	80023a0 <BSP_LCD_LayerDefaultInit>
          BSP_LCD_SelectLayer(0);
 8001310:	2000      	movs	r0, #0
 8001312:	f001 f8a9 	bl	8002468 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(LCD_COLOR_RED);
 8001316:	4863      	ldr	r0, [pc, #396]	; (80014a4 <main+0x1d8>)
 8001318:	f001 f902 	bl	8002520 <BSP_LCD_Clear>

          int liczba_klockow = 32; // Liczba klocków
 800131c:	2320      	movs	r3, #32
 800131e:	65fb      	str	r3, [r7, #92]	; 0x5c
          int klocek_szerokosc = BSP_LCD_GetXSize() / 8; // Klocki są szersze niż wyższe
 8001320:	f001 f826 	bl	8002370 <BSP_LCD_GetXSize>
 8001324:	4603      	mov	r3, r0
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	65bb      	str	r3, [r7, #88]	; 0x58
          int klocek_wysokosc = BSP_LCD_GetYSize() / 16;   // Zakładamy 4 rzędy klocków
 800132a:	f001 f82d 	bl	8002388 <BSP_LCD_GetYSize>
 800132e:	4603      	mov	r3, r0
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	657b      	str	r3, [r7, #84]	; 0x54

          Platforma* platforma = (Platforma*)malloc(sizeof(Platforma));
 8001334:	2018      	movs	r0, #24
 8001336:	f009 f8df 	bl	800a4f8 <malloc>
 800133a:	4603      	mov	r3, r0
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
          Kulka* kulka = (Kulka*)malloc(sizeof(Kulka));
 800133e:	2018      	movs	r0, #24
 8001340:	f009 f8da 	bl	800a4f8 <malloc>
 8001344:	4603      	mov	r3, r0
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
          Klocek** klocki = (Klocek**)malloc(liczba_klockow * sizeof(Klocek*));
 8001348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4618      	mov	r0, r3
 800134e:	f009 f8d3 	bl	800a4f8 <malloc>
 8001352:	4603      	mov	r3, r0
 8001354:	64bb      	str	r3, [r7, #72]	; 0x48
          int licznik = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	66fb      	str	r3, [r7, #108]	; 0x6c

          for (int kk = 0; kk < liczba_klockow / 8; kk++) { // Zakładając 4 rzędy klocków
 800135a:	2300      	movs	r3, #0
 800135c:	66bb      	str	r3, [r7, #104]	; 0x68
 800135e:	e04a      	b.n	80013f6 <main+0x12a>
              for (int k = 0; k < 8; k++, licznik++) { // 8 kolumn klocków
 8001360:	2300      	movs	r3, #0
 8001362:	667b      	str	r3, [r7, #100]	; 0x64
 8001364:	e041      	b.n	80013ea <main+0x11e>
                  klocki[licznik] = (Klocek*)malloc(sizeof(Klocek));
 8001366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800136c:	18d4      	adds	r4, r2, r3
 800136e:	2014      	movs	r0, #20
 8001370:	f009 f8c2 	bl	800a4f8 <malloc>
 8001374:	4603      	mov	r3, r0
 8001376:	6023      	str	r3, [r4, #0]
                  uint32_t kolor_klocka = ((k % 2 == 0 && kk % 2 == 0) || (k % 2 == 1 && kk % 2 == 1)) ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 8001378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d104      	bne.n	800138c <main+0xc0>
 8001382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00f      	beq.n	80013ac <main+0xe0>
 800138c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800138e:	2b00      	cmp	r3, #0
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d109      	bne.n	80013b0 <main+0xe4>
 800139c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	bfb8      	it	lt
 80013a6:	425b      	neglt	r3, r3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <main+0xe4>
 80013ac:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <main+0x1dc>)
 80013ae:	e001      	b.n	80013b4 <main+0xe8>
 80013b0:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80013b4:	617b      	str	r3, [r7, #20]
                  Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka);
 80013b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013bc:	4413      	add	r3, r2
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013c4:	fb02 f103 	mul.w	r1, r2, r3
 80013c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013cc:	fb02 f203 	mul.w	r2, r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013da:	f7ff fcd7 	bl	8000d8c <Klocek_init>
              for (int k = 0; k < 8; k++, licznik++) { // 8 kolumn klocków
 80013de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013e0:	3301      	adds	r3, #1
 80013e2:	667b      	str	r3, [r7, #100]	; 0x64
 80013e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013e6:	3301      	adds	r3, #1
 80013e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	ddba      	ble.n	8001366 <main+0x9a>
          for (int kk = 0; kk < liczba_klockow / 8; kk++) { // Zakładając 4 rzędy klocków
 80013f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013f2:	3301      	adds	r3, #1
 80013f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80013f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da00      	bge.n	80013fe <main+0x132>
 80013fc:	3307      	adds	r3, #7
 80013fe:	10db      	asrs	r3, r3, #3
 8001400:	461a      	mov	r2, r3
 8001402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001404:	4293      	cmp	r3, r2
 8001406:	dbab      	blt.n	8001360 <main+0x94>
              }
          }

          int platforma_x = 50;
 8001408:	2332      	movs	r3, #50	; 0x32
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
          int platforma_y = BSP_LCD_GetYSize() - 20;
 800140c:	f000 ffbc 	bl	8002388 <BSP_LCD_GetYSize>
 8001410:	4603      	mov	r3, r0
 8001412:	3b14      	subs	r3, #20
 8001414:	643b      	str	r3, [r7, #64]	; 0x40
          int platforma_szerokosc = 100;
 8001416:	2364      	movs	r3, #100	; 0x64
 8001418:	63fb      	str	r3, [r7, #60]	; 0x3c
          int platforma_wysokosc = 10;
 800141a:	230a      	movs	r3, #10
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
          int platforma_krok = 5;
 800141e:	2305      	movs	r3, #5
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
          uint32_t platforma_kolor = LCD_COLOR_WHITE;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	633b      	str	r3, [r7, #48]	; 0x30

          Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800143a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800143c:	f000 f8d3 	bl	80015e6 <Platforma_init>

          int kulka_pocz_x = 20;
 8001440:	2314      	movs	r3, #20
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
          int kulka_pocz_y = BSP_LCD_GetYSize() / 2;
 8001444:	f000 ffa0 	bl	8002388 <BSP_LCD_GetYSize>
 8001448:	4603      	mov	r3, r0
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
          int kulka_r = 5;
 800144e:	2305      	movs	r3, #5
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
          int kulka_vx = 2;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
          int kulka_vy = 2;
 8001456:	2302      	movs	r3, #2
 8001458:	61fb      	str	r3, [r7, #28]
          uint32_t kulka_kolor = LCD_COLOR_WHITE;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	61bb      	str	r3, [r7, #24]

          Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001472:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001474:	f7ff fcc1 	bl	8000dfa <Kulka_init>

          BBG bbg;
          BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 8001478:	4638      	mov	r0, r7
 800147a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001482:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001484:	f7ff f834 	bl	80004f0 <BBG_init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BBG_ruchKulki(&bbg);
 8001488:	463b      	mov	r3, r7
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f92a 	bl	80006e4 <BBG_ruchKulki>
	  BBG_obsluga_zbicia_klocka(&bbg);
 8001490:	463b      	mov	r3, r7
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f862 	bl	800055c <BBG_obsluga_zbicia_klocka>
	  HAL_Delay(odswiezanie);
 8001498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fdd0 	bl	8003040 <HAL_Delay>
	  BBG_ruchKulki(&bbg);
 80014a0:	e7f2      	b.n	8001488 <main+0x1bc>
 80014a2:	bf00      	nop
 80014a4:	ffff0000 	.word	0xffff0000
 80014a8:	ff0000ff 	.word	0xff0000ff

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0a0      	sub	sp, #128	; 0x80
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014b6:	2230      	movs	r2, #48	; 0x30
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f009 f82f 	bl	800a51e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2230      	movs	r2, #48	; 0x30
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f009 f820 	bl	800a51e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <SystemClock_Config+0x100>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a31      	ldr	r2, [pc, #196]	; (80015ac <SystemClock_Config+0x100>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <SystemClock_Config+0x100>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <SystemClock_Config+0x104>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001506:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <SystemClock_Config+0x104>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <SystemClock_Config+0x104>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151a:	2301      	movs	r3, #1
 800151c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001522:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001524:	2302      	movs	r3, #2
 8001526:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001528:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800152c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152e:	2304      	movs	r3, #4
 8001530:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001532:	2348      	movs	r3, #72	; 0x48
 8001534:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800153a:	2303      	movs	r3, #3
 800153c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fdf2 	bl	800612c <HAL_RCC_OscConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800154e:	f000 f843 	bl	80015d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	230f      	movs	r3, #15
 8001554:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001556:	2302      	movs	r3, #2
 8001558:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001568:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800156c:	2102      	movs	r1, #2
 800156e:	4618      	mov	r0, r3
 8001570:	f005 f84c 	bl	800660c <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800157a:	f000 f82d 	bl	80015d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800157e:	2308      	movs	r3, #8
 8001580:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001582:	2332      	movs	r3, #50	; 0x32
 8001584:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001586:	2302      	movs	r3, #2
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4618      	mov	r0, r3
 8001594:	f005 fa5e 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800159e:	f000 f81b 	bl	80015d8 <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3780      	adds	r7, #128	; 0x80
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000

080015b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c6:	f001 fd1b 	bl	8003000 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40001000 	.word	0x40001000

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */


  /* USER CODE END Error_Handler_Debug */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <Platforma_init>:

#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma* platforma, int x, int y ,int w, int h, int k, uint32_t kol) {
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a3a      	ldr	r2, [r7, #32]
 8001616:	615a      	str	r2, [r3, #20]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <rysuj_platforme>:
void rysuj_platforme(Platforma* platforma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(platforma->kolor);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 ff29 	bl	8002488 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b298      	uxth	r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	b299      	uxth	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	b29b      	uxth	r3, r3
 800164e:	f001 f8bd 	bl	80027cc <BSP_LCD_FillRect>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_SPI5_Init+0x64>)
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <MX_SPI5_Init+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_SPI5_Init+0x64>)
 8001668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_SPI5_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_SPI5_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_SPI5_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_SPI5_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_SPI5_Init+0x64>)
 8001688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_SPI5_Init+0x64>)
 8001690:	2218      	movs	r2, #24
 8001692:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_SPI5_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_SPI5_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_SPI5_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_SPI5_Init+0x64>)
 80016a8:	220a      	movs	r2, #10
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_SPI5_Init+0x64>)
 80016ae:	f005 fc0e 	bl	8006ece <HAL_SPI_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80016b8:	f7ff ff8e 	bl	80015d8 <Error_Handler>
  }

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200004f4 	.word	0x200004f4
 80016c4:	40015000 	.word	0x40015000

080016c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_SPI_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12c      	bne.n	8001744 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_SPI_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_SPI_MspInit+0x88>)
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_SPI_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001722:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001734:	2305      	movs	r3, #5
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_SPI_MspInit+0x8c>)
 8001740:	f002 faf6 	bl	8003d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40015000 	.word	0x40015000
 8001750:	40023800 	.word	0x40023800
 8001754:	40021400 	.word	0x40021400

08001758 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_SPI_MspDeInit+0x30>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d10a      	bne.n	8001780 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_SPI_MspDeInit+0x34>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_SPI_MspDeInit+0x34>)
 8001770:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001776:	f44f 7160 	mov.w	r1, #896	; 0x380
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_SPI_MspDeInit+0x38>)
 800177c:	f002 fc82 	bl	8004084 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40015000 	.word	0x40015000
 800178c:	40023800 	.word	0x40023800
 8001790:	40021400 	.word	0x40021400

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_MspInit+0x54>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_MspInit+0x54>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_MspInit+0x54>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_MspInit+0x54>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_MspInit+0x54>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_MspInit+0x54>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	210f      	movs	r1, #15
 80017d6:	f06f 0001 	mvn.w	r0, #1
 80017da:	f001 fd0b 	bl	80031f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	2036      	movs	r0, #54	; 0x36
 8001802:	f001 fcf7 	bl	80031f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001806:	2036      	movs	r0, #54	; 0x36
 8001808:	f001 fd10 	bl	800322c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <HAL_InitTick+0xa4>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_InitTick+0xa4>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_InitTick+0xa4>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001828:	f107 0210 	add.w	r2, r7, #16
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f005 f8dc 	bl	80069f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001838:	f005 f8b2 	bl	80069a0 <HAL_RCC_GetPCLK1Freq>
 800183c:	4603      	mov	r3, r0
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_InitTick+0xa8>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9b      	lsrs	r3, r3, #18
 800184c:	3b01      	subs	r3, #1
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_InitTick+0xac>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_InitTick+0xb0>)
 8001854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_InitTick+0xac>)
 8001858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800185c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_InitTick+0xac>)
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_InitTick+0xac>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_InitTick+0xac>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <HAL_InitTick+0xac>)
 8001872:	f006 f8b7 	bl	80079e4 <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d104      	bne.n	8001886 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800187c:	4806      	ldr	r0, [pc, #24]	; (8001898 <HAL_InitTick+0xac>)
 800187e:	f006 f8dc 	bl	8007a3a <HAL_TIM_Base_Start_IT>
 8001882:	4603      	mov	r3, r0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	431bde83 	.word	0x431bde83
 8001898:	2000054c 	.word	0x2000054c
 800189c:	40001000 	.word	0x40001000

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_Clear(0xFF000000); // czarny
 80018b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018b6:	f000 fe33 	bl	8002520 <BSP_LCD_Clear>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0xc>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  BSP_LCD_Clear(0xFFFFFF00); // zolty
 80018c0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80018c4:	f000 fe2c 	bl	8002520 <BSP_LCD_Clear>
 80018c8:	e7fa      	b.n	80018c0 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <TIM6_DAC_IRQHandler+0x10>)
 80018ea:	f006 f8ca 	bl	8007a82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000054c 	.word	0x2000054c

080018f8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <OTG_HS_IRQHandler+0x10>)
 80018fe:	f002 fce4 	bl	80042ca <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200006bc 	.word	0x200006bc

0800190c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <LTDC_IRQHandler+0x10>)
 8001912:	f004 f949 	bl	8005ba8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000044c 	.word	0x2000044c

08001920 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA2D_IRQHandler+0x10>)
 8001926:	f001 ffc4 	bl	80038b2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000384 	.word	0x20000384

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f008 fd9e 	bl	800a4a4 <__errno>
 8001968:	4602      	mov	r2, r0
 800196a:	230c      	movs	r3, #12
 800196c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20030000 	.word	0x20030000
 8001994:	00000400 	.word	0x00000400
 8001998:	200000dc 	.word	0x200000dc
 800199c:	20000988 	.word	0x20000988

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <SystemInit+0x28>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <SystemInit+0x28>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SystemInit+0x28>)
 80019b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ba:	609a      	str	r2, [r3, #8]
#endif
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	463b      	mov	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <MX_TIM1_Init+0x98>)
 80019ea:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <MX_TIM1_Init+0x9c>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM1_Init+0x98>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_TIM1_Init+0x98>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM1_Init+0x98>)
 80019fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_TIM1_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_TIM1_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_TIM1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a14:	4813      	ldr	r0, [pc, #76]	; (8001a64 <MX_TIM1_Init+0x98>)
 8001a16:	f005 ffe5 	bl	80079e4 <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a20:	f7ff fdda 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM1_Init+0x98>)
 8001a32:	f006 f92e 	bl	8007c92 <HAL_TIM_ConfigClockSource>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a3c:	f7ff fdcc 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_TIM1_Init+0x98>)
 8001a4e:	f006 fb39 	bl	80080c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a58:	f7ff fdbe 	bl	80015d8 <Error_Handler>
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000058c 	.word	0x2000058c
 8001a68:	40010000 	.word	0x40010000

08001a6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10d      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_TIM_Base_MspInit+0x40>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_TIM_Base_MspInit+0x40>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_TIM_Base_MspInit+0x40>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	40023800 	.word	0x40023800

08001ab0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_USART1_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ae8:	f006 fb7c 	bl	80081e4 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f7ff fd71 	bl	80015d8 <Error_Handler>
  }

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200005cc 	.word	0x200005cc
 8001b00:	40011000 	.word	0x40011000

08001b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12c      	bne.n	8001b80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a10      	ldr	r2, [pc, #64]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b70:	2307      	movs	r3, #7
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <HAL_UART_MspInit+0x8c>)
 8001b7c:	f002 f8d8 	bl	8003d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	; 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b9a:	e003      	b.n	8001ba4 <LoopCopyDataInit>

08001b9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ba0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ba2:	3104      	adds	r1, #4

08001ba4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ba8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001baa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bac:	d3f6      	bcc.n	8001b9c <CopyDataInit>
  ldr  r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bb0:	e002      	b.n	8001bb8 <LoopFillZerobss>

08001bb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bb4:	f842 3b04 	str.w	r3, [r2], #4

08001bb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bbc:	d3f9      	bcc.n	8001bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff feef 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f008 fc75 	bl	800a4b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff fb81 	bl	80012cc <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bcc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001bd0:	0800c168 	.word	0x0800c168
  ldr  r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bd8:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8001bdc:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8001be0:	20000984 	.word	0x20000984

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>

08001be6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001bea:	f000 fa5d 	bl	80020a8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001bee:	20ca      	movs	r0, #202	; 0xca
 8001bf0:	f000 f95d 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001bf4:	20c3      	movs	r0, #195	; 0xc3
 8001bf6:	f000 f967 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001bfa:	2008      	movs	r0, #8
 8001bfc:	f000 f964 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001c00:	2050      	movs	r0, #80	; 0x50
 8001c02:	f000 f961 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001c06:	20cf      	movs	r0, #207	; 0xcf
 8001c08:	f000 f951 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f95b 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001c12:	20c1      	movs	r0, #193	; 0xc1
 8001c14:	f000 f958 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001c18:	2030      	movs	r0, #48	; 0x30
 8001c1a:	f000 f955 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001c1e:	20ed      	movs	r0, #237	; 0xed
 8001c20:	f000 f945 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001c24:	2064      	movs	r0, #100	; 0x64
 8001c26:	f000 f94f 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f000 f94c 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001c30:	2012      	movs	r0, #18
 8001c32:	f000 f949 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001c36:	2081      	movs	r0, #129	; 0x81
 8001c38:	f000 f946 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001c3c:	20e8      	movs	r0, #232	; 0xe8
 8001c3e:	f000 f936 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001c42:	2085      	movs	r0, #133	; 0x85
 8001c44:	f000 f940 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f000 f93d 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001c4e:	2078      	movs	r0, #120	; 0x78
 8001c50:	f000 f93a 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001c54:	20cb      	movs	r0, #203	; 0xcb
 8001c56:	f000 f92a 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001c5a:	2039      	movs	r0, #57	; 0x39
 8001c5c:	f000 f934 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001c60:	202c      	movs	r0, #44	; 0x2c
 8001c62:	f000 f931 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f92e 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001c6c:	2034      	movs	r0, #52	; 0x34
 8001c6e:	f000 f92b 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001c72:	2002      	movs	r0, #2
 8001c74:	f000 f928 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001c78:	20f7      	movs	r0, #247	; 0xf7
 8001c7a:	f000 f918 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001c7e:	2020      	movs	r0, #32
 8001c80:	f000 f922 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001c84:	20ea      	movs	r0, #234	; 0xea
 8001c86:	f000 f912 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 f91c 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f000 f919 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001c96:	20b1      	movs	r0, #177	; 0xb1
 8001c98:	f000 f909 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 f913 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001ca2:	201b      	movs	r0, #27
 8001ca4:	f000 f910 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ca8:	20b6      	movs	r0, #182	; 0xb6
 8001caa:	f000 f900 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001cae:	200a      	movs	r0, #10
 8001cb0:	f000 f90a 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001cb4:	20a2      	movs	r0, #162	; 0xa2
 8001cb6:	f000 f907 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001cba:	20c0      	movs	r0, #192	; 0xc0
 8001cbc:	f000 f8f7 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001cc0:	2010      	movs	r0, #16
 8001cc2:	f000 f901 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001cc6:	20c1      	movs	r0, #193	; 0xc1
 8001cc8:	f000 f8f1 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ccc:	2010      	movs	r0, #16
 8001cce:	f000 f8fb 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001cd2:	20c5      	movs	r0, #197	; 0xc5
 8001cd4:	f000 f8eb 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001cd8:	2045      	movs	r0, #69	; 0x45
 8001cda:	f000 f8f5 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001cde:	2015      	movs	r0, #21
 8001ce0:	f000 f8f2 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001ce4:	20c7      	movs	r0, #199	; 0xc7
 8001ce6:	f000 f8e2 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001cea:	2090      	movs	r0, #144	; 0x90
 8001cec:	f000 f8ec 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001cf0:	2036      	movs	r0, #54	; 0x36
 8001cf2:	f000 f8dc 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001cf6:	20c8      	movs	r0, #200	; 0xc8
 8001cf8:	f000 f8e6 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001cfc:	20f2      	movs	r0, #242	; 0xf2
 8001cfe:	f000 f8d6 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f000 f8e0 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001d08:	20b0      	movs	r0, #176	; 0xb0
 8001d0a:	f000 f8d0 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001d0e:	20c2      	movs	r0, #194	; 0xc2
 8001d10:	f000 f8da 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d14:	20b6      	movs	r0, #182	; 0xb6
 8001d16:	f000 f8ca 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d1a:	200a      	movs	r0, #10
 8001d1c:	f000 f8d4 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001d20:	20a7      	movs	r0, #167	; 0xa7
 8001d22:	f000 f8d1 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001d26:	2027      	movs	r0, #39	; 0x27
 8001d28:	f000 f8ce 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001d2c:	2004      	movs	r0, #4
 8001d2e:	f000 f8cb 	bl	8001ec8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001d32:	202a      	movs	r0, #42	; 0x2a
 8001d34:	f000 f8bb 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f000 f8c5 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f000 f8c2 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f000 f8bf 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001d4a:	20ef      	movs	r0, #239	; 0xef
 8001d4c:	f000 f8bc 	bl	8001ec8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001d50:	202b      	movs	r0, #43	; 0x2b
 8001d52:	f000 f8ac 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f8b6 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 f8b3 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f000 f8b0 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001d68:	203f      	movs	r0, #63	; 0x3f
 8001d6a:	f000 f8ad 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001d6e:	20f6      	movs	r0, #246	; 0xf6
 8001d70:	f000 f89d 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f000 f8a7 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f8a4 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001d80:	2006      	movs	r0, #6
 8001d82:	f000 f8a1 	bl	8001ec8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001d86:	202c      	movs	r0, #44	; 0x2c
 8001d88:	f000 f891 	bl	8001eae <ili9341_WriteReg>
  LCD_Delay(200);
 8001d8c:	20c8      	movs	r0, #200	; 0xc8
 8001d8e:	f000 fa79 	bl	8002284 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001d92:	2026      	movs	r0, #38	; 0x26
 8001d94:	f000 f88b 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f000 f895 	bl	8001ec8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001d9e:	20e0      	movs	r0, #224	; 0xe0
 8001da0:	f000 f885 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001da4:	200f      	movs	r0, #15
 8001da6:	f000 f88f 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001daa:	2029      	movs	r0, #41	; 0x29
 8001dac:	f000 f88c 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001db0:	2024      	movs	r0, #36	; 0x24
 8001db2:	f000 f889 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001db6:	200c      	movs	r0, #12
 8001db8:	f000 f886 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001dbc:	200e      	movs	r0, #14
 8001dbe:	f000 f883 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001dc2:	2009      	movs	r0, #9
 8001dc4:	f000 f880 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001dc8:	204e      	movs	r0, #78	; 0x4e
 8001dca:	f000 f87d 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001dce:	2078      	movs	r0, #120	; 0x78
 8001dd0:	f000 f87a 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001dd4:	203c      	movs	r0, #60	; 0x3c
 8001dd6:	f000 f877 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001dda:	2009      	movs	r0, #9
 8001ddc:	f000 f874 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001de0:	2013      	movs	r0, #19
 8001de2:	f000 f871 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001de6:	2005      	movs	r0, #5
 8001de8:	f000 f86e 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001dec:	2017      	movs	r0, #23
 8001dee:	f000 f86b 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001df2:	2011      	movs	r0, #17
 8001df4:	f000 f868 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f000 f865 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001dfe:	20e1      	movs	r0, #225	; 0xe1
 8001e00:	f000 f855 	bl	8001eae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f000 f85f 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001e0a:	2016      	movs	r0, #22
 8001e0c:	f000 f85c 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001e10:	201b      	movs	r0, #27
 8001e12:	f000 f859 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e16:	2004      	movs	r0, #4
 8001e18:	f000 f856 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001e1c:	2011      	movs	r0, #17
 8001e1e:	f000 f853 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001e22:	2007      	movs	r0, #7
 8001e24:	f000 f850 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001e28:	2031      	movs	r0, #49	; 0x31
 8001e2a:	f000 f84d 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001e2e:	2033      	movs	r0, #51	; 0x33
 8001e30:	f000 f84a 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001e34:	2042      	movs	r0, #66	; 0x42
 8001e36:	f000 f847 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001e3a:	2005      	movs	r0, #5
 8001e3c:	f000 f844 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001e40:	200c      	movs	r0, #12
 8001e42:	f000 f841 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001e46:	200a      	movs	r0, #10
 8001e48:	f000 f83e 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001e4c:	2028      	movs	r0, #40	; 0x28
 8001e4e:	f000 f83b 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001e52:	202f      	movs	r0, #47	; 0x2f
 8001e54:	f000 f838 	bl	8001ec8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f000 f835 	bl	8001ec8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001e5e:	2011      	movs	r0, #17
 8001e60:	f000 f825 	bl	8001eae <ili9341_WriteReg>
  LCD_Delay(200);
 8001e64:	20c8      	movs	r0, #200	; 0xc8
 8001e66:	f000 fa0d 	bl	8002284 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001e6a:	2029      	movs	r0, #41	; 0x29
 8001e6c:	f000 f81f 	bl	8001eae <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001e70:	202c      	movs	r0, #44	; 0x2c
 8001e72:	f000 f81c 	bl	8001eae <ili9341_WriteReg>
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001e7e:	f000 f913 	bl	80020a8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001e82:	2103      	movs	r1, #3
 8001e84:	20d3      	movs	r0, #211	; 0xd3
 8001e86:	f000 f82c 	bl	8001ee2 <ili9341_ReadData>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b29b      	uxth	r3, r3
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001e96:	2029      	movs	r0, #41	; 0x29
 8001e98:	f000 f809 	bl	8001eae <ili9341_WriteReg>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ea4:	2028      	movs	r0, #40	; 0x28
 8001ea6:	f000 f802 	bl	8001eae <ili9341_WriteReg>
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}

08001eae <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f98e 	bl	80021dc <LCD_IO_WriteReg>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f95f 	bl	8002198 <LCD_IO_WriteData>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	460a      	mov	r2, r1
 8001eec:	80fb      	strh	r3, [r7, #6]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001ef2:	797a      	ldrb	r2, [r7, #5]
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f991 	bl	8002220 <LCD_IO_ReadData>
 8001efe:	4603      	mov	r3, r0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001f0c:	23f0      	movs	r3, #240	; 0xf0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001f1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f30:	4819      	ldr	r0, [pc, #100]	; (8001f98 <SPIx_Init+0x6c>)
 8001f32:	f005 fc37 	bl	80077a4 <HAL_SPI_GetState>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d12b      	bne.n	8001f94 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <SPIx_Init+0x6c>)
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <SPIx_Init+0x70>)
 8001f40:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <SPIx_Init+0x6c>)
 8001f44:	2218      	movs	r2, #24
 8001f46:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <SPIx_Init+0x6c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <SPIx_Init+0x6c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <SPIx_Init+0x6c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <SPIx_Init+0x6c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <SPIx_Init+0x6c>)
 8001f62:	2207      	movs	r2, #7
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <SPIx_Init+0x6c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <SPIx_Init+0x6c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <SPIx_Init+0x6c>)
 8001f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f78:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <SPIx_Init+0x6c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SPIx_Init+0x6c>)
 8001f82:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f86:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <SPIx_Init+0x6c>)
 8001f8a:	f000 f853 	bl	8002034 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <SPIx_Init+0x6c>)
 8001f90:	f004 ff9d 	bl	8006ece <HAL_SPI_Init>
  } 
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200000e0 	.word	0x200000e0
 8001f9c:	40015000 	.word	0x40015000

08001fa0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <SPIx_Read+0x38>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f107 0108 	add.w	r1, r7, #8
 8001fba:	4808      	ldr	r0, [pc, #32]	; (8001fdc <SPIx_Read+0x3c>)
 8001fbc:	f005 f947 	bl	800724e <HAL_SPI_Receive>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001fca:	f000 f827 	bl	800201c <SPIx_Error>
  }
  
  return readvalue;
 8001fce:	68bb      	ldr	r3, [r7, #8]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000003c 	.word	0x2000003c
 8001fdc:	200000e0 	.word	0x200000e0

08001fe0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <SPIx_Write+0x34>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1db9      	adds	r1, r7, #6
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <SPIx_Write+0x38>)
 8001ff8:	f004 fff5 	bl	8006fe6 <HAL_SPI_Transmit>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002006:	f000 f809 	bl	800201c <SPIx_Error>
  }
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000003c 	.word	0x2000003c
 8002018:	200000e0 	.word	0x200000e0

0800201c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <SPIx_Error+0x14>)
 8002022:	f004 ffb8 	bl	8006f96 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002026:	f7ff ff81 	bl	8001f2c <SPIx_Init>
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200000e0 	.word	0x200000e0

08002034 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <SPIx_MspInit+0x6c>)
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <SPIx_MspInit+0x6c>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800204a:	6453      	str	r3, [r2, #68]	; 0x44
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <SPIx_MspInit+0x6c>)
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <SPIx_MspInit+0x6c>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <SPIx_MspInit+0x6c>)
 8002062:	f043 0320 	orr.w	r3, r3, #32
 8002066:	6313      	str	r3, [r2, #48]	; 0x30
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <SPIx_MspInit+0x6c>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002074:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002078:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800207e:	2302      	movs	r3, #2
 8002080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002082:	2301      	movs	r3, #1
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002086:	2305      	movs	r3, #5
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <SPIx_MspInit+0x70>)
 8002092:	f001 fe4d 	bl	8003d30 <HAL_GPIO_Init>
}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40021400 	.word	0x40021400

080020a8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <LCD_IO_Init+0xe0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d164      	bne.n	8002180 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <LCD_IO_Init+0xe0>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	4b32      	ldr	r3, [pc, #200]	; (800218c <LCD_IO_Init+0xe4>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <LCD_IO_Init+0xe4>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6313      	str	r3, [r2, #48]	; 0x30
 80020cc:	4b2f      	ldr	r3, [pc, #188]	; (800218c <LCD_IO_Init+0xe4>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80020d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	4827      	ldr	r0, [pc, #156]	; (8002190 <LCD_IO_Init+0xe8>)
 80020f2:	f001 fe1d 	bl	8003d30 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <LCD_IO_Init+0xe4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a23      	ldr	r2, [pc, #140]	; (800218c <LCD_IO_Init+0xe4>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <LCD_IO_Init+0xe4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002116:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002118:	2301      	movs	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002120:	2302      	movs	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	4619      	mov	r1, r3
 800212a:	4819      	ldr	r0, [pc, #100]	; (8002190 <LCD_IO_Init+0xe8>)
 800212c:	f001 fe00 	bl	8003d30 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <LCD_IO_Init+0xe4>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <LCD_IO_Init+0xe4>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <LCD_IO_Init+0xe4>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800214c:	2304      	movs	r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002150:	2301      	movs	r3, #1
 8002152:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002158:	2302      	movs	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	4619      	mov	r1, r3
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <LCD_IO_Init+0xec>)
 8002164:	f001 fde4 	bl	8003d30 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002168:	2200      	movs	r2, #0
 800216a:	2104      	movs	r1, #4
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <LCD_IO_Init+0xec>)
 800216e:	f002 f893 	bl	8004298 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002172:	2201      	movs	r2, #1
 8002174:	2104      	movs	r1, #4
 8002176:	4807      	ldr	r0, [pc, #28]	; (8002194 <LCD_IO_Init+0xec>)
 8002178:	f002 f88e 	bl	8004298 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800217c:	f7ff fed6 	bl	8001f2c <SPIx_Init>
  }
}
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000138 	.word	0x20000138
 800218c:	40023800 	.word	0x40023800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40020800 	.word	0x40020800

08002198 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021a2:	2201      	movs	r2, #1
 80021a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <LCD_IO_WriteData+0x3c>)
 80021aa:	f002 f875 	bl	8004298 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80021ae:	2200      	movs	r2, #0
 80021b0:	2104      	movs	r1, #4
 80021b2:	4809      	ldr	r0, [pc, #36]	; (80021d8 <LCD_IO_WriteData+0x40>)
 80021b4:	f002 f870 	bl	8004298 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff10 	bl	8001fe0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021c0:	2201      	movs	r2, #1
 80021c2:	2104      	movs	r1, #4
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <LCD_IO_WriteData+0x40>)
 80021c6:	f002 f867 	bl	8004298 <HAL_GPIO_WritePin>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40020800 	.word	0x40020800

080021dc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80021e6:	2200      	movs	r2, #0
 80021e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ec:	480a      	ldr	r0, [pc, #40]	; (8002218 <LCD_IO_WriteReg+0x3c>)
 80021ee:	f002 f853 	bl	8004298 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80021f2:	2200      	movs	r2, #0
 80021f4:	2104      	movs	r1, #4
 80021f6:	4809      	ldr	r0, [pc, #36]	; (800221c <LCD_IO_WriteReg+0x40>)
 80021f8:	f002 f84e 	bl	8004298 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff feed 	bl	8001fe0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002206:	2201      	movs	r2, #1
 8002208:	2104      	movs	r1, #4
 800220a:	4804      	ldr	r0, [pc, #16]	; (800221c <LCD_IO_WriteReg+0x40>)
 800220c:	f002 f844 	bl	8004298 <HAL_GPIO_WritePin>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40020c00 	.word	0x40020c00
 800221c:	40020800 	.word	0x40020800

08002220 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	460a      	mov	r2, r1
 800222a:	80fb      	strh	r3, [r7, #6]
 800222c:	4613      	mov	r3, r2
 800222e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002234:	2200      	movs	r2, #0
 8002236:	2104      	movs	r1, #4
 8002238:	4810      	ldr	r0, [pc, #64]	; (800227c <LCD_IO_ReadData+0x5c>)
 800223a:	f002 f82d 	bl	8004298 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002244:	480e      	ldr	r0, [pc, #56]	; (8002280 <LCD_IO_ReadData+0x60>)
 8002246:	f002 f827 	bl	8004298 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fec7 	bl	8001fe0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002252:	797b      	ldrb	r3, [r7, #5]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fea3 	bl	8001fa0 <SPIx_Read>
 800225a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002262:	4807      	ldr	r0, [pc, #28]	; (8002280 <LCD_IO_ReadData+0x60>)
 8002264:	f002 f818 	bl	8004298 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002268:	2201      	movs	r2, #1
 800226a:	2104      	movs	r1, #4
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <LCD_IO_ReadData+0x5c>)
 800226e:	f002 f813 	bl	8004298 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00

08002284 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fed7 	bl	8003040 <HAL_Delay>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022a2:	4a2e      	ldr	r2, [pc, #184]	; (800235c <BSP_LCD_Init+0xc0>)
 80022a4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022a8:	2209      	movs	r2, #9
 80022aa:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022b4:	221d      	movs	r2, #29
 80022b6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022ba:	2203      	movs	r2, #3
 80022bc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022c0:	f240 120d 	movw	r2, #269	; 0x10d
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022c8:	f240 1243 	movw	r2, #323	; 0x143
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022d0:	f240 1217 	movw	r2, #279	; 0x117
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022d8:	f240 1247 	movw	r2, #327	; 0x147
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80022de:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <BSP_LCD_Init+0xbc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <BSP_LCD_Init+0xc4>)
 80022f8:	2208      	movs	r2, #8
 80022fa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <BSP_LCD_Init+0xc4>)
 80022fe:	22c0      	movs	r2, #192	; 0xc0
 8002300:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <BSP_LCD_Init+0xc4>)
 8002304:	2204      	movs	r2, #4
 8002306:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <BSP_LCD_Init+0xc4>)
 800230a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002310:	4813      	ldr	r0, [pc, #76]	; (8002360 <BSP_LCD_Init+0xc4>)
 8002312:	f004 fb9f 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <BSP_LCD_Init+0xbc>)
 8002318:	2200      	movs	r2, #0
 800231a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <BSP_LCD_Init+0xbc>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <BSP_LCD_Init+0xbc>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <BSP_LCD_Init+0xbc>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800232e:	f000 fb47 	bl	80029c0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002332:	4809      	ldr	r0, [pc, #36]	; (8002358 <BSP_LCD_Init+0xbc>)
 8002334:	f003 fb68 	bl	8005a08 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <BSP_LCD_Init+0xc8>)
 800233a:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <BSP_LCD_Init+0xcc>)
 800233c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <BSP_LCD_Init+0xc8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002346:	f000 fc6f 	bl	8002c28 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800234a:	4808      	ldr	r0, [pc, #32]	; (800236c <BSP_LCD_Init+0xd0>)
 800234c:	f000 f8ce 	bl	80024ec <BSP_LCD_SetFont>

  return LCD_OK;
 8002350:	2300      	movs	r3, #0
}  
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000060c 	.word	0x2000060c
 800235c:	40016800 	.word	0x40016800
 8002360:	2000017c 	.word	0x2000017c
 8002364:	200006b4 	.word	0x200006b4
 8002368:	20000004 	.word	0x20000004
 800236c:	20000040 	.word	0x20000040

08002370 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <BSP_LCD_GetXSize+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	4798      	blx	r3
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200006b4 	.word	0x200006b4

08002388 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <BSP_LCD_GetYSize+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	4798      	blx	r3
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200006b4 	.word	0x200006b4

080023a0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b090      	sub	sp, #64	; 0x40
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80023b0:	f7ff ffde 	bl	8002370 <BSP_LCD_GetXSize>
 80023b4:	4603      	mov	r3, r0
 80023b6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80023bc:	f7ff ffe4 	bl	8002388 <BSP_LCD_GetYSize>
 80023c0:	4603      	mov	r3, r0
 80023c2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80023cc:	23ff      	movs	r3, #255	; 0xff
 80023ce:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80023e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023ec:	2307      	movs	r3, #7
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80023f0:	f7ff ffbe 	bl	8002370 <BSP_LCD_GetXSize>
 80023f4:	4603      	mov	r3, r0
 80023f6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80023f8:	f7ff ffc6 	bl	8002388 <BSP_LCD_GetYSize>
 80023fc:	4603      	mov	r3, r0
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	4619      	mov	r1, r3
 8002408:	4814      	ldr	r0, [pc, #80]	; (800245c <BSP_LCD_LayerDefaultInit+0xbc>)
 800240a:	f003 fc8f 	bl	8005d2c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	4913      	ldr	r1, [pc, #76]	; (8002460 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3304      	adds	r3, #4
 800241e:	f04f 32ff 	mov.w	r2, #4294967295
 8002422:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	490e      	ldr	r1, [pc, #56]	; (8002460 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3308      	adds	r3, #8
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002436:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002438:	88fa      	ldrh	r2, [r7, #6]
 800243a:	4909      	ldr	r1, [pc, #36]	; (8002460 <BSP_LCD_LayerDefaultInit+0xc0>)
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800244a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <BSP_LCD_LayerDefaultInit+0xbc>)
 800244e:	f003 fcab 	bl	8005da8 <HAL_LTDC_EnableDither>
}
 8002452:	bf00      	nop
 8002454:	3740      	adds	r7, #64	; 0x40
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000060c 	.word	0x2000060c
 8002460:	200001b0 	.word	0x200001b0
 8002464:	20000040 	.word	0x20000040

08002468 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <BSP_LCD_SelectLayer+0x1c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	200001ac 	.word	0x200001ac

08002488 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <BSP_LCD_SetTextColor+0x28>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <BSP_LCD_SetTextColor+0x2c>)
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	200001ac 	.word	0x200001ac
 80024b4:	200001b0 	.word	0x200001b0

080024b8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <BSP_LCD_SetBackColor+0x2c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4908      	ldr	r1, [pc, #32]	; (80024e8 <BSP_LCD_SetBackColor+0x30>)
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3304      	adds	r3, #4
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200001ac 	.word	0x200001ac
 80024e8:	200001b0 	.word	0x200001b0

080024ec <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <BSP_LCD_SetFont+0x2c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4908      	ldr	r1, [pc, #32]	; (800251c <BSP_LCD_SetFont+0x30>)
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3308      	adds	r3, #8
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200001ac 	.word	0x200001ac
 800251c:	200001b0 	.word	0x200001b0

08002520 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	af02      	add	r7, sp, #8
 8002526:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <BSP_LCD_Clear+0x48>)
 800252a:	681c      	ldr	r4, [r3, #0]
 800252c:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <BSP_LCD_Clear+0x48>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0e      	ldr	r2, [pc, #56]	; (800256c <BSP_LCD_Clear+0x4c>)
 8002532:	2134      	movs	r1, #52	; 0x34
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	335c      	adds	r3, #92	; 0x5c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461d      	mov	r5, r3
 8002540:	f7ff ff16 	bl	8002370 <BSP_LCD_GetXSize>
 8002544:	4606      	mov	r6, r0
 8002546:	f7ff ff1f 	bl	8002388 <BSP_LCD_GetYSize>
 800254a:	4602      	mov	r2, r0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	2300      	movs	r3, #0
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	4632      	mov	r2, r6
 8002558:	4629      	mov	r1, r5
 800255a:	4620      	mov	r0, r4
 800255c:	f000 fb2c 	bl	8002bb8 <FillBuffer>
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002568:	200001ac 	.word	0x200001ac
 800256c:	2000060c 	.word	0x2000060c

08002570 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af02      	add	r7, sp, #8
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	460b      	mov	r3, r1
 800257c:	80bb      	strh	r3, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <BSP_LCD_DrawHLine+0x70>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <BSP_LCD_DrawHLine+0x74>)
 800258c:	2134      	movs	r1, #52	; 0x34
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	335c      	adds	r3, #92	; 0x5c
 8002596:	681c      	ldr	r4, [r3, #0]
 8002598:	f7ff feea 	bl	8002370 <BSP_LCD_GetXSize>
 800259c:	4602      	mov	r2, r0
 800259e:	88bb      	ldrh	r3, [r7, #4]
 80025a0:	fb03 f202 	mul.w	r2, r3, r2
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4423      	add	r3, r4
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <BSP_LCD_DrawHLine+0x70>)
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	68fc      	ldr	r4, [r7, #12]
 80025b4:	887d      	ldrh	r5, [r7, #2]
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <BSP_LCD_DrawHLine+0x70>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	490b      	ldr	r1, [pc, #44]	; (80025e8 <BSP_LCD_DrawHLine+0x78>)
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2301      	movs	r3, #1
 80025d0:	462a      	mov	r2, r5
 80025d2:	4621      	mov	r1, r4
 80025d4:	f000 faf0 	bl	8002bb8 <FillBuffer>
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bdb0      	pop	{r4, r5, r7, pc}
 80025e0:	200001ac 	.word	0x200001ac
 80025e4:	2000060c 	.word	0x2000060c
 80025e8:	200001b0 	.word	0x200001b0

080025ec <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
 80025f6:	460b      	mov	r3, r1
 80025f8:	80bb      	strh	r3, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	f1c3 0303 	rsb	r3, r3, #3
 8002606:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002610:	e0cf      	b.n	80027b2 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	b29a      	uxth	r2, r3
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4413      	add	r3, r2
 800261a:	b298      	uxth	r0, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	b29b      	uxth	r3, r3
 8002620:	88ba      	ldrh	r2, [r7, #4]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	b29c      	uxth	r4, r3
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <BSP_LCD_DrawCircle+0x1d8>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4967      	ldr	r1, [pc, #412]	; (80027c8 <BSP_LCD_DrawCircle+0x1dc>)
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4621      	mov	r1, r4
 800263c:	f000 fa96 	bl	8002b6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	b29b      	uxth	r3, r3
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b298      	uxth	r0, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	b29b      	uxth	r3, r3
 800264e:	88ba      	ldrh	r2, [r7, #4]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	b29c      	uxth	r4, r3
 8002654:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <BSP_LCD_DrawCircle+0x1d8>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	495b      	ldr	r1, [pc, #364]	; (80027c8 <BSP_LCD_DrawCircle+0x1dc>)
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	4621      	mov	r1, r4
 800266a:	f000 fa7f 	bl	8002b6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	b29a      	uxth	r2, r3
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	4413      	add	r3, r2
 8002676:	b298      	uxth	r0, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	b29b      	uxth	r3, r3
 800267c:	88ba      	ldrh	r2, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	b29c      	uxth	r4, r3
 8002682:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <BSP_LCD_DrawCircle+0x1d8>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4950      	ldr	r1, [pc, #320]	; (80027c8 <BSP_LCD_DrawCircle+0x1dc>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4621      	mov	r1, r4
 8002698:	f000 fa68 	bl	8002b6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b298      	uxth	r0, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	88ba      	ldrh	r2, [r7, #4]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	b29c      	uxth	r4, r3
 80026b0:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <BSP_LCD_DrawCircle+0x1d8>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4944      	ldr	r1, [pc, #272]	; (80027c8 <BSP_LCD_DrawCircle+0x1dc>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4621      	mov	r1, r4
 80026c6:	f000 fa51 	bl	8002b6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	4413      	add	r3, r2
 80026d2:	b298      	uxth	r0, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	88bb      	ldrh	r3, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	b29c      	uxth	r4, r3
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <BSP_LCD_DrawCircle+0x1d8>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4939      	ldr	r1, [pc, #228]	; (80027c8 <BSP_LCD_DrawCircle+0x1dc>)
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4621      	mov	r1, r4
 80026f4:	f000 fa3a 	bl	8002b6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	b298      	uxth	r0, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	b29a      	uxth	r2, r3
 8002706:	88bb      	ldrh	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	b29c      	uxth	r4, r3
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <BSP_LCD_DrawCircle+0x1d8>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	492d      	ldr	r1, [pc, #180]	; (80027c8 <BSP_LCD_DrawCircle+0x1dc>)
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	4621      	mov	r1, r4
 8002722:	f000 fa23 	bl	8002b6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	b29a      	uxth	r2, r3
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	4413      	add	r3, r2
 800272e:	b298      	uxth	r0, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	b29a      	uxth	r2, r3
 8002734:	88bb      	ldrh	r3, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	b29c      	uxth	r4, r3
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <BSP_LCD_DrawCircle+0x1d8>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4922      	ldr	r1, [pc, #136]	; (80027c8 <BSP_LCD_DrawCircle+0x1dc>)
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4621      	mov	r1, r4
 8002750:	f000 fa0c 	bl	8002b6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	b29b      	uxth	r3, r3
 8002758:	88fa      	ldrh	r2, [r7, #6]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	b298      	uxth	r0, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	b29a      	uxth	r2, r3
 8002762:	88bb      	ldrh	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	b29c      	uxth	r4, r3
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <BSP_LCD_DrawCircle+0x1d8>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4916      	ldr	r1, [pc, #88]	; (80027c8 <BSP_LCD_DrawCircle+0x1dc>)
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	4621      	mov	r1, r4
 800277e:	f000 f9f5 	bl	8002b6c <BSP_LCD_DrawPixel>

    if (d < 0)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	da06      	bge.n	8002796 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	009a      	lsls	r2, r3, #2
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4413      	add	r3, r2
 8002790:	3306      	adds	r3, #6
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e00a      	b.n	80027ac <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	009a      	lsls	r2, r3, #2
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	4413      	add	r3, r2
 80027a2:	330a      	adds	r3, #10
 80027a4:	617b      	str	r3, [r7, #20]
      cury--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	3301      	adds	r3, #1
 80027b0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	f67f af2b 	bls.w	8002612 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	200001ac 	.word	0x200001ac
 80027c8:	200001b0 	.word	0x200001b0

080027cc <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80027cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af02      	add	r7, sp, #8
 80027d4:	4604      	mov	r4, r0
 80027d6:	4608      	mov	r0, r1
 80027d8:	4611      	mov	r1, r2
 80027da:	461a      	mov	r2, r3
 80027dc:	4623      	mov	r3, r4
 80027de:	80fb      	strh	r3, [r7, #6]
 80027e0:	4603      	mov	r3, r0
 80027e2:	80bb      	strh	r3, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80027f0:	4b20      	ldr	r3, [pc, #128]	; (8002874 <BSP_LCD_FillRect+0xa8>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4920      	ldr	r1, [pc, #128]	; (8002878 <BSP_LCD_FillRect+0xac>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fe40 	bl	8002488 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <BSP_LCD_FillRect+0xa8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <BSP_LCD_FillRect+0xb0>)
 800280e:	2134      	movs	r1, #52	; 0x34
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	681c      	ldr	r4, [r3, #0]
 800281a:	f7ff fda9 	bl	8002370 <BSP_LCD_GetXSize>
 800281e:	4602      	mov	r2, r0
 8002820:	88bb      	ldrh	r3, [r7, #4]
 8002822:	fb03 f202 	mul.w	r2, r3, r2
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4423      	add	r3, r4
 800282e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <BSP_LCD_FillRect+0xa8>)
 8002832:	681c      	ldr	r4, [r3, #0]
 8002834:	68fd      	ldr	r5, [r7, #12]
 8002836:	887e      	ldrh	r6, [r7, #2]
 8002838:	f8b7 8000 	ldrh.w	r8, [r7]
 800283c:	f7ff fd98 	bl	8002370 <BSP_LCD_GetXSize>
 8002840:	4602      	mov	r2, r0
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	1ad1      	subs	r1, r2, r3
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <BSP_LCD_FillRect+0xa8>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	480b      	ldr	r0, [pc, #44]	; (8002878 <BSP_LCD_FillRect+0xac>)
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4403      	add	r3, r0
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	9100      	str	r1, [sp, #0]
 800285c:	4643      	mov	r3, r8
 800285e:	4632      	mov	r2, r6
 8002860:	4629      	mov	r1, r5
 8002862:	4620      	mov	r0, r4
 8002864:	f000 f9a8 	bl	8002bb8 <FillBuffer>
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002872:	bf00      	nop
 8002874:	200001ac 	.word	0x200001ac
 8002878:	200001b0 	.word	0x200001b0
 800287c:	2000060c 	.word	0x2000060c

08002880 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
 800288a:	460b      	mov	r3, r1
 800288c:	80bb      	strh	r3, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	f1c3 0303 	rsb	r3, r3, #3
 800289a:	617b      	str	r3, [r7, #20]

  curx = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80028a4:	4b44      	ldr	r3, [pc, #272]	; (80029b8 <BSP_LCD_FillCircle+0x138>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4944      	ldr	r1, [pc, #272]	; (80029bc <BSP_LCD_FillCircle+0x13c>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fde6 	bl	8002488 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80028bc:	e061      	b.n	8002982 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d021      	beq.n	8002908 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	b298      	uxth	r0, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	88bb      	ldrh	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	b299      	uxth	r1, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	f7ff fe45 	bl	8002570 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	b298      	uxth	r0, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	88ba      	ldrh	r2, [r7, #4]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	b299      	uxth	r1, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	f7ff fe34 	bl	8002570 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d021      	beq.n	8002952 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	b29b      	uxth	r3, r3
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	b298      	uxth	r0, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	b29b      	uxth	r3, r3
 800291c:	88ba      	ldrh	r2, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	b299      	uxth	r1, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	b29b      	uxth	r3, r3
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	b29b      	uxth	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	f7ff fe20 	bl	8002570 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	b29b      	uxth	r3, r3
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	b298      	uxth	r0, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	b29a      	uxth	r2, r3
 800293e:	88bb      	ldrh	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	b299      	uxth	r1, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	b29b      	uxth	r3, r3
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	f7ff fe0f 	bl	8002570 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da06      	bge.n	8002966 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	009a      	lsls	r2, r3, #2
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	4413      	add	r3, r2
 8002960:	3306      	adds	r3, #6
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e00a      	b.n	800297c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	009a      	lsls	r2, r3, #2
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4413      	add	r3, r2
 8002972:	330a      	adds	r3, #10
 8002974:	617b      	str	r3, [r7, #20]
      cury--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3b01      	subs	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	3301      	adds	r3, #1
 8002980:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	429a      	cmp	r2, r3
 8002988:	d999      	bls.n	80028be <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <BSP_LCD_FillCircle+0x138>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	490b      	ldr	r1, [pc, #44]	; (80029bc <BSP_LCD_FillCircle+0x13c>)
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fd73 	bl	8002488 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	88b9      	ldrh	r1, [r7, #4]
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fe1f 	bl	80025ec <BSP_LCD_DrawCircle>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200001ac 	.word	0x200001ac
 80029bc:	200001b0 	.word	0x200001b0

080029c0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	; 0x38
 80029c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a60      	ldr	r2, [pc, #384]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 80029d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	4b5a      	ldr	r3, [pc, #360]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a59      	ldr	r2, [pc, #356]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 80029ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a44      	ldr	r2, [pc, #272]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a3d      	ldr	r2, [pc, #244]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a36      	ldr	r2, [pc, #216]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a78:	f043 0320 	orr.w	r3, r3, #32
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a2f      	ldr	r2, [pc, #188]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <BSP_LCD_MspInit+0x190>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002aa6:	f641 0358 	movw	r3, #6232	; 0x1858
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002ab8:	230e      	movs	r3, #14
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4824      	ldr	r0, [pc, #144]	; (8002b54 <BSP_LCD_MspInit+0x194>)
 8002ac4:	f001 f934 	bl	8003d30 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002ac8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4820      	ldr	r0, [pc, #128]	; (8002b58 <BSP_LCD_MspInit+0x198>)
 8002ad6:	f001 f92b 	bl	8003d30 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002ada:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	481d      	ldr	r0, [pc, #116]	; (8002b5c <BSP_LCD_MspInit+0x19c>)
 8002ae8:	f001 f922 	bl	8003d30 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002aec:	2348      	movs	r3, #72	; 0x48
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af4:	4619      	mov	r1, r3
 8002af6:	481a      	ldr	r0, [pc, #104]	; (8002b60 <BSP_LCD_MspInit+0x1a0>)
 8002af8:	f001 f91a 	bl	8003d30 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b06:	4619      	mov	r1, r3
 8002b08:	4816      	ldr	r0, [pc, #88]	; (8002b64 <BSP_LCD_MspInit+0x1a4>)
 8002b0a:	f001 f911 	bl	8003d30 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002b0e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4813      	ldr	r0, [pc, #76]	; (8002b68 <BSP_LCD_MspInit+0x1a8>)
 8002b1c:	f001 f908 	bl	8003d30 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002b20:	2303      	movs	r3, #3
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002b24:	2309      	movs	r3, #9
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	480a      	ldr	r0, [pc, #40]	; (8002b58 <BSP_LCD_MspInit+0x198>)
 8002b30:	f001 f8fe 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002b34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4809      	ldr	r0, [pc, #36]	; (8002b68 <BSP_LCD_MspInit+0x1a8>)
 8002b42:	f001 f8f5 	bl	8003d30 <HAL_GPIO_Init>
}
 8002b46:	bf00      	nop
 8002b48:	3738      	adds	r7, #56	; 0x38
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00
 8002b64:	40021400 	.word	0x40021400
 8002b68:	40021800 	.word	0x40021800

08002b6c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002b6c:	b5b0      	push	{r4, r5, r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	603a      	str	r2, [r7, #0]
 8002b76:	80fb      	strh	r3, [r7, #6]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <BSP_LCD_DrawPixel+0x44>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <BSP_LCD_DrawPixel+0x48>)
 8002b82:	2134      	movs	r1, #52	; 0x34
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	335c      	adds	r3, #92	; 0x5c
 8002b8c:	681c      	ldr	r4, [r3, #0]
 8002b8e:	88bd      	ldrh	r5, [r7, #4]
 8002b90:	f7ff fbee 	bl	8002370 <BSP_LCD_GetXSize>
 8002b94:	4603      	mov	r3, r0
 8002b96:	fb03 f205 	mul.w	r2, r3, r5
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4423      	add	r3, r4
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb0:	200001ac 	.word	0x200001ac
 8002bb4:	2000060c 	.word	0x2000060c

08002bb8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <FillBuffer+0x68>)
 8002bc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bcc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <FillBuffer+0x68>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002bd4:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <FillBuffer+0x68>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <FillBuffer+0x68>)
 8002bdc:	4a11      	ldr	r2, [pc, #68]	; (8002c24 <FillBuffer+0x6c>)
 8002bde:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002be0:	480f      	ldr	r0, [pc, #60]	; (8002c20 <FillBuffer+0x68>)
 8002be2:	f000 fd09 	bl	80035f8 <HAL_DMA2D_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d115      	bne.n	8002c18 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	480c      	ldr	r0, [pc, #48]	; (8002c20 <FillBuffer+0x68>)
 8002bf0:	f000 ff70 	bl	8003ad4 <HAL_DMA2D_ConfigLayer>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10e      	bne.n	8002c18 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69f9      	ldr	r1, [r7, #28]
 8002c04:	4806      	ldr	r0, [pc, #24]	; (8002c20 <FillBuffer+0x68>)
 8002c06:	f000 fd40 	bl	800368a <HAL_DMA2D_Start>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002c10:	210a      	movs	r1, #10
 8002c12:	4803      	ldr	r0, [pc, #12]	; (8002c20 <FillBuffer+0x68>)
 8002c14:	f000 fd64 	bl	80036e0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	2000013c 	.word	0x2000013c
 8002c24:	4002b000 	.word	0x4002b000

08002c28 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002c2c:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c2e:	4a2a      	ldr	r2, [pc, #168]	; (8002cd8 <BSP_SDRAM_Init+0xb0>)
 8002c30:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <BSP_SDRAM_Init+0xb4>)
 8002c34:	2202      	movs	r2, #2
 8002c36:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <BSP_SDRAM_Init+0xb4>)
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002c3e:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <BSP_SDRAM_Init+0xb4>)
 8002c40:	2204      	movs	r2, #4
 8002c42:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <BSP_SDRAM_Init+0xb4>)
 8002c46:	2207      	movs	r2, #7
 8002c48:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <BSP_SDRAM_Init+0xb4>)
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <BSP_SDRAM_Init+0xb4>)
 8002c52:	2202      	movs	r2, #2
 8002c54:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <BSP_SDRAM_Init+0xb4>)
 8002c58:	2202      	movs	r2, #2
 8002c5a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c70:	2210      	movs	r2, #16
 8002c72:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c7c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c80:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002c98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	480c      	ldr	r0, [pc, #48]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002ca2:	f000 f87f 	bl	8002da4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002ca6:	490d      	ldr	r1, [pc, #52]	; (8002cdc <BSP_SDRAM_Init+0xb4>)
 8002ca8:	480a      	ldr	r0, [pc, #40]	; (8002cd4 <BSP_SDRAM_Init+0xac>)
 8002caa:	f004 f891 	bl	8006dd0 <HAL_SDRAM_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <BSP_SDRAM_Init+0xb8>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e002      	b.n	8002cc2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <BSP_SDRAM_Init+0xb8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002cc2:	f240 506a 	movw	r0, #1386	; 0x56a
 8002cc6:	f000 f80d 	bl	8002ce4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <BSP_SDRAM_Init+0xb8>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200001c8 	.word	0x200001c8
 8002cd8:	a0000140 	.word	0xa0000140
 8002cdc:	200001fc 	.word	0x200001fc
 8002ce0:	20000048 	.word	0x20000048

08002ce4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d02:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0c:	4923      	ldr	r1, [pc, #140]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d0e:	4824      	ldr	r0, [pc, #144]	; (8002da0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d10:	f004 f892 	bl	8006e38 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f000 f993 	bl	8003040 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d22:	2208      	movs	r2, #8
 8002d24:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d36:	4919      	ldr	r1, [pc, #100]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d38:	4819      	ldr	r0, [pc, #100]	; (8002da0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d3a:	f004 f87d 	bl	8006e38 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d40:	2203      	movs	r2, #3
 8002d42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d46:	2208      	movs	r2, #8
 8002d48:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d5a:	4910      	ldr	r1, [pc, #64]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d5c:	4810      	ldr	r0, [pc, #64]	; (8002da0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d5e:	f004 f86b 	bl	8006e38 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002d62:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002d66:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d70:	2208      	movs	r2, #8
 8002d72:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d7e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d84:	4905      	ldr	r1, [pc, #20]	; (8002d9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d86:	4806      	ldr	r0, [pc, #24]	; (8002da0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d88:	f004 f856 	bl	8006e38 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4804      	ldr	r0, [pc, #16]	; (8002da0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d90:	f004 f87d 	bl	8006e8e <HAL_SDRAM_ProgramRefreshRate>
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000218 	.word	0x20000218
 8002da0:	200001c8 	.word	0x200001c8

08002da4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b090      	sub	sp, #64	; 0x40
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80ec 	beq.w	8002f8e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dba:	4b77      	ldr	r3, [pc, #476]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	4a76      	ldr	r2, [pc, #472]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6393      	str	r3, [r2, #56]	; 0x38
 8002dc6:	4b74      	ldr	r3, [pc, #464]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a6f      	ldr	r2, [pc, #444]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b6d      	ldr	r3, [pc, #436]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	4b69      	ldr	r3, [pc, #420]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a68      	ldr	r2, [pc, #416]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a61      	ldr	r2, [pc, #388]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b58      	ldr	r3, [pc, #352]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	4b54      	ldr	r3, [pc, #336]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a53      	ldr	r2, [pc, #332]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e4c:	f043 0310 	orr.w	r3, r3, #16
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e68:	f043 0320 	orr.w	r3, r3, #32
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <BSP_SDRAM_MspInit+0x1f4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002ea6:	2360      	movs	r3, #96	; 0x60
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eae:	4619      	mov	r1, r3
 8002eb0:	483a      	ldr	r0, [pc, #232]	; (8002f9c <BSP_SDRAM_MspInit+0x1f8>)
 8002eb2:	f000 ff3d 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4837      	ldr	r0, [pc, #220]	; (8002fa0 <BSP_SDRAM_MspInit+0x1fc>)
 8002ec2:	f000 ff35 	bl	8003d30 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002ec6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4834      	ldr	r0, [pc, #208]	; (8002fa4 <BSP_SDRAM_MspInit+0x200>)
 8002ed4:	f000 ff2c 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002ed8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4830      	ldr	r0, [pc, #192]	; (8002fa8 <BSP_SDRAM_MspInit+0x204>)
 8002ee6:	f000 ff23 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002eea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	482d      	ldr	r0, [pc, #180]	; (8002fac <BSP_SDRAM_MspInit+0x208>)
 8002ef8:	f000 ff1a 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002efc:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f06:	4619      	mov	r1, r3
 8002f08:	4829      	ldr	r0, [pc, #164]	; (8002fb0 <BSP_SDRAM_MspInit+0x20c>)
 8002f0a:	f000 ff11 	bl	8003d30 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f20:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f28:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f30:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f38:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f46:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f50:	2203      	movs	r2, #3
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <BSP_SDRAM_MspInit+0x214>)
 8002f64:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002f72:	4810      	ldr	r0, [pc, #64]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f74:	f000 fa32 	bl	80033dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002f78:	480e      	ldr	r0, [pc, #56]	; (8002fb4 <BSP_SDRAM_MspInit+0x210>)
 8002f7a:	f000 f981 	bl	8003280 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	210f      	movs	r1, #15
 8002f82:	2038      	movs	r0, #56	; 0x38
 8002f84:	f000 f936 	bl	80031f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002f88:	2038      	movs	r0, #56	; 0x38
 8002f8a:	f000 f94f 	bl	800322c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002f8e:	bf00      	nop
 8002f90:	3740      	adds	r7, #64	; 0x40
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	40020c00 	.word	0x40020c00
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40021400 	.word	0x40021400
 8002fb0:	40021800 	.word	0x40021800
 8002fb4:	20000228 	.word	0x20000228
 8002fb8:	40026410 	.word	0x40026410

08002fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_Init+0x40>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <HAL_Init+0x40>)
 8002fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_Init+0x40>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <HAL_Init+0x40>)
 8002fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_Init+0x40>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_Init+0x40>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	f000 f8fa 	bl	80031de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fe fbfe 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff0:	f7fe fbd0 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023c00 	.word	0x40023c00

08003000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_IncTick+0x20>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_IncTick+0x24>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4413      	add	r3, r2
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_IncTick+0x24>)
 8003012:	6013      	str	r3, [r2, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000050 	.word	0x20000050
 8003024:	200006b8 	.word	0x200006b8

08003028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return uwTick;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_GetTick+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	200006b8 	.word	0x200006b8

08003040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff ffee 	bl	8003028 <HAL_GetTick>
 800304c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d005      	beq.n	8003066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_Delay+0x40>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003066:	bf00      	nop
 8003068:	f7ff ffde 	bl	8003028 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	429a      	cmp	r2, r3
 8003076:	d8f7      	bhi.n	8003068 <HAL_Delay+0x28>
  {
  }
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000050 	.word	0x20000050

08003084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b6:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	60d3      	str	r3, [r2, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 0307 	and.w	r3, r3, #7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4907      	ldr	r1, [pc, #28]	; (8003120 <__NVIC_EnableIRQ+0x38>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
         );
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff4c 	bl	8003084 <__NVIC_SetPriorityGrouping>
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003206:	f7ff ff61 	bl	80030cc <__NVIC_GetPriorityGrouping>
 800320a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	6978      	ldr	r0, [r7, #20]
 8003212:	f7ff ffb1 	bl	8003178 <NVIC_EncodePriority>
 8003216:	4602      	mov	r2, r0
 8003218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff80 	bl	8003124 <__NVIC_SetPriority>
}
 8003224:	bf00      	nop
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff54 	bl	80030e8 <__NVIC_EnableIRQ>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00e      	b.n	8003278 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	795b      	ldrb	r3, [r3, #5]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fa60 	bl	8000730 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff fecc 	bl	8003028 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e099      	b.n	80033d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	e00f      	b.n	80032de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032be:	f7ff feb3 	bl	8003028 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d908      	bls.n	80032de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e078      	b.n	80033d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e8      	bne.n	80032be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4b38      	ldr	r3, [pc, #224]	; (80033d8 <HAL_DMA_Init+0x158>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800330a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b04      	cmp	r3, #4
 8003336:	d107      	bne.n	8003348 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	4313      	orrs	r3, r2
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b04      	cmp	r3, #4
 8003370:	d117      	bne.n	80033a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00e      	beq.n	80033a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f8bd 	bl	8003504 <DMA_CheckFifoParam>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2240      	movs	r2, #64	; 0x40
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800339e:	2301      	movs	r3, #1
 80033a0:	e016      	b.n	80033d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f874 	bl	8003498 <DMA_CalcBaseAndBitshift>
 80033b0:	4603      	mov	r3, r0
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	223f      	movs	r2, #63	; 0x3f
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	f010803f 	.word	0xf010803f

080033dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e050      	b.n	8003490 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d101      	bne.n	80033fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
 80033fc:	e048      	b.n	8003490 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2221      	movs	r2, #33	; 0x21
 800343c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f82a 	bl	8003498 <DMA_CalcBaseAndBitshift>
 8003444:	4603      	mov	r3, r0
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	223f      	movs	r2, #63	; 0x3f
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	3b10      	subs	r3, #16
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <DMA_CalcBaseAndBitshift+0x64>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <DMA_CalcBaseAndBitshift+0x68>)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d909      	bls.n	80034da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	1d1a      	adds	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	659a      	str	r2, [r3, #88]	; 0x58
 80034d8:	e007      	b.n	80034ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	aaaaaaab 	.word	0xaaaaaaab
 8003500:	0800c0f0 	.word	0x0800c0f0

08003504 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11f      	bne.n	800355e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d855      	bhi.n	80035d0 <DMA_CheckFifoParam+0xcc>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <DMA_CheckFifoParam+0x28>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800353d 	.word	0x0800353d
 8003530:	0800354f 	.word	0x0800354f
 8003534:	0800353d 	.word	0x0800353d
 8003538:	080035d1 	.word	0x080035d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d045      	beq.n	80035d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354c:	e042      	b.n	80035d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003556:	d13f      	bne.n	80035d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355c:	e03c      	b.n	80035d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003566:	d121      	bne.n	80035ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d836      	bhi.n	80035dc <DMA_CheckFifoParam+0xd8>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <DMA_CheckFifoParam+0x70>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003585 	.word	0x08003585
 8003578:	0800358b 	.word	0x0800358b
 800357c:	08003585 	.word	0x08003585
 8003580:	0800359d 	.word	0x0800359d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e02f      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d024      	beq.n	80035e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359a:	e021      	b.n	80035e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a4:	d11e      	bne.n	80035e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035aa:	e01b      	b.n	80035e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <DMA_CheckFifoParam+0xb4>
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d003      	beq.n	80035be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035b6:	e018      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      break;
 80035bc:	e015      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00e      	beq.n	80035e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      break;
 80035ce:	e00b      	b.n	80035e8 <DMA_CheckFifoParam+0xe4>
      break;
 80035d0:	bf00      	nop
 80035d2:	e00a      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      break;
 80035d4:	bf00      	nop
 80035d6:	e008      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      break;
 80035d8:	bf00      	nop
 80035da:	e006      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      break;
 80035dc:	bf00      	nop
 80035de:	e004      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      break;
 80035e0:	bf00      	nop
 80035e2:	e002      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      break;   
 80035e4:	bf00      	nop
 80035e6:	e000      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      break;
 80035e8:	bf00      	nop
    }
  } 
  
  return status; 
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e03b      	b.n	8003682 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd f8da 	bl	80007d8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	f023 0107 	bic.w	r1, r3, #7
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003662:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68d1      	ldr	r1, [r2, #12]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	430b      	orrs	r3, r1
 8003670:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af02      	add	r7, sp, #8
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_DMA2D_Start+0x1c>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e018      	b.n	80036d8 <HAL_DMA2D_Start+0x4e>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fa99 	bl	8003bf8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d056      	beq.n	80037aa <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80036fc:	f7ff fc94 	bl	8003028 <HAL_GetTick>
 8003700:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003702:	e04b      	b.n	800379c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	f043 0202 	orr.w	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2221      	movs	r2, #33	; 0x21
 8003748:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2204      	movs	r2, #4
 800374e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0a5      	b.n	80038aa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d01a      	beq.n	800379c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003766:	f7ff fc5f 	bl	8003028 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d302      	bcc.n	800377c <HAL_DMA2D_PollForTransfer+0x9c>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10f      	bne.n	800379c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2203      	movs	r2, #3
 800378c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e086      	b.n	80038aa <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ac      	beq.n	8003704 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d061      	beq.n	8003890 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80037cc:	f7ff fc2c 	bl	8003028 <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037d2:	e056      	b.n	8003882 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02e      	beq.n	8003844 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	f043 0202 	orr.w	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2229      	movs	r2, #41	; 0x29
 800382e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2204      	movs	r2, #4
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e032      	b.n	80038aa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d01a      	beq.n	8003882 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800384c:	f7ff fbec 	bl	8003028 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <HAL_DMA2D_PollForTransfer+0x182>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2203      	movs	r2, #3
 8003872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e013      	b.n	80038aa <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0a1      	beq.n	80037d4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2212      	movs	r2, #18
 8003896:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d026      	beq.n	8003922 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d021      	beq.n	8003922 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ec:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2201      	movs	r2, #1
 8003900:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2204      	movs	r2, #4
 8003906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d026      	beq.n	800397a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d021      	beq.n	800397a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003944:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2220      	movs	r2, #32
 800394c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	f043 0202 	orr.w	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2204      	movs	r2, #4
 800395e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d026      	beq.n	80039d2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398a:	2b00      	cmp	r3, #0
 800398c:	d021      	beq.n	80039d2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2208      	movs	r2, #8
 80039a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	f043 0204 	orr.w	r2, r3, #4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d013      	beq.n	8003a04 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2204      	movs	r2, #4
 80039fc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f853 	bl	8003aaa <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d024      	beq.n	8003a58 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01f      	beq.n	8003a58 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01f      	beq.n	8003aa2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01a      	beq.n	8003aa2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a7a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2210      	movs	r2, #16
 8003a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f80e 	bl	8003abe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_DMA2D_ConfigLayer+0x20>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e079      	b.n	8003be8 <HAL_DMA2D_ConfigLayer+0x114>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	3318      	adds	r3, #24
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b1e:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b20:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b0a      	cmp	r3, #10
 8003b28:	d003      	beq.n	8003b32 <HAL_DMA2D_ConfigLayer+0x5e>
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	d107      	bne.n	8003b42 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e005      	b.n	8003b4e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d120      	bne.n	8003b96 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	ea02 0103 	and.w	r1, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b0a      	cmp	r3, #10
 8003b7c:	d003      	beq.n	8003b86 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	d127      	bne.n	8003bd6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
 8003b94:	e01f      	b.n	8003bd6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	ea02 0103 	and.w	r1, r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b0a      	cmp	r3, #10
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b09      	cmp	r3, #9
 8003bc6:	d106      	bne.n	8003bd6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bd4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	ff03000f 	.word	0xff03000f

08003bf8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b08b      	sub	sp, #44	; 0x2c
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	041a      	lsls	r2, r3, #16
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c30:	d174      	bne.n	8003d1c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c38:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c40:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c48:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d108      	bne.n	8003c6a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
 8003c68:	e053      	b.n	8003d12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d106      	bne.n	8003c80 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e048      	b.n	8003d12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d111      	bne.n	8003cac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	0cdb      	lsrs	r3, r3, #19
 8003c8c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	0a9b      	lsrs	r3, r3, #10
 8003c92:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	08db      	lsrs	r3, r3, #3
 8003c98:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	02db      	lsls	r3, r3, #11
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	e032      	b.n	8003d12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d117      	bne.n	8003ce4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	0fdb      	lsrs	r3, r3, #31
 8003cb8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	0cdb      	lsrs	r3, r3, #19
 8003cbe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	029b      	lsls	r3, r3, #10
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	03db      	lsls	r3, r3, #15
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e016      	b.n	8003d12 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	0f1b      	lsrs	r3, r3, #28
 8003ce8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	0d1b      	lsrs	r3, r3, #20
 8003cee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	0b1b      	lsrs	r3, r3, #12
 8003cf4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	011a      	lsls	r2, r3, #4
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	431a      	orrs	r2, r3
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	031b      	lsls	r3, r3, #12
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003d1a:	e003      	b.n	8003d24 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	60da      	str	r2, [r3, #12]
}
 8003d24:	bf00      	nop
 8003d26:	372c      	adds	r7, #44	; 0x2c
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	e177      	b.n	800403c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	f040 8166 	bne.w	8004036 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d00b      	beq.n	8003d8a <HAL_GPIO_Init+0x5a>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d007      	beq.n	8003d8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d7e:	2b11      	cmp	r3, #17
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b12      	cmp	r3, #18
 8003d88:	d130      	bne.n	8003dec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	2203      	movs	r2, #3
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 0201 	and.w	r2, r3, #1
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	2203      	movs	r2, #3
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0xfc>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b12      	cmp	r3, #18
 8003e2a:	d123      	bne.n	8003e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	08da      	lsrs	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3208      	adds	r2, #8
 8003e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	220f      	movs	r2, #15
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	08da      	lsrs	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3208      	adds	r2, #8
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0203 	and.w	r2, r3, #3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80c0 	beq.w	8004036 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	4b65      	ldr	r3, [pc, #404]	; (8004050 <HAL_GPIO_Init+0x320>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	4a64      	ldr	r2, [pc, #400]	; (8004050 <HAL_GPIO_Init+0x320>)
 8003ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec6:	4b62      	ldr	r3, [pc, #392]	; (8004050 <HAL_GPIO_Init+0x320>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed2:	4a60      	ldr	r2, [pc, #384]	; (8004054 <HAL_GPIO_Init+0x324>)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a57      	ldr	r2, [pc, #348]	; (8004058 <HAL_GPIO_Init+0x328>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d037      	beq.n	8003f6e <HAL_GPIO_Init+0x23e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a56      	ldr	r2, [pc, #344]	; (800405c <HAL_GPIO_Init+0x32c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d031      	beq.n	8003f6a <HAL_GPIO_Init+0x23a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a55      	ldr	r2, [pc, #340]	; (8004060 <HAL_GPIO_Init+0x330>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02b      	beq.n	8003f66 <HAL_GPIO_Init+0x236>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a54      	ldr	r2, [pc, #336]	; (8004064 <HAL_GPIO_Init+0x334>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d025      	beq.n	8003f62 <HAL_GPIO_Init+0x232>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a53      	ldr	r2, [pc, #332]	; (8004068 <HAL_GPIO_Init+0x338>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01f      	beq.n	8003f5e <HAL_GPIO_Init+0x22e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_GPIO_Init+0x33c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d019      	beq.n	8003f5a <HAL_GPIO_Init+0x22a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a51      	ldr	r2, [pc, #324]	; (8004070 <HAL_GPIO_Init+0x340>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_GPIO_Init+0x226>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a50      	ldr	r2, [pc, #320]	; (8004074 <HAL_GPIO_Init+0x344>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00d      	beq.n	8003f52 <HAL_GPIO_Init+0x222>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a4f      	ldr	r2, [pc, #316]	; (8004078 <HAL_GPIO_Init+0x348>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <HAL_GPIO_Init+0x21e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4e      	ldr	r2, [pc, #312]	; (800407c <HAL_GPIO_Init+0x34c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_GPIO_Init+0x21a>
 8003f46:	2309      	movs	r3, #9
 8003f48:	e012      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f4a:	230a      	movs	r3, #10
 8003f4c:	e010      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f4e:	2308      	movs	r3, #8
 8003f50:	e00e      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f52:	2307      	movs	r3, #7
 8003f54:	e00c      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f56:	2306      	movs	r3, #6
 8003f58:	e00a      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f5a:	2305      	movs	r3, #5
 8003f5c:	e008      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	e006      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f62:	2303      	movs	r3, #3
 8003f64:	e004      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e002      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	f002 0203 	and.w	r2, r2, #3
 8003f76:	0092      	lsls	r2, r2, #2
 8003f78:	4093      	lsls	r3, r2
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f80:	4934      	ldr	r1, [pc, #208]	; (8004054 <HAL_GPIO_Init+0x324>)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	3302      	adds	r3, #2
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f8e:	4b3c      	ldr	r3, [pc, #240]	; (8004080 <HAL_GPIO_Init+0x350>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fb2:	4a33      	ldr	r2, [pc, #204]	; (8004080 <HAL_GPIO_Init+0x350>)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_GPIO_Init+0x350>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fdc:	4a28      	ldr	r2, [pc, #160]	; (8004080 <HAL_GPIO_Init+0x350>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fe2:	4b27      	ldr	r3, [pc, #156]	; (8004080 <HAL_GPIO_Init+0x350>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004006:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <HAL_GPIO_Init+0x350>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800400c:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <HAL_GPIO_Init+0x350>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_GPIO_Init+0x350>)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b0f      	cmp	r3, #15
 8004040:	f67f ae84 	bls.w	8003d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004044:	bf00      	nop
 8004046:	3724      	adds	r7, #36	; 0x24
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40023800 	.word	0x40023800
 8004054:	40013800 	.word	0x40013800
 8004058:	40020000 	.word	0x40020000
 800405c:	40020400 	.word	0x40020400
 8004060:	40020800 	.word	0x40020800
 8004064:	40020c00 	.word	0x40020c00
 8004068:	40021000 	.word	0x40021000
 800406c:	40021400 	.word	0x40021400
 8004070:	40021800 	.word	0x40021800
 8004074:	40021c00 	.word	0x40021c00
 8004078:	40022000 	.word	0x40022000
 800407c:	40022400 	.word	0x40022400
 8004080:	40013c00 	.word	0x40013c00

08004084 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e0d9      	b.n	8004254 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040a0:	2201      	movs	r2, #1
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	f040 80c9 	bne.w	800424e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80040bc:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <HAL_GPIO_DeInit+0x1e4>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	220f      	movs	r2, #15
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	4013      	ands	r3, r2
 80040dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a62      	ldr	r2, [pc, #392]	; (800426c <HAL_GPIO_DeInit+0x1e8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d037      	beq.n	8004156 <HAL_GPIO_DeInit+0xd2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a61      	ldr	r2, [pc, #388]	; (8004270 <HAL_GPIO_DeInit+0x1ec>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d031      	beq.n	8004152 <HAL_GPIO_DeInit+0xce>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a60      	ldr	r2, [pc, #384]	; (8004274 <HAL_GPIO_DeInit+0x1f0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02b      	beq.n	800414e <HAL_GPIO_DeInit+0xca>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a5f      	ldr	r2, [pc, #380]	; (8004278 <HAL_GPIO_DeInit+0x1f4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d025      	beq.n	800414a <HAL_GPIO_DeInit+0xc6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a5e      	ldr	r2, [pc, #376]	; (800427c <HAL_GPIO_DeInit+0x1f8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01f      	beq.n	8004146 <HAL_GPIO_DeInit+0xc2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <HAL_GPIO_DeInit+0x1fc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d019      	beq.n	8004142 <HAL_GPIO_DeInit+0xbe>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a5c      	ldr	r2, [pc, #368]	; (8004284 <HAL_GPIO_DeInit+0x200>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_GPIO_DeInit+0xba>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a5b      	ldr	r2, [pc, #364]	; (8004288 <HAL_GPIO_DeInit+0x204>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00d      	beq.n	800413a <HAL_GPIO_DeInit+0xb6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a5a      	ldr	r2, [pc, #360]	; (800428c <HAL_GPIO_DeInit+0x208>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <HAL_GPIO_DeInit+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a59      	ldr	r2, [pc, #356]	; (8004290 <HAL_GPIO_DeInit+0x20c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <HAL_GPIO_DeInit+0xae>
 800412e:	2309      	movs	r3, #9
 8004130:	e012      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 8004132:	230a      	movs	r3, #10
 8004134:	e010      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 8004136:	2308      	movs	r3, #8
 8004138:	e00e      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 800413a:	2307      	movs	r3, #7
 800413c:	e00c      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 800413e:	2306      	movs	r3, #6
 8004140:	e00a      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 8004142:	2305      	movs	r3, #5
 8004144:	e008      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 8004146:	2304      	movs	r3, #4
 8004148:	e006      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 800414a:	2303      	movs	r3, #3
 800414c:	e004      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 800414e:	2302      	movs	r3, #2
 8004150:	e002      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_GPIO_DeInit+0xd4>
 8004156:	2300      	movs	r3, #0
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	f002 0203 	and.w	r2, r2, #3
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	4093      	lsls	r3, r2
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	429a      	cmp	r2, r3
 8004166:	d132      	bne.n	80041ce <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004168:	4b4a      	ldr	r3, [pc, #296]	; (8004294 <HAL_GPIO_DeInit+0x210>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43db      	mvns	r3, r3
 8004170:	4948      	ldr	r1, [pc, #288]	; (8004294 <HAL_GPIO_DeInit+0x210>)
 8004172:	4013      	ands	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_GPIO_DeInit+0x210>)
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	43db      	mvns	r3, r3
 800417e:	4945      	ldr	r1, [pc, #276]	; (8004294 <HAL_GPIO_DeInit+0x210>)
 8004180:	4013      	ands	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004184:	4b43      	ldr	r3, [pc, #268]	; (8004294 <HAL_GPIO_DeInit+0x210>)
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43db      	mvns	r3, r3
 800418c:	4941      	ldr	r1, [pc, #260]	; (8004294 <HAL_GPIO_DeInit+0x210>)
 800418e:	4013      	ands	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004192:	4b40      	ldr	r3, [pc, #256]	; (8004294 <HAL_GPIO_DeInit+0x210>)
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	43db      	mvns	r3, r3
 800419a:	493e      	ldr	r1, [pc, #248]	; (8004294 <HAL_GPIO_DeInit+0x210>)
 800419c:	4013      	ands	r3, r2
 800419e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	220f      	movs	r2, #15
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80041b0:	4a2d      	ldr	r2, [pc, #180]	; (8004268 <HAL_GPIO_DeInit+0x1e4>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	3302      	adds	r3, #2
 80041b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	43da      	mvns	r2, r3
 80041c0:	4829      	ldr	r0, [pc, #164]	; (8004268 <HAL_GPIO_DeInit+0x1e4>)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	400a      	ands	r2, r1
 80041c8:	3302      	adds	r3, #2
 80041ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2103      	movs	r1, #3
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	401a      	ands	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	08da      	lsrs	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3208      	adds	r2, #8
 80041ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	08d2      	lsrs	r2, r2, #3
 8004204:	4019      	ands	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3208      	adds	r2, #8
 800420a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2103      	movs	r1, #3
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	401a      	ands	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	2101      	movs	r1, #1
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2103      	movs	r1, #3
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	401a      	ands	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	3301      	adds	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b0f      	cmp	r3, #15
 8004258:	f67f af22 	bls.w	80040a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	40013800 	.word	0x40013800
 800426c:	40020000 	.word	0x40020000
 8004270:	40020400 	.word	0x40020400
 8004274:	40020800 	.word	0x40020800
 8004278:	40020c00 	.word	0x40020c00
 800427c:	40021000 	.word	0x40021000
 8004280:	40021400 	.word	0x40021400
 8004284:	40021800 	.word	0x40021800
 8004288:	40021c00 	.word	0x40021c00
 800428c:	40022000 	.word	0x40022000
 8004290:	40022400 	.word	0x40022400
 8004294:	40013c00 	.word	0x40013c00

08004298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	807b      	strh	r3, [r7, #2]
 80042a4:	4613      	mov	r3, r2
 80042a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042a8:	787b      	ldrb	r3, [r7, #1]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042b4:	e003      	b.n	80042be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	041a      	lsls	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	619a      	str	r2, [r3, #24]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b086      	sub	sp, #24
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f004 fd31 	bl	8008d48 <USB_GetMode>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	f040 80ef 	bne.w	80044cc <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 fd15 	bl	8008d22 <USB_ReadInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80e5 	beq.w	80044ca <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f004 fd0c 	bl	8008d22 <USB_ReadInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004314:	d104      	bne.n	8004320 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800431e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f004 fcfc 	bl	8008d22 <USB_ReadInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004334:	d104      	bne.n	8004340 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800433e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f004 fcec 	bl	8008d22 <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004354:	d104      	bne.n	8004360 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800435e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f004 fcdc 	bl	8008d22 <USB_ReadInterrupts>
 800436a:	4603      	mov	r3, r0
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b02      	cmp	r3, #2
 8004372:	d103      	bne.n	800437c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2202      	movs	r2, #2
 800437a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f004 fcce 	bl	8008d22 <USB_ReadInterrupts>
 8004386:	4603      	mov	r3, r0
 8004388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800438c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004390:	d115      	bne.n	80043be <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800439a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d108      	bne.n	80043be <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f005 fff5 	bl	800a39c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2101      	movs	r1, #1
 80043b8:	4618      	mov	r0, r3
 80043ba:	f004 fcd3 	bl	8008d64 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f004 fcad 	bl	8008d22 <USB_ReadInterrupts>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d2:	d102      	bne.n	80043da <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f001 f8ef 	bl	80055b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f004 fc9f 	bl	8008d22 <USB_ReadInterrupts>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d106      	bne.n	80043fc <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f005 ffb8 	bl	800a364 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2208      	movs	r2, #8
 80043fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f004 fc8e 	bl	8008d22 <USB_ReadInterrupts>
 8004406:	4603      	mov	r3, r0
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004410:	d138      	bne.n	8004484 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f004 fcde 	bl	8008dd8 <USB_HC_ReadInterrupt>
 800441c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e025      	b.n	8004470 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d018      	beq.n	800446a <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444e:	d106      	bne.n	800445e <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f858 	bl	800450c <HCD_HC_IN_IRQHandler>
 800445c:	e005      	b.n	800446a <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fc86 	bl	8004d76 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	3301      	adds	r3, #1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	429a      	cmp	r2, r3
 8004478:	d3d4      	bcc.n	8004424 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f004 fc4a 	bl	8008d22 <USB_ReadInterrupts>
 800448e:	4603      	mov	r3, r0
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b10      	cmp	r3, #16
 8004496:	d101      	bne.n	800449c <HAL_HCD_IRQHandler+0x1d2>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_HCD_IRQHandler+0x1d4>
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d014      	beq.n	80044cc <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0210 	bic.w	r2, r2, #16
 80044b0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 ffd4 	bl	8005460 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0210 	orr.w	r2, r2, #16
 80044c6:	619a      	str	r2, [r3, #24]
 80044c8:	e000      	b.n	80044cc <HAL_HCD_IRQHandler+0x202>
      return;
 80044ca:	bf00      	nop
    }
  }
}
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_HCD_Stop+0x16>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e00d      	b.n	8004504 <HAL_HCD_Stop+0x32>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f004 fd7f 	bl	8008ff8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d119      	bne.n	8004570 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004548:	461a      	mov	r2, r3
 800454a:	2304      	movs	r3, #4
 800454c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	440a      	add	r2, r1
 8004564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	60d3      	str	r3, [r2, #12]
 800456e:	e0ce      	b.n	800470e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d12c      	bne.n	80045e2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004594:	461a      	mov	r2, r3
 8004596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800459a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	440b      	add	r3, r1
 80045aa:	335d      	adds	r3, #93	; 0x5d
 80045ac:	2207      	movs	r2, #7
 80045ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	0151      	lsls	r1, r2, #5
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	440a      	add	r2, r1
 80045c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ca:	f043 0302 	orr.w	r3, r3, #2
 80045ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f004 fc0d 	bl	8008dfa <USB_HC_Halt>
 80045e0:	e095      	b.n	800470e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d109      	bne.n	800460c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004604:	461a      	mov	r2, r3
 8004606:	2320      	movs	r3, #32
 8004608:	6093      	str	r3, [r2, #8]
 800460a:	e080      	b.n	800470e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b08      	cmp	r3, #8
 8004620:	d134      	bne.n	800468c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	440a      	add	r2, r1
 8004638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	440b      	add	r3, r1
 8004650:	335d      	adds	r3, #93	; 0x5d
 8004652:	2205      	movs	r2, #5
 8004654:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	461a      	mov	r2, r3
 8004664:	2310      	movs	r3, #16
 8004666:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4413      	add	r3, r2
 8004670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004674:	461a      	mov	r2, r3
 8004676:	2308      	movs	r3, #8
 8004678:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f004 fbb8 	bl	8008dfa <USB_HC_Halt>
 800468a:	e040      	b.n	800470e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a2:	d134      	bne.n	800470e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046be:	f043 0302 	orr.w	r3, r3, #2
 80046c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f004 fb93 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	461a      	mov	r2, r3
 80046e2:	2310      	movs	r3, #16
 80046e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	440b      	add	r3, r1
 80046f4:	335d      	adds	r3, #93	; 0x5d
 80046f6:	2208      	movs	r2, #8
 80046f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4413      	add	r3, r2
 8004702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004706:	461a      	mov	r2, r3
 8004708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004724:	d122      	bne.n	800476c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	440a      	add	r2, r1
 800473c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f004 fb52 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004762:	461a      	mov	r2, r3
 8004764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004768:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800476a:	e300      	b.n	8004d6e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	f040 80fd 	bne.w	800497e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	440b      	add	r3, r1
 800479a:	3348      	adds	r3, #72	; 0x48
 800479c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	0159      	lsls	r1, r3, #5
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	440b      	add	r3, r1
 80047a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80047b0:	1ad1      	subs	r1, r2, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4403      	add	r3, r0
 80047c0:	334c      	adds	r3, #76	; 0x4c
 80047c2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	335d      	adds	r3, #93	; 0x5d
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	440b      	add	r3, r1
 80047e6:	3358      	adds	r3, #88	; 0x58
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	461a      	mov	r2, r3
 80047fa:	2301      	movs	r3, #1
 80047fc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	440b      	add	r3, r1
 800480c:	333f      	adds	r3, #63	; 0x3f
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	440b      	add	r3, r1
 8004822:	333f      	adds	r3, #63	; 0x3f
 8004824:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004826:	2b02      	cmp	r3, #2
 8004828:	d121      	bne.n	800486e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	440a      	add	r2, r1
 8004840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f004 fad0 	bl	8008dfa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004866:	461a      	mov	r2, r3
 8004868:	2310      	movs	r3, #16
 800486a:	6093      	str	r3, [r2, #8]
 800486c:	e070      	b.n	8004950 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	440b      	add	r3, r1
 800487c:	333f      	adds	r3, #63	; 0x3f
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d12a      	bne.n	80048da <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	440a      	add	r2, r1
 800489a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800489e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	335c      	adds	r3, #92	; 0x5c
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	b2d8      	uxtb	r0, r3
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	440b      	add	r3, r1
 80048ca:	335c      	adds	r3, #92	; 0x5c
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	4601      	mov	r1, r0
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f005 fd70 	bl	800a3b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048d8:	e03a      	b.n	8004950 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	440b      	add	r3, r1
 80048e8:	333f      	adds	r3, #63	; 0x3f
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d12f      	bne.n	8004950 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	440b      	add	r3, r1
 80048fe:	335c      	adds	r3, #92	; 0x5c
 8004900:	2201      	movs	r2, #1
 8004902:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	440b      	add	r3, r1
 8004912:	3350      	adds	r3, #80	; 0x50
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	f083 0301 	eor.w	r3, r3, #1
 800491a:	b2d8      	uxtb	r0, r3
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	440b      	add	r3, r1
 800492a:	3350      	adds	r3, #80	; 0x50
 800492c:	4602      	mov	r2, r0
 800492e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	b2d8      	uxtb	r0, r3
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	335c      	adds	r3, #92	; 0x5c
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	4601      	mov	r1, r0
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f005 fd34 	bl	800a3b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	3350      	adds	r3, #80	; 0x50
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	f083 0301 	eor.w	r3, r3, #1
 8004966:	b2d8      	uxtb	r0, r3
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	440b      	add	r3, r1
 8004976:	3350      	adds	r3, #80	; 0x50
 8004978:	4602      	mov	r2, r0
 800497a:	701a      	strb	r2, [r3, #0]
}
 800497c:	e1f7      	b.n	8004d6e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	f040 811a 	bne.w	8004bca <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	0151      	lsls	r1, r2, #5
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	440a      	add	r2, r1
 80049ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049b0:	f023 0302 	bic.w	r3, r3, #2
 80049b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	440b      	add	r3, r1
 80049c4:	335d      	adds	r3, #93	; 0x5d
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d10a      	bne.n	80049e2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	440b      	add	r3, r1
 80049da:	335c      	adds	r3, #92	; 0x5c
 80049dc:	2201      	movs	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e0d9      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	440b      	add	r3, r1
 80049f0:	335d      	adds	r3, #93	; 0x5d
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	d10a      	bne.n	8004a0e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	440b      	add	r3, r1
 8004a06:	335c      	adds	r3, #92	; 0x5c
 8004a08:	2205      	movs	r2, #5
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e0c3      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	335d      	adds	r3, #93	; 0x5d
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d00a      	beq.n	8004a3a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	440b      	add	r3, r1
 8004a32:	335d      	adds	r3, #93	; 0x5d
 8004a34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d156      	bne.n	8004ae8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	3358      	adds	r3, #88	; 0x58
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4403      	add	r3, r0
 8004a5c:	3358      	adds	r3, #88	; 0x58
 8004a5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3358      	adds	r3, #88	; 0x58
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d914      	bls.n	8004aa0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	440b      	add	r3, r1
 8004a84:	3358      	adds	r3, #88	; 0x58
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	440b      	add	r3, r1
 8004a98:	335c      	adds	r3, #92	; 0x5c
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e009      	b.n	8004ab4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	440b      	add	r3, r1
 8004aae:	335c      	adds	r3, #92	; 0x5c
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ad2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e056      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	440b      	add	r3, r1
 8004af6:	335d      	adds	r3, #93	; 0x5d
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d123      	bne.n	8004b46 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	440b      	add	r3, r1
 8004b0c:	335c      	adds	r3, #92	; 0x5c
 8004b0e:	2202      	movs	r2, #2
 8004b10:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b28:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b30:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e027      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	440b      	add	r3, r1
 8004b54:	335d      	adds	r3, #93	; 0x5d
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b07      	cmp	r3, #7
 8004b5a:	d11c      	bne.n	8004b96 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	440b      	add	r3, r1
 8004b6a:	3358      	adds	r3, #88	; 0x58
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1c59      	adds	r1, r3, #1
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4403      	add	r3, r0
 8004b7e:	3358      	adds	r3, #88	; 0x58
 8004b80:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	440b      	add	r3, r1
 8004b90:	335c      	adds	r3, #92	; 0x5c
 8004b92:	2204      	movs	r2, #4
 8004b94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	b2d8      	uxtb	r0, r3
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	440b      	add	r3, r1
 8004bba:	335c      	adds	r3, #92	; 0x5c
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f005 fbf8 	bl	800a3b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bc8:	e0d1      	b.n	8004d6e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d13e      	bne.n	8004c5e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3358      	adds	r3, #88	; 0x58
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4403      	add	r3, r0
 8004c22:	3358      	adds	r3, #88	; 0x58
 8004c24:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	440b      	add	r3, r1
 8004c34:	335d      	adds	r3, #93	; 0x5d
 8004c36:	2206      	movs	r2, #6
 8004c38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f004 f8d8 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c56:	461a      	mov	r2, r3
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	6093      	str	r3, [r2, #8]
}
 8004c5c:	e087      	b.n	8004d6e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d17c      	bne.n	8004d6e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	440b      	add	r3, r1
 8004c82:	333f      	adds	r3, #63	; 0x3f
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d122      	bne.n	8004cd0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	440b      	add	r3, r1
 8004c98:	3358      	adds	r3, #88	; 0x58
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb8:	f043 0302 	orr.w	r3, r3, #2
 8004cbc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f004 f896 	bl	8008dfa <USB_HC_Halt>
 8004cce:	e045      	b.n	8004d5c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	440b      	add	r3, r1
 8004cde:	333f      	adds	r3, #63	; 0x3f
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	440b      	add	r3, r1
 8004cf4:	333f      	adds	r3, #63	; 0x3f
 8004cf6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d12f      	bne.n	8004d5c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	3358      	adds	r3, #88	; 0x58
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d121      	bne.n	8004d5c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	440b      	add	r3, r1
 8004d26:	335d      	adds	r3, #93	; 0x5d
 8004d28:	2203      	movs	r2, #3
 8004d2a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	4611      	mov	r1, r2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f004 f84f 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d68:	461a      	mov	r2, r3
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	6093      	str	r3, [r2, #8]
}
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d119      	bne.n	8004dda <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	461a      	mov	r2, r3
 8004db4:	2304      	movs	r3, #4
 8004db6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd2:	f043 0302 	orr.w	r3, r3, #2
 8004dd6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004dd8:	e33e      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d141      	bne.n	8004e74 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2320      	movs	r3, #32
 8004e00:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	333d      	adds	r3, #61	; 0x3d
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 831f 	bne.w	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	440b      	add	r3, r1
 8004e28:	333d      	adds	r3, #61	; 0x3d
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	335c      	adds	r3, #92	; 0x5c
 8004e3e:	2202      	movs	r2, #2
 8004e40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f003 ffc4 	bl	8008dfa <USB_HC_Halt>
}
 8004e72:	e2f1      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d13f      	bne.n	8004f0a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	440b      	add	r3, r1
 8004e98:	335d      	adds	r3, #93	; 0x5d
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	440b      	add	r3, r1
 8004eac:	333d      	adds	r3, #61	; 0x3d
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3358      	adds	r3, #88	; 0x58
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f003 ff82 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	2340      	movs	r3, #64	; 0x40
 8004f06:	6093      	str	r3, [r2, #8]
}
 8004f08:	e2a6      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f20:	d122      	bne.n	8004f68 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f003 ff54 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f64:	6093      	str	r3, [r2, #8]
}
 8004f66:	e277      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d135      	bne.n	8004fea <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3358      	adds	r3, #88	; 0x58
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fac:	f043 0302 	orr.w	r3, r3, #2
 8004fb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f003 ff1c 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	440b      	add	r3, r1
 8004fe2:	335d      	adds	r3, #93	; 0x5d
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
}
 8004fe8:	e236      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d12b      	bne.n	8005058 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500c:	461a      	mov	r2, r3
 800500e:	2308      	movs	r3, #8
 8005010:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	440a      	add	r2, r1
 8005028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f003 fedc 	bl	8008dfa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	335d      	adds	r3, #93	; 0x5d
 8005052:	2205      	movs	r2, #5
 8005054:	701a      	strb	r2, [r3, #0]
}
 8005056:	e1ff      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b10      	cmp	r3, #16
 800506c:	d155      	bne.n	800511a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	3358      	adds	r3, #88	; 0x58
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	440b      	add	r3, r1
 8005090:	335d      	adds	r3, #93	; 0x5d
 8005092:	2203      	movs	r2, #3
 8005094:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	440b      	add	r3, r1
 80050a4:	333d      	adds	r3, #61	; 0x3d
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d114      	bne.n	80050d6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	440b      	add	r3, r1
 80050ba:	333c      	adds	r3, #60	; 0x3c
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	440b      	add	r3, r1
 80050d0:	333d      	adds	r3, #61	; 0x3d
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f003 fe7a 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	461a      	mov	r2, r3
 8005114:	2310      	movs	r3, #16
 8005116:	6093      	str	r3, [r2, #8]
}
 8005118:	e19e      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d12b      	bne.n	8005188 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	440a      	add	r2, r1
 8005146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800514a:	f043 0302 	orr.w	r3, r3, #2
 800514e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f003 fe4d 	bl	8008dfa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	440b      	add	r3, r1
 800516e:	335d      	adds	r3, #93	; 0x5d
 8005170:	2206      	movs	r2, #6
 8005172:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	461a      	mov	r2, r3
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	6093      	str	r3, [r2, #8]
}
 8005186:	e167      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519e:	d135      	bne.n	800520c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ba:	f043 0302 	orr.w	r3, r3, #2
 80051be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f003 fe15 	bl	8008dfa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051dc:	461a      	mov	r2, r3
 80051de:	2310      	movs	r3, #16
 80051e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ee:	461a      	mov	r2, r3
 80051f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	440b      	add	r3, r1
 8005204:	335d      	adds	r3, #93	; 0x5d
 8005206:	2208      	movs	r2, #8
 8005208:	701a      	strb	r2, [r3, #0]
}
 800520a:	e125      	b.n	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	f040 811a 	bne.w	8005458 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	440a      	add	r2, r1
 800523a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523e:	f023 0302 	bic.w	r3, r3, #2
 8005242:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	440b      	add	r3, r1
 8005252:	335d      	adds	r3, #93	; 0x5d
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d137      	bne.n	80052ca <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	440b      	add	r3, r1
 8005268:	335c      	adds	r3, #92	; 0x5c
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	440b      	add	r3, r1
 800527c:	333f      	adds	r3, #63	; 0x3f
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d00b      	beq.n	800529c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	440b      	add	r3, r1
 8005292:	333f      	adds	r3, #63	; 0x3f
 8005294:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005296:	2b03      	cmp	r3, #3
 8005298:	f040 80c5 	bne.w	8005426 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	440b      	add	r3, r1
 80052aa:	3351      	adds	r3, #81	; 0x51
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f083 0301 	eor.w	r3, r3, #1
 80052b2:	b2d8      	uxtb	r0, r3
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3351      	adds	r3, #81	; 0x51
 80052c4:	4602      	mov	r2, r0
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e0ad      	b.n	8005426 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	335d      	adds	r3, #93	; 0x5d
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d10a      	bne.n	80052f6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	440b      	add	r3, r1
 80052ee:	335c      	adds	r3, #92	; 0x5c
 80052f0:	2202      	movs	r2, #2
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e097      	b.n	8005426 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	440b      	add	r3, r1
 8005304:	335d      	adds	r3, #93	; 0x5d
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d10a      	bne.n	8005322 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	440b      	add	r3, r1
 800531a:	335c      	adds	r3, #92	; 0x5c
 800531c:	2202      	movs	r2, #2
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e081      	b.n	8005426 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	440b      	add	r3, r1
 8005330:	335d      	adds	r3, #93	; 0x5d
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b05      	cmp	r3, #5
 8005336:	d10a      	bne.n	800534e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	440b      	add	r3, r1
 8005346:	335c      	adds	r3, #92	; 0x5c
 8005348:	2205      	movs	r2, #5
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	e06b      	b.n	8005426 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	335d      	adds	r3, #93	; 0x5d
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b06      	cmp	r3, #6
 8005362:	d00a      	beq.n	800537a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	335d      	adds	r3, #93	; 0x5d
 8005374:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005376:	2b08      	cmp	r3, #8
 8005378:	d155      	bne.n	8005426 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	3358      	adds	r3, #88	; 0x58
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	1c59      	adds	r1, r3, #1
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4403      	add	r3, r0
 800539c:	3358      	adds	r3, #88	; 0x58
 800539e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	440b      	add	r3, r1
 80053ae:	3358      	adds	r3, #88	; 0x58
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d914      	bls.n	80053e0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	3358      	adds	r3, #88	; 0x58
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	440b      	add	r3, r1
 80053d8:	335c      	adds	r3, #92	; 0x5c
 80053da:	2204      	movs	r2, #4
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e009      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	440b      	add	r3, r1
 80053ee:	335c      	adds	r3, #92	; 0x5c
 80053f0:	2202      	movs	r2, #2
 80053f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800540a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005412:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	461a      	mov	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4413      	add	r3, r2
 800542e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005432:	461a      	mov	r2, r3
 8005434:	2302      	movs	r3, #2
 8005436:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	b2d8      	uxtb	r0, r3
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	440b      	add	r3, r1
 800544a:	335c      	adds	r3, #92	; 0x5c
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	4601      	mov	r1, r0
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f004 ffb0 	bl	800a3b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005458:	bf00      	nop
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	0c5b      	lsrs	r3, r3, #17
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005494:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d003      	beq.n	80054a4 <HCD_RXQLVL_IRQHandler+0x44>
 800549c:	2b05      	cmp	r3, #5
 800549e:	f000 8082 	beq.w	80055a6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80054a2:	e083      	b.n	80055ac <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d07f      	beq.n	80055aa <HCD_RXQLVL_IRQHandler+0x14a>
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	3344      	adds	r3, #68	; 0x44
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d074      	beq.n	80055aa <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	3344      	adds	r3, #68	; 0x44
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	b292      	uxth	r2, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	f003 fbf8 	bl	8008cd0 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	440b      	add	r3, r1
 80054ee:	3344      	adds	r3, #68	; 0x44
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	18d1      	adds	r1, r2, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4403      	add	r3, r0
 8005504:	3344      	adds	r3, #68	; 0x44
 8005506:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	440b      	add	r3, r1
 8005516:	334c      	adds	r3, #76	; 0x4c
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	18d1      	adds	r1, r2, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4403      	add	r3, r0
 800552c:	334c      	adds	r3, #76	; 0x4c
 800552e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <HCD_RXQLVL_IRQHandler+0x154>)
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d031      	beq.n	80055aa <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	4413      	add	r3, r2
 800554e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800555c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005564:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	3350      	adds	r3, #80	; 0x50
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	f083 0301 	eor.w	r3, r3, #1
 800558e:	b2d8      	uxtb	r0, r3
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	440b      	add	r3, r1
 800559e:	3350      	adds	r3, #80	; 0x50
 80055a0:	4602      	mov	r2, r0
 80055a2:	701a      	strb	r2, [r3, #0]
      break;
 80055a4:	e001      	b.n	80055aa <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80055aa:	bf00      	nop
  }
}
 80055ac:	bf00      	nop
 80055ae:	3728      	adds	r7, #40	; 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	1ff80000 	.word	0x1ff80000

080055b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d10b      	bne.n	8005608 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d102      	bne.n	8005600 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f004 fec0 	bl	800a380 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b08      	cmp	r3, #8
 8005610:	d132      	bne.n	8005678 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f043 0308 	orr.w	r3, r3, #8
 8005618:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d126      	bne.n	8005672 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d113      	bne.n	8005654 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005632:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005636:	d106      	bne.n	8005646 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2102      	movs	r1, #2
 800563e:	4618      	mov	r0, r3
 8005640:	f003 fb90 	bl	8008d64 <USB_InitFSLSPClkSel>
 8005644:	e011      	b.n	800566a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2101      	movs	r1, #1
 800564c:	4618      	mov	r0, r3
 800564e:	f003 fb89 	bl	8008d64 <USB_InitFSLSPClkSel>
 8005652:	e00a      	b.n	800566a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005662:	461a      	mov	r2, r3
 8005664:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005668:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f004 feb6 	bl	800a3dc <HAL_HCD_PortEnabled_Callback>
 8005670:	e002      	b.n	8005678 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f004 fec0 	bl	800a3f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b20      	cmp	r3, #32
 8005680:	d103      	bne.n	800568a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f043 0320 	orr.w	r3, r3, #32
 8005688:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005690:	461a      	mov	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6013      	str	r3, [r2, #0]
}
 8005696:	bf00      	nop
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e11f      	b.n	80058f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fb faf6 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005704:	f001 f94c 	bl	80069a0 <HAL_RCC_GetPCLK1Freq>
 8005708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4a7b      	ldr	r2, [pc, #492]	; (80058fc <HAL_I2C_Init+0x25c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d807      	bhi.n	8005724 <HAL_I2C_Init+0x84>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4a7a      	ldr	r2, [pc, #488]	; (8005900 <HAL_I2C_Init+0x260>)
 8005718:	4293      	cmp	r3, r2
 800571a:	bf94      	ite	ls
 800571c:	2301      	movls	r3, #1
 800571e:	2300      	movhi	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	e006      	b.n	8005732 <HAL_I2C_Init+0x92>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a77      	ldr	r2, [pc, #476]	; (8005904 <HAL_I2C_Init+0x264>)
 8005728:	4293      	cmp	r3, r2
 800572a:	bf94      	ite	ls
 800572c:	2301      	movls	r3, #1
 800572e:	2300      	movhi	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e0db      	b.n	80058f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a72      	ldr	r2, [pc, #456]	; (8005908 <HAL_I2C_Init+0x268>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0c9b      	lsrs	r3, r3, #18
 8005744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a64      	ldr	r2, [pc, #400]	; (80058fc <HAL_I2C_Init+0x25c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d802      	bhi.n	8005774 <HAL_I2C_Init+0xd4>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	3301      	adds	r3, #1
 8005772:	e009      	b.n	8005788 <HAL_I2C_Init+0xe8>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	4a63      	ldr	r2, [pc, #396]	; (800590c <HAL_I2C_Init+0x26c>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	099b      	lsrs	r3, r3, #6
 8005786:	3301      	adds	r3, #1
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	430b      	orrs	r3, r1
 800578e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800579a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4956      	ldr	r1, [pc, #344]	; (80058fc <HAL_I2C_Init+0x25c>)
 80057a4:	428b      	cmp	r3, r1
 80057a6:	d80d      	bhi.n	80057c4 <HAL_I2C_Init+0x124>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1e59      	subs	r1, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057b6:	3301      	adds	r3, #1
 80057b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057bc:	2b04      	cmp	r3, #4
 80057be:	bf38      	it	cc
 80057c0:	2304      	movcc	r3, #4
 80057c2:	e04f      	b.n	8005864 <HAL_I2C_Init+0x1c4>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d111      	bne.n	80057f0 <HAL_I2C_Init+0x150>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1e58      	subs	r0, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	440b      	add	r3, r1
 80057da:	fbb0 f3f3 	udiv	r3, r0, r3
 80057de:	3301      	adds	r3, #1
 80057e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bf0c      	ite	eq
 80057e8:	2301      	moveq	r3, #1
 80057ea:	2300      	movne	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	e012      	b.n	8005816 <HAL_I2C_Init+0x176>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	1e58      	subs	r0, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6859      	ldr	r1, [r3, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	0099      	lsls	r1, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	fbb0 f3f3 	udiv	r3, r0, r3
 8005806:	3301      	adds	r3, #1
 8005808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_I2C_Init+0x17e>
 800581a:	2301      	movs	r3, #1
 800581c:	e022      	b.n	8005864 <HAL_I2C_Init+0x1c4>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10e      	bne.n	8005844 <HAL_I2C_Init+0x1a4>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1e58      	subs	r0, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6859      	ldr	r1, [r3, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	440b      	add	r3, r1
 8005834:	fbb0 f3f3 	udiv	r3, r0, r3
 8005838:	3301      	adds	r3, #1
 800583a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005842:	e00f      	b.n	8005864 <HAL_I2C_Init+0x1c4>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1e58      	subs	r0, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	0099      	lsls	r1, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	fbb0 f3f3 	udiv	r3, r0, r3
 800585a:	3301      	adds	r3, #1
 800585c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	6809      	ldr	r1, [r1, #0]
 8005868:	4313      	orrs	r3, r2
 800586a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69da      	ldr	r2, [r3, #28]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6911      	ldr	r1, [r2, #16]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68d2      	ldr	r2, [r2, #12]
 800589e:	4311      	orrs	r1, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	430b      	orrs	r3, r1
 80058a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	000186a0 	.word	0x000186a0
 8005900:	001e847f 	.word	0x001e847f
 8005904:	003d08ff 	.word	0x003d08ff
 8005908:	431bde83 	.word	0x431bde83
 800590c:	10624dd3 	.word	0x10624dd3

08005910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	d129      	bne.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2224      	movs	r2, #36	; 0x24
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0210 	bic.w	r2, r2, #16
 800594c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0201 	orr.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d12a      	bne.n	80059f8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2224      	movs	r2, #36	; 0x24
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80059c2:	89fb      	ldrh	r3, [r7, #14]
 80059c4:	f023 030f 	bic.w	r3, r3, #15
 80059c8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	89fb      	ldrh	r3, [r7, #14]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	89fa      	ldrh	r2, [r7, #14]
 80059da:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e000      	b.n	80059fa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e0bf      	b.n	8005b9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fb fb36 	bl	80010a0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6999      	ldr	r1, [r3, #24]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6899      	ldr	r1, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ba4 <HAL_LTDC_Init+0x19c>)
 8005a7c:	400b      	ands	r3, r1
 8005a7e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6899      	ldr	r1, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68d9      	ldr	r1, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b3e      	ldr	r3, [pc, #248]	; (8005ba4 <HAL_LTDC_Init+0x19c>)
 8005aaa:	400b      	ands	r3, r1
 8005aac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68d9      	ldr	r1, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6919      	ldr	r1, [r3, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b33      	ldr	r3, [pc, #204]	; (8005ba4 <HAL_LTDC_Init+0x19c>)
 8005ad8:	400b      	ands	r3, r1
 8005ada:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6919      	ldr	r1, [r3, #16]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6959      	ldr	r1, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <HAL_LTDC_Init+0x19c>)
 8005b06:	400b      	ands	r3, r1
 8005b08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6959      	ldr	r1, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0206 	orr.w	r2, r2, #6
 8005b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	f000f800 	.word	0xf000f800

08005ba8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d023      	beq.n	8005c12 <HAL_LTDC_IRQHandler+0x6a>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01e      	beq.n	8005c12 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0204 	bic.w	r2, r2, #4
 8005be2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2204      	movs	r2, #4
 8005bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bf2:	f043 0201 	orr.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2204      	movs	r2, #4
 8005c00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f86f 	bl	8005cf0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d023      	beq.n	8005c64 <HAL_LTDC_IRQHandler+0xbc>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01e      	beq.n	8005c64 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0202 	bic.w	r2, r2, #2
 8005c34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c44:	f043 0202 	orr.w	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2204      	movs	r2, #4
 8005c52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f846 	bl	8005cf0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01b      	beq.n	8005ca6 <HAL_LTDC_IRQHandler+0xfe>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d016      	beq.n	8005ca6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0201 	bic.w	r2, r2, #1
 8005c86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f82f 	bl	8005d04 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01b      	beq.n	8005ce8 <HAL_LTDC_IRQHandler+0x140>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d016      	beq.n	8005ce8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0208 	bic.w	r2, r2, #8
 8005cc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2208      	movs	r2, #8
 8005cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f818 	bl	8005d18 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d2c:	b5b0      	push	{r4, r5, r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_LTDC_ConfigLayer+0x1a>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e02c      	b.n	8005da0 <HAL_LTDC_ConfigLayer+0x74>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2134      	movs	r1, #52	; 0x34
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	4614      	mov	r4, r2
 8005d6a:	461d      	mov	r5, r3
 8005d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f83b 	bl	8005dfc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bdb0      	pop	{r4, r5, r7, pc}

08005da8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <HAL_LTDC_EnableDither+0x16>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e016      	b.n	8005dec <HAL_LTDC_EnableDither+0x44>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_LTDC_EnableDither+0x50>)
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	4a09      	ldr	r2, [pc, #36]	; (8005df8 <HAL_LTDC_EnableDither+0x50>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	40016800 	.word	0x40016800

08005dfc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b089      	sub	sp, #36	; 0x24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	0c1b      	lsrs	r3, r3, #16
 8005e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e18:	4413      	add	r3, r2
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	01db      	lsls	r3, r3, #7
 8005e28:	4413      	add	r3, r2
 8005e2a:	3384      	adds	r3, #132	; 0x84
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	4611      	mov	r1, r2
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	01d2      	lsls	r2, r2, #7
 8005e38:	440a      	add	r2, r1
 8005e3a:	3284      	adds	r2, #132	; 0x84
 8005e3c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e40:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e52:	4413      	add	r3, r2
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	01db      	lsls	r3, r3, #7
 8005e60:	440b      	add	r3, r1
 8005e62:	3384      	adds	r3, #132	; 0x84
 8005e64:	4619      	mov	r1, r3
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e7a:	4413      	add	r3, r2
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	01db      	lsls	r3, r3, #7
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3384      	adds	r3, #132	; 0x84
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	4611      	mov	r1, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	01d2      	lsls	r2, r2, #7
 8005e9a:	440a      	add	r2, r1
 8005e9c:	3284      	adds	r2, #132	; 0x84
 8005e9e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ea2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb2:	4413      	add	r3, r2
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	01db      	lsls	r3, r3, #7
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3384      	adds	r3, #132	; 0x84
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	01db      	lsls	r3, r3, #7
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3384      	adds	r3, #132	; 0x84
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	01d2      	lsls	r2, r2, #7
 8005ee6:	440a      	add	r2, r1
 8005ee8:	3284      	adds	r2, #132	; 0x84
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	01db      	lsls	r3, r3, #7
 8005efa:	4413      	add	r3, r2
 8005efc:	3384      	adds	r3, #132	; 0x84
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	01db      	lsls	r3, r3, #7
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3384      	adds	r3, #132	; 0x84
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	01db      	lsls	r3, r3, #7
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3384      	adds	r3, #132	; 0x84
 8005f40:	461a      	mov	r2, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	440b      	add	r3, r1
 8005f62:	3384      	adds	r3, #132	; 0x84
 8005f64:	4619      	mov	r1, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	01db      	lsls	r3, r3, #7
 8005f76:	4413      	add	r3, r2
 8005f78:	3384      	adds	r3, #132	; 0x84
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	4611      	mov	r1, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	01d2      	lsls	r2, r2, #7
 8005f86:	440a      	add	r2, r1
 8005f88:	3284      	adds	r2, #132	; 0x84
 8005f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f8e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	01db      	lsls	r3, r3, #7
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3384      	adds	r3, #132	; 0x84
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3384      	adds	r3, #132	; 0x84
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	4611      	mov	r1, r2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	01d2      	lsls	r2, r2, #7
 8005fc0:	440a      	add	r2, r1
 8005fc2:	3284      	adds	r2, #132	; 0x84
 8005fc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005fc8:	f023 0307 	bic.w	r3, r3, #7
 8005fcc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	69da      	ldr	r2, [r3, #28]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	6809      	ldr	r1, [r1, #0]
 8005fda:	4608      	mov	r0, r1
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	01c9      	lsls	r1, r1, #7
 8005fe0:	4401      	add	r1, r0
 8005fe2:	3184      	adds	r1, #132	; 0x84
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	01db      	lsls	r3, r3, #7
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3384      	adds	r3, #132	; 0x84
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	01db      	lsls	r3, r3, #7
 8006002:	4413      	add	r3, r2
 8006004:	3384      	adds	r3, #132	; 0x84
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	01db      	lsls	r3, r3, #7
 8006016:	4413      	add	r3, r2
 8006018:	3384      	adds	r3, #132	; 0x84
 800601a:	461a      	mov	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800602a:	2304      	movs	r3, #4
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	e01b      	b.n	8006068 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d102      	bne.n	800603e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006038:	2303      	movs	r3, #3
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	e014      	b.n	8006068 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b04      	cmp	r3, #4
 8006044:	d00b      	beq.n	800605e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800604a:	2b02      	cmp	r3, #2
 800604c:	d007      	beq.n	800605e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006052:	2b03      	cmp	r3, #3
 8006054:	d003      	beq.n	800605e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800605a:	2b07      	cmp	r3, #7
 800605c:	d102      	bne.n	8006064 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800605e:	2302      	movs	r3, #2
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e001      	b.n	8006068 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006064:	2301      	movs	r3, #1
 8006066:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	01db      	lsls	r3, r3, #7
 8006072:	4413      	add	r3, r2
 8006074:	3384      	adds	r3, #132	; 0x84
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	6812      	ldr	r2, [r2, #0]
 800607c:	4611      	mov	r1, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	01d2      	lsls	r2, r2, #7
 8006082:	440a      	add	r2, r1
 8006084:	3284      	adds	r2, #132	; 0x84
 8006086:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800608a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	041a      	lsls	r2, r3, #16
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6859      	ldr	r1, [r3, #4]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	1acb      	subs	r3, r1, r3
 80060a2:	69f9      	ldr	r1, [r7, #28]
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	3303      	adds	r3, #3
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	6809      	ldr	r1, [r1, #0]
 80060ae:	4608      	mov	r0, r1
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	01c9      	lsls	r1, r1, #7
 80060b4:	4401      	add	r1, r0
 80060b6:	3184      	adds	r1, #132	; 0x84
 80060b8:	4313      	orrs	r3, r2
 80060ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	01db      	lsls	r3, r3, #7
 80060c6:	4413      	add	r3, r2
 80060c8:	3384      	adds	r3, #132	; 0x84
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	4611      	mov	r1, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	01d2      	lsls	r2, r2, #7
 80060d6:	440a      	add	r2, r1
 80060d8:	3284      	adds	r2, #132	; 0x84
 80060da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	01db      	lsls	r3, r3, #7
 80060ee:	4413      	add	r3, r2
 80060f0:	3384      	adds	r3, #132	; 0x84
 80060f2:	461a      	mov	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	01db      	lsls	r3, r3, #7
 8006104:	4413      	add	r3, r2
 8006106:	3384      	adds	r3, #132	; 0x84
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	4611      	mov	r1, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	01d2      	lsls	r2, r2, #7
 8006114:	440a      	add	r2, r1
 8006116:	3284      	adds	r2, #132	; 0x84
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	6013      	str	r3, [r2, #0]
}
 800611e:	bf00      	nop
 8006120:	3724      	adds	r7, #36	; 0x24
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e25b      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d075      	beq.n	8006236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800614a:	4ba3      	ldr	r3, [pc, #652]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 030c 	and.w	r3, r3, #12
 8006152:	2b04      	cmp	r3, #4
 8006154:	d00c      	beq.n	8006170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006156:	4ba0      	ldr	r3, [pc, #640]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800615e:	2b08      	cmp	r3, #8
 8006160:	d112      	bne.n	8006188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006162:	4b9d      	ldr	r3, [pc, #628]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800616a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800616e:	d10b      	bne.n	8006188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006170:	4b99      	ldr	r3, [pc, #612]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d05b      	beq.n	8006234 <HAL_RCC_OscConfig+0x108>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d157      	bne.n	8006234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e236      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006190:	d106      	bne.n	80061a0 <HAL_RCC_OscConfig+0x74>
 8006192:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a90      	ldr	r2, [pc, #576]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	e01d      	b.n	80061dc <HAL_RCC_OscConfig+0xb0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061a8:	d10c      	bne.n	80061c4 <HAL_RCC_OscConfig+0x98>
 80061aa:	4b8b      	ldr	r3, [pc, #556]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a8a      	ldr	r2, [pc, #552]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80061b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b88      	ldr	r3, [pc, #544]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a87      	ldr	r2, [pc, #540]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e00b      	b.n	80061dc <HAL_RCC_OscConfig+0xb0>
 80061c4:	4b84      	ldr	r3, [pc, #528]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a83      	ldr	r2, [pc, #524]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80061ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4b81      	ldr	r3, [pc, #516]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a80      	ldr	r2, [pc, #512]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80061d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d013      	beq.n	800620c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fc ff20 	bl	8003028 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061ec:	f7fc ff1c 	bl	8003028 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b64      	cmp	r3, #100	; 0x64
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e1fb      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fe:	4b76      	ldr	r3, [pc, #472]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0xc0>
 800620a:	e014      	b.n	8006236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620c:	f7fc ff0c 	bl	8003028 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006214:	f7fc ff08 	bl	8003028 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b64      	cmp	r3, #100	; 0x64
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e1e7      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006226:	4b6c      	ldr	r3, [pc, #432]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f0      	bne.n	8006214 <HAL_RCC_OscConfig+0xe8>
 8006232:	e000      	b.n	8006236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d063      	beq.n	800630a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006242:	4b65      	ldr	r3, [pc, #404]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800624e:	4b62      	ldr	r3, [pc, #392]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006256:	2b08      	cmp	r3, #8
 8006258:	d11c      	bne.n	8006294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800625a:	4b5f      	ldr	r3, [pc, #380]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d116      	bne.n	8006294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006266:	4b5c      	ldr	r3, [pc, #368]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_RCC_OscConfig+0x152>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d001      	beq.n	800627e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e1bb      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800627e:	4b56      	ldr	r3, [pc, #344]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	4952      	ldr	r1, [pc, #328]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 800628e:	4313      	orrs	r3, r2
 8006290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006292:	e03a      	b.n	800630a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d020      	beq.n	80062de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800629c:	4b4f      	ldr	r3, [pc, #316]	; (80063dc <HAL_RCC_OscConfig+0x2b0>)
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a2:	f7fc fec1 	bl	8003028 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a8:	e008      	b.n	80062bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062aa:	f7fc febd 	bl	8003028 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e19c      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062bc:	4b46      	ldr	r3, [pc, #280]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f0      	beq.n	80062aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c8:	4b43      	ldr	r3, [pc, #268]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	4940      	ldr	r1, [pc, #256]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	600b      	str	r3, [r1, #0]
 80062dc:	e015      	b.n	800630a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062de:	4b3f      	ldr	r3, [pc, #252]	; (80063dc <HAL_RCC_OscConfig+0x2b0>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7fc fea0 	bl	8003028 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ec:	f7fc fe9c 	bl	8003028 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e17b      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062fe:	4b36      	ldr	r3, [pc, #216]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f0      	bne.n	80062ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d030      	beq.n	8006378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800631e:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <HAL_RCC_OscConfig+0x2b4>)
 8006320:	2201      	movs	r2, #1
 8006322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006324:	f7fc fe80 	bl	8003028 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800632c:	f7fc fe7c 	bl	8003028 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e15b      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800633e:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 8006340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <HAL_RCC_OscConfig+0x200>
 800634a:	e015      	b.n	8006378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800634c:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <HAL_RCC_OscConfig+0x2b4>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006352:	f7fc fe69 	bl	8003028 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800635a:	f7fc fe65 	bl	8003028 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e144      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800636c:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 800636e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f0      	bne.n	800635a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80a0 	beq.w	80064c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800638a:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10f      	bne.n	80063b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006396:	2300      	movs	r3, #0
 8006398:	60bb      	str	r3, [r7, #8]
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4a0e      	ldr	r2, [pc, #56]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6413      	str	r3, [r2, #64]	; 0x40
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <HAL_RCC_OscConfig+0x2ac>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	60bb      	str	r3, [r7, #8]
 80063b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063b2:	2301      	movs	r3, #1
 80063b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <HAL_RCC_OscConfig+0x2b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d121      	bne.n	8006406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063c2:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <HAL_RCC_OscConfig+0x2b8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a07      	ldr	r2, [pc, #28]	; (80063e4 <HAL_RCC_OscConfig+0x2b8>)
 80063c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063ce:	f7fc fe2b 	bl	8003028 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d4:	e011      	b.n	80063fa <HAL_RCC_OscConfig+0x2ce>
 80063d6:	bf00      	nop
 80063d8:	40023800 	.word	0x40023800
 80063dc:	42470000 	.word	0x42470000
 80063e0:	42470e80 	.word	0x42470e80
 80063e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e8:	f7fc fe1e 	bl	8003028 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e0fd      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fa:	4b81      	ldr	r3, [pc, #516]	; (8006600 <HAL_RCC_OscConfig+0x4d4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0f0      	beq.n	80063e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d106      	bne.n	800641c <HAL_RCC_OscConfig+0x2f0>
 800640e:	4b7d      	ldr	r3, [pc, #500]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006412:	4a7c      	ldr	r2, [pc, #496]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	6713      	str	r3, [r2, #112]	; 0x70
 800641a:	e01c      	b.n	8006456 <HAL_RCC_OscConfig+0x32a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2b05      	cmp	r3, #5
 8006422:	d10c      	bne.n	800643e <HAL_RCC_OscConfig+0x312>
 8006424:	4b77      	ldr	r3, [pc, #476]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006428:	4a76      	ldr	r2, [pc, #472]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 800642a:	f043 0304 	orr.w	r3, r3, #4
 800642e:	6713      	str	r3, [r2, #112]	; 0x70
 8006430:	4b74      	ldr	r3, [pc, #464]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006434:	4a73      	ldr	r2, [pc, #460]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006436:	f043 0301 	orr.w	r3, r3, #1
 800643a:	6713      	str	r3, [r2, #112]	; 0x70
 800643c:	e00b      	b.n	8006456 <HAL_RCC_OscConfig+0x32a>
 800643e:	4b71      	ldr	r3, [pc, #452]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	4a70      	ldr	r2, [pc, #448]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	6713      	str	r3, [r2, #112]	; 0x70
 800644a:	4b6e      	ldr	r3, [pc, #440]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	4a6d      	ldr	r2, [pc, #436]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006450:	f023 0304 	bic.w	r3, r3, #4
 8006454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d015      	beq.n	800648a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645e:	f7fc fde3 	bl	8003028 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006464:	e00a      	b.n	800647c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006466:	f7fc fddf 	bl	8003028 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	f241 3288 	movw	r2, #5000	; 0x1388
 8006474:	4293      	cmp	r3, r2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e0bc      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800647c:	4b61      	ldr	r3, [pc, #388]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0ee      	beq.n	8006466 <HAL_RCC_OscConfig+0x33a>
 8006488:	e014      	b.n	80064b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648a:	f7fc fdcd 	bl	8003028 <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006490:	e00a      	b.n	80064a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006492:	f7fc fdc9 	bl	8003028 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e0a6      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a8:	4b56      	ldr	r3, [pc, #344]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1ee      	bne.n	8006492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d105      	bne.n	80064c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ba:	4b52      	ldr	r3, [pc, #328]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	4a51      	ldr	r2, [pc, #324]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 80064c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8092 	beq.w	80065f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064d0:	4b4c      	ldr	r3, [pc, #304]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 030c 	and.w	r3, r3, #12
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d05c      	beq.n	8006596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d141      	bne.n	8006568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e4:	4b48      	ldr	r3, [pc, #288]	; (8006608 <HAL_RCC_OscConfig+0x4dc>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ea:	f7fc fd9d 	bl	8003028 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f2:	f7fc fd99 	bl	8003028 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e078      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006504:	4b3f      	ldr	r3, [pc, #252]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f0      	bne.n	80064f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	019b      	lsls	r3, r3, #6
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	3b01      	subs	r3, #1
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	061b      	lsls	r3, r3, #24
 8006534:	4933      	ldr	r1, [pc, #204]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 8006536:	4313      	orrs	r3, r2
 8006538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800653a:	4b33      	ldr	r3, [pc, #204]	; (8006608 <HAL_RCC_OscConfig+0x4dc>)
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006540:	f7fc fd72 	bl	8003028 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006548:	f7fc fd6e 	bl	8003028 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e04d      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800655a:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0f0      	beq.n	8006548 <HAL_RCC_OscConfig+0x41c>
 8006566:	e045      	b.n	80065f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006568:	4b27      	ldr	r3, [pc, #156]	; (8006608 <HAL_RCC_OscConfig+0x4dc>)
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656e:	f7fc fd5b 	bl	8003028 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006576:	f7fc fd57 	bl	8003028 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e036      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006588:	4b1e      	ldr	r3, [pc, #120]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f0      	bne.n	8006576 <HAL_RCC_OscConfig+0x44a>
 8006594:	e02e      	b.n	80065f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e029      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <HAL_RCC_OscConfig+0x4d8>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d11c      	bne.n	80065f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d115      	bne.n	80065f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065ca:	4013      	ands	r3, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10d      	bne.n	80065f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d106      	bne.n	80065f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d001      	beq.n	80065f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40007000 	.word	0x40007000
 8006604:	40023800 	.word	0x40023800
 8006608:	42470060 	.word	0x42470060

0800660c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e0cc      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006620:	4b68      	ldr	r3, [pc, #416]	; (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d90c      	bls.n	8006648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662e:	4b65      	ldr	r3, [pc, #404]	; (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006636:	4b63      	ldr	r3, [pc, #396]	; (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0b8      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d020      	beq.n	8006696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006660:	4b59      	ldr	r3, [pc, #356]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4a58      	ldr	r2, [pc, #352]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800666a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006678:	4b53      	ldr	r3, [pc, #332]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4a52      	ldr	r2, [pc, #328]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006684:	4b50      	ldr	r3, [pc, #320]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	494d      	ldr	r1, [pc, #308]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d044      	beq.n	800672c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d107      	bne.n	80066ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	4b47      	ldr	r3, [pc, #284]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d119      	bne.n	80066ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e07f      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d003      	beq.n	80066ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d107      	bne.n	80066da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ca:	4b3f      	ldr	r3, [pc, #252]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e06f      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066da:	4b3b      	ldr	r3, [pc, #236]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e067      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066ea:	4b37      	ldr	r3, [pc, #220]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f023 0203 	bic.w	r2, r3, #3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4934      	ldr	r1, [pc, #208]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066fc:	f7fc fc94 	bl	8003028 <HAL_GetTick>
 8006700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006702:	e00a      	b.n	800671a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006704:	f7fc fc90 	bl	8003028 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006712:	4293      	cmp	r3, r2
 8006714:	d901      	bls.n	800671a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e04f      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671a:	4b2b      	ldr	r3, [pc, #172]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 020c 	and.w	r2, r3, #12
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	429a      	cmp	r2, r3
 800672a:	d1eb      	bne.n	8006704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800672c:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d20c      	bcs.n	8006754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673a:	4b22      	ldr	r3, [pc, #136]	; (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006742:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d001      	beq.n	8006754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e032      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006760:	4b19      	ldr	r3, [pc, #100]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	4916      	ldr	r1, [pc, #88]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	4313      	orrs	r3, r2
 8006770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800677e:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	490e      	ldr	r1, [pc, #56]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	4313      	orrs	r3, r2
 8006790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006792:	f000 f821 	bl	80067d8 <HAL_RCC_GetSysClockFreq>
 8006796:	4601      	mov	r1, r0
 8006798:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	091b      	lsrs	r3, r3, #4
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <HAL_RCC_ClockConfig+0x1c0>)
 80067a4:	5cd3      	ldrb	r3, [r2, r3]
 80067a6:	fa21 f303 	lsr.w	r3, r1, r3
 80067aa:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <HAL_RCC_ClockConfig+0x1c4>)
 80067ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067ae:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <HAL_RCC_ClockConfig+0x1c8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fb f81a 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40023c00 	.word	0x40023c00
 80067c8:	40023800 	.word	0x40023800
 80067cc:	0800a620 	.word	0x0800a620
 80067d0:	20000000 	.word	0x20000000
 80067d4:	2000004c 	.word	0x2000004c

080067d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	2300      	movs	r3, #0
 80067e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067ee:	4b63      	ldr	r3, [pc, #396]	; (800697c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 030c 	and.w	r3, r3, #12
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d007      	beq.n	800680a <HAL_RCC_GetSysClockFreq+0x32>
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d008      	beq.n	8006810 <HAL_RCC_GetSysClockFreq+0x38>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f040 80b4 	bne.w	800696c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006804:	4b5e      	ldr	r3, [pc, #376]	; (8006980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006806:	60bb      	str	r3, [r7, #8]
       break;
 8006808:	e0b3      	b.n	8006972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800680a:	4b5e      	ldr	r3, [pc, #376]	; (8006984 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800680c:	60bb      	str	r3, [r7, #8]
      break;
 800680e:	e0b0      	b.n	8006972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006810:	4b5a      	ldr	r3, [pc, #360]	; (800697c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006818:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800681a:	4b58      	ldr	r3, [pc, #352]	; (800697c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d04a      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006826:	4b55      	ldr	r3, [pc, #340]	; (800697c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	099b      	lsrs	r3, r3, #6
 800682c:	f04f 0400 	mov.w	r4, #0
 8006830:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	ea03 0501 	and.w	r5, r3, r1
 800683c:	ea04 0602 	and.w	r6, r4, r2
 8006840:	4629      	mov	r1, r5
 8006842:	4632      	mov	r2, r6
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	f04f 0400 	mov.w	r4, #0
 800684c:	0154      	lsls	r4, r2, #5
 800684e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006852:	014b      	lsls	r3, r1, #5
 8006854:	4619      	mov	r1, r3
 8006856:	4622      	mov	r2, r4
 8006858:	1b49      	subs	r1, r1, r5
 800685a:	eb62 0206 	sbc.w	r2, r2, r6
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	f04f 0400 	mov.w	r4, #0
 8006866:	0194      	lsls	r4, r2, #6
 8006868:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800686c:	018b      	lsls	r3, r1, #6
 800686e:	1a5b      	subs	r3, r3, r1
 8006870:	eb64 0402 	sbc.w	r4, r4, r2
 8006874:	f04f 0100 	mov.w	r1, #0
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	00e2      	lsls	r2, r4, #3
 800687e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006882:	00d9      	lsls	r1, r3, #3
 8006884:	460b      	mov	r3, r1
 8006886:	4614      	mov	r4, r2
 8006888:	195b      	adds	r3, r3, r5
 800688a:	eb44 0406 	adc.w	r4, r4, r6
 800688e:	f04f 0100 	mov.w	r1, #0
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	0262      	lsls	r2, r4, #9
 8006898:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800689c:	0259      	lsls	r1, r3, #9
 800689e:	460b      	mov	r3, r1
 80068a0:	4614      	mov	r4, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	4621      	mov	r1, r4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f04f 0400 	mov.w	r4, #0
 80068ac:	461a      	mov	r2, r3
 80068ae:	4623      	mov	r3, r4
 80068b0:	f7f9 fc9e 	bl	80001f0 <__aeabi_uldivmod>
 80068b4:	4603      	mov	r3, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e049      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068bc:	4b2f      	ldr	r3, [pc, #188]	; (800697c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	099b      	lsrs	r3, r3, #6
 80068c2:	f04f 0400 	mov.w	r4, #0
 80068c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068ca:	f04f 0200 	mov.w	r2, #0
 80068ce:	ea03 0501 	and.w	r5, r3, r1
 80068d2:	ea04 0602 	and.w	r6, r4, r2
 80068d6:	4629      	mov	r1, r5
 80068d8:	4632      	mov	r2, r6
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	f04f 0400 	mov.w	r4, #0
 80068e2:	0154      	lsls	r4, r2, #5
 80068e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068e8:	014b      	lsls	r3, r1, #5
 80068ea:	4619      	mov	r1, r3
 80068ec:	4622      	mov	r2, r4
 80068ee:	1b49      	subs	r1, r1, r5
 80068f0:	eb62 0206 	sbc.w	r2, r2, r6
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	f04f 0400 	mov.w	r4, #0
 80068fc:	0194      	lsls	r4, r2, #6
 80068fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006902:	018b      	lsls	r3, r1, #6
 8006904:	1a5b      	subs	r3, r3, r1
 8006906:	eb64 0402 	sbc.w	r4, r4, r2
 800690a:	f04f 0100 	mov.w	r1, #0
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	00e2      	lsls	r2, r4, #3
 8006914:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006918:	00d9      	lsls	r1, r3, #3
 800691a:	460b      	mov	r3, r1
 800691c:	4614      	mov	r4, r2
 800691e:	195b      	adds	r3, r3, r5
 8006920:	eb44 0406 	adc.w	r4, r4, r6
 8006924:	f04f 0100 	mov.w	r1, #0
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	02a2      	lsls	r2, r4, #10
 800692e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006932:	0299      	lsls	r1, r3, #10
 8006934:	460b      	mov	r3, r1
 8006936:	4614      	mov	r4, r2
 8006938:	4618      	mov	r0, r3
 800693a:	4621      	mov	r1, r4
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f04f 0400 	mov.w	r4, #0
 8006942:	461a      	mov	r2, r3
 8006944:	4623      	mov	r3, r4
 8006946:	f7f9 fc53 	bl	80001f0 <__aeabi_uldivmod>
 800694a:	4603      	mov	r3, r0
 800694c:	460c      	mov	r4, r1
 800694e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	3301      	adds	r3, #1
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	60bb      	str	r3, [r7, #8]
      break;
 800696a:	e002      	b.n	8006972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800696c:	4b04      	ldr	r3, [pc, #16]	; (8006980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800696e:	60bb      	str	r3, [r7, #8]
      break;
 8006970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006972:	68bb      	ldr	r3, [r7, #8]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800697c:	40023800 	.word	0x40023800
 8006980:	00f42400 	.word	0x00f42400
 8006984:	007a1200 	.word	0x007a1200

08006988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800698c:	4b03      	ldr	r3, [pc, #12]	; (800699c <HAL_RCC_GetHCLKFreq+0x14>)
 800698e:	681b      	ldr	r3, [r3, #0]
}
 8006990:	4618      	mov	r0, r3
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20000000 	.word	0x20000000

080069a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069a4:	f7ff fff0 	bl	8006988 <HAL_RCC_GetHCLKFreq>
 80069a8:	4601      	mov	r1, r0
 80069aa:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	0a9b      	lsrs	r3, r3, #10
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	4a03      	ldr	r2, [pc, #12]	; (80069c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069b6:	5cd3      	ldrb	r3, [r2, r3]
 80069b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069bc:	4618      	mov	r0, r3
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40023800 	.word	0x40023800
 80069c4:	0800a630 	.word	0x0800a630

080069c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069cc:	f7ff ffdc 	bl	8006988 <HAL_RCC_GetHCLKFreq>
 80069d0:	4601      	mov	r1, r0
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	0b5b      	lsrs	r3, r3, #13
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	4a03      	ldr	r2, [pc, #12]	; (80069ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80069de:	5cd3      	ldrb	r3, [r2, r3]
 80069e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40023800 	.word	0x40023800
 80069ec:	0800a630 	.word	0x0800a630

080069f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	220f      	movs	r2, #15
 80069fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a00:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <HAL_RCC_GetClockConfig+0x5c>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0203 	and.w	r2, r3, #3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <HAL_RCC_GetClockConfig+0x5c>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <HAL_RCC_GetClockConfig+0x5c>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_RCC_GetClockConfig+0x5c>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	08db      	lsrs	r3, r3, #3
 8006a2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <HAL_RCC_GetClockConfig+0x60>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 020f 	and.w	r2, r3, #15
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	601a      	str	r2, [r3, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	40023c00 	.word	0x40023c00

08006a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d105      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d075      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a88:	4bad      	ldr	r3, [pc, #692]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a8e:	f7fc facb 	bl	8003028 <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a96:	f7fc fac7 	bl	8003028 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e18b      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aa8:	4ba6      	ldr	r3, [pc, #664]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1f0      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d009      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	019a      	lsls	r2, r3, #6
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	071b      	lsls	r3, r3, #28
 8006acc:	499d      	ldr	r1, [pc, #628]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01f      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ae0:	4b98      	ldr	r3, [pc, #608]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae6:	0f1b      	lsrs	r3, r3, #28
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	019a      	lsls	r2, r3, #6
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	061b      	lsls	r3, r3, #24
 8006afa:	431a      	orrs	r2, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	071b      	lsls	r3, r3, #28
 8006b00:	4990      	ldr	r1, [pc, #576]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b08:	4b8e      	ldr	r3, [pc, #568]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0e:	f023 021f 	bic.w	r2, r3, #31
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	498a      	ldr	r1, [pc, #552]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00d      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	019a      	lsls	r2, r3, #6
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	071b      	lsls	r3, r3, #28
 8006b40:	4980      	ldr	r1, [pc, #512]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b48:	4b7d      	ldr	r3, [pc, #500]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b4e:	f7fc fa6b 	bl	8003028 <HAL_GetTick>
 8006b52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b54:	e008      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b56:	f7fc fa67 	bl	8003028 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e12b      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b68:	4b76      	ldr	r3, [pc, #472]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0f0      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d105      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d079      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b8c:	4b6e      	ldr	r3, [pc, #440]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b92:	f7fc fa49 	bl	8003028 <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b98:	e008      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b9a:	f7fc fa45 	bl	8003028 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e109      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bac:	4b65      	ldr	r3, [pc, #404]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb8:	d0ef      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d020      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bc6:	4b5f      	ldr	r3, [pc, #380]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bcc:	0f1b      	lsrs	r3, r3, #28
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	019a      	lsls	r2, r3, #6
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	061b      	lsls	r3, r3, #24
 8006be0:	431a      	orrs	r2, r3
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	071b      	lsls	r3, r3, #28
 8006be6:	4957      	ldr	r1, [pc, #348]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006bee:	4b55      	ldr	r3, [pc, #340]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	4950      	ldr	r1, [pc, #320]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01e      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c14:	4b4b      	ldr	r3, [pc, #300]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1a:	0e1b      	lsrs	r3, r3, #24
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	019a      	lsls	r2, r3, #6
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	061b      	lsls	r3, r3, #24
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	071b      	lsls	r3, r3, #28
 8006c34:	4943      	ldr	r1, [pc, #268]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c3c:	4b41      	ldr	r3, [pc, #260]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	493e      	ldr	r1, [pc, #248]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c52:	4b3d      	ldr	r3, [pc, #244]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c58:	f7fc f9e6 	bl	8003028 <HAL_GetTick>
 8006c5c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c60:	f7fc f9e2 	bl	8003028 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e0a6      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c72:	4b34      	ldr	r3, [pc, #208]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c7e:	d1ef      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 808d 	beq.w	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	4b2c      	ldr	r3, [pc, #176]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	4a2b      	ldr	r2, [pc, #172]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c9e:	4b29      	ldr	r3, [pc, #164]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006caa:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a27      	ldr	r2, [pc, #156]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cb6:	f7fc f9b7 	bl	8003028 <HAL_GetTick>
 8006cba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cbe:	f7fc f9b3 	bl	8003028 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e077      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cd0:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f0      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cdc:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d039      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d032      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cfa:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d04:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d10:	4a0c      	ldr	r2, [pc, #48]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d11e      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d22:	f7fc f981 	bl	8003028 <HAL_GetTick>
 8006d26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d28:	e014      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2a:	f7fc f97d 	bl	8003028 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d90b      	bls.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e03f      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006d40:	42470068 	.word	0x42470068
 8006d44:	40023800 	.word	0x40023800
 8006d48:	42470070 	.word	0x42470070
 8006d4c:	40007000 	.word	0x40007000
 8006d50:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d54:	4b1c      	ldr	r3, [pc, #112]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0e4      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6c:	d10d      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006d6e:	4b16      	ldr	r3, [pc, #88]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d82:	4911      	ldr	r1, [pc, #68]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	608b      	str	r3, [r1, #8]
 8006d88:	e005      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	4a0e      	ldr	r2, [pc, #56]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d94:	6093      	str	r3, [r2, #8]
 8006d96:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006da2:	4909      	ldr	r1, [pc, #36]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006dba:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006dbc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	424711e0 	.word	0x424711e0

08006dd0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e025      	b.n	8006e30 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7f9 fdf7 	bl	80009ec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f001 fdb1 	bl	8008978 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	f001 fe1c 	bl	8008a5e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d101      	bne.n	8006e54 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
 8006e52:	e018      	b.n	8006e86 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 fe79 	bl	8008b5c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d104      	bne.n	8006e7c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2205      	movs	r2, #5
 8006e76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006e7a:	e003      	b.n	8006e84 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d101      	bne.n	8006ea8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e00e      	b.n	8006ec6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 fe8c 	bl	8008bd4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e056      	b.n	8006f8e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fa fbe4 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	ea42 0103 	orr.w	r1, r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	f003 0104 	and.w	r1, r3, #4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e01a      	b.n	8006fde <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fbe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7fa fbc9 	bl	8001758 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b088      	sub	sp, #32
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	603b      	str	r3, [r7, #0]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_SPI_Transmit+0x22>
 8007004:	2302      	movs	r3, #2
 8007006:	e11e      	b.n	8007246 <HAL_SPI_Transmit+0x260>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007010:	f7fc f80a 	bl	8003028 <HAL_GetTick>
 8007014:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d002      	beq.n	800702c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007026:	2302      	movs	r3, #2
 8007028:	77fb      	strb	r3, [r7, #31]
    goto error;
 800702a:	e103      	b.n	8007234 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_SPI_Transmit+0x52>
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d102      	bne.n	800703e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800703c:	e0fa      	b.n	8007234 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2203      	movs	r2, #3
 8007042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	88fa      	ldrh	r2, [r7, #6]
 8007056:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007084:	d107      	bne.n	8007096 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007094:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d007      	beq.n	80070b4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070bc:	d14b      	bne.n	8007156 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <HAL_SPI_Transmit+0xe6>
 80070c6:	8afb      	ldrh	r3, [r7, #22]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d13e      	bne.n	800714a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	881a      	ldrh	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	1c9a      	adds	r2, r3, #2
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070f0:	e02b      	b.n	800714a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d112      	bne.n	8007126 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	881a      	ldrh	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	1c9a      	adds	r2, r3, #2
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	86da      	strh	r2, [r3, #54]	; 0x36
 8007124:	e011      	b.n	800714a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007126:	f7fb ff7f 	bl	8003028 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d803      	bhi.n	800713e <HAL_SPI_Transmit+0x158>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Transmit+0x15e>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007148:	e074      	b.n	8007234 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ce      	bne.n	80070f2 <HAL_SPI_Transmit+0x10c>
 8007154:	e04c      	b.n	80071f0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_SPI_Transmit+0x17e>
 800715e:	8afb      	ldrh	r3, [r7, #22]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d140      	bne.n	80071e6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	7812      	ldrb	r2, [r2, #0]
 8007170:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800718a:	e02c      	b.n	80071e6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b02      	cmp	r3, #2
 8007198:	d113      	bne.n	80071c2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	86da      	strh	r2, [r3, #54]	; 0x36
 80071c0:	e011      	b.n	80071e6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c2:	f7fb ff31 	bl	8003028 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d803      	bhi.n	80071da <HAL_SPI_Transmit+0x1f4>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d8:	d102      	bne.n	80071e0 <HAL_SPI_Transmit+0x1fa>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d102      	bne.n	80071e6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071e4:	e026      	b.n	8007234 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1cd      	bne.n	800718c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fbb3 	bl	8007960 <SPI_EndRxTxTransaction>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800720e:	2300      	movs	r3, #0
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e000      	b.n	8007234 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007232:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007244:	7ffb      	ldrb	r3, [r7, #31]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b088      	sub	sp, #32
 8007252:	af02      	add	r7, sp, #8
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	603b      	str	r3, [r7, #0]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800726a:	d112      	bne.n	8007292 <HAL_SPI_Receive+0x44>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10e      	bne.n	8007292 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2204      	movs	r2, #4
 8007278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800727c:	88fa      	ldrh	r2, [r7, #6]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f8e9 	bl	8007460 <HAL_SPI_TransmitReceive>
 800728e:	4603      	mov	r3, r0
 8007290:	e0e2      	b.n	8007458 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_SPI_Receive+0x52>
 800729c:	2302      	movs	r3, #2
 800729e:	e0db      	b.n	8007458 <HAL_SPI_Receive+0x20a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072a8:	f7fb febe 	bl	8003028 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d002      	beq.n	80072c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072ba:	2302      	movs	r3, #2
 80072bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072be:	e0c2      	b.n	8007446 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <HAL_SPI_Receive+0x7e>
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072d0:	e0b9      	b.n	8007446 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2204      	movs	r2, #4
 80072d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007318:	d107      	bne.n	800732a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007328:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d007      	beq.n	8007348 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007346:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d162      	bne.n	8007416 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007350:	e02e      	b.n	80073b0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b01      	cmp	r3, #1
 800735e:	d115      	bne.n	800738c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f103 020c 	add.w	r2, r3, #12
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	7812      	ldrb	r2, [r2, #0]
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	87da      	strh	r2, [r3, #62]	; 0x3e
 800738a:	e011      	b.n	80073b0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800738c:	f7fb fe4c 	bl	8003028 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d803      	bhi.n	80073a4 <HAL_SPI_Receive+0x156>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d102      	bne.n	80073aa <HAL_SPI_Receive+0x15c>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073ae:	e04a      	b.n	8007446 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1cb      	bne.n	8007352 <HAL_SPI_Receive+0x104>
 80073ba:	e031      	b.n	8007420 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d113      	bne.n	80073f2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	b292      	uxth	r2, r2
 80073d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	1c9a      	adds	r2, r3, #2
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073f0:	e011      	b.n	8007416 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073f2:	f7fb fe19 	bl	8003028 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d803      	bhi.n	800740a <HAL_SPI_Receive+0x1bc>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d102      	bne.n	8007410 <HAL_SPI_Receive+0x1c2>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d102      	bne.n	8007416 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007414:	e017      	b.n	8007446 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1cd      	bne.n	80073bc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fa35 	bl	8007894 <SPI_EndRxTransaction>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
 8007442:	e000      	b.n	8007446 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007444:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08c      	sub	sp, #48	; 0x30
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800746e:	2301      	movs	r3, #1
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <HAL_SPI_TransmitReceive+0x26>
 8007482:	2302      	movs	r3, #2
 8007484:	e18a      	b.n	800779c <HAL_SPI_TransmitReceive+0x33c>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800748e:	f7fb fdcb 	bl	8003028 <HAL_GetTick>
 8007492:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074a4:	887b      	ldrh	r3, [r7, #2]
 80074a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d00f      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x70>
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074b6:	d107      	bne.n	80074c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d103      	bne.n	80074c8 <HAL_SPI_TransmitReceive+0x68>
 80074c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d003      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074c8:	2302      	movs	r3, #2
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074ce:	e15b      	b.n	8007788 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x82>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x82>
 80074dc:	887b      	ldrh	r3, [r7, #2]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074e8:	e14e      	b.n	8007788 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d003      	beq.n	80074fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2205      	movs	r2, #5
 80074fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	887a      	ldrh	r2, [r7, #2]
 800750e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	887a      	ldrh	r2, [r7, #2]
 8007514:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	887a      	ldrh	r2, [r7, #2]
 8007520:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	887a      	ldrh	r2, [r7, #2]
 8007526:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d007      	beq.n	8007552 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755a:	d178      	bne.n	800764e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_SPI_TransmitReceive+0x10a>
 8007564:	8b7b      	ldrh	r3, [r7, #26]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d166      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	881a      	ldrh	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	1c9a      	adds	r2, r3, #2
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800758e:	e053      	b.n	8007638 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d11b      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x176>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d016      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x176>
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d113      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b2:	881a      	ldrh	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	1c9a      	adds	r2, r3, #2
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d119      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x1b8>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d014      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	b292      	uxth	r2, r2
 80075fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007614:	2301      	movs	r3, #1
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007618:	f7fb fd06 	bl	8003028 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007624:	429a      	cmp	r2, r3
 8007626:	d807      	bhi.n	8007638 <HAL_SPI_TransmitReceive+0x1d8>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d003      	beq.n	8007638 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007636:	e0a7      	b.n	8007788 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1a6      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x130>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1a1      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x130>
 800764c:	e07c      	b.n	8007748 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_SPI_TransmitReceive+0x1fc>
 8007656:	8b7b      	ldrh	r3, [r7, #26]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d16b      	bne.n	8007734 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	7812      	ldrb	r2, [r2, #0]
 8007668:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007682:	e057      	b.n	8007734 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b02      	cmp	r3, #2
 8007690:	d11c      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x26c>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d017      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x26c>
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d114      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	330c      	adds	r3, #12
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d119      	bne.n	800770e <HAL_SPI_TransmitReceive+0x2ae>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d014      	beq.n	800770e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800770a:	2301      	movs	r3, #1
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800770e:	f7fb fc8b 	bl	8003028 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800771a:	429a      	cmp	r2, r3
 800771c:	d803      	bhi.n	8007726 <HAL_SPI_TransmitReceive+0x2c6>
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007724:	d102      	bne.n	800772c <HAL_SPI_TransmitReceive+0x2cc>
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007732:	e029      	b.n	8007788 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1a2      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x224>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d19d      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f907 	bl	8007960 <SPI_EndRxTxTransaction>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2220      	movs	r2, #32
 8007762:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007764:	e010      	b.n	8007788 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	e000      	b.n	8007788 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007786:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800779c:	4618      	mov	r0, r3
 800779e:	3730      	adds	r7, #48	; 0x30
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077b2:	b2db      	uxtb	r3, r3
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	4613      	mov	r3, r2
 80077ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d0:	e04c      	b.n	800786c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d048      	beq.n	800786c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80077da:	f7fb fc25 	bl	8003028 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d902      	bls.n	80077f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d13d      	bne.n	800786c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007808:	d111      	bne.n	800782e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007812:	d004      	beq.n	800781e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781c:	d107      	bne.n	800782e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800782c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007836:	d10f      	bne.n	8007858 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007856:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e00f      	b.n	800788c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4013      	ands	r3, r2
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	429a      	cmp	r2, r3
 8007888:	d1a3      	bne.n	80077d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078a8:	d111      	bne.n	80078ce <SPI_EndRxTransaction+0x3a>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b2:	d004      	beq.n	80078be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078bc:	d107      	bne.n	80078ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078d6:	d12a      	bne.n	800792e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e0:	d012      	beq.n	8007908 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2200      	movs	r2, #0
 80078ea:	2180      	movs	r1, #128	; 0x80
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff ff67 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d02d      	beq.n	8007954 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fc:	f043 0220 	orr.w	r2, r3, #32
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e026      	b.n	8007956 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	2101      	movs	r1, #1
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f7ff ff54 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01a      	beq.n	8007954 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007922:	f043 0220 	orr.w	r2, r3, #32
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e013      	b.n	8007956 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2200      	movs	r2, #0
 8007936:	2101      	movs	r1, #1
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff ff41 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007948:	f043 0220 	orr.w	r2, r3, #32
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e000      	b.n	8007956 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b088      	sub	sp, #32
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800796c:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <SPI_EndRxTxTransaction+0x7c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1b      	ldr	r2, [pc, #108]	; (80079e0 <SPI_EndRxTxTransaction+0x80>)
 8007972:	fba2 2303 	umull	r2, r3, r2, r3
 8007976:	0d5b      	lsrs	r3, r3, #21
 8007978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800797c:	fb02 f303 	mul.w	r3, r2, r3
 8007980:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800798a:	d112      	bne.n	80079b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	2180      	movs	r1, #128	; 0x80
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f7ff ff12 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a6:	f043 0220 	orr.w	r2, r3, #32
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e00f      	b.n	80079d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c8:	2b80      	cmp	r3, #128	; 0x80
 80079ca:	d0f2      	beq.n	80079b2 <SPI_EndRxTxTransaction+0x52>
 80079cc:	e000      	b.n	80079d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80079ce:	bf00      	nop
  }

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000000 	.word	0x20000000
 80079e0:	165e9f81 	.word	0x165e9f81

080079e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e01d      	b.n	8007a32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fa f82e 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4619      	mov	r1, r3
 8007a22:	4610      	mov	r0, r2
 8007a24:	f000 fa14 	bl	8007e50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b06      	cmp	r3, #6
 8007a62:	d007      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d122      	bne.n	8007ade <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d11b      	bne.n	8007ade <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f06f 0202 	mvn.w	r2, #2
 8007aae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9a5 	bl	8007e14 <HAL_TIM_IC_CaptureCallback>
 8007aca:	e005      	b.n	8007ad8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f997 	bl	8007e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9a8 	bl	8007e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d122      	bne.n	8007b32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d11b      	bne.n	8007b32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f06f 0204 	mvn.w	r2, #4
 8007b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f97b 	bl	8007e14 <HAL_TIM_IC_CaptureCallback>
 8007b1e:	e005      	b.n	8007b2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f96d 	bl	8007e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f97e 	bl	8007e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d122      	bne.n	8007b86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d11b      	bne.n	8007b86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f06f 0208 	mvn.w	r2, #8
 8007b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f951 	bl	8007e14 <HAL_TIM_IC_CaptureCallback>
 8007b72:	e005      	b.n	8007b80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f943 	bl	8007e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f954 	bl	8007e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b10      	cmp	r3, #16
 8007b92:	d122      	bne.n	8007bda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d11b      	bne.n	8007bda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f06f 0210 	mvn.w	r2, #16
 8007baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2208      	movs	r2, #8
 8007bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f927 	bl	8007e14 <HAL_TIM_IC_CaptureCallback>
 8007bc6:	e005      	b.n	8007bd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f919 	bl	8007e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f92a 	bl	8007e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d10e      	bne.n	8007c06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d107      	bne.n	8007c06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f06f 0201 	mvn.w	r2, #1
 8007bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7f9 fcd7 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c10:	2b80      	cmp	r3, #128	; 0x80
 8007c12:	d10e      	bne.n	8007c32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1e:	2b80      	cmp	r3, #128	; 0x80
 8007c20:	d107      	bne.n	8007c32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 facf 	bl	80081d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3c:	2b40      	cmp	r3, #64	; 0x40
 8007c3e:	d10e      	bne.n	8007c5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4a:	2b40      	cmp	r3, #64	; 0x40
 8007c4c:	d107      	bne.n	8007c5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f8ef 	bl	8007e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d10e      	bne.n	8007c8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d107      	bne.n	8007c8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f06f 0220 	mvn.w	r2, #32
 8007c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fa99 	bl	80081bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <HAL_TIM_ConfigClockSource+0x18>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e0a6      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x166>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cc8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b40      	cmp	r3, #64	; 0x40
 8007ce0:	d067      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x120>
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d80b      	bhi.n	8007cfe <HAL_TIM_ConfigClockSource+0x6c>
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d073      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x140>
 8007cea:	2b10      	cmp	r3, #16
 8007cec:	d802      	bhi.n	8007cf4 <HAL_TIM_ConfigClockSource+0x62>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d06f      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007cf2:	e078      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	d06c      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x140>
 8007cf8:	2b30      	cmp	r3, #48	; 0x30
 8007cfa:	d06a      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007cfc:	e073      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cfe:	2b70      	cmp	r3, #112	; 0x70
 8007d00:	d00d      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x8c>
 8007d02:	2b70      	cmp	r3, #112	; 0x70
 8007d04:	d804      	bhi.n	8007d10 <HAL_TIM_ConfigClockSource+0x7e>
 8007d06:	2b50      	cmp	r3, #80	; 0x50
 8007d08:	d033      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0xe0>
 8007d0a:	2b60      	cmp	r3, #96	; 0x60
 8007d0c:	d041      	beq.n	8007d92 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007d0e:	e06a      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d14:	d066      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0x152>
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1a:	d017      	beq.n	8007d4c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007d1c:	e063      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6899      	ldr	r1, [r3, #8]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f000 f9a9 	bl	8008084 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	609a      	str	r2, [r3, #8]
      break;
 8007d4a:	e04c      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	6899      	ldr	r1, [r3, #8]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f000 f992 	bl	8008084 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d6e:	609a      	str	r2, [r3, #8]
      break;
 8007d70:	e039      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	6859      	ldr	r1, [r3, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f000 f906 	bl	8007f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2150      	movs	r1, #80	; 0x50
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f95f 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007d90:	e029      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	6859      	ldr	r1, [r3, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f000 f925 	bl	8007fee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2160      	movs	r1, #96	; 0x60
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f94f 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007db0:	e019      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6859      	ldr	r1, [r3, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f000 f8e6 	bl	8007f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2140      	movs	r1, #64	; 0x40
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f93f 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007dd0:	e009      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f000 f936 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007de2:	e000      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007de4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a40      	ldr	r2, [pc, #256]	; (8007f64 <TIM_Base_SetConfig+0x114>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d013      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6e:	d00f      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a3d      	ldr	r2, [pc, #244]	; (8007f68 <TIM_Base_SetConfig+0x118>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00b      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a3c      	ldr	r2, [pc, #240]	; (8007f6c <TIM_Base_SetConfig+0x11c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d007      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a3b      	ldr	r2, [pc, #236]	; (8007f70 <TIM_Base_SetConfig+0x120>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d003      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a3a      	ldr	r2, [pc, #232]	; (8007f74 <TIM_Base_SetConfig+0x124>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d108      	bne.n	8007ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a2f      	ldr	r2, [pc, #188]	; (8007f64 <TIM_Base_SetConfig+0x114>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d02b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb0:	d027      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2c      	ldr	r2, [pc, #176]	; (8007f68 <TIM_Base_SetConfig+0x118>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d023      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2b      	ldr	r2, [pc, #172]	; (8007f6c <TIM_Base_SetConfig+0x11c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d01f      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a2a      	ldr	r2, [pc, #168]	; (8007f70 <TIM_Base_SetConfig+0x120>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a29      	ldr	r2, [pc, #164]	; (8007f74 <TIM_Base_SetConfig+0x124>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d017      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a28      	ldr	r2, [pc, #160]	; (8007f78 <TIM_Base_SetConfig+0x128>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a27      	ldr	r2, [pc, #156]	; (8007f7c <TIM_Base_SetConfig+0x12c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00f      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a26      	ldr	r2, [pc, #152]	; (8007f80 <TIM_Base_SetConfig+0x130>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a25      	ldr	r2, [pc, #148]	; (8007f84 <TIM_Base_SetConfig+0x134>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d007      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a24      	ldr	r2, [pc, #144]	; (8007f88 <TIM_Base_SetConfig+0x138>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d003      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a23      	ldr	r2, [pc, #140]	; (8007f8c <TIM_Base_SetConfig+0x13c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a0a      	ldr	r2, [pc, #40]	; (8007f64 <TIM_Base_SetConfig+0x114>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_Base_SetConfig+0xf8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <TIM_Base_SetConfig+0x124>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d103      	bne.n	8007f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	615a      	str	r2, [r3, #20]
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00
 8007f74:	40010400 	.word	0x40010400
 8007f78:	40014000 	.word	0x40014000
 8007f7c:	40014400 	.word	0x40014400
 8007f80:	40014800 	.word	0x40014800
 8007f84:	40001800 	.word	0x40001800
 8007f88:	40001c00 	.word	0x40001c00
 8007f8c:	40002000 	.word	0x40002000

08007f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f023 0201 	bic.w	r2, r3, #1
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f023 030a 	bic.w	r3, r3, #10
 8007fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b087      	sub	sp, #28
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f023 0210 	bic.w	r2, r3, #16
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	031b      	lsls	r3, r3, #12
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800802a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	621a      	str	r2, [r3, #32]
}
 8008042:	bf00      	nop
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	f043 0307 	orr.w	r3, r3, #7
 8008070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	609a      	str	r2, [r3, #8]
}
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800809e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	021a      	lsls	r2, r3, #8
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	609a      	str	r2, [r3, #8]
}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080d8:	2302      	movs	r3, #2
 80080da:	e05a      	b.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d022      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008128:	d01d      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1d      	ldr	r2, [pc, #116]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d018      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1b      	ldr	r2, [pc, #108]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1a      	ldr	r2, [pc, #104]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00e      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a18      	ldr	r2, [pc, #96]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d009      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a17      	ldr	r2, [pc, #92]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d10c      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800816c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	4313      	orrs	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40010000 	.word	0x40010000
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40000c00 	.word	0x40000c00
 80081b0:	40010400 	.word	0x40010400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40001800 	.word	0x40001800

080081bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e03f      	b.n	8008276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7f9 fc7a 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2224      	movs	r2, #36	; 0x24
 8008214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f829 	bl	8008280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800823c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695a      	ldr	r2, [r3, #20]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800824c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800825c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2220      	movs	r2, #32
 8008270:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	431a      	orrs	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80082c2:	f023 030c 	bic.w	r3, r3, #12
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6812      	ldr	r2, [r2, #0]
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	430b      	orrs	r3, r1
 80082ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ee:	f040 818b 	bne.w	8008608 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4ac1      	ldr	r2, [pc, #772]	; (80085fc <UART_SetConfig+0x37c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d005      	beq.n	8008308 <UART_SetConfig+0x88>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4abf      	ldr	r2, [pc, #764]	; (8008600 <UART_SetConfig+0x380>)
 8008302:	4293      	cmp	r3, r2
 8008304:	f040 80bd 	bne.w	8008482 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008308:	f7fe fb5e 	bl	80069c8 <HAL_RCC_GetPCLK2Freq>
 800830c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	461d      	mov	r5, r3
 8008312:	f04f 0600 	mov.w	r6, #0
 8008316:	46a8      	mov	r8, r5
 8008318:	46b1      	mov	r9, r6
 800831a:	eb18 0308 	adds.w	r3, r8, r8
 800831e:	eb49 0409 	adc.w	r4, r9, r9
 8008322:	4698      	mov	r8, r3
 8008324:	46a1      	mov	r9, r4
 8008326:	eb18 0805 	adds.w	r8, r8, r5
 800832a:	eb49 0906 	adc.w	r9, r9, r6
 800832e:	f04f 0100 	mov.w	r1, #0
 8008332:	f04f 0200 	mov.w	r2, #0
 8008336:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800833a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800833e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008342:	4688      	mov	r8, r1
 8008344:	4691      	mov	r9, r2
 8008346:	eb18 0005 	adds.w	r0, r8, r5
 800834a:	eb49 0106 	adc.w	r1, r9, r6
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	461d      	mov	r5, r3
 8008354:	f04f 0600 	mov.w	r6, #0
 8008358:	196b      	adds	r3, r5, r5
 800835a:	eb46 0406 	adc.w	r4, r6, r6
 800835e:	461a      	mov	r2, r3
 8008360:	4623      	mov	r3, r4
 8008362:	f7f7 ff45 	bl	80001f0 <__aeabi_uldivmod>
 8008366:	4603      	mov	r3, r0
 8008368:	460c      	mov	r4, r1
 800836a:	461a      	mov	r2, r3
 800836c:	4ba5      	ldr	r3, [pc, #660]	; (8008604 <UART_SetConfig+0x384>)
 800836e:	fba3 2302 	umull	r2, r3, r3, r2
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	461d      	mov	r5, r3
 800837c:	f04f 0600 	mov.w	r6, #0
 8008380:	46a9      	mov	r9, r5
 8008382:	46b2      	mov	sl, r6
 8008384:	eb19 0309 	adds.w	r3, r9, r9
 8008388:	eb4a 040a 	adc.w	r4, sl, sl
 800838c:	4699      	mov	r9, r3
 800838e:	46a2      	mov	sl, r4
 8008390:	eb19 0905 	adds.w	r9, r9, r5
 8008394:	eb4a 0a06 	adc.w	sl, sl, r6
 8008398:	f04f 0100 	mov.w	r1, #0
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083ac:	4689      	mov	r9, r1
 80083ae:	4692      	mov	sl, r2
 80083b0:	eb19 0005 	adds.w	r0, r9, r5
 80083b4:	eb4a 0106 	adc.w	r1, sl, r6
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	461d      	mov	r5, r3
 80083be:	f04f 0600 	mov.w	r6, #0
 80083c2:	196b      	adds	r3, r5, r5
 80083c4:	eb46 0406 	adc.w	r4, r6, r6
 80083c8:	461a      	mov	r2, r3
 80083ca:	4623      	mov	r3, r4
 80083cc:	f7f7 ff10 	bl	80001f0 <__aeabi_uldivmod>
 80083d0:	4603      	mov	r3, r0
 80083d2:	460c      	mov	r4, r1
 80083d4:	461a      	mov	r2, r3
 80083d6:	4b8b      	ldr	r3, [pc, #556]	; (8008604 <UART_SetConfig+0x384>)
 80083d8:	fba3 1302 	umull	r1, r3, r3, r2
 80083dc:	095b      	lsrs	r3, r3, #5
 80083de:	2164      	movs	r1, #100	; 0x64
 80083e0:	fb01 f303 	mul.w	r3, r1, r3
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	3332      	adds	r3, #50	; 0x32
 80083ea:	4a86      	ldr	r2, [pc, #536]	; (8008604 <UART_SetConfig+0x384>)
 80083ec:	fba2 2303 	umull	r2, r3, r2, r3
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083f8:	4498      	add	r8, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	461d      	mov	r5, r3
 80083fe:	f04f 0600 	mov.w	r6, #0
 8008402:	46a9      	mov	r9, r5
 8008404:	46b2      	mov	sl, r6
 8008406:	eb19 0309 	adds.w	r3, r9, r9
 800840a:	eb4a 040a 	adc.w	r4, sl, sl
 800840e:	4699      	mov	r9, r3
 8008410:	46a2      	mov	sl, r4
 8008412:	eb19 0905 	adds.w	r9, r9, r5
 8008416:	eb4a 0a06 	adc.w	sl, sl, r6
 800841a:	f04f 0100 	mov.w	r1, #0
 800841e:	f04f 0200 	mov.w	r2, #0
 8008422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800842a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800842e:	4689      	mov	r9, r1
 8008430:	4692      	mov	sl, r2
 8008432:	eb19 0005 	adds.w	r0, r9, r5
 8008436:	eb4a 0106 	adc.w	r1, sl, r6
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	461d      	mov	r5, r3
 8008440:	f04f 0600 	mov.w	r6, #0
 8008444:	196b      	adds	r3, r5, r5
 8008446:	eb46 0406 	adc.w	r4, r6, r6
 800844a:	461a      	mov	r2, r3
 800844c:	4623      	mov	r3, r4
 800844e:	f7f7 fecf 	bl	80001f0 <__aeabi_uldivmod>
 8008452:	4603      	mov	r3, r0
 8008454:	460c      	mov	r4, r1
 8008456:	461a      	mov	r2, r3
 8008458:	4b6a      	ldr	r3, [pc, #424]	; (8008604 <UART_SetConfig+0x384>)
 800845a:	fba3 1302 	umull	r1, r3, r3, r2
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	2164      	movs	r1, #100	; 0x64
 8008462:	fb01 f303 	mul.w	r3, r1, r3
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	3332      	adds	r3, #50	; 0x32
 800846c:	4a65      	ldr	r2, [pc, #404]	; (8008604 <UART_SetConfig+0x384>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	f003 0207 	and.w	r2, r3, #7
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4442      	add	r2, r8
 800847e:	609a      	str	r2, [r3, #8]
 8008480:	e26f      	b.n	8008962 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008482:	f7fe fa8d 	bl	80069a0 <HAL_RCC_GetPCLK1Freq>
 8008486:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	461d      	mov	r5, r3
 800848c:	f04f 0600 	mov.w	r6, #0
 8008490:	46a8      	mov	r8, r5
 8008492:	46b1      	mov	r9, r6
 8008494:	eb18 0308 	adds.w	r3, r8, r8
 8008498:	eb49 0409 	adc.w	r4, r9, r9
 800849c:	4698      	mov	r8, r3
 800849e:	46a1      	mov	r9, r4
 80084a0:	eb18 0805 	adds.w	r8, r8, r5
 80084a4:	eb49 0906 	adc.w	r9, r9, r6
 80084a8:	f04f 0100 	mov.w	r1, #0
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80084b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80084b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80084bc:	4688      	mov	r8, r1
 80084be:	4691      	mov	r9, r2
 80084c0:	eb18 0005 	adds.w	r0, r8, r5
 80084c4:	eb49 0106 	adc.w	r1, r9, r6
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	461d      	mov	r5, r3
 80084ce:	f04f 0600 	mov.w	r6, #0
 80084d2:	196b      	adds	r3, r5, r5
 80084d4:	eb46 0406 	adc.w	r4, r6, r6
 80084d8:	461a      	mov	r2, r3
 80084da:	4623      	mov	r3, r4
 80084dc:	f7f7 fe88 	bl	80001f0 <__aeabi_uldivmod>
 80084e0:	4603      	mov	r3, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	461a      	mov	r2, r3
 80084e6:	4b47      	ldr	r3, [pc, #284]	; (8008604 <UART_SetConfig+0x384>)
 80084e8:	fba3 2302 	umull	r2, r3, r3, r2
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	461d      	mov	r5, r3
 80084f6:	f04f 0600 	mov.w	r6, #0
 80084fa:	46a9      	mov	r9, r5
 80084fc:	46b2      	mov	sl, r6
 80084fe:	eb19 0309 	adds.w	r3, r9, r9
 8008502:	eb4a 040a 	adc.w	r4, sl, sl
 8008506:	4699      	mov	r9, r3
 8008508:	46a2      	mov	sl, r4
 800850a:	eb19 0905 	adds.w	r9, r9, r5
 800850e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008512:	f04f 0100 	mov.w	r1, #0
 8008516:	f04f 0200 	mov.w	r2, #0
 800851a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800851e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008526:	4689      	mov	r9, r1
 8008528:	4692      	mov	sl, r2
 800852a:	eb19 0005 	adds.w	r0, r9, r5
 800852e:	eb4a 0106 	adc.w	r1, sl, r6
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	461d      	mov	r5, r3
 8008538:	f04f 0600 	mov.w	r6, #0
 800853c:	196b      	adds	r3, r5, r5
 800853e:	eb46 0406 	adc.w	r4, r6, r6
 8008542:	461a      	mov	r2, r3
 8008544:	4623      	mov	r3, r4
 8008546:	f7f7 fe53 	bl	80001f0 <__aeabi_uldivmod>
 800854a:	4603      	mov	r3, r0
 800854c:	460c      	mov	r4, r1
 800854e:	461a      	mov	r2, r3
 8008550:	4b2c      	ldr	r3, [pc, #176]	; (8008604 <UART_SetConfig+0x384>)
 8008552:	fba3 1302 	umull	r1, r3, r3, r2
 8008556:	095b      	lsrs	r3, r3, #5
 8008558:	2164      	movs	r1, #100	; 0x64
 800855a:	fb01 f303 	mul.w	r3, r1, r3
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	3332      	adds	r3, #50	; 0x32
 8008564:	4a27      	ldr	r2, [pc, #156]	; (8008604 <UART_SetConfig+0x384>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	095b      	lsrs	r3, r3, #5
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008572:	4498      	add	r8, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	461d      	mov	r5, r3
 8008578:	f04f 0600 	mov.w	r6, #0
 800857c:	46a9      	mov	r9, r5
 800857e:	46b2      	mov	sl, r6
 8008580:	eb19 0309 	adds.w	r3, r9, r9
 8008584:	eb4a 040a 	adc.w	r4, sl, sl
 8008588:	4699      	mov	r9, r3
 800858a:	46a2      	mov	sl, r4
 800858c:	eb19 0905 	adds.w	r9, r9, r5
 8008590:	eb4a 0a06 	adc.w	sl, sl, r6
 8008594:	f04f 0100 	mov.w	r1, #0
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085a8:	4689      	mov	r9, r1
 80085aa:	4692      	mov	sl, r2
 80085ac:	eb19 0005 	adds.w	r0, r9, r5
 80085b0:	eb4a 0106 	adc.w	r1, sl, r6
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	461d      	mov	r5, r3
 80085ba:	f04f 0600 	mov.w	r6, #0
 80085be:	196b      	adds	r3, r5, r5
 80085c0:	eb46 0406 	adc.w	r4, r6, r6
 80085c4:	461a      	mov	r2, r3
 80085c6:	4623      	mov	r3, r4
 80085c8:	f7f7 fe12 	bl	80001f0 <__aeabi_uldivmod>
 80085cc:	4603      	mov	r3, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	461a      	mov	r2, r3
 80085d2:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <UART_SetConfig+0x384>)
 80085d4:	fba3 1302 	umull	r1, r3, r3, r2
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	2164      	movs	r1, #100	; 0x64
 80085dc:	fb01 f303 	mul.w	r3, r1, r3
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	3332      	adds	r3, #50	; 0x32
 80085e6:	4a07      	ldr	r2, [pc, #28]	; (8008604 <UART_SetConfig+0x384>)
 80085e8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ec:	095b      	lsrs	r3, r3, #5
 80085ee:	f003 0207 	and.w	r2, r3, #7
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4442      	add	r2, r8
 80085f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80085fa:	e1b2      	b.n	8008962 <UART_SetConfig+0x6e2>
 80085fc:	40011000 	.word	0x40011000
 8008600:	40011400 	.word	0x40011400
 8008604:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4ad7      	ldr	r2, [pc, #860]	; (800896c <UART_SetConfig+0x6ec>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d005      	beq.n	800861e <UART_SetConfig+0x39e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4ad6      	ldr	r2, [pc, #856]	; (8008970 <UART_SetConfig+0x6f0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	f040 80d1 	bne.w	80087c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800861e:	f7fe f9d3 	bl	80069c8 <HAL_RCC_GetPCLK2Freq>
 8008622:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	469a      	mov	sl, r3
 8008628:	f04f 0b00 	mov.w	fp, #0
 800862c:	46d0      	mov	r8, sl
 800862e:	46d9      	mov	r9, fp
 8008630:	eb18 0308 	adds.w	r3, r8, r8
 8008634:	eb49 0409 	adc.w	r4, r9, r9
 8008638:	4698      	mov	r8, r3
 800863a:	46a1      	mov	r9, r4
 800863c:	eb18 080a 	adds.w	r8, r8, sl
 8008640:	eb49 090b 	adc.w	r9, r9, fp
 8008644:	f04f 0100 	mov.w	r1, #0
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008650:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008654:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008658:	4688      	mov	r8, r1
 800865a:	4691      	mov	r9, r2
 800865c:	eb1a 0508 	adds.w	r5, sl, r8
 8008660:	eb4b 0609 	adc.w	r6, fp, r9
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	4619      	mov	r1, r3
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	f04f 0400 	mov.w	r4, #0
 8008676:	0094      	lsls	r4, r2, #2
 8008678:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800867c:	008b      	lsls	r3, r1, #2
 800867e:	461a      	mov	r2, r3
 8008680:	4623      	mov	r3, r4
 8008682:	4628      	mov	r0, r5
 8008684:	4631      	mov	r1, r6
 8008686:	f7f7 fdb3 	bl	80001f0 <__aeabi_uldivmod>
 800868a:	4603      	mov	r3, r0
 800868c:	460c      	mov	r4, r1
 800868e:	461a      	mov	r2, r3
 8008690:	4bb8      	ldr	r3, [pc, #736]	; (8008974 <UART_SetConfig+0x6f4>)
 8008692:	fba3 2302 	umull	r2, r3, r3, r2
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	469b      	mov	fp, r3
 80086a0:	f04f 0c00 	mov.w	ip, #0
 80086a4:	46d9      	mov	r9, fp
 80086a6:	46e2      	mov	sl, ip
 80086a8:	eb19 0309 	adds.w	r3, r9, r9
 80086ac:	eb4a 040a 	adc.w	r4, sl, sl
 80086b0:	4699      	mov	r9, r3
 80086b2:	46a2      	mov	sl, r4
 80086b4:	eb19 090b 	adds.w	r9, r9, fp
 80086b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086bc:	f04f 0100 	mov.w	r1, #0
 80086c0:	f04f 0200 	mov.w	r2, #0
 80086c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086d0:	4689      	mov	r9, r1
 80086d2:	4692      	mov	sl, r2
 80086d4:	eb1b 0509 	adds.w	r5, fp, r9
 80086d8:	eb4c 060a 	adc.w	r6, ip, sl
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4619      	mov	r1, r3
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	f04f 0400 	mov.w	r4, #0
 80086ee:	0094      	lsls	r4, r2, #2
 80086f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086f4:	008b      	lsls	r3, r1, #2
 80086f6:	461a      	mov	r2, r3
 80086f8:	4623      	mov	r3, r4
 80086fa:	4628      	mov	r0, r5
 80086fc:	4631      	mov	r1, r6
 80086fe:	f7f7 fd77 	bl	80001f0 <__aeabi_uldivmod>
 8008702:	4603      	mov	r3, r0
 8008704:	460c      	mov	r4, r1
 8008706:	461a      	mov	r2, r3
 8008708:	4b9a      	ldr	r3, [pc, #616]	; (8008974 <UART_SetConfig+0x6f4>)
 800870a:	fba3 1302 	umull	r1, r3, r3, r2
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	2164      	movs	r1, #100	; 0x64
 8008712:	fb01 f303 	mul.w	r3, r1, r3
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	3332      	adds	r3, #50	; 0x32
 800871c:	4a95      	ldr	r2, [pc, #596]	; (8008974 <UART_SetConfig+0x6f4>)
 800871e:	fba2 2303 	umull	r2, r3, r2, r3
 8008722:	095b      	lsrs	r3, r3, #5
 8008724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008728:	4498      	add	r8, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	469b      	mov	fp, r3
 800872e:	f04f 0c00 	mov.w	ip, #0
 8008732:	46d9      	mov	r9, fp
 8008734:	46e2      	mov	sl, ip
 8008736:	eb19 0309 	adds.w	r3, r9, r9
 800873a:	eb4a 040a 	adc.w	r4, sl, sl
 800873e:	4699      	mov	r9, r3
 8008740:	46a2      	mov	sl, r4
 8008742:	eb19 090b 	adds.w	r9, r9, fp
 8008746:	eb4a 0a0c 	adc.w	sl, sl, ip
 800874a:	f04f 0100 	mov.w	r1, #0
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008756:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800875a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800875e:	4689      	mov	r9, r1
 8008760:	4692      	mov	sl, r2
 8008762:	eb1b 0509 	adds.w	r5, fp, r9
 8008766:	eb4c 060a 	adc.w	r6, ip, sl
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	4619      	mov	r1, r3
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	f04f 0400 	mov.w	r4, #0
 800877c:	0094      	lsls	r4, r2, #2
 800877e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008782:	008b      	lsls	r3, r1, #2
 8008784:	461a      	mov	r2, r3
 8008786:	4623      	mov	r3, r4
 8008788:	4628      	mov	r0, r5
 800878a:	4631      	mov	r1, r6
 800878c:	f7f7 fd30 	bl	80001f0 <__aeabi_uldivmod>
 8008790:	4603      	mov	r3, r0
 8008792:	460c      	mov	r4, r1
 8008794:	461a      	mov	r2, r3
 8008796:	4b77      	ldr	r3, [pc, #476]	; (8008974 <UART_SetConfig+0x6f4>)
 8008798:	fba3 1302 	umull	r1, r3, r3, r2
 800879c:	095b      	lsrs	r3, r3, #5
 800879e:	2164      	movs	r1, #100	; 0x64
 80087a0:	fb01 f303 	mul.w	r3, r1, r3
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	3332      	adds	r3, #50	; 0x32
 80087aa:	4a72      	ldr	r2, [pc, #456]	; (8008974 <UART_SetConfig+0x6f4>)
 80087ac:	fba2 2303 	umull	r2, r3, r2, r3
 80087b0:	095b      	lsrs	r3, r3, #5
 80087b2:	f003 020f 	and.w	r2, r3, #15
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4442      	add	r2, r8
 80087bc:	609a      	str	r2, [r3, #8]
 80087be:	e0d0      	b.n	8008962 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80087c0:	f7fe f8ee 	bl	80069a0 <HAL_RCC_GetPCLK1Freq>
 80087c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	469a      	mov	sl, r3
 80087ca:	f04f 0b00 	mov.w	fp, #0
 80087ce:	46d0      	mov	r8, sl
 80087d0:	46d9      	mov	r9, fp
 80087d2:	eb18 0308 	adds.w	r3, r8, r8
 80087d6:	eb49 0409 	adc.w	r4, r9, r9
 80087da:	4698      	mov	r8, r3
 80087dc:	46a1      	mov	r9, r4
 80087de:	eb18 080a 	adds.w	r8, r8, sl
 80087e2:	eb49 090b 	adc.w	r9, r9, fp
 80087e6:	f04f 0100 	mov.w	r1, #0
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087fa:	4688      	mov	r8, r1
 80087fc:	4691      	mov	r9, r2
 80087fe:	eb1a 0508 	adds.w	r5, sl, r8
 8008802:	eb4b 0609 	adc.w	r6, fp, r9
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	4619      	mov	r1, r3
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	f04f 0300 	mov.w	r3, #0
 8008814:	f04f 0400 	mov.w	r4, #0
 8008818:	0094      	lsls	r4, r2, #2
 800881a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800881e:	008b      	lsls	r3, r1, #2
 8008820:	461a      	mov	r2, r3
 8008822:	4623      	mov	r3, r4
 8008824:	4628      	mov	r0, r5
 8008826:	4631      	mov	r1, r6
 8008828:	f7f7 fce2 	bl	80001f0 <__aeabi_uldivmod>
 800882c:	4603      	mov	r3, r0
 800882e:	460c      	mov	r4, r1
 8008830:	461a      	mov	r2, r3
 8008832:	4b50      	ldr	r3, [pc, #320]	; (8008974 <UART_SetConfig+0x6f4>)
 8008834:	fba3 2302 	umull	r2, r3, r3, r2
 8008838:	095b      	lsrs	r3, r3, #5
 800883a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	469b      	mov	fp, r3
 8008842:	f04f 0c00 	mov.w	ip, #0
 8008846:	46d9      	mov	r9, fp
 8008848:	46e2      	mov	sl, ip
 800884a:	eb19 0309 	adds.w	r3, r9, r9
 800884e:	eb4a 040a 	adc.w	r4, sl, sl
 8008852:	4699      	mov	r9, r3
 8008854:	46a2      	mov	sl, r4
 8008856:	eb19 090b 	adds.w	r9, r9, fp
 800885a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800885e:	f04f 0100 	mov.w	r1, #0
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800886a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800886e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008872:	4689      	mov	r9, r1
 8008874:	4692      	mov	sl, r2
 8008876:	eb1b 0509 	adds.w	r5, fp, r9
 800887a:	eb4c 060a 	adc.w	r6, ip, sl
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	4619      	mov	r1, r3
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	f04f 0400 	mov.w	r4, #0
 8008890:	0094      	lsls	r4, r2, #2
 8008892:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008896:	008b      	lsls	r3, r1, #2
 8008898:	461a      	mov	r2, r3
 800889a:	4623      	mov	r3, r4
 800889c:	4628      	mov	r0, r5
 800889e:	4631      	mov	r1, r6
 80088a0:	f7f7 fca6 	bl	80001f0 <__aeabi_uldivmod>
 80088a4:	4603      	mov	r3, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	461a      	mov	r2, r3
 80088aa:	4b32      	ldr	r3, [pc, #200]	; (8008974 <UART_SetConfig+0x6f4>)
 80088ac:	fba3 1302 	umull	r1, r3, r3, r2
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	2164      	movs	r1, #100	; 0x64
 80088b4:	fb01 f303 	mul.w	r3, r1, r3
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	3332      	adds	r3, #50	; 0x32
 80088be:	4a2d      	ldr	r2, [pc, #180]	; (8008974 <UART_SetConfig+0x6f4>)
 80088c0:	fba2 2303 	umull	r2, r3, r2, r3
 80088c4:	095b      	lsrs	r3, r3, #5
 80088c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ca:	4498      	add	r8, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	469b      	mov	fp, r3
 80088d0:	f04f 0c00 	mov.w	ip, #0
 80088d4:	46d9      	mov	r9, fp
 80088d6:	46e2      	mov	sl, ip
 80088d8:	eb19 0309 	adds.w	r3, r9, r9
 80088dc:	eb4a 040a 	adc.w	r4, sl, sl
 80088e0:	4699      	mov	r9, r3
 80088e2:	46a2      	mov	sl, r4
 80088e4:	eb19 090b 	adds.w	r9, r9, fp
 80088e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80088ec:	f04f 0100 	mov.w	r1, #0
 80088f0:	f04f 0200 	mov.w	r2, #0
 80088f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008900:	4689      	mov	r9, r1
 8008902:	4692      	mov	sl, r2
 8008904:	eb1b 0509 	adds.w	r5, fp, r9
 8008908:	eb4c 060a 	adc.w	r6, ip, sl
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	4619      	mov	r1, r3
 8008912:	f04f 0200 	mov.w	r2, #0
 8008916:	f04f 0300 	mov.w	r3, #0
 800891a:	f04f 0400 	mov.w	r4, #0
 800891e:	0094      	lsls	r4, r2, #2
 8008920:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008924:	008b      	lsls	r3, r1, #2
 8008926:	461a      	mov	r2, r3
 8008928:	4623      	mov	r3, r4
 800892a:	4628      	mov	r0, r5
 800892c:	4631      	mov	r1, r6
 800892e:	f7f7 fc5f 	bl	80001f0 <__aeabi_uldivmod>
 8008932:	4603      	mov	r3, r0
 8008934:	460c      	mov	r4, r1
 8008936:	461a      	mov	r2, r3
 8008938:	4b0e      	ldr	r3, [pc, #56]	; (8008974 <UART_SetConfig+0x6f4>)
 800893a:	fba3 1302 	umull	r1, r3, r3, r2
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	2164      	movs	r1, #100	; 0x64
 8008942:	fb01 f303 	mul.w	r3, r1, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	3332      	adds	r3, #50	; 0x32
 800894c:	4a09      	ldr	r2, [pc, #36]	; (8008974 <UART_SetConfig+0x6f4>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	f003 020f 	and.w	r2, r3, #15
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4442      	add	r2, r8
 800895e:	609a      	str	r2, [r3, #8]
}
 8008960:	e7ff      	b.n	8008962 <UART_SetConfig+0x6e2>
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	40011000 	.word	0x40011000
 8008970:	40011400 	.word	0x40011400
 8008974:	51eb851f 	.word	0x51eb851f

08008978 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d029      	beq.n	80089e6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800899e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089a2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089ac:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80089b2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80089b8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80089be:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80089c4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80089ca:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80089d0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80089d6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	e034      	b.n	8008a50 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089f2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80089fc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008a02:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008a2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008a30:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008a36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008a3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b087      	sub	sp, #28
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d02e      	beq.n	8008ad6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a84:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008a94:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008a9e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008aa8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ab2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008abc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	609a      	str	r2, [r3, #8]
 8008ad4:	e03b      	b.n	8008b4e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ae2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ae6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008af8:	4313      	orrs	r3, r2
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b0c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b1c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008b26:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008b30:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b78:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008b82:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008b94:	f7fa fa48 	bl	8003028 <HAL_GetTick>
 8008b98:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008b9a:	e010      	b.n	8008bbe <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba2:	d00c      	beq.n	8008bbe <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <FMC_SDRAM_SendCommand+0x5e>
 8008baa:	f7fa fa3d 	bl	8003028 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d201      	bcs.n	8008bbe <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e006      	b.n	8008bcc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f003 0320 	and.w	r3, r3, #32
 8008bc6:	2b20      	cmp	r3, #32
 8008bc8:	d0e8      	beq.n	8008b9c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	695a      	ldr	r2, [r3, #20]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	431a      	orrs	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b083      	sub	sp, #12
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f043 0201 	orr.w	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f023 0201 	bic.w	r2, r3, #1
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
	...

08008c40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	019b      	lsls	r3, r3, #6
 8008c52:	f043 0220 	orr.w	r2, r3, #32
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a09      	ldr	r2, [pc, #36]	; (8008c88 <USB_FlushTxFifo+0x48>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d901      	bls.n	8008c6c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e006      	b.n	8008c7a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	f003 0320 	and.w	r3, r3, #32
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	d0f0      	beq.n	8008c5a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	00030d40 	.word	0x00030d40

08008c8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2210      	movs	r2, #16
 8008c9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4a09      	ldr	r2, [pc, #36]	; (8008ccc <USB_FlushRxFifo+0x40>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d901      	bls.n	8008cb0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e006      	b.n	8008cbe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	f003 0310 	and.w	r3, r3, #16
 8008cb8:	2b10      	cmp	r3, #16
 8008cba:	d0f0      	beq.n	8008c9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	00030d40 	.word	0x00030d40

08008cd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b089      	sub	sp, #36	; 0x24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	3303      	adds	r3, #3
 8008cea:	089b      	lsrs	r3, r3, #2
 8008cec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61bb      	str	r3, [r7, #24]
 8008cf2:	e00b      	b.n	8008d0c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	3304      	adds	r3, #4
 8008d04:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	61bb      	str	r3, [r7, #24]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d3ef      	bcc.n	8008cf4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008d14:	69fb      	ldr	r3, [r7, #28]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3724      	adds	r7, #36	; 0x24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	4013      	ands	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	f003 0301 	and.w	r3, r3, #1
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d82:	f023 0303 	bic.w	r3, r3, #3
 8008d86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d107      	bne.n	8008db6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dac:	461a      	mov	r2, r3
 8008dae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008db2:	6053      	str	r3, [r2, #4]
 8008db4:	e009      	b.n	8008dca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d106      	bne.n	8008dca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f241 7370 	movw	r3, #6000	; 0x1770
 8008dc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	b29b      	uxth	r3, r3
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b087      	sub	sp, #28
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	0c9b      	lsrs	r3, r3, #18
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <USB_HC_Halt+0x3a>
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d16c      	bne.n	8008f0e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	0151      	lsls	r1, r2, #5
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	440a      	add	r2, r1
 8008e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e52:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d143      	bne.n	8008ee8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	0151      	lsls	r1, r2, #5
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	440a      	add	r2, r1
 8008e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	0151      	lsls	r1, r2, #5
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	440a      	add	r2, r1
 8008e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ebe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	617b      	str	r3, [r7, #20]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ecc:	d81d      	bhi.n	8008f0a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ee4:	d0ec      	beq.n	8008ec0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008ee6:	e080      	b.n	8008fea <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f06:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f08:	e06f      	b.n	8008fea <USB_HC_Halt+0x1f0>
          break;
 8008f0a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f0c:	e06d      	b.n	8008fea <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	0151      	lsls	r1, r2, #5
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	440a      	add	r2, r1
 8008f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f2c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d143      	bne.n	8008fc6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f5c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	0151      	lsls	r1, r2, #5
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	440a      	add	r2, r1
 8008f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f7c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f9c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008faa:	d81d      	bhi.n	8008fe8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc2:	d0ec      	beq.n	8008f9e <USB_HC_Halt+0x1a4>
 8008fc4:	e011      	b.n	8008fea <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	e000      	b.n	8008fea <USB_HC_Halt+0x1f0>
          break;
 8008fe8:	bf00      	nop
    }
  }

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff fe07 	bl	8008c1c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800900e:	2110      	movs	r1, #16
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fe15 	bl	8008c40 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff fe38 	bl	8008c8c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800901c:	2300      	movs	r3, #0
 800901e:	613b      	str	r3, [r7, #16]
 8009020:	e01f      	b.n	8009062 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009038:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009040:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009048:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4413      	add	r3, r2
 8009052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009056:	461a      	mov	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	3301      	adds	r3, #1
 8009060:	613b      	str	r3, [r7, #16]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b0f      	cmp	r3, #15
 8009066:	d9dc      	bls.n	8009022 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009068:	2300      	movs	r3, #0
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	e034      	b.n	80090d8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	4413      	add	r3, r2
 8009076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009084:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800908c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009094:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4413      	add	r3, r2
 800909e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a2:	461a      	mov	r2, r3
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	3301      	adds	r3, #1
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090b4:	d80c      	bhi.n	80090d0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090cc:	d0ec      	beq.n	80090a8 <USB_StopHost+0xb0>
 80090ce:	e000      	b.n	80090d2 <USB_StopHost+0xda>
        break;
 80090d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	3301      	adds	r3, #1
 80090d6:	613b      	str	r3, [r7, #16]
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2b0f      	cmp	r3, #15
 80090dc:	d9c7      	bls.n	800906e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090e4:	461a      	mov	r2, r3
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295
 80090f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff fd80 	bl	8008bfa <USB_EnableGlobalInt>

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f804 	bl	8009128 <USBH_HandleSof>
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b0b      	cmp	r3, #11
 8009138:	d10a      	bne.n	8009150 <USBH_HandleSof+0x28>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
  }
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800917c:	2200      	movs	r2, #0
 800917e:	4619      	mov	r1, r3
 8009180:	f000 f8ae 	bl	80092e0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009184:	bf00      	nop
}
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800919c:	bf00      	nop
}
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091dc:	2200      	movs	r2, #0
 80091de:	4619      	mov	r1, r3
 80091e0:	f000 f87e 	bl	80092e0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f900 	bl	800a414 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f830 	bl	8009280 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	795b      	ldrb	r3, [r3, #5]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f82a 	bl	8009280 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009240:	2200      	movs	r2, #0
 8009242:	4619      	mov	r1, r3
 8009244:	f000 f84c 	bl	80092e0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800926e:	2200      	movs	r2, #0
 8009270:	4619      	mov	r1, r3
 8009272:	f000 f835 	bl	80092e0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	2b0a      	cmp	r3, #10
 8009290:	d80d      	bhi.n	80092ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009292:	78fb      	ldrb	r3, [r7, #3]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	33e0      	adds	r3, #224	; 0xe0
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	33e0      	adds	r3, #224	; 0xe0
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	440b      	add	r3, r1
 80092ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c2:	f3ef 8305 	mrs	r3, IPSR
 80092c6:	607b      	str	r3, [r7, #4]
  return(result);
 80092c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bf14      	ite	ne
 80092ce:	2301      	movne	r3, #1
 80092d0:	2300      	moveq	r3, #0
 80092d2:	b2db      	uxtb	r3, r3
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <osMessagePut+0x1e>
    ticks = 1;
 80092fa:	2301      	movs	r3, #1
 80092fc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80092fe:	f7ff ffdd 	bl	80092bc <inHandlerMode>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d018      	beq.n	800933a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009308:	f107 0210 	add.w	r2, r7, #16
 800930c:	f107 0108 	add.w	r1, r7, #8
 8009310:	2300      	movs	r3, #0
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f9a6 	bl	8009664 <xQueueGenericSendFromISR>
 8009318:	4603      	mov	r3, r0
 800931a:	2b01      	cmp	r3, #1
 800931c:	d001      	beq.n	8009322 <osMessagePut+0x42>
      return osErrorOS;
 800931e:	23ff      	movs	r3, #255	; 0xff
 8009320:	e018      	b.n	8009354 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d014      	beq.n	8009352 <osMessagePut+0x72>
 8009328:	4b0c      	ldr	r3, [pc, #48]	; (800935c <osMessagePut+0x7c>)
 800932a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	e00b      	b.n	8009352 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800933a:	f107 0108 	add.w	r1, r7, #8
 800933e:	2300      	movs	r3, #0
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 f894 	bl	8009470 <xQueueGenericSend>
 8009348:	4603      	mov	r3, r0
 800934a:	2b01      	cmp	r3, #1
 800934c:	d001      	beq.n	8009352 <osMessagePut+0x72>
      return osErrorOS;
 800934e:	23ff      	movs	r3, #255	; 0xff
 8009350:	e000      	b.n	8009354 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	601a      	str	r2, [r3, #0]
}
 800939c:	bf00      	nop
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093be:	d103      	bne.n	80093c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	e00c      	b.n	80093e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3308      	adds	r3, #8
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	e002      	b.n	80093d6 <vListInsert+0x2e>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d2f6      	bcs.n	80093d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	601a      	str	r2, [r3, #0]
}
 800940e:	bf00      	nop
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800941a:	b480      	push	{r7}
 800941c:	b085      	sub	sp, #20
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6892      	ldr	r2, [r2, #8]
 8009430:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6852      	ldr	r2, [r2, #4]
 800943a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d103      	bne.n	800944e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	1e5a      	subs	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
	...

08009470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08e      	sub	sp, #56	; 0x38
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800947e:	2300      	movs	r3, #0
 8009480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2b00      	cmp	r3, #0
 800948a:	d109      	bne.n	80094a0 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	62bb      	str	r3, [r7, #40]	; 0x28
 800949e:	e7fe      	b.n	800949e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d103      	bne.n	80094ae <xQueueGenericSend+0x3e>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <xQueueGenericSend+0x42>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e000      	b.n	80094b4 <xQueueGenericSend+0x44>
 80094b2:	2300      	movs	r3, #0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d109      	bne.n	80094cc <xQueueGenericSend+0x5c>
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ca:	e7fe      	b.n	80094ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d103      	bne.n	80094da <xQueueGenericSend+0x6a>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <xQueueGenericSend+0x6e>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <xQueueGenericSend+0x70>
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <xQueueGenericSend+0x88>
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	623b      	str	r3, [r7, #32]
 80094f6:	e7fe      	b.n	80094f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094f8:	f000 fd26 	bl	8009f48 <xTaskGetSchedulerState>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d102      	bne.n	8009508 <xQueueGenericSend+0x98>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <xQueueGenericSend+0x9c>
 8009508:	2301      	movs	r3, #1
 800950a:	e000      	b.n	800950e <xQueueGenericSend+0x9e>
 800950c:	2300      	movs	r3, #0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d109      	bne.n	8009526 <xQueueGenericSend+0xb6>
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	61fb      	str	r3, [r7, #28]
 8009524:	e7fe      	b.n	8009524 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009526:	f000 fe2f 	bl	800a188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	429a      	cmp	r2, r3
 8009534:	d302      	bcc.n	800953c <xQueueGenericSend+0xcc>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d129      	bne.n	8009590 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009542:	f000 f923 	bl	800978c <prvCopyDataToQueue>
 8009546:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	d010      	beq.n	8009572 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	3324      	adds	r3, #36	; 0x24
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fbf3 	bl	8009d40 <xTaskRemoveFromEventList>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d013      	beq.n	8009588 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009560:	4b3f      	ldr	r3, [pc, #252]	; (8009660 <xQueueGenericSend+0x1f0>)
 8009562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	e00a      	b.n	8009588 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d007      	beq.n	8009588 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009578:	4b39      	ldr	r3, [pc, #228]	; (8009660 <xQueueGenericSend+0x1f0>)
 800957a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009588:	f000 fe2c 	bl	800a1e4 <vPortExitCritical>
				return pdPASS;
 800958c:	2301      	movs	r3, #1
 800958e:	e063      	b.n	8009658 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d103      	bne.n	800959e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009596:	f000 fe25 	bl	800a1e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800959a:	2300      	movs	r3, #0
 800959c:	e05c      	b.n	8009658 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800959e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095a4:	f107 0314 	add.w	r3, r7, #20
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 fc2b 	bl	8009e04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095ae:	2301      	movs	r3, #1
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095b2:	f000 fe17 	bl	800a1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095b6:	f000 f9bd 	bl	8009934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ba:	f000 fde5 	bl	800a188 <vPortEnterCritical>
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095c4:	b25b      	sxtb	r3, r3
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ca:	d103      	bne.n	80095d4 <xQueueGenericSend+0x164>
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095da:	b25b      	sxtb	r3, r3
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e0:	d103      	bne.n	80095ea <xQueueGenericSend+0x17a>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095ea:	f000 fdfb 	bl	800a1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095ee:	1d3a      	adds	r2, r7, #4
 80095f0:	f107 0314 	add.w	r3, r7, #20
 80095f4:	4611      	mov	r1, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fc1a 	bl	8009e30 <xTaskCheckForTimeOut>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d124      	bne.n	800964c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009604:	f000 f97e 	bl	8009904 <prvIsQueueFull>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d018      	beq.n	8009640 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	3310      	adds	r3, #16
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fb6e 	bl	8009cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800961c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800961e:	f000 f91f 	bl	8009860 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009622:	f000 f995 	bl	8009950 <xTaskResumeAll>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	f47f af7c 	bne.w	8009526 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800962e:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <xQueueGenericSend+0x1f0>)
 8009630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	e772      	b.n	8009526 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009642:	f000 f90d 	bl	8009860 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009646:	f000 f983 	bl	8009950 <xTaskResumeAll>
 800964a:	e76c      	b.n	8009526 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800964c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800964e:	f000 f907 	bl	8009860 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009652:	f000 f97d 	bl	8009950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009658:	4618      	mov	r0, r3
 800965a:	3738      	adds	r7, #56	; 0x38
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08e      	sub	sp, #56	; 0x38
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	2b00      	cmp	r3, #0
 800967a:	d109      	bne.n	8009690 <xQueueGenericSendFromISR+0x2c>
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
 800968e:	e7fe      	b.n	800968e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d103      	bne.n	800969e <xQueueGenericSendFromISR+0x3a>
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <xQueueGenericSendFromISR+0x3e>
 800969e:	2301      	movs	r3, #1
 80096a0:	e000      	b.n	80096a4 <xQueueGenericSendFromISR+0x40>
 80096a2:	2300      	movs	r3, #0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d109      	bne.n	80096bc <xQueueGenericSendFromISR+0x58>
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	623b      	str	r3, [r7, #32]
 80096ba:	e7fe      	b.n	80096ba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d103      	bne.n	80096ca <xQueueGenericSendFromISR+0x66>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d101      	bne.n	80096ce <xQueueGenericSendFromISR+0x6a>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <xQueueGenericSendFromISR+0x6c>
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d109      	bne.n	80096e8 <xQueueGenericSendFromISR+0x84>
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	61fb      	str	r3, [r7, #28]
 80096e6:	e7fe      	b.n	80096e6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096e8:	f000 fdfe 	bl	800a2e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096ec:	f3ef 8211 	mrs	r2, BASEPRI
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	61ba      	str	r2, [r7, #24]
 8009702:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009704:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009706:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009710:	429a      	cmp	r2, r3
 8009712:	d302      	bcc.n	800971a <xQueueGenericSendFromISR+0xb6>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d12c      	bne.n	8009774 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800972a:	f000 f82f 	bl	800978c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800972e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	d112      	bne.n	800975e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	d016      	beq.n	800976e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	3324      	adds	r3, #36	; 0x24
 8009744:	4618      	mov	r0, r3
 8009746:	f000 fafb 	bl	8009d40 <xTaskRemoveFromEventList>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00e      	beq.n	800976e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00b      	beq.n	800976e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	e007      	b.n	800976e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800975e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009762:	3301      	adds	r3, #1
 8009764:	b2db      	uxtb	r3, r3
 8009766:	b25a      	sxtb	r2, r3
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800976e:	2301      	movs	r3, #1
 8009770:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009772:	e001      	b.n	8009778 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009774:	2300      	movs	r3, #0
 8009776:	637b      	str	r3, [r7, #52]	; 0x34
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009784:	4618      	mov	r0, r3
 8009786:	3738      	adds	r7, #56	; 0x38
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10d      	bne.n	80097c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d14d      	bne.n	800984e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fbe4 	bl	8009f84 <xTaskPriorityDisinherit>
 80097bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	609a      	str	r2, [r3, #8]
 80097c4:	e043      	b.n	800984e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d119      	bne.n	8009800 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6858      	ldr	r0, [r3, #4]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	461a      	mov	r2, r3
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	f000 fe96 	bl	800a508 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	441a      	add	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d32b      	bcc.n	800984e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	605a      	str	r2, [r3, #4]
 80097fe:	e026      	b.n	800984e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	68d8      	ldr	r0, [r3, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	461a      	mov	r2, r3
 800980a:	68b9      	ldr	r1, [r7, #8]
 800980c:	f000 fe7c 	bl	800a508 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68da      	ldr	r2, [r3, #12]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009818:	425b      	negs	r3, r3
 800981a:	441a      	add	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d207      	bcs.n	800983c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009834:	425b      	negs	r3, r3
 8009836:	441a      	add	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b02      	cmp	r3, #2
 8009840:	d105      	bne.n	800984e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	3b01      	subs	r3, #1
 800984c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009856:	697b      	ldr	r3, [r7, #20]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009868:	f000 fc8e 	bl	800a188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009872:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009874:	e011      	b.n	800989a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987a:	2b00      	cmp	r3, #0
 800987c:	d012      	beq.n	80098a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3324      	adds	r3, #36	; 0x24
 8009882:	4618      	mov	r0, r3
 8009884:	f000 fa5c 	bl	8009d40 <xTaskRemoveFromEventList>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800988e:	f000 fb2f 	bl	8009ef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	3b01      	subs	r3, #1
 8009896:	b2db      	uxtb	r3, r3
 8009898:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800989a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dce9      	bgt.n	8009876 <prvUnlockQueue+0x16>
 80098a2:	e000      	b.n	80098a6 <prvUnlockQueue+0x46>
					break;
 80098a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	22ff      	movs	r2, #255	; 0xff
 80098aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098ae:	f000 fc99 	bl	800a1e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098b2:	f000 fc69 	bl	800a188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098be:	e011      	b.n	80098e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d012      	beq.n	80098ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3310      	adds	r3, #16
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fa37 	bl	8009d40 <xTaskRemoveFromEventList>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d001      	beq.n	80098dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098d8:	f000 fb0a 	bl	8009ef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	3b01      	subs	r3, #1
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dce9      	bgt.n	80098c0 <prvUnlockQueue+0x60>
 80098ec:	e000      	b.n	80098f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	22ff      	movs	r2, #255	; 0xff
 80098f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098f8:	f000 fc74 	bl	800a1e4 <vPortExitCritical>
}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800990c:	f000 fc3c 	bl	800a188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009918:	429a      	cmp	r2, r3
 800991a:	d102      	bne.n	8009922 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800991c:	2301      	movs	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	e001      	b.n	8009926 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009926:	f000 fc5d 	bl	800a1e4 <vPortExitCritical>

	return xReturn;
 800992a:	68fb      	ldr	r3, [r7, #12]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009938:	4b04      	ldr	r3, [pc, #16]	; (800994c <vTaskSuspendAll+0x18>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3301      	adds	r3, #1
 800993e:	4a03      	ldr	r2, [pc, #12]	; (800994c <vTaskSuspendAll+0x18>)
 8009940:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009942:	bf00      	nop
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	20000368 	.word	0x20000368

08009950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800995a:	2300      	movs	r3, #0
 800995c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800995e:	4b41      	ldr	r3, [pc, #260]	; (8009a64 <xTaskResumeAll+0x114>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <xTaskResumeAll+0x2a>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	e7fe      	b.n	8009978 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800997a:	f000 fc05 	bl	800a188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800997e:	4b39      	ldr	r3, [pc, #228]	; (8009a64 <xTaskResumeAll+0x114>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3b01      	subs	r3, #1
 8009984:	4a37      	ldr	r2, [pc, #220]	; (8009a64 <xTaskResumeAll+0x114>)
 8009986:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009988:	4b36      	ldr	r3, [pc, #216]	; (8009a64 <xTaskResumeAll+0x114>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d161      	bne.n	8009a54 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009990:	4b35      	ldr	r3, [pc, #212]	; (8009a68 <xTaskResumeAll+0x118>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d05d      	beq.n	8009a54 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009998:	e02e      	b.n	80099f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999a:	4b34      	ldr	r3, [pc, #208]	; (8009a6c <xTaskResumeAll+0x11c>)
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3318      	adds	r3, #24
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fd37 	bl	800941a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff fd32 	bl	800941a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	2201      	movs	r2, #1
 80099bc:	409a      	lsls	r2, r3
 80099be:	4b2c      	ldr	r3, [pc, #176]	; (8009a70 <xTaskResumeAll+0x120>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	4a2a      	ldr	r2, [pc, #168]	; (8009a70 <xTaskResumeAll+0x120>)
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099cc:	4613      	mov	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4a27      	ldr	r2, [pc, #156]	; (8009a74 <xTaskResumeAll+0x124>)
 80099d6:	441a      	add	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	4610      	mov	r0, r2
 80099e0:	f7ff fcbe 	bl	8009360 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e8:	4b23      	ldr	r3, [pc, #140]	; (8009a78 <xTaskResumeAll+0x128>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d302      	bcc.n	80099f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80099f2:	4b22      	ldr	r3, [pc, #136]	; (8009a7c <xTaskResumeAll+0x12c>)
 80099f4:	2201      	movs	r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099f8:	4b1c      	ldr	r3, [pc, #112]	; (8009a6c <xTaskResumeAll+0x11c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1cc      	bne.n	800999a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a06:	f000 fa7f 	bl	8009f08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a0a:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <xTaskResumeAll+0x130>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d010      	beq.n	8009a38 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a16:	f000 f837 	bl	8009a88 <xTaskIncrementTick>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009a20:	4b16      	ldr	r3, [pc, #88]	; (8009a7c <xTaskResumeAll+0x12c>)
 8009a22:	2201      	movs	r2, #1
 8009a24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1f1      	bne.n	8009a16 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009a32:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <xTaskResumeAll+0x130>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a38:	4b10      	ldr	r3, [pc, #64]	; (8009a7c <xTaskResumeAll+0x12c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d009      	beq.n	8009a54 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a44:	4b0f      	ldr	r3, [pc, #60]	; (8009a84 <xTaskResumeAll+0x134>)
 8009a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a54:	f000 fbc6 	bl	800a1e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009a58:	68bb      	ldr	r3, [r7, #8]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000368 	.word	0x20000368
 8009a68:	20000348 	.word	0x20000348
 8009a6c:	20000320 	.word	0x20000320
 8009a70:	20000350 	.word	0x20000350
 8009a74:	2000028c 	.word	0x2000028c
 8009a78:	20000288 	.word	0x20000288
 8009a7c:	2000035c 	.word	0x2000035c
 8009a80:	20000358 	.word	0x20000358
 8009a84:	e000ed04 	.word	0xe000ed04

08009a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a92:	4b4e      	ldr	r3, [pc, #312]	; (8009bcc <xTaskIncrementTick+0x144>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f040 8087 	bne.w	8009baa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a9c:	4b4c      	ldr	r3, [pc, #304]	; (8009bd0 <xTaskIncrementTick+0x148>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009aa4:	4a4a      	ldr	r2, [pc, #296]	; (8009bd0 <xTaskIncrementTick+0x148>)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d11f      	bne.n	8009af0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ab0:	4b48      	ldr	r3, [pc, #288]	; (8009bd4 <xTaskIncrementTick+0x14c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <xTaskIncrementTick+0x46>
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	e7fe      	b.n	8009acc <xTaskIncrementTick+0x44>
 8009ace:	4b41      	ldr	r3, [pc, #260]	; (8009bd4 <xTaskIncrementTick+0x14c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	4b40      	ldr	r3, [pc, #256]	; (8009bd8 <xTaskIncrementTick+0x150>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a3e      	ldr	r2, [pc, #248]	; (8009bd4 <xTaskIncrementTick+0x14c>)
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	4a3e      	ldr	r2, [pc, #248]	; (8009bd8 <xTaskIncrementTick+0x150>)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	4b3e      	ldr	r3, [pc, #248]	; (8009bdc <xTaskIncrementTick+0x154>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	4a3c      	ldr	r2, [pc, #240]	; (8009bdc <xTaskIncrementTick+0x154>)
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	f000 fa0c 	bl	8009f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009af0:	4b3b      	ldr	r3, [pc, #236]	; (8009be0 <xTaskIncrementTick+0x158>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d348      	bcc.n	8009b8c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009afa:	4b36      	ldr	r3, [pc, #216]	; (8009bd4 <xTaskIncrementTick+0x14c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d104      	bne.n	8009b0e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b04:	4b36      	ldr	r3, [pc, #216]	; (8009be0 <xTaskIncrementTick+0x158>)
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	601a      	str	r2, [r3, #0]
					break;
 8009b0c:	e03e      	b.n	8009b8c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0e:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <xTaskIncrementTick+0x14c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d203      	bcs.n	8009b2e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b26:	4a2e      	ldr	r2, [pc, #184]	; (8009be0 <xTaskIncrementTick+0x158>)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b2c:	e02e      	b.n	8009b8c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7ff fc71 	bl	800941a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	3318      	adds	r3, #24
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff fc68 	bl	800941a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	2201      	movs	r2, #1
 8009b50:	409a      	lsls	r2, r3
 8009b52:	4b24      	ldr	r3, [pc, #144]	; (8009be4 <xTaskIncrementTick+0x15c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	4a22      	ldr	r2, [pc, #136]	; (8009be4 <xTaskIncrementTick+0x15c>)
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4a1f      	ldr	r2, [pc, #124]	; (8009be8 <xTaskIncrementTick+0x160>)
 8009b6a:	441a      	add	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	4619      	mov	r1, r3
 8009b72:	4610      	mov	r0, r2
 8009b74:	f7ff fbf4 	bl	8009360 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <xTaskIncrementTick+0x164>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d3b9      	bcc.n	8009afa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009b86:	2301      	movs	r3, #1
 8009b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b8a:	e7b6      	b.n	8009afa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b8c:	4b17      	ldr	r3, [pc, #92]	; (8009bec <xTaskIncrementTick+0x164>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b92:	4915      	ldr	r1, [pc, #84]	; (8009be8 <xTaskIncrementTick+0x160>)
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d907      	bls.n	8009bb4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	617b      	str	r3, [r7, #20]
 8009ba8:	e004      	b.n	8009bb4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009baa:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <xTaskIncrementTick+0x168>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	4a0f      	ldr	r2, [pc, #60]	; (8009bf0 <xTaskIncrementTick+0x168>)
 8009bb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009bb4:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <xTaskIncrementTick+0x16c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009bc0:	697b      	ldr	r3, [r7, #20]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20000368 	.word	0x20000368
 8009bd0:	2000034c 	.word	0x2000034c
 8009bd4:	20000318 	.word	0x20000318
 8009bd8:	2000031c 	.word	0x2000031c
 8009bdc:	20000360 	.word	0x20000360
 8009be0:	20000364 	.word	0x20000364
 8009be4:	20000350 	.word	0x20000350
 8009be8:	2000028c 	.word	0x2000028c
 8009bec:	20000288 	.word	0x20000288
 8009bf0:	20000358 	.word	0x20000358
 8009bf4:	2000035c 	.word	0x2000035c

08009bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bfe:	4b39      	ldr	r3, [pc, #228]	; (8009ce4 <vTaskSwitchContext+0xec>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c06:	4b38      	ldr	r3, [pc, #224]	; (8009ce8 <vTaskSwitchContext+0xf0>)
 8009c08:	2201      	movs	r2, #1
 8009c0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c0c:	e065      	b.n	8009cda <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009c0e:	4b36      	ldr	r3, [pc, #216]	; (8009ce8 <vTaskSwitchContext+0xf0>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009c14:	4b35      	ldr	r3, [pc, #212]	; (8009cec <vTaskSwitchContext+0xf4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	61fb      	str	r3, [r7, #28]
 8009c1c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d111      	bne.n	8009c50 <vTaskSwitchContext+0x58>
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d10b      	bne.n	8009c50 <vTaskSwitchContext+0x58>
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d105      	bne.n	8009c50 <vTaskSwitchContext+0x58>
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	330c      	adds	r3, #12
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d008      	beq.n	8009c62 <vTaskSwitchContext+0x6a>
 8009c50:	4b26      	ldr	r3, [pc, #152]	; (8009cec <vTaskSwitchContext+0xf4>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	4b25      	ldr	r3, [pc, #148]	; (8009cec <vTaskSwitchContext+0xf4>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3334      	adds	r3, #52	; 0x34
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f7f6 fecf 	bl	8000a00 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c62:	4b23      	ldr	r3, [pc, #140]	; (8009cf0 <vTaskSwitchContext+0xf8>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	fab3 f383 	clz	r3, r3
 8009c6e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c70:	7afb      	ldrb	r3, [r7, #11]
 8009c72:	f1c3 031f 	rsb	r3, r3, #31
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	491e      	ldr	r1, [pc, #120]	; (8009cf4 <vTaskSwitchContext+0xfc>)
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	440b      	add	r3, r1
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d109      	bne.n	8009ca0 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	607b      	str	r3, [r7, #4]
 8009c9e:	e7fe      	b.n	8009c9e <vTaskSwitchContext+0xa6>
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4a12      	ldr	r2, [pc, #72]	; (8009cf4 <vTaskSwitchContext+0xfc>)
 8009cac:	4413      	add	r3, r2
 8009cae:	613b      	str	r3, [r7, #16]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	605a      	str	r2, [r3, #4]
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	3308      	adds	r3, #8
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d104      	bne.n	8009cd0 <vTaskSwitchContext+0xd8>
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	605a      	str	r2, [r3, #4]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	4a05      	ldr	r2, [pc, #20]	; (8009cec <vTaskSwitchContext+0xf4>)
 8009cd8:	6013      	str	r3, [r2, #0]
}
 8009cda:	bf00      	nop
 8009cdc:	3720      	adds	r7, #32
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000368 	.word	0x20000368
 8009ce8:	2000035c 	.word	0x2000035c
 8009cec:	20000288 	.word	0x20000288
 8009cf0:	20000350 	.word	0x20000350
 8009cf4:	2000028c 	.word	0x2000028c

08009cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <vTaskPlaceOnEventList+0x24>
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	60fb      	str	r3, [r7, #12]
 8009d1a:	e7fe      	b.n	8009d1a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d1c:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <vTaskPlaceOnEventList+0x44>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	3318      	adds	r3, #24
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fb3f 	bl	80093a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	6838      	ldr	r0, [r7, #0]
 8009d2e:	f000 f9ad 	bl	800a08c <prvAddCurrentTaskToDelayedList>
}
 8009d32:	bf00      	nop
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20000288 	.word	0x20000288

08009d40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d109      	bne.n	8009d6a <xTaskRemoveFromEventList+0x2a>
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	e7fe      	b.n	8009d68 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	3318      	adds	r3, #24
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff fb53 	bl	800941a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d74:	4b1d      	ldr	r3, [pc, #116]	; (8009dec <xTaskRemoveFromEventList+0xac>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d11c      	bne.n	8009db6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fb4a 	bl	800941a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	409a      	lsls	r2, r3
 8009d8e:	4b18      	ldr	r3, [pc, #96]	; (8009df0 <xTaskRemoveFromEventList+0xb0>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	4a16      	ldr	r2, [pc, #88]	; (8009df0 <xTaskRemoveFromEventList+0xb0>)
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4a13      	ldr	r2, [pc, #76]	; (8009df4 <xTaskRemoveFromEventList+0xb4>)
 8009da6:	441a      	add	r2, r3
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	3304      	adds	r3, #4
 8009dac:	4619      	mov	r1, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	f7ff fad6 	bl	8009360 <vListInsertEnd>
 8009db4:	e005      	b.n	8009dc2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	3318      	adds	r3, #24
 8009dba:	4619      	mov	r1, r3
 8009dbc:	480e      	ldr	r0, [pc, #56]	; (8009df8 <xTaskRemoveFromEventList+0xb8>)
 8009dbe:	f7ff facf 	bl	8009360 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc6:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <xTaskRemoveFromEventList+0xbc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d905      	bls.n	8009ddc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <xTaskRemoveFromEventList+0xc0>)
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	e001      	b.n	8009de0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009de0:	697b      	ldr	r3, [r7, #20]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20000368 	.word	0x20000368
 8009df0:	20000350 	.word	0x20000350
 8009df4:	2000028c 	.word	0x2000028c
 8009df8:	20000320 	.word	0x20000320
 8009dfc:	20000288 	.word	0x20000288
 8009e00:	2000035c 	.word	0x2000035c

08009e04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e0c:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <vTaskInternalSetTimeOutState+0x24>)
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e14:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <vTaskInternalSetTimeOutState+0x28>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	605a      	str	r2, [r3, #4]
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	20000360 	.word	0x20000360
 8009e2c:	2000034c 	.word	0x2000034c

08009e30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d109      	bne.n	8009e54 <xTaskCheckForTimeOut+0x24>
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	e7fe      	b.n	8009e52 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d109      	bne.n	8009e6e <xTaskCheckForTimeOut+0x3e>
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	e7fe      	b.n	8009e6c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009e6e:	f000 f98b 	bl	800a188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e72:	4b1d      	ldr	r3, [pc, #116]	; (8009ee8 <xTaskCheckForTimeOut+0xb8>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8a:	d102      	bne.n	8009e92 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	61fb      	str	r3, [r7, #28]
 8009e90:	e023      	b.n	8009eda <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	4b15      	ldr	r3, [pc, #84]	; (8009eec <xTaskCheckForTimeOut+0xbc>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d007      	beq.n	8009eae <xTaskCheckForTimeOut+0x7e>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d302      	bcc.n	8009eae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	61fb      	str	r3, [r7, #28]
 8009eac:	e015      	b.n	8009eda <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d20b      	bcs.n	8009ed0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	1ad2      	subs	r2, r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff ff9d 	bl	8009e04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	61fb      	str	r3, [r7, #28]
 8009ece:	e004      	b.n	8009eda <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009eda:	f000 f983 	bl	800a1e4 <vPortExitCritical>

	return xReturn;
 8009ede:	69fb      	ldr	r3, [r7, #28]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3720      	adds	r7, #32
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	2000034c 	.word	0x2000034c
 8009eec:	20000360 	.word	0x20000360

08009ef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ef4:	4b03      	ldr	r3, [pc, #12]	; (8009f04 <vTaskMissedYield+0x14>)
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]
}
 8009efa:	bf00      	nop
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	2000035c 	.word	0x2000035c

08009f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f0e:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <prvResetNextTaskUnblockTime+0x38>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d104      	bne.n	8009f22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <prvResetNextTaskUnblockTime+0x3c>)
 8009f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f20:	e008      	b.n	8009f34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f22:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <prvResetNextTaskUnblockTime+0x38>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	4a04      	ldr	r2, [pc, #16]	; (8009f44 <prvResetNextTaskUnblockTime+0x3c>)
 8009f32:	6013      	str	r3, [r2, #0]
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	20000318 	.word	0x20000318
 8009f44:	20000364 	.word	0x20000364

08009f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f4e:	4b0b      	ldr	r3, [pc, #44]	; (8009f7c <xTaskGetSchedulerState+0x34>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d102      	bne.n	8009f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f56:	2301      	movs	r3, #1
 8009f58:	607b      	str	r3, [r7, #4]
 8009f5a:	e008      	b.n	8009f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f5c:	4b08      	ldr	r3, [pc, #32]	; (8009f80 <xTaskGetSchedulerState+0x38>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f64:	2302      	movs	r3, #2
 8009f66:	607b      	str	r3, [r7, #4]
 8009f68:	e001      	b.n	8009f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f6e:	687b      	ldr	r3, [r7, #4]
	}
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	20000354 	.word	0x20000354
 8009f80:	20000368 	.word	0x20000368

08009f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d06c      	beq.n	800a074 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f9a:	4b39      	ldr	r3, [pc, #228]	; (800a080 <xTaskPriorityDisinherit+0xfc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d009      	beq.n	8009fb8 <xTaskPriorityDisinherit+0x34>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	60fb      	str	r3, [r7, #12]
 8009fb6:	e7fe      	b.n	8009fb6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d109      	bne.n	8009fd4 <xTaskPriorityDisinherit+0x50>
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	60bb      	str	r3, [r7, #8]
 8009fd2:	e7fe      	b.n	8009fd2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fd8:	1e5a      	subs	r2, r3, #1
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d044      	beq.n	800a074 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d140      	bne.n	800a074 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7ff fa0f 	bl	800941a <uxListRemove>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d115      	bne.n	800a02e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a006:	491f      	ldr	r1, [pc, #124]	; (800a084 <xTaskPriorityDisinherit+0x100>)
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	440b      	add	r3, r1
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <xTaskPriorityDisinherit+0xaa>
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	2201      	movs	r2, #1
 800a01e:	fa02 f303 	lsl.w	r3, r2, r3
 800a022:	43da      	mvns	r2, r3
 800a024:	4b18      	ldr	r3, [pc, #96]	; (800a088 <xTaskPriorityDisinherit+0x104>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4013      	ands	r3, r2
 800a02a:	4a17      	ldr	r2, [pc, #92]	; (800a088 <xTaskPriorityDisinherit+0x104>)
 800a02c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	f1c3 0207 	rsb	r2, r3, #7
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	2201      	movs	r2, #1
 800a048:	409a      	lsls	r2, r3
 800a04a:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <xTaskPriorityDisinherit+0x104>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4313      	orrs	r3, r2
 800a050:	4a0d      	ldr	r2, [pc, #52]	; (800a088 <xTaskPriorityDisinherit+0x104>)
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4a08      	ldr	r2, [pc, #32]	; (800a084 <xTaskPriorityDisinherit+0x100>)
 800a062:	441a      	add	r2, r3
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f7ff f978 	bl	8009360 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a070:	2301      	movs	r3, #1
 800a072:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a074:	697b      	ldr	r3, [r7, #20]
	}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000288 	.word	0x20000288
 800a084:	2000028c 	.word	0x2000028c
 800a088:	20000350 	.word	0x20000350

0800a08c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a096:	4b29      	ldr	r3, [pc, #164]	; (800a13c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a09c:	4b28      	ldr	r3, [pc, #160]	; (800a140 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff f9b9 	bl	800941a <uxListRemove>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10b      	bne.n	800a0c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a0ae:	4b24      	ldr	r3, [pc, #144]	; (800a140 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ba:	43da      	mvns	r2, r3
 800a0bc:	4b21      	ldr	r3, [pc, #132]	; (800a144 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	4a20      	ldr	r2, [pc, #128]	; (800a144 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0cc:	d10a      	bne.n	800a0e4 <prvAddCurrentTaskToDelayedList+0x58>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0d4:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4619      	mov	r1, r3
 800a0dc:	481a      	ldr	r0, [pc, #104]	; (800a148 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a0de:	f7ff f93f 	bl	8009360 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0e2:	e026      	b.n	800a132 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0ec:	4b14      	ldr	r3, [pc, #80]	; (800a140 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d209      	bcs.n	800a110 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0fc:	4b13      	ldr	r3, [pc, #76]	; (800a14c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	4b0f      	ldr	r3, [pc, #60]	; (800a140 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3304      	adds	r3, #4
 800a106:	4619      	mov	r1, r3
 800a108:	4610      	mov	r0, r2
 800a10a:	f7ff f94d 	bl	80093a8 <vListInsert>
}
 800a10e:	e010      	b.n	800a132 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a110:	4b0f      	ldr	r3, [pc, #60]	; (800a150 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3304      	adds	r3, #4
 800a11a:	4619      	mov	r1, r3
 800a11c:	4610      	mov	r0, r2
 800a11e:	f7ff f943 	bl	80093a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a122:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d202      	bcs.n	800a132 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a12c:	4a09      	ldr	r2, [pc, #36]	; (800a154 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	6013      	str	r3, [r2, #0]
}
 800a132:	bf00      	nop
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	2000034c 	.word	0x2000034c
 800a140:	20000288 	.word	0x20000288
 800a144:	20000350 	.word	0x20000350
 800a148:	20000334 	.word	0x20000334
 800a14c:	2000031c 	.word	0x2000031c
 800a150:	20000318 	.word	0x20000318
 800a154:	20000364 	.word	0x20000364
	...

0800a160 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a160:	4b07      	ldr	r3, [pc, #28]	; (800a180 <pxCurrentTCBConst2>)
 800a162:	6819      	ldr	r1, [r3, #0]
 800a164:	6808      	ldr	r0, [r1, #0]
 800a166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16a:	f380 8809 	msr	PSP, r0
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8811 	msr	BASEPRI, r0
 800a17a:	4770      	bx	lr
 800a17c:	f3af 8000 	nop.w

0800a180 <pxCurrentTCBConst2>:
 800a180:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop

0800a188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1a0:	4b0e      	ldr	r3, [pc, #56]	; (800a1dc <vPortEnterCritical+0x54>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	4a0d      	ldr	r2, [pc, #52]	; (800a1dc <vPortEnterCritical+0x54>)
 800a1a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1aa:	4b0c      	ldr	r3, [pc, #48]	; (800a1dc <vPortEnterCritical+0x54>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d10e      	bne.n	800a1d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1b2:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <vPortEnterCritical+0x58>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d009      	beq.n	800a1d0 <vPortEnterCritical+0x48>
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	603b      	str	r3, [r7, #0]
 800a1ce:	e7fe      	b.n	800a1ce <vPortEnterCritical+0x46>
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	20000054 	.word	0x20000054
 800a1e0:	e000ed04 	.word	0xe000ed04

0800a1e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1ea:	4b11      	ldr	r3, [pc, #68]	; (800a230 <vPortExitCritical+0x4c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d109      	bne.n	800a206 <vPortExitCritical+0x22>
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	607b      	str	r3, [r7, #4]
 800a204:	e7fe      	b.n	800a204 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a206:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <vPortExitCritical+0x4c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	4a08      	ldr	r2, [pc, #32]	; (800a230 <vPortExitCritical+0x4c>)
 800a20e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a210:	4b07      	ldr	r3, [pc, #28]	; (800a230 <vPortExitCritical+0x4c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d104      	bne.n	800a222 <vPortExitCritical+0x3e>
 800a218:	2300      	movs	r3, #0
 800a21a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a222:	bf00      	nop
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20000054 	.word	0x20000054
	...

0800a240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a240:	f3ef 8009 	mrs	r0, PSP
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <pxCurrentTCBConst>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	f01e 0f10 	tst.w	lr, #16
 800a250:	bf08      	it	eq
 800a252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25a:	6010      	str	r0, [r2, #0]
 800a25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a264:	f380 8811 	msr	BASEPRI, r0
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f7ff fcc2 	bl	8009bf8 <vTaskSwitchContext>
 800a274:	f04f 0000 	mov.w	r0, #0
 800a278:	f380 8811 	msr	BASEPRI, r0
 800a27c:	bc09      	pop	{r0, r3}
 800a27e:	6819      	ldr	r1, [r3, #0]
 800a280:	6808      	ldr	r0, [r1, #0]
 800a282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a286:	f01e 0f10 	tst.w	lr, #16
 800a28a:	bf08      	it	eq
 800a28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a290:	f380 8809 	msr	PSP, r0
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	f3af 8000 	nop.w

0800a2a0 <pxCurrentTCBConst>:
 800a2a0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2c0:	f7ff fbe2 	bl	8009a88 <xTaskIncrementTick>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ca:	4b06      	ldr	r3, [pc, #24]	; (800a2e4 <SysTick_Handler+0x3c>)
 800a2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	e000ed04 	.word	0xe000ed04

0800a2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2ee:	f3ef 8305 	mrs	r3, IPSR
 800a2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b0f      	cmp	r3, #15
 800a2f8:	d913      	bls.n	800a322 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2fa:	4a16      	ldr	r2, [pc, #88]	; (800a354 <vPortValidateInterruptPriority+0x6c>)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a304:	4b14      	ldr	r3, [pc, #80]	; (800a358 <vPortValidateInterruptPriority+0x70>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	7afa      	ldrb	r2, [r7, #11]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d209      	bcs.n	800a322 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	607b      	str	r3, [r7, #4]
 800a320:	e7fe      	b.n	800a320 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a322:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <vPortValidateInterruptPriority+0x74>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a32a:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <vPortValidateInterruptPriority+0x78>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d909      	bls.n	800a346 <vPortValidateInterruptPriority+0x5e>
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	603b      	str	r3, [r7, #0]
 800a344:	e7fe      	b.n	800a344 <vPortValidateInterruptPriority+0x5c>
	}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	e000e3f0 	.word	0xe000e3f0
 800a358:	2000036c 	.word	0x2000036c
 800a35c:	e000ed0c 	.word	0xe000ed0c
 800a360:	20000370 	.word	0x20000370

0800a364 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a372:	4618      	mov	r0, r3
 800a374:	f7fe fec6 	bl	8009104 <USBH_LL_IncTimer>
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe ff0a 	bl	80091a8 <USBH_LL_Connect>
}
 800a394:	bf00      	nop
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe ff1f 	bl	80091ee <USBH_LL_Disconnect>
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fe ff3f 	bl	8009252 <USBH_LL_NotifyURBChange>
#endif
}
 800a3d4:	bf00      	nop
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe feb4 	bl	8009158 <USBH_LL_PortEnabled>
}
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fec0 	bl	800918c <USBH_LL_PortDisabled>
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fa f851 	bl	80044d2 <HAL_HCD_Stop>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	4618      	mov	r0, r3
 800a438:	f000 f808 	bl	800a44c <USBH_Get_USB_Status>
 800a43c:	4603      	mov	r3, r0
 800a43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a440:	7bbb      	ldrb	r3, [r7, #14]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d817      	bhi.n	800a490 <USBH_Get_USB_Status+0x44>
 800a460:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <USBH_Get_USB_Status+0x1c>)
 800a462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a466:	bf00      	nop
 800a468:	0800a479 	.word	0x0800a479
 800a46c:	0800a47f 	.word	0x0800a47f
 800a470:	0800a485 	.word	0x0800a485
 800a474:	0800a48b 	.word	0x0800a48b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	73fb      	strb	r3, [r7, #15]
    break;
 800a47c:	e00b      	b.n	800a496 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a47e:	2302      	movs	r3, #2
 800a480:	73fb      	strb	r3, [r7, #15]
    break;
 800a482:	e008      	b.n	800a496 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a484:	2301      	movs	r3, #1
 800a486:	73fb      	strb	r3, [r7, #15]
    break;
 800a488:	e005      	b.n	800a496 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a48a:	2302      	movs	r3, #2
 800a48c:	73fb      	strb	r3, [r7, #15]
    break;
 800a48e:	e002      	b.n	800a496 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a490:	2302      	movs	r3, #2
 800a492:	73fb      	strb	r3, [r7, #15]
    break;
 800a494:	bf00      	nop
  }
  return usb_status;
 800a496:	7bfb      	ldrb	r3, [r7, #15]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <__errno>:
 800a4a4:	4b01      	ldr	r3, [pc, #4]	; (800a4ac <__errno+0x8>)
 800a4a6:	6818      	ldr	r0, [r3, #0]
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	20000058 	.word	0x20000058

0800a4b0 <__libc_init_array>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4e0d      	ldr	r6, [pc, #52]	; (800a4e8 <__libc_init_array+0x38>)
 800a4b4:	4c0d      	ldr	r4, [pc, #52]	; (800a4ec <__libc_init_array+0x3c>)
 800a4b6:	1ba4      	subs	r4, r4, r6
 800a4b8:	10a4      	asrs	r4, r4, #2
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	42a5      	cmp	r5, r4
 800a4be:	d109      	bne.n	800a4d4 <__libc_init_array+0x24>
 800a4c0:	4e0b      	ldr	r6, [pc, #44]	; (800a4f0 <__libc_init_array+0x40>)
 800a4c2:	4c0c      	ldr	r4, [pc, #48]	; (800a4f4 <__libc_init_array+0x44>)
 800a4c4:	f000 f8a0 	bl	800a608 <_init>
 800a4c8:	1ba4      	subs	r4, r4, r6
 800a4ca:	10a4      	asrs	r4, r4, #2
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	42a5      	cmp	r5, r4
 800a4d0:	d105      	bne.n	800a4de <__libc_init_array+0x2e>
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4d8:	4798      	blx	r3
 800a4da:	3501      	adds	r5, #1
 800a4dc:	e7ee      	b.n	800a4bc <__libc_init_array+0xc>
 800a4de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4e2:	4798      	blx	r3
 800a4e4:	3501      	adds	r5, #1
 800a4e6:	e7f2      	b.n	800a4ce <__libc_init_array+0x1e>
 800a4e8:	0800c160 	.word	0x0800c160
 800a4ec:	0800c160 	.word	0x0800c160
 800a4f0:	0800c160 	.word	0x0800c160
 800a4f4:	0800c164 	.word	0x0800c164

0800a4f8 <malloc>:
 800a4f8:	4b02      	ldr	r3, [pc, #8]	; (800a504 <malloc+0xc>)
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	f000 b817 	b.w	800a530 <_malloc_r>
 800a502:	bf00      	nop
 800a504:	20000058 	.word	0x20000058

0800a508 <memcpy>:
 800a508:	b510      	push	{r4, lr}
 800a50a:	1e43      	subs	r3, r0, #1
 800a50c:	440a      	add	r2, r1
 800a50e:	4291      	cmp	r1, r2
 800a510:	d100      	bne.n	800a514 <memcpy+0xc>
 800a512:	bd10      	pop	{r4, pc}
 800a514:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a518:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a51c:	e7f7      	b.n	800a50e <memcpy+0x6>

0800a51e <memset>:
 800a51e:	4402      	add	r2, r0
 800a520:	4603      	mov	r3, r0
 800a522:	4293      	cmp	r3, r2
 800a524:	d100      	bne.n	800a528 <memset+0xa>
 800a526:	4770      	bx	lr
 800a528:	f803 1b01 	strb.w	r1, [r3], #1
 800a52c:	e7f9      	b.n	800a522 <memset+0x4>
	...

0800a530 <_malloc_r>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	1ccd      	adds	r5, r1, #3
 800a534:	f025 0503 	bic.w	r5, r5, #3
 800a538:	3508      	adds	r5, #8
 800a53a:	2d0c      	cmp	r5, #12
 800a53c:	bf38      	it	cc
 800a53e:	250c      	movcc	r5, #12
 800a540:	2d00      	cmp	r5, #0
 800a542:	4606      	mov	r6, r0
 800a544:	db01      	blt.n	800a54a <_malloc_r+0x1a>
 800a546:	42a9      	cmp	r1, r5
 800a548:	d903      	bls.n	800a552 <_malloc_r+0x22>
 800a54a:	230c      	movs	r3, #12
 800a54c:	6033      	str	r3, [r6, #0]
 800a54e:	2000      	movs	r0, #0
 800a550:	bd70      	pop	{r4, r5, r6, pc}
 800a552:	f000 f857 	bl	800a604 <__malloc_lock>
 800a556:	4a21      	ldr	r2, [pc, #132]	; (800a5dc <_malloc_r+0xac>)
 800a558:	6814      	ldr	r4, [r2, #0]
 800a55a:	4621      	mov	r1, r4
 800a55c:	b991      	cbnz	r1, 800a584 <_malloc_r+0x54>
 800a55e:	4c20      	ldr	r4, [pc, #128]	; (800a5e0 <_malloc_r+0xb0>)
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	b91b      	cbnz	r3, 800a56c <_malloc_r+0x3c>
 800a564:	4630      	mov	r0, r6
 800a566:	f000 f83d 	bl	800a5e4 <_sbrk_r>
 800a56a:	6020      	str	r0, [r4, #0]
 800a56c:	4629      	mov	r1, r5
 800a56e:	4630      	mov	r0, r6
 800a570:	f000 f838 	bl	800a5e4 <_sbrk_r>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d124      	bne.n	800a5c2 <_malloc_r+0x92>
 800a578:	230c      	movs	r3, #12
 800a57a:	6033      	str	r3, [r6, #0]
 800a57c:	4630      	mov	r0, r6
 800a57e:	f000 f842 	bl	800a606 <__malloc_unlock>
 800a582:	e7e4      	b.n	800a54e <_malloc_r+0x1e>
 800a584:	680b      	ldr	r3, [r1, #0]
 800a586:	1b5b      	subs	r3, r3, r5
 800a588:	d418      	bmi.n	800a5bc <_malloc_r+0x8c>
 800a58a:	2b0b      	cmp	r3, #11
 800a58c:	d90f      	bls.n	800a5ae <_malloc_r+0x7e>
 800a58e:	600b      	str	r3, [r1, #0]
 800a590:	50cd      	str	r5, [r1, r3]
 800a592:	18cc      	adds	r4, r1, r3
 800a594:	4630      	mov	r0, r6
 800a596:	f000 f836 	bl	800a606 <__malloc_unlock>
 800a59a:	f104 000b 	add.w	r0, r4, #11
 800a59e:	1d23      	adds	r3, r4, #4
 800a5a0:	f020 0007 	bic.w	r0, r0, #7
 800a5a4:	1ac3      	subs	r3, r0, r3
 800a5a6:	d0d3      	beq.n	800a550 <_malloc_r+0x20>
 800a5a8:	425a      	negs	r2, r3
 800a5aa:	50e2      	str	r2, [r4, r3]
 800a5ac:	e7d0      	b.n	800a550 <_malloc_r+0x20>
 800a5ae:	428c      	cmp	r4, r1
 800a5b0:	684b      	ldr	r3, [r1, #4]
 800a5b2:	bf16      	itet	ne
 800a5b4:	6063      	strne	r3, [r4, #4]
 800a5b6:	6013      	streq	r3, [r2, #0]
 800a5b8:	460c      	movne	r4, r1
 800a5ba:	e7eb      	b.n	800a594 <_malloc_r+0x64>
 800a5bc:	460c      	mov	r4, r1
 800a5be:	6849      	ldr	r1, [r1, #4]
 800a5c0:	e7cc      	b.n	800a55c <_malloc_r+0x2c>
 800a5c2:	1cc4      	adds	r4, r0, #3
 800a5c4:	f024 0403 	bic.w	r4, r4, #3
 800a5c8:	42a0      	cmp	r0, r4
 800a5ca:	d005      	beq.n	800a5d8 <_malloc_r+0xa8>
 800a5cc:	1a21      	subs	r1, r4, r0
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f000 f808 	bl	800a5e4 <_sbrk_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d0cf      	beq.n	800a578 <_malloc_r+0x48>
 800a5d8:	6025      	str	r5, [r4, #0]
 800a5da:	e7db      	b.n	800a594 <_malloc_r+0x64>
 800a5dc:	20000374 	.word	0x20000374
 800a5e0:	20000378 	.word	0x20000378

0800a5e4 <_sbrk_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4c06      	ldr	r4, [pc, #24]	; (800a600 <_sbrk_r+0x1c>)
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	4608      	mov	r0, r1
 800a5ee:	6023      	str	r3, [r4, #0]
 800a5f0:	f7f7 f9a0 	bl	8001934 <_sbrk>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d102      	bne.n	800a5fe <_sbrk_r+0x1a>
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	b103      	cbz	r3, 800a5fe <_sbrk_r+0x1a>
 800a5fc:	602b      	str	r3, [r5, #0]
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	20000980 	.word	0x20000980

0800a604 <__malloc_lock>:
 800a604:	4770      	bx	lr

0800a606 <__malloc_unlock>:
 800a606:	4770      	bx	lr

0800a608 <_init>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	bf00      	nop
 800a60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60e:	bc08      	pop	{r3}
 800a610:	469e      	mov	lr, r3
 800a612:	4770      	bx	lr

0800a614 <_fini>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	bf00      	nop
 800a618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61a:	bc08      	pop	{r3}
 800a61c:	469e      	mov	lr, r3
 800a61e:	4770      	bx	lr
