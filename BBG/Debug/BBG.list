
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a490  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b38  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c178  0800c178  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c178  0800c178  0001c178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c180  0800c180  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c180  0800c180  0001c180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c184  0800c184  0001c184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800c188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  200000bc  0800c244  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  0800c244  00020984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003da0e  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006ea9  00000000  00000000  0005dafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025e0  00000000  00000000  000649a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022e8  00000000  00000000  00066f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fe11  00000000  00000000  00069270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028087  00000000  00000000  00099081  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f62a9  00000000  00000000  000c1108  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b73b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fb8  00000000  00000000  001b742c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a628 	.word	0x0800a628

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	0800a628 	.word	0x0800a628

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
////
////	bbg->kulka = kulka;
////	rysuj_kulke(bbg->kulka);
//}

void BBG_init(BBG* bbg, Platforma *platforma, Klocek **klocki, Kulka *kulka, int lkl) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	60da      	str	r2, [r3, #12]

    bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
    rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f001 f89a 	bl	8001648 <rysuj_platforme>

    bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e00b      	b.n	8000538 <BBG_init+0x48>
        rysuj_klocek(bbg->klocki[i]);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fc57 	bl	8000de0 <rysuj_klocek>
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbee      	blt.n	8000520 <BBG_init+0x30>
    }

    bbg->kulka = kulka;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	609a      	str	r2, [r3, #8]
    rysuj_kulke(bbg->kulka);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fc81 	bl	8000e54 <rysuj_kulke>
}
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <BBG_obsluga_zbicia_klocka>:




void BBG_obsluga_zbicia_klocka(BBG* bbg) {
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e0ad      	b.n	80006c6 <BBG_obsluga_zbicia_klocka+0x16a>
        // Sprawdź, czy kulka zderzyła się z klockiem
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	685a      	ldr	r2, [r3, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	441a      	add	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6859      	ldr	r1, [r3, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	f2c0 809a 	blt.w	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	1ad2      	subs	r2, r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6859      	ldr	r1, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	440b      	add	r3, r1
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6859      	ldr	r1, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6858      	ldr	r0, [r3, #4]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4403      	add	r3, r0
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	440b      	add	r3, r1
        if (bbg->kulka->polozenie_y + bbg->kulka->promien >= bbg->klocki[i]->pozycja_y &&
 80005b8:	429a      	cmp	r2, r3
 80005ba:	f300 8081 	bgt.w	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	441a      	add	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6859      	ldr	r1, [r3, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
            bbg->kulka->polozenie_y - bbg->kulka->promien <= bbg->klocki[i]->pozycja_y + bbg->klocki[i]->wysokosc &&
 80005da:	429a      	cmp	r2, r3
 80005dc:	db70      	blt.n	80006c0 <BBG_obsluga_zbicia_klocka+0x164>
            bbg->kulka->polozenie_x - bbg->kulka->promien <= bbg->klocki[i]->pozycja_x + bbg->klocki[i]->szerokosc) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	1ad2      	subs	r2, r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6859      	ldr	r1, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	440b      	add	r3, r1
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6858      	ldr	r0, [r3, #4]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4403      	add	r3, r0
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	440b      	add	r3, r1
            bbg->kulka->polozenie_x + bbg->kulka->promien >= bbg->klocki[i]->pozycja_x &&
 800060a:	429a      	cmp	r2, r3
 800060c:	dc58      	bgt.n	80006c0 <BBG_obsluga_zbicia_klocka+0x164>

            // Odwróć kierunek prędkości kulki
            bbg->kulka->predkosc_x *= -1;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	68da      	ldr	r2, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4252      	negs	r2, r2
 800061a:	60da      	str	r2, [r3, #12]
            bbg->kulka->predkosc_y *= -1;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	691a      	ldr	r2, [r3, #16]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4252      	negs	r2, r2
 8000628:	611a      	str	r2, [r3, #16]

            // zamaluj miejsce zbitego klocka
            BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800062a:	482d      	ldr	r0, [pc, #180]	; (80006e0 <BBG_obsluga_zbicia_klocka+0x184>)
 800062c:	f001 ff56 	bl	80024dc <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000630:	482b      	ldr	r0, [pc, #172]	; (80006e0 <BBG_obsluga_zbicia_klocka+0x184>)
 8000632:	f001 ff3b 	bl	80024ac <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(bbg->klocki[i]->pozycja_x, bbg->klocki[i]->pozycja_y, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	b298      	uxth	r0, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	b299      	uxth	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	b29c      	uxth	r4, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4622      	mov	r2, r4
 8000678:	f002 f8ba 	bl	80027f0 <BSP_LCD_FillRect>

            // Usuń trafiony klocek z tablicy klocków
            //free(bbg->klocki[i]);

            // Przesuń pozostałe klocki w tablicy, aby zapełnić lukę po usuniętym klocku
            for (int j = i; j < bbg->liczba_klockow - 1; j++) {
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	e00f      	b.n	80006a2 <BBG_obsluga_zbicia_klocka+0x146>
                bbg->klocki[j] = bbg->klocki[j + 1];
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	441a      	add	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6859      	ldr	r1, [r3, #4]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	6812      	ldr	r2, [r2, #0]
 800069a:	601a      	str	r2, [r3, #0]
            for (int j = i; j < bbg->liczba_klockow - 1; j++) {
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	3301      	adds	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dbe9      	blt.n	8000682 <BBG_obsluga_zbicia_klocka+0x126>
            }

            // Zmniejsz liczbę klocków o 1
            bbg->liczba_klockow--;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	1e5a      	subs	r2, r3, #1
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]

            // Przerwij pętlę, gdy trafiony zostanie tylko jeden klocek
            if (bbg->liczba_klockow == 0) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d009      	beq.n	80006d4 <BBG_obsluga_zbicia_klocka+0x178>
    for (int i = 0; i < bbg->liczba_klockow; i++) {
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	f6ff af4c 	blt.w	800056a <BBG_obsluga_zbicia_klocka+0xe>
                break;
            }
        }
    }
}
 80006d2:	e000      	b.n	80006d6 <BBG_obsluga_zbicia_klocka+0x17a>
                break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	bf00      	nop
 80006e0:	ffff0000 	.word	0xffff0000

080006e4 <BBG_ruchKulki>:
    // Przykładowa obsługa dotyku
    printf("Obsługa dotyku ekranu\n");
}

// Ruch kulki (przykładowa implementacja)
void BBG_ruchKulki(BBG* bbg) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    // Przykładowy ruch kulki
    Kulka_ruch(bbg->kulka);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fbc9 	bl	8000e88 <Kulka_ruch>
    rysuj_kulke(bbg->kulka);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fbaa 	bl	8000e54 <rysuj_kulke>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <BBG_ruchPlatformy>:

// Ruch platformy (przykładowa implementacja)
void BBG_ruchPlatformy(BBG* bbg, int x) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	rysuj_platforme(bbg->platforma);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ff96 	bl	8001648 <rysuj_platforme>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_CRC_Init+0x20>)
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <MX_CRC_Init+0x24>)
 800072c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_CRC_Init+0x20>)
 8000730:	f002 fd9c 	bl	800326c <HAL_CRC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800073a:	f000 ff5f 	bl	80015fc <Error_Handler>
  }

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000037c 	.word	0x2000037c
 8000748:	40023000 	.word	0x40023000

0800074c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <HAL_CRC_MspInit+0x3c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d10d      	bne.n	800077a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_CRC_MspInit+0x40>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <HAL_CRC_MspInit+0x40>)
 8000768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_CRC_MspInit+0x40>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023000 	.word	0x40023000
 800078c:	40023800 	.word	0x40023800

08000790 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_DMA2D_Init+0x5c>)
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <MX_DMA2D_Init+0x60>)
 8000798:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_DMA2D_Init+0x5c>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_DMA2D_Init+0x5c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_DMA2D_Init+0x5c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_DMA2D_Init+0x5c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_DMA2D_Init+0x5c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_DMA2D_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_DMA2D_Init+0x5c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <MX_DMA2D_Init+0x5c>)
 80007c6:	f002 ff29 	bl	800361c <HAL_DMA2D_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007d0:	f000 ff14 	bl	80015fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007d4:	2101      	movs	r1, #1
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_DMA2D_Init+0x5c>)
 80007d8:	f003 f98e 	bl	8003af8 <HAL_DMA2D_ConfigLayer>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007e2:	f000 ff0b 	bl	80015fc <Error_Handler>
  }

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000384 	.word	0x20000384
 80007f0:	4002b000 	.word	0x4002b000

080007f4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_DMA2D_MspInit+0x48>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d115      	bne.n	8000832 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_DMA2D_MspInit+0x4c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <HAL_DMA2D_MspInit+0x4c>)
 8000810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_DMA2D_MspInit+0x4c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2105      	movs	r1, #5
 8000826:	205a      	movs	r0, #90	; 0x5a
 8000828:	f002 fcf6 	bl	8003218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800082c:	205a      	movs	r0, #90	; 0x5a
 800082e:	f002 fd0f 	bl	8003250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	4002b000 	.word	0x4002b000
 8000840:	40023800 	.word	0x40023800

08000844 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_FMC_Init+0x98>)
 800085e:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <MX_FMC_Init+0x9c>)
 8000860:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FMC_Init+0x98>)
 8000864:	2201      	movs	r2, #1
 8000866:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_FMC_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_FMC_Init+0x98>)
 8000870:	2204      	movs	r2, #4
 8000872:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_FMC_Init+0x98>)
 8000876:	2210      	movs	r2, #16
 8000878:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_FMC_Init+0x98>)
 800087c:	2240      	movs	r2, #64	; 0x40
 800087e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_FMC_Init+0x98>)
 8000882:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000886:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_FMC_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_FMC_Init+0x98>)
 8000890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000894:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_FMC_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_FMC_Init+0x98>)
 800089e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80008a8:	2307      	movs	r3, #7
 80008aa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008ac:	2304      	movs	r3, #4
 80008ae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80008b0:	2307      	movs	r3, #7
 80008b2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80008b4:	2303      	movs	r3, #3
 80008b6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_FMC_Init+0x98>)
 80008c6:	f006 fa95 	bl	8006df4 <HAL_SDRAM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008d0:	f000 fe94 	bl	80015fc <Error_Handler>
  }

}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200003c4 	.word	0x200003c4
 80008e0:	a0000140 	.word	0xa0000140

080008e4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80008f8:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <HAL_FMC_MspInit+0x104>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d16f      	bne.n	80009e0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000900:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <HAL_FMC_MspInit+0x104>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <HAL_FMC_MspInit+0x108>)
 800090c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090e:	4a37      	ldr	r2, [pc, #220]	; (80009ec <HAL_FMC_MspInit+0x108>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6393      	str	r3, [r2, #56]	; 0x38
 8000916:	4b35      	ldr	r3, [pc, #212]	; (80009ec <HAL_FMC_MspInit+0x108>)
 8000918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000922:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000926:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000934:	230c      	movs	r3, #12
 8000936:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	482c      	ldr	r0, [pc, #176]	; (80009f0 <HAL_FMC_MspInit+0x10c>)
 800093e:	f003 fa09 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <HAL_FMC_MspInit+0x110>)
 800095c:	f003 f9fa 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000960:	f248 1333 	movw	r3, #33075	; 0x8133
 8000964:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000972:	230c      	movs	r3, #12
 8000974:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	481f      	ldr	r0, [pc, #124]	; (80009f8 <HAL_FMC_MspInit+0x114>)
 800097c:	f003 f9ea 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000980:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000984:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000992:	230c      	movs	r3, #12
 8000994:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <HAL_FMC_MspInit+0x118>)
 800099c:	f003 f9da 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80009a0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009a4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b2:	230c      	movs	r3, #12
 80009b4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <HAL_FMC_MspInit+0x11c>)
 80009bc:	f003 f9ca 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80009c0:	2360      	movs	r3, #96	; 0x60
 80009c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009d0:	230c      	movs	r3, #12
 80009d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	480a      	ldr	r0, [pc, #40]	; (8000a04 <HAL_FMC_MspInit+0x120>)
 80009da:	f003 f9bb 	bl	8003d54 <HAL_GPIO_Init>
 80009de:	e000      	b.n	80009e2 <HAL_FMC_MspInit+0xfe>
    return;
 80009e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000d8 	.word	0x200000d8
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021400 	.word	0x40021400
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000a10:	f7ff ff68 	bl	80008e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
 8000a4e:	4b7a      	ldr	r3, [pc, #488]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a79      	ldr	r2, [pc, #484]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b77      	ldr	r3, [pc, #476]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	623b      	str	r3, [r7, #32]
 8000a64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	4b73      	ldr	r3, [pc, #460]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a72      	ldr	r2, [pc, #456]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b70      	ldr	r3, [pc, #448]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b6c      	ldr	r3, [pc, #432]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a6b      	ldr	r2, [pc, #428]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b69      	ldr	r3, [pc, #420]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	4b65      	ldr	r3, [pc, #404]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a64      	ldr	r2, [pc, #400]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b62      	ldr	r3, [pc, #392]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b5e      	ldr	r3, [pc, #376]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b5b      	ldr	r3, [pc, #364]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a56      	ldr	r2, [pc, #344]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a4f      	ldr	r2, [pc, #316]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b49      	ldr	r3, [pc, #292]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a48      	ldr	r2, [pc, #288]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b46      	ldr	r3, [pc, #280]	; (8000c38 <MX_GPIO_Init+0x204>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2116      	movs	r1, #22
 8000b2e:	4843      	ldr	r0, [pc, #268]	; (8000c3c <MX_GPIO_Init+0x208>)
 8000b30:	f003 fbc4 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	4841      	ldr	r0, [pc, #260]	; (8000c40 <MX_GPIO_Init+0x20c>)
 8000b3a:	f003 fbbf 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b44:	483f      	ldr	r0, [pc, #252]	; (8000c44 <MX_GPIO_Init+0x210>)
 8000b46:	f003 fbb9 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b50:	483d      	ldr	r0, [pc, #244]	; (8000c48 <MX_GPIO_Init+0x214>)
 8000b52:	f003 fbb3 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b56:	2316      	movs	r3, #22
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4833      	ldr	r0, [pc, #204]	; (8000c3c <MX_GPIO_Init+0x208>)
 8000b6e:	f003 f8f1 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b72:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b78:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <MX_GPIO_Init+0x218>)
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	482e      	ldr	r0, [pc, #184]	; (8000c40 <MX_GPIO_Init+0x20c>)
 8000b88:	f003 f8e4 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4827      	ldr	r0, [pc, #156]	; (8000c40 <MX_GPIO_Init+0x20c>)
 8000ba4:	f003 f8d6 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000ba8:	2320      	movs	r3, #32
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_GPIO_Init+0x218>)
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4820      	ldr	r0, [pc, #128]	; (8000c3c <MX_GPIO_Init+0x208>)
 8000bbc:	f003 f8ca 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481f      	ldr	r0, [pc, #124]	; (8000c50 <MX_GPIO_Init+0x21c>)
 8000bd4:	f003 f8be 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	4815      	ldr	r0, [pc, #84]	; (8000c44 <MX_GPIO_Init+0x210>)
 8000bee:	f003 f8b1 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000bf2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <MX_GPIO_Init+0x210>)
 8000c0c:	f003 f8a2 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c10:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <MX_GPIO_Init+0x214>)
 8000c2a:	f003 f893 	bl	8003d54 <HAL_GPIO_Init>

}
 8000c2e:	bf00      	nop
 8000c30:	3738      	adds	r7, #56	; 0x38
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020c00 	.word	0x40020c00
 8000c48:	40021800 	.word	0x40021800
 8000c4c:	10120000 	.word	0x10120000
 8000c50:	40020400 	.word	0x40020400

08000c54 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_I2C3_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <MX_I2C3_Init+0x7c>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000c92:	f004 fd17 	bl	80056c4 <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 fcae 	bl	80015fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000ca4:	f004 fe46 	bl	8005934 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000cae:	f000 fca5 	bl	80015fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C3_Init+0x74>)
 8000cb6:	f004 fe79 	bl	80059ac <HAL_I2CEx_ConfigDigitalFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f000 fc9c 	bl	80015fc <Error_Handler>
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200003f8 	.word	0x200003f8
 8000ccc:	40005c00 	.word	0x40005c00
 8000cd0:	000186a0 	.word	0x000186a0

08000cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a29      	ldr	r2, [pc, #164]	; (8000d98 <HAL_I2C_MspInit+0xc4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d14b      	bne.n	8000d8e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d40:	2304      	movs	r3, #4
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4815      	ldr	r0, [pc, #84]	; (8000da0 <HAL_I2C_MspInit+0xcc>)
 8000d4c:	f003 f802 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d56:	2312      	movs	r3, #18
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d62:	2304      	movs	r3, #4
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <HAL_I2C_MspInit+0xd0>)
 8000d6e:	f002 fff1 	bl	8003d54 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_I2C_MspInit+0xc8>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40005c00 	.word	0x40005c00
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020000 	.word	0x40020000

08000da8 <Klocek_init>:
#include "klocek.h"
#include "main.h"


// Inicjalizacja struktury Klocek
void Klocek_init(Klocek* k, int x, int y, int w, int h, uint32_t kol) {
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	601a      	str	r2, [r3, #0]
    k->pozycja_y = y;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	605a      	str	r2, [r3, #4]
    k->szerokosc = w;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	609a      	str	r2, [r3, #8]
    k->wysokosc = h;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	60da      	str	r2, [r3, #12]
    k->kolor = kol;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	69fa      	ldr	r2, [r7, #28]
 8000dd2:	611a      	str	r2, [r3, #16]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <rysuj_klocek>:

void rysuj_klocek(Klocek* k){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(k->kolor);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fb5d 	bl	80024ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	b298      	uxth	r0, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	f001 fcf1 	bl	80027f0 <BSP_LCD_FillRect>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <Kulka_init>:
 */
#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka* kulka, int x, int y, int r, int vx, int vy, uint32_t kol) {
 8000e16:	b480      	push	{r7}
 8000e18:	b085      	sub	sp, #20
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	603b      	str	r3, [r7, #0]
    kulka->polozenie_x = x;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	601a      	str	r2, [r3, #0]
    kulka->polozenie_y = y;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	605a      	str	r2, [r3, #4]
    kulka->promien = r;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	609a      	str	r2, [r3, #8]
    kulka->predkosc_x = vx;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	60da      	str	r2, [r3, #12]
    kulka->predkosc_y = vy;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	611a      	str	r2, [r3, #16]
    kulka->kolor = kol;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a3a      	ldr	r2, [r7, #32]
 8000e46:	615a      	str	r2, [r3, #20]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <rysuj_kulke>:

void rysuj_kulke(Kulka* kulka){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fb23 	bl	80024ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b298      	uxth	r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	b299      	uxth	r1, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f001 fd13 	bl	80028a4 <BSP_LCD_FillCircle>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <Kulka_ruch>:
void Kulka_ruch(Kulka* kulka) {
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	// Zamaluj stary stan kulki
	BSP_LCD_SetTextColor(0xFFFF0000); // Czerwony kolor
 8000e90:	482f      	ldr	r0, [pc, #188]	; (8000f50 <Kulka_ruch+0xc8>)
 8000e92:	f001 fb0b 	bl	80024ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	b298      	uxth	r0, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f001 fcfb 	bl	80028a4 <BSP_LCD_FillCircle>

	// Oblicz nowe położenie kulki
	int nowe_polozenie_x = kulka->polozenie_x + kulka->predkosc_x;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
	int nowe_polozenie_y = kulka->polozenie_y + kulka->predkosc_y;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60bb      	str	r3, [r7, #8]

	// Sprawdź zderzenie z lewą i prawą krawędzią ekranu
	if (nowe_polozenie_x - kulka->promien < 0 || nowe_polozenie_x + kulka->promien > BSP_LCD_GetXSize()) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db09      	blt.n	8000ee6 <Kulka_ruch+0x5e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	461c      	mov	r4, r3
 8000edc:	f001 fa5a 	bl	8002394 <BSP_LCD_GetXSize>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	429c      	cmp	r4, r3
 8000ee4:	d904      	bls.n	8000ef0 <Kulka_ruch+0x68>
		// Zderzenie z lewą lub prawą krawędzią, zmień kierunek prędkości poziomej
		kulka->predkosc_x = -kulka->predkosc_x;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	425a      	negs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	60da      	str	r2, [r3, #12]
	}

	// Sprawdź zderzenie z górną i dolną krawędzią ekranu
	if (nowe_polozenie_y - kulka->promien < 0 || nowe_polozenie_y + kulka->promien > BSP_LCD_GetYSize()) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db09      	blt.n	8000f10 <Kulka_ruch+0x88>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	461c      	mov	r4, r3
 8000f06:	f001 fa51 	bl	80023ac <BSP_LCD_GetYSize>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	429c      	cmp	r4, r3
 8000f0e:	d904      	bls.n	8000f1a <Kulka_ruch+0x92>
		// Zderzenie z górną lub dolną krawędzią, zmień kierunek prędkości pionowej
		kulka->predkosc_y = -kulka->predkosc_y;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	425a      	negs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	611a      	str	r2, [r3, #16]
	}

	// Aktualizuj położenie kulki na nowe pozycje
	kulka->polozenie_x = nowe_polozenie_x;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	601a      	str	r2, [r3, #0]
	kulka->polozenie_y = nowe_polozenie_y;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	605a      	str	r2, [r3, #4]

	// Narysuj kulke na nowej pozycji
	BSP_LCD_SetTextColor(kulka->kolor);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fabe 	bl	80024ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	b298      	uxth	r0, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	f001 fcae 	bl	80028a4 <BSP_LCD_FillCircle>
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	ffff0000 	.word	0xffff0000

08000f54 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b09a      	sub	sp, #104	; 0x68
 8000f58:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f5e:	2234      	movs	r2, #52	; 0x34
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f009 faeb 	bl	800a53e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2234      	movs	r2, #52	; 0x34
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f009 fae5 	bl	800a53e <memset>

  hltdc.Instance = LTDC;
 8000f74:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000f76:	4a50      	ldr	r2, [pc, #320]	; (80010b8 <MX_LTDC_Init+0x164>)
 8000f78:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f7a:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f80:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f86:	4b4b      	ldr	r3, [pc, #300]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f8c:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000f94:	2209      	movs	r2, #9
 8000f96:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000f98:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fa0:	221d      	movs	r2, #29
 8000fa2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000fa4:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000faa:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fac:	f240 120d 	movw	r2, #269	; 0x10d
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fb4:	f240 1243 	movw	r2, #323	; 0x143
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fbc:	f240 1217 	movw	r2, #279	; 0x117
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fc4:	f240 1247 	movw	r2, #327	; 0x147
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fca:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fe2:	4834      	ldr	r0, [pc, #208]	; (80010b4 <MX_LTDC_Init+0x160>)
 8000fe4:	f004 fd22 	bl	8005a2c <HAL_LTDC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fee:	f000 fb05 	bl	80015fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000ff6:	23f0      	movs	r3, #240	; 0xf0
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000ffe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001004:	2302      	movs	r3, #2
 8001006:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001008:	23ff      	movs	r3, #255	; 0xff
 800100a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001010:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001014:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001016:	2307      	movs	r3, #7
 8001018:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 800101a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800101e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001020:	23f0      	movs	r3, #240	; 0xf0
 8001022:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001024:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001028:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800103c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <MX_LTDC_Init+0x160>)
 8001046:	f004 fe83 	bl	8005d50 <HAL_LTDC_ConfigLayer>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001050:	f000 fad4 	bl	80015fc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800106c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001070:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001072:	2305      	movs	r3, #5
 8001074:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_LTDC_Init+0x160>)
 800109c:	f004 fe58 	bl	8005d50 <HAL_LTDC_ConfigLayer>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 80010a6:	f000 faa9 	bl	80015fc <Error_Handler>
  }

}
 80010aa:	bf00      	nop
 80010ac:	3768      	adds	r7, #104	; 0x68
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000044c 	.word	0x2000044c
 80010b8:	40016800 	.word	0x40016800

080010bc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a7b      	ldr	r2, [pc, #492]	; (80012c8 <HAL_LTDC_MspInit+0x20c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	f040 80f0 	bne.w	80012c0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	4b79      	ldr	r3, [pc, #484]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	4a78      	ldr	r2, [pc, #480]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 80010ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ee:	6453      	str	r3, [r2, #68]	; 0x44
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	4b72      	ldr	r3, [pc, #456]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a71      	ldr	r2, [pc, #452]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001106:	f043 0320 	orr.w	r3, r3, #32
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b6f      	ldr	r3, [pc, #444]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a6a      	ldr	r2, [pc, #424]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a63      	ldr	r2, [pc, #396]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	4b5d      	ldr	r3, [pc, #372]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a5c      	ldr	r2, [pc, #368]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800115a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4b56      	ldr	r3, [pc, #344]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a55      	ldr	r2, [pc, #340]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a4e      	ldr	r2, [pc, #312]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <HAL_LTDC_MspInit+0x210>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b6:	230e      	movs	r3, #14
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4843      	ldr	r0, [pc, #268]	; (80012d0 <HAL_LTDC_MspInit+0x214>)
 80011c2:	f002 fdc7 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d8:	230e      	movs	r3, #14
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	483c      	ldr	r0, [pc, #240]	; (80012d4 <HAL_LTDC_MspInit+0x218>)
 80011e4:	f002 fdb6 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011e8:	2303      	movs	r3, #3
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011f8:	2309      	movs	r3, #9
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4835      	ldr	r0, [pc, #212]	; (80012d8 <HAL_LTDC_MspInit+0x21c>)
 8001204:	f002 fda6 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001208:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800121a:	230e      	movs	r3, #14
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	482c      	ldr	r0, [pc, #176]	; (80012d8 <HAL_LTDC_MspInit+0x21c>)
 8001226:	f002 fd95 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800122a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800123c:	230e      	movs	r3, #14
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	4825      	ldr	r0, [pc, #148]	; (80012dc <HAL_LTDC_MspInit+0x220>)
 8001248:	f002 fd84 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800124c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800125e:	230e      	movs	r3, #14
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	481d      	ldr	r0, [pc, #116]	; (80012e0 <HAL_LTDC_MspInit+0x224>)
 800126a:	f002 fd73 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800126e:	2348      	movs	r3, #72	; 0x48
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800127e:	230e      	movs	r3, #14
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	4816      	ldr	r0, [pc, #88]	; (80012e4 <HAL_LTDC_MspInit+0x228>)
 800128a:	f002 fd63 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800128e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012a0:	2309      	movs	r3, #9
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <HAL_LTDC_MspInit+0x220>)
 80012ac:	f002 fd52 	bl	8003d54 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2105      	movs	r1, #5
 80012b4:	2058      	movs	r0, #88	; 0x58
 80012b6:	f001 ffaf 	bl	8003218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012ba:	2058      	movs	r0, #88	; 0x58
 80012bc:	f001 ffc8 	bl	8003250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80012c0:	bf00      	nop
 80012c2:	3738      	adds	r7, #56	; 0x38
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40016800 	.word	0x40016800
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b0a1      	sub	sp, #132	; 0x84
 80012ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ee:	f001 fe77 	bl	8002fe0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f2:	f000 f8ed 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f6:	f7ff fb9d 	bl	8000a34 <MX_GPIO_Init>
  MX_CRC_Init();
 80012fa:	f7ff fa13 	bl	8000724 <MX_CRC_Init>
  MX_DMA2D_Init();
 80012fe:	f7ff fa47 	bl	8000790 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001302:	f7ff fa9f 	bl	8000844 <MX_FMC_Init>
  MX_I2C3_Init();
 8001306:	f7ff fca5 	bl	8000c54 <MX_I2C3_Init>
  MX_LTDC_Init();
 800130a:	f7ff fe23 	bl	8000f54 <MX_LTDC_Init>
  MX_SPI5_Init();
 800130e:	f000 f9b7 	bl	8001680 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001312:	f000 fb6d 	bl	80019f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001316:	f000 fbdd 	bl	8001ad4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int odswiezanie = 16;
 800131a:	2310      	movs	r3, #16
 800131c:	663b      	str	r3, [r7, #96]	; 0x60
      BSP_LCD_Init();
 800131e:	f000 ffcf 	bl	80022c0 <BSP_LCD_Init>
      BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 8001322:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001326:	2000      	movs	r0, #0
 8001328:	f001 f84c 	bl	80023c4 <BSP_LCD_LayerDefaultInit>
          BSP_LCD_SelectLayer(0);
 800132c:	2000      	movs	r0, #0
 800132e:	f001 f8ad 	bl	800248c <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(LCD_COLOR_RED);
 8001332:	4865      	ldr	r0, [pc, #404]	; (80014c8 <main+0x1e0>)
 8001334:	f001 f906 	bl	8002544 <BSP_LCD_Clear>

          int liczba_klockow = 32; // Liczba klocków
 8001338:	2320      	movs	r3, #32
 800133a:	65fb      	str	r3, [r7, #92]	; 0x5c
          int klocek_szerokosc = BSP_LCD_GetXSize() / 8; // Klocki są szersze niż wyższe
 800133c:	f001 f82a 	bl	8002394 <BSP_LCD_GetXSize>
 8001340:	4603      	mov	r3, r0
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	65bb      	str	r3, [r7, #88]	; 0x58
          int klocek_wysokosc = BSP_LCD_GetYSize() / 16;   // Zakładamy 4 rzędy klocków
 8001346:	f001 f831 	bl	80023ac <BSP_LCD_GetYSize>
 800134a:	4603      	mov	r3, r0
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	657b      	str	r3, [r7, #84]	; 0x54

          Platforma* platforma = (Platforma*)malloc(sizeof(Platforma));
 8001350:	2018      	movs	r0, #24
 8001352:	f009 f8e1 	bl	800a518 <malloc>
 8001356:	4603      	mov	r3, r0
 8001358:	653b      	str	r3, [r7, #80]	; 0x50
          Kulka* kulka = (Kulka*)malloc(sizeof(Kulka));
 800135a:	2018      	movs	r0, #24
 800135c:	f009 f8dc 	bl	800a518 <malloc>
 8001360:	4603      	mov	r3, r0
 8001362:	64fb      	str	r3, [r7, #76]	; 0x4c
          Klocek** klocki = (Klocek**)malloc(liczba_klockow * sizeof(Klocek*));
 8001364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4618      	mov	r0, r3
 800136a:	f009 f8d5 	bl	800a518 <malloc>
 800136e:	4603      	mov	r3, r0
 8001370:	64bb      	str	r3, [r7, #72]	; 0x48
          int licznik = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	66fb      	str	r3, [r7, #108]	; 0x6c

          for (int kk = 0; kk < liczba_klockow / 8; kk++) { // Zakładając 4 rzędy klocków
 8001376:	2300      	movs	r3, #0
 8001378:	66bb      	str	r3, [r7, #104]	; 0x68
 800137a:	e04a      	b.n	8001412 <main+0x12a>
              for (int k = 0; k < 8; k++, licznik++) { // 8 kolumn klocków
 800137c:	2300      	movs	r3, #0
 800137e:	667b      	str	r3, [r7, #100]	; 0x64
 8001380:	e041      	b.n	8001406 <main+0x11e>
                  klocki[licznik] = (Klocek*)malloc(sizeof(Klocek));
 8001382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001388:	18d4      	adds	r4, r2, r3
 800138a:	2014      	movs	r0, #20
 800138c:	f009 f8c4 	bl	800a518 <malloc>
 8001390:	4603      	mov	r3, r0
 8001392:	6023      	str	r3, [r4, #0]
                  uint32_t kolor_klocka = ((k % 2 == 0 && kk % 2 == 0) || (k % 2 == 1 && kk % 2 == 1)) ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 8001394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d104      	bne.n	80013a8 <main+0xc0>
 800139e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00f      	beq.n	80013c8 <main+0xe0>
 80013a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	bfb8      	it	lt
 80013b2:	425b      	neglt	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d109      	bne.n	80013cc <main+0xe4>
 80013b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	bfb8      	it	lt
 80013c2:	425b      	neglt	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <main+0xe4>
 80013c8:	4b40      	ldr	r3, [pc, #256]	; (80014cc <main+0x1e4>)
 80013ca:	e001      	b.n	80013d0 <main+0xe8>
 80013cc:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80013d0:	617b      	str	r3, [r7, #20]
                  Klocek_init(klocki[licznik], k * klocek_szerokosc, kk * klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka);
 80013d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013d8:	4413      	add	r3, r2
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013e0:	fb02 f103 	mul.w	r1, r2, r3
 80013e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013e8:	fb02 f203 	mul.w	r2, r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013f6:	f7ff fcd7 	bl	8000da8 <Klocek_init>
              for (int k = 0; k < 8; k++, licznik++) { // 8 kolumn klocków
 80013fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013fc:	3301      	adds	r3, #1
 80013fe:	667b      	str	r3, [r7, #100]	; 0x64
 8001400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001402:	3301      	adds	r3, #1
 8001404:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001408:	2b07      	cmp	r3, #7
 800140a:	ddba      	ble.n	8001382 <main+0x9a>
          for (int kk = 0; kk < liczba_klockow / 8; kk++) { // Zakładając 4 rzędy klocków
 800140c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800140e:	3301      	adds	r3, #1
 8001410:	66bb      	str	r3, [r7, #104]	; 0x68
 8001412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001414:	2b00      	cmp	r3, #0
 8001416:	da00      	bge.n	800141a <main+0x132>
 8001418:	3307      	adds	r3, #7
 800141a:	10db      	asrs	r3, r3, #3
 800141c:	461a      	mov	r2, r3
 800141e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001420:	4293      	cmp	r3, r2
 8001422:	dbab      	blt.n	800137c <main+0x94>
              }
          }

          int platforma_x = 50;
 8001424:	2332      	movs	r3, #50	; 0x32
 8001426:	647b      	str	r3, [r7, #68]	; 0x44
          int platforma_y = BSP_LCD_GetYSize() - 20;
 8001428:	f000 ffc0 	bl	80023ac <BSP_LCD_GetYSize>
 800142c:	4603      	mov	r3, r0
 800142e:	3b14      	subs	r3, #20
 8001430:	643b      	str	r3, [r7, #64]	; 0x40
          int platforma_szerokosc = 100;
 8001432:	2364      	movs	r3, #100	; 0x64
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
          int platforma_wysokosc = 10;
 8001436:	230a      	movs	r3, #10
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
          int platforma_krok = 5;
 800143a:	2305      	movs	r3, #5
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
          uint32_t platforma_kolor = LCD_COLOR_WHITE;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	633b      	str	r3, [r7, #48]	; 0x30

          Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 8001444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001454:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001456:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001458:	f000 f8d7 	bl	800160a <Platforma_init>

          int kulka_pocz_x = 20;
 800145c:	2314      	movs	r3, #20
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
          int kulka_pocz_y = BSP_LCD_GetYSize() / 2;
 8001460:	f000 ffa4 	bl	80023ac <BSP_LCD_GetYSize>
 8001464:	4603      	mov	r3, r0
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
          int kulka_r = 5;
 800146a:	2305      	movs	r3, #5
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
          int kulka_vx = 10;
 800146e:	230a      	movs	r3, #10
 8001470:	623b      	str	r3, [r7, #32]
          int kulka_vy = 10;
 8001472:	230a      	movs	r3, #10
 8001474:	61fb      	str	r3, [r7, #28]
          uint32_t kulka_kolor = LCD_COLOR_WHITE;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	61bb      	str	r3, [r7, #24]

          Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800148c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800148e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001490:	f7ff fcc1 	bl	8000e16 <Kulka_init>

          BBG bbg;
          BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 8001494:	4638      	mov	r0, r7
 8001496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800149e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80014a0:	f7ff f826 	bl	80004f0 <BBG_init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BBG_ruchKulki(&bbg);
 80014a4:	463b      	mov	r3, r7
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f91c 	bl	80006e4 <BBG_ruchKulki>
	  BBG_obsluga_zbicia_klocka(&bbg);
 80014ac:	463b      	mov	r3, r7
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f854 	bl	800055c <BBG_obsluga_zbicia_klocka>
	  BBG_ruchPlatformy(&bbg, 50);
 80014b4:	463b      	mov	r3, r7
 80014b6:	2132      	movs	r1, #50	; 0x32
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f925 	bl	8000708 <BBG_ruchPlatformy>
	  HAL_Delay(odswiezanie);
 80014be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fdcf 	bl	8003064 <HAL_Delay>
	  BBG_ruchKulki(&bbg);
 80014c6:	e7ed      	b.n	80014a4 <main+0x1bc>
 80014c8:	ffff0000 	.word	0xffff0000
 80014cc:	ff0000ff 	.word	0xff0000ff

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0a0      	sub	sp, #128	; 0x80
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f009 f82d 	bl	800a53e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2230      	movs	r2, #48	; 0x30
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f009 f81e 	bl	800a53e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <SystemClock_Config+0x100>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a31      	ldr	r2, [pc, #196]	; (80015d0 <SystemClock_Config+0x100>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <SystemClock_Config+0x100>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <SystemClock_Config+0x104>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800152a:	4a2a      	ldr	r2, [pc, #168]	; (80015d4 <SystemClock_Config+0x104>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <SystemClock_Config+0x104>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153e:	2301      	movs	r3, #1
 8001540:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001546:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001548:	2302      	movs	r3, #2
 800154a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001550:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001552:	2304      	movs	r3, #4
 8001554:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001556:	2348      	movs	r3, #72	; 0x48
 8001558:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800155e:	2303      	movs	r3, #3
 8001560:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001566:	4618      	mov	r0, r3
 8001568:	f004 fdf2 	bl	8006150 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001572:	f000 f843 	bl	80015fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2302      	movs	r3, #2
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001590:	2102      	movs	r1, #2
 8001592:	4618      	mov	r0, r3
 8001594:	f005 f84c 	bl	8006630 <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800159e:	f000 f82d 	bl	80015fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015a2:	2308      	movs	r3, #8
 80015a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80015a6:	2332      	movs	r3, #50	; 0x32
 80015a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fa5e 	bl	8006a78 <HAL_RCCEx_PeriphCLKConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015c2:	f000 f81b 	bl	80015fc <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3780      	adds	r7, #128	; 0x80
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ea:	f001 fd1b 	bl	8003024 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40001000 	.word	0x40001000

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */


  /* USER CODE END Error_Handler_Debug */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <Platforma_init>:

#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma* platforma, int x, int y ,int w, int h, int k, uint32_t kol) {
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	615a      	str	r2, [r3, #20]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <rysuj_platforme>:
void rysuj_platforme(Platforma* platforma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(platforma->kolor);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 ff29 	bl	80024ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b298      	uxth	r0, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	b299      	uxth	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	b29b      	uxth	r3, r3
 8001672:	f001 f8bd 	bl	80027f0 <BSP_LCD_FillRect>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_SPI5_Init+0x64>)
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <MX_SPI5_Init+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_SPI5_Init+0x64>)
 800168c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001690:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_SPI5_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_SPI5_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016b4:	2218      	movs	r2, #24
 80016b6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016cc:	220a      	movs	r2, #10
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_SPI5_Init+0x64>)
 80016d2:	f005 fc0e 	bl	8006ef2 <HAL_SPI_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80016dc:	f7ff ff8e 	bl	80015fc <Error_Handler>
  }

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200004f4 	.word	0x200004f4
 80016e8:	40015000 	.word	0x40015000

080016ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <HAL_SPI_MspInit+0x84>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d12c      	bne.n	8001768 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a10      	ldr	r2, [pc, #64]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_SPI_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001746:	f44f 7360 	mov.w	r3, #896	; 0x380
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001758:	2305      	movs	r3, #5
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_SPI_MspInit+0x8c>)
 8001764:	f002 faf6 	bl	8003d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	; 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40015000 	.word	0x40015000
 8001774:	40023800 	.word	0x40023800
 8001778:	40021400 	.word	0x40021400

0800177c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_SPI_MspDeInit+0x30>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10a      	bne.n	80017a4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_SPI_MspDeInit+0x34>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_SPI_MspDeInit+0x34>)
 8001794:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800179a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_SPI_MspDeInit+0x38>)
 80017a0:	f002 fc82 	bl	80040a8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40015000 	.word	0x40015000
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40021400 	.word	0x40021400

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_MspInit+0x54>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_MspInit+0x54>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_MspInit+0x54>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_MspInit+0x54>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_MspInit+0x54>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_MspInit+0x54>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	210f      	movs	r1, #15
 80017fa:	f06f 0001 	mvn.w	r0, #1
 80017fe:	f001 fd0b 	bl	8003218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	2036      	movs	r0, #54	; 0x36
 8001826:	f001 fcf7 	bl	8003218 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800182a:	2036      	movs	r0, #54	; 0x36
 800182c:	f001 fd10 	bl	8003250 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_InitTick+0xa4>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_InitTick+0xa4>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_InitTick+0xa4>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184c:	f107 0210 	add.w	r2, r7, #16
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f005 f8dc 	bl	8006a14 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800185c:	f005 f8b2 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8001860:	4603      	mov	r3, r0
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <HAL_InitTick+0xa8>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	3b01      	subs	r3, #1
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_InitTick+0xac>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_InitTick+0xb0>)
 8001878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_InitTick+0xac>)
 800187c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001880:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_InitTick+0xac>)
 8001884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001886:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_InitTick+0xac>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_InitTick+0xac>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <HAL_InitTick+0xac>)
 8001896:	f006 f8b7 	bl	8007a08 <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d104      	bne.n	80018aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018a0:	4806      	ldr	r0, [pc, #24]	; (80018bc <HAL_InitTick+0xac>)
 80018a2:	f006 f8dc 	bl	8007a5e <HAL_TIM_Base_Start_IT>
 80018a6:	4603      	mov	r3, r0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3730      	adds	r7, #48	; 0x30
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	2000054c 	.word	0x2000054c
 80018c0:	40001000 	.word	0x40001000

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_Clear(0xFF000000); // czarny
 80018d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018da:	f000 fe33 	bl	8002544 <BSP_LCD_Clear>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0xc>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  BSP_LCD_Clear(0xFFFFFF00); // zolty
 80018e4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80018e8:	f000 fe2c 	bl	8002544 <BSP_LCD_Clear>
 80018ec:	e7fa      	b.n	80018e4 <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM6_DAC_IRQHandler+0x10>)
 800190e:	f006 f8ca 	bl	8007aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000054c 	.word	0x2000054c

0800191c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <OTG_HS_IRQHandler+0x10>)
 8001922:	f002 fce4 	bl	80042ee <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200006bc 	.word	0x200006bc

08001930 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <LTDC_IRQHandler+0x10>)
 8001936:	f004 f949 	bl	8005bcc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000044c 	.word	0x2000044c

08001944 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <DMA2D_IRQHandler+0x10>)
 800194a:	f001 ffc4 	bl	80038d6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000384 	.word	0x20000384

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d207      	bcs.n	8001998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001988:	f008 fd9c 	bl	800a4c4 <__errno>
 800198c:	4602      	mov	r2, r0
 800198e:	230c      	movs	r3, #12
 8001990:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <_sbrk+0x64>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20030000 	.word	0x20030000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	200000dc 	.word	0x200000dc
 80019c0:	20000988 	.word	0x20000988

080019c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <SystemInit+0x28>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <SystemInit+0x28>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SystemInit+0x28>)
 80019da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019de:	609a      	str	r2, [r3, #8]
#endif
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <MX_TIM1_Init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a38:	4813      	ldr	r0, [pc, #76]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a3a:	f005 ffe5 	bl	8007a08 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a44:	f7ff fdda 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a56:	f006 f92e 	bl	8007cb6 <HAL_TIM_ConfigClockSource>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a60:	f7ff fdcc 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a72:	f006 fb39 	bl	80080e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a7c:	f7ff fdbe 	bl	80015fc <Error_Handler>
  }

}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000058c 	.word	0x2000058c
 8001a8c:	40010000 	.word	0x40010000

08001a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_TIM_Base_MspInit+0x3c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10d      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_TIM_Base_MspInit+0x40>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_TIM_Base_MspInit+0x40>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_TIM_Base_MspInit+0x40>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <MX_USART1_UART_Init+0x50>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b0c:	f006 fb7c 	bl	8008208 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b16:	f7ff fd71 	bl	80015fc <Error_Handler>
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200005cc 	.word	0x200005cc
 8001b24:	40011000 	.word	0x40011000

08001b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_UART_MspInit+0x84>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d12c      	bne.n	8001ba4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b94:	2307      	movs	r3, #7
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <HAL_UART_MspInit+0x8c>)
 8001ba0:	f002 f8d8 	bl	8003d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40011000 	.word	0x40011000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bbe:	e003      	b.n	8001bc8 <LoopCopyDataInit>

08001bc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bc6:	3104      	adds	r1, #4

08001bc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bd0:	d3f6      	bcc.n	8001bc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bd4:	e002      	b.n	8001bdc <LoopFillZerobss>

08001bd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bd8:	f842 3b04 	str.w	r3, [r2], #4

08001bdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001be0:	d3f9      	bcc.n	8001bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001be2:	f7ff feef 	bl	80019c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f008 fc73 	bl	800a4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff fb7d 	bl	80012e8 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bf0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001bf4:	0800c188 	.word	0x0800c188
  ldr  r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bfc:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8001c00:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8001c04:	20000984 	.word	0x20000984

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>

08001c0a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001c0e:	f000 fa5d 	bl	80020cc <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001c12:	20ca      	movs	r0, #202	; 0xca
 8001c14:	f000 f95d 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001c18:	20c3      	movs	r0, #195	; 0xc3
 8001c1a:	f000 f967 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001c1e:	2008      	movs	r0, #8
 8001c20:	f000 f964 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001c24:	2050      	movs	r0, #80	; 0x50
 8001c26:	f000 f961 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001c2a:	20cf      	movs	r0, #207	; 0xcf
 8001c2c:	f000 f951 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 f95b 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001c36:	20c1      	movs	r0, #193	; 0xc1
 8001c38:	f000 f958 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001c3c:	2030      	movs	r0, #48	; 0x30
 8001c3e:	f000 f955 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001c42:	20ed      	movs	r0, #237	; 0xed
 8001c44:	f000 f945 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001c48:	2064      	movs	r0, #100	; 0x64
 8001c4a:	f000 f94f 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f000 f94c 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001c54:	2012      	movs	r0, #18
 8001c56:	f000 f949 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001c5a:	2081      	movs	r0, #129	; 0x81
 8001c5c:	f000 f946 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001c60:	20e8      	movs	r0, #232	; 0xe8
 8001c62:	f000 f936 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001c66:	2085      	movs	r0, #133	; 0x85
 8001c68:	f000 f940 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f000 f93d 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001c72:	2078      	movs	r0, #120	; 0x78
 8001c74:	f000 f93a 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001c78:	20cb      	movs	r0, #203	; 0xcb
 8001c7a:	f000 f92a 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001c7e:	2039      	movs	r0, #57	; 0x39
 8001c80:	f000 f934 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001c84:	202c      	movs	r0, #44	; 0x2c
 8001c86:	f000 f931 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 f92e 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001c90:	2034      	movs	r0, #52	; 0x34
 8001c92:	f000 f92b 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001c96:	2002      	movs	r0, #2
 8001c98:	f000 f928 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001c9c:	20f7      	movs	r0, #247	; 0xf7
 8001c9e:	f000 f918 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001ca2:	2020      	movs	r0, #32
 8001ca4:	f000 f922 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001ca8:	20ea      	movs	r0, #234	; 0xea
 8001caa:	f000 f912 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 f91c 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 f919 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001cba:	20b1      	movs	r0, #177	; 0xb1
 8001cbc:	f000 f909 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f000 f913 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001cc6:	201b      	movs	r0, #27
 8001cc8:	f000 f910 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ccc:	20b6      	movs	r0, #182	; 0xb6
 8001cce:	f000 f900 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f000 f90a 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001cd8:	20a2      	movs	r0, #162	; 0xa2
 8001cda:	f000 f907 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001cde:	20c0      	movs	r0, #192	; 0xc0
 8001ce0:	f000 f8f7 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ce4:	2010      	movs	r0, #16
 8001ce6:	f000 f901 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001cea:	20c1      	movs	r0, #193	; 0xc1
 8001cec:	f000 f8f1 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001cf0:	2010      	movs	r0, #16
 8001cf2:	f000 f8fb 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001cf6:	20c5      	movs	r0, #197	; 0xc5
 8001cf8:	f000 f8eb 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001cfc:	2045      	movs	r0, #69	; 0x45
 8001cfe:	f000 f8f5 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001d02:	2015      	movs	r0, #21
 8001d04:	f000 f8f2 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001d08:	20c7      	movs	r0, #199	; 0xc7
 8001d0a:	f000 f8e2 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001d0e:	2090      	movs	r0, #144	; 0x90
 8001d10:	f000 f8ec 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001d14:	2036      	movs	r0, #54	; 0x36
 8001d16:	f000 f8dc 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001d1a:	20c8      	movs	r0, #200	; 0xc8
 8001d1c:	f000 f8e6 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001d20:	20f2      	movs	r0, #242	; 0xf2
 8001d22:	f000 f8d6 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f8e0 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001d2c:	20b0      	movs	r0, #176	; 0xb0
 8001d2e:	f000 f8d0 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001d32:	20c2      	movs	r0, #194	; 0xc2
 8001d34:	f000 f8da 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d38:	20b6      	movs	r0, #182	; 0xb6
 8001d3a:	f000 f8ca 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d3e:	200a      	movs	r0, #10
 8001d40:	f000 f8d4 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001d44:	20a7      	movs	r0, #167	; 0xa7
 8001d46:	f000 f8d1 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001d4a:	2027      	movs	r0, #39	; 0x27
 8001d4c:	f000 f8ce 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001d50:	2004      	movs	r0, #4
 8001d52:	f000 f8cb 	bl	8001eec <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001d56:	202a      	movs	r0, #42	; 0x2a
 8001d58:	f000 f8bb 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 f8c5 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 f8c2 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f000 f8bf 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001d6e:	20ef      	movs	r0, #239	; 0xef
 8001d70:	f000 f8bc 	bl	8001eec <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001d74:	202b      	movs	r0, #43	; 0x2b
 8001d76:	f000 f8ac 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f8b6 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f8b3 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f000 f8b0 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001d8c:	203f      	movs	r0, #63	; 0x3f
 8001d8e:	f000 f8ad 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001d92:	20f6      	movs	r0, #246	; 0xf6
 8001d94:	f000 f89d 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f000 f8a7 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f000 f8a4 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001da4:	2006      	movs	r0, #6
 8001da6:	f000 f8a1 	bl	8001eec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001daa:	202c      	movs	r0, #44	; 0x2c
 8001dac:	f000 f891 	bl	8001ed2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001db0:	20c8      	movs	r0, #200	; 0xc8
 8001db2:	f000 fa79 	bl	80022a8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001db6:	2026      	movs	r0, #38	; 0x26
 8001db8:	f000 f88b 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f000 f895 	bl	8001eec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001dc2:	20e0      	movs	r0, #224	; 0xe0
 8001dc4:	f000 f885 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001dc8:	200f      	movs	r0, #15
 8001dca:	f000 f88f 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001dce:	2029      	movs	r0, #41	; 0x29
 8001dd0:	f000 f88c 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001dd4:	2024      	movs	r0, #36	; 0x24
 8001dd6:	f000 f889 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001dda:	200c      	movs	r0, #12
 8001ddc:	f000 f886 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001de0:	200e      	movs	r0, #14
 8001de2:	f000 f883 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001de6:	2009      	movs	r0, #9
 8001de8:	f000 f880 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001dec:	204e      	movs	r0, #78	; 0x4e
 8001dee:	f000 f87d 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001df2:	2078      	movs	r0, #120	; 0x78
 8001df4:	f000 f87a 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001df8:	203c      	movs	r0, #60	; 0x3c
 8001dfa:	f000 f877 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001dfe:	2009      	movs	r0, #9
 8001e00:	f000 f874 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001e04:	2013      	movs	r0, #19
 8001e06:	f000 f871 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001e0a:	2005      	movs	r0, #5
 8001e0c:	f000 f86e 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001e10:	2017      	movs	r0, #23
 8001e12:	f000 f86b 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001e16:	2011      	movs	r0, #17
 8001e18:	f000 f868 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 f865 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001e22:	20e1      	movs	r0, #225	; 0xe1
 8001e24:	f000 f855 	bl	8001ed2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f000 f85f 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001e2e:	2016      	movs	r0, #22
 8001e30:	f000 f85c 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001e34:	201b      	movs	r0, #27
 8001e36:	f000 f859 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e3a:	2004      	movs	r0, #4
 8001e3c:	f000 f856 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001e40:	2011      	movs	r0, #17
 8001e42:	f000 f853 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001e46:	2007      	movs	r0, #7
 8001e48:	f000 f850 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001e4c:	2031      	movs	r0, #49	; 0x31
 8001e4e:	f000 f84d 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001e52:	2033      	movs	r0, #51	; 0x33
 8001e54:	f000 f84a 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001e58:	2042      	movs	r0, #66	; 0x42
 8001e5a:	f000 f847 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001e5e:	2005      	movs	r0, #5
 8001e60:	f000 f844 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001e64:	200c      	movs	r0, #12
 8001e66:	f000 f841 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001e6a:	200a      	movs	r0, #10
 8001e6c:	f000 f83e 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001e70:	2028      	movs	r0, #40	; 0x28
 8001e72:	f000 f83b 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001e76:	202f      	movs	r0, #47	; 0x2f
 8001e78:	f000 f838 	bl	8001eec <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001e7c:	200f      	movs	r0, #15
 8001e7e:	f000 f835 	bl	8001eec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001e82:	2011      	movs	r0, #17
 8001e84:	f000 f825 	bl	8001ed2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001e88:	20c8      	movs	r0, #200	; 0xc8
 8001e8a:	f000 fa0d 	bl	80022a8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001e8e:	2029      	movs	r0, #41	; 0x29
 8001e90:	f000 f81f 	bl	8001ed2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f000 f81c 	bl	8001ed2 <ili9341_WriteReg>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001ea2:	f000 f913 	bl	80020cc <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	20d3      	movs	r0, #211	; 0xd3
 8001eaa:	f000 f82c 	bl	8001f06 <ili9341_ReadData>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29b      	uxth	r3, r3
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001eba:	2029      	movs	r0, #41	; 0x29
 8001ebc:	f000 f809 	bl	8001ed2 <ili9341_WriteReg>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ec8:	2028      	movs	r0, #40	; 0x28
 8001eca:	f000 f802 	bl	8001ed2 <ili9341_WriteReg>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f98e 	bl	8002200 <LCD_IO_WriteReg>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f95f 	bl	80021bc <LCD_IO_WriteData>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	460a      	mov	r2, r1
 8001f10:	80fb      	strh	r3, [r7, #6]
 8001f12:	4613      	mov	r3, r2
 8001f14:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001f16:	797a      	ldrb	r2, [r7, #5]
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f991 	bl	8002244 <LCD_IO_ReadData>
 8001f22:	4603      	mov	r3, r0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001f30:	23f0      	movs	r3, #240	; 0xf0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001f40:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f54:	4819      	ldr	r0, [pc, #100]	; (8001fbc <SPIx_Init+0x6c>)
 8001f56:	f005 fc37 	bl	80077c8 <HAL_SPI_GetState>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d12b      	bne.n	8001fb8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <SPIx_Init+0x6c>)
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <SPIx_Init+0x70>)
 8001f64:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <SPIx_Init+0x6c>)
 8001f68:	2218      	movs	r2, #24
 8001f6a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <SPIx_Init+0x6c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <SPIx_Init+0x6c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <SPIx_Init+0x6c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <SPIx_Init+0x6c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <SPIx_Init+0x6c>)
 8001f86:	2207      	movs	r2, #7
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <SPIx_Init+0x6c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <SPIx_Init+0x6c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <SPIx_Init+0x6c>)
 8001f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <SPIx_Init+0x6c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SPIx_Init+0x6c>)
 8001fa6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001faa:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <SPIx_Init+0x6c>)
 8001fae:	f000 f853 	bl	8002058 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001fb2:	4802      	ldr	r0, [pc, #8]	; (8001fbc <SPIx_Init+0x6c>)
 8001fb4:	f004 ff9d 	bl	8006ef2 <HAL_SPI_Init>
  } 
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200000e0 	.word	0x200000e0
 8001fc0:	40015000 	.word	0x40015000

08001fc4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <SPIx_Read+0x38>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f107 0108 	add.w	r1, r7, #8
 8001fde:	4808      	ldr	r0, [pc, #32]	; (8002000 <SPIx_Read+0x3c>)
 8001fe0:	f005 f947 	bl	8007272 <HAL_SPI_Receive>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001fee:	f000 f827 	bl	8002040 <SPIx_Error>
  }
  
  return readvalue;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000003c 	.word	0x2000003c
 8002000:	200000e0 	.word	0x200000e0

08002004 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <SPIx_Write+0x34>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1db9      	adds	r1, r7, #6
 8002018:	2201      	movs	r2, #1
 800201a:	4808      	ldr	r0, [pc, #32]	; (800203c <SPIx_Write+0x38>)
 800201c:	f004 fff5 	bl	800700a <HAL_SPI_Transmit>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800202a:	f000 f809 	bl	8002040 <SPIx_Error>
  }
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000003c 	.word	0x2000003c
 800203c:	200000e0 	.word	0x200000e0

08002040 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <SPIx_Error+0x14>)
 8002046:	f004 ffb8 	bl	8006fba <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800204a:	f7ff ff81 	bl	8001f50 <SPIx_Init>
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200000e0 	.word	0x200000e0

08002058 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <SPIx_MspInit+0x6c>)
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <SPIx_MspInit+0x6c>)
 800206a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206e:	6453      	str	r3, [r2, #68]	; 0x44
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <SPIx_MspInit+0x6c>)
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <SPIx_MspInit+0x6c>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <SPIx_MspInit+0x6c>)
 8002086:	f043 0320 	orr.w	r3, r3, #32
 800208a:	6313      	str	r3, [r2, #48]	; 0x30
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <SPIx_MspInit+0x6c>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002098:	f44f 7360 	mov.w	r3, #896	; 0x380
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80020a6:	2301      	movs	r3, #1
 80020a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80020aa:	2305      	movs	r3, #5
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <SPIx_MspInit+0x70>)
 80020b6:	f001 fe4d 	bl	8003d54 <HAL_GPIO_Init>
}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	; 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40021400 	.word	0x40021400

080020cc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80020d2:	4b36      	ldr	r3, [pc, #216]	; (80021ac <LCD_IO_Init+0xe0>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d164      	bne.n	80021a4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <LCD_IO_Init+0xe0>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <LCD_IO_Init+0xe4>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4a31      	ldr	r2, [pc, #196]	; (80021b0 <LCD_IO_Init+0xe4>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6313      	str	r3, [r2, #48]	; 0x30
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <LCD_IO_Init+0xe4>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80020fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002100:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	4619      	mov	r1, r3
 8002114:	4827      	ldr	r0, [pc, #156]	; (80021b4 <LCD_IO_Init+0xe8>)
 8002116:	f001 fe1d 	bl	8003d54 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <LCD_IO_Init+0xe4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a23      	ldr	r2, [pc, #140]	; (80021b0 <LCD_IO_Init+0xe4>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <LCD_IO_Init+0xe4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800213c:	2301      	movs	r3, #1
 800213e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002144:	2302      	movs	r3, #2
 8002146:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	4619      	mov	r1, r3
 800214e:	4819      	ldr	r0, [pc, #100]	; (80021b4 <LCD_IO_Init+0xe8>)
 8002150:	f001 fe00 	bl	8003d54 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <LCD_IO_Init+0xe4>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <LCD_IO_Init+0xe4>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6313      	str	r3, [r2, #48]	; 0x30
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <LCD_IO_Init+0xe4>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002170:	2304      	movs	r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	4619      	mov	r1, r3
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <LCD_IO_Init+0xec>)
 8002188:	f001 fde4 	bl	8003d54 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800218c:	2200      	movs	r2, #0
 800218e:	2104      	movs	r1, #4
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <LCD_IO_Init+0xec>)
 8002192:	f002 f893 	bl	80042bc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002196:	2201      	movs	r2, #1
 8002198:	2104      	movs	r1, #4
 800219a:	4807      	ldr	r0, [pc, #28]	; (80021b8 <LCD_IO_Init+0xec>)
 800219c:	f002 f88e 	bl	80042bc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80021a0:	f7ff fed6 	bl	8001f50 <SPIx_Init>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000138 	.word	0x20000138
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40020800 	.word	0x40020800

080021bc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021c6:	2201      	movs	r2, #1
 80021c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021cc:	480a      	ldr	r0, [pc, #40]	; (80021f8 <LCD_IO_WriteData+0x3c>)
 80021ce:	f002 f875 	bl	80042bc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80021d2:	2200      	movs	r2, #0
 80021d4:	2104      	movs	r1, #4
 80021d6:	4809      	ldr	r0, [pc, #36]	; (80021fc <LCD_IO_WriteData+0x40>)
 80021d8:	f002 f870 	bl	80042bc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff10 	bl	8002004 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021e4:	2201      	movs	r2, #1
 80021e6:	2104      	movs	r1, #4
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <LCD_IO_WriteData+0x40>)
 80021ea:	f002 f867 	bl	80042bc <HAL_GPIO_WritePin>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40020800 	.word	0x40020800

08002200 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800220a:	2200      	movs	r2, #0
 800220c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002210:	480a      	ldr	r0, [pc, #40]	; (800223c <LCD_IO_WriteReg+0x3c>)
 8002212:	f002 f853 	bl	80042bc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002216:	2200      	movs	r2, #0
 8002218:	2104      	movs	r1, #4
 800221a:	4809      	ldr	r0, [pc, #36]	; (8002240 <LCD_IO_WriteReg+0x40>)
 800221c:	f002 f84e 	bl	80042bc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	b29b      	uxth	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff feed 	bl	8002004 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800222a:	2201      	movs	r2, #1
 800222c:	2104      	movs	r1, #4
 800222e:	4804      	ldr	r0, [pc, #16]	; (8002240 <LCD_IO_WriteReg+0x40>)
 8002230:	f002 f844 	bl	80042bc <HAL_GPIO_WritePin>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40020c00 	.word	0x40020c00
 8002240:	40020800 	.word	0x40020800

08002244 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	460a      	mov	r2, r1
 800224e:	80fb      	strh	r3, [r7, #6]
 8002250:	4613      	mov	r3, r2
 8002252:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002258:	2200      	movs	r2, #0
 800225a:	2104      	movs	r1, #4
 800225c:	4810      	ldr	r0, [pc, #64]	; (80022a0 <LCD_IO_ReadData+0x5c>)
 800225e:	f002 f82d 	bl	80042bc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002268:	480e      	ldr	r0, [pc, #56]	; (80022a4 <LCD_IO_ReadData+0x60>)
 800226a:	f002 f827 	bl	80042bc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fec7 	bl	8002004 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002276:	797b      	ldrb	r3, [r7, #5]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fea3 	bl	8001fc4 <SPIx_Read>
 800227e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002280:	2201      	movs	r2, #1
 8002282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002286:	4807      	ldr	r0, [pc, #28]	; (80022a4 <LCD_IO_ReadData+0x60>)
 8002288:	f002 f818 	bl	80042bc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800228c:	2201      	movs	r2, #1
 800228e:	2104      	movs	r1, #4
 8002290:	4803      	ldr	r0, [pc, #12]	; (80022a0 <LCD_IO_ReadData+0x5c>)
 8002292:	f002 f813 	bl	80042bc <HAL_GPIO_WritePin>
  
  return readvalue;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00

080022a8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fed7 	bl	8003064 <HAL_Delay>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <BSP_LCD_Init+0xbc>)
 80022c6:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <BSP_LCD_Init+0xc0>)
 80022c8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <BSP_LCD_Init+0xbc>)
 80022cc:	2209      	movs	r2, #9
 80022ce:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <BSP_LCD_Init+0xbc>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <BSP_LCD_Init+0xbc>)
 80022d8:	221d      	movs	r2, #29
 80022da:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <BSP_LCD_Init+0xbc>)
 80022de:	2203      	movs	r2, #3
 80022e0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <BSP_LCD_Init+0xbc>)
 80022e4:	f240 120d 	movw	r2, #269	; 0x10d
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <BSP_LCD_Init+0xbc>)
 80022ec:	f240 1243 	movw	r2, #323	; 0x143
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <BSP_LCD_Init+0xbc>)
 80022f4:	f240 1217 	movw	r2, #279	; 0x117
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <BSP_LCD_Init+0xbc>)
 80022fc:	f240 1247 	movw	r2, #327	; 0x147
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <BSP_LCD_Init+0xbc>)
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <BSP_LCD_Init+0xbc>)
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <BSP_LCD_Init+0xbc>)
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <BSP_LCD_Init+0xc4>)
 800231c:	2208      	movs	r2, #8
 800231e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002320:	4b18      	ldr	r3, [pc, #96]	; (8002384 <BSP_LCD_Init+0xc4>)
 8002322:	22c0      	movs	r2, #192	; 0xc0
 8002324:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <BSP_LCD_Init+0xc4>)
 8002328:	2204      	movs	r2, #4
 800232a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <BSP_LCD_Init+0xc4>)
 800232e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002334:	4813      	ldr	r0, [pc, #76]	; (8002384 <BSP_LCD_Init+0xc4>)
 8002336:	f004 fb9f 	bl	8006a78 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <BSP_LCD_Init+0xbc>)
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <BSP_LCD_Init+0xbc>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <BSP_LCD_Init+0xbc>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <BSP_LCD_Init+0xbc>)
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002352:	f000 fb47 	bl	80029e4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002356:	4809      	ldr	r0, [pc, #36]	; (800237c <BSP_LCD_Init+0xbc>)
 8002358:	f003 fb68 	bl	8005a2c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <BSP_LCD_Init+0xc8>)
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <BSP_LCD_Init+0xcc>)
 8002360:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <BSP_LCD_Init+0xc8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800236a:	f000 fc6f 	bl	8002c4c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800236e:	4808      	ldr	r0, [pc, #32]	; (8002390 <BSP_LCD_Init+0xd0>)
 8002370:	f000 f8ce 	bl	8002510 <BSP_LCD_SetFont>

  return LCD_OK;
 8002374:	2300      	movs	r3, #0
}  
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000060c 	.word	0x2000060c
 8002380:	40016800 	.word	0x40016800
 8002384:	2000017c 	.word	0x2000017c
 8002388:	200006b4 	.word	0x200006b4
 800238c:	20000004 	.word	0x20000004
 8002390:	20000040 	.word	0x20000040

08002394 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <BSP_LCD_GetXSize+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	4798      	blx	r3
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200006b4 	.word	0x200006b4

080023ac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <BSP_LCD_GetYSize+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	4798      	blx	r3
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200006b4 	.word	0x200006b4

080023c4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b090      	sub	sp, #64	; 0x40
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80023d4:	f7ff ffde 	bl	8002394 <BSP_LCD_GetXSize>
 80023d8:	4603      	mov	r3, r0
 80023da:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80023e0:	f7ff ffe4 	bl	80023ac <BSP_LCD_GetYSize>
 80023e4:	4603      	mov	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80023f0:	23ff      	movs	r3, #255	; 0xff
 80023f2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800240a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002410:	2307      	movs	r3, #7
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002414:	f7ff ffbe 	bl	8002394 <BSP_LCD_GetXSize>
 8002418:	4603      	mov	r3, r0
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800241c:	f7ff ffc6 	bl	80023ac <BSP_LCD_GetYSize>
 8002420:	4603      	mov	r3, r0
 8002422:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	4619      	mov	r1, r3
 800242c:	4814      	ldr	r0, [pc, #80]	; (8002480 <BSP_LCD_LayerDefaultInit+0xbc>)
 800242e:	f003 fc8f 	bl	8005d50 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002432:	88fa      	ldrh	r2, [r7, #6]
 8002434:	4913      	ldr	r1, [pc, #76]	; (8002484 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3304      	adds	r3, #4
 8002442:	f04f 32ff 	mov.w	r2, #4294967295
 8002446:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	490e      	ldr	r1, [pc, #56]	; (8002484 <BSP_LCD_LayerDefaultInit+0xc0>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3308      	adds	r3, #8
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <BSP_LCD_LayerDefaultInit+0xc4>)
 800245a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	4909      	ldr	r1, [pc, #36]	; (8002484 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800246e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002472:	f003 fcab 	bl	8005dcc <HAL_LTDC_EnableDither>
}
 8002476:	bf00      	nop
 8002478:	3740      	adds	r7, #64	; 0x40
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000060c 	.word	0x2000060c
 8002484:	200001b0 	.word	0x200001b0
 8002488:	20000040 	.word	0x20000040

0800248c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002494:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <BSP_LCD_SelectLayer+0x1c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	200001ac 	.word	0x200001ac

080024ac <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <BSP_LCD_SetTextColor+0x28>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4907      	ldr	r1, [pc, #28]	; (80024d8 <BSP_LCD_SetTextColor+0x2c>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	200001ac 	.word	0x200001ac
 80024d8:	200001b0 	.word	0x200001b0

080024dc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <BSP_LCD_SetBackColor+0x2c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4908      	ldr	r1, [pc, #32]	; (800250c <BSP_LCD_SetBackColor+0x30>)
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	3304      	adds	r3, #4
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	200001ac 	.word	0x200001ac
 800250c:	200001b0 	.word	0x200001b0

08002510 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <BSP_LCD_SetFont+0x2c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4908      	ldr	r1, [pc, #32]	; (8002540 <BSP_LCD_SetFont+0x30>)
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3308      	adds	r3, #8
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	601a      	str	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	200001ac 	.word	0x200001ac
 8002540:	200001b0 	.word	0x200001b0

08002544 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	b085      	sub	sp, #20
 8002548:	af02      	add	r7, sp, #8
 800254a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <BSP_LCD_Clear+0x48>)
 800254e:	681c      	ldr	r4, [r3, #0]
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <BSP_LCD_Clear+0x48>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <BSP_LCD_Clear+0x4c>)
 8002556:	2134      	movs	r1, #52	; 0x34
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461d      	mov	r5, r3
 8002564:	f7ff ff16 	bl	8002394 <BSP_LCD_GetXSize>
 8002568:	4606      	mov	r6, r0
 800256a:	f7ff ff1f 	bl	80023ac <BSP_LCD_GetYSize>
 800256e:	4602      	mov	r2, r0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	4632      	mov	r2, r6
 800257c:	4629      	mov	r1, r5
 800257e:	4620      	mov	r0, r4
 8002580:	f000 fb2c 	bl	8002bdc <FillBuffer>
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258c:	200001ac 	.word	0x200001ac
 8002590:	2000060c 	.word	0x2000060c

08002594 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002594:	b5b0      	push	{r4, r5, r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af02      	add	r7, sp, #8
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
 800259e:	460b      	mov	r3, r1
 80025a0:	80bb      	strh	r3, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <BSP_LCD_DrawHLine+0x70>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <BSP_LCD_DrawHLine+0x74>)
 80025b0:	2134      	movs	r1, #52	; 0x34
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	335c      	adds	r3, #92	; 0x5c
 80025ba:	681c      	ldr	r4, [r3, #0]
 80025bc:	f7ff feea 	bl	8002394 <BSP_LCD_GetXSize>
 80025c0:	4602      	mov	r2, r0
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	fb03 f202 	mul.w	r2, r3, r2
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4423      	add	r3, r4
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <BSP_LCD_DrawHLine+0x70>)
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	68fc      	ldr	r4, [r7, #12]
 80025d8:	887d      	ldrh	r5, [r7, #2]
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <BSP_LCD_DrawHLine+0x70>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	490b      	ldr	r1, [pc, #44]	; (800260c <BSP_LCD_DrawHLine+0x78>)
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2300      	movs	r3, #0
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	462a      	mov	r2, r5
 80025f6:	4621      	mov	r1, r4
 80025f8:	f000 faf0 	bl	8002bdc <FillBuffer>
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bdb0      	pop	{r4, r5, r7, pc}
 8002604:	200001ac 	.word	0x200001ac
 8002608:	2000060c 	.word	0x2000060c
 800260c:	200001b0 	.word	0x200001b0

08002610 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	80fb      	strh	r3, [r7, #6]
 800261a:	460b      	mov	r3, r1
 800261c:	80bb      	strh	r3, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	f1c3 0303 	rsb	r3, r3, #3
 800262a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002634:	e0cf      	b.n	80027d6 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	b29a      	uxth	r2, r3
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	4413      	add	r3, r2
 800263e:	b298      	uxth	r0, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	b29b      	uxth	r3, r3
 8002644:	88ba      	ldrh	r2, [r7, #4]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b29c      	uxth	r4, r3
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <BSP_LCD_DrawCircle+0x1d8>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4967      	ldr	r1, [pc, #412]	; (80027ec <BSP_LCD_DrawCircle+0x1dc>)
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4621      	mov	r1, r4
 8002660:	f000 fa96 	bl	8002b90 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	b29b      	uxth	r3, r3
 8002668:	88fa      	ldrh	r2, [r7, #6]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	b298      	uxth	r0, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	b29b      	uxth	r3, r3
 8002672:	88ba      	ldrh	r2, [r7, #4]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	b29c      	uxth	r4, r3
 8002678:	4b5b      	ldr	r3, [pc, #364]	; (80027e8 <BSP_LCD_DrawCircle+0x1d8>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	495b      	ldr	r1, [pc, #364]	; (80027ec <BSP_LCD_DrawCircle+0x1dc>)
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4621      	mov	r1, r4
 800268e:	f000 fa7f 	bl	8002b90 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	b29a      	uxth	r2, r3
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	4413      	add	r3, r2
 800269a:	b298      	uxth	r0, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	88ba      	ldrh	r2, [r7, #4]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b29c      	uxth	r4, r3
 80026a6:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <BSP_LCD_DrawCircle+0x1d8>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4950      	ldr	r1, [pc, #320]	; (80027ec <BSP_LCD_DrawCircle+0x1dc>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4621      	mov	r1, r4
 80026bc:	f000 fa68 	bl	8002b90 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	b298      	uxth	r0, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	88ba      	ldrh	r2, [r7, #4]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	b29c      	uxth	r4, r3
 80026d4:	4b44      	ldr	r3, [pc, #272]	; (80027e8 <BSP_LCD_DrawCircle+0x1d8>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4944      	ldr	r1, [pc, #272]	; (80027ec <BSP_LCD_DrawCircle+0x1dc>)
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4621      	mov	r1, r4
 80026ea:	f000 fa51 	bl	8002b90 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	4413      	add	r3, r2
 80026f6:	b298      	uxth	r0, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	88bb      	ldrh	r3, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	b29c      	uxth	r4, r3
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <BSP_LCD_DrawCircle+0x1d8>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4939      	ldr	r1, [pc, #228]	; (80027ec <BSP_LCD_DrawCircle+0x1dc>)
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4621      	mov	r1, r4
 8002718:	f000 fa3a 	bl	8002b90 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	b29b      	uxth	r3, r3
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b298      	uxth	r0, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	b29a      	uxth	r2, r3
 800272a:	88bb      	ldrh	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	b29c      	uxth	r4, r3
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <BSP_LCD_DrawCircle+0x1d8>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	492d      	ldr	r1, [pc, #180]	; (80027ec <BSP_LCD_DrawCircle+0x1dc>)
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	4621      	mov	r1, r4
 8002746:	f000 fa23 	bl	8002b90 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	b29a      	uxth	r2, r3
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4413      	add	r3, r2
 8002752:	b298      	uxth	r0, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	b29a      	uxth	r2, r3
 8002758:	88bb      	ldrh	r3, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	b29c      	uxth	r4, r3
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <BSP_LCD_DrawCircle+0x1d8>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4922      	ldr	r1, [pc, #136]	; (80027ec <BSP_LCD_DrawCircle+0x1dc>)
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4621      	mov	r1, r4
 8002774:	f000 fa0c 	bl	8002b90 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	b29b      	uxth	r3, r3
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	b298      	uxth	r0, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	b29a      	uxth	r2, r3
 8002786:	88bb      	ldrh	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	b29c      	uxth	r4, r3
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <BSP_LCD_DrawCircle+0x1d8>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4916      	ldr	r1, [pc, #88]	; (80027ec <BSP_LCD_DrawCircle+0x1dc>)
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4621      	mov	r1, r4
 80027a2:	f000 f9f5 	bl	8002b90 <BSP_LCD_DrawPixel>

    if (d < 0)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da06      	bge.n	80027ba <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	4413      	add	r3, r2
 80027b4:	3306      	adds	r3, #6
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e00a      	b.n	80027d0 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	009a      	lsls	r2, r3, #2
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	4413      	add	r3, r2
 80027c6:	330a      	adds	r3, #10
 80027c8:	617b      	str	r3, [r7, #20]
      cury--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3301      	adds	r3, #1
 80027d4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	429a      	cmp	r2, r3
 80027dc:	f67f af2b 	bls.w	8002636 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd90      	pop	{r4, r7, pc}
 80027e8:	200001ac 	.word	0x200001ac
 80027ec:	200001b0 	.word	0x200001b0

080027f0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80027f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	4604      	mov	r4, r0
 80027fa:	4608      	mov	r0, r1
 80027fc:	4611      	mov	r1, r2
 80027fe:	461a      	mov	r2, r3
 8002800:	4623      	mov	r3, r4
 8002802:	80fb      	strh	r3, [r7, #6]
 8002804:	4603      	mov	r3, r0
 8002806:	80bb      	strh	r3, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <BSP_LCD_FillRect+0xa8>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4920      	ldr	r1, [pc, #128]	; (800289c <BSP_LCD_FillRect+0xac>)
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fe40 	bl	80024ac <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <BSP_LCD_FillRect+0xa8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <BSP_LCD_FillRect+0xb0>)
 8002832:	2134      	movs	r1, #52	; 0x34
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	335c      	adds	r3, #92	; 0x5c
 800283c:	681c      	ldr	r4, [r3, #0]
 800283e:	f7ff fda9 	bl	8002394 <BSP_LCD_GetXSize>
 8002842:	4602      	mov	r2, r0
 8002844:	88bb      	ldrh	r3, [r7, #4]
 8002846:	fb03 f202 	mul.w	r2, r3, r2
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4423      	add	r3, r4
 8002852:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <BSP_LCD_FillRect+0xa8>)
 8002856:	681c      	ldr	r4, [r3, #0]
 8002858:	68fd      	ldr	r5, [r7, #12]
 800285a:	887e      	ldrh	r6, [r7, #2]
 800285c:	f8b7 8000 	ldrh.w	r8, [r7]
 8002860:	f7ff fd98 	bl	8002394 <BSP_LCD_GetXSize>
 8002864:	4602      	mov	r2, r0
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	1ad1      	subs	r1, r2, r3
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <BSP_LCD_FillRect+0xa8>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	480b      	ldr	r0, [pc, #44]	; (800289c <BSP_LCD_FillRect+0xac>)
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4403      	add	r3, r0
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	9100      	str	r1, [sp, #0]
 8002880:	4643      	mov	r3, r8
 8002882:	4632      	mov	r2, r6
 8002884:	4629      	mov	r1, r5
 8002886:	4620      	mov	r0, r4
 8002888:	f000 f9a8 	bl	8002bdc <FillBuffer>
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002896:	bf00      	nop
 8002898:	200001ac 	.word	0x200001ac
 800289c:	200001b0 	.word	0x200001b0
 80028a0:	2000060c 	.word	0x2000060c

080028a4 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
 80028ae:	460b      	mov	r3, r1
 80028b0:	80bb      	strh	r3, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	f1c3 0303 	rsb	r3, r3, #3
 80028be:	617b      	str	r3, [r7, #20]

  curx = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80028c8:	4b44      	ldr	r3, [pc, #272]	; (80029dc <BSP_LCD_FillCircle+0x138>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4944      	ldr	r1, [pc, #272]	; (80029e0 <BSP_LCD_FillCircle+0x13c>)
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fde6 	bl	80024ac <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80028e0:	e061      	b.n	80029a6 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d021      	beq.n	800292c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	b298      	uxth	r0, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	88bb      	ldrh	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	b299      	uxth	r1, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	f7ff fe45 	bl	8002594 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	b29b      	uxth	r3, r3
 800290e:	88fa      	ldrh	r2, [r7, #6]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b298      	uxth	r0, r3
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	b29b      	uxth	r3, r3
 8002918:	88ba      	ldrh	r2, [r7, #4]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	b299      	uxth	r1, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	b29b      	uxth	r3, r3
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	b29b      	uxth	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	f7ff fe34 	bl	8002594 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d021      	beq.n	8002976 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	b29b      	uxth	r3, r3
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	b298      	uxth	r0, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29b      	uxth	r3, r3
 8002940:	88ba      	ldrh	r2, [r7, #4]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	b299      	uxth	r1, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	b29b      	uxth	r3, r3
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	f7ff fe20 	bl	8002594 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	b29b      	uxth	r3, r3
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	b298      	uxth	r0, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	b29a      	uxth	r2, r3
 8002962:	88bb      	ldrh	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	b299      	uxth	r1, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	b29b      	uxth	r3, r3
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	f7ff fe0f 	bl	8002594 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	da06      	bge.n	800298a <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4413      	add	r3, r2
 8002984:	3306      	adds	r3, #6
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e00a      	b.n	80029a0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	009a      	lsls	r2, r3, #2
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4413      	add	r3, r2
 8002996:	330a      	adds	r3, #10
 8002998:	617b      	str	r3, [r7, #20]
      cury--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3b01      	subs	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	3301      	adds	r3, #1
 80029a4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d999      	bls.n	80028e2 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <BSP_LCD_FillCircle+0x138>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	490b      	ldr	r1, [pc, #44]	; (80029e0 <BSP_LCD_FillCircle+0x13c>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fd73 	bl	80024ac <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	88b9      	ldrh	r1, [r7, #4]
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fe1f 	bl	8002610 <BSP_LCD_DrawCircle>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200001ac 	.word	0x200001ac
 80029e0:	200001b0 	.word	0x200001b0

080029e4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08e      	sub	sp, #56	; 0x38
 80029e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a60      	ldr	r2, [pc, #384]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 80029f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a59      	ldr	r2, [pc, #356]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a44      	ldr	r2, [pc, #272]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a36      	ldr	r2, [pc, #216]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a2f      	ldr	r2, [pc, #188]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <BSP_LCD_MspInit+0x190>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002aca:	f641 0358 	movw	r3, #6232	; 0x1858
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002adc:	230e      	movs	r3, #14
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4824      	ldr	r0, [pc, #144]	; (8002b78 <BSP_LCD_MspInit+0x194>)
 8002ae8:	f001 f934 	bl	8003d54 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002aec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af6:	4619      	mov	r1, r3
 8002af8:	4820      	ldr	r0, [pc, #128]	; (8002b7c <BSP_LCD_MspInit+0x198>)
 8002afa:	f001 f92b 	bl	8003d54 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002afe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b08:	4619      	mov	r1, r3
 8002b0a:	481d      	ldr	r0, [pc, #116]	; (8002b80 <BSP_LCD_MspInit+0x19c>)
 8002b0c:	f001 f922 	bl	8003d54 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002b10:	2348      	movs	r3, #72	; 0x48
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b18:	4619      	mov	r1, r3
 8002b1a:	481a      	ldr	r0, [pc, #104]	; (8002b84 <BSP_LCD_MspInit+0x1a0>)
 8002b1c:	f001 f91a 	bl	8003d54 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4816      	ldr	r0, [pc, #88]	; (8002b88 <BSP_LCD_MspInit+0x1a4>)
 8002b2e:	f001 f911 	bl	8003d54 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002b32:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4813      	ldr	r0, [pc, #76]	; (8002b8c <BSP_LCD_MspInit+0x1a8>)
 8002b40:	f001 f908 	bl	8003d54 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002b44:	2303      	movs	r3, #3
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002b48:	2309      	movs	r3, #9
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b50:	4619      	mov	r1, r3
 8002b52:	480a      	ldr	r0, [pc, #40]	; (8002b7c <BSP_LCD_MspInit+0x198>)
 8002b54:	f001 f8fe 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002b58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b62:	4619      	mov	r1, r3
 8002b64:	4809      	ldr	r0, [pc, #36]	; (8002b8c <BSP_LCD_MspInit+0x1a8>)
 8002b66:	f001 f8f5 	bl	8003d54 <HAL_GPIO_Init>
}
 8002b6a:	bf00      	nop
 8002b6c:	3738      	adds	r7, #56	; 0x38
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020c00 	.word	0x40020c00
 8002b88:	40021400 	.word	0x40021400
 8002b8c:	40021800 	.word	0x40021800

08002b90 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	603a      	str	r2, [r7, #0]
 8002b9a:	80fb      	strh	r3, [r7, #6]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <BSP_LCD_DrawPixel+0x44>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <BSP_LCD_DrawPixel+0x48>)
 8002ba6:	2134      	movs	r1, #52	; 0x34
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	335c      	adds	r3, #92	; 0x5c
 8002bb0:	681c      	ldr	r4, [r3, #0]
 8002bb2:	88bd      	ldrh	r5, [r7, #4]
 8002bb4:	f7ff fbee 	bl	8002394 <BSP_LCD_GetXSize>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	fb03 f205 	mul.w	r2, r3, r5
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4423      	add	r3, r4
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6013      	str	r3, [r2, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd4:	200001ac 	.word	0x200001ac
 8002bd8:	2000060c 	.word	0x2000060c

08002bdc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <FillBuffer+0x68>)
 8002bec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bf0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <FillBuffer+0x68>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002bf8:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <FillBuffer+0x68>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <FillBuffer+0x68>)
 8002c00:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <FillBuffer+0x6c>)
 8002c02:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002c04:	480f      	ldr	r0, [pc, #60]	; (8002c44 <FillBuffer+0x68>)
 8002c06:	f000 fd09 	bl	800361c <HAL_DMA2D_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d115      	bne.n	8002c3c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	480c      	ldr	r0, [pc, #48]	; (8002c44 <FillBuffer+0x68>)
 8002c14:	f000 ff70 	bl	8003af8 <HAL_DMA2D_ConfigLayer>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10e      	bne.n	8002c3c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69f9      	ldr	r1, [r7, #28]
 8002c28:	4806      	ldr	r0, [pc, #24]	; (8002c44 <FillBuffer+0x68>)
 8002c2a:	f000 fd40 	bl	80036ae <HAL_DMA2D_Start>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d103      	bne.n	8002c3c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002c34:	210a      	movs	r1, #10
 8002c36:	4803      	ldr	r0, [pc, #12]	; (8002c44 <FillBuffer+0x68>)
 8002c38:	f000 fd64 	bl	8003704 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	2000013c 	.word	0x2000013c
 8002c48:	4002b000 	.word	0x4002b000

08002c4c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002c52:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <BSP_SDRAM_Init+0xb0>)
 8002c54:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <BSP_SDRAM_Init+0xb4>)
 8002c58:	2202      	movs	r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <BSP_SDRAM_Init+0xb4>)
 8002c5e:	2207      	movs	r2, #7
 8002c60:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <BSP_SDRAM_Init+0xb4>)
 8002c64:	2204      	movs	r2, #4
 8002c66:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <BSP_SDRAM_Init+0xb4>)
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <BSP_SDRAM_Init+0xb4>)
 8002c70:	2202      	movs	r2, #2
 8002c72:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <BSP_SDRAM_Init+0xb4>)
 8002c76:	2202      	movs	r2, #2
 8002c78:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002c7a:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <BSP_SDRAM_Init+0xb4>)
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002c8e:	2204      	movs	r2, #4
 8002c90:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002c94:	2210      	movs	r2, #16
 8002c96:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002ca0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002ca4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002cbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002cc6:	f000 f87f 	bl	8002dc8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002cca:	490d      	ldr	r1, [pc, #52]	; (8002d00 <BSP_SDRAM_Init+0xb4>)
 8002ccc:	480a      	ldr	r0, [pc, #40]	; (8002cf8 <BSP_SDRAM_Init+0xac>)
 8002cce:	f004 f891 	bl	8006df4 <HAL_SDRAM_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <BSP_SDRAM_Init+0xb8>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e002      	b.n	8002ce6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <BSP_SDRAM_Init+0xb8>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002ce6:	f240 506a 	movw	r0, #1386	; 0x56a
 8002cea:	f000 f80d 	bl	8002d08 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <BSP_SDRAM_Init+0xb8>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200001c8 	.word	0x200001c8
 8002cfc:	a0000140 	.word	0xa0000140
 8002d00:	200001fc 	.word	0x200001fc
 8002d04:	20000048 	.word	0x20000048

08002d08 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d30:	4923      	ldr	r1, [pc, #140]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d32:	4824      	ldr	r0, [pc, #144]	; (8002dc4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d34:	f004 f892 	bl	8006e5c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f000 f993 	bl	8003064 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d40:	2202      	movs	r2, #2
 8002d42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d46:	2208      	movs	r2, #8
 8002d48:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d5a:	4919      	ldr	r1, [pc, #100]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d5c:	4819      	ldr	r0, [pc, #100]	; (8002dc4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d5e:	f004 f87d 	bl	8006e5c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d64:	2203      	movs	r2, #3
 8002d66:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d70:	2204      	movs	r2, #4
 8002d72:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7e:	4910      	ldr	r1, [pc, #64]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d80:	4810      	ldr	r0, [pc, #64]	; (8002dc4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d82:	f004 f86b 	bl	8006e5c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002d86:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002d8a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d8e:	2204      	movs	r2, #4
 8002d90:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d94:	2208      	movs	r2, #8
 8002d96:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002da2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da8:	4905      	ldr	r1, [pc, #20]	; (8002dc0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002daa:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dac:	f004 f856 	bl	8006e5c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002db4:	f004 f87d 	bl	8006eb2 <HAL_SDRAM_ProgramRefreshRate>
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000218 	.word	0x20000218
 8002dc4:	200001c8 	.word	0x200001c8

08002dc8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b090      	sub	sp, #64	; 0x40
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80ec 	beq.w	8002fb2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dde:	4b77      	ldr	r3, [pc, #476]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4a76      	ldr	r2, [pc, #472]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6393      	str	r3, [r2, #56]	; 0x38
 8002dea:	4b74      	ldr	r3, [pc, #464]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	4b70      	ldr	r3, [pc, #448]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a6f      	ldr	r2, [pc, #444]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
 8002e16:	4b69      	ldr	r3, [pc, #420]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a68      	ldr	r2, [pc, #416]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	4b62      	ldr	r3, [pc, #392]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a61      	ldr	r2, [pc, #388]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b5f      	ldr	r3, [pc, #380]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	4b5b      	ldr	r3, [pc, #364]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a5a      	ldr	r2, [pc, #360]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e54:	f043 0308 	orr.w	r3, r3, #8
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	4b54      	ldr	r3, [pc, #336]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a53      	ldr	r2, [pc, #332]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b51      	ldr	r3, [pc, #324]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a4c      	ldr	r2, [pc, #304]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e8c:	f043 0320 	orr.w	r3, r3, #32
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a45      	ldr	r2, [pc, #276]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <BSP_SDRAM_MspInit+0x1f4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002eca:	2360      	movs	r3, #96	; 0x60
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	483a      	ldr	r0, [pc, #232]	; (8002fc0 <BSP_SDRAM_MspInit+0x1f8>)
 8002ed6:	f000 ff3d 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002eda:	2301      	movs	r3, #1
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4837      	ldr	r0, [pc, #220]	; (8002fc4 <BSP_SDRAM_MspInit+0x1fc>)
 8002ee6:	f000 ff35 	bl	8003d54 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002eea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4834      	ldr	r0, [pc, #208]	; (8002fc8 <BSP_SDRAM_MspInit+0x200>)
 8002ef8:	f000 ff2c 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002efc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f06:	4619      	mov	r1, r3
 8002f08:	4830      	ldr	r0, [pc, #192]	; (8002fcc <BSP_SDRAM_MspInit+0x204>)
 8002f0a:	f000 ff23 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002f0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f18:	4619      	mov	r1, r3
 8002f1a:	482d      	ldr	r0, [pc, #180]	; (8002fd0 <BSP_SDRAM_MspInit+0x208>)
 8002f1c:	f000 ff1a 	bl	8003d54 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002f20:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4829      	ldr	r0, [pc, #164]	; (8002fd4 <BSP_SDRAM_MspInit+0x20c>)
 8002f2e:	f000 ff11 	bl	8003d54 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002f3e:	4b26      	ldr	r3, [pc, #152]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f44:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f54:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f5c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f6a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f74:	2203      	movs	r2, #3
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <BSP_SDRAM_MspInit+0x214>)
 8002f88:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f90:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002f96:	4810      	ldr	r0, [pc, #64]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f98:	f000 fa32 	bl	8003400 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002f9c:	480e      	ldr	r0, [pc, #56]	; (8002fd8 <BSP_SDRAM_MspInit+0x210>)
 8002f9e:	f000 f981 	bl	80032a4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	2038      	movs	r0, #56	; 0x38
 8002fa8:	f000 f936 	bl	8003218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002fac:	2038      	movs	r0, #56	; 0x38
 8002fae:	f000 f94f 	bl	8003250 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002fb2:	bf00      	nop
 8002fb4:	3740      	adds	r7, #64	; 0x40
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40021400 	.word	0x40021400
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	20000228 	.word	0x20000228
 8002fdc:	40026410 	.word	0x40026410

08002fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_Init+0x40>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_Init+0x40>)
 8002fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_Init+0x40>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <HAL_Init+0x40>)
 8002ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_Init+0x40>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a07      	ldr	r2, [pc, #28]	; (8003020 <HAL_Init+0x40>)
 8003002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003008:	2003      	movs	r0, #3
 800300a:	f000 f8fa 	bl	8003202 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fe fbfe 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003014:	f7fe fbd0 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00

08003024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x20>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_IncTick+0x24>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_IncTick+0x24>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000050 	.word	0x20000050
 8003048:	200006b8 	.word	0x200006b8

0800304c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_GetTick+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200006b8 	.word	0x200006b8

08003064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d005      	beq.n	800308a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_Delay+0x40>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800308a:	bf00      	nop
 800308c:	f7ff ffde 	bl	800304c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f7      	bhi.n	800308c <HAL_Delay+0x28>
  {
  }
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000050 	.word	0x20000050

080030a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4907      	ldr	r1, [pc, #28]	; (8003144 <__NVIC_EnableIRQ+0x38>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
         );
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ff4c 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800322a:	f7ff ff61 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 800322e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	6978      	ldr	r0, [r7, #20]
 8003236:	f7ff ffb1 	bl	800319c <NVIC_EncodePriority>
 800323a:	4602      	mov	r2, r0
 800323c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff80 	bl	8003148 <__NVIC_SetPriority>
}
 8003248:	bf00      	nop
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ff54 	bl	800310c <__NVIC_EnableIRQ>
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e00e      	b.n	800329c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	795b      	ldrb	r3, [r3, #5]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fa5c 	bl	800074c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7ff fecc 	bl	800304c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e099      	b.n	80033f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e0:	e00f      	b.n	8003302 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e2:	f7ff feb3 	bl	800304c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	d908      	bls.n	8003302 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2203      	movs	r2, #3
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e078      	b.n	80033f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e8      	bne.n	80032e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4b38      	ldr	r3, [pc, #224]	; (80033fc <HAL_DMA_Init+0x158>)
 800331c:	4013      	ands	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2b04      	cmp	r3, #4
 800335a:	d107      	bne.n	800336c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	4313      	orrs	r3, r2
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f023 0307 	bic.w	r3, r3, #7
 8003382:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2b04      	cmp	r3, #4
 8003394:	d117      	bne.n	80033c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f8bd 	bl	8003528 <DMA_CheckFifoParam>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2240      	movs	r2, #64	; 0x40
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033c2:	2301      	movs	r3, #1
 80033c4:	e016      	b.n	80033f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f874 	bl	80034bc <DMA_CalcBaseAndBitshift>
 80033d4:	4603      	mov	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	223f      	movs	r2, #63	; 0x3f
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	f010803f 	.word	0xf010803f

08003400 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e050      	b.n	80034b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d101      	bne.n	8003422 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
 8003420:	e048      	b.n	80034b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2221      	movs	r2, #33	; 0x21
 8003460:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f82a 	bl	80034bc <DMA_CalcBaseAndBitshift>
 8003468:	4603      	mov	r3, r0
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	223f      	movs	r2, #63	; 0x3f
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3b10      	subs	r3, #16
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <DMA_CalcBaseAndBitshift+0x64>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <DMA_CalcBaseAndBitshift+0x68>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d909      	bls.n	80034fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	1d1a      	adds	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	659a      	str	r2, [r3, #88]	; 0x58
 80034fc:	e007      	b.n	800350e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	aaaaaaab 	.word	0xaaaaaaab
 8003524:	0800c110 	.word	0x0800c110

08003528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11f      	bne.n	8003582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d855      	bhi.n	80035f4 <DMA_CheckFifoParam+0xcc>
 8003548:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <DMA_CheckFifoParam+0x28>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003561 	.word	0x08003561
 8003554:	08003573 	.word	0x08003573
 8003558:	08003561 	.word	0x08003561
 800355c:	080035f5 	.word	0x080035f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d045      	beq.n	80035f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003570:	e042      	b.n	80035f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800357a:	d13f      	bne.n	80035fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003580:	e03c      	b.n	80035fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	d121      	bne.n	80035d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d836      	bhi.n	8003600 <DMA_CheckFifoParam+0xd8>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <DMA_CheckFifoParam+0x70>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035af 	.word	0x080035af
 80035a0:	080035a9 	.word	0x080035a9
 80035a4:	080035c1 	.word	0x080035c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e02f      	b.n	800360e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d024      	beq.n	8003604 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035be:	e021      	b.n	8003604 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c8:	d11e      	bne.n	8003608 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ce:	e01b      	b.n	8003608 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d902      	bls.n	80035dc <DMA_CheckFifoParam+0xb4>
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d003      	beq.n	80035e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035da:	e018      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	e015      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00e      	beq.n	800360c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
      break;
 80035f2:	e00b      	b.n	800360c <DMA_CheckFifoParam+0xe4>
      break;
 80035f4:	bf00      	nop
 80035f6:	e00a      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      break;
 80035f8:	bf00      	nop
 80035fa:	e008      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      break;
 80035fc:	bf00      	nop
 80035fe:	e006      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      break;
 8003600:	bf00      	nop
 8003602:	e004      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      break;
 8003604:	bf00      	nop
 8003606:	e002      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      break;   
 8003608:	bf00      	nop
 800360a:	e000      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      break;
 800360c:	bf00      	nop
    }
  } 
  
  return status; 
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e03b      	b.n	80036a6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd f8d6 	bl	80007f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	f023 0107 	bic.w	r1, r3, #7
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003686:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68d1      	ldr	r1, [r2, #12]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	430b      	orrs	r3, r1
 8003694:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af02      	add	r7, sp, #8
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_DMA2D_Start+0x1c>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e018      	b.n	80036fc <HAL_DMA2D_Start+0x4e>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fa99 	bl	8003c1c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d056      	beq.n	80037ce <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003720:	f7ff fc94 	bl	800304c <HAL_GetTick>
 8003724:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003726:	e04b      	b.n	80037c0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003736:	2b00      	cmp	r3, #0
 8003738:	d023      	beq.n	8003782 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	f043 0202 	orr.w	r2, r3, #2
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2221      	movs	r2, #33	; 0x21
 800376c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2204      	movs	r2, #4
 8003772:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0a5      	b.n	80038ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d01a      	beq.n	80037c0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800378a:	f7ff fc5f 	bl	800304c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <HAL_DMA2D_PollForTransfer+0x9c>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2203      	movs	r2, #3
 80037b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e086      	b.n	80038ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ac      	beq.n	8003728 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d061      	beq.n	80038b4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80037f0:	f7ff fc2c 	bl	800304c <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037f6:	e056      	b.n	80038a6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02e      	beq.n	8003868 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2229      	movs	r2, #41	; 0x29
 8003852:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2204      	movs	r2, #4
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d01a      	beq.n	80038a6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003870:	f7ff fbec 	bl	800304c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <HAL_DMA2D_PollForTransfer+0x182>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e013      	b.n	80038ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0a1      	beq.n	80037f8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2212      	movs	r2, #18
 80038ba:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d026      	beq.n	8003946 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d021      	beq.n	8003946 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003910:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2201      	movs	r2, #1
 8003924:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2204      	movs	r2, #4
 800392a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d026      	beq.n	800399e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d021      	beq.n	800399e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003968:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2220      	movs	r2, #32
 8003970:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	f043 0202 	orr.w	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2204      	movs	r2, #4
 8003982:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d026      	beq.n	80039f6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d021      	beq.n	80039f6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	f043 0204 	orr.w	r2, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2204      	movs	r2, #4
 80039da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d013      	beq.n	8003a28 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00e      	beq.n	8003a28 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a18:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f853 	bl	8003ace <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d024      	beq.n	8003a7c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01f      	beq.n	8003a7c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2202      	movs	r2, #2
 8003a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01f      	beq.n	8003ac6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01a      	beq.n	8003ac6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a9e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f80e 	bl	8003ae2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_DMA2D_ConfigLayer+0x20>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e079      	b.n	8003c0c <HAL_DMA2D_ConfigLayer+0x114>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	3318      	adds	r3, #24
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b42:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b44:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b0a      	cmp	r3, #10
 8003b4c:	d003      	beq.n	8003b56 <HAL_DMA2D_ConfigLayer+0x5e>
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b09      	cmp	r3, #9
 8003b54:	d107      	bne.n	8003b66 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e005      	b.n	8003b72 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	061b      	lsls	r3, r3, #24
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d120      	bne.n	8003bba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	ea02 0103 	and.w	r1, r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b0a      	cmp	r3, #10
 8003ba0:	d003      	beq.n	8003baa <HAL_DMA2D_ConfigLayer+0xb2>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	d127      	bne.n	8003bfa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb8:	e01f      	b.n	8003bfa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	ea02 0103 	and.w	r1, r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b0a      	cmp	r3, #10
 8003be2:	d003      	beq.n	8003bec <HAL_DMA2D_ConfigLayer+0xf4>
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b09      	cmp	r3, #9
 8003bea:	d106      	bne.n	8003bfa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bf8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	ff03000f 	.word	0xff03000f

08003c1c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b08b      	sub	sp, #44	; 0x2c
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	041a      	lsls	r2, r3, #16
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c54:	d174      	bne.n	8003d40 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c5c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c64:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c6c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	e053      	b.n	8003d36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d106      	bne.n	8003ca4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	e048      	b.n	8003d36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d111      	bne.n	8003cd0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	0cdb      	lsrs	r3, r3, #19
 8003cb0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	0a9b      	lsrs	r3, r3, #10
 8003cb6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	08db      	lsrs	r3, r3, #3
 8003cbc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	02db      	lsls	r3, r3, #11
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	e032      	b.n	8003d36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d117      	bne.n	8003d08 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	0fdb      	lsrs	r3, r3, #31
 8003cdc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	0cdb      	lsrs	r3, r3, #19
 8003ce2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	0adb      	lsrs	r3, r3, #11
 8003ce8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	08db      	lsrs	r3, r3, #3
 8003cee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	029b      	lsls	r3, r3, #10
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	03db      	lsls	r3, r3, #15
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
 8003d06:	e016      	b.n	8003d36 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	0f1b      	lsrs	r3, r3, #28
 8003d0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	0d1b      	lsrs	r3, r3, #20
 8003d12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	0b1b      	lsrs	r3, r3, #12
 8003d18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	011a      	lsls	r2, r3, #4
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	031b      	lsls	r3, r3, #12
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003d3e:	e003      	b.n	8003d48 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	60da      	str	r2, [r3, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	372c      	adds	r7, #44	; 0x2c
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	; 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e177      	b.n	8004060 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d70:	2201      	movs	r2, #1
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	f040 8166 	bne.w	800405a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d00b      	beq.n	8003dae <HAL_GPIO_Init+0x5a>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d007      	beq.n	8003dae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003da2:	2b11      	cmp	r3, #17
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b12      	cmp	r3, #18
 8003dac:	d130      	bne.n	8003e10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 0201 	and.w	r2, r3, #1
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0xfc>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b12      	cmp	r3, #18
 8003e4e:	d123      	bne.n	8003e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	08da      	lsrs	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3208      	adds	r2, #8
 8003e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	220f      	movs	r2, #15
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	08da      	lsrs	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3208      	adds	r2, #8
 8003e92:	69b9      	ldr	r1, [r7, #24]
 8003e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 0203 	and.w	r2, r3, #3
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80c0 	beq.w	800405a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_GPIO_Init+0x320>)
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	4a64      	ldr	r2, [pc, #400]	; (8004074 <HAL_GPIO_Init+0x320>)
 8003ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eea:	4b62      	ldr	r3, [pc, #392]	; (8004074 <HAL_GPIO_Init+0x320>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ef6:	4a60      	ldr	r2, [pc, #384]	; (8004078 <HAL_GPIO_Init+0x324>)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a57      	ldr	r2, [pc, #348]	; (800407c <HAL_GPIO_Init+0x328>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d037      	beq.n	8003f92 <HAL_GPIO_Init+0x23e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a56      	ldr	r2, [pc, #344]	; (8004080 <HAL_GPIO_Init+0x32c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_GPIO_Init+0x23a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a55      	ldr	r2, [pc, #340]	; (8004084 <HAL_GPIO_Init+0x330>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02b      	beq.n	8003f8a <HAL_GPIO_Init+0x236>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a54      	ldr	r2, [pc, #336]	; (8004088 <HAL_GPIO_Init+0x334>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d025      	beq.n	8003f86 <HAL_GPIO_Init+0x232>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a53      	ldr	r2, [pc, #332]	; (800408c <HAL_GPIO_Init+0x338>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <HAL_GPIO_Init+0x22e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_GPIO_Init+0x33c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d019      	beq.n	8003f7e <HAL_GPIO_Init+0x22a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a51      	ldr	r2, [pc, #324]	; (8004094 <HAL_GPIO_Init+0x340>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_GPIO_Init+0x226>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a50      	ldr	r2, [pc, #320]	; (8004098 <HAL_GPIO_Init+0x344>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00d      	beq.n	8003f76 <HAL_GPIO_Init+0x222>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4f      	ldr	r2, [pc, #316]	; (800409c <HAL_GPIO_Init+0x348>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <HAL_GPIO_Init+0x21e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a4e      	ldr	r2, [pc, #312]	; (80040a0 <HAL_GPIO_Init+0x34c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_GPIO_Init+0x21a>
 8003f6a:	2309      	movs	r3, #9
 8003f6c:	e012      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f6e:	230a      	movs	r3, #10
 8003f70:	e010      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f72:	2308      	movs	r3, #8
 8003f74:	e00e      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f76:	2307      	movs	r3, #7
 8003f78:	e00c      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f7a:	2306      	movs	r3, #6
 8003f7c:	e00a      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f7e:	2305      	movs	r3, #5
 8003f80:	e008      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f82:	2304      	movs	r3, #4
 8003f84:	e006      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f86:	2303      	movs	r3, #3
 8003f88:	e004      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e002      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_GPIO_Init+0x240>
 8003f92:	2300      	movs	r3, #0
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	f002 0203 	and.w	r2, r2, #3
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	4093      	lsls	r3, r2
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fa4:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_GPIO_Init+0x324>)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	089b      	lsrs	r3, r3, #2
 8003faa:	3302      	adds	r3, #2
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fb2:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fd6:	4a33      	ldr	r2, [pc, #204]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fdc:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004000:	4a28      	ldr	r2, [pc, #160]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004006:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402a:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <HAL_GPIO_Init+0x350>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_GPIO_Init+0x350>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	f67f ae84 	bls.w	8003d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004068:	bf00      	nop
 800406a:	3724      	adds	r7, #36	; 0x24
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40023800 	.word	0x40023800
 8004078:	40013800 	.word	0x40013800
 800407c:	40020000 	.word	0x40020000
 8004080:	40020400 	.word	0x40020400
 8004084:	40020800 	.word	0x40020800
 8004088:	40020c00 	.word	0x40020c00
 800408c:	40021000 	.word	0x40021000
 8004090:	40021400 	.word	0x40021400
 8004094:	40021800 	.word	0x40021800
 8004098:	40021c00 	.word	0x40021c00
 800409c:	40022000 	.word	0x40022000
 80040a0:	40022400 	.word	0x40022400
 80040a4:	40013c00 	.word	0x40013c00

080040a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e0d9      	b.n	8004278 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040c4:	2201      	movs	r2, #1
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	429a      	cmp	r2, r3
 80040dc:	f040 80c9 	bne.w	8004272 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80040e0:	4a6a      	ldr	r2, [pc, #424]	; (800428c <HAL_GPIO_DeInit+0x1e4>)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	3302      	adds	r3, #2
 80040e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	220f      	movs	r2, #15
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a62      	ldr	r2, [pc, #392]	; (8004290 <HAL_GPIO_DeInit+0x1e8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d037      	beq.n	800417a <HAL_GPIO_DeInit+0xd2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a61      	ldr	r2, [pc, #388]	; (8004294 <HAL_GPIO_DeInit+0x1ec>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_GPIO_DeInit+0xce>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a60      	ldr	r2, [pc, #384]	; (8004298 <HAL_GPIO_DeInit+0x1f0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d02b      	beq.n	8004172 <HAL_GPIO_DeInit+0xca>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a5f      	ldr	r2, [pc, #380]	; (800429c <HAL_GPIO_DeInit+0x1f4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d025      	beq.n	800416e <HAL_GPIO_DeInit+0xc6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a5e      	ldr	r2, [pc, #376]	; (80042a0 <HAL_GPIO_DeInit+0x1f8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01f      	beq.n	800416a <HAL_GPIO_DeInit+0xc2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a5d      	ldr	r2, [pc, #372]	; (80042a4 <HAL_GPIO_DeInit+0x1fc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d019      	beq.n	8004166 <HAL_GPIO_DeInit+0xbe>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a5c      	ldr	r2, [pc, #368]	; (80042a8 <HAL_GPIO_DeInit+0x200>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_GPIO_DeInit+0xba>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a5b      	ldr	r2, [pc, #364]	; (80042ac <HAL_GPIO_DeInit+0x204>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00d      	beq.n	800415e <HAL_GPIO_DeInit+0xb6>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a5a      	ldr	r2, [pc, #360]	; (80042b0 <HAL_GPIO_DeInit+0x208>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <HAL_GPIO_DeInit+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a59      	ldr	r2, [pc, #356]	; (80042b4 <HAL_GPIO_DeInit+0x20c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <HAL_GPIO_DeInit+0xae>
 8004152:	2309      	movs	r3, #9
 8004154:	e012      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 8004156:	230a      	movs	r3, #10
 8004158:	e010      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 800415a:	2308      	movs	r3, #8
 800415c:	e00e      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 800415e:	2307      	movs	r3, #7
 8004160:	e00c      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 8004162:	2306      	movs	r3, #6
 8004164:	e00a      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 8004166:	2305      	movs	r3, #5
 8004168:	e008      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 800416a:	2304      	movs	r3, #4
 800416c:	e006      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 800416e:	2303      	movs	r3, #3
 8004170:	e004      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 8004172:	2302      	movs	r3, #2
 8004174:	e002      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_GPIO_DeInit+0xd4>
 800417a:	2300      	movs	r3, #0
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	f002 0203 	and.w	r2, r2, #3
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	4093      	lsls	r3, r2
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	d132      	bne.n	80041f2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800418c:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <HAL_GPIO_DeInit+0x210>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	43db      	mvns	r3, r3
 8004194:	4948      	ldr	r1, [pc, #288]	; (80042b8 <HAL_GPIO_DeInit+0x210>)
 8004196:	4013      	ands	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_GPIO_DeInit+0x210>)
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	4945      	ldr	r1, [pc, #276]	; (80042b8 <HAL_GPIO_DeInit+0x210>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80041a8:	4b43      	ldr	r3, [pc, #268]	; (80042b8 <HAL_GPIO_DeInit+0x210>)
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	4941      	ldr	r1, [pc, #260]	; (80042b8 <HAL_GPIO_DeInit+0x210>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041b6:	4b40      	ldr	r3, [pc, #256]	; (80042b8 <HAL_GPIO_DeInit+0x210>)
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	493e      	ldr	r1, [pc, #248]	; (80042b8 <HAL_GPIO_DeInit+0x210>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	220f      	movs	r2, #15
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80041d4:	4a2d      	ldr	r2, [pc, #180]	; (800428c <HAL_GPIO_DeInit+0x1e4>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	3302      	adds	r3, #2
 80041dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	4829      	ldr	r0, [pc, #164]	; (800428c <HAL_GPIO_DeInit+0x1e4>)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	089b      	lsrs	r3, r3, #2
 80041ea:	400a      	ands	r2, r1
 80041ec:	3302      	adds	r3, #2
 80041ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	2103      	movs	r1, #3
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	08da      	lsrs	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3208      	adds	r2, #8
 8004210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	220f      	movs	r2, #15
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	08d2      	lsrs	r2, r2, #3
 8004228:	4019      	ands	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3208      	adds	r2, #8
 800422e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	2103      	movs	r1, #3
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	2101      	movs	r1, #1
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	401a      	ands	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	2103      	movs	r1, #3
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	401a      	ands	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3301      	adds	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	f67f af22 	bls.w	80040c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40013800 	.word	0x40013800
 8004290:	40020000 	.word	0x40020000
 8004294:	40020400 	.word	0x40020400
 8004298:	40020800 	.word	0x40020800
 800429c:	40020c00 	.word	0x40020c00
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40021400 	.word	0x40021400
 80042a8:	40021800 	.word	0x40021800
 80042ac:	40021c00 	.word	0x40021c00
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40022400 	.word	0x40022400
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
 80042c8:	4613      	mov	r3, r2
 80042ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042cc:	787b      	ldrb	r3, [r7, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d8:	e003      	b.n	80042e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	041a      	lsls	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	619a      	str	r2, [r3, #24]
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f004 fd31 	bl	8008d6c <USB_GetMode>
 800430a:	4603      	mov	r3, r0
 800430c:	2b01      	cmp	r3, #1
 800430e:	f040 80ef 	bne.w	80044f0 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f004 fd15 	bl	8008d46 <USB_ReadInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80e5 	beq.w	80044ee <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f004 fd0c 	bl	8008d46 <USB_ReadInterrupts>
 800432e:	4603      	mov	r3, r0
 8004330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004338:	d104      	bne.n	8004344 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004342:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f004 fcfc 	bl	8008d46 <USB_ReadInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004358:	d104      	bne.n	8004364 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004362:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f004 fcec 	bl	8008d46 <USB_ReadInterrupts>
 800436e:	4603      	mov	r3, r0
 8004370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004378:	d104      	bne.n	8004384 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004382:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f004 fcdc 	bl	8008d46 <USB_ReadInterrupts>
 800438e:	4603      	mov	r3, r0
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d103      	bne.n	80043a0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2202      	movs	r2, #2
 800439e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f004 fcce 	bl	8008d46 <USB_ReadInterrupts>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b4:	d115      	bne.n	80043e2 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80043be:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f005 fff3 	bl	800a3bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2101      	movs	r1, #1
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 fcd3 	bl	8008d88 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f004 fcad 	bl	8008d46 <USB_ReadInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f6:	d102      	bne.n	80043fe <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f001 f8ef 	bl	80055dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f004 fc9f 	bl	8008d46 <USB_ReadInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d106      	bne.n	8004420 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f005 ffb6 	bl	800a384 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2208      	movs	r2, #8
 800441e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f004 fc8e 	bl	8008d46 <USB_ReadInterrupts>
 800442a:	4603      	mov	r3, r0
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004434:	d138      	bne.n	80044a8 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f004 fcde 	bl	8008dfc <USB_HC_ReadInterrupt>
 8004440:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e025      	b.n	8004494 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d018      	beq.n	800448e <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800446e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004472:	d106      	bne.n	8004482 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f858 	bl	8004530 <HCD_HC_IN_IRQHandler>
 8004480:	e005      	b.n	800448e <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fc86 	bl	8004d9a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	3301      	adds	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	429a      	cmp	r2, r3
 800449c:	d3d4      	bcc.n	8004448 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f004 fc4a 	bl	8008d46 <USB_ReadInterrupts>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d101      	bne.n	80044c0 <HAL_HCD_IRQHandler+0x1d2>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_HCD_IRQHandler+0x1d4>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d014      	beq.n	80044f0 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0210 	bic.w	r2, r2, #16
 80044d4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 ffd4 	bl	8005484 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0210 	orr.w	r2, r2, #16
 80044ea:	619a      	str	r2, [r3, #24]
 80044ec:	e000      	b.n	80044f0 <HAL_HCD_IRQHandler+0x202>
      return;
 80044ee:	bf00      	nop
    }
  }
}
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_HCD_Stop+0x16>
 8004508:	2302      	movs	r3, #2
 800450a:	e00d      	b.n	8004528 <HAL_HCD_Stop+0x32>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f004 fd7f 	bl	800901c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d119      	bne.n	8004594 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	461a      	mov	r2, r3
 800456e:	2304      	movs	r3, #4
 8004570:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	440a      	add	r2, r1
 8004588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	60d3      	str	r3, [r2, #12]
 8004592:	e0ce      	b.n	8004732 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045aa:	d12c      	bne.n	8004606 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b8:	461a      	mov	r2, r3
 80045ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	440b      	add	r3, r1
 80045ce:	335d      	adds	r3, #93	; 0x5d
 80045d0:	2207      	movs	r2, #7
 80045d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f004 fc0d 	bl	8008e1e <USB_HC_Halt>
 8004604:	e095      	b.n	8004732 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b20      	cmp	r3, #32
 800461a:	d109      	bne.n	8004630 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	461a      	mov	r2, r3
 800462a:	2320      	movs	r3, #32
 800462c:	6093      	str	r3, [r2, #8]
 800462e:	e080      	b.n	8004732 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b08      	cmp	r3, #8
 8004644:	d134      	bne.n	80046b0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4413      	add	r3, r2
 800464e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	440a      	add	r2, r1
 800465c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	440b      	add	r3, r1
 8004674:	335d      	adds	r3, #93	; 0x5d
 8004676:	2205      	movs	r2, #5
 8004678:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004686:	461a      	mov	r2, r3
 8004688:	2310      	movs	r3, #16
 800468a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	461a      	mov	r2, r3
 800469a:	2308      	movs	r3, #8
 800469c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f004 fbb8 	bl	8008e1e <USB_HC_Halt>
 80046ae:	e040      	b.n	8004732 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d134      	bne.n	8004732 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046e2:	f043 0302 	orr.w	r3, r3, #2
 80046e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f004 fb93 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	461a      	mov	r2, r3
 8004706:	2310      	movs	r3, #16
 8004708:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	440b      	add	r3, r1
 8004718:	335d      	adds	r3, #93	; 0x5d
 800471a:	2208      	movs	r2, #8
 800471c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472a:	461a      	mov	r2, r3
 800472c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004730:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004748:	d122      	bne.n	8004790 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	0151      	lsls	r1, r2, #5
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	440a      	add	r2, r1
 8004760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f004 fb52 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004786:	461a      	mov	r2, r3
 8004788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800478c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800478e:	e300      	b.n	8004d92 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	f040 80fd 	bne.w	80049a2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01b      	beq.n	80047e8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	440b      	add	r3, r1
 80047be:	3348      	adds	r3, #72	; 0x48
 80047c0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	0159      	lsls	r1, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	440b      	add	r3, r1
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80047d4:	1ad1      	subs	r1, r2, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4403      	add	r3, r0
 80047e4:	334c      	adds	r3, #76	; 0x4c
 80047e6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	440b      	add	r3, r1
 80047f6:	335d      	adds	r3, #93	; 0x5d
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	440b      	add	r3, r1
 800480a:	3358      	adds	r3, #88	; 0x58
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	2301      	movs	r3, #1
 8004820:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	333f      	adds	r3, #63	; 0x3f
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	440b      	add	r3, r1
 8004846:	333f      	adds	r3, #63	; 0x3f
 8004848:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800484a:	2b02      	cmp	r3, #2
 800484c:	d121      	bne.n	8004892 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	440a      	add	r2, r1
 8004864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004868:	f043 0302 	orr.w	r3, r3, #2
 800486c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f004 fad0 	bl	8008e1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	461a      	mov	r2, r3
 800488c:	2310      	movs	r3, #16
 800488e:	6093      	str	r3, [r2, #8]
 8004890:	e070      	b.n	8004974 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	440b      	add	r3, r1
 80048a0:	333f      	adds	r3, #63	; 0x3f
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d12a      	bne.n	80048fe <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	440b      	add	r3, r1
 80048d6:	335c      	adds	r3, #92	; 0x5c
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	b2d8      	uxtb	r0, r3
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	440b      	add	r3, r1
 80048ee:	335c      	adds	r3, #92	; 0x5c
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	4601      	mov	r1, r0
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f005 fd6e 	bl	800a3d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048fc:	e03a      	b.n	8004974 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	440b      	add	r3, r1
 800490c:	333f      	adds	r3, #63	; 0x3f
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d12f      	bne.n	8004974 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	440b      	add	r3, r1
 8004922:	335c      	adds	r3, #92	; 0x5c
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	440b      	add	r3, r1
 8004936:	3350      	adds	r3, #80	; 0x50
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f083 0301 	eor.w	r3, r3, #1
 800493e:	b2d8      	uxtb	r0, r3
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	440b      	add	r3, r1
 800494e:	3350      	adds	r3, #80	; 0x50
 8004950:	4602      	mov	r2, r0
 8004952:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	b2d8      	uxtb	r0, r3
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	440b      	add	r3, r1
 8004966:	335c      	adds	r3, #92	; 0x5c
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	4601      	mov	r1, r0
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f005 fd32 	bl	800a3d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	440b      	add	r3, r1
 8004982:	3350      	adds	r3, #80	; 0x50
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	f083 0301 	eor.w	r3, r3, #1
 800498a:	b2d8      	uxtb	r0, r3
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	440b      	add	r3, r1
 800499a:	3350      	adds	r3, #80	; 0x50
 800499c:	4602      	mov	r2, r0
 800499e:	701a      	strb	r2, [r3, #0]
}
 80049a0:	e1f7      	b.n	8004d92 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f040 811a 	bne.w	8004bee <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d4:	f023 0302 	bic.w	r3, r3, #2
 80049d8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	440b      	add	r3, r1
 80049e8:	335d      	adds	r3, #93	; 0x5d
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d10a      	bne.n	8004a06 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	440b      	add	r3, r1
 80049fe:	335c      	adds	r3, #92	; 0x5c
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e0d9      	b.n	8004bba <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	440b      	add	r3, r1
 8004a14:	335d      	adds	r3, #93	; 0x5d
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d10a      	bne.n	8004a32 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	440b      	add	r3, r1
 8004a2a:	335c      	adds	r3, #92	; 0x5c
 8004a2c:	2205      	movs	r2, #5
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	e0c3      	b.n	8004bba <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	440b      	add	r3, r1
 8004a40:	335d      	adds	r3, #93	; 0x5d
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d00a      	beq.n	8004a5e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	440b      	add	r3, r1
 8004a56:	335d      	adds	r3, #93	; 0x5d
 8004a58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d156      	bne.n	8004b0c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3358      	adds	r3, #88	; 0x58
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	1c59      	adds	r1, r3, #1
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4403      	add	r3, r0
 8004a80:	3358      	adds	r3, #88	; 0x58
 8004a82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	440b      	add	r3, r1
 8004a92:	3358      	adds	r3, #88	; 0x58
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d914      	bls.n	8004ac4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3358      	adds	r3, #88	; 0x58
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	440b      	add	r3, r1
 8004abc:	335c      	adds	r3, #92	; 0x5c
 8004abe:	2204      	movs	r2, #4
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e009      	b.n	8004ad8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	440b      	add	r3, r1
 8004ad2:	335c      	adds	r3, #92	; 0x5c
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004af6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b04:	461a      	mov	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e056      	b.n	8004bba <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	440b      	add	r3, r1
 8004b1a:	335d      	adds	r3, #93	; 0x5d
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d123      	bne.n	8004b6a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	335c      	adds	r3, #92	; 0x5c
 8004b32:	2202      	movs	r2, #2
 8004b34:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b4c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b54:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b62:	461a      	mov	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e027      	b.n	8004bba <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	440b      	add	r3, r1
 8004b78:	335d      	adds	r3, #93	; 0x5d
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d11c      	bne.n	8004bba <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3358      	adds	r3, #88	; 0x58
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	1c59      	adds	r1, r3, #1
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4403      	add	r3, r0
 8004ba2:	3358      	adds	r3, #88	; 0x58
 8004ba4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	440b      	add	r3, r1
 8004bb4:	335c      	adds	r3, #92	; 0x5c
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2302      	movs	r3, #2
 8004bca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	b2d8      	uxtb	r0, r3
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	335c      	adds	r3, #92	; 0x5c
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	4601      	mov	r1, r0
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f005 fbf6 	bl	800a3d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bec:	e0d1      	b.n	8004d92 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b80      	cmp	r3, #128	; 0x80
 8004c02:	d13e      	bne.n	8004c82 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	440b      	add	r3, r1
 8004c32:	3358      	adds	r3, #88	; 0x58
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1c59      	adds	r1, r3, #1
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4403      	add	r3, r0
 8004c46:	3358      	adds	r3, #88	; 0x58
 8004c48:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	440b      	add	r3, r1
 8004c58:	335d      	adds	r3, #93	; 0x5d
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	4611      	mov	r1, r2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f004 f8d8 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	6093      	str	r3, [r2, #8]
}
 8004c80:	e087      	b.n	8004d92 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d17c      	bne.n	8004d92 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	440b      	add	r3, r1
 8004ca6:	333f      	adds	r3, #63	; 0x3f
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d122      	bne.n	8004cf4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	440b      	add	r3, r1
 8004cbc:	3358      	adds	r3, #88	; 0x58
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cdc:	f043 0302 	orr.w	r3, r3, #2
 8004ce0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f004 f896 	bl	8008e1e <USB_HC_Halt>
 8004cf2:	e045      	b.n	8004d80 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	440b      	add	r3, r1
 8004d02:	333f      	adds	r3, #63	; 0x3f
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	440b      	add	r3, r1
 8004d18:	333f      	adds	r3, #63	; 0x3f
 8004d1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d12f      	bne.n	8004d80 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3358      	adds	r3, #88	; 0x58
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d121      	bne.n	8004d80 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	440b      	add	r3, r1
 8004d4a:	335d      	adds	r3, #93	; 0x5d
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6a:	f043 0302 	orr.w	r3, r3, #2
 8004d6e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f004 f84f 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2310      	movs	r3, #16
 8004d90:	6093      	str	r3, [r2, #8]
}
 8004d92:	bf00      	nop
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d119      	bne.n	8004dfe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2304      	movs	r3, #4
 8004dda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004dfc:	e33e      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d141      	bne.n	8004e98 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	461a      	mov	r2, r3
 8004e22:	2320      	movs	r3, #32
 8004e24:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	440b      	add	r3, r1
 8004e34:	333d      	adds	r3, #61	; 0x3d
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	f040 831f 	bne.w	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	440b      	add	r3, r1
 8004e4c:	333d      	adds	r3, #61	; 0x3d
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	440b      	add	r3, r1
 8004e60:	335c      	adds	r3, #92	; 0x5c
 8004e62:	2202      	movs	r2, #2
 8004e64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f003 ffc4 	bl	8008e1e <USB_HC_Halt>
}
 8004e96:	e2f1      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d13f      	bne.n	8004f2e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	440b      	add	r3, r1
 8004ebc:	335d      	adds	r3, #93	; 0x5d
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	440b      	add	r3, r1
 8004ed0:	333d      	adds	r3, #61	; 0x3d
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3358      	adds	r3, #88	; 0x58
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f04:	f043 0302 	orr.w	r3, r3, #2
 8004f08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 ff82 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	461a      	mov	r2, r3
 8004f28:	2340      	movs	r3, #64	; 0x40
 8004f2a:	6093      	str	r3, [r2, #8]
}
 8004f2c:	e2a6      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f44:	d122      	bne.n	8004f8c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f60:	f043 0302 	orr.w	r3, r3, #2
 8004f64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f003 ff54 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f88:	6093      	str	r3, [r2, #8]
}
 8004f8a:	e277      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d135      	bne.n	800500e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	440b      	add	r3, r1
 8004fb0:	3358      	adds	r3, #88	; 0x58
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd0:	f043 0302 	orr.w	r3, r3, #2
 8004fd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	4611      	mov	r1, r2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f003 ff1c 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	440b      	add	r3, r1
 8005006:	335d      	adds	r3, #93	; 0x5d
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
}
 800500c:	e236      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d12b      	bne.n	800507c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	461a      	mov	r2, r3
 8005032:	2308      	movs	r3, #8
 8005034:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	440a      	add	r2, r1
 800504c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005050:	f043 0302 	orr.w	r3, r3, #2
 8005054:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f003 fedc 	bl	8008e1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	440b      	add	r3, r1
 8005074:	335d      	adds	r3, #93	; 0x5d
 8005076:	2205      	movs	r2, #5
 8005078:	701a      	strb	r2, [r3, #0]
}
 800507a:	e1ff      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b10      	cmp	r3, #16
 8005090:	d155      	bne.n	800513e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	440b      	add	r3, r1
 80050a0:	3358      	adds	r3, #88	; 0x58
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	440b      	add	r3, r1
 80050b4:	335d      	adds	r3, #93	; 0x5d
 80050b6:	2203      	movs	r2, #3
 80050b8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	440b      	add	r3, r1
 80050c8:	333d      	adds	r3, #61	; 0x3d
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d114      	bne.n	80050fa <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	440b      	add	r3, r1
 80050de:	333c      	adds	r3, #60	; 0x3c
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	440b      	add	r3, r1
 80050f4:	333d      	adds	r3, #61	; 0x3d
 80050f6:	2201      	movs	r2, #1
 80050f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	440a      	add	r2, r1
 8005110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f003 fe7a 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005136:	461a      	mov	r2, r3
 8005138:	2310      	movs	r3, #16
 800513a:	6093      	str	r3, [r2, #8]
}
 800513c:	e19e      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4413      	add	r3, r2
 8005146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b80      	cmp	r3, #128	; 0x80
 8005152:	d12b      	bne.n	80051ac <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f003 fe4d 	bl	8008e1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	440b      	add	r3, r1
 8005192:	335d      	adds	r3, #93	; 0x5d
 8005194:	2206      	movs	r2, #6
 8005196:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a4:	461a      	mov	r2, r3
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	6093      	str	r3, [r2, #8]
}
 80051aa:	e167      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c2:	d135      	bne.n	8005230 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f003 fe15 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	461a      	mov	r2, r3
 8005202:	2310      	movs	r3, #16
 8005204:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4413      	add	r3, r2
 800520e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005212:	461a      	mov	r2, r3
 8005214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005218:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	440b      	add	r3, r1
 8005228:	335d      	adds	r3, #93	; 0x5d
 800522a:	2208      	movs	r2, #8
 800522c:	701a      	strb	r2, [r3, #0]
}
 800522e:	e125      	b.n	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b02      	cmp	r3, #2
 8005244:	f040 811a 	bne.w	800547c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	440a      	add	r2, r1
 800525e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005262:	f023 0302 	bic.w	r3, r3, #2
 8005266:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	440b      	add	r3, r1
 8005276:	335d      	adds	r3, #93	; 0x5d
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d137      	bne.n	80052ee <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	335c      	adds	r3, #92	; 0x5c
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	440b      	add	r3, r1
 80052a0:	333f      	adds	r3, #63	; 0x3f
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d00b      	beq.n	80052c0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	440b      	add	r3, r1
 80052b6:	333f      	adds	r3, #63	; 0x3f
 80052b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	f040 80c5 	bne.w	800544a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	440b      	add	r3, r1
 80052ce:	3351      	adds	r3, #81	; 0x51
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	f083 0301 	eor.w	r3, r3, #1
 80052d6:	b2d8      	uxtb	r0, r3
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	440b      	add	r3, r1
 80052e6:	3351      	adds	r3, #81	; 0x51
 80052e8:	4602      	mov	r2, r0
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e0ad      	b.n	800544a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	335d      	adds	r3, #93	; 0x5d
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d10a      	bne.n	800531a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	440b      	add	r3, r1
 8005312:	335c      	adds	r3, #92	; 0x5c
 8005314:	2202      	movs	r2, #2
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e097      	b.n	800544a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	440b      	add	r3, r1
 8005328:	335d      	adds	r3, #93	; 0x5d
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b04      	cmp	r3, #4
 800532e:	d10a      	bne.n	8005346 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	335c      	adds	r3, #92	; 0x5c
 8005340:	2202      	movs	r2, #2
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	e081      	b.n	800544a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	335d      	adds	r3, #93	; 0x5d
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b05      	cmp	r3, #5
 800535a:	d10a      	bne.n	8005372 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	335c      	adds	r3, #92	; 0x5c
 800536c:	2205      	movs	r2, #5
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e06b      	b.n	800544a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	440b      	add	r3, r1
 8005380:	335d      	adds	r3, #93	; 0x5d
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b06      	cmp	r3, #6
 8005386:	d00a      	beq.n	800539e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	440b      	add	r3, r1
 8005396:	335d      	adds	r3, #93	; 0x5d
 8005398:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800539a:	2b08      	cmp	r3, #8
 800539c:	d155      	bne.n	800544a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	440b      	add	r3, r1
 80053ac:	3358      	adds	r3, #88	; 0x58
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	1c59      	adds	r1, r3, #1
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4403      	add	r3, r0
 80053c0:	3358      	adds	r3, #88	; 0x58
 80053c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	440b      	add	r3, r1
 80053d2:	3358      	adds	r3, #88	; 0x58
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d914      	bls.n	8005404 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	440b      	add	r3, r1
 80053e8:	3358      	adds	r3, #88	; 0x58
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	335c      	adds	r3, #92	; 0x5c
 80053fe:	2204      	movs	r2, #4
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	e009      	b.n	8005418 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	440b      	add	r3, r1
 8005412:	335c      	adds	r3, #92	; 0x5c
 8005414:	2202      	movs	r2, #2
 8005416:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800542e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005436:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	461a      	mov	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005456:	461a      	mov	r2, r3
 8005458:	2302      	movs	r3, #2
 800545a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	b2d8      	uxtb	r0, r3
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	440b      	add	r3, r1
 800546e:	335c      	adds	r3, #92	; 0x5c
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	4601      	mov	r1, r0
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f004 ffae 	bl	800a3d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800547c:	bf00      	nop
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	0c5b      	lsrs	r3, r3, #17
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054b8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d003      	beq.n	80054c8 <HCD_RXQLVL_IRQHandler+0x44>
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	f000 8082 	beq.w	80055ca <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80054c6:	e083      	b.n	80055d0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d07f      	beq.n	80055ce <HCD_RXQLVL_IRQHandler+0x14a>
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	440b      	add	r3, r1
 80054dc:	3344      	adds	r3, #68	; 0x44
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d074      	beq.n	80055ce <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	440b      	add	r3, r1
 80054f6:	3344      	adds	r3, #68	; 0x44
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	b292      	uxth	r2, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	f003 fbf8 	bl	8008cf4 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	440b      	add	r3, r1
 8005512:	3344      	adds	r3, #68	; 0x44
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	18d1      	adds	r1, r2, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4403      	add	r3, r0
 8005528:	3344      	adds	r3, #68	; 0x44
 800552a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	440b      	add	r3, r1
 800553a:	334c      	adds	r3, #76	; 0x4c
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	18d1      	adds	r1, r2, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4403      	add	r3, r0
 8005550:	334c      	adds	r3, #76	; 0x4c
 8005552:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <HCD_RXQLVL_IRQHandler+0x154>)
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d031      	beq.n	80055ce <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005580:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005588:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	461a      	mov	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	440b      	add	r3, r1
 80055aa:	3350      	adds	r3, #80	; 0x50
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f083 0301 	eor.w	r3, r3, #1
 80055b2:	b2d8      	uxtb	r0, r3
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	440b      	add	r3, r1
 80055c2:	3350      	adds	r3, #80	; 0x50
 80055c4:	4602      	mov	r2, r0
 80055c6:	701a      	strb	r2, [r3, #0]
      break;
 80055c8:	e001      	b.n	80055ce <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80055ce:	bf00      	nop
  }
}
 80055d0:	bf00      	nop
 80055d2:	3728      	adds	r7, #40	; 0x28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	1ff80000 	.word	0x1ff80000

080055dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005608:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d10b      	bne.n	800562c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d102      	bne.n	8005624 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f004 febe 	bl	800a3a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f043 0302 	orr.w	r3, r3, #2
 800562a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d132      	bne.n	800569c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f043 0308 	orr.w	r3, r3, #8
 800563c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b04      	cmp	r3, #4
 8005646:	d126      	bne.n	8005696 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d113      	bne.n	8005678 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005656:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800565a:	d106      	bne.n	800566a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2102      	movs	r1, #2
 8005662:	4618      	mov	r0, r3
 8005664:	f003 fb90 	bl	8008d88 <USB_InitFSLSPClkSel>
 8005668:	e011      	b.n	800568e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2101      	movs	r1, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f003 fb89 	bl	8008d88 <USB_InitFSLSPClkSel>
 8005676:	e00a      	b.n	800568e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d106      	bne.n	800568e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005686:	461a      	mov	r2, r3
 8005688:	f64e 2360 	movw	r3, #60000	; 0xea60
 800568c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f004 feb4 	bl	800a3fc <HAL_HCD_PortEnabled_Callback>
 8005694:	e002      	b.n	800569c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f004 febe 	bl	800a418 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d103      	bne.n	80056ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f043 0320 	orr.w	r3, r3, #32
 80056ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6013      	str	r3, [r2, #0]
}
 80056ba:	bf00      	nop
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e11f      	b.n	8005916 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb faf2 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2224      	movs	r2, #36	; 0x24
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005728:	f001 f94c 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 800572c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	4a7b      	ldr	r2, [pc, #492]	; (8005920 <HAL_I2C_Init+0x25c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d807      	bhi.n	8005748 <HAL_I2C_Init+0x84>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a7a      	ldr	r2, [pc, #488]	; (8005924 <HAL_I2C_Init+0x260>)
 800573c:	4293      	cmp	r3, r2
 800573e:	bf94      	ite	ls
 8005740:	2301      	movls	r3, #1
 8005742:	2300      	movhi	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	e006      	b.n	8005756 <HAL_I2C_Init+0x92>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4a77      	ldr	r2, [pc, #476]	; (8005928 <HAL_I2C_Init+0x264>)
 800574c:	4293      	cmp	r3, r2
 800574e:	bf94      	ite	ls
 8005750:	2301      	movls	r3, #1
 8005752:	2300      	movhi	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e0db      	b.n	8005916 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a72      	ldr	r2, [pc, #456]	; (800592c <HAL_I2C_Init+0x268>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	0c9b      	lsrs	r3, r3, #18
 8005768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	4a64      	ldr	r2, [pc, #400]	; (8005920 <HAL_I2C_Init+0x25c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d802      	bhi.n	8005798 <HAL_I2C_Init+0xd4>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	3301      	adds	r3, #1
 8005796:	e009      	b.n	80057ac <HAL_I2C_Init+0xe8>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	4a63      	ldr	r2, [pc, #396]	; (8005930 <HAL_I2C_Init+0x26c>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	099b      	lsrs	r3, r3, #6
 80057aa:	3301      	adds	r3, #1
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4956      	ldr	r1, [pc, #344]	; (8005920 <HAL_I2C_Init+0x25c>)
 80057c8:	428b      	cmp	r3, r1
 80057ca:	d80d      	bhi.n	80057e8 <HAL_I2C_Init+0x124>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1e59      	subs	r1, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057da:	3301      	adds	r3, #1
 80057dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	bf38      	it	cc
 80057e4:	2304      	movcc	r3, #4
 80057e6:	e04f      	b.n	8005888 <HAL_I2C_Init+0x1c4>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d111      	bne.n	8005814 <HAL_I2C_Init+0x150>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	1e58      	subs	r0, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6859      	ldr	r1, [r3, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	440b      	add	r3, r1
 80057fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005802:	3301      	adds	r3, #1
 8005804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e012      	b.n	800583a <HAL_I2C_Init+0x176>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	1e58      	subs	r0, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6859      	ldr	r1, [r3, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	0099      	lsls	r1, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	fbb0 f3f3 	udiv	r3, r0, r3
 800582a:	3301      	adds	r3, #1
 800582c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005830:	2b00      	cmp	r3, #0
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_I2C_Init+0x17e>
 800583e:	2301      	movs	r3, #1
 8005840:	e022      	b.n	8005888 <HAL_I2C_Init+0x1c4>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10e      	bne.n	8005868 <HAL_I2C_Init+0x1a4>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1e58      	subs	r0, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6859      	ldr	r1, [r3, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	440b      	add	r3, r1
 8005858:	fbb0 f3f3 	udiv	r3, r0, r3
 800585c:	3301      	adds	r3, #1
 800585e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005866:	e00f      	b.n	8005888 <HAL_I2C_Init+0x1c4>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	1e58      	subs	r0, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6859      	ldr	r1, [r3, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	0099      	lsls	r1, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	fbb0 f3f3 	udiv	r3, r0, r3
 800587e:	3301      	adds	r3, #1
 8005880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	6809      	ldr	r1, [r1, #0]
 800588c:	4313      	orrs	r3, r2
 800588e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6911      	ldr	r1, [r2, #16]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68d2      	ldr	r2, [r2, #12]
 80058c2:	4311      	orrs	r1, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	000186a0 	.word	0x000186a0
 8005924:	001e847f 	.word	0x001e847f
 8005928:	003d08ff 	.word	0x003d08ff
 800592c:	431bde83 	.word	0x431bde83
 8005930:	10624dd3 	.word	0x10624dd3

08005934 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b20      	cmp	r3, #32
 8005948:	d129      	bne.n	800599e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2224      	movs	r2, #36	; 0x24
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0210 	bic.w	r2, r2, #16
 8005970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0201 	orr.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d12a      	bne.n	8005a1c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2224      	movs	r2, #36	; 0x24
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0201 	bic.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80059e6:	89fb      	ldrh	r3, [r7, #14]
 80059e8:	f023 030f 	bic.w	r3, r3, #15
 80059ec:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	89fb      	ldrh	r3, [r7, #14]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	89fa      	ldrh	r2, [r7, #14]
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e0bf      	b.n	8005bbe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb fb32 	bl	80010bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a6e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6999      	ldr	r1, [r3, #24]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a84:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6899      	ldr	r1, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <HAL_LTDC_Init+0x19c>)
 8005aa0:	400b      	ands	r3, r1
 8005aa2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6899      	ldr	r1, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68d9      	ldr	r1, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <HAL_LTDC_Init+0x19c>)
 8005ace:	400b      	ands	r3, r1
 8005ad0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	041b      	lsls	r3, r3, #16
 8005ad8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68d9      	ldr	r1, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6919      	ldr	r1, [r3, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <HAL_LTDC_Init+0x19c>)
 8005afc:	400b      	ands	r3, r1
 8005afe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6919      	ldr	r1, [r3, #16]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6959      	ldr	r1, [r3, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <HAL_LTDC_Init+0x19c>)
 8005b2a:	400b      	ands	r3, r1
 8005b2c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6959      	ldr	r1, [r3, #20]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b5c:	041b      	lsls	r3, r3, #16
 8005b5e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0206 	orr.w	r2, r2, #6
 8005b9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	f000f800 	.word	0xf000f800

08005bcc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d023      	beq.n	8005c36 <HAL_LTDC_IRQHandler+0x6a>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01e      	beq.n	8005c36 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0204 	bic.w	r2, r2, #4
 8005c06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c16:	f043 0201 	orr.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2204      	movs	r2, #4
 8005c24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f86f 	bl	8005d14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d023      	beq.n	8005c88 <HAL_LTDC_IRQHandler+0xbc>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01e      	beq.n	8005c88 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0202 	bic.w	r2, r2, #2
 8005c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c68:	f043 0202 	orr.w	r2, r3, #2
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2204      	movs	r2, #4
 8005c76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f846 	bl	8005d14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01b      	beq.n	8005cca <HAL_LTDC_IRQHandler+0xfe>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d016      	beq.n	8005cca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f82f 	bl	8005d28 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01b      	beq.n	8005d0c <HAL_LTDC_IRQHandler+0x140>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0208 	bic.w	r2, r2, #8
 8005cec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2208      	movs	r2, #8
 8005cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f818 	bl	8005d3c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d50:	b5b0      	push	{r4, r5, r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_LTDC_ConfigLayer+0x1a>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e02c      	b.n	8005dc4 <HAL_LTDC_ConfigLayer+0x74>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2134      	movs	r1, #52	; 0x34
 8005d80:	fb01 f303 	mul.w	r3, r1, r3
 8005d84:	4413      	add	r3, r2
 8005d86:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	461d      	mov	r5, r3
 8005d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f83b 	bl	8005e20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2201      	movs	r2, #1
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bdb0      	pop	{r4, r5, r7, pc}

08005dcc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_LTDC_EnableDither+0x16>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e016      	b.n	8005e10 <HAL_LTDC_EnableDither+0x44>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <HAL_LTDC_EnableDither+0x50>)
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <HAL_LTDC_EnableDither+0x50>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40016800 	.word	0x40016800

08005e20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b089      	sub	sp, #36	; 0x24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	0c1b      	lsrs	r3, r3, #16
 8005e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e3c:	4413      	add	r3, r2
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	01db      	lsls	r3, r3, #7
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3384      	adds	r3, #132	; 0x84
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	4611      	mov	r1, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	01d2      	lsls	r2, r2, #7
 8005e5c:	440a      	add	r2, r1
 8005e5e:	3284      	adds	r2, #132	; 0x84
 8005e60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e76:	4413      	add	r3, r2
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	01db      	lsls	r3, r3, #7
 8005e84:	440b      	add	r3, r1
 8005e86:	3384      	adds	r3, #132	; 0x84
 8005e88:	4619      	mov	r1, r3
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e9e:	4413      	add	r3, r2
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	01db      	lsls	r3, r3, #7
 8005eae:	4413      	add	r3, r2
 8005eb0:	3384      	adds	r3, #132	; 0x84
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	01d2      	lsls	r2, r2, #7
 8005ebe:	440a      	add	r2, r1
 8005ec0:	3284      	adds	r2, #132	; 0x84
 8005ec2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ec6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed6:	4413      	add	r3, r2
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	01db      	lsls	r3, r3, #7
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3384      	adds	r3, #132	; 0x84
 8005ee8:	4619      	mov	r1, r3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	01db      	lsls	r3, r3, #7
 8005efa:	4413      	add	r3, r2
 8005efc:	3384      	adds	r3, #132	; 0x84
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	4611      	mov	r1, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	01d2      	lsls	r2, r2, #7
 8005f0a:	440a      	add	r2, r1
 8005f0c:	3284      	adds	r2, #132	; 0x84
 8005f0e:	f023 0307 	bic.w	r3, r3, #7
 8005f12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	01db      	lsls	r3, r3, #7
 8005f1e:	4413      	add	r3, r2
 8005f20:	3384      	adds	r3, #132	; 0x84
 8005f22:	461a      	mov	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f3a:	041b      	lsls	r3, r3, #16
 8005f3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	061b      	lsls	r3, r3, #24
 8005f44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	01db      	lsls	r3, r3, #7
 8005f50:	4413      	add	r3, r2
 8005f52:	3384      	adds	r3, #132	; 0x84
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	4413      	add	r3, r2
 8005f62:	3384      	adds	r3, #132	; 0x84
 8005f64:	461a      	mov	r2, r3
 8005f66:	2300      	movs	r3, #0
 8005f68:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f70:	461a      	mov	r2, r3
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	431a      	orrs	r2, r3
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	01db      	lsls	r3, r3, #7
 8005f84:	440b      	add	r3, r1
 8005f86:	3384      	adds	r3, #132	; 0x84
 8005f88:	4619      	mov	r1, r3
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	01db      	lsls	r3, r3, #7
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3384      	adds	r3, #132	; 0x84
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	01d2      	lsls	r2, r2, #7
 8005faa:	440a      	add	r2, r1
 8005fac:	3284      	adds	r2, #132	; 0x84
 8005fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fb2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	01db      	lsls	r3, r3, #7
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3384      	adds	r3, #132	; 0x84
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	01db      	lsls	r3, r3, #7
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3384      	adds	r3, #132	; 0x84
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	01d2      	lsls	r2, r2, #7
 8005fe4:	440a      	add	r2, r1
 8005fe6:	3284      	adds	r2, #132	; 0x84
 8005fe8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005fec:	f023 0307 	bic.w	r3, r3, #7
 8005ff0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	6809      	ldr	r1, [r1, #0]
 8005ffe:	4608      	mov	r0, r1
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	01c9      	lsls	r1, r1, #7
 8006004:	4401      	add	r1, r0
 8006006:	3184      	adds	r1, #132	; 0x84
 8006008:	4313      	orrs	r3, r2
 800600a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	01db      	lsls	r3, r3, #7
 8006016:	4413      	add	r3, r2
 8006018:	3384      	adds	r3, #132	; 0x84
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	01db      	lsls	r3, r3, #7
 8006026:	4413      	add	r3, r2
 8006028:	3384      	adds	r3, #132	; 0x84
 800602a:	461a      	mov	r2, r3
 800602c:	2300      	movs	r3, #0
 800602e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	01db      	lsls	r3, r3, #7
 800603a:	4413      	add	r3, r2
 800603c:	3384      	adds	r3, #132	; 0x84
 800603e:	461a      	mov	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800604e:	2304      	movs	r3, #4
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	e01b      	b.n	800608c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d102      	bne.n	8006062 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800605c:	2303      	movs	r3, #3
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	e014      	b.n	800608c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b04      	cmp	r3, #4
 8006068:	d00b      	beq.n	8006082 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800606e:	2b02      	cmp	r3, #2
 8006070:	d007      	beq.n	8006082 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006076:	2b03      	cmp	r3, #3
 8006078:	d003      	beq.n	8006082 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800607e:	2b07      	cmp	r3, #7
 8006080:	d102      	bne.n	8006088 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006082:	2302      	movs	r3, #2
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	e001      	b.n	800608c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006088:	2301      	movs	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	01db      	lsls	r3, r3, #7
 8006096:	4413      	add	r3, r2
 8006098:	3384      	adds	r3, #132	; 0x84
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	4611      	mov	r1, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	01d2      	lsls	r2, r2, #7
 80060a6:	440a      	add	r2, r1
 80060a8:	3284      	adds	r2, #132	; 0x84
 80060aa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80060ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	041a      	lsls	r2, r3, #16
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6859      	ldr	r1, [r3, #4]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	1acb      	subs	r3, r1, r3
 80060c6:	69f9      	ldr	r1, [r7, #28]
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	3303      	adds	r3, #3
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	6809      	ldr	r1, [r1, #0]
 80060d2:	4608      	mov	r0, r1
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	01c9      	lsls	r1, r1, #7
 80060d8:	4401      	add	r1, r0
 80060da:	3184      	adds	r1, #132	; 0x84
 80060dc:	4313      	orrs	r3, r2
 80060de:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	01db      	lsls	r3, r3, #7
 80060ea:	4413      	add	r3, r2
 80060ec:	3384      	adds	r3, #132	; 0x84
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	4611      	mov	r1, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	01d2      	lsls	r2, r2, #7
 80060fa:	440a      	add	r2, r1
 80060fc:	3284      	adds	r2, #132	; 0x84
 80060fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006102:	f023 0307 	bic.w	r3, r3, #7
 8006106:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	01db      	lsls	r3, r3, #7
 8006112:	4413      	add	r3, r2
 8006114:	3384      	adds	r3, #132	; 0x84
 8006116:	461a      	mov	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	01db      	lsls	r3, r3, #7
 8006128:	4413      	add	r3, r2
 800612a:	3384      	adds	r3, #132	; 0x84
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	4611      	mov	r1, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	01d2      	lsls	r2, r2, #7
 8006138:	440a      	add	r2, r1
 800613a:	3284      	adds	r2, #132	; 0x84
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	6013      	str	r3, [r2, #0]
}
 8006142:	bf00      	nop
 8006144:	3724      	adds	r7, #36	; 0x24
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e25b      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d075      	beq.n	800625a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800616e:	4ba3      	ldr	r3, [pc, #652]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b04      	cmp	r3, #4
 8006178:	d00c      	beq.n	8006194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800617a:	4ba0      	ldr	r3, [pc, #640]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006182:	2b08      	cmp	r3, #8
 8006184:	d112      	bne.n	80061ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006186:	4b9d      	ldr	r3, [pc, #628]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006192:	d10b      	bne.n	80061ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006194:	4b99      	ldr	r3, [pc, #612]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d05b      	beq.n	8006258 <HAL_RCC_OscConfig+0x108>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d157      	bne.n	8006258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e236      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b4:	d106      	bne.n	80061c4 <HAL_RCC_OscConfig+0x74>
 80061b6:	4b91      	ldr	r3, [pc, #580]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a90      	ldr	r2, [pc, #576]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e01d      	b.n	8006200 <HAL_RCC_OscConfig+0xb0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061cc:	d10c      	bne.n	80061e8 <HAL_RCC_OscConfig+0x98>
 80061ce:	4b8b      	ldr	r3, [pc, #556]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a8a      	ldr	r2, [pc, #552]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	4b88      	ldr	r3, [pc, #544]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a87      	ldr	r2, [pc, #540]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e00b      	b.n	8006200 <HAL_RCC_OscConfig+0xb0>
 80061e8:	4b84      	ldr	r3, [pc, #528]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a83      	ldr	r2, [pc, #524]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	4b81      	ldr	r3, [pc, #516]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a80      	ldr	r2, [pc, #512]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80061fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d013      	beq.n	8006230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006208:	f7fc ff20 	bl	800304c <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006210:	f7fc ff1c 	bl	800304c <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b64      	cmp	r3, #100	; 0x64
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e1fb      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006222:	4b76      	ldr	r3, [pc, #472]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0f0      	beq.n	8006210 <HAL_RCC_OscConfig+0xc0>
 800622e:	e014      	b.n	800625a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006230:	f7fc ff0c 	bl	800304c <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006238:	f7fc ff08 	bl	800304c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b64      	cmp	r3, #100	; 0x64
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e1e7      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800624a:	4b6c      	ldr	r3, [pc, #432]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0xe8>
 8006256:	e000      	b.n	800625a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d063      	beq.n	800632e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006266:	4b65      	ldr	r3, [pc, #404]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 030c 	and.w	r3, r3, #12
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006272:	4b62      	ldr	r3, [pc, #392]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800627a:	2b08      	cmp	r3, #8
 800627c:	d11c      	bne.n	80062b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800627e:	4b5f      	ldr	r3, [pc, #380]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d116      	bne.n	80062b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800628a:	4b5c      	ldr	r3, [pc, #368]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <HAL_RCC_OscConfig+0x152>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d001      	beq.n	80062a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e1bb      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a2:	4b56      	ldr	r3, [pc, #344]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4952      	ldr	r1, [pc, #328]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062b6:	e03a      	b.n	800632e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d020      	beq.n	8006302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062c0:	4b4f      	ldr	r3, [pc, #316]	; (8006400 <HAL_RCC_OscConfig+0x2b0>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fc fec1 	bl	800304c <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ce:	f7fc febd 	bl	800304c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e19c      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e0:	4b46      	ldr	r3, [pc, #280]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ec:	4b43      	ldr	r3, [pc, #268]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	4940      	ldr	r1, [pc, #256]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	600b      	str	r3, [r1, #0]
 8006300:	e015      	b.n	800632e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006302:	4b3f      	ldr	r3, [pc, #252]	; (8006400 <HAL_RCC_OscConfig+0x2b0>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006308:	f7fc fea0 	bl	800304c <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006310:	f7fc fe9c 	bl	800304c <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e17b      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006322:	4b36      	ldr	r3, [pc, #216]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f0      	bne.n	8006310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d030      	beq.n	800639c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d016      	beq.n	8006370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <HAL_RCC_OscConfig+0x2b4>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006348:	f7fc fe80 	bl	800304c <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006350:	f7fc fe7c 	bl	800304c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e15b      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006362:	4b26      	ldr	r3, [pc, #152]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0f0      	beq.n	8006350 <HAL_RCC_OscConfig+0x200>
 800636e:	e015      	b.n	800639c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006370:	4b24      	ldr	r3, [pc, #144]	; (8006404 <HAL_RCC_OscConfig+0x2b4>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006376:	f7fc fe69 	bl	800304c <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800637e:	f7fc fe65 	bl	800304c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e144      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 8006392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f0      	bne.n	800637e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80a0 	beq.w	80064ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10f      	bne.n	80063da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	4a0e      	ldr	r2, [pc, #56]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <HAL_RCC_OscConfig+0x2ac>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063d6:	2301      	movs	r3, #1
 80063d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063da:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <HAL_RCC_OscConfig+0x2b8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d121      	bne.n	800642a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063e6:	4b08      	ldr	r3, [pc, #32]	; (8006408 <HAL_RCC_OscConfig+0x2b8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a07      	ldr	r2, [pc, #28]	; (8006408 <HAL_RCC_OscConfig+0x2b8>)
 80063ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063f2:	f7fc fe2b 	bl	800304c <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063f8:	e011      	b.n	800641e <HAL_RCC_OscConfig+0x2ce>
 80063fa:	bf00      	nop
 80063fc:	40023800 	.word	0x40023800
 8006400:	42470000 	.word	0x42470000
 8006404:	42470e80 	.word	0x42470e80
 8006408:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800640c:	f7fc fe1e 	bl	800304c <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e0fd      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641e:	4b81      	ldr	r3, [pc, #516]	; (8006624 <HAL_RCC_OscConfig+0x4d4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d106      	bne.n	8006440 <HAL_RCC_OscConfig+0x2f0>
 8006432:	4b7d      	ldr	r3, [pc, #500]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	4a7c      	ldr	r2, [pc, #496]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 8006438:	f043 0301 	orr.w	r3, r3, #1
 800643c:	6713      	str	r3, [r2, #112]	; 0x70
 800643e:	e01c      	b.n	800647a <HAL_RCC_OscConfig+0x32a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	2b05      	cmp	r3, #5
 8006446:	d10c      	bne.n	8006462 <HAL_RCC_OscConfig+0x312>
 8006448:	4b77      	ldr	r3, [pc, #476]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 800644a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644c:	4a76      	ldr	r2, [pc, #472]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 800644e:	f043 0304 	orr.w	r3, r3, #4
 8006452:	6713      	str	r3, [r2, #112]	; 0x70
 8006454:	4b74      	ldr	r3, [pc, #464]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 8006456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006458:	4a73      	ldr	r2, [pc, #460]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	6713      	str	r3, [r2, #112]	; 0x70
 8006460:	e00b      	b.n	800647a <HAL_RCC_OscConfig+0x32a>
 8006462:	4b71      	ldr	r3, [pc, #452]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006466:	4a70      	ldr	r2, [pc, #448]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	6713      	str	r3, [r2, #112]	; 0x70
 800646e:	4b6e      	ldr	r3, [pc, #440]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	4a6d      	ldr	r2, [pc, #436]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 8006474:	f023 0304 	bic.w	r3, r3, #4
 8006478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d015      	beq.n	80064ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006482:	f7fc fde3 	bl	800304c <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006488:	e00a      	b.n	80064a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800648a:	f7fc fddf 	bl	800304c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f241 3288 	movw	r2, #5000	; 0x1388
 8006498:	4293      	cmp	r3, r2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e0bc      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a0:	4b61      	ldr	r3, [pc, #388]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0ee      	beq.n	800648a <HAL_RCC_OscConfig+0x33a>
 80064ac:	e014      	b.n	80064d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ae:	f7fc fdcd 	bl	800304c <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b4:	e00a      	b.n	80064cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064b6:	f7fc fdc9 	bl	800304c <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0a6      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064cc:	4b56      	ldr	r3, [pc, #344]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1ee      	bne.n	80064b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d105      	bne.n	80064ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064de:	4b52      	ldr	r3, [pc, #328]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	4a51      	ldr	r2, [pc, #324]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 80064e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 8092 	beq.w	8006618 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064f4:	4b4c      	ldr	r3, [pc, #304]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 030c 	and.w	r3, r3, #12
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d05c      	beq.n	80065ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d141      	bne.n	800658c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006508:	4b48      	ldr	r3, [pc, #288]	; (800662c <HAL_RCC_OscConfig+0x4dc>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800650e:	f7fc fd9d 	bl	800304c <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006514:	e008      	b.n	8006528 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006516:	f7fc fd99 	bl	800304c <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e078      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006528:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1f0      	bne.n	8006516 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	019b      	lsls	r3, r3, #6
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	085b      	lsrs	r3, r3, #1
 800654c:	3b01      	subs	r3, #1
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	061b      	lsls	r3, r3, #24
 8006558:	4933      	ldr	r1, [pc, #204]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 800655a:	4313      	orrs	r3, r2
 800655c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800655e:	4b33      	ldr	r3, [pc, #204]	; (800662c <HAL_RCC_OscConfig+0x4dc>)
 8006560:	2201      	movs	r2, #1
 8006562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006564:	f7fc fd72 	bl	800304c <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800656c:	f7fc fd6e 	bl	800304c <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e04d      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657e:	4b2a      	ldr	r3, [pc, #168]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f0      	beq.n	800656c <HAL_RCC_OscConfig+0x41c>
 800658a:	e045      	b.n	8006618 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658c:	4b27      	ldr	r3, [pc, #156]	; (800662c <HAL_RCC_OscConfig+0x4dc>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006592:	f7fc fd5b 	bl	800304c <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800659a:	f7fc fd57 	bl	800304c <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e036      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ac:	4b1e      	ldr	r3, [pc, #120]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f0      	bne.n	800659a <HAL_RCC_OscConfig+0x44a>
 80065b8:	e02e      	b.n	8006618 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e029      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065c6:	4b18      	ldr	r3, [pc, #96]	; (8006628 <HAL_RCC_OscConfig+0x4d8>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d11c      	bne.n	8006614 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d115      	bne.n	8006614 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065ee:	4013      	ands	r3, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10d      	bne.n	8006614 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006602:	429a      	cmp	r2, r3
 8006604:	d106      	bne.n	8006614 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006610:	429a      	cmp	r2, r3
 8006612:	d001      	beq.n	8006618 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40007000 	.word	0x40007000
 8006628:	40023800 	.word	0x40023800
 800662c:	42470060 	.word	0x42470060

08006630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e0cc      	b.n	80067de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006644:	4b68      	ldr	r3, [pc, #416]	; (80067e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d90c      	bls.n	800666c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006652:	4b65      	ldr	r3, [pc, #404]	; (80067e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	b2d2      	uxtb	r2, r2
 8006658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800665a:	4b63      	ldr	r3, [pc, #396]	; (80067e8 <HAL_RCC_ClockConfig+0x1b8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d001      	beq.n	800666c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0b8      	b.n	80067de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d020      	beq.n	80066ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006684:	4b59      	ldr	r3, [pc, #356]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	4a58      	ldr	r2, [pc, #352]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 800668a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800668e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800669c:	4b53      	ldr	r3, [pc, #332]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	4a52      	ldr	r2, [pc, #328]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a8:	4b50      	ldr	r3, [pc, #320]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	494d      	ldr	r1, [pc, #308]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d044      	beq.n	8006750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d107      	bne.n	80066de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ce:	4b47      	ldr	r3, [pc, #284]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d119      	bne.n	800670e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e07f      	b.n	80067de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d003      	beq.n	80066ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d107      	bne.n	80066fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ee:	4b3f      	ldr	r3, [pc, #252]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e06f      	b.n	80067de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066fe:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e067      	b.n	80067de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800670e:	4b37      	ldr	r3, [pc, #220]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f023 0203 	bic.w	r2, r3, #3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4934      	ldr	r1, [pc, #208]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 800671c:	4313      	orrs	r3, r2
 800671e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006720:	f7fc fc94 	bl	800304c <HAL_GetTick>
 8006724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006726:	e00a      	b.n	800673e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006728:	f7fc fc90 	bl	800304c <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	f241 3288 	movw	r2, #5000	; 0x1388
 8006736:	4293      	cmp	r3, r2
 8006738:	d901      	bls.n	800673e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e04f      	b.n	80067de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673e:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 020c 	and.w	r2, r3, #12
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	429a      	cmp	r2, r3
 800674e:	d1eb      	bne.n	8006728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d20c      	bcs.n	8006778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675e:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006766:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d001      	beq.n	8006778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e032      	b.n	80067de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006784:	4b19      	ldr	r3, [pc, #100]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4916      	ldr	r1, [pc, #88]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	4313      	orrs	r3, r2
 8006794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067a2:	4b12      	ldr	r3, [pc, #72]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	490e      	ldr	r1, [pc, #56]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067b6:	f000 f821 	bl	80067fc <HAL_RCC_GetSysClockFreq>
 80067ba:	4601      	mov	r1, r0
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <HAL_RCC_ClockConfig+0x1bc>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	091b      	lsrs	r3, r3, #4
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	4a0a      	ldr	r2, [pc, #40]	; (80067f0 <HAL_RCC_ClockConfig+0x1c0>)
 80067c8:	5cd3      	ldrb	r3, [r2, r3]
 80067ca:	fa21 f303 	lsr.w	r3, r1, r3
 80067ce:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067d2:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <HAL_RCC_ClockConfig+0x1c8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fb f81a 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	40023c00 	.word	0x40023c00
 80067ec:	40023800 	.word	0x40023800
 80067f0:	0800a640 	.word	0x0800a640
 80067f4:	20000000 	.word	0x20000000
 80067f8:	2000004c 	.word	0x2000004c

080067fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	2300      	movs	r3, #0
 800680c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006812:	4b63      	ldr	r3, [pc, #396]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 030c 	and.w	r3, r3, #12
 800681a:	2b04      	cmp	r3, #4
 800681c:	d007      	beq.n	800682e <HAL_RCC_GetSysClockFreq+0x32>
 800681e:	2b08      	cmp	r3, #8
 8006820:	d008      	beq.n	8006834 <HAL_RCC_GetSysClockFreq+0x38>
 8006822:	2b00      	cmp	r3, #0
 8006824:	f040 80b4 	bne.w	8006990 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006828:	4b5e      	ldr	r3, [pc, #376]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800682a:	60bb      	str	r3, [r7, #8]
       break;
 800682c:	e0b3      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800682e:	4b5e      	ldr	r3, [pc, #376]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006830:	60bb      	str	r3, [r7, #8]
      break;
 8006832:	e0b0      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006834:	4b5a      	ldr	r3, [pc, #360]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800683c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800683e:	4b58      	ldr	r3, [pc, #352]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d04a      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800684a:	4b55      	ldr	r3, [pc, #340]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	099b      	lsrs	r3, r3, #6
 8006850:	f04f 0400 	mov.w	r4, #0
 8006854:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	ea03 0501 	and.w	r5, r3, r1
 8006860:	ea04 0602 	and.w	r6, r4, r2
 8006864:	4629      	mov	r1, r5
 8006866:	4632      	mov	r2, r6
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	f04f 0400 	mov.w	r4, #0
 8006870:	0154      	lsls	r4, r2, #5
 8006872:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006876:	014b      	lsls	r3, r1, #5
 8006878:	4619      	mov	r1, r3
 800687a:	4622      	mov	r2, r4
 800687c:	1b49      	subs	r1, r1, r5
 800687e:	eb62 0206 	sbc.w	r2, r2, r6
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	f04f 0400 	mov.w	r4, #0
 800688a:	0194      	lsls	r4, r2, #6
 800688c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006890:	018b      	lsls	r3, r1, #6
 8006892:	1a5b      	subs	r3, r3, r1
 8006894:	eb64 0402 	sbc.w	r4, r4, r2
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	00e2      	lsls	r2, r4, #3
 80068a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80068a6:	00d9      	lsls	r1, r3, #3
 80068a8:	460b      	mov	r3, r1
 80068aa:	4614      	mov	r4, r2
 80068ac:	195b      	adds	r3, r3, r5
 80068ae:	eb44 0406 	adc.w	r4, r4, r6
 80068b2:	f04f 0100 	mov.w	r1, #0
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	0262      	lsls	r2, r4, #9
 80068bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80068c0:	0259      	lsls	r1, r3, #9
 80068c2:	460b      	mov	r3, r1
 80068c4:	4614      	mov	r4, r2
 80068c6:	4618      	mov	r0, r3
 80068c8:	4621      	mov	r1, r4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f04f 0400 	mov.w	r4, #0
 80068d0:	461a      	mov	r2, r3
 80068d2:	4623      	mov	r3, r4
 80068d4:	f7f9 fc8c 	bl	80001f0 <__aeabi_uldivmod>
 80068d8:	4603      	mov	r3, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	e049      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e0:	4b2f      	ldr	r3, [pc, #188]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	099b      	lsrs	r3, r3, #6
 80068e6:	f04f 0400 	mov.w	r4, #0
 80068ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	ea03 0501 	and.w	r5, r3, r1
 80068f6:	ea04 0602 	and.w	r6, r4, r2
 80068fa:	4629      	mov	r1, r5
 80068fc:	4632      	mov	r2, r6
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	f04f 0400 	mov.w	r4, #0
 8006906:	0154      	lsls	r4, r2, #5
 8006908:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800690c:	014b      	lsls	r3, r1, #5
 800690e:	4619      	mov	r1, r3
 8006910:	4622      	mov	r2, r4
 8006912:	1b49      	subs	r1, r1, r5
 8006914:	eb62 0206 	sbc.w	r2, r2, r6
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	f04f 0400 	mov.w	r4, #0
 8006920:	0194      	lsls	r4, r2, #6
 8006922:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006926:	018b      	lsls	r3, r1, #6
 8006928:	1a5b      	subs	r3, r3, r1
 800692a:	eb64 0402 	sbc.w	r4, r4, r2
 800692e:	f04f 0100 	mov.w	r1, #0
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	00e2      	lsls	r2, r4, #3
 8006938:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800693c:	00d9      	lsls	r1, r3, #3
 800693e:	460b      	mov	r3, r1
 8006940:	4614      	mov	r4, r2
 8006942:	195b      	adds	r3, r3, r5
 8006944:	eb44 0406 	adc.w	r4, r4, r6
 8006948:	f04f 0100 	mov.w	r1, #0
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	02a2      	lsls	r2, r4, #10
 8006952:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006956:	0299      	lsls	r1, r3, #10
 8006958:	460b      	mov	r3, r1
 800695a:	4614      	mov	r4, r2
 800695c:	4618      	mov	r0, r3
 800695e:	4621      	mov	r1, r4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f04f 0400 	mov.w	r4, #0
 8006966:	461a      	mov	r2, r3
 8006968:	4623      	mov	r3, r4
 800696a:	f7f9 fc41 	bl	80001f0 <__aeabi_uldivmod>
 800696e:	4603      	mov	r3, r0
 8006970:	460c      	mov	r4, r1
 8006972:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	0c1b      	lsrs	r3, r3, #16
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	3301      	adds	r3, #1
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	fbb2 f3f3 	udiv	r3, r2, r3
 800698c:	60bb      	str	r3, [r7, #8]
      break;
 800698e:	e002      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006990:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006992:	60bb      	str	r3, [r7, #8]
      break;
 8006994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006996:	68bb      	ldr	r3, [r7, #8]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a0:	40023800 	.word	0x40023800
 80069a4:	00f42400 	.word	0x00f42400
 80069a8:	007a1200 	.word	0x007a1200

080069ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000000 	.word	0x20000000

080069c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069c8:	f7ff fff0 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069cc:	4601      	mov	r1, r0
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0a9b      	lsrs	r3, r3, #10
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	4a03      	ldr	r2, [pc, #12]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069da:	5cd3      	ldrb	r3, [r2, r3]
 80069dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40023800 	.word	0x40023800
 80069e8:	0800a650 	.word	0x0800a650

080069ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069f0:	f7ff ffdc 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069f4:	4601      	mov	r1, r0
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	0b5b      	lsrs	r3, r3, #13
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	4a03      	ldr	r2, [pc, #12]	; (8006a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a02:	5cd3      	ldrb	r3, [r2, r3]
 8006a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	0800a650 	.word	0x0800a650

08006a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	220f      	movs	r2, #15
 8006a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a24:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_RCC_GetClockConfig+0x5c>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0203 	and.w	r2, r3, #3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a30:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <HAL_RCC_GetClockConfig+0x5c>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <HAL_RCC_GetClockConfig+0x5c>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a48:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <HAL_RCC_GetClockConfig+0x5c>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a56:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <HAL_RCC_GetClockConfig+0x60>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 020f 	and.w	r2, r3, #15
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	601a      	str	r2, [r3, #0]
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40023800 	.word	0x40023800
 8006a74:	40023c00 	.word	0x40023c00

08006a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d075      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aac:	4bad      	ldr	r3, [pc, #692]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab2:	f7fc facb 	bl	800304c <HAL_GetTick>
 8006ab6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aba:	f7fc fac7 	bl	800304c <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e18b      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006acc:	4ba6      	ldr	r3, [pc, #664]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f0      	bne.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	019a      	lsls	r2, r3, #6
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	071b      	lsls	r3, r3, #28
 8006af0:	499d      	ldr	r1, [pc, #628]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01f      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b04:	4b98      	ldr	r3, [pc, #608]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0a:	0f1b      	lsrs	r3, r3, #28
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	019a      	lsls	r2, r3, #6
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	061b      	lsls	r3, r3, #24
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	071b      	lsls	r3, r3, #28
 8006b24:	4990      	ldr	r1, [pc, #576]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b2c:	4b8e      	ldr	r3, [pc, #568]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b32:	f023 021f 	bic.w	r2, r3, #31
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	498a      	ldr	r1, [pc, #552]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	019a      	lsls	r2, r3, #6
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	061b      	lsls	r3, r3, #24
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	071b      	lsls	r3, r3, #28
 8006b64:	4980      	ldr	r1, [pc, #512]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b6c:	4b7d      	ldr	r3, [pc, #500]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b72:	f7fc fa6b 	bl	800304c <HAL_GetTick>
 8006b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b78:	e008      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b7a:	f7fc fa67 	bl	800304c <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e12b      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b8c:	4b76      	ldr	r3, [pc, #472]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f0      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d079      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bb0:	4b6e      	ldr	r3, [pc, #440]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bb6:	f7fc fa49 	bl	800304c <HAL_GetTick>
 8006bba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bbe:	f7fc fa45 	bl	800304c <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e109      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bd0:	4b65      	ldr	r3, [pc, #404]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bdc:	d0ef      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d020      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bea:	4b5f      	ldr	r3, [pc, #380]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	0f1b      	lsrs	r3, r3, #28
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	019a      	lsls	r2, r3, #6
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	061b      	lsls	r3, r3, #24
 8006c04:	431a      	orrs	r2, r3
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	071b      	lsls	r3, r3, #28
 8006c0a:	4957      	ldr	r1, [pc, #348]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c12:	4b55      	ldr	r3, [pc, #340]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	4950      	ldr	r1, [pc, #320]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01e      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c38:	4b4b      	ldr	r3, [pc, #300]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3e:	0e1b      	lsrs	r3, r3, #24
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	019a      	lsls	r2, r3, #6
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	061b      	lsls	r3, r3, #24
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	071b      	lsls	r3, r3, #28
 8006c58:	4943      	ldr	r1, [pc, #268]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c60:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	493e      	ldr	r1, [pc, #248]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c76:	4b3d      	ldr	r3, [pc, #244]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c7c:	f7fc f9e6 	bl	800304c <HAL_GetTick>
 8006c80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c84:	f7fc f9e2 	bl	800304c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e0a6      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c96:	4b34      	ldr	r3, [pc, #208]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca2:	d1ef      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 808d 	beq.w	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	4b2c      	ldr	r3, [pc, #176]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	4a2b      	ldr	r2, [pc, #172]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8006cc2:	4b29      	ldr	r3, [pc, #164]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006cce:	4b28      	ldr	r3, [pc, #160]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cda:	f7fc f9b7 	bl	800304c <HAL_GetTick>
 8006cde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ce2:	f7fc f9b3 	bl	800304c <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e077      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0f0      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d00:	4b19      	ldr	r3, [pc, #100]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d039      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d032      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d28:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d2e:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d34:	4a0c      	ldr	r2, [pc, #48]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d11e      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d46:	f7fc f981 	bl	800304c <HAL_GetTick>
 8006d4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d4c:	e014      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d4e:	f7fc f97d 	bl	800304c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d90b      	bls.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e03f      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006d64:	42470068 	.word	0x42470068
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	42470070 	.word	0x42470070
 8006d70:	40007000 	.word	0x40007000
 8006d74:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d78:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0e4      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d90:	d10d      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006d92:	4b16      	ldr	r3, [pc, #88]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da6:	4911      	ldr	r1, [pc, #68]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	608b      	str	r3, [r1, #8]
 8006dac:	e005      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	4a0e      	ldr	r2, [pc, #56]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006db4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006db8:	6093      	str	r3, [r2, #8]
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc6:	4909      	ldr	r1, [pc, #36]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006dde:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006de0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40023800 	.word	0x40023800
 8006df0:	424711e0 	.word	0x424711e0

08006df4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e025      	b.n	8006e54 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7f9 fdf3 	bl	8000a08 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f001 fdb1 	bl	800899c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	f001 fe1c 	bl	8008a82 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d101      	bne.n	8006e78 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006e74:	2302      	movs	r3, #2
 8006e76:	e018      	b.n	8006eaa <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 fe79 	bl	8008b80 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d104      	bne.n	8006ea0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2205      	movs	r2, #5
 8006e9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006e9e:	e003      	b.n	8006ea8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d101      	bne.n	8006ecc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e00e      	b.n	8006eea <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fe8c 	bl	8008bf8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e056      	b.n	8006fb2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fa fbe4 	bl	80016ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	ea42 0103 	orr.w	r1, r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	0c1b      	lsrs	r3, r3, #16
 8006f82:	f003 0104 	and.w	r1, r3, #4
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69da      	ldr	r2, [r3, #28]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e01a      	b.n	8007002 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7fa fbc9 	bl	800177c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b088      	sub	sp, #32
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_Transmit+0x22>
 8007028:	2302      	movs	r3, #2
 800702a:	e11e      	b.n	800726a <HAL_SPI_Transmit+0x260>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007034:	f7fc f80a 	bl	800304c <HAL_GetTick>
 8007038:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d002      	beq.n	8007050 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800704e:	e103      	b.n	8007258 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_SPI_Transmit+0x52>
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007060:	e0fa      	b.n	8007258 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2203      	movs	r2, #3
 8007066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	88fa      	ldrh	r2, [r7, #6]
 800707a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a8:	d107      	bne.n	80070ba <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b40      	cmp	r3, #64	; 0x40
 80070c6:	d007      	beq.n	80070d8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e0:	d14b      	bne.n	800717a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_SPI_Transmit+0xe6>
 80070ea:	8afb      	ldrh	r3, [r7, #22]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d13e      	bne.n	800716e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	881a      	ldrh	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	1c9a      	adds	r2, r3, #2
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007114:	e02b      	b.n	800716e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b02      	cmp	r3, #2
 8007122:	d112      	bne.n	800714a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007128:	881a      	ldrh	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	1c9a      	adds	r2, r3, #2
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	86da      	strh	r2, [r3, #54]	; 0x36
 8007148:	e011      	b.n	800716e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800714a:	f7fb ff7f 	bl	800304c <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d803      	bhi.n	8007162 <HAL_SPI_Transmit+0x158>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d102      	bne.n	8007168 <HAL_SPI_Transmit+0x15e>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d102      	bne.n	800716e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800716c:	e074      	b.n	8007258 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1ce      	bne.n	8007116 <HAL_SPI_Transmit+0x10c>
 8007178:	e04c      	b.n	8007214 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_SPI_Transmit+0x17e>
 8007182:	8afb      	ldrh	r3, [r7, #22]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d140      	bne.n	800720a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	330c      	adds	r3, #12
 8007192:	7812      	ldrb	r2, [r2, #0]
 8007194:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071ae:	e02c      	b.n	800720a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d113      	bne.n	80071e6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	7812      	ldrb	r2, [r2, #0]
 80071ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80071e4:	e011      	b.n	800720a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e6:	f7fb ff31 	bl	800304c <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d803      	bhi.n	80071fe <HAL_SPI_Transmit+0x1f4>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d102      	bne.n	8007204 <HAL_SPI_Transmit+0x1fa>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007208:	e026      	b.n	8007258 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800720e:	b29b      	uxth	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1cd      	bne.n	80071b0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fbb3 	bl	8007984 <SPI_EndRxTxTransaction>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007232:	2300      	movs	r3, #0
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	77fb      	strb	r3, [r7, #31]
 8007254:	e000      	b.n	8007258 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007256:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007268:	7ffb      	ldrb	r3, [r7, #31]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b088      	sub	sp, #32
 8007276:	af02      	add	r7, sp, #8
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728e:	d112      	bne.n	80072b6 <HAL_SPI_Receive+0x44>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10e      	bne.n	80072b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2204      	movs	r2, #4
 800729c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072a0:	88fa      	ldrh	r2, [r7, #6]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f8e9 	bl	8007484 <HAL_SPI_TransmitReceive>
 80072b2:	4603      	mov	r3, r0
 80072b4:	e0e2      	b.n	800747c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_SPI_Receive+0x52>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e0db      	b.n	800747c <HAL_SPI_Receive+0x20a>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072cc:	f7fb febe 	bl	800304c <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d002      	beq.n	80072e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072de:	2302      	movs	r3, #2
 80072e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072e2:	e0c2      	b.n	800746a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_SPI_Receive+0x7e>
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072f4:	e0b9      	b.n	800746a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2204      	movs	r2, #4
 80072fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	88fa      	ldrh	r2, [r7, #6]
 800730e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	88fa      	ldrh	r2, [r7, #6]
 8007314:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800733c:	d107      	bne.n	800734e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800734c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d007      	beq.n	800736c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d162      	bne.n	800743a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007374:	e02e      	b.n	80073d4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b01      	cmp	r3, #1
 8007382:	d115      	bne.n	80073b0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f103 020c 	add.w	r2, r3, #12
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	7812      	ldrb	r2, [r2, #0]
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073ae:	e011      	b.n	80073d4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073b0:	f7fb fe4c 	bl	800304c <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d803      	bhi.n	80073c8 <HAL_SPI_Receive+0x156>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d102      	bne.n	80073ce <HAL_SPI_Receive+0x15c>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073d2:	e04a      	b.n	800746a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1cb      	bne.n	8007376 <HAL_SPI_Receive+0x104>
 80073de:	e031      	b.n	8007444 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d113      	bne.n	8007416 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	b292      	uxth	r2, r2
 80073fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	1c9a      	adds	r2, r3, #2
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007414:	e011      	b.n	800743a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007416:	f7fb fe19 	bl	800304c <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d803      	bhi.n	800742e <HAL_SPI_Receive+0x1bc>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d102      	bne.n	8007434 <HAL_SPI_Receive+0x1c2>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007438:	e017      	b.n	800746a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743e:	b29b      	uxth	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1cd      	bne.n	80073e0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fa35 	bl	80078b8 <SPI_EndRxTransaction>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2220      	movs	r2, #32
 8007458:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	75fb      	strb	r3, [r7, #23]
 8007466:	e000      	b.n	800746a <HAL_SPI_Receive+0x1f8>
  }

error :
 8007468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08c      	sub	sp, #48	; 0x30
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007492:	2301      	movs	r3, #1
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_SPI_TransmitReceive+0x26>
 80074a6:	2302      	movs	r3, #2
 80074a8:	e18a      	b.n	80077c0 <HAL_SPI_TransmitReceive+0x33c>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074b2:	f7fb fdcb 	bl	800304c <HAL_GetTick>
 80074b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074c8:	887b      	ldrh	r3, [r7, #2]
 80074ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d00f      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x70>
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074da:	d107      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x68>
 80074e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d003      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074f2:	e15b      	b.n	80077ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x82>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x82>
 8007500:	887b      	ldrh	r3, [r7, #2]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800750c:	e14e      	b.n	80077ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b04      	cmp	r3, #4
 8007518:	d003      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2205      	movs	r2, #5
 800751e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	887a      	ldrh	r2, [r7, #2]
 8007532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	887a      	ldrh	r2, [r7, #2]
 8007538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	887a      	ldrh	r2, [r7, #2]
 800754a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d007      	beq.n	8007576 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757e:	d178      	bne.n	8007672 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_SPI_TransmitReceive+0x10a>
 8007588:	8b7b      	ldrh	r3, [r7, #26]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d166      	bne.n	800765c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	881a      	ldrh	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	1c9a      	adds	r2, r3, #2
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b2:	e053      	b.n	800765c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d11b      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x176>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d016      	beq.n	80075fa <HAL_SPI_TransmitReceive+0x176>
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d113      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d6:	881a      	ldrh	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	1c9a      	adds	r2, r3, #2
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b01      	cmp	r3, #1
 8007606:	d119      	bne.n	800763c <HAL_SPI_TransmitReceive+0x1b8>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d014      	beq.n	800763c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	b292      	uxth	r2, r2
 800761e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	1c9a      	adds	r2, r3, #2
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007638:	2301      	movs	r3, #1
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800763c:	f7fb fd06 	bl	800304c <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007648:	429a      	cmp	r2, r3
 800764a:	d807      	bhi.n	800765c <HAL_SPI_TransmitReceive+0x1d8>
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d003      	beq.n	800765c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800765a:	e0a7      	b.n	80077ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1a6      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x130>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766a:	b29b      	uxth	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1a1      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x130>
 8007670:	e07c      	b.n	800776c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_SPI_TransmitReceive+0x1fc>
 800767a:	8b7b      	ldrh	r3, [r7, #26]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d16b      	bne.n	8007758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	7812      	ldrb	r2, [r2, #0]
 800768c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a6:	e057      	b.n	8007758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d11c      	bne.n	80076f0 <HAL_SPI_TransmitReceive+0x26c>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d017      	beq.n	80076f0 <HAL_SPI_TransmitReceive+0x26c>
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d114      	bne.n	80076f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d119      	bne.n	8007732 <HAL_SPI_TransmitReceive+0x2ae>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d014      	beq.n	8007732 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800772e:	2301      	movs	r3, #1
 8007730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007732:	f7fb fc8b 	bl	800304c <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773e:	429a      	cmp	r2, r3
 8007740:	d803      	bhi.n	800774a <HAL_SPI_TransmitReceive+0x2c6>
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007748:	d102      	bne.n	8007750 <HAL_SPI_TransmitReceive+0x2cc>
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007756:	e029      	b.n	80077ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1a2      	bne.n	80076a8 <HAL_SPI_TransmitReceive+0x224>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d19d      	bne.n	80076a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800776c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f907 	bl	8007984 <SPI_EndRxTxTransaction>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d006      	beq.n	800778a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2220      	movs	r2, #32
 8007786:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007788:	e010      	b.n	80077ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10b      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007792:	2300      	movs	r3, #0
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	617b      	str	r3, [r7, #20]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	e000      	b.n	80077ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80077aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3730      	adds	r7, #48	; 0x30
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d6:	b2db      	uxtb	r3, r3
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077f4:	e04c      	b.n	8007890 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d048      	beq.n	8007890 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80077fe:	f7fb fc25 	bl	800304c <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d902      	bls.n	8007814 <SPI_WaitFlagStateUntilTimeout+0x30>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d13d      	bne.n	8007890 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007822:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782c:	d111      	bne.n	8007852 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007836:	d004      	beq.n	8007842 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007840:	d107      	bne.n	8007852 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007850:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785a:	d10f      	bne.n	800787c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800787a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e00f      	b.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4013      	ands	r3, r2
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	429a      	cmp	r2, r3
 800789e:	bf0c      	ite	eq
 80078a0:	2301      	moveq	r3, #1
 80078a2:	2300      	movne	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	461a      	mov	r2, r3
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d1a3      	bne.n	80077f6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af02      	add	r7, sp, #8
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078cc:	d111      	bne.n	80078f2 <SPI_EndRxTransaction+0x3a>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d6:	d004      	beq.n	80078e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e0:	d107      	bne.n	80078f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078fa:	d12a      	bne.n	8007952 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007904:	d012      	beq.n	800792c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2200      	movs	r2, #0
 800790e:	2180      	movs	r1, #128	; 0x80
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7ff ff67 	bl	80077e4 <SPI_WaitFlagStateUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d02d      	beq.n	8007978 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007920:	f043 0220 	orr.w	r2, r3, #32
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e026      	b.n	800797a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2200      	movs	r2, #0
 8007934:	2101      	movs	r1, #1
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7ff ff54 	bl	80077e4 <SPI_WaitFlagStateUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01a      	beq.n	8007978 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e013      	b.n	800797a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2200      	movs	r2, #0
 800795a:	2101      	movs	r1, #1
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff ff41 	bl	80077e4 <SPI_WaitFlagStateUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796c:	f043 0220 	orr.w	r2, r3, #32
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e000      	b.n	800797a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <SPI_EndRxTxTransaction+0x7c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <SPI_EndRxTxTransaction+0x80>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	0d5b      	lsrs	r3, r3, #21
 800799c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079a0:	fb02 f303 	mul.w	r3, r2, r3
 80079a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ae:	d112      	bne.n	80079d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2200      	movs	r2, #0
 80079b8:	2180      	movs	r1, #128	; 0x80
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff ff12 	bl	80077e4 <SPI_WaitFlagStateUntilTimeout>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	f043 0220 	orr.w	r2, r3, #32
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e00f      	b.n	80079f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	3b01      	subs	r3, #1
 80079e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	2b80      	cmp	r3, #128	; 0x80
 80079ee:	d0f2      	beq.n	80079d6 <SPI_EndRxTxTransaction+0x52>
 80079f0:	e000      	b.n	80079f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80079f2:	bf00      	nop
  }

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000000 	.word	0x20000000
 8007a04:	165e9f81 	.word	0x165e9f81

08007a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e01d      	b.n	8007a56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fa f82e 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	f000 fa14 	bl	8007e74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b06      	cmp	r3, #6
 8007a86:	d007      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d122      	bne.n	8007b02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d11b      	bne.n	8007b02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f06f 0202 	mvn.w	r2, #2
 8007ad2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f003 0303 	and.w	r3, r3, #3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f9a5 	bl	8007e38 <HAL_TIM_IC_CaptureCallback>
 8007aee:	e005      	b.n	8007afc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f997 	bl	8007e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f9a8 	bl	8007e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d122      	bne.n	8007b56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f003 0304 	and.w	r3, r3, #4
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d11b      	bne.n	8007b56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f06f 0204 	mvn.w	r2, #4
 8007b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f97b 	bl	8007e38 <HAL_TIM_IC_CaptureCallback>
 8007b42:	e005      	b.n	8007b50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f96d 	bl	8007e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f97e 	bl	8007e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d122      	bne.n	8007baa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d11b      	bne.n	8007baa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f06f 0208 	mvn.w	r2, #8
 8007b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2204      	movs	r2, #4
 8007b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f951 	bl	8007e38 <HAL_TIM_IC_CaptureCallback>
 8007b96:	e005      	b.n	8007ba4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f943 	bl	8007e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f954 	bl	8007e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b10      	cmp	r3, #16
 8007bb6:	d122      	bne.n	8007bfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b10      	cmp	r3, #16
 8007bc4:	d11b      	bne.n	8007bfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f06f 0210 	mvn.w	r2, #16
 8007bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f927 	bl	8007e38 <HAL_TIM_IC_CaptureCallback>
 8007bea:	e005      	b.n	8007bf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f919 	bl	8007e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f92a 	bl	8007e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d10e      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d107      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f06f 0201 	mvn.w	r2, #1
 8007c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7f9 fcd7 	bl	80015d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c34:	2b80      	cmp	r3, #128	; 0x80
 8007c36:	d10e      	bne.n	8007c56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c42:	2b80      	cmp	r3, #128	; 0x80
 8007c44:	d107      	bne.n	8007c56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 facf 	bl	80081f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b40      	cmp	r3, #64	; 0x40
 8007c62:	d10e      	bne.n	8007c82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6e:	2b40      	cmp	r3, #64	; 0x40
 8007c70:	d107      	bne.n	8007c82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f8ef 	bl	8007e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d10e      	bne.n	8007cae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	d107      	bne.n	8007cae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f06f 0220 	mvn.w	r2, #32
 8007ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fa99 	bl	80081e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d101      	bne.n	8007cce <HAL_TIM_ConfigClockSource+0x18>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e0a6      	b.n	8007e1c <HAL_TIM_ConfigClockSource+0x166>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cf4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b40      	cmp	r3, #64	; 0x40
 8007d04:	d067      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x120>
 8007d06:	2b40      	cmp	r3, #64	; 0x40
 8007d08:	d80b      	bhi.n	8007d22 <HAL_TIM_ConfigClockSource+0x6c>
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	d073      	beq.n	8007df6 <HAL_TIM_ConfigClockSource+0x140>
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d802      	bhi.n	8007d18 <HAL_TIM_ConfigClockSource+0x62>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d06f      	beq.n	8007df6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d16:	e078      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d06c      	beq.n	8007df6 <HAL_TIM_ConfigClockSource+0x140>
 8007d1c:	2b30      	cmp	r3, #48	; 0x30
 8007d1e:	d06a      	beq.n	8007df6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007d20:	e073      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d22:	2b70      	cmp	r3, #112	; 0x70
 8007d24:	d00d      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x8c>
 8007d26:	2b70      	cmp	r3, #112	; 0x70
 8007d28:	d804      	bhi.n	8007d34 <HAL_TIM_ConfigClockSource+0x7e>
 8007d2a:	2b50      	cmp	r3, #80	; 0x50
 8007d2c:	d033      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0xe0>
 8007d2e:	2b60      	cmp	r3, #96	; 0x60
 8007d30:	d041      	beq.n	8007db6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007d32:	e06a      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d38:	d066      	beq.n	8007e08 <HAL_TIM_ConfigClockSource+0x152>
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	d017      	beq.n	8007d70 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007d40:	e063      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	6899      	ldr	r1, [r3, #8]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f000 f9a9 	bl	80080a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	609a      	str	r2, [r3, #8]
      break;
 8007d6e:	e04c      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	6899      	ldr	r1, [r3, #8]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f000 f992 	bl	80080a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d92:	609a      	str	r2, [r3, #8]
      break;
 8007d94:	e039      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	6859      	ldr	r1, [r3, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f000 f906 	bl	8007fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2150      	movs	r1, #80	; 0x50
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 f95f 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007db4:	e029      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	6859      	ldr	r1, [r3, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f000 f925 	bl	8008012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2160      	movs	r1, #96	; 0x60
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 f94f 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007dd4:	e019      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	6859      	ldr	r1, [r3, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f000 f8e6 	bl	8007fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2140      	movs	r1, #64	; 0x40
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f93f 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007df4:	e009      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f000 f936 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007e06:	e000      	b.n	8007e0a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007e08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a40      	ldr	r2, [pc, #256]	; (8007f88 <TIM_Base_SetConfig+0x114>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d013      	beq.n	8007eb4 <TIM_Base_SetConfig+0x40>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e92:	d00f      	beq.n	8007eb4 <TIM_Base_SetConfig+0x40>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a3d      	ldr	r2, [pc, #244]	; (8007f8c <TIM_Base_SetConfig+0x118>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d00b      	beq.n	8007eb4 <TIM_Base_SetConfig+0x40>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a3c      	ldr	r2, [pc, #240]	; (8007f90 <TIM_Base_SetConfig+0x11c>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d007      	beq.n	8007eb4 <TIM_Base_SetConfig+0x40>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a3b      	ldr	r2, [pc, #236]	; (8007f94 <TIM_Base_SetConfig+0x120>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_Base_SetConfig+0x40>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a3a      	ldr	r2, [pc, #232]	; (8007f98 <TIM_Base_SetConfig+0x124>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d108      	bne.n	8007ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a2f      	ldr	r2, [pc, #188]	; (8007f88 <TIM_Base_SetConfig+0x114>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d02b      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed4:	d027      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a2c      	ldr	r2, [pc, #176]	; (8007f8c <TIM_Base_SetConfig+0x118>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d023      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a2b      	ldr	r2, [pc, #172]	; (8007f90 <TIM_Base_SetConfig+0x11c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d01f      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a2a      	ldr	r2, [pc, #168]	; (8007f94 <TIM_Base_SetConfig+0x120>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01b      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a29      	ldr	r2, [pc, #164]	; (8007f98 <TIM_Base_SetConfig+0x124>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d017      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a28      	ldr	r2, [pc, #160]	; (8007f9c <TIM_Base_SetConfig+0x128>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a27      	ldr	r2, [pc, #156]	; (8007fa0 <TIM_Base_SetConfig+0x12c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00f      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a26      	ldr	r2, [pc, #152]	; (8007fa4 <TIM_Base_SetConfig+0x130>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00b      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a25      	ldr	r2, [pc, #148]	; (8007fa8 <TIM_Base_SetConfig+0x134>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d007      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a24      	ldr	r2, [pc, #144]	; (8007fac <TIM_Base_SetConfig+0x138>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d003      	beq.n	8007f26 <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a23      	ldr	r2, [pc, #140]	; (8007fb0 <TIM_Base_SetConfig+0x13c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d108      	bne.n	8007f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <TIM_Base_SetConfig+0x114>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d003      	beq.n	8007f6c <TIM_Base_SetConfig+0xf8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a0c      	ldr	r2, [pc, #48]	; (8007f98 <TIM_Base_SetConfig+0x124>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d103      	bne.n	8007f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	691a      	ldr	r2, [r3, #16]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	615a      	str	r2, [r3, #20]
}
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40010000 	.word	0x40010000
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40000c00 	.word	0x40000c00
 8007f98:	40010400 	.word	0x40010400
 8007f9c:	40014000 	.word	0x40014000
 8007fa0:	40014400 	.word	0x40014400
 8007fa4:	40014800 	.word	0x40014800
 8007fa8:	40001800 	.word	0x40001800
 8007fac:	40001c00 	.word	0x40001c00
 8007fb0:	40002000 	.word	0x40002000

08007fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	f023 0201 	bic.w	r2, r3, #1
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f023 030a 	bic.w	r3, r3, #10
 8007ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	f023 0210 	bic.w	r2, r3, #16
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800803c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	031b      	lsls	r3, r3, #12
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800804e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4313      	orrs	r3, r2
 8008058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	f043 0307 	orr.w	r3, r3, #7
 8008094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	021a      	lsls	r2, r3, #8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	609a      	str	r2, [r3, #8]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e05a      	b.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a21      	ldr	r2, [pc, #132]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d022      	beq.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814c:	d01d      	beq.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1d      	ldr	r2, [pc, #116]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d018      	beq.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1b      	ldr	r2, [pc, #108]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d013      	beq.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a1a      	ldr	r2, [pc, #104]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d00e      	beq.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a18      	ldr	r2, [pc, #96]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d009      	beq.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a17      	ldr	r2, [pc, #92]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d004      	beq.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a15      	ldr	r2, [pc, #84]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d10c      	bne.n	80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	4313      	orrs	r3, r2
 800819a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	40010000 	.word	0x40010000
 80081c8:	40000400 	.word	0x40000400
 80081cc:	40000800 	.word	0x40000800
 80081d0:	40000c00 	.word	0x40000c00
 80081d4:	40010400 	.word	0x40010400
 80081d8:	40014000 	.word	0x40014000
 80081dc:	40001800 	.word	0x40001800

080081e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e03f      	b.n	800829a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7f9 fc7a 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2224      	movs	r2, #36	; 0x24
 8008238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800824a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f829 	bl	80082a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695a      	ldr	r2, [r3, #20]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80082e6:	f023 030c 	bic.w	r3, r3, #12
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	430b      	orrs	r3, r1
 80082f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008312:	f040 818b 	bne.w	800862c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4ac1      	ldr	r2, [pc, #772]	; (8008620 <UART_SetConfig+0x37c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d005      	beq.n	800832c <UART_SetConfig+0x88>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4abf      	ldr	r2, [pc, #764]	; (8008624 <UART_SetConfig+0x380>)
 8008326:	4293      	cmp	r3, r2
 8008328:	f040 80bd 	bne.w	80084a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800832c:	f7fe fb5e 	bl	80069ec <HAL_RCC_GetPCLK2Freq>
 8008330:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	461d      	mov	r5, r3
 8008336:	f04f 0600 	mov.w	r6, #0
 800833a:	46a8      	mov	r8, r5
 800833c:	46b1      	mov	r9, r6
 800833e:	eb18 0308 	adds.w	r3, r8, r8
 8008342:	eb49 0409 	adc.w	r4, r9, r9
 8008346:	4698      	mov	r8, r3
 8008348:	46a1      	mov	r9, r4
 800834a:	eb18 0805 	adds.w	r8, r8, r5
 800834e:	eb49 0906 	adc.w	r9, r9, r6
 8008352:	f04f 0100 	mov.w	r1, #0
 8008356:	f04f 0200 	mov.w	r2, #0
 800835a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800835e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008362:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008366:	4688      	mov	r8, r1
 8008368:	4691      	mov	r9, r2
 800836a:	eb18 0005 	adds.w	r0, r8, r5
 800836e:	eb49 0106 	adc.w	r1, r9, r6
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	461d      	mov	r5, r3
 8008378:	f04f 0600 	mov.w	r6, #0
 800837c:	196b      	adds	r3, r5, r5
 800837e:	eb46 0406 	adc.w	r4, r6, r6
 8008382:	461a      	mov	r2, r3
 8008384:	4623      	mov	r3, r4
 8008386:	f7f7 ff33 	bl	80001f0 <__aeabi_uldivmod>
 800838a:	4603      	mov	r3, r0
 800838c:	460c      	mov	r4, r1
 800838e:	461a      	mov	r2, r3
 8008390:	4ba5      	ldr	r3, [pc, #660]	; (8008628 <UART_SetConfig+0x384>)
 8008392:	fba3 2302 	umull	r2, r3, r3, r2
 8008396:	095b      	lsrs	r3, r3, #5
 8008398:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	461d      	mov	r5, r3
 80083a0:	f04f 0600 	mov.w	r6, #0
 80083a4:	46a9      	mov	r9, r5
 80083a6:	46b2      	mov	sl, r6
 80083a8:	eb19 0309 	adds.w	r3, r9, r9
 80083ac:	eb4a 040a 	adc.w	r4, sl, sl
 80083b0:	4699      	mov	r9, r3
 80083b2:	46a2      	mov	sl, r4
 80083b4:	eb19 0905 	adds.w	r9, r9, r5
 80083b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80083bc:	f04f 0100 	mov.w	r1, #0
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083d0:	4689      	mov	r9, r1
 80083d2:	4692      	mov	sl, r2
 80083d4:	eb19 0005 	adds.w	r0, r9, r5
 80083d8:	eb4a 0106 	adc.w	r1, sl, r6
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	461d      	mov	r5, r3
 80083e2:	f04f 0600 	mov.w	r6, #0
 80083e6:	196b      	adds	r3, r5, r5
 80083e8:	eb46 0406 	adc.w	r4, r6, r6
 80083ec:	461a      	mov	r2, r3
 80083ee:	4623      	mov	r3, r4
 80083f0:	f7f7 fefe 	bl	80001f0 <__aeabi_uldivmod>
 80083f4:	4603      	mov	r3, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	461a      	mov	r2, r3
 80083fa:	4b8b      	ldr	r3, [pc, #556]	; (8008628 <UART_SetConfig+0x384>)
 80083fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	2164      	movs	r1, #100	; 0x64
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	3332      	adds	r3, #50	; 0x32
 800840e:	4a86      	ldr	r2, [pc, #536]	; (8008628 <UART_SetConfig+0x384>)
 8008410:	fba2 2303 	umull	r2, r3, r2, r3
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800841c:	4498      	add	r8, r3
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	461d      	mov	r5, r3
 8008422:	f04f 0600 	mov.w	r6, #0
 8008426:	46a9      	mov	r9, r5
 8008428:	46b2      	mov	sl, r6
 800842a:	eb19 0309 	adds.w	r3, r9, r9
 800842e:	eb4a 040a 	adc.w	r4, sl, sl
 8008432:	4699      	mov	r9, r3
 8008434:	46a2      	mov	sl, r4
 8008436:	eb19 0905 	adds.w	r9, r9, r5
 800843a:	eb4a 0a06 	adc.w	sl, sl, r6
 800843e:	f04f 0100 	mov.w	r1, #0
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800844a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800844e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008452:	4689      	mov	r9, r1
 8008454:	4692      	mov	sl, r2
 8008456:	eb19 0005 	adds.w	r0, r9, r5
 800845a:	eb4a 0106 	adc.w	r1, sl, r6
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	461d      	mov	r5, r3
 8008464:	f04f 0600 	mov.w	r6, #0
 8008468:	196b      	adds	r3, r5, r5
 800846a:	eb46 0406 	adc.w	r4, r6, r6
 800846e:	461a      	mov	r2, r3
 8008470:	4623      	mov	r3, r4
 8008472:	f7f7 febd 	bl	80001f0 <__aeabi_uldivmod>
 8008476:	4603      	mov	r3, r0
 8008478:	460c      	mov	r4, r1
 800847a:	461a      	mov	r2, r3
 800847c:	4b6a      	ldr	r3, [pc, #424]	; (8008628 <UART_SetConfig+0x384>)
 800847e:	fba3 1302 	umull	r1, r3, r3, r2
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	2164      	movs	r1, #100	; 0x64
 8008486:	fb01 f303 	mul.w	r3, r1, r3
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	3332      	adds	r3, #50	; 0x32
 8008490:	4a65      	ldr	r2, [pc, #404]	; (8008628 <UART_SetConfig+0x384>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	f003 0207 	and.w	r2, r3, #7
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4442      	add	r2, r8
 80084a2:	609a      	str	r2, [r3, #8]
 80084a4:	e26f      	b.n	8008986 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084a6:	f7fe fa8d 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 80084aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	461d      	mov	r5, r3
 80084b0:	f04f 0600 	mov.w	r6, #0
 80084b4:	46a8      	mov	r8, r5
 80084b6:	46b1      	mov	r9, r6
 80084b8:	eb18 0308 	adds.w	r3, r8, r8
 80084bc:	eb49 0409 	adc.w	r4, r9, r9
 80084c0:	4698      	mov	r8, r3
 80084c2:	46a1      	mov	r9, r4
 80084c4:	eb18 0805 	adds.w	r8, r8, r5
 80084c8:	eb49 0906 	adc.w	r9, r9, r6
 80084cc:	f04f 0100 	mov.w	r1, #0
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80084d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80084dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80084e0:	4688      	mov	r8, r1
 80084e2:	4691      	mov	r9, r2
 80084e4:	eb18 0005 	adds.w	r0, r8, r5
 80084e8:	eb49 0106 	adc.w	r1, r9, r6
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	461d      	mov	r5, r3
 80084f2:	f04f 0600 	mov.w	r6, #0
 80084f6:	196b      	adds	r3, r5, r5
 80084f8:	eb46 0406 	adc.w	r4, r6, r6
 80084fc:	461a      	mov	r2, r3
 80084fe:	4623      	mov	r3, r4
 8008500:	f7f7 fe76 	bl	80001f0 <__aeabi_uldivmod>
 8008504:	4603      	mov	r3, r0
 8008506:	460c      	mov	r4, r1
 8008508:	461a      	mov	r2, r3
 800850a:	4b47      	ldr	r3, [pc, #284]	; (8008628 <UART_SetConfig+0x384>)
 800850c:	fba3 2302 	umull	r2, r3, r3, r2
 8008510:	095b      	lsrs	r3, r3, #5
 8008512:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	461d      	mov	r5, r3
 800851a:	f04f 0600 	mov.w	r6, #0
 800851e:	46a9      	mov	r9, r5
 8008520:	46b2      	mov	sl, r6
 8008522:	eb19 0309 	adds.w	r3, r9, r9
 8008526:	eb4a 040a 	adc.w	r4, sl, sl
 800852a:	4699      	mov	r9, r3
 800852c:	46a2      	mov	sl, r4
 800852e:	eb19 0905 	adds.w	r9, r9, r5
 8008532:	eb4a 0a06 	adc.w	sl, sl, r6
 8008536:	f04f 0100 	mov.w	r1, #0
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008542:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008546:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800854a:	4689      	mov	r9, r1
 800854c:	4692      	mov	sl, r2
 800854e:	eb19 0005 	adds.w	r0, r9, r5
 8008552:	eb4a 0106 	adc.w	r1, sl, r6
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	461d      	mov	r5, r3
 800855c:	f04f 0600 	mov.w	r6, #0
 8008560:	196b      	adds	r3, r5, r5
 8008562:	eb46 0406 	adc.w	r4, r6, r6
 8008566:	461a      	mov	r2, r3
 8008568:	4623      	mov	r3, r4
 800856a:	f7f7 fe41 	bl	80001f0 <__aeabi_uldivmod>
 800856e:	4603      	mov	r3, r0
 8008570:	460c      	mov	r4, r1
 8008572:	461a      	mov	r2, r3
 8008574:	4b2c      	ldr	r3, [pc, #176]	; (8008628 <UART_SetConfig+0x384>)
 8008576:	fba3 1302 	umull	r1, r3, r3, r2
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	2164      	movs	r1, #100	; 0x64
 800857e:	fb01 f303 	mul.w	r3, r1, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	3332      	adds	r3, #50	; 0x32
 8008588:	4a27      	ldr	r2, [pc, #156]	; (8008628 <UART_SetConfig+0x384>)
 800858a:	fba2 2303 	umull	r2, r3, r2, r3
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008596:	4498      	add	r8, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	461d      	mov	r5, r3
 800859c:	f04f 0600 	mov.w	r6, #0
 80085a0:	46a9      	mov	r9, r5
 80085a2:	46b2      	mov	sl, r6
 80085a4:	eb19 0309 	adds.w	r3, r9, r9
 80085a8:	eb4a 040a 	adc.w	r4, sl, sl
 80085ac:	4699      	mov	r9, r3
 80085ae:	46a2      	mov	sl, r4
 80085b0:	eb19 0905 	adds.w	r9, r9, r5
 80085b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80085b8:	f04f 0100 	mov.w	r1, #0
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085cc:	4689      	mov	r9, r1
 80085ce:	4692      	mov	sl, r2
 80085d0:	eb19 0005 	adds.w	r0, r9, r5
 80085d4:	eb4a 0106 	adc.w	r1, sl, r6
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	461d      	mov	r5, r3
 80085de:	f04f 0600 	mov.w	r6, #0
 80085e2:	196b      	adds	r3, r5, r5
 80085e4:	eb46 0406 	adc.w	r4, r6, r6
 80085e8:	461a      	mov	r2, r3
 80085ea:	4623      	mov	r3, r4
 80085ec:	f7f7 fe00 	bl	80001f0 <__aeabi_uldivmod>
 80085f0:	4603      	mov	r3, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <UART_SetConfig+0x384>)
 80085f8:	fba3 1302 	umull	r1, r3, r3, r2
 80085fc:	095b      	lsrs	r3, r3, #5
 80085fe:	2164      	movs	r1, #100	; 0x64
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	3332      	adds	r3, #50	; 0x32
 800860a:	4a07      	ldr	r2, [pc, #28]	; (8008628 <UART_SetConfig+0x384>)
 800860c:	fba2 2303 	umull	r2, r3, r2, r3
 8008610:	095b      	lsrs	r3, r3, #5
 8008612:	f003 0207 	and.w	r2, r3, #7
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4442      	add	r2, r8
 800861c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800861e:	e1b2      	b.n	8008986 <UART_SetConfig+0x6e2>
 8008620:	40011000 	.word	0x40011000
 8008624:	40011400 	.word	0x40011400
 8008628:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4ad7      	ldr	r2, [pc, #860]	; (8008990 <UART_SetConfig+0x6ec>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d005      	beq.n	8008642 <UART_SetConfig+0x39e>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4ad6      	ldr	r2, [pc, #856]	; (8008994 <UART_SetConfig+0x6f0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	f040 80d1 	bne.w	80087e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008642:	f7fe f9d3 	bl	80069ec <HAL_RCC_GetPCLK2Freq>
 8008646:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	469a      	mov	sl, r3
 800864c:	f04f 0b00 	mov.w	fp, #0
 8008650:	46d0      	mov	r8, sl
 8008652:	46d9      	mov	r9, fp
 8008654:	eb18 0308 	adds.w	r3, r8, r8
 8008658:	eb49 0409 	adc.w	r4, r9, r9
 800865c:	4698      	mov	r8, r3
 800865e:	46a1      	mov	r9, r4
 8008660:	eb18 080a 	adds.w	r8, r8, sl
 8008664:	eb49 090b 	adc.w	r9, r9, fp
 8008668:	f04f 0100 	mov.w	r1, #0
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008674:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008678:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800867c:	4688      	mov	r8, r1
 800867e:	4691      	mov	r9, r2
 8008680:	eb1a 0508 	adds.w	r5, sl, r8
 8008684:	eb4b 0609 	adc.w	r6, fp, r9
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4619      	mov	r1, r3
 800868e:	f04f 0200 	mov.w	r2, #0
 8008692:	f04f 0300 	mov.w	r3, #0
 8008696:	f04f 0400 	mov.w	r4, #0
 800869a:	0094      	lsls	r4, r2, #2
 800869c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086a0:	008b      	lsls	r3, r1, #2
 80086a2:	461a      	mov	r2, r3
 80086a4:	4623      	mov	r3, r4
 80086a6:	4628      	mov	r0, r5
 80086a8:	4631      	mov	r1, r6
 80086aa:	f7f7 fda1 	bl	80001f0 <__aeabi_uldivmod>
 80086ae:	4603      	mov	r3, r0
 80086b0:	460c      	mov	r4, r1
 80086b2:	461a      	mov	r2, r3
 80086b4:	4bb8      	ldr	r3, [pc, #736]	; (8008998 <UART_SetConfig+0x6f4>)
 80086b6:	fba3 2302 	umull	r2, r3, r3, r2
 80086ba:	095b      	lsrs	r3, r3, #5
 80086bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	469b      	mov	fp, r3
 80086c4:	f04f 0c00 	mov.w	ip, #0
 80086c8:	46d9      	mov	r9, fp
 80086ca:	46e2      	mov	sl, ip
 80086cc:	eb19 0309 	adds.w	r3, r9, r9
 80086d0:	eb4a 040a 	adc.w	r4, sl, sl
 80086d4:	4699      	mov	r9, r3
 80086d6:	46a2      	mov	sl, r4
 80086d8:	eb19 090b 	adds.w	r9, r9, fp
 80086dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086e0:	f04f 0100 	mov.w	r1, #0
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086f4:	4689      	mov	r9, r1
 80086f6:	4692      	mov	sl, r2
 80086f8:	eb1b 0509 	adds.w	r5, fp, r9
 80086fc:	eb4c 060a 	adc.w	r6, ip, sl
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	4619      	mov	r1, r3
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	f04f 0300 	mov.w	r3, #0
 800870e:	f04f 0400 	mov.w	r4, #0
 8008712:	0094      	lsls	r4, r2, #2
 8008714:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008718:	008b      	lsls	r3, r1, #2
 800871a:	461a      	mov	r2, r3
 800871c:	4623      	mov	r3, r4
 800871e:	4628      	mov	r0, r5
 8008720:	4631      	mov	r1, r6
 8008722:	f7f7 fd65 	bl	80001f0 <__aeabi_uldivmod>
 8008726:	4603      	mov	r3, r0
 8008728:	460c      	mov	r4, r1
 800872a:	461a      	mov	r2, r3
 800872c:	4b9a      	ldr	r3, [pc, #616]	; (8008998 <UART_SetConfig+0x6f4>)
 800872e:	fba3 1302 	umull	r1, r3, r3, r2
 8008732:	095b      	lsrs	r3, r3, #5
 8008734:	2164      	movs	r1, #100	; 0x64
 8008736:	fb01 f303 	mul.w	r3, r1, r3
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	3332      	adds	r3, #50	; 0x32
 8008740:	4a95      	ldr	r2, [pc, #596]	; (8008998 <UART_SetConfig+0x6f4>)
 8008742:	fba2 2303 	umull	r2, r3, r2, r3
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800874c:	4498      	add	r8, r3
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	469b      	mov	fp, r3
 8008752:	f04f 0c00 	mov.w	ip, #0
 8008756:	46d9      	mov	r9, fp
 8008758:	46e2      	mov	sl, ip
 800875a:	eb19 0309 	adds.w	r3, r9, r9
 800875e:	eb4a 040a 	adc.w	r4, sl, sl
 8008762:	4699      	mov	r9, r3
 8008764:	46a2      	mov	sl, r4
 8008766:	eb19 090b 	adds.w	r9, r9, fp
 800876a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800876e:	f04f 0100 	mov.w	r1, #0
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800877a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800877e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008782:	4689      	mov	r9, r1
 8008784:	4692      	mov	sl, r2
 8008786:	eb1b 0509 	adds.w	r5, fp, r9
 800878a:	eb4c 060a 	adc.w	r6, ip, sl
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4619      	mov	r1, r3
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	f04f 0400 	mov.w	r4, #0
 80087a0:	0094      	lsls	r4, r2, #2
 80087a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087a6:	008b      	lsls	r3, r1, #2
 80087a8:	461a      	mov	r2, r3
 80087aa:	4623      	mov	r3, r4
 80087ac:	4628      	mov	r0, r5
 80087ae:	4631      	mov	r1, r6
 80087b0:	f7f7 fd1e 	bl	80001f0 <__aeabi_uldivmod>
 80087b4:	4603      	mov	r3, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	461a      	mov	r2, r3
 80087ba:	4b77      	ldr	r3, [pc, #476]	; (8008998 <UART_SetConfig+0x6f4>)
 80087bc:	fba3 1302 	umull	r1, r3, r3, r2
 80087c0:	095b      	lsrs	r3, r3, #5
 80087c2:	2164      	movs	r1, #100	; 0x64
 80087c4:	fb01 f303 	mul.w	r3, r1, r3
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	3332      	adds	r3, #50	; 0x32
 80087ce:	4a72      	ldr	r2, [pc, #456]	; (8008998 <UART_SetConfig+0x6f4>)
 80087d0:	fba2 2303 	umull	r2, r3, r2, r3
 80087d4:	095b      	lsrs	r3, r3, #5
 80087d6:	f003 020f 	and.w	r2, r3, #15
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4442      	add	r2, r8
 80087e0:	609a      	str	r2, [r3, #8]
 80087e2:	e0d0      	b.n	8008986 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80087e4:	f7fe f8ee 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 80087e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	469a      	mov	sl, r3
 80087ee:	f04f 0b00 	mov.w	fp, #0
 80087f2:	46d0      	mov	r8, sl
 80087f4:	46d9      	mov	r9, fp
 80087f6:	eb18 0308 	adds.w	r3, r8, r8
 80087fa:	eb49 0409 	adc.w	r4, r9, r9
 80087fe:	4698      	mov	r8, r3
 8008800:	46a1      	mov	r9, r4
 8008802:	eb18 080a 	adds.w	r8, r8, sl
 8008806:	eb49 090b 	adc.w	r9, r9, fp
 800880a:	f04f 0100 	mov.w	r1, #0
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008816:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800881a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800881e:	4688      	mov	r8, r1
 8008820:	4691      	mov	r9, r2
 8008822:	eb1a 0508 	adds.w	r5, sl, r8
 8008826:	eb4b 0609 	adc.w	r6, fp, r9
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4619      	mov	r1, r3
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	f04f 0400 	mov.w	r4, #0
 800883c:	0094      	lsls	r4, r2, #2
 800883e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008842:	008b      	lsls	r3, r1, #2
 8008844:	461a      	mov	r2, r3
 8008846:	4623      	mov	r3, r4
 8008848:	4628      	mov	r0, r5
 800884a:	4631      	mov	r1, r6
 800884c:	f7f7 fcd0 	bl	80001f0 <__aeabi_uldivmod>
 8008850:	4603      	mov	r3, r0
 8008852:	460c      	mov	r4, r1
 8008854:	461a      	mov	r2, r3
 8008856:	4b50      	ldr	r3, [pc, #320]	; (8008998 <UART_SetConfig+0x6f4>)
 8008858:	fba3 2302 	umull	r2, r3, r3, r2
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	469b      	mov	fp, r3
 8008866:	f04f 0c00 	mov.w	ip, #0
 800886a:	46d9      	mov	r9, fp
 800886c:	46e2      	mov	sl, ip
 800886e:	eb19 0309 	adds.w	r3, r9, r9
 8008872:	eb4a 040a 	adc.w	r4, sl, sl
 8008876:	4699      	mov	r9, r3
 8008878:	46a2      	mov	sl, r4
 800887a:	eb19 090b 	adds.w	r9, r9, fp
 800887e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008882:	f04f 0100 	mov.w	r1, #0
 8008886:	f04f 0200 	mov.w	r2, #0
 800888a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800888e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008892:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008896:	4689      	mov	r9, r1
 8008898:	4692      	mov	sl, r2
 800889a:	eb1b 0509 	adds.w	r5, fp, r9
 800889e:	eb4c 060a 	adc.w	r6, ip, sl
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	4619      	mov	r1, r3
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	f04f 0300 	mov.w	r3, #0
 80088b0:	f04f 0400 	mov.w	r4, #0
 80088b4:	0094      	lsls	r4, r2, #2
 80088b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088ba:	008b      	lsls	r3, r1, #2
 80088bc:	461a      	mov	r2, r3
 80088be:	4623      	mov	r3, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	4631      	mov	r1, r6
 80088c4:	f7f7 fc94 	bl	80001f0 <__aeabi_uldivmod>
 80088c8:	4603      	mov	r3, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	461a      	mov	r2, r3
 80088ce:	4b32      	ldr	r3, [pc, #200]	; (8008998 <UART_SetConfig+0x6f4>)
 80088d0:	fba3 1302 	umull	r1, r3, r3, r2
 80088d4:	095b      	lsrs	r3, r3, #5
 80088d6:	2164      	movs	r1, #100	; 0x64
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	3332      	adds	r3, #50	; 0x32
 80088e2:	4a2d      	ldr	r2, [pc, #180]	; (8008998 <UART_SetConfig+0x6f4>)
 80088e4:	fba2 2303 	umull	r2, r3, r2, r3
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ee:	4498      	add	r8, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	469b      	mov	fp, r3
 80088f4:	f04f 0c00 	mov.w	ip, #0
 80088f8:	46d9      	mov	r9, fp
 80088fa:	46e2      	mov	sl, ip
 80088fc:	eb19 0309 	adds.w	r3, r9, r9
 8008900:	eb4a 040a 	adc.w	r4, sl, sl
 8008904:	4699      	mov	r9, r3
 8008906:	46a2      	mov	sl, r4
 8008908:	eb19 090b 	adds.w	r9, r9, fp
 800890c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008910:	f04f 0100 	mov.w	r1, #0
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800891c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008920:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008924:	4689      	mov	r9, r1
 8008926:	4692      	mov	sl, r2
 8008928:	eb1b 0509 	adds.w	r5, fp, r9
 800892c:	eb4c 060a 	adc.w	r6, ip, sl
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	4619      	mov	r1, r3
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	f04f 0400 	mov.w	r4, #0
 8008942:	0094      	lsls	r4, r2, #2
 8008944:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008948:	008b      	lsls	r3, r1, #2
 800894a:	461a      	mov	r2, r3
 800894c:	4623      	mov	r3, r4
 800894e:	4628      	mov	r0, r5
 8008950:	4631      	mov	r1, r6
 8008952:	f7f7 fc4d 	bl	80001f0 <__aeabi_uldivmod>
 8008956:	4603      	mov	r3, r0
 8008958:	460c      	mov	r4, r1
 800895a:	461a      	mov	r2, r3
 800895c:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <UART_SetConfig+0x6f4>)
 800895e:	fba3 1302 	umull	r1, r3, r3, r2
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	2164      	movs	r1, #100	; 0x64
 8008966:	fb01 f303 	mul.w	r3, r1, r3
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	3332      	adds	r3, #50	; 0x32
 8008970:	4a09      	ldr	r2, [pc, #36]	; (8008998 <UART_SetConfig+0x6f4>)
 8008972:	fba2 2303 	umull	r2, r3, r2, r3
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4442      	add	r2, r8
 8008982:	609a      	str	r2, [r3, #8]
}
 8008984:	e7ff      	b.n	8008986 <UART_SetConfig+0x6e2>
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008990:	40011000 	.word	0x40011000
 8008994:	40011400 	.word	0x40011400
 8008998:	51eb851f 	.word	0x51eb851f

0800899c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d029      	beq.n	8008a0a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80089c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089c6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089d0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80089d6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80089dc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80089e2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80089e8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80089ee:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80089f4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80089fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	e034      	b.n	8008a74 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a16:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a20:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008a26:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008a3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a3e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a48:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008a4e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008a54:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008a5a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008a60:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b087      	sub	sp, #28
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d02e      	beq.n	8008afa <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008aa8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008ab8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008ac2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008acc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ad6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008ae0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008aea:	4313      	orrs	r3, r2
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	609a      	str	r2, [r3, #8]
 8008af8:	e03b      	b.n	8008b72 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b0a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b30:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b40:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008b4a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008b54:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	371c      	adds	r7, #28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b9c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008ba6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008bb8:	f7fa fa48 	bl	800304c <HAL_GetTick>
 8008bbc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008bbe:	e010      	b.n	8008be2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	d00c      	beq.n	8008be2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <FMC_SDRAM_SendCommand+0x5e>
 8008bce:	f7fa fa3d 	bl	800304c <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d201      	bcs.n	8008be2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e006      	b.n	8008bf0 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d0e8      	beq.n	8008bc0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	695a      	ldr	r2, [r3, #20]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f043 0201 	orr.w	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f023 0201 	bic.w	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
	...

08008c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	019b      	lsls	r3, r3, #6
 8008c76:	f043 0220 	orr.w	r2, r3, #32
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3301      	adds	r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4a09      	ldr	r2, [pc, #36]	; (8008cac <USB_FlushTxFifo+0x48>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d901      	bls.n	8008c90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e006      	b.n	8008c9e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d0f0      	beq.n	8008c7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	00030d40 	.word	0x00030d40

08008cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2210      	movs	r2, #16
 8008cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <USB_FlushRxFifo+0x40>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d901      	bls.n	8008cd4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e006      	b.n	8008ce2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b10      	cmp	r3, #16
 8008cde:	d0f0      	beq.n	8008cc2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	00030d40 	.word	0x00030d40

08008cf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b089      	sub	sp, #36	; 0x24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008d0a:	88fb      	ldrh	r3, [r7, #6]
 8008d0c:	3303      	adds	r3, #3
 8008d0e:	089b      	lsrs	r3, r3, #2
 8008d10:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008d12:	2300      	movs	r3, #0
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	e00b      	b.n	8008d30 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	3304      	adds	r3, #4
 8008d28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	61bb      	str	r3, [r7, #24]
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d3ef      	bcc.n	8008d18 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008d38:	69fb      	ldr	r3, [r7, #28]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3724      	adds	r7, #36	; 0x24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	f003 0301 	and.w	r3, r3, #1
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	f003 0303 	and.w	r3, r3, #3
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d107      	bne.n	8008dda <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008dd6:	6053      	str	r3, [r2, #4]
 8008dd8:	e009      	b.n	8008dee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d106      	bne.n	8008dee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008de6:	461a      	mov	r2, r3
 8008de8:	f241 7370 	movw	r3, #6000	; 0x1770
 8008dec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	b29b      	uxth	r3, r3
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b087      	sub	sp, #28
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	0c9b      	lsrs	r3, r3, #18
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <USB_HC_Halt+0x3a>
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d16c      	bne.n	8008f32 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	0151      	lsls	r1, r2, #5
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	440a      	add	r2, r1
 8008e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e76:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d143      	bne.n	8008f0c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	0151      	lsls	r1, r2, #5
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	440a      	add	r2, r1
 8008e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ea2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	0151      	lsls	r1, r2, #5
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	440a      	add	r2, r1
 8008eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ec2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	0151      	lsls	r1, r2, #5
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	440a      	add	r2, r1
 8008eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ede:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ee2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ef0:	d81d      	bhi.n	8008f2e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f08:	d0ec      	beq.n	8008ee4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f0a:	e080      	b.n	800900e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	0151      	lsls	r1, r2, #5
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	440a      	add	r2, r1
 8008f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f2a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f2c:	e06f      	b.n	800900e <USB_HC_Halt+0x1f0>
          break;
 8008f2e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f30:	e06d      	b.n	800900e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f50:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d143      	bne.n	8008fea <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	0151      	lsls	r1, r2, #5
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	440a      	add	r2, r1
 8008f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f80:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	0151      	lsls	r1, r2, #5
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	440a      	add	r2, r1
 8008f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fa0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	0151      	lsls	r1, r2, #5
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	440a      	add	r2, r1
 8008fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fc0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fce:	d81d      	bhi.n	800900c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fe6:	d0ec      	beq.n	8008fc2 <USB_HC_Halt+0x1a4>
 8008fe8:	e011      	b.n	800900e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	e000      	b.n	800900e <USB_HC_Halt+0x1f0>
          break;
 800900c:	bf00      	nop
    }
  }

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	371c      	adds	r7, #28
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff fe07 	bl	8008c40 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009032:	2110      	movs	r1, #16
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff fe15 	bl	8008c64 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff fe38 	bl	8008cb0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009040:	2300      	movs	r3, #0
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	e01f      	b.n	8009086 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	4413      	add	r3, r2
 800904e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800905c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009064:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800906c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	4413      	add	r3, r2
 8009076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800907a:	461a      	mov	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3301      	adds	r3, #1
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b0f      	cmp	r3, #15
 800908a:	d9dc      	bls.n	8009046 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800908c:	2300      	movs	r3, #0
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	e034      	b.n	80090fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4413      	add	r3, r2
 800909a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c6:	461a      	mov	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	3301      	adds	r3, #1
 80090d0:	617b      	str	r3, [r7, #20]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090d8:	d80c      	bhi.n	80090f4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090f0:	d0ec      	beq.n	80090cc <USB_StopHost+0xb0>
 80090f2:	e000      	b.n	80090f6 <USB_StopHost+0xda>
        break;
 80090f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	3301      	adds	r3, #1
 80090fa:	613b      	str	r3, [r7, #16]
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	2b0f      	cmp	r3, #15
 8009100:	d9c7      	bls.n	8009092 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009108:	461a      	mov	r2, r3
 800910a:	f04f 33ff 	mov.w	r3, #4294967295
 800910e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f04f 32ff 	mov.w	r2, #4294967295
 8009116:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff fd80 	bl	8008c1e <USB_EnableGlobalInt>

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f804 	bl	800914c <USBH_HandleSof>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b0b      	cmp	r3, #11
 800915c:	d10a      	bne.n	8009174 <USBH_HandleSof+0x28>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	4798      	blx	r3
  }
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091a0:	2200      	movs	r2, #0
 80091a2:	4619      	mov	r1, r3
 80091a4:	f000 f8ae 	bl	8009304 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80091a8:	bf00      	nop
}
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80091c0:	bf00      	nop
}
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009200:	2200      	movs	r2, #0
 8009202:	4619      	mov	r1, r3
 8009204:	f000 f87e 	bl	8009304 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 f8fe 	bl	800a434 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	791b      	ldrb	r3, [r3, #4]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f830 	bl	80092a4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	795b      	ldrb	r3, [r3, #5]
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f82a 	bl	80092a4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009264:	2200      	movs	r2, #0
 8009266:	4619      	mov	r1, r3
 8009268:	f000 f84c 	bl	8009304 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009292:	2200      	movs	r2, #0
 8009294:	4619      	mov	r1, r3
 8009296:	f000 f835 	bl	8009304 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	2b0a      	cmp	r3, #10
 80092b4:	d80d      	bhi.n	80092d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80092b6:	78fb      	ldrb	r3, [r7, #3]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	33e0      	adds	r3, #224	; 0xe0
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	78fb      	ldrb	r3, [r7, #3]
 80092c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	33e0      	adds	r3, #224	; 0xe0
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	440b      	add	r3, r1
 80092d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092e6:	f3ef 8305 	mrs	r3, IPSR
 80092ea:	607b      	str	r3, [r7, #4]
  return(result);
 80092ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bf14      	ite	ne
 80092f2:	2301      	movne	r3, #1
 80092f4:	2300      	moveq	r3, #0
 80092f6:	b2db      	uxtb	r3, r3
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <osMessagePut+0x1e>
    ticks = 1;
 800931e:	2301      	movs	r3, #1
 8009320:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009322:	f7ff ffdd 	bl	80092e0 <inHandlerMode>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d018      	beq.n	800935e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800932c:	f107 0210 	add.w	r2, r7, #16
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	2300      	movs	r3, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 f9a6 	bl	8009688 <xQueueGenericSendFromISR>
 800933c:	4603      	mov	r3, r0
 800933e:	2b01      	cmp	r3, #1
 8009340:	d001      	beq.n	8009346 <osMessagePut+0x42>
      return osErrorOS;
 8009342:	23ff      	movs	r3, #255	; 0xff
 8009344:	e018      	b.n	8009378 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d014      	beq.n	8009376 <osMessagePut+0x72>
 800934c:	4b0c      	ldr	r3, [pc, #48]	; (8009380 <osMessagePut+0x7c>)
 800934e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	e00b      	b.n	8009376 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800935e:	f107 0108 	add.w	r1, r7, #8
 8009362:	2300      	movs	r3, #0
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 f894 	bl	8009494 <xQueueGenericSend>
 800936c:	4603      	mov	r3, r0
 800936e:	2b01      	cmp	r3, #1
 8009370:	d001      	beq.n	8009376 <osMessagePut+0x72>
      return osErrorOS;
 8009372:	23ff      	movs	r3, #255	; 0xff
 8009374:	e000      	b.n	8009378 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	e000ed04 	.word	0xe000ed04

08009384 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689a      	ldr	r2, [r3, #8]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	601a      	str	r2, [r3, #0]
}
 80093c0:	bf00      	nop
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e2:	d103      	bne.n	80093ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	e00c      	b.n	8009406 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3308      	adds	r3, #8
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	e002      	b.n	80093fa <vListInsert+0x2e>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	60fb      	str	r3, [r7, #12]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	429a      	cmp	r2, r3
 8009404:	d2f6      	bcs.n	80093f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	1c5a      	adds	r2, r3, #1
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	601a      	str	r2, [r3, #0]
}
 8009432:	bf00      	nop
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800943e:	b480      	push	{r7}
 8009440:	b085      	sub	sp, #20
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6892      	ldr	r2, [r2, #8]
 8009454:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	6852      	ldr	r2, [r2, #4]
 800945e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d103      	bne.n	8009472 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	1e5a      	subs	r2, r3, #1
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
	...

08009494 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b08e      	sub	sp, #56	; 0x38
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d109      	bne.n	80094c4 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80094c2:	e7fe      	b.n	80094c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d103      	bne.n	80094d2 <xQueueGenericSend+0x3e>
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <xQueueGenericSend+0x42>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <xQueueGenericSend+0x44>
 80094d6:	2300      	movs	r3, #0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d109      	bne.n	80094f0 <xQueueGenericSend+0x5c>
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
 80094ee:	e7fe      	b.n	80094ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d103      	bne.n	80094fe <xQueueGenericSend+0x6a>
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <xQueueGenericSend+0x6e>
 80094fe:	2301      	movs	r3, #1
 8009500:	e000      	b.n	8009504 <xQueueGenericSend+0x70>
 8009502:	2300      	movs	r3, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d109      	bne.n	800951c <xQueueGenericSend+0x88>
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	623b      	str	r3, [r7, #32]
 800951a:	e7fe      	b.n	800951a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800951c:	f000 fd26 	bl	8009f6c <xTaskGetSchedulerState>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d102      	bne.n	800952c <xQueueGenericSend+0x98>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <xQueueGenericSend+0x9c>
 800952c:	2301      	movs	r3, #1
 800952e:	e000      	b.n	8009532 <xQueueGenericSend+0x9e>
 8009530:	2300      	movs	r3, #0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d109      	bne.n	800954a <xQueueGenericSend+0xb6>
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	61fb      	str	r3, [r7, #28]
 8009548:	e7fe      	b.n	8009548 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800954a:	f000 fe2d 	bl	800a1a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009556:	429a      	cmp	r2, r3
 8009558:	d302      	bcc.n	8009560 <xQueueGenericSend+0xcc>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d129      	bne.n	80095b4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009566:	f000 f923 	bl	80097b0 <prvCopyDataToQueue>
 800956a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d010      	beq.n	8009596 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	3324      	adds	r3, #36	; 0x24
 8009578:	4618      	mov	r0, r3
 800957a:	f000 fbf3 	bl	8009d64 <xTaskRemoveFromEventList>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d013      	beq.n	80095ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009584:	4b3f      	ldr	r3, [pc, #252]	; (8009684 <xQueueGenericSend+0x1f0>)
 8009586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	e00a      	b.n	80095ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d007      	beq.n	80095ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800959c:	4b39      	ldr	r3, [pc, #228]	; (8009684 <xQueueGenericSend+0x1f0>)
 800959e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095ac:	f000 fe2a 	bl	800a204 <vPortExitCritical>
				return pdPASS;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e063      	b.n	800967c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d103      	bne.n	80095c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095ba:	f000 fe23 	bl	800a204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095be:	2300      	movs	r3, #0
 80095c0:	e05c      	b.n	800967c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095c8:	f107 0314 	add.w	r3, r7, #20
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fc2b 	bl	8009e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095d2:	2301      	movs	r3, #1
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095d6:	f000 fe15 	bl	800a204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095da:	f000 f9bd 	bl	8009958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095de:	f000 fde3 	bl	800a1a8 <vPortEnterCritical>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095e8:	b25b      	sxtb	r3, r3
 80095ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ee:	d103      	bne.n	80095f8 <xQueueGenericSend+0x164>
 80095f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095fe:	b25b      	sxtb	r3, r3
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009604:	d103      	bne.n	800960e <xQueueGenericSend+0x17a>
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800960e:	f000 fdf9 	bl	800a204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009612:	1d3a      	adds	r2, r7, #4
 8009614:	f107 0314 	add.w	r3, r7, #20
 8009618:	4611      	mov	r1, r2
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fc1a 	bl	8009e54 <xTaskCheckForTimeOut>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d124      	bne.n	8009670 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009628:	f000 f97e 	bl	8009928 <prvIsQueueFull>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d018      	beq.n	8009664 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	3310      	adds	r3, #16
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	4611      	mov	r1, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fb6e 	bl	8009d1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009642:	f000 f91f 	bl	8009884 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009646:	f000 f995 	bl	8009974 <xTaskResumeAll>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	f47f af7c 	bne.w	800954a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009652:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <xQueueGenericSend+0x1f0>)
 8009654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	e772      	b.n	800954a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009666:	f000 f90d 	bl	8009884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800966a:	f000 f983 	bl	8009974 <xTaskResumeAll>
 800966e:	e76c      	b.n	800954a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009672:	f000 f907 	bl	8009884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009676:	f000 f97d 	bl	8009974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800967a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800967c:	4618      	mov	r0, r3
 800967e:	3738      	adds	r7, #56	; 0x38
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	e000ed04 	.word	0xe000ed04

08009688 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08e      	sub	sp, #56	; 0x38
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	2b00      	cmp	r3, #0
 800969e:	d109      	bne.n	80096b4 <xQueueGenericSendFromISR+0x2c>
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	627b      	str	r3, [r7, #36]	; 0x24
 80096b2:	e7fe      	b.n	80096b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d103      	bne.n	80096c2 <xQueueGenericSendFromISR+0x3a>
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <xQueueGenericSendFromISR+0x3e>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <xQueueGenericSendFromISR+0x40>
 80096c6:	2300      	movs	r3, #0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d109      	bne.n	80096e0 <xQueueGenericSendFromISR+0x58>
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	623b      	str	r3, [r7, #32]
 80096de:	e7fe      	b.n	80096de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d103      	bne.n	80096ee <xQueueGenericSendFromISR+0x66>
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <xQueueGenericSendFromISR+0x6a>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e000      	b.n	80096f4 <xQueueGenericSendFromISR+0x6c>
 80096f2:	2300      	movs	r3, #0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d109      	bne.n	800970c <xQueueGenericSendFromISR+0x84>
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	61fb      	str	r3, [r7, #28]
 800970a:	e7fe      	b.n	800970a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800970c:	f000 fdfc 	bl	800a308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009710:	f3ef 8211 	mrs	r2, BASEPRI
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	61ba      	str	r2, [r7, #24]
 8009726:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009728:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009734:	429a      	cmp	r2, r3
 8009736:	d302      	bcc.n	800973e <xQueueGenericSendFromISR+0xb6>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d12c      	bne.n	8009798 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800974e:	f000 f82f 	bl	80097b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009752:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d112      	bne.n	8009782 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	2b00      	cmp	r3, #0
 8009762:	d016      	beq.n	8009792 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	3324      	adds	r3, #36	; 0x24
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fafb 	bl	8009d64 <xTaskRemoveFromEventList>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00e      	beq.n	8009792 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00b      	beq.n	8009792 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	e007      	b.n	8009792 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009786:	3301      	adds	r3, #1
 8009788:	b2db      	uxtb	r3, r3
 800978a:	b25a      	sxtb	r2, r3
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009792:	2301      	movs	r3, #1
 8009794:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009796:	e001      	b.n	800979c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009798:	2300      	movs	r3, #0
 800979a:	637b      	str	r3, [r7, #52]	; 0x34
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3738      	adds	r7, #56	; 0x38
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80097bc:	2300      	movs	r3, #0
 80097be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10d      	bne.n	80097ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d14d      	bne.n	8009872 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fbe4 	bl	8009fa8 <xTaskPriorityDisinherit>
 80097e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	609a      	str	r2, [r3, #8]
 80097e8:	e043      	b.n	8009872 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d119      	bne.n	8009824 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6858      	ldr	r0, [r3, #4]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	461a      	mov	r2, r3
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	f000 fe94 	bl	800a528 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	441a      	add	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	429a      	cmp	r2, r3
 8009818:	d32b      	bcc.n	8009872 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	605a      	str	r2, [r3, #4]
 8009822:	e026      	b.n	8009872 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68d8      	ldr	r0, [r3, #12]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982c:	461a      	mov	r2, r3
 800982e:	68b9      	ldr	r1, [r7, #8]
 8009830:	f000 fe7a 	bl	800a528 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68da      	ldr	r2, [r3, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	425b      	negs	r3, r3
 800983e:	441a      	add	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	429a      	cmp	r2, r3
 800984e:	d207      	bcs.n	8009860 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	425b      	negs	r3, r3
 800985a:	441a      	add	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b02      	cmp	r3, #2
 8009864:	d105      	bne.n	8009872 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	3b01      	subs	r3, #1
 8009870:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800987a:	697b      	ldr	r3, [r7, #20]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800988c:	f000 fc8c 	bl	800a1a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009896:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009898:	e011      	b.n	80098be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d012      	beq.n	80098c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3324      	adds	r3, #36	; 0x24
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fa5c 	bl	8009d64 <xTaskRemoveFromEventList>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098b2:	f000 fb2f 	bl	8009f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	dce9      	bgt.n	800989a <prvUnlockQueue+0x16>
 80098c6:	e000      	b.n	80098ca <prvUnlockQueue+0x46>
					break;
 80098c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	22ff      	movs	r2, #255	; 0xff
 80098ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098d2:	f000 fc97 	bl	800a204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098d6:	f000 fc67 	bl	800a1a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098e2:	e011      	b.n	8009908 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d012      	beq.n	8009912 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3310      	adds	r3, #16
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fa37 	bl	8009d64 <xTaskRemoveFromEventList>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098fc:	f000 fb0a 	bl	8009f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	3b01      	subs	r3, #1
 8009904:	b2db      	uxtb	r3, r3
 8009906:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800990c:	2b00      	cmp	r3, #0
 800990e:	dce9      	bgt.n	80098e4 <prvUnlockQueue+0x60>
 8009910:	e000      	b.n	8009914 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009912:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	22ff      	movs	r2, #255	; 0xff
 8009918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800991c:	f000 fc72 	bl	800a204 <vPortExitCritical>
}
 8009920:	bf00      	nop
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009930:	f000 fc3a 	bl	800a1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993c:	429a      	cmp	r2, r3
 800993e:	d102      	bne.n	8009946 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009940:	2301      	movs	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e001      	b.n	800994a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800994a:	f000 fc5b 	bl	800a204 <vPortExitCritical>

	return xReturn;
 800994e:	68fb      	ldr	r3, [r7, #12]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800995c:	4b04      	ldr	r3, [pc, #16]	; (8009970 <vTaskSuspendAll+0x18>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3301      	adds	r3, #1
 8009962:	4a03      	ldr	r2, [pc, #12]	; (8009970 <vTaskSuspendAll+0x18>)
 8009964:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009966:	bf00      	nop
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	20000368 	.word	0x20000368

08009974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800997e:	2300      	movs	r3, #0
 8009980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009982:	4b41      	ldr	r3, [pc, #260]	; (8009a88 <xTaskResumeAll+0x114>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d109      	bne.n	800999e <xTaskResumeAll+0x2a>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	e7fe      	b.n	800999c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800999e:	f000 fc03 	bl	800a1a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099a2:	4b39      	ldr	r3, [pc, #228]	; (8009a88 <xTaskResumeAll+0x114>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	4a37      	ldr	r2, [pc, #220]	; (8009a88 <xTaskResumeAll+0x114>)
 80099aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ac:	4b36      	ldr	r3, [pc, #216]	; (8009a88 <xTaskResumeAll+0x114>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d161      	bne.n	8009a78 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099b4:	4b35      	ldr	r3, [pc, #212]	; (8009a8c <xTaskResumeAll+0x118>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d05d      	beq.n	8009a78 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099bc:	e02e      	b.n	8009a1c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099be:	4b34      	ldr	r3, [pc, #208]	; (8009a90 <xTaskResumeAll+0x11c>)
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3318      	adds	r3, #24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff fd37 	bl	800943e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff fd32 	bl	800943e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099de:	2201      	movs	r2, #1
 80099e0:	409a      	lsls	r2, r3
 80099e2:	4b2c      	ldr	r3, [pc, #176]	; (8009a94 <xTaskResumeAll+0x120>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	4a2a      	ldr	r2, [pc, #168]	; (8009a94 <xTaskResumeAll+0x120>)
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4a27      	ldr	r2, [pc, #156]	; (8009a98 <xTaskResumeAll+0x124>)
 80099fa:	441a      	add	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3304      	adds	r3, #4
 8009a00:	4619      	mov	r1, r3
 8009a02:	4610      	mov	r0, r2
 8009a04:	f7ff fcbe 	bl	8009384 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	4b23      	ldr	r3, [pc, #140]	; (8009a9c <xTaskResumeAll+0x128>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d302      	bcc.n	8009a1c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009a16:	4b22      	ldr	r3, [pc, #136]	; (8009aa0 <xTaskResumeAll+0x12c>)
 8009a18:	2201      	movs	r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a1c:	4b1c      	ldr	r3, [pc, #112]	; (8009a90 <xTaskResumeAll+0x11c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1cc      	bne.n	80099be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a2a:	f000 fa7f 	bl	8009f2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a2e:	4b1d      	ldr	r3, [pc, #116]	; (8009aa4 <xTaskResumeAll+0x130>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d010      	beq.n	8009a5c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a3a:	f000 f837 	bl	8009aac <xTaskIncrementTick>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009a44:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <xTaskResumeAll+0x12c>)
 8009a46:	2201      	movs	r2, #1
 8009a48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f1      	bne.n	8009a3a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009a56:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <xTaskResumeAll+0x130>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <xTaskResumeAll+0x12c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d009      	beq.n	8009a78 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a64:	2301      	movs	r3, #1
 8009a66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a68:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <xTaskResumeAll+0x134>)
 8009a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a78:	f000 fbc4 	bl	800a204 <vPortExitCritical>

	return xAlreadyYielded;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000368 	.word	0x20000368
 8009a8c:	20000348 	.word	0x20000348
 8009a90:	20000320 	.word	0x20000320
 8009a94:	20000350 	.word	0x20000350
 8009a98:	2000028c 	.word	0x2000028c
 8009a9c:	20000288 	.word	0x20000288
 8009aa0:	2000035c 	.word	0x2000035c
 8009aa4:	20000358 	.word	0x20000358
 8009aa8:	e000ed04 	.word	0xe000ed04

08009aac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab6:	4b4e      	ldr	r3, [pc, #312]	; (8009bf0 <xTaskIncrementTick+0x144>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 8087 	bne.w	8009bce <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ac0:	4b4c      	ldr	r3, [pc, #304]	; (8009bf4 <xTaskIncrementTick+0x148>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ac8:	4a4a      	ldr	r2, [pc, #296]	; (8009bf4 <xTaskIncrementTick+0x148>)
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d11f      	bne.n	8009b14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ad4:	4b48      	ldr	r3, [pc, #288]	; (8009bf8 <xTaskIncrementTick+0x14c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d009      	beq.n	8009af2 <xTaskIncrementTick+0x46>
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	e7fe      	b.n	8009af0 <xTaskIncrementTick+0x44>
 8009af2:	4b41      	ldr	r3, [pc, #260]	; (8009bf8 <xTaskIncrementTick+0x14c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60fb      	str	r3, [r7, #12]
 8009af8:	4b40      	ldr	r3, [pc, #256]	; (8009bfc <xTaskIncrementTick+0x150>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a3e      	ldr	r2, [pc, #248]	; (8009bf8 <xTaskIncrementTick+0x14c>)
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	4a3e      	ldr	r2, [pc, #248]	; (8009bfc <xTaskIncrementTick+0x150>)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	4b3e      	ldr	r3, [pc, #248]	; (8009c00 <xTaskIncrementTick+0x154>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	4a3c      	ldr	r2, [pc, #240]	; (8009c00 <xTaskIncrementTick+0x154>)
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	f000 fa0c 	bl	8009f2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b14:	4b3b      	ldr	r3, [pc, #236]	; (8009c04 <xTaskIncrementTick+0x158>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d348      	bcc.n	8009bb0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b1e:	4b36      	ldr	r3, [pc, #216]	; (8009bf8 <xTaskIncrementTick+0x14c>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d104      	bne.n	8009b32 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b28:	4b36      	ldr	r3, [pc, #216]	; (8009c04 <xTaskIncrementTick+0x158>)
 8009b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2e:	601a      	str	r2, [r3, #0]
					break;
 8009b30:	e03e      	b.n	8009bb0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b32:	4b31      	ldr	r3, [pc, #196]	; (8009bf8 <xTaskIncrementTick+0x14c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d203      	bcs.n	8009b52 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b4a:	4a2e      	ldr	r2, [pc, #184]	; (8009c04 <xTaskIncrementTick+0x158>)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b50:	e02e      	b.n	8009bb0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	3304      	adds	r3, #4
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff fc71 	bl	800943e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d004      	beq.n	8009b6e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	3318      	adds	r3, #24
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7ff fc68 	bl	800943e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	2201      	movs	r2, #1
 8009b74:	409a      	lsls	r2, r3
 8009b76:	4b24      	ldr	r3, [pc, #144]	; (8009c08 <xTaskIncrementTick+0x15c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	4a22      	ldr	r2, [pc, #136]	; (8009c08 <xTaskIncrementTick+0x15c>)
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4a1f      	ldr	r2, [pc, #124]	; (8009c0c <xTaskIncrementTick+0x160>)
 8009b8e:	441a      	add	r2, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7ff fbf4 	bl	8009384 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba0:	4b1b      	ldr	r3, [pc, #108]	; (8009c10 <xTaskIncrementTick+0x164>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d3b9      	bcc.n	8009b1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009baa:	2301      	movs	r3, #1
 8009bac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bae:	e7b6      	b.n	8009b1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bb0:	4b17      	ldr	r3, [pc, #92]	; (8009c10 <xTaskIncrementTick+0x164>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	4915      	ldr	r1, [pc, #84]	; (8009c0c <xTaskIncrementTick+0x160>)
 8009bb8:	4613      	mov	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	440b      	add	r3, r1
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d907      	bls.n	8009bd8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e004      	b.n	8009bd8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009bce:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <xTaskIncrementTick+0x168>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a0f      	ldr	r2, [pc, #60]	; (8009c14 <xTaskIncrementTick+0x168>)
 8009bd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <xTaskIncrementTick+0x16c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009be4:	697b      	ldr	r3, [r7, #20]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000368 	.word	0x20000368
 8009bf4:	2000034c 	.word	0x2000034c
 8009bf8:	20000318 	.word	0x20000318
 8009bfc:	2000031c 	.word	0x2000031c
 8009c00:	20000360 	.word	0x20000360
 8009c04:	20000364 	.word	0x20000364
 8009c08:	20000350 	.word	0x20000350
 8009c0c:	2000028c 	.word	0x2000028c
 8009c10:	20000288 	.word	0x20000288
 8009c14:	20000358 	.word	0x20000358
 8009c18:	2000035c 	.word	0x2000035c

08009c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c22:	4b39      	ldr	r3, [pc, #228]	; (8009d08 <vTaskSwitchContext+0xec>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c2a:	4b38      	ldr	r3, [pc, #224]	; (8009d0c <vTaskSwitchContext+0xf0>)
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c30:	e065      	b.n	8009cfe <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009c32:	4b36      	ldr	r3, [pc, #216]	; (8009d0c <vTaskSwitchContext+0xf0>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009c38:	4b35      	ldr	r3, [pc, #212]	; (8009d10 <vTaskSwitchContext+0xf4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3e:	61fb      	str	r3, [r7, #28]
 8009c40:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009c44:	61bb      	str	r3, [r7, #24]
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d111      	bne.n	8009c74 <vTaskSwitchContext+0x58>
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	3304      	adds	r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d10b      	bne.n	8009c74 <vTaskSwitchContext+0x58>
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	3308      	adds	r3, #8
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d105      	bne.n	8009c74 <vTaskSwitchContext+0x58>
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	330c      	adds	r3, #12
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d008      	beq.n	8009c86 <vTaskSwitchContext+0x6a>
 8009c74:	4b26      	ldr	r3, [pc, #152]	; (8009d10 <vTaskSwitchContext+0xf4>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	4b25      	ldr	r3, [pc, #148]	; (8009d10 <vTaskSwitchContext+0xf4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3334      	adds	r3, #52	; 0x34
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7f6 fecb 	bl	8000a1c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c86:	4b23      	ldr	r3, [pc, #140]	; (8009d14 <vTaskSwitchContext+0xf8>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	fab3 f383 	clz	r3, r3
 8009c92:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	f1c3 031f 	rsb	r3, r3, #31
 8009c9a:	617b      	str	r3, [r7, #20]
 8009c9c:	491e      	ldr	r1, [pc, #120]	; (8009d18 <vTaskSwitchContext+0xfc>)
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d109      	bne.n	8009cc4 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	607b      	str	r3, [r7, #4]
 8009cc2:	e7fe      	b.n	8009cc2 <vTaskSwitchContext+0xa6>
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4a12      	ldr	r2, [pc, #72]	; (8009d18 <vTaskSwitchContext+0xfc>)
 8009cd0:	4413      	add	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	605a      	str	r2, [r3, #4]
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d104      	bne.n	8009cf4 <vTaskSwitchContext+0xd8>
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	605a      	str	r2, [r3, #4]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	4a05      	ldr	r2, [pc, #20]	; (8009d10 <vTaskSwitchContext+0xf4>)
 8009cfc:	6013      	str	r3, [r2, #0]
}
 8009cfe:	bf00      	nop
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000368 	.word	0x20000368
 8009d0c:	2000035c 	.word	0x2000035c
 8009d10:	20000288 	.word	0x20000288
 8009d14:	20000350 	.word	0x20000350
 8009d18:	2000028c 	.word	0x2000028c

08009d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d109      	bne.n	8009d40 <vTaskPlaceOnEventList+0x24>
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	e7fe      	b.n	8009d3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <vTaskPlaceOnEventList+0x44>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3318      	adds	r3, #24
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff fb3f 	bl	80093cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d4e:	2101      	movs	r1, #1
 8009d50:	6838      	ldr	r0, [r7, #0]
 8009d52:	f000 f9ad 	bl	800a0b0 <prvAddCurrentTaskToDelayedList>
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000288 	.word	0x20000288

08009d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <xTaskRemoveFromEventList+0x2a>
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	e7fe      	b.n	8009d8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	3318      	adds	r3, #24
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7ff fb53 	bl	800943e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d98:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <xTaskRemoveFromEventList+0xac>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d11c      	bne.n	8009dda <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7ff fb4a 	bl	800943e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	2201      	movs	r2, #1
 8009db0:	409a      	lsls	r2, r3
 8009db2:	4b18      	ldr	r3, [pc, #96]	; (8009e14 <xTaskRemoveFromEventList+0xb0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	4a16      	ldr	r2, [pc, #88]	; (8009e14 <xTaskRemoveFromEventList+0xb0>)
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4a13      	ldr	r2, [pc, #76]	; (8009e18 <xTaskRemoveFromEventList+0xb4>)
 8009dca:	441a      	add	r2, r3
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	3304      	adds	r3, #4
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f7ff fad6 	bl	8009384 <vListInsertEnd>
 8009dd8:	e005      	b.n	8009de6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	3318      	adds	r3, #24
 8009dde:	4619      	mov	r1, r3
 8009de0:	480e      	ldr	r0, [pc, #56]	; (8009e1c <xTaskRemoveFromEventList+0xb8>)
 8009de2:	f7ff facf 	bl	8009384 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dea:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <xTaskRemoveFromEventList+0xbc>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d905      	bls.n	8009e00 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009df4:	2301      	movs	r3, #1
 8009df6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009df8:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <xTaskRemoveFromEventList+0xc0>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	e001      	b.n	8009e04 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e04:	697b      	ldr	r3, [r7, #20]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	20000368 	.word	0x20000368
 8009e14:	20000350 	.word	0x20000350
 8009e18:	2000028c 	.word	0x2000028c
 8009e1c:	20000320 	.word	0x20000320
 8009e20:	20000288 	.word	0x20000288
 8009e24:	2000035c 	.word	0x2000035c

08009e28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e30:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <vTaskInternalSetTimeOutState+0x24>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e38:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <vTaskInternalSetTimeOutState+0x28>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	605a      	str	r2, [r3, #4]
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	20000360 	.word	0x20000360
 8009e50:	2000034c 	.word	0x2000034c

08009e54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <xTaskCheckForTimeOut+0x24>
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	e7fe      	b.n	8009e76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d109      	bne.n	8009e92 <xTaskCheckForTimeOut+0x3e>
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e7fe      	b.n	8009e90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009e92:	f000 f989 	bl	800a1a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e96:	4b1d      	ldr	r3, [pc, #116]	; (8009f0c <xTaskCheckForTimeOut+0xb8>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eae:	d102      	bne.n	8009eb6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	61fb      	str	r3, [r7, #28]
 8009eb4:	e023      	b.n	8009efe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4b15      	ldr	r3, [pc, #84]	; (8009f10 <xTaskCheckForTimeOut+0xbc>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d007      	beq.n	8009ed2 <xTaskCheckForTimeOut+0x7e>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	69ba      	ldr	r2, [r7, #24]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d302      	bcc.n	8009ed2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	61fb      	str	r3, [r7, #28]
 8009ed0:	e015      	b.n	8009efe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d20b      	bcs.n	8009ef4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	1ad2      	subs	r2, r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff ff9d 	bl	8009e28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	e004      	b.n	8009efe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009efa:	2301      	movs	r3, #1
 8009efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009efe:	f000 f981 	bl	800a204 <vPortExitCritical>

	return xReturn;
 8009f02:	69fb      	ldr	r3, [r7, #28]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3720      	adds	r7, #32
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	2000034c 	.word	0x2000034c
 8009f10:	20000360 	.word	0x20000360

08009f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f18:	4b03      	ldr	r3, [pc, #12]	; (8009f28 <vTaskMissedYield+0x14>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	601a      	str	r2, [r3, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	2000035c 	.word	0x2000035c

08009f2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f32:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <prvResetNextTaskUnblockTime+0x38>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d104      	bne.n	8009f46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <prvResetNextTaskUnblockTime+0x3c>)
 8009f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f44:	e008      	b.n	8009f58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f46:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <prvResetNextTaskUnblockTime+0x38>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <prvResetNextTaskUnblockTime+0x3c>)
 8009f56:	6013      	str	r3, [r2, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	20000318 	.word	0x20000318
 8009f68:	20000364 	.word	0x20000364

08009f6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f72:	4b0b      	ldr	r3, [pc, #44]	; (8009fa0 <xTaskGetSchedulerState+0x34>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	607b      	str	r3, [r7, #4]
 8009f7e:	e008      	b.n	8009f92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f80:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <xTaskGetSchedulerState+0x38>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	607b      	str	r3, [r7, #4]
 8009f8c:	e001      	b.n	8009f92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f92:	687b      	ldr	r3, [r7, #4]
	}
 8009f94:	4618      	mov	r0, r3
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	20000354 	.word	0x20000354
 8009fa4:	20000368 	.word	0x20000368

08009fa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d06c      	beq.n	800a098 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fbe:	4b39      	ldr	r3, [pc, #228]	; (800a0a4 <xTaskPriorityDisinherit+0xfc>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d009      	beq.n	8009fdc <xTaskPriorityDisinherit+0x34>
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	e7fe      	b.n	8009fda <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d109      	bne.n	8009ff8 <xTaskPriorityDisinherit+0x50>
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	60bb      	str	r3, [r7, #8]
 8009ff6:	e7fe      	b.n	8009ff6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ffc:	1e5a      	subs	r2, r3, #1
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d044      	beq.n	800a098 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a012:	2b00      	cmp	r3, #0
 800a014:	d140      	bne.n	800a098 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	3304      	adds	r3, #4
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff fa0f 	bl	800943e <uxListRemove>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d115      	bne.n	800a052 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02a:	491f      	ldr	r1, [pc, #124]	; (800a0a8 <xTaskPriorityDisinherit+0x100>)
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	440b      	add	r3, r1
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <xTaskPriorityDisinherit+0xaa>
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	2201      	movs	r2, #1
 800a042:	fa02 f303 	lsl.w	r3, r2, r3
 800a046:	43da      	mvns	r2, r3
 800a048:	4b18      	ldr	r3, [pc, #96]	; (800a0ac <xTaskPriorityDisinherit+0x104>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4013      	ands	r3, r2
 800a04e:	4a17      	ldr	r2, [pc, #92]	; (800a0ac <xTaskPriorityDisinherit+0x104>)
 800a050:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05e:	f1c3 0207 	rsb	r2, r3, #7
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06a:	2201      	movs	r2, #1
 800a06c:	409a      	lsls	r2, r3
 800a06e:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <xTaskPriorityDisinherit+0x104>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4313      	orrs	r3, r2
 800a074:	4a0d      	ldr	r2, [pc, #52]	; (800a0ac <xTaskPriorityDisinherit+0x104>)
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4a08      	ldr	r2, [pc, #32]	; (800a0a8 <xTaskPriorityDisinherit+0x100>)
 800a086:	441a      	add	r2, r3
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7ff f978 	bl	8009384 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a098:	697b      	ldr	r3, [r7, #20]
	}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20000288 	.word	0x20000288
 800a0a8:	2000028c 	.word	0x2000028c
 800a0ac:	20000350 	.word	0x20000350

0800a0b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0ba:	4b29      	ldr	r3, [pc, #164]	; (800a160 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0c0:	4b28      	ldr	r3, [pc, #160]	; (800a164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff f9b9 	bl	800943e <uxListRemove>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10b      	bne.n	800a0ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a0d2:	4b24      	ldr	r3, [pc, #144]	; (800a164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	2201      	movs	r2, #1
 800a0da:	fa02 f303 	lsl.w	r3, r2, r3
 800a0de:	43da      	mvns	r2, r3
 800a0e0:	4b21      	ldr	r3, [pc, #132]	; (800a168 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	4a20      	ldr	r2, [pc, #128]	; (800a168 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f0:	d10a      	bne.n	800a108 <prvAddCurrentTaskToDelayedList+0x58>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d007      	beq.n	800a108 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0f8:	4b1a      	ldr	r3, [pc, #104]	; (800a164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	481a      	ldr	r0, [pc, #104]	; (800a16c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a102:	f7ff f93f 	bl	8009384 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a106:	e026      	b.n	800a156 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4413      	add	r3, r2
 800a10e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a110:	4b14      	ldr	r3, [pc, #80]	; (800a164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d209      	bcs.n	800a134 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a120:	4b13      	ldr	r3, [pc, #76]	; (800a170 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3304      	adds	r3, #4
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f7ff f94d 	bl	80093cc <vListInsert>
}
 800a132:	e010      	b.n	800a156 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f7ff f943 	bl	80093cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a146:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d202      	bcs.n	800a156 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a150:	4a09      	ldr	r2, [pc, #36]	; (800a178 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	6013      	str	r3, [r2, #0]
}
 800a156:	bf00      	nop
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	2000034c 	.word	0x2000034c
 800a164:	20000288 	.word	0x20000288
 800a168:	20000350 	.word	0x20000350
 800a16c:	20000334 	.word	0x20000334
 800a170:	2000031c 	.word	0x2000031c
 800a174:	20000318 	.word	0x20000318
 800a178:	20000364 	.word	0x20000364
 800a17c:	00000000 	.word	0x00000000

0800a180 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <pxCurrentTCBConst2>)
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	6808      	ldr	r0, [r1, #0]
 800a186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	f380 8809 	msr	PSP, r0
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	4770      	bx	lr
 800a19c:	f3af 8000 	nop.w

0800a1a0 <pxCurrentTCBConst2>:
 800a1a0:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1c0:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <vPortEnterCritical+0x54>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	4a0d      	ldr	r2, [pc, #52]	; (800a1fc <vPortEnterCritical+0x54>)
 800a1c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <vPortEnterCritical+0x54>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d10e      	bne.n	800a1f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1d2:	4b0b      	ldr	r3, [pc, #44]	; (800a200 <vPortEnterCritical+0x58>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <vPortEnterCritical+0x48>
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	603b      	str	r3, [r7, #0]
 800a1ee:	e7fe      	b.n	800a1ee <vPortEnterCritical+0x46>
	}
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	20000054 	.word	0x20000054
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <vPortExitCritical+0x4c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d109      	bne.n	800a226 <vPortExitCritical+0x22>
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	607b      	str	r3, [r7, #4]
 800a224:	e7fe      	b.n	800a224 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a226:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <vPortExitCritical+0x4c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4a08      	ldr	r2, [pc, #32]	; (800a250 <vPortExitCritical+0x4c>)
 800a22e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <vPortExitCritical+0x4c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d104      	bne.n	800a242 <vPortExitCritical+0x3e>
 800a238:	2300      	movs	r3, #0
 800a23a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a242:	bf00      	nop
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20000054 	.word	0x20000054
	...

0800a260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a260:	f3ef 8009 	mrs	r0, PSP
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <pxCurrentTCBConst>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f01e 0f10 	tst.w	lr, #16
 800a270:	bf08      	it	eq
 800a272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a284:	f380 8811 	msr	BASEPRI, r0
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f7ff fcc4 	bl	8009c1c <vTaskSwitchContext>
 800a294:	f04f 0000 	mov.w	r0, #0
 800a298:	f380 8811 	msr	BASEPRI, r0
 800a29c:	bc09      	pop	{r0, r3}
 800a29e:	6819      	ldr	r1, [r3, #0]
 800a2a0:	6808      	ldr	r0, [r1, #0]
 800a2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a6:	f01e 0f10 	tst.w	lr, #16
 800a2aa:	bf08      	it	eq
 800a2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2b0:	f380 8809 	msr	PSP, r0
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	f3af 8000 	nop.w

0800a2c0 <pxCurrentTCBConst>:
 800a2c0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2e0:	f7ff fbe4 	bl	8009aac <xTaskIncrementTick>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ea:	4b06      	ldr	r3, [pc, #24]	; (800a304 <SysTick_Handler+0x3c>)
 800a2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a30e:	f3ef 8305 	mrs	r3, IPSR
 800a312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b0f      	cmp	r3, #15
 800a318:	d913      	bls.n	800a342 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a31a:	4a16      	ldr	r2, [pc, #88]	; (800a374 <vPortValidateInterruptPriority+0x6c>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a324:	4b14      	ldr	r3, [pc, #80]	; (800a378 <vPortValidateInterruptPriority+0x70>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	7afa      	ldrb	r2, [r7, #11]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d209      	bcs.n	800a342 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
 800a340:	e7fe      	b.n	800a340 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a342:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <vPortValidateInterruptPriority+0x74>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a34a:	4b0d      	ldr	r3, [pc, #52]	; (800a380 <vPortValidateInterruptPriority+0x78>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d909      	bls.n	800a366 <vPortValidateInterruptPriority+0x5e>
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	e7fe      	b.n	800a364 <vPortValidateInterruptPriority+0x5c>
	}
 800a366:	bf00      	nop
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	e000e3f0 	.word	0xe000e3f0
 800a378:	2000036c 	.word	0x2000036c
 800a37c:	e000ed0c 	.word	0xe000ed0c
 800a380:	20000370 	.word	0x20000370

0800a384 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe fec8 	bl	8009128 <USBH_LL_IncTimer>
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe ff0c 	bl	80091cc <USBH_LL_Connect>
}
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe ff21 	bl	8009212 <USBH_LL_Disconnect>
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fe ff41 	bl	8009276 <USBH_LL_NotifyURBChange>
#endif
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe feb6 	bl	800917c <USBH_LL_PortEnabled>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fec2 	bl	80091b0 <USBH_LL_PortDisabled>
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fa f853 	bl	80044f6 <HAL_HCD_Stop>
 800a450:	4603      	mov	r3, r0
 800a452:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	4618      	mov	r0, r3
 800a458:	f000 f808 	bl	800a46c <USBH_Get_USB_Status>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a460:	7bbb      	ldrb	r3, [r7, #14]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d817      	bhi.n	800a4b0 <USBH_Get_USB_Status+0x44>
 800a480:	a201      	add	r2, pc, #4	; (adr r2, 800a488 <USBH_Get_USB_Status+0x1c>)
 800a482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a486:	bf00      	nop
 800a488:	0800a499 	.word	0x0800a499
 800a48c:	0800a49f 	.word	0x0800a49f
 800a490:	0800a4a5 	.word	0x0800a4a5
 800a494:	0800a4ab 	.word	0x0800a4ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
    break;
 800a49c:	e00b      	b.n	800a4b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a2:	e008      	b.n	800a4b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a8:	e005      	b.n	800a4b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ae:	e002      	b.n	800a4b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b4:	bf00      	nop
  }
  return usb_status;
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <__errno>:
 800a4c4:	4b01      	ldr	r3, [pc, #4]	; (800a4cc <__errno+0x8>)
 800a4c6:	6818      	ldr	r0, [r3, #0]
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20000058 	.word	0x20000058

0800a4d0 <__libc_init_array>:
 800a4d0:	b570      	push	{r4, r5, r6, lr}
 800a4d2:	4e0d      	ldr	r6, [pc, #52]	; (800a508 <__libc_init_array+0x38>)
 800a4d4:	4c0d      	ldr	r4, [pc, #52]	; (800a50c <__libc_init_array+0x3c>)
 800a4d6:	1ba4      	subs	r4, r4, r6
 800a4d8:	10a4      	asrs	r4, r4, #2
 800a4da:	2500      	movs	r5, #0
 800a4dc:	42a5      	cmp	r5, r4
 800a4de:	d109      	bne.n	800a4f4 <__libc_init_array+0x24>
 800a4e0:	4e0b      	ldr	r6, [pc, #44]	; (800a510 <__libc_init_array+0x40>)
 800a4e2:	4c0c      	ldr	r4, [pc, #48]	; (800a514 <__libc_init_array+0x44>)
 800a4e4:	f000 f8a0 	bl	800a628 <_init>
 800a4e8:	1ba4      	subs	r4, r4, r6
 800a4ea:	10a4      	asrs	r4, r4, #2
 800a4ec:	2500      	movs	r5, #0
 800a4ee:	42a5      	cmp	r5, r4
 800a4f0:	d105      	bne.n	800a4fe <__libc_init_array+0x2e>
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4f8:	4798      	blx	r3
 800a4fa:	3501      	adds	r5, #1
 800a4fc:	e7ee      	b.n	800a4dc <__libc_init_array+0xc>
 800a4fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a502:	4798      	blx	r3
 800a504:	3501      	adds	r5, #1
 800a506:	e7f2      	b.n	800a4ee <__libc_init_array+0x1e>
 800a508:	0800c180 	.word	0x0800c180
 800a50c:	0800c180 	.word	0x0800c180
 800a510:	0800c180 	.word	0x0800c180
 800a514:	0800c184 	.word	0x0800c184

0800a518 <malloc>:
 800a518:	4b02      	ldr	r3, [pc, #8]	; (800a524 <malloc+0xc>)
 800a51a:	4601      	mov	r1, r0
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	f000 b817 	b.w	800a550 <_malloc_r>
 800a522:	bf00      	nop
 800a524:	20000058 	.word	0x20000058

0800a528 <memcpy>:
 800a528:	b510      	push	{r4, lr}
 800a52a:	1e43      	subs	r3, r0, #1
 800a52c:	440a      	add	r2, r1
 800a52e:	4291      	cmp	r1, r2
 800a530:	d100      	bne.n	800a534 <memcpy+0xc>
 800a532:	bd10      	pop	{r4, pc}
 800a534:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a53c:	e7f7      	b.n	800a52e <memcpy+0x6>

0800a53e <memset>:
 800a53e:	4402      	add	r2, r0
 800a540:	4603      	mov	r3, r0
 800a542:	4293      	cmp	r3, r2
 800a544:	d100      	bne.n	800a548 <memset+0xa>
 800a546:	4770      	bx	lr
 800a548:	f803 1b01 	strb.w	r1, [r3], #1
 800a54c:	e7f9      	b.n	800a542 <memset+0x4>
	...

0800a550 <_malloc_r>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	1ccd      	adds	r5, r1, #3
 800a554:	f025 0503 	bic.w	r5, r5, #3
 800a558:	3508      	adds	r5, #8
 800a55a:	2d0c      	cmp	r5, #12
 800a55c:	bf38      	it	cc
 800a55e:	250c      	movcc	r5, #12
 800a560:	2d00      	cmp	r5, #0
 800a562:	4606      	mov	r6, r0
 800a564:	db01      	blt.n	800a56a <_malloc_r+0x1a>
 800a566:	42a9      	cmp	r1, r5
 800a568:	d903      	bls.n	800a572 <_malloc_r+0x22>
 800a56a:	230c      	movs	r3, #12
 800a56c:	6033      	str	r3, [r6, #0]
 800a56e:	2000      	movs	r0, #0
 800a570:	bd70      	pop	{r4, r5, r6, pc}
 800a572:	f000 f857 	bl	800a624 <__malloc_lock>
 800a576:	4a21      	ldr	r2, [pc, #132]	; (800a5fc <_malloc_r+0xac>)
 800a578:	6814      	ldr	r4, [r2, #0]
 800a57a:	4621      	mov	r1, r4
 800a57c:	b991      	cbnz	r1, 800a5a4 <_malloc_r+0x54>
 800a57e:	4c20      	ldr	r4, [pc, #128]	; (800a600 <_malloc_r+0xb0>)
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	b91b      	cbnz	r3, 800a58c <_malloc_r+0x3c>
 800a584:	4630      	mov	r0, r6
 800a586:	f000 f83d 	bl	800a604 <_sbrk_r>
 800a58a:	6020      	str	r0, [r4, #0]
 800a58c:	4629      	mov	r1, r5
 800a58e:	4630      	mov	r0, r6
 800a590:	f000 f838 	bl	800a604 <_sbrk_r>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d124      	bne.n	800a5e2 <_malloc_r+0x92>
 800a598:	230c      	movs	r3, #12
 800a59a:	6033      	str	r3, [r6, #0]
 800a59c:	4630      	mov	r0, r6
 800a59e:	f000 f842 	bl	800a626 <__malloc_unlock>
 800a5a2:	e7e4      	b.n	800a56e <_malloc_r+0x1e>
 800a5a4:	680b      	ldr	r3, [r1, #0]
 800a5a6:	1b5b      	subs	r3, r3, r5
 800a5a8:	d418      	bmi.n	800a5dc <_malloc_r+0x8c>
 800a5aa:	2b0b      	cmp	r3, #11
 800a5ac:	d90f      	bls.n	800a5ce <_malloc_r+0x7e>
 800a5ae:	600b      	str	r3, [r1, #0]
 800a5b0:	50cd      	str	r5, [r1, r3]
 800a5b2:	18cc      	adds	r4, r1, r3
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f000 f836 	bl	800a626 <__malloc_unlock>
 800a5ba:	f104 000b 	add.w	r0, r4, #11
 800a5be:	1d23      	adds	r3, r4, #4
 800a5c0:	f020 0007 	bic.w	r0, r0, #7
 800a5c4:	1ac3      	subs	r3, r0, r3
 800a5c6:	d0d3      	beq.n	800a570 <_malloc_r+0x20>
 800a5c8:	425a      	negs	r2, r3
 800a5ca:	50e2      	str	r2, [r4, r3]
 800a5cc:	e7d0      	b.n	800a570 <_malloc_r+0x20>
 800a5ce:	428c      	cmp	r4, r1
 800a5d0:	684b      	ldr	r3, [r1, #4]
 800a5d2:	bf16      	itet	ne
 800a5d4:	6063      	strne	r3, [r4, #4]
 800a5d6:	6013      	streq	r3, [r2, #0]
 800a5d8:	460c      	movne	r4, r1
 800a5da:	e7eb      	b.n	800a5b4 <_malloc_r+0x64>
 800a5dc:	460c      	mov	r4, r1
 800a5de:	6849      	ldr	r1, [r1, #4]
 800a5e0:	e7cc      	b.n	800a57c <_malloc_r+0x2c>
 800a5e2:	1cc4      	adds	r4, r0, #3
 800a5e4:	f024 0403 	bic.w	r4, r4, #3
 800a5e8:	42a0      	cmp	r0, r4
 800a5ea:	d005      	beq.n	800a5f8 <_malloc_r+0xa8>
 800a5ec:	1a21      	subs	r1, r4, r0
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f000 f808 	bl	800a604 <_sbrk_r>
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d0cf      	beq.n	800a598 <_malloc_r+0x48>
 800a5f8:	6025      	str	r5, [r4, #0]
 800a5fa:	e7db      	b.n	800a5b4 <_malloc_r+0x64>
 800a5fc:	20000374 	.word	0x20000374
 800a600:	20000378 	.word	0x20000378

0800a604 <_sbrk_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4c06      	ldr	r4, [pc, #24]	; (800a620 <_sbrk_r+0x1c>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4605      	mov	r5, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	f7f7 f9a2 	bl	8001958 <_sbrk>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_sbrk_r+0x1a>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_sbrk_r+0x1a>
 800a61c:	602b      	str	r3, [r5, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20000980 	.word	0x20000980

0800a624 <__malloc_lock>:
 800a624:	4770      	bx	lr

0800a626 <__malloc_unlock>:
 800a626:	4770      	bx	lr

0800a628 <_init>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	bf00      	nop
 800a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62e:	bc08      	pop	{r3}
 800a630:	469e      	mov	lr, r3
 800a632:	4770      	bx	lr

0800a634 <_fini>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	bf00      	nop
 800a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63a:	bc08      	pop	{r3}
 800a63c:	469e      	mov	lr, r3
 800a63e:	4770      	bx	lr
