
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c13c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002000  0800c2ec  0800c2ec  0001c2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2ec  0800e2ec  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2ec  0800e2ec  0001e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2f4  0800e2f4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2f4  0800e2f4  0001e2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2f8  0800e2f8  0001e2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800e2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  2000008c  0800e388  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  0800e388  000209e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003afa0  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006a77  00000000  00000000  0005b05c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002658  00000000  00000000  00061ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002380  00000000  00000000  00064130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e462  00000000  00000000  000664b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026e57  00000000  00000000  00094912  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f60e4  00000000  00000000  000bb769  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b184d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a060  00000000  00000000  001b18c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c2d4 	.word	0x0800c2d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800c2d4 	.word	0x0800c2d4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_CRC_Init+0x20>)
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <MX_CRC_Init+0x24>)
 80004f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_CRC_Init+0x20>)
 80004fc:	f003 fdfa 	bl	80040f4 <HAL_CRC_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000506:	f000 fef9 	bl	80012fc <Error_Handler>
  }

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000388 	.word	0x20000388
 8000514:	40023000 	.word	0x40023000

08000518 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_CRC_MspInit+0x3c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d10d      	bne.n	8000546 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_CRC_MspInit+0x40>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023000 	.word	0x40023000
 8000558:	40023800 	.word	0x40023800

0800055c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <MX_DMA2D_Init+0x60>)
 8000564:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000592:	f003 ff87 	bl	80044a4 <HAL_DMA2D_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800059c:	f000 feae 	bl	80012fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005a0:	2101      	movs	r1, #1
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 80005a4:	f004 f9ec 	bl	8004980 <HAL_DMA2D_ConfigLayer>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005ae:	f000 fea5 	bl	80012fc <Error_Handler>
  }

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000390 	.word	0x20000390
 80005bc:	4002b000 	.word	0x4002b000

080005c0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_DMA2D_MspInit+0x48>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d115      	bne.n	80005fe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2105      	movs	r1, #5
 80005f2:	205a      	movs	r0, #90	; 0x5a
 80005f4:	f003 fd54 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005f8:	205a      	movs	r0, #90	; 0x5a
 80005fa:	f003 fd6d 	bl	80040d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	4002b000 	.word	0x4002b000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_FMC_Init+0x98>)
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <MX_FMC_Init+0x9c>)
 800062c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_FMC_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_FMC_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_FMC_Init+0x98>)
 800063c:	2204      	movs	r2, #4
 800063e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_FMC_Init+0x98>)
 8000642:	2210      	movs	r2, #16
 8000644:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_FMC_Init+0x98>)
 8000648:	2240      	movs	r2, #64	; 0x40
 800064a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_FMC_Init+0x98>)
 800064e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000652:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_FMC_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_FMC_Init+0x98>)
 800065c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000660:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_FMC_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_FMC_Init+0x98>)
 800066a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_FMC_Init+0x98>)
 8000692:	f008 fa29 	bl	8008ae8 <HAL_SDRAM_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800069c:	f000 fe2e 	bl	80012fc <Error_Handler>
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200003d0 	.word	0x200003d0
 80006ac:	a0000140 	.word	0xa0000140

080006b0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d16f      	bne.n	80007ac <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006cc:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006f2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000700:	230c      	movs	r3, #12
 8000702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <HAL_FMC_MspInit+0x10c>)
 800070a:	f004 fa67 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800071e:	230c      	movs	r3, #12
 8000720:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <HAL_FMC_MspInit+0x110>)
 8000728:	f004 fa58 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800072c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000730:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800073e:	230c      	movs	r3, #12
 8000740:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <HAL_FMC_MspInit+0x114>)
 8000748:	f004 fa48 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800074c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000750:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800075e:	230c      	movs	r3, #12
 8000760:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <HAL_FMC_MspInit+0x118>)
 8000768:	f004 fa38 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800076c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000770:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077e:	230c      	movs	r3, #12
 8000780:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <HAL_FMC_MspInit+0x11c>)
 8000788:	f004 fa28 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800078c:	2360      	movs	r3, #96	; 0x60
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <HAL_FMC_MspInit+0x120>)
 80007a6:	f004 fa19 	bl	8004bdc <HAL_GPIO_Init>
 80007aa:	e000      	b.n	80007ae <HAL_FMC_MspInit+0xfe>
    return;
 80007ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000a8 	.word	0x200000a8
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40021400 	.word	0x40021400
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40021800 	.word	0x40021800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40020400 	.word	0x40020400

080007d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007dc:	f7ff ff68 	bl	80006b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
 800081a:	4b7a      	ldr	r3, [pc, #488]	; (8000a04 <MX_GPIO_Init+0x204>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a79      	ldr	r2, [pc, #484]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b77      	ldr	r3, [pc, #476]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	623b      	str	r3, [r7, #32]
 8000830:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	4b73      	ldr	r3, [pc, #460]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a72      	ldr	r2, [pc, #456]	; (8000a04 <MX_GPIO_Init+0x204>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b70      	ldr	r3, [pc, #448]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
 8000852:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a6b      	ldr	r2, [pc, #428]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	4b65      	ldr	r3, [pc, #404]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b62      	ldr	r3, [pc, #392]	; (8000a04 <MX_GPIO_Init+0x204>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b5e      	ldr	r3, [pc, #376]	; (8000a04 <MX_GPIO_Init+0x204>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a5d      	ldr	r2, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <MX_GPIO_Init+0x204>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a56      	ldr	r2, [pc, #344]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b50      	ldr	r3, [pc, #320]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a4f      	ldr	r2, [pc, #316]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b49      	ldr	r3, [pc, #292]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a48      	ldr	r2, [pc, #288]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <MX_GPIO_Init+0x204>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2116      	movs	r1, #22
 80008fa:	4843      	ldr	r0, [pc, #268]	; (8000a08 <MX_GPIO_Init+0x208>)
 80008fc:	f004 fc22 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	4841      	ldr	r0, [pc, #260]	; (8000a0c <MX_GPIO_Init+0x20c>)
 8000906:	f004 fc1d 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000910:	483f      	ldr	r0, [pc, #252]	; (8000a10 <MX_GPIO_Init+0x210>)
 8000912:	f004 fc17 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800091c:	483d      	ldr	r0, [pc, #244]	; (8000a14 <MX_GPIO_Init+0x214>)
 800091e:	f004 fc11 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000922:	2316      	movs	r3, #22
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4833      	ldr	r0, [pc, #204]	; (8000a08 <MX_GPIO_Init+0x208>)
 800093a:	f004 f94f 	bl	8004bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800093e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <MX_GPIO_Init+0x218>)
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	482e      	ldr	r0, [pc, #184]	; (8000a0c <MX_GPIO_Init+0x20c>)
 8000954:	f004 f942 	bl	8004bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4827      	ldr	r0, [pc, #156]	; (8000a0c <MX_GPIO_Init+0x20c>)
 8000970:	f004 f934 	bl	8004bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000974:	2320      	movs	r3, #32
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <MX_GPIO_Init+0x218>)
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4820      	ldr	r0, [pc, #128]	; (8000a08 <MX_GPIO_Init+0x208>)
 8000988:	f004 f928 	bl	8004bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800098c:	2304      	movs	r3, #4
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	481f      	ldr	r0, [pc, #124]	; (8000a1c <MX_GPIO_Init+0x21c>)
 80009a0:	f004 f91c 	bl	8004bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4815      	ldr	r0, [pc, #84]	; (8000a10 <MX_GPIO_Init+0x210>)
 80009ba:	f004 f90f 	bl	8004bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <MX_GPIO_Init+0x210>)
 80009d8:	f004 f900 	bl	8004bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80009dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_GPIO_Init+0x214>)
 80009f6:	f004 f8f1 	bl	8004bdc <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3738      	adds	r7, #56	; 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40021800 	.word	0x40021800
 8000a18:	10120000 	.word	0x10120000
 8000a1c:	40020400 	.word	0x40020400

08000a20 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C3_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C3_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a5e:	f005 fd75 	bl	800654c <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fc48 	bl	80012fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a70:	f006 fd5d 	bl	800752e <HAL_I2CEx_ConfigAnalogFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a7a:	f000 fc3f 	bl	80012fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a82:	f006 fd90 	bl	80075a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000a8c:	f000 fc36 	bl	80012fc <Error_Handler>
  }

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000404 	.word	0x20000404
 8000a98:	40005c00 	.word	0x40005c00
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <HAL_I2C_MspInit+0xc4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d14b      	bne.n	8000b5a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4815      	ldr	r0, [pc, #84]	; (8000b6c <HAL_I2C_MspInit+0xcc>)
 8000b18:	f004 f860 	bl	8004bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <HAL_I2C_MspInit+0xd0>)
 8000b3a:	f004 f84f 	bl	8004bdc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40005c00 	.word	0x40005c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000

08000b74 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <HAL_I2C_MspDeInit+0x3c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10f      	bne.n	8000ba6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_I2C_MspDeInit+0x40>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_I2C_MspDeInit+0x40>)
 8000b8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <HAL_I2C_MspDeInit+0x44>)
 8000b98:	f004 f9ca 	bl	8004f30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <HAL_I2C_MspDeInit+0x48>)
 8000ba2:	f004 f9c5 	bl	8004f30 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40005c00 	.word	0x40005c00
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09a      	sub	sp, #104	; 0x68
 8000bc4:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bca:	2234      	movs	r2, #52	; 0x34
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00b fb39 	bl	800c246 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2234      	movs	r2, #52	; 0x34
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00b fb33 	bl	800c246 <memset>

  hltdc.Instance = LTDC;
 8000be0:	4b4f      	ldr	r3, [pc, #316]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000be2:	4a50      	ldr	r2, [pc, #320]	; (8000d24 <MX_LTDC_Init+0x164>)
 8000be4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000be6:	4b4e      	ldr	r3, [pc, #312]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bec:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bf8:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000bfe:	4b48      	ldr	r3, [pc, #288]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c00:	2209      	movs	r2, #9
 8000c02:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000c0a:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c0c:	221d      	movs	r2, #29
 8000c0e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000c10:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c12:	2203      	movs	r2, #3
 8000c14:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c16:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c18:	f240 120d 	movw	r2, #269	; 0x10d
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c1e:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c20:	f240 1243 	movw	r2, #323	; 0x143
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000c26:	4b3e      	ldr	r3, [pc, #248]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c28:	f240 1217 	movw	r2, #279	; 0x117
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c30:	f240 1247 	movw	r2, #327	; 0x147
 8000c34:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c3e:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c4e:	4834      	ldr	r0, [pc, #208]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000c50:	f006 fce8 	bl	8007624 <HAL_LTDC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000c5a:	f000 fb4f 	bl	80012fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000c62:	23f0      	movs	r3, #240	; 0xf0
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000c6a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c6e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c70:	2302      	movs	r3, #2
 8000c72:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000c74:	23ff      	movs	r3, #255	; 0xff
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c80:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c82:	2307      	movs	r3, #7
 8000c84:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c86:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000c8c:	23f0      	movs	r3, #240	; 0xf0
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000c90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c94:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ca8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481b      	ldr	r0, [pc, #108]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000cb2:	f006 fe49 	bl	8007948 <HAL_LTDC_ConfigLayer>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8000cbc:	f000 fb1e 	bl	80012fc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cdc:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	2201      	movs	r2, #1
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_LTDC_Init+0x160>)
 8000d08:	f006 fe1e 	bl	8007948 <HAL_LTDC_ConfigLayer>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000d12:	f000 faf3 	bl	80012fc <Error_Handler>
  }

}
 8000d16:	bf00      	nop
 8000d18:	3768      	adds	r7, #104	; 0x68
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000458 	.word	0x20000458
 8000d24:	40016800 	.word	0x40016800

08000d28 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a7b      	ldr	r2, [pc, #492]	; (8000f34 <HAL_LTDC_MspInit+0x20c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	f040 80f0 	bne.w	8000f2c <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
 8000d50:	4b79      	ldr	r3, [pc, #484]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d54:	4a78      	ldr	r2, [pc, #480]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5c:	4b76      	ldr	r3, [pc, #472]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d64:	623b      	str	r3, [r7, #32]
 8000d66:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a71      	ldr	r2, [pc, #452]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d72:	f043 0320 	orr.w	r3, r3, #32
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0320 	and.w	r3, r3, #32
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b68      	ldr	r3, [pc, #416]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a63      	ldr	r2, [pc, #396]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a5c      	ldr	r2, [pc, #368]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a55      	ldr	r2, [pc, #340]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	4b4f      	ldr	r3, [pc, #316]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <HAL_LTDC_MspInit+0x210>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e22:	230e      	movs	r3, #14
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4843      	ldr	r0, [pc, #268]	; (8000f3c <HAL_LTDC_MspInit+0x214>)
 8000e2e:	f003 fed5 	bl	8004bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e32:	f641 0358 	movw	r3, #6232	; 0x1858
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e44:	230e      	movs	r3, #14
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	483c      	ldr	r0, [pc, #240]	; (8000f40 <HAL_LTDC_MspInit+0x218>)
 8000e50:	f003 fec4 	bl	8004bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e54:	2303      	movs	r3, #3
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e64:	2309      	movs	r3, #9
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4835      	ldr	r0, [pc, #212]	; (8000f44 <HAL_LTDC_MspInit+0x21c>)
 8000e70:	f003 feb4 	bl	8004bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e74:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e86:	230e      	movs	r3, #14
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482c      	ldr	r0, [pc, #176]	; (8000f44 <HAL_LTDC_MspInit+0x21c>)
 8000e92:	f003 fea3 	bl	8004bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e96:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ea8:	230e      	movs	r3, #14
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4825      	ldr	r0, [pc, #148]	; (8000f48 <HAL_LTDC_MspInit+0x220>)
 8000eb4:	f003 fe92 	bl	8004bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000eb8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eca:	230e      	movs	r3, #14
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481d      	ldr	r0, [pc, #116]	; (8000f4c <HAL_LTDC_MspInit+0x224>)
 8000ed6:	f003 fe81 	bl	8004bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000eda:	2348      	movs	r3, #72	; 0x48
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eea:	230e      	movs	r3, #14
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4816      	ldr	r0, [pc, #88]	; (8000f50 <HAL_LTDC_MspInit+0x228>)
 8000ef6:	f003 fe71 	bl	8004bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000efa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <HAL_LTDC_MspInit+0x220>)
 8000f18:	f003 fe60 	bl	8004bdc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2058      	movs	r0, #88	; 0x58
 8000f22:	f003 f8bd 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f26:	2058      	movs	r0, #88	; 0x58
 8000f28:	f003 f8d6 	bl	80040d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3738      	adds	r7, #56	; 0x38
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40016800 	.word	0x40016800
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020c00 	.word	0x40020c00

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b08d      	sub	sp, #52	; 0x34
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f002 ff85 	bl	8003e68 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f937 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f7ff fc4d 	bl	8000800 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f66:	f7ff fac3 	bl	80004f0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000f6a:	f7ff faf7 	bl	800055c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f6e:	f7ff fb4f 	bl	8000610 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f72:	f7ff fd55 	bl	8000a20 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f76:	f7ff fe23 	bl	8000bc0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f7a:	f000 f9c7 	bl	800130c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f7e:	f000 fb3f 	bl	8001600 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f82:	f000 fda3 	bl	8001acc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char buffer [sizeof(int)*8+1];
  int polozenie_x;
  int polozenie_y=10;
 8000f86:	230a      	movs	r3, #10
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28

  BSP_LCD_Init();
 8000f8a:	f001 fdd7 	bl	8002b3c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8000f8e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f92:	2001      	movs	r0, #1
 8000f94:	f001 fe54 	bl	8002c40 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f001 feb5 	bl	8002d08 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000f9e:	4883      	ldr	r0, [pc, #524]	; (80011ac <main+0x258>)
 8000fa0:	f001 ff60 	bl	8002e64 <BSP_LCD_Clear>
  //HAL_Delay(1000);
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f001 fefb 	bl	8002da4 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f001 feb9 	bl	8002d28 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8000fb6:	497e      	ldr	r1, [pc, #504]	; (80011b0 <main+0x25c>)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f001 fe41 	bl	8002c40 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f001 fea2 	bl	8002d08 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000fc4:	f002 fa9c 	bl	8003500 <BSP_LCD_DisplayOn>

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f001 ff4a 	bl	8002e64 <BSP_LCD_Clear>

  BSP_LCD_SetFont(&Font12);
 8000fd0:	4878      	ldr	r0, [pc, #480]	; (80011b4 <main+0x260>)
 8000fd2:	f001 ff2d 	bl	8002e30 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fd6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fda:	f001 fef7 	bl	8002dcc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f001 ff0b 	bl	8002dfc <BSP_LCD_SetBackColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"STATUS OK", CENTER_MODE);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen is initialized", CENTER_MODE);
  }*/
  Touchscreen_Calibration();
 8000fe6:	f000 fb7d 	bl	80016e4 <Touchscreen_Calibration>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000fea:	f001 fe11 	bl	8002c10 <BSP_LCD_GetXSize>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29c      	uxth	r4, r3
 8000ff2:	f001 fe19 	bl	8002c28 <BSP_LCD_GetYSize>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f002 fe47 	bl	8003c90 <BSP_TS_Init>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001002:	486d      	ldr	r0, [pc, #436]	; (80011b8 <main+0x264>)
 8001004:	f001 ff2e 	bl	8002e64 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001008:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800100c:	f001 fef6 	bl	8002dfc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001010:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001014:	f001 feda 	bl	8002dcc <BSP_LCD_SetTextColor>
  polozenie_x=BSP_LCD_GetXSize()/2;
 8001018:	f001 fdfa 	bl	8002c10 <BSP_LCD_GetXSize>
 800101c:	4603      	mov	r3, r0
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {

	  static uint32_t x = 0, y = 0;
	  static TS_StateTypeDef  TS_State;
	  BSP_TS_GetState(&TS_State);
 8001022:	4866      	ldr	r0, [pc, #408]	; (80011bc <main+0x268>)
 8001024:	f002 fe6e 	bl	8003d04 <BSP_TS_GetState>
	  x = Calibration_GetX(TS_State.X);
 8001028:	4b64      	ldr	r3, [pc, #400]	; (80011bc <main+0x268>)
 800102a:	885b      	ldrh	r3, [r3, #2]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fd05 	bl	8001a3c <Calibration_GetX>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b62      	ldr	r3, [pc, #392]	; (80011c0 <main+0x26c>)
 8001038:	601a      	str	r2, [r3, #0]
	  y = Calibration_GetY(TS_State.Y);
 800103a:	4b60      	ldr	r3, [pc, #384]	; (80011bc <main+0x268>)
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fd20 	bl	8001a84 <Calibration_GetY>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <main+0x270>)
 800104a:	601a      	str	r2, [r3, #0]


	  if (TS_State.TouchDetected){
 800104c:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <main+0x268>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80a7 	beq.w	80011a4 <main+0x250>
		  //BSP_LCD_SelectLayer(0);
		  //BSP_LCD_Clear(LCD_COLOR_BLUE);
		  //BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	  if ((TS_State.TouchDetected) & ( x > 0 ) & ( x < BSP_LCD_GetXSize()/2)){
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <main+0x268>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <main+0x26c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	ea02 0403 	and.w	r4, r2, r3
 800106e:	f001 fdcf 	bl	8002c10 <BSP_LCD_GetXSize>
 8001072:	4603      	mov	r3, r0
 8001074:	085a      	lsrs	r2, r3, #1
 8001076:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <main+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	bf8c      	ite	hi
 800107e:	2301      	movhi	r3, #1
 8001080:	2300      	movls	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4023      	ands	r3, r4
 8001086:	2b00      	cmp	r3, #0
 8001088:	d01a      	beq.n	80010c0 <main+0x16c>
		  //BSP_LCD_FillRect(BSP_LCD_GetXSize()/4, BSP_LCD_GetYSize()/2, BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize());
		  //BSP_LCD_FillRect((x), (y), 20, 10);
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800108a:	484b      	ldr	r0, [pc, #300]	; (80011b8 <main+0x264>)
 800108c:	f001 fe9e 	bl	8002dcc <BSP_LCD_SetTextColor>
		  		  BSP_LCD_FillRect((polozenie_x), (polozenie_y), 20, 10);
 8001090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001092:	b298      	uxth	r0, r3
 8001094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001096:	b299      	uxth	r1, r3
 8001098:	230a      	movs	r3, #10
 800109a:	2214      	movs	r2, #20
 800109c:	f002 f936 	bl	800330c <BSP_LCD_FillRect>
		  		  polozenie_x--;
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	3b01      	subs	r3, #1
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		  		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010a6:	f04f 30ff 	mov.w	r0, #4294967295
 80010aa:	f001 fe8f 	bl	8002dcc <BSP_LCD_SetTextColor>
		  		  BSP_LCD_FillRect((polozenie_x), (polozenie_y), 20, 10);
 80010ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b0:	b298      	uxth	r0, r3
 80010b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b4:	b299      	uxth	r1, r3
 80010b6:	230a      	movs	r3, #10
 80010b8:	2214      	movs	r2, #20
 80010ba:	f002 f927 	bl	800330c <BSP_LCD_FillRect>
 80010be:	e035      	b.n	800112c <main+0x1d8>

	  }
	  else if ((TS_State.TouchDetected) & ( x > BSP_LCD_GetXSize()/2 ) & ( x < BSP_LCD_GetXSize())){
 80010c0:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <main+0x268>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	461c      	mov	r4, r3
 80010c6:	f001 fda3 	bl	8002c10 <BSP_LCD_GetXSize>
 80010ca:	4603      	mov	r3, r0
 80010cc:	085a      	lsrs	r2, r3, #1
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <main+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	bf34      	ite	cc
 80010d6:	2301      	movcc	r3, #1
 80010d8:	2300      	movcs	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	401c      	ands	r4, r3
 80010de:	f001 fd97 	bl	8002c10 <BSP_LCD_GetXSize>
 80010e2:	4602      	mov	r2, r0
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <main+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	bf8c      	ite	hi
 80010ec:	2301      	movhi	r3, #1
 80010ee:	2300      	movls	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4023      	ands	r3, r4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d019      	beq.n	800112c <main+0x1d8>
		  //BSP_LCD_FillRect((3*(BSP_LCD_GetXSize())/4), BSP_LCD_GetYSize()/2, BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize());
		  //BSP_LCD_FillRect((x), (y), 10, 20);
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80010f8:	482f      	ldr	r0, [pc, #188]	; (80011b8 <main+0x264>)
 80010fa:	f001 fe67 	bl	8002dcc <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect((polozenie_x), (polozenie_y), 20, 10);
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	b298      	uxth	r0, r3
 8001102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001104:	b299      	uxth	r1, r3
 8001106:	230a      	movs	r3, #10
 8001108:	2214      	movs	r2, #20
 800110a:	f002 f8ff 	bl	800330c <BSP_LCD_FillRect>
		  polozenie_x++;
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	3301      	adds	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f001 fe58 	bl	8002dcc <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect((polozenie_x), (polozenie_y), 20, 10);
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	b298      	uxth	r0, r3
 8001120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001122:	b299      	uxth	r1, r3
 8001124:	230a      	movs	r3, #10
 8001126:	2214      	movs	r2, #20
 8001128:	f002 f8f0 	bl	800330c <BSP_LCD_FillRect>

	  }
	  //BSP_LCD_SelectLayer(1);
	  itoa(x,buffer,10);
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <main+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	220a      	movs	r2, #10
 8001136:	4619      	mov	r1, r3
 8001138:	f00b f878 	bl	800c22c <itoa>
	  	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"X:", LEFT_MODE);
 800113c:	f001 fd74 	bl	8002c28 <BSP_LCD_GetYSize>
 8001140:	4603      	mov	r3, r0
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b50      	subs	r3, #80	; 0x50
 8001146:	b299      	uxth	r1, r3
 8001148:	2303      	movs	r3, #3
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <main+0x274>)
 800114c:	2000      	movs	r0, #0
 800114e:	f001 fef5 	bl	8002f3c <BSP_LCD_DisplayStringAt>
	  	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)buffer, CENTER_MODE);
 8001152:	f001 fd69 	bl	8002c28 <BSP_LCD_GetYSize>
 8001156:	4603      	mov	r3, r0
 8001158:	b29b      	uxth	r3, r3
 800115a:	3b50      	subs	r3, #80	; 0x50
 800115c:	b299      	uxth	r1, r3
 800115e:	1d3a      	adds	r2, r7, #4
 8001160:	2301      	movs	r3, #1
 8001162:	2000      	movs	r0, #0
 8001164:	f001 feea 	bl	8002f3c <BSP_LCD_DisplayStringAt>
	  	  itoa (y,buffer,10);
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <main+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	220a      	movs	r2, #10
 8001172:	4619      	mov	r1, r3
 8001174:	f00b f85a 	bl	800c22c <itoa>
	  	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 112, (uint8_t*)"Y:", LEFT_MODE);
 8001178:	f001 fd56 	bl	8002c28 <BSP_LCD_GetYSize>
 800117c:	4603      	mov	r3, r0
 800117e:	b29b      	uxth	r3, r3
 8001180:	3b70      	subs	r3, #112	; 0x70
 8001182:	b299      	uxth	r1, r3
 8001184:	2303      	movs	r3, #3
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <main+0x278>)
 8001188:	2000      	movs	r0, #0
 800118a:	f001 fed7 	bl	8002f3c <BSP_LCD_DisplayStringAt>
	  	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 112, (uint8_t*)buffer, CENTER_MODE);
 800118e:	f001 fd4b 	bl	8002c28 <BSP_LCD_GetYSize>
 8001192:	4603      	mov	r3, r0
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b70      	subs	r3, #112	; 0x70
 8001198:	b299      	uxth	r1, r3
 800119a:	1d3a      	adds	r2, r7, #4
 800119c:	2301      	movs	r3, #1
 800119e:	2000      	movs	r0, #0
 80011a0:	f001 fecc 	bl	8002f3c <BSP_LCD_DisplayStringAt>
	  }

	  HAL_Delay(5);
 80011a4:	2005      	movs	r0, #5
 80011a6:	f002 fea1 	bl	8003eec <HAL_Delay>
  {
 80011aa:	e73a      	b.n	8001022 <main+0xce>
 80011ac:	ff0000ff 	.word	0xff0000ff
 80011b0:	d0130000 	.word	0xd0130000
 80011b4:	20000074 	.word	0x20000074
 80011b8:	ffff0000 	.word	0xffff0000
 80011bc:	200000ac 	.word	0x200000ac
 80011c0:	200000b4 	.word	0x200000b4
 80011c4:	200000b8 	.word	0x200000b8
 80011c8:	0800c2ec 	.word	0x0800c2ec
 80011cc:	0800c2f0 	.word	0x0800c2f0

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a0      	sub	sp, #128	; 0x80
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011da:	2230      	movs	r2, #48	; 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b f831 	bl	800c246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2230      	movs	r2, #48	; 0x30
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00b f822 	bl	800c246 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <SystemClock_Config+0x100>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <SystemClock_Config+0x100>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <SystemClock_Config+0x100>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <SystemClock_Config+0x104>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800122a:	4a2a      	ldr	r2, [pc, #168]	; (80012d4 <SystemClock_Config+0x104>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <SystemClock_Config+0x104>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123e:	2301      	movs	r3, #1
 8001240:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001246:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001250:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001252:	2304      	movs	r3, #4
 8001254:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001256:	2348      	movs	r3, #72	; 0x48
 8001258:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800125e:	2303      	movs	r3, #3
 8001260:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001266:	4618      	mov	r0, r3
 8001268:	f006 fdec 	bl	8007e44 <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001272:	f000 f843 	bl	80012fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	2302      	movs	r3, #2
 800127c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001290:	2102      	movs	r1, #2
 8001292:	4618      	mov	r0, r3
 8001294:	f007 f846 	bl	8008324 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800129e:	f000 f82d 	bl	80012fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012a2:	2308      	movs	r3, #8
 80012a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4618      	mov	r0, r3
 80012b8:	f007 fa58 	bl	800876c <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80012c2:	f000 f81b 	bl	80012fc <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3780      	adds	r7, #128	; 0x80
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ea:	f002 fddf 	bl	8003eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40001000 	.word	0x40001000

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_SPI5_Init+0x64>)
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <MX_SPI5_Init+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_SPI5_Init+0x64>)
 8001318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800131c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_SPI5_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_SPI5_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_SPI5_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_SPI5_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_SPI5_Init+0x64>)
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_SPI5_Init+0x64>)
 8001340:	2218      	movs	r2, #24
 8001342:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_SPI5_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_SPI5_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <MX_SPI5_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_SPI5_Init+0x64>)
 8001358:	220a      	movs	r2, #10
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_SPI5_Init+0x64>)
 800135e:	f007 fc42 	bl	8008be6 <HAL_SPI_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001368:	f7ff ffc8 	bl	80012fc <Error_Handler>
  }

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000500 	.word	0x20000500
 8001374:	40015000 	.word	0x40015000

08001378 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_SPI_MspInit+0x84>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12c      	bne.n	80013f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80013d2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013e4:	2305      	movs	r3, #5
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <HAL_SPI_MspInit+0x8c>)
 80013f0:	f003 fbf4 	bl	8004bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40015000 	.word	0x40015000
 8001400:	40023800 	.word	0x40023800
 8001404:	40021400 	.word	0x40021400

08001408 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_SPI_MspDeInit+0x30>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10a      	bne.n	8001430 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_SPI_MspDeInit+0x34>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_SPI_MspDeInit+0x34>)
 8001420:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001426:	f44f 7160 	mov.w	r1, #896	; 0x380
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <HAL_SPI_MspDeInit+0x38>)
 800142c:	f003 fd80 	bl	8004f30 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40015000 	.word	0x40015000
 800143c:	40023800 	.word	0x40023800
 8001440:	40021400 	.word	0x40021400

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_MspInit+0x54>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_MspInit+0x54>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_MspInit+0x54>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_MspInit+0x54>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_MspInit+0x54>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_MspInit+0x54>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	210f      	movs	r1, #15
 8001486:	f06f 0001 	mvn.w	r0, #1
 800148a:	f002 fe09 	bl	80040a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	2036      	movs	r0, #54	; 0x36
 80014b2:	f002 fdf5 	bl	80040a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014b6:	2036      	movs	r0, #54	; 0x36
 80014b8:	f002 fe0e 	bl	80040d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <HAL_InitTick+0xa4>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <HAL_InitTick+0xa4>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_InitTick+0xa4>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d8:	f107 0210 	add.w	r2, r7, #16
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f007 f910 	bl	8008708 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014e8:	f007 f8e6 	bl	80086b8 <HAL_RCC_GetPCLK1Freq>
 80014ec:	4603      	mov	r3, r0
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_InitTick+0xa8>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9b      	lsrs	r3, r3, #18
 80014fc:	3b01      	subs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_InitTick+0xac>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_InitTick+0xb0>)
 8001504:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_InitTick+0xac>)
 8001508:	f240 32e7 	movw	r2, #999	; 0x3e7
 800150c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_InitTick+0xac>)
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_InitTick+0xac>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_InitTick+0xac>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_InitTick+0xac>)
 8001522:	f008 f8eb 	bl	80096fc <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <HAL_InitTick+0xac>)
 800152e:	f008 f910 	bl	8009752 <HAL_TIM_Base_Start_IT>
 8001532:	4603      	mov	r3, r0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	431bde83 	.word	0x431bde83
 8001548:	20000558 	.word	0x20000558
 800154c:	40001000 	.word	0x40001000

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <TIM6_DAC_IRQHandler+0x10>)
 800158a:	f008 f906 	bl	800979a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000558 	.word	0x20000558

08001598 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <OTG_HS_IRQHandler+0x10>)
 800159e:	f003 fdea 	bl	8005176 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000071c 	.word	0x2000071c

080015ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <LTDC_IRQHandler+0x10>)
 80015b2:	f006 f907 	bl	80077c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000458 	.word	0x20000458

080015c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA2D_IRQHandler+0x10>)
 80015c6:	f003 f8ca 	bl	800475e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000390 	.word	0x20000390

080015d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <SystemInit+0x28>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <SystemInit+0x28>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SystemInit+0x28>)
 80015ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ee:	609a      	str	r2, [r3, #8]
#endif
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_TIM1_Init+0x98>)
 800161e:	4a1f      	ldr	r2, [pc, #124]	; (800169c <MX_TIM1_Init+0x9c>)
 8001620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_TIM1_Init+0x98>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_TIM1_Init+0x98>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_TIM1_Init+0x98>)
 8001630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001634:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_TIM1_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_TIM1_Init+0x98>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_TIM1_Init+0x98>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001648:	4813      	ldr	r0, [pc, #76]	; (8001698 <MX_TIM1_Init+0x98>)
 800164a:	f008 f857 	bl	80096fc <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001654:	f7ff fe52 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	4619      	mov	r1, r3
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <MX_TIM1_Init+0x98>)
 8001666:	f008 f9a0 	bl	80099aa <HAL_TIM_ConfigClockSource>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001670:	f7ff fe44 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_TIM1_Init+0x98>)
 8001682:	f008 fbab 	bl	8009ddc <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800168c:	f7ff fe36 	bl	80012fc <Error_Handler>
  }

}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000598 	.word	0x20000598
 800169c:	40010000 	.word	0x40010000

080016a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_TIM_Base_MspInit+0x3c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10d      	bne.n	80016ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_TIM_Base_MspInit+0x40>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_TIM_Base_MspInit+0x40>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_TIM_Base_MspInit+0x40>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40010000 	.word	0x40010000
 80016e0:	40023800 	.word	0x40023800

080016e4 <Touchscreen_Calibration>:
  * @brief  Performs the TS calibration
  * @param  None
  * @retval None
  */
void Touchscreen_Calibration(void)
{ 
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	71fb      	strb	r3, [r7, #7]

  TouchscreenCalibration_SetHint();
 80016f2:	f000 f8f1 	bl	80018d8 <TouchscreenCalibration_SetHint>
  
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80016f6:	f001 fa8b 	bl	8002c10 <BSP_LCD_GetXSize>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29c      	uxth	r4, r3
 80016fe:	f001 fa93 	bl	8002c28 <BSP_LCD_GetYSize>
 8001702:	4603      	mov	r3, r0
 8001704:	b29b      	uxth	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	4620      	mov	r0, r4
 800170a:	f002 fac1 	bl	8003c90 <BSP_TS_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	71bb      	strb	r3, [r7, #6]
  
  if (status != TS_OK)
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01c      	beq.n	8001752 <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f001 fb6e 	bl	8002dfc <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001720:	4861      	ldr	r0, [pc, #388]	; (80018a8 <Touchscreen_Calibration+0x1c4>)
 8001722:	f001 fb53 	bl	8002dcc <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8001726:	f001 fa7f 	bl	8002c28 <BSP_LCD_GetYSize>
 800172a:	4603      	mov	r3, r0
 800172c:	b29b      	uxth	r3, r3
 800172e:	3b5f      	subs	r3, #95	; 0x5f
 8001730:	b299      	uxth	r1, r3
 8001732:	2301      	movs	r3, #1
 8001734:	4a5d      	ldr	r2, [pc, #372]	; (80018ac <Touchscreen_Calibration+0x1c8>)
 8001736:	2000      	movs	r0, #0
 8001738:	f001 fc00 	bl	8002f3c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 800173c:	f001 fa74 	bl	8002c28 <BSP_LCD_GetYSize>
 8001740:	4603      	mov	r3, r0
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b50      	subs	r3, #80	; 0x50
 8001746:	b299      	uxth	r1, r3
 8001748:	2301      	movs	r3, #1
 800174a:	4a59      	ldr	r2, [pc, #356]	; (80018b0 <Touchscreen_Calibration+0x1cc>)
 800174c:	2000      	movs	r0, #0
 800174e:	f001 fbf5 	bl	8002f3c <BSP_LCD_DisplayStringAt>
  }
  
  while (1)
  {
    if (status == TS_OK)
 8001752:	79bb      	ldrb	r3, [r7, #6]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 80a0 	bne.w	800189a <Touchscreen_Calibration+0x1b6>
    {
      aLogX[0] = 15;
 800175a:	4b56      	ldr	r3, [pc, #344]	; (80018b4 <Touchscreen_Calibration+0x1d0>)
 800175c:	220f      	movs	r2, #15
 800175e:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 8001760:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <Touchscreen_Calibration+0x1d4>)
 8001762:	220f      	movs	r2, #15
 8001764:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 8001766:	f001 fa53 	bl	8002c10 <BSP_LCD_GetXSize>
 800176a:	4603      	mov	r3, r0
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b0f      	subs	r3, #15
 8001770:	b29b      	uxth	r3, r3
 8001772:	b21a      	sxth	r2, r3
 8001774:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <Touchscreen_Calibration+0x1d0>)
 8001776:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8001778:	f001 fa56 	bl	8002c28 <BSP_LCD_GetYSize>
 800177c:	4603      	mov	r3, r0
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b0f      	subs	r3, #15
 8001782:	b29b      	uxth	r3, r3
 8001784:	b21a      	sxth	r2, r3
 8001786:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <Touchscreen_Calibration+0x1d4>)
 8001788:	805a      	strh	r2, [r3, #2]
      
      for (i = 0; i < 2; i++) 
 800178a:	2300      	movs	r3, #0
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	e015      	b.n	80017bc <Touchscreen_Calibration+0xd8>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4a48      	ldr	r2, [pc, #288]	; (80018b4 <Touchscreen_Calibration+0x1d0>)
 8001794:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <Touchscreen_Calibration+0x1d4>)
 800179c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4a45      	ldr	r2, [pc, #276]	; (80018bc <Touchscreen_Calibration+0x1d8>)
 80017a6:	189c      	adds	r4, r3, r2
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4a44      	ldr	r2, [pc, #272]	; (80018c0 <Touchscreen_Calibration+0x1dc>)
 80017ae:	4413      	add	r3, r2
 80017b0:	4622      	mov	r2, r4
 80017b2:	f000 f8d1 	bl	8001958 <GetPhysValues>
      for (i = 0; i < 2; i++) 
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	3301      	adds	r3, #1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d9e6      	bls.n	8001790 <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 80017c2:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <Touchscreen_Calibration+0x1d0>)
 80017c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <Touchscreen_Calibration+0x1d0>)
 80017cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017d6:	fb02 f203 	mul.w	r2, r2, r3
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <Touchscreen_Calibration+0x1d8>)
 80017dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <Touchscreen_Calibration+0x1d8>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	1acb      	subs	r3, r1, r3
 80017ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <Touchscreen_Calibration+0x1e0>)
 80017f2:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <Touchscreen_Calibration+0x1d0>)
 80017f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	0152      	lsls	r2, r2, #5
 8001800:	1ad2      	subs	r2, r2, r3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <Touchscreen_Calibration+0x1d8>)
 800180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001810:	b299      	uxth	r1, r3
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <Touchscreen_Calibration+0x1e0>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	b29b      	uxth	r3, r3
 800181a:	fb11 f303 	smulbb	r3, r1, r3
 800181e:	b29b      	uxth	r3, r3
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <Touchscreen_Calibration+0x1e4>)
 8001828:	801a      	strh	r2, [r3, #0]
      
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <Touchscreen_Calibration+0x1d4>)
 800182c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001830:	461a      	mov	r2, r3
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <Touchscreen_Calibration+0x1d4>)
 8001834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800183e:	fb02 f203 	mul.w	r2, r2, r3
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <Touchscreen_Calibration+0x1dc>)
 8001844:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001848:	4619      	mov	r1, r3
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <Touchscreen_Calibration+0x1dc>)
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	1acb      	subs	r3, r1, r3
 8001852:	fb92 f3f3 	sdiv	r3, r2, r3
 8001856:	b21a      	sxth	r2, r3
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <Touchscreen_Calibration+0x1e8>)
 800185a:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <Touchscreen_Calibration+0x1d4>)
 800185e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	0152      	lsls	r2, r2, #5
 8001868:	1ad2      	subs	r2, r2, r3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <Touchscreen_Calibration+0x1dc>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	b299      	uxth	r1, r3
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <Touchscreen_Calibration+0x1e8>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	b29b      	uxth	r3, r3
 8001882:	fb11 f303 	smulbb	r3, r1, r3
 8001886:	b29b      	uxth	r3, r3
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21a      	sxth	r2, r3
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <Touchscreen_Calibration+0x1ec>)
 8001890:	801a      	strh	r2, [r3, #0]
      
      Calibration_Done = 1;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <Touchscreen_Calibration+0x1f0>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
      return;
 8001898:	e003      	b.n	80018a2 <Touchscreen_Calibration+0x1be>
    }
   
    HAL_Delay(5);
 800189a:	2005      	movs	r0, #5
 800189c:	f002 fb26 	bl	8003eec <HAL_Delay>
    if (status == TS_OK)
 80018a0:	e757      	b.n	8001752 <Touchscreen_Calibration+0x6e>
  }
}
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	ffff0000 	.word	0xffff0000
 80018ac:	0800c2f4 	.word	0x0800c2f4
 80018b0:	0800c2fc 	.word	0x0800c2fc
 80018b4:	200000d8 	.word	0x200000d8
 80018b8:	200000dc 	.word	0x200000dc
 80018bc:	200000d0 	.word	0x200000d0
 80018c0:	200000d4 	.word	0x200000d4
 80018c4:	200000c6 	.word	0x200000c6
 80018c8:	200000ca 	.word	0x200000ca
 80018cc:	200000c8 	.word	0x200000c8
 80018d0:	200000cc 	.word	0x200000cc
 80018d4:	200000c4 	.word	0x200000c4

080018d8 <TouchscreenCalibration_SetHint>:
  * @brief  Display calibration hint
  * @param  None
  * @retval None
  */
static void TouchscreenCalibration_SetHint(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f001 fac0 	bl	8002e64 <BSP_LCD_Clear>
  
  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80018e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018e8:	f001 fa70 	bl	8002dcc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f001 fa84 	bl	8002dfc <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 80018f4:	4814      	ldr	r0, [pc, #80]	; (8001948 <TouchscreenCalibration_SetHint+0x70>)
 80018f6:	f001 fa9b 	bl	8002e30 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 80018fa:	f001 f995 	bl	8002c28 <BSP_LCD_GetYSize>
 80018fe:	4603      	mov	r3, r0
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b1b      	subs	r3, #27
 8001906:	b299      	uxth	r1, r3
 8001908:	2301      	movs	r3, #1
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <TouchscreenCalibration_SetHint+0x74>)
 800190c:	2000      	movs	r0, #0
 800190e:	f001 fb15 	bl	8002f3c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 8001912:	f001 f989 	bl	8002c28 <BSP_LCD_GetYSize>
 8001916:	4603      	mov	r3, r0
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b0c      	subs	r3, #12
 800191e:	b299      	uxth	r1, r3
 8001920:	2301      	movs	r3, #1
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <TouchscreenCalibration_SetHint+0x78>)
 8001924:	2000      	movs	r0, #0
 8001926:	f001 fb09 	bl	8002f3c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 800192a:	f001 f97d 	bl	8002c28 <BSP_LCD_GetYSize>
 800192e:	4603      	mov	r3, r0
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	3303      	adds	r3, #3
 8001936:	b299      	uxth	r1, r3
 8001938:	2301      	movs	r3, #1
 800193a:	4a06      	ldr	r2, [pc, #24]	; (8001954 <TouchscreenCalibration_SetHint+0x7c>)
 800193c:	2000      	movs	r0, #0
 800193e:	f001 fafd 	bl	8002f3c <BSP_LCD_DisplayStringAt>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000074 	.word	0x20000074
 800194c:	0800c320 	.word	0x0800c320
 8001950:	0800c340 	.word	0x0800c340
 8001954:	0800c35c 	.word	0x0800c35c

08001958 <GetPhysValues>:
  * @param  pPhysX : Physical X position
  * @param  pPhysY : Physical Y position
  * @retval None
  */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t * pPhysX, int16_t * pPhysY) 
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60ba      	str	r2, [r7, #8]
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4603      	mov	r3, r0
 8001964:	81fb      	strh	r3, [r7, #14]
 8001966:	460b      	mov	r3, r1
 8001968:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800196a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800196e:	f001 fa2d 	bl	8002dcc <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8001972:	89fb      	ldrh	r3, [r7, #14]
 8001974:	89b9      	ldrh	r1, [r7, #12]
 8001976:	2205      	movs	r2, #5
 8001978:	4618      	mov	r0, r3
 800197a:	f001 fd21 	bl	80033c0 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800197e:	f04f 30ff 	mov.w	r0, #4294967295
 8001982:	f001 fa23 	bl	8002dcc <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	89b9      	ldrh	r1, [r7, #12]
 800198a:	2202      	movs	r2, #2
 800198c:	4618      	mov	r0, r3
 800198e:	f001 fd17 	bl	80033c0 <BSP_LCD_FillCircle>
  
  /* Wait until touch is pressed */
  WaitForPressedState(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f000 f820 	bl	80019d8 <WaitForPressedState>
  
  BSP_TS_GetState(&TS_State);
 8001998:	480e      	ldr	r0, [pc, #56]	; (80019d4 <GetPhysValues+0x7c>)
 800199a:	f002 f9b3 	bl	8003d04 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <GetPhysValues+0x7c>)
 80019a0:	885b      	ldrh	r3, [r3, #2]
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y; 
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <GetPhysValues+0x7c>)
 80019aa:	889b      	ldrh	r3, [r3, #4]
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	801a      	strh	r2, [r3, #0]
  
  /* Wait until touch is released */
  WaitForPressedState(0);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f810 	bl	80019d8 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f001 fa06 	bl	8002dcc <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 80019c0:	89fb      	ldrh	r3, [r7, #14]
 80019c2:	89b9      	ldrh	r1, [r7, #12]
 80019c4:	2205      	movs	r2, #5
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fcfa 	bl	80033c0 <BSP_LCD_FillCircle>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200000bc 	.word	0x200000bc

080019d8 <WaitForPressedState>:
  * @brief  Wait For Pressed State
  * @param  Pressed: Pressed State
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef  State;
  
  do 
  {
    BSP_TS_GetState(&State);
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 f98c 	bl	8003d04 <BSP_TS_GetState>
    HAL_Delay(10);
 80019ec:	200a      	movs	r0, #10
 80019ee:	f002 fa7d 	bl	8003eec <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 80019f2:	89ba      	ldrh	r2, [r7, #12]
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1f2      	bne.n	80019e2 <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 80019fc:	f002 fa6a 	bl	8003ed4 <HAL_GetTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	82fb      	strh	r3, [r7, #22]
      do {
        BSP_TS_GetState(&State);      
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 f97b 	bl	8003d04 <BSP_TS_GetState>
        HAL_Delay(10);
 8001a0e:	200a      	movs	r0, #10
 8001a10:	f002 fa6c 	bl	8003eec <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 8001a14:	89ba      	ldrh	r2, [r7, #12]
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d108      	bne.n	8001a30 <WaitForPressedState+0x58>
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 8001a1e:	f002 fa59 	bl	8003ed4 <HAL_GetTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001a28:	8afb      	ldrh	r3, [r7, #22]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d802      	bhi.n	8001a34 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);      
 8001a2e:	e7e9      	b.n	8001a04 <WaitForPressedState+0x2c>
          break;
 8001a30:	bf00      	nop
    BSP_TS_GetState(&State);
 8001a32:	e7d6      	b.n	80019e2 <WaitForPressedState+0xa>
        {
          return;
 8001a34:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <Calibration_GetX>:
  * @brief  Calibrate X position
  * @param  x: X position
  * @retval calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  return (((A1 * x) + B1)/1000);
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <Calibration_GetX+0x3c>)
 8001a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	fb03 f302 	mul.w	r3, r3, r2
 8001a54:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <Calibration_GetX+0x40>)
 8001a56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <Calibration_GetX+0x44>)
 8001a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a62:	1192      	asrs	r2, r2, #6
 8001a64:	17db      	asrs	r3, r3, #31
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b29b      	uxth	r3, r3
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200000c6 	.word	0x200000c6
 8001a7c:	200000ca 	.word	0x200000ca
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <Calibration_GetY>:
  * @brief  Calibrate Y position
  * @param  y: Y position
  * @retval calibrated y
  */
uint16_t Calibration_GetY(uint16_t y)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  return (((A2 * y) + B2)/1000);
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <Calibration_GetY+0x3c>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	461a      	mov	r2, r3
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	fb03 f302 	mul.w	r3, r3, r2
 8001a9c:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <Calibration_GetY+0x40>)
 8001a9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <Calibration_GetY+0x44>)
 8001aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aaa:	1192      	asrs	r2, r2, #6
 8001aac:	17db      	asrs	r3, r3, #31
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b29b      	uxth	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200000c8 	.word	0x200000c8
 8001ac4:	200000cc 	.word	0x200000cc
 8001ac8:	10624dd3 	.word	0x10624dd3

08001acc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <MX_USART1_UART_Init+0x50>)
 8001ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART1_UART_Init+0x4c>)
 8001b04:	f008 f9fa 	bl	8009efc <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b0e:	f7ff fbf5 	bl	80012fc <Error_Handler>
  }

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200005d8 	.word	0x200005d8
 8001b1c:	40011000 	.word	0x40011000

08001b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_UART_MspInit+0x84>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d12c      	bne.n	8001b9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b4c:	f043 0310 	orr.w	r3, r3, #16
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_UART_MspInit+0x8c>)
 8001b98:	f003 f820 	bl	8004bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40011000 	.word	0x40011000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bb6:	e003      	b.n	8001bc0 <LoopCopyDataInit>

08001bb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bbe:	3104      	adds	r1, #4

08001bc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bc8:	d3f6      	bcc.n	8001bb8 <CopyDataInit>
  ldr  r2, =_sbss
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bcc:	e002      	b.n	8001bd4 <LoopFillZerobss>

08001bce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bd0:	f842 3b04 	str.w	r3, [r2], #4

08001bd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bd8:	d3f9      	bcc.n	8001bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bda:	f7ff fcfb 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bde:	f00a fae9 	bl	800c1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001be2:	f7ff f9b7 	bl	8000f54 <main>
  bx  lr    
 8001be6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001be8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001bec:	0800e2fc 	.word	0x0800e2fc
  ldr  r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bf4:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8001bf8:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8001bfc:	200009e0 	.word	0x200009e0

08001c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC_IRQHandler>

08001c02 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001c06:	f000 fe4b 	bl	80028a0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001c0a:	20ca      	movs	r0, #202	; 0xca
 8001c0c:	f000 f95d 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001c10:	20c3      	movs	r0, #195	; 0xc3
 8001c12:	f000 f967 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001c16:	2008      	movs	r0, #8
 8001c18:	f000 f964 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001c1c:	2050      	movs	r0, #80	; 0x50
 8001c1e:	f000 f961 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001c22:	20cf      	movs	r0, #207	; 0xcf
 8001c24:	f000 f951 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f000 f95b 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001c2e:	20c1      	movs	r0, #193	; 0xc1
 8001c30:	f000 f958 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001c34:	2030      	movs	r0, #48	; 0x30
 8001c36:	f000 f955 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001c3a:	20ed      	movs	r0, #237	; 0xed
 8001c3c:	f000 f945 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001c40:	2064      	movs	r0, #100	; 0x64
 8001c42:	f000 f94f 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001c46:	2003      	movs	r0, #3
 8001c48:	f000 f94c 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001c4c:	2012      	movs	r0, #18
 8001c4e:	f000 f949 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001c52:	2081      	movs	r0, #129	; 0x81
 8001c54:	f000 f946 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001c58:	20e8      	movs	r0, #232	; 0xe8
 8001c5a:	f000 f936 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001c5e:	2085      	movs	r0, #133	; 0x85
 8001c60:	f000 f940 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f000 f93d 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001c6a:	2078      	movs	r0, #120	; 0x78
 8001c6c:	f000 f93a 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001c70:	20cb      	movs	r0, #203	; 0xcb
 8001c72:	f000 f92a 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001c76:	2039      	movs	r0, #57	; 0x39
 8001c78:	f000 f934 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001c7c:	202c      	movs	r0, #44	; 0x2c
 8001c7e:	f000 f931 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f92e 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001c88:	2034      	movs	r0, #52	; 0x34
 8001c8a:	f000 f92b 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f000 f928 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001c94:	20f7      	movs	r0, #247	; 0xf7
 8001c96:	f000 f918 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001c9a:	2020      	movs	r0, #32
 8001c9c:	f000 f922 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001ca0:	20ea      	movs	r0, #234	; 0xea
 8001ca2:	f000 f912 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 f91c 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f000 f919 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001cb2:	20b1      	movs	r0, #177	; 0xb1
 8001cb4:	f000 f909 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f000 f913 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001cbe:	201b      	movs	r0, #27
 8001cc0:	f000 f910 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001cc4:	20b6      	movs	r0, #182	; 0xb6
 8001cc6:	f000 f900 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001cca:	200a      	movs	r0, #10
 8001ccc:	f000 f90a 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001cd0:	20a2      	movs	r0, #162	; 0xa2
 8001cd2:	f000 f907 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001cd6:	20c0      	movs	r0, #192	; 0xc0
 8001cd8:	f000 f8f7 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001cdc:	2010      	movs	r0, #16
 8001cde:	f000 f901 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001ce2:	20c1      	movs	r0, #193	; 0xc1
 8001ce4:	f000 f8f1 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ce8:	2010      	movs	r0, #16
 8001cea:	f000 f8fb 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001cee:	20c5      	movs	r0, #197	; 0xc5
 8001cf0:	f000 f8eb 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001cf4:	2045      	movs	r0, #69	; 0x45
 8001cf6:	f000 f8f5 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001cfa:	2015      	movs	r0, #21
 8001cfc:	f000 f8f2 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001d00:	20c7      	movs	r0, #199	; 0xc7
 8001d02:	f000 f8e2 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001d06:	2090      	movs	r0, #144	; 0x90
 8001d08:	f000 f8ec 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001d0c:	2036      	movs	r0, #54	; 0x36
 8001d0e:	f000 f8dc 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001d12:	20c8      	movs	r0, #200	; 0xc8
 8001d14:	f000 f8e6 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001d18:	20f2      	movs	r0, #242	; 0xf2
 8001d1a:	f000 f8d6 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f8e0 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001d24:	20b0      	movs	r0, #176	; 0xb0
 8001d26:	f000 f8d0 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001d2a:	20c2      	movs	r0, #194	; 0xc2
 8001d2c:	f000 f8da 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d30:	20b6      	movs	r0, #182	; 0xb6
 8001d32:	f000 f8ca 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d36:	200a      	movs	r0, #10
 8001d38:	f000 f8d4 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001d3c:	20a7      	movs	r0, #167	; 0xa7
 8001d3e:	f000 f8d1 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001d42:	2027      	movs	r0, #39	; 0x27
 8001d44:	f000 f8ce 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001d48:	2004      	movs	r0, #4
 8001d4a:	f000 f8cb 	bl	8001ee4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001d4e:	202a      	movs	r0, #42	; 0x2a
 8001d50:	f000 f8bb 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 f8c5 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f000 f8c2 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f000 f8bf 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001d66:	20ef      	movs	r0, #239	; 0xef
 8001d68:	f000 f8bc 	bl	8001ee4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001d6c:	202b      	movs	r0, #43	; 0x2b
 8001d6e:	f000 f8ac 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 f8b6 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f000 f8b3 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 f8b0 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001d84:	203f      	movs	r0, #63	; 0x3f
 8001d86:	f000 f8ad 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001d8a:	20f6      	movs	r0, #246	; 0xf6
 8001d8c:	f000 f89d 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 f8a7 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f8a4 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001d9c:	2006      	movs	r0, #6
 8001d9e:	f000 f8a1 	bl	8001ee4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001da2:	202c      	movs	r0, #44	; 0x2c
 8001da4:	f000 f891 	bl	8001eca <ili9341_WriteReg>
  LCD_Delay(200);
 8001da8:	20c8      	movs	r0, #200	; 0xc8
 8001daa:	f000 fe67 	bl	8002a7c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001dae:	2026      	movs	r0, #38	; 0x26
 8001db0:	f000 f88b 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f000 f895 	bl	8001ee4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001dba:	20e0      	movs	r0, #224	; 0xe0
 8001dbc:	f000 f885 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001dc0:	200f      	movs	r0, #15
 8001dc2:	f000 f88f 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001dc6:	2029      	movs	r0, #41	; 0x29
 8001dc8:	f000 f88c 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001dcc:	2024      	movs	r0, #36	; 0x24
 8001dce:	f000 f889 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001dd2:	200c      	movs	r0, #12
 8001dd4:	f000 f886 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001dd8:	200e      	movs	r0, #14
 8001dda:	f000 f883 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001dde:	2009      	movs	r0, #9
 8001de0:	f000 f880 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001de4:	204e      	movs	r0, #78	; 0x4e
 8001de6:	f000 f87d 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001dea:	2078      	movs	r0, #120	; 0x78
 8001dec:	f000 f87a 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001df0:	203c      	movs	r0, #60	; 0x3c
 8001df2:	f000 f877 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001df6:	2009      	movs	r0, #9
 8001df8:	f000 f874 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001dfc:	2013      	movs	r0, #19
 8001dfe:	f000 f871 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001e02:	2005      	movs	r0, #5
 8001e04:	f000 f86e 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001e08:	2017      	movs	r0, #23
 8001e0a:	f000 f86b 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001e0e:	2011      	movs	r0, #17
 8001e10:	f000 f868 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f000 f865 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001e1a:	20e1      	movs	r0, #225	; 0xe1
 8001e1c:	f000 f855 	bl	8001eca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f000 f85f 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001e26:	2016      	movs	r0, #22
 8001e28:	f000 f85c 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001e2c:	201b      	movs	r0, #27
 8001e2e:	f000 f859 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e32:	2004      	movs	r0, #4
 8001e34:	f000 f856 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001e38:	2011      	movs	r0, #17
 8001e3a:	f000 f853 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001e3e:	2007      	movs	r0, #7
 8001e40:	f000 f850 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001e44:	2031      	movs	r0, #49	; 0x31
 8001e46:	f000 f84d 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001e4a:	2033      	movs	r0, #51	; 0x33
 8001e4c:	f000 f84a 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001e50:	2042      	movs	r0, #66	; 0x42
 8001e52:	f000 f847 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001e56:	2005      	movs	r0, #5
 8001e58:	f000 f844 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001e5c:	200c      	movs	r0, #12
 8001e5e:	f000 f841 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001e62:	200a      	movs	r0, #10
 8001e64:	f000 f83e 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001e68:	2028      	movs	r0, #40	; 0x28
 8001e6a:	f000 f83b 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001e6e:	202f      	movs	r0, #47	; 0x2f
 8001e70:	f000 f838 	bl	8001ee4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001e74:	200f      	movs	r0, #15
 8001e76:	f000 f835 	bl	8001ee4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001e7a:	2011      	movs	r0, #17
 8001e7c:	f000 f825 	bl	8001eca <ili9341_WriteReg>
  LCD_Delay(200);
 8001e80:	20c8      	movs	r0, #200	; 0xc8
 8001e82:	f000 fdfb 	bl	8002a7c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001e86:	2029      	movs	r0, #41	; 0x29
 8001e88:	f000 f81f 	bl	8001eca <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001e8c:	202c      	movs	r0, #44	; 0x2c
 8001e8e:	f000 f81c 	bl	8001eca <ili9341_WriteReg>
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001e9a:	f000 fd01 	bl	80028a0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	20d3      	movs	r0, #211	; 0xd3
 8001ea2:	f000 f82c 	bl	8001efe <ili9341_ReadData>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	b29b      	uxth	r3, r3
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}

08001eae <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001eb2:	2029      	movs	r0, #41	; 0x29
 8001eb4:	f000 f809 	bl	8001eca <ili9341_WriteReg>
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ec0:	2028      	movs	r0, #40	; 0x28
 8001ec2:	f000 f802 	bl	8001eca <ili9341_WriteReg>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fd7c 	bl	80029d4 <LCD_IO_WriteReg>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fd4d 	bl	8002990 <LCD_IO_WriteData>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	460a      	mov	r2, r1
 8001f08:	80fb      	strh	r3, [r7, #6]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001f0e:	797a      	ldrb	r2, [r7, #5]
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fd7f 	bl	8002a18 <LCD_IO_ReadData>
 8001f1a:	4603      	mov	r3, r0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001f28:	23f0      	movs	r3, #240	; 0xf0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001f38:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fa59 	bl	800240c <stmpe811_GetInstance>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2bff      	cmp	r3, #255	; 0xff
 8001f62:	d112      	bne.n	8001f8a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f000 fa51 	bl	800240c <stmpe811_GetInstance>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d80a      	bhi.n	8001f8a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	88fa      	ldrh	r2, [r7, #6]
 8001f78:	b2d1      	uxtb	r1, r2
 8001f7a:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <stmpe811_Init+0x4c>)
 8001f7c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001f7e:	f000 fd88 	bl	8002a92 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 f807 	bl	8001f98 <stmpe811_Reset>
    }
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200000e0 	.word	0x200000e0

08001f98 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	2103      	movs	r1, #3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fd7d 	bl	8002aaa <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	f000 fdb7 	bl	8002b24 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2103      	movs	r1, #3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fd73 	bl	8002aaa <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f000 fdad 	bl	8002b24 <IOE_Delay>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001fd2:	b590      	push	{r4, r7, lr}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001fdc:	f000 fd59 	bl	8002a92 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fd72 	bl	8002ad0 <IOE_Read>
 8001fec:	4603      	mov	r3, r0
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fd69 	bl	8002ad0 <IOE_Read>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002002:	4323      	orrs	r3, r4
 8002004:	b21b      	sxth	r3, r3
 8002006:	b29b      	uxth	r3, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}

08002010 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2109      	movs	r1, #9
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fd53 	bl	8002ad0 <IOE_Read>
 800202a:	4603      	mov	r3, r0
 800202c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	2109      	movs	r1, #9
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fd33 	bl	8002aaa <IOE_Write>
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2109      	movs	r1, #9
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fd35 	bl	8002ad0 <IOE_Read>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	2109      	movs	r1, #9
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fd15 	bl	8002aaa <IOE_Write>
    
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	460a      	mov	r2, r1
 8002092:	80fb      	strh	r3, [r7, #6]
 8002094:	4613      	mov	r3, r2
 8002096:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	210a      	movs	r1, #10
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fd14 	bl	8002ad0 <IOE_Read>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	797b      	ldrb	r3, [r7, #5]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	210a      	movs	r1, #10
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fcf4 	bl	8002aaa <IOE_Write>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	460a      	mov	r2, r1
 80020d4:	80fb      	strh	r3, [r7, #6]
 80020d6:	4613      	mov	r3, r2
 80020d8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	210a      	movs	r1, #10
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fcf3 	bl	8002ad0 <IOE_Read>
 80020ea:	4603      	mov	r3, r0
 80020ec:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80020ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	b25a      	sxtb	r2, r3
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4013      	ands	r3, r2
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	210a      	movs	r1, #10
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fcce 	bl	8002aaa <IOE_Write>
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	460a      	mov	r2, r1
 8002120:	80fb      	strh	r3, [r7, #6]
 8002122:	4613      	mov	r3, r2
 8002124:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	210b      	movs	r1, #11
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fccf 	bl	8002ad0 <IOE_Read>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	797b      	ldrb	r3, [r7, #5]
 8002138:	4013      	ands	r3, r2
 800213a:	b2db      	uxtb	r3, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	460a      	mov	r2, r1
 800214e:	80fb      	strh	r3, [r7, #6]
 8002150:	4613      	mov	r3, r2
 8002152:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	797a      	ldrb	r2, [r7, #5]
 800215a:	210b      	movs	r1, #11
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fca4 	bl	8002aaa <IOE_Write>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	6039      	str	r1, [r7, #0]
 8002174:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2117      	movs	r1, #23
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fca5 	bl	8002ad0 <IOE_Read>
 8002186:	4603      	mov	r3, r0
 8002188:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b25b      	sxtb	r3, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	b25a      	sxtb	r2, r3
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4013      	ands	r3, r2
 8002198:	b25b      	sxtb	r3, r3
 800219a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	2117      	movs	r1, #23
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fc80 	bl	8002aaa <IOE_Write>
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2104      	movs	r1, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fc84 	bl	8002ad0 <IOE_Read>
 80021c8:	4603      	mov	r3, r0
 80021ca:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	f023 0304 	bic.w	r3, r3, #4
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	2104      	movs	r1, #4
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fc64 	bl	8002aaa <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	21f0      	movs	r1, #240	; 0xf0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ffbf 	bl	800216a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	2104      	movs	r1, #4
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fc54 	bl	8002aaa <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2249      	movs	r2, #73	; 0x49
 8002208:	2120      	movs	r1, #32
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fc4d 	bl	8002aaa <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002210:	2002      	movs	r0, #2
 8002212:	f000 fc87 	bl	8002b24 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2201      	movs	r2, #1
 800221c:	2121      	movs	r1, #33	; 0x21
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fc43 	bl	8002aaa <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	229a      	movs	r2, #154	; 0x9a
 800222a:	2141      	movs	r1, #65	; 0x41
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fc3c 	bl	8002aaa <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2201      	movs	r2, #1
 8002238:	214a      	movs	r1, #74	; 0x4a
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fc35 	bl	8002aaa <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2201      	movs	r2, #1
 8002246:	214b      	movs	r1, #75	; 0x4b
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fc2e 	bl	8002aaa <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2200      	movs	r2, #0
 8002254:	214b      	movs	r1, #75	; 0x4b
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fc27 	bl	8002aaa <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2201      	movs	r2, #1
 8002262:	2156      	movs	r1, #86	; 0x56
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fc20 	bl	8002aaa <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2201      	movs	r2, #1
 8002270:	2158      	movs	r1, #88	; 0x58
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fc19 	bl	8002aaa <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2201      	movs	r2, #1
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fc12 	bl	8002aaa <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	22ff      	movs	r2, #255	; 0xff
 800228c:	210b      	movs	r1, #11
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fc0b 	bl	8002aaa <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002294:	2002      	movs	r0, #2
 8002296:	f000 fc45 	bl	8002b24 <IOE_Delay>
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2140      	movs	r1, #64	; 0x40
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fc0a 	bl	8002ad0 <IOE_Read>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b80      	cmp	r3, #128	; 0x80
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80022ce:	7bbb      	ldrb	r3, [r7, #14]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00b      	beq.n	80022ec <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	214c      	movs	r1, #76	; 0x4c
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fbf8 	bl	8002ad0 <IOE_Read>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e00d      	b.n	8002308 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	214b      	movs	r1, #75	; 0x4b
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fbd8 	bl	8002aaa <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2200      	movs	r2, #0
 8002300:	214b      	movs	r1, #75	; 0x4b
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fbd1 	bl	8002aaa <IOE_Write>
  }
  
  return ret;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002320:	89fb      	ldrh	r3, [r7, #14]
 8002322:	b2d8      	uxtb	r0, r3
 8002324:	f107 0210 	add.w	r2, r7, #16
 8002328:	2304      	movs	r3, #4
 800232a:	21d7      	movs	r1, #215	; 0xd7
 800232c:	f000 fbe3 	bl	8002af6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002330:	7c3b      	ldrb	r3, [r7, #16]
 8002332:	061a      	lsls	r2, r3, #24
 8002334:	7c7b      	ldrb	r3, [r7, #17]
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	431a      	orrs	r2, r3
 800233a:	7cbb      	ldrb	r3, [r7, #18]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	4313      	orrs	r3, r2
 8002340:	7cfa      	ldrb	r2, [r7, #19]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	0d1b      	lsrs	r3, r3, #20
 800234a:	b29a      	uxth	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002360:	89fb      	ldrh	r3, [r7, #14]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2201      	movs	r2, #1
 8002366:	214b      	movs	r1, #75	; 0x4b
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fb9e 	bl	8002aaa <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800236e:	89fb      	ldrh	r3, [r7, #14]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2200      	movs	r2, #0
 8002374:	214b      	movs	r1, #75	; 0x4b
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fb97 	bl	8002aaa <IOE_Write>
}
 800237c:	bf00      	nop
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800238e:	f000 fb86 	bl	8002a9e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	211f      	movs	r1, #31
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe76 	bl	8002088 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fe36 	bl	8002010 <stmpe811_EnableGlobalIT>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fe47 	bl	800204c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	211f      	movs	r1, #31
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fe81 	bl	80020ca <stmpe811_DisableITSource>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	211f      	movs	r1, #31
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fe99 	bl	8002116 <stmpe811_ReadGITStatus>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	211f      	movs	r1, #31
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fea1 	bl	8002144 <stmpe811_ClearGlobalIT>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e00b      	b.n	8002438 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <stmpe811_GetInstance+0x40>)
 8002424:	5cd3      	ldrb	r3, [r2, r3]
 8002426:	b29b      	uxth	r3, r3
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	429a      	cmp	r2, r3
 800242c:	d101      	bne.n	8002432 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	e006      	b.n	8002440 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3301      	adds	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d9f0      	bls.n	8002420 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800243e:	23ff      	movs	r3, #255	; 0xff
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	200000e0 	.word	0x200000e0

08002450 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a33      	ldr	r2, [pc, #204]	; (800252c <I2Cx_MspInit+0xdc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d15f      	bne.n	8002522 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <I2Cx_MspInit+0xe0>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a31      	ldr	r2, [pc, #196]	; (8002530 <I2Cx_MspInit+0xe0>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <I2Cx_MspInit+0xe0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <I2Cx_MspInit+0xe0>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a2a      	ldr	r2, [pc, #168]	; (8002530 <I2Cx_MspInit+0xe0>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <I2Cx_MspInit+0xe0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800249a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80024a0:	2312      	movs	r3, #18
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80024a8:	2302      	movs	r3, #2
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80024ac:	2304      	movs	r3, #4
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	481f      	ldr	r0, [pc, #124]	; (8002534 <I2Cx_MspInit+0xe4>)
 80024b8:	f002 fb90 	bl	8004bdc <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80024bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	481b      	ldr	r0, [pc, #108]	; (8002538 <I2Cx_MspInit+0xe8>)
 80024ca:	f002 fb87 	bl	8004bdc <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <I2Cx_MspInit+0xe0>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a16      	ldr	r2, [pc, #88]	; (8002530 <I2Cx_MspInit+0xe0>)
 80024d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <I2Cx_MspInit+0xe0>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <I2Cx_MspInit+0xe0>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <I2Cx_MspInit+0xe0>)
 80024f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024f4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <I2Cx_MspInit+0xe0>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <I2Cx_MspInit+0xe0>)
 80024fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002500:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	210f      	movs	r1, #15
 8002506:	2048      	movs	r0, #72	; 0x48
 8002508:	f001 fdca 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800250c:	2048      	movs	r0, #72	; 0x48
 800250e:	f001 fde3 	bl	80040d8 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	210f      	movs	r1, #15
 8002516:	2049      	movs	r0, #73	; 0x49
 8002518:	f001 fdc2 	bl	80040a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800251c:	2049      	movs	r0, #73	; 0x49
 800251e:	f001 fddb 	bl	80040d8 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40005c00 	.word	0x40005c00
 8002530:	40023800 	.word	0x40023800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020800 	.word	0x40020800

0800253c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002540:	4814      	ldr	r0, [pc, #80]	; (8002594 <I2Cx_Init+0x58>)
 8002542:	f004 fc8b 	bl	8006e5c <HAL_I2C_GetState>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d121      	bne.n	8002590 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <I2Cx_Init+0x58>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <I2Cx_Init+0x5c>)
 8002550:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <I2Cx_Init+0x58>)
 8002554:	4a11      	ldr	r2, [pc, #68]	; (800259c <I2Cx_Init+0x60>)
 8002556:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <I2Cx_Init+0x58>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <I2Cx_Init+0x58>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <I2Cx_Init+0x58>)
 8002566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800256a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <I2Cx_Init+0x58>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <I2Cx_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <I2Cx_Init+0x58>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <I2Cx_Init+0x58>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002584:	4803      	ldr	r0, [pc, #12]	; (8002594 <I2Cx_Init+0x58>)
 8002586:	f7ff ff63 	bl	8002450 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800258a:	4802      	ldr	r0, [pc, #8]	; (8002594 <I2Cx_Init+0x58>)
 800258c:	f003 ffde 	bl	800654c <HAL_I2C_Init>
  }
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000618 	.word	0x20000618
 8002598:	40005c00 	.word	0x40005c00
 800259c:	000186a0 	.word	0x000186a0

080025a0 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <I2Cx_ITConfig+0x58>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <I2Cx_ITConfig+0x58>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <I2Cx_ITConfig+0x58>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80025c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80025c8:	2301      	movs	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <I2Cx_ITConfig+0x5c>)
 80025d2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4809      	ldr	r0, [pc, #36]	; (8002600 <I2Cx_ITConfig+0x60>)
 80025da:	f002 faff 	bl	8004bdc <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80025de:	2200      	movs	r2, #0
 80025e0:	210f      	movs	r1, #15
 80025e2:	2028      	movs	r0, #40	; 0x28
 80025e4:	f001 fd5c 	bl	80040a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80025e8:	2028      	movs	r0, #40	; 0x28
 80025ea:	f001 fd75 	bl	80040d8 <HAL_NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	10210000 	.word	0x10210000
 8002600:	40020000 	.word	0x40020000

08002604 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af04      	add	r7, sp, #16
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	460b      	mov	r3, r1
 8002610:	71bb      	strb	r3, [r7, #6]
 8002612:	4613      	mov	r3, r2
 8002614:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	b299      	uxth	r1, r3
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	b29a      	uxth	r2, r3
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <I2Cx_WriteData+0x4c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2301      	movs	r3, #1
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	1d7b      	adds	r3, r7, #5
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2301      	movs	r3, #1
 8002632:	4808      	ldr	r0, [pc, #32]	; (8002654 <I2Cx_WriteData+0x50>)
 8002634:	f004 f8f2 	bl	800681c <HAL_I2C_Mem_Write>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002642:	f000 f863 	bl	800270c <I2Cx_Error>
  }        
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000064 	.word	0x20000064
 8002654:	20000618 	.word	0x20000618

08002658 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af04      	add	r7, sp, #16
 800265e:	4603      	mov	r3, r0
 8002660:	460a      	mov	r2, r1
 8002662:	71fb      	strb	r3, [r7, #7]
 8002664:	4613      	mov	r3, r2
 8002666:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	b299      	uxth	r1, r3
 8002674:	79bb      	ldrb	r3, [r7, #6]
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <I2Cx_ReadData+0x50>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2301      	movs	r3, #1
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	f107 030e 	add.w	r3, r7, #14
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2301      	movs	r3, #1
 800268a:	4808      	ldr	r0, [pc, #32]	; (80026ac <I2Cx_ReadData+0x54>)
 800268c:	f004 f9c0 	bl	8006a10 <HAL_I2C_Mem_Read>
 8002690:	4603      	mov	r3, r0
 8002692:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800269a:	f000 f837 	bl	800270c <I2Cx_Error>
  
  }
  return value;
 800269e:	7bbb      	ldrb	r3, [r7, #14]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000064 	.word	0x20000064
 80026ac:	20000618 	.word	0x20000618

080026b0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	603a      	str	r2, [r7, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
 80026be:	460b      	mov	r3, r1
 80026c0:	71bb      	strb	r3, [r7, #6]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	b299      	uxth	r1, r3
 80026ce:	79bb      	ldrb	r3, [r7, #6]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <I2Cx_ReadBuffer+0x54>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	88bb      	ldrh	r3, [r7, #4]
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	4809      	ldr	r0, [pc, #36]	; (8002708 <I2Cx_ReadBuffer+0x58>)
 80026e4:	f004 f994 	bl	8006a10 <HAL_I2C_Mem_Read>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e002      	b.n	80026fc <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80026f6:	f000 f809 	bl	800270c <I2Cx_Error>

    return 1;
 80026fa:	2301      	movs	r3, #1
  }
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000064 	.word	0x20000064
 8002708:	20000618 	.word	0x20000618

0800270c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002710:	4803      	ldr	r0, [pc, #12]	; (8002720 <I2Cx_Error+0x14>)
 8002712:	f004 f853 	bl	80067bc <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002716:	f7ff ff11 	bl	800253c <I2Cx_Init>
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000618 	.word	0x20000618

08002724 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002728:	4819      	ldr	r0, [pc, #100]	; (8002790 <SPIx_Init+0x6c>)
 800272a:	f006 fec7 	bl	80094bc <HAL_SPI_GetState>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d12b      	bne.n	800278c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002734:	4b16      	ldr	r3, [pc, #88]	; (8002790 <SPIx_Init+0x6c>)
 8002736:	4a17      	ldr	r2, [pc, #92]	; (8002794 <SPIx_Init+0x70>)
 8002738:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <SPIx_Init+0x6c>)
 800273c:	2218      	movs	r2, #24
 800273e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <SPIx_Init+0x6c>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <SPIx_Init+0x6c>)
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <SPIx_Init+0x6c>)
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <SPIx_Init+0x6c>)
 8002754:	2200      	movs	r2, #0
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <SPIx_Init+0x6c>)
 800275a:	2207      	movs	r2, #7
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <SPIx_Init+0x6c>)
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <SPIx_Init+0x6c>)
 8002766:	2200      	movs	r2, #0
 8002768:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <SPIx_Init+0x6c>)
 800276c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002770:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <SPIx_Init+0x6c>)
 8002774:	2200      	movs	r2, #0
 8002776:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SPIx_Init+0x6c>)
 800277a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800277e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002780:	4803      	ldr	r0, [pc, #12]	; (8002790 <SPIx_Init+0x6c>)
 8002782:	f000 f853 	bl	800282c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002786:	4802      	ldr	r0, [pc, #8]	; (8002790 <SPIx_Init+0x6c>)
 8002788:	f006 fa2d 	bl	8008be6 <HAL_SPI_Init>
  } 
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200000e4 	.word	0x200000e4
 8002794:	40015000 	.word	0x40015000

08002798 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <SPIx_Read+0x38>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f107 0108 	add.w	r1, r7, #8
 80027b2:	4808      	ldr	r0, [pc, #32]	; (80027d4 <SPIx_Read+0x3c>)
 80027b4:	f006 fbd7 	bl	8008f66 <HAL_SPI_Receive>
 80027b8:	4603      	mov	r3, r0
 80027ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80027c2:	f000 f827 	bl	8002814 <SPIx_Error>
  }
  
  return readvalue;
 80027c6:	68bb      	ldr	r3, [r7, #8]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000068 	.word	0x20000068
 80027d4:	200000e4 	.word	0x200000e4

080027d8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <SPIx_Write+0x34>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	1db9      	adds	r1, r7, #6
 80027ec:	2201      	movs	r2, #1
 80027ee:	4808      	ldr	r0, [pc, #32]	; (8002810 <SPIx_Write+0x38>)
 80027f0:	f006 fa85 	bl	8008cfe <HAL_SPI_Transmit>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80027fe:	f000 f809 	bl	8002814 <SPIx_Error>
  }
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000068 	.word	0x20000068
 8002810:	200000e4 	.word	0x200000e4

08002814 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002818:	4803      	ldr	r0, [pc, #12]	; (8002828 <SPIx_Error+0x14>)
 800281a:	f006 fa48 	bl	8008cae <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800281e:	f7ff ff81 	bl	8002724 <SPIx_Init>
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200000e4 	.word	0x200000e4

0800282c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <SPIx_MspInit+0x6c>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	4a16      	ldr	r2, [pc, #88]	; (8002898 <SPIx_MspInit+0x6c>)
 800283e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002842:	6453      	str	r3, [r2, #68]	; 0x44
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <SPIx_MspInit+0x6c>)
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <SPIx_MspInit+0x6c>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <SPIx_MspInit+0x6c>)
 800285a:	f043 0320 	orr.w	r3, r3, #32
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <SPIx_MspInit+0x6c>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800286c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002870:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002876:	2302      	movs	r3, #2
 8002878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800287a:	2301      	movs	r3, #1
 800287c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800287e:	2305      	movs	r3, #5
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	4804      	ldr	r0, [pc, #16]	; (800289c <SPIx_MspInit+0x70>)
 800288a:	f002 f9a7 	bl	8004bdc <HAL_GPIO_Init>
}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40021400 	.word	0x40021400

080028a0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <LCD_IO_Init+0xe0>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d164      	bne.n	8002978 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80028ae:	4b34      	ldr	r3, [pc, #208]	; (8002980 <LCD_IO_Init+0xe0>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <LCD_IO_Init+0xe4>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	4a31      	ldr	r2, [pc, #196]	; (8002984 <LCD_IO_Init+0xe4>)
 80028be:	f043 0308 	orr.w	r3, r3, #8
 80028c2:	6313      	str	r3, [r2, #48]	; 0x30
 80028c4:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <LCD_IO_Init+0xe4>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80028d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028de:	2302      	movs	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	4619      	mov	r1, r3
 80028e8:	4827      	ldr	r0, [pc, #156]	; (8002988 <LCD_IO_Init+0xe8>)
 80028ea:	f002 f977 	bl	8004bdc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <LCD_IO_Init+0xe4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a23      	ldr	r2, [pc, #140]	; (8002984 <LCD_IO_Init+0xe4>)
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b21      	ldr	r3, [pc, #132]	; (8002984 <LCD_IO_Init+0xe4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800290a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002910:	2301      	movs	r3, #1
 8002912:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002918:	2302      	movs	r3, #2
 800291a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	4619      	mov	r1, r3
 8002922:	4819      	ldr	r0, [pc, #100]	; (8002988 <LCD_IO_Init+0xe8>)
 8002924:	f002 f95a 	bl	8004bdc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <LCD_IO_Init+0xe4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <LCD_IO_Init+0xe4>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <LCD_IO_Init+0xe4>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002944:	2304      	movs	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002948:	2301      	movs	r3, #1
 800294a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002950:	2302      	movs	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4619      	mov	r1, r3
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <LCD_IO_Init+0xec>)
 800295c:	f002 f93e 	bl	8004bdc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002960:	2200      	movs	r2, #0
 8002962:	2104      	movs	r1, #4
 8002964:	4809      	ldr	r0, [pc, #36]	; (800298c <LCD_IO_Init+0xec>)
 8002966:	f002 fbed 	bl	8005144 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800296a:	2201      	movs	r2, #1
 800296c:	2104      	movs	r1, #4
 800296e:	4807      	ldr	r0, [pc, #28]	; (800298c <LCD_IO_Init+0xec>)
 8002970:	f002 fbe8 	bl	8005144 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002974:	f7ff fed6 	bl	8002724 <SPIx_Init>
  }
}
 8002978:	bf00      	nop
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	2000013c 	.word	0x2000013c
 8002984:	40023800 	.word	0x40023800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	40020800 	.word	0x40020800

08002990 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029a0:	480a      	ldr	r0, [pc, #40]	; (80029cc <LCD_IO_WriteData+0x3c>)
 80029a2:	f002 fbcf 	bl	8005144 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80029a6:	2200      	movs	r2, #0
 80029a8:	2104      	movs	r1, #4
 80029aa:	4809      	ldr	r0, [pc, #36]	; (80029d0 <LCD_IO_WriteData+0x40>)
 80029ac:	f002 fbca 	bl	8005144 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff10 	bl	80027d8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029b8:	2201      	movs	r2, #1
 80029ba:	2104      	movs	r1, #4
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <LCD_IO_WriteData+0x40>)
 80029be:	f002 fbc1 	bl	8005144 <HAL_GPIO_WritePin>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40020800 	.word	0x40020800

080029d4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80029de:	2200      	movs	r2, #0
 80029e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029e4:	480a      	ldr	r0, [pc, #40]	; (8002a10 <LCD_IO_WriteReg+0x3c>)
 80029e6:	f002 fbad 	bl	8005144 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80029ea:	2200      	movs	r2, #0
 80029ec:	2104      	movs	r1, #4
 80029ee:	4809      	ldr	r0, [pc, #36]	; (8002a14 <LCD_IO_WriteReg+0x40>)
 80029f0:	f002 fba8 	bl	8005144 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff feed 	bl	80027d8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029fe:	2201      	movs	r2, #1
 8002a00:	2104      	movs	r1, #4
 8002a02:	4804      	ldr	r0, [pc, #16]	; (8002a14 <LCD_IO_WriteReg+0x40>)
 8002a04:	f002 fb9e 	bl	8005144 <HAL_GPIO_WritePin>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40020800 	.word	0x40020800

08002a18 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460a      	mov	r2, r1
 8002a22:	80fb      	strh	r3, [r7, #6]
 8002a24:	4613      	mov	r3, r2
 8002a26:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2104      	movs	r1, #4
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <LCD_IO_ReadData+0x5c>)
 8002a32:	f002 fb87 	bl	8005144 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a3c:	480e      	ldr	r0, [pc, #56]	; (8002a78 <LCD_IO_ReadData+0x60>)
 8002a3e:	f002 fb81 	bl	8005144 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fec7 	bl	80027d8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002a4a:	797b      	ldrb	r3, [r7, #5]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fea3 	bl	8002798 <SPIx_Read>
 8002a52:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5a:	4807      	ldr	r0, [pc, #28]	; (8002a78 <LCD_IO_ReadData+0x60>)
 8002a5c:	f002 fb72 	bl	8005144 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a60:	2201      	movs	r2, #1
 8002a62:	2104      	movs	r1, #4
 8002a64:	4803      	ldr	r0, [pc, #12]	; (8002a74 <LCD_IO_ReadData+0x5c>)
 8002a66:	f002 fb6d 	bl	8005144 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00

08002a7c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f001 fa31 	bl	8003eec <HAL_Delay>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002a96:	f7ff fd51 	bl	800253c <I2Cx_Init>
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002aa2:	f7ff fd7d 	bl	80025a0 <I2Cx_ITConfig>
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	71bb      	strb	r3, [r7, #6]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002abc:	797a      	ldrb	r2, [r7, #5]
 8002abe:	79b9      	ldrb	r1, [r7, #6]
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fd9e 	bl	8002604 <I2Cx_WriteData>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	460a      	mov	r2, r1
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002ae0:	79ba      	ldrb	r2, [r7, #6]
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fdb6 	bl	8002658 <I2Cx_ReadData>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	603a      	str	r2, [r7, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
 8002b04:	460b      	mov	r3, r1
 8002b06:	71bb      	strb	r3, [r7, #6]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002b0c:	88bb      	ldrh	r3, [r7, #4]
 8002b0e:	79b9      	ldrb	r1, [r7, #6]
 8002b10:	79f8      	ldrb	r0, [r7, #7]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	f7ff fdcc 	bl	80026b0 <I2Cx_ReadBuffer>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b29b      	uxth	r3, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f001 f9dd 	bl	8003eec <HAL_Delay>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002b40:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <BSP_LCD_Init+0xc0>)
 8002b44:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002b46:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b48:	2209      	movs	r2, #9
 8002b4a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002b52:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b54:	221d      	movs	r2, #29
 8002b56:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002b58:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b60:	f240 120d 	movw	r2, #269	; 0x10d
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b68:	f240 1243 	movw	r2, #323	; 0x143
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b70:	f240 1217 	movw	r2, #279	; 0x117
 8002b74:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b78:	f240 1247 	movw	r2, #327	; 0x147
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b96:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <BSP_LCD_Init+0xc4>)
 8002b98:	2208      	movs	r2, #8
 8002b9a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <BSP_LCD_Init+0xc4>)
 8002b9e:	22c0      	movs	r2, #192	; 0xc0
 8002ba0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <BSP_LCD_Init+0xc4>)
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002ba8:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <BSP_LCD_Init+0xc4>)
 8002baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002bb0:	4813      	ldr	r0, [pc, #76]	; (8002c00 <BSP_LCD_Init+0xc4>)
 8002bb2:	f005 fddb 	bl	800876c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002bce:	f000 fca7 	bl	8003520 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002bd2:	4809      	ldr	r0, [pc, #36]	; (8002bf8 <BSP_LCD_Init+0xbc>)
 8002bd4:	f004 fd26 	bl	8007624 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <BSP_LCD_Init+0xc8>)
 8002bda:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <BSP_LCD_Init+0xcc>)
 8002bdc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <BSP_LCD_Init+0xc8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002be6:	f000 fe89 	bl	80038fc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002bea:	4808      	ldr	r0, [pc, #32]	; (8002c0c <BSP_LCD_Init+0xd0>)
 8002bec:	f000 f920 	bl	8002e30 <BSP_LCD_SetFont>

  return LCD_OK;
 8002bf0:	2300      	movs	r3, #0
}  
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000066c 	.word	0x2000066c
 8002bfc:	40016800 	.word	0x40016800
 8002c00:	20000180 	.word	0x20000180
 8002c04:	20000714 	.word	0x20000714
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	2000006c 	.word	0x2000006c

08002c10 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <BSP_LCD_GetXSize+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	4798      	blx	r3
 8002c1c:	4603      	mov	r3, r0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000714 	.word	0x20000714

08002c28 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <BSP_LCD_GetYSize+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	4798      	blx	r3
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000714 	.word	0x20000714

08002c40 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b090      	sub	sp, #64	; 0x40
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002c50:	f7ff ffde 	bl	8002c10 <BSP_LCD_GetXSize>
 8002c54:	4603      	mov	r3, r0
 8002c56:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002c5c:	f7ff ffe4 	bl	8002c28 <BSP_LCD_GetYSize>
 8002c60:	4603      	mov	r3, r0
 8002c62:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002c6c:	23ff      	movs	r3, #255	; 0xff
 8002c6e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c8c:	2307      	movs	r3, #7
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002c90:	f7ff ffbe 	bl	8002c10 <BSP_LCD_GetXSize>
 8002c94:	4603      	mov	r3, r0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002c98:	f7ff ffc6 	bl	8002c28 <BSP_LCD_GetYSize>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4814      	ldr	r0, [pc, #80]	; (8002cfc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002caa:	f004 fe4d 	bl	8007948 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	4913      	ldr	r1, [pc, #76]	; (8002d00 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	490e      	ldr	r1, [pc, #56]	; (8002d00 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002cd6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002cd8:	88fa      	ldrh	r2, [r7, #6]
 8002cda:	4909      	ldr	r1, [pc, #36]	; (8002d00 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002cea:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002cec:	4803      	ldr	r0, [pc, #12]	; (8002cfc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002cee:	f004 fee7 	bl	8007ac0 <HAL_LTDC_EnableDither>
}
 8002cf2:	bf00      	nop
 8002cf4:	3740      	adds	r7, #64	; 0x40
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000066c 	.word	0x2000066c
 8002d00:	200001b4 	.word	0x200001b4
 8002d04:	2000006c 	.word	0x2000006c

08002d08 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <BSP_LCD_SelectLayer+0x1c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	200001b0 	.word	0x200001b0

08002d28 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d112      	bne.n	8002d60 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <BSP_LCD_SetLayerVisible+0x78>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	4413      	add	r3, r2
 8002d46:	3384      	adds	r3, #132	; 0x84
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <BSP_LCD_SetLayerVisible+0x78>)
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	01d2      	lsls	r2, r2, #7
 8002d54:	440a      	add	r2, r1
 8002d56:	3284      	adds	r2, #132	; 0x84
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e011      	b.n	8002d84 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <BSP_LCD_SetLayerVisible+0x78>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	01db      	lsls	r3, r3, #7
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3384      	adds	r3, #132	; 0x84
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <BSP_LCD_SetLayerVisible+0x78>)
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	4611      	mov	r1, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	01d2      	lsls	r2, r2, #7
 8002d7a:	440a      	add	r2, r1
 8002d7c:	3284      	adds	r2, #132	; 0x84
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <BSP_LCD_SetLayerVisible+0x78>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <BSP_LCD_SetLayerVisible+0x78>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	2000066c 	.word	0x2000066c

08002da4 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <BSP_LCD_SetColorKeying+0x24>)
 8002db4:	f004 fe06 	bl	80079c4 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4803      	ldr	r0, [pc, #12]	; (8002dc8 <BSP_LCD_SetColorKeying+0x24>)
 8002dbc:	f004 fe46 	bl	8007a4c <HAL_LTDC_EnableColorKeying>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	2000066c 	.word	0x2000066c

08002dcc <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <BSP_LCD_SetTextColor+0x28>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4907      	ldr	r1, [pc, #28]	; (8002df8 <BSP_LCD_SetTextColor+0x2c>)
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	601a      	str	r2, [r3, #0]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	200001b0 	.word	0x200001b0
 8002df8:	200001b4 	.word	0x200001b4

08002dfc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <BSP_LCD_SetBackColor+0x2c>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4908      	ldr	r1, [pc, #32]	; (8002e2c <BSP_LCD_SetBackColor+0x30>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3304      	adds	r3, #4
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	200001b0 	.word	0x200001b0
 8002e2c:	200001b4 	.word	0x200001b4

08002e30 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <BSP_LCD_SetFont+0x2c>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4908      	ldr	r1, [pc, #32]	; (8002e60 <BSP_LCD_SetFont+0x30>)
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	3308      	adds	r3, #8
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	200001b0 	.word	0x200001b0
 8002e60:	200001b4 	.word	0x200001b4

08002e64 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <BSP_LCD_Clear+0x48>)
 8002e6e:	681c      	ldr	r4, [r3, #0]
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <BSP_LCD_Clear+0x48>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <BSP_LCD_Clear+0x4c>)
 8002e76:	2134      	movs	r1, #52	; 0x34
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	335c      	adds	r3, #92	; 0x5c
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461d      	mov	r5, r3
 8002e84:	f7ff fec4 	bl	8002c10 <BSP_LCD_GetXSize>
 8002e88:	4606      	mov	r6, r0
 8002e8a:	f7ff fecd 	bl	8002c28 <BSP_LCD_GetYSize>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	2300      	movs	r3, #0
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	4632      	mov	r2, r6
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f000 fcf4 	bl	800388c <FillBuffer>
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eac:	200001b0 	.word	0x200001b0
 8002eb0:	2000066c 	.word	0x2000066c

08002eb4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	80bb      	strh	r3, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <BSP_LCD_DisplayChar+0x80>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	491b      	ldr	r1, [pc, #108]	; (8002f38 <BSP_LCD_DisplayChar+0x84>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <BSP_LCD_DisplayChar+0x80>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4c14      	ldr	r4, [pc, #80]	; (8002f38 <BSP_LCD_DisplayChar+0x84>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4423      	add	r3, r4
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ef8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002efc:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <BSP_LCD_DisplayChar+0x80>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <BSP_LCD_DisplayChar+0x84>)
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4423      	add	r3, r4
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	889b      	ldrh	r3, [r3, #4]
 8002f12:	3307      	adds	r3, #7
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	da00      	bge.n	8002f1a <BSP_LCD_DisplayChar+0x66>
 8002f18:	3307      	adds	r3, #7
 8002f1a:	10db      	asrs	r3, r3, #3
 8002f1c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f20:	18ca      	adds	r2, r1, r3
 8002f22:	88b9      	ldrh	r1, [r7, #4]
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fbf6 	bl	8003718 <DrawChar>
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	200001b0 	.word	0x200001b0
 8002f38:	200001b4 	.word	0x200001b4

08002f3c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002f3c:	b5b0      	push	{r4, r5, r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60ba      	str	r2, [r7, #8]
 8002f44:	461a      	mov	r2, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	81fb      	strh	r3, [r7, #14]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	81bb      	strh	r3, [r7, #12]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002f52:	2301      	movs	r3, #1
 8002f54:	83fb      	strh	r3, [r7, #30]
 8002f56:	2300      	movs	r3, #0
 8002f58:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002f66:	e002      	b.n	8002f6e <BSP_LCD_DisplayStringAt+0x32>
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	617a      	str	r2, [r7, #20]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f6      	bne.n	8002f68 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f7a:	f7ff fe49 	bl	8002c10 <BSP_LCD_GetXSize>
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <BSP_LCD_DisplayStringAt+0x16c>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	494a      	ldr	r1, [pc, #296]	; (80030ac <BSP_LCD_DisplayStringAt+0x170>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3308      	adds	r3, #8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	889b      	ldrh	r3, [r3, #4]
 8002f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f98:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d01c      	beq.n	8002fda <BSP_LCD_DisplayStringAt+0x9e>
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d017      	beq.n	8002fd4 <BSP_LCD_DisplayStringAt+0x98>
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d12e      	bne.n	8003006 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	1ad1      	subs	r1, r2, r3
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <BSP_LCD_DisplayStringAt+0x16c>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	483e      	ldr	r0, [pc, #248]	; (80030ac <BSP_LCD_DisplayStringAt+0x170>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4403      	add	r3, r0
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	889b      	ldrh	r3, [r3, #4]
 8002fc4:	fb03 f301 	mul.w	r3, r3, r1
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	89fb      	ldrh	r3, [r7, #14]
 8002fce:	4413      	add	r3, r2
 8002fd0:	83fb      	strh	r3, [r7, #30]
      break;
 8002fd2:	e01b      	b.n	800300c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002fd4:	89fb      	ldrh	r3, [r7, #14]
 8002fd6:	83fb      	strh	r3, [r7, #30]
      break;
 8002fd8:	e018      	b.n	800300c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	b299      	uxth	r1, r3
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <BSP_LCD_DisplayStringAt+0x16c>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4831      	ldr	r0, [pc, #196]	; (80030ac <BSP_LCD_DisplayStringAt+0x170>)
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4403      	add	r3, r0
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	889b      	ldrh	r3, [r3, #4]
 8002ff8:	fb11 f303 	smulbb	r3, r1, r3
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	89fb      	ldrh	r3, [r7, #14]
 8003000:	4413      	add	r3, r2
 8003002:	83fb      	strh	r3, [r7, #30]
      break;
 8003004:	e002      	b.n	800300c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8003006:	89fb      	ldrh	r3, [r7, #14]
 8003008:	83fb      	strh	r3, [r7, #30]
      break;
 800300a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800300c:	e01a      	b.n	8003044 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	89b9      	ldrh	r1, [r7, #12]
 8003014:	8bfb      	ldrh	r3, [r7, #30]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff4c 	bl	8002eb4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <BSP_LCD_DisplayStringAt+0x16c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4922      	ldr	r1, [pc, #136]	; (80030ac <BSP_LCD_DisplayStringAt+0x170>)
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3308      	adds	r3, #8
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	889a      	ldrh	r2, [r3, #4]
 8003032:	8bfb      	ldrh	r3, [r7, #30]
 8003034:	4413      	add	r3, r2
 8003036:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3301      	adds	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
    i++;
 800303e:	8bbb      	ldrh	r3, [r7, #28]
 8003040:	3301      	adds	r3, #1
 8003042:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2dc      	uxtb	r4, r3
 8003052:	f7ff fddd 	bl	8002c10 <BSP_LCD_GetXSize>
 8003056:	4605      	mov	r5, r0
 8003058:	8bb9      	ldrh	r1, [r7, #28]
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <BSP_LCD_DisplayStringAt+0x16c>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4813      	ldr	r0, [pc, #76]	; (80030ac <BSP_LCD_DisplayStringAt+0x170>)
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4403      	add	r3, r0
 800306a:	3308      	adds	r3, #8
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	889b      	ldrh	r3, [r3, #4]
 8003070:	fb03 f301 	mul.w	r3, r3, r1
 8003074:	1aeb      	subs	r3, r5, r3
 8003076:	b299      	uxth	r1, r3
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <BSP_LCD_DisplayStringAt+0x16c>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	480b      	ldr	r0, [pc, #44]	; (80030ac <BSP_LCD_DisplayStringAt+0x170>)
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4403      	add	r3, r0
 8003088:	3308      	adds	r3, #8
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	889b      	ldrh	r3, [r3, #4]
 800308e:	4299      	cmp	r1, r3
 8003090:	bf2c      	ite	cs
 8003092:	2301      	movcs	r3, #1
 8003094:	2300      	movcc	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4023      	ands	r3, r4
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1b6      	bne.n	800300e <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bdb0      	pop	{r4, r5, r7, pc}
 80030a8:	200001b0 	.word	0x200001b0
 80030ac:	200001b4 	.word	0x200001b4

080030b0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
 80030ba:	460b      	mov	r3, r1
 80030bc:	80bb      	strh	r3, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <BSP_LCD_DrawHLine+0x70>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a16      	ldr	r2, [pc, #88]	; (8003124 <BSP_LCD_DrawHLine+0x74>)
 80030cc:	2134      	movs	r1, #52	; 0x34
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	335c      	adds	r3, #92	; 0x5c
 80030d6:	681c      	ldr	r4, [r3, #0]
 80030d8:	f7ff fd9a 	bl	8002c10 <BSP_LCD_GetXSize>
 80030dc:	4602      	mov	r2, r0
 80030de:	88bb      	ldrh	r3, [r7, #4]
 80030e0:	fb03 f202 	mul.w	r2, r3, r2
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4423      	add	r3, r4
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <BSP_LCD_DrawHLine+0x70>)
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	68fc      	ldr	r4, [r7, #12]
 80030f4:	887d      	ldrh	r5, [r7, #2]
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <BSP_LCD_DrawHLine+0x70>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	490b      	ldr	r1, [pc, #44]	; (8003128 <BSP_LCD_DrawHLine+0x78>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2301      	movs	r3, #1
 8003110:	462a      	mov	r2, r5
 8003112:	4621      	mov	r1, r4
 8003114:	f000 fbba 	bl	800388c <FillBuffer>
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bdb0      	pop	{r4, r5, r7, pc}
 8003120:	200001b0 	.word	0x200001b0
 8003124:	2000066c 	.word	0x2000066c
 8003128:	200001b4 	.word	0x200001b4

0800312c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	460b      	mov	r3, r1
 8003138:	80bb      	strh	r3, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	f1c3 0303 	rsb	r3, r3, #3
 8003146:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003150:	e0cf      	b.n	80032f2 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	b29a      	uxth	r2, r3
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	4413      	add	r3, r2
 800315a:	b298      	uxth	r0, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	b29b      	uxth	r3, r3
 8003160:	88ba      	ldrh	r2, [r7, #4]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	b29c      	uxth	r4, r3
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <BSP_LCD_DrawCircle+0x1d8>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4967      	ldr	r1, [pc, #412]	; (8003308 <BSP_LCD_DrawCircle+0x1dc>)
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	4621      	mov	r1, r4
 800317c:	f000 faa6 	bl	80036cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	b29b      	uxth	r3, r3
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	b298      	uxth	r0, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	b29b      	uxth	r3, r3
 800318e:	88ba      	ldrh	r2, [r7, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b29c      	uxth	r4, r3
 8003194:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <BSP_LCD_DrawCircle+0x1d8>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	495b      	ldr	r1, [pc, #364]	; (8003308 <BSP_LCD_DrawCircle+0x1dc>)
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	4621      	mov	r1, r4
 80031aa:	f000 fa8f 	bl	80036cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4413      	add	r3, r2
 80031b6:	b298      	uxth	r0, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	88ba      	ldrh	r2, [r7, #4]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	b29c      	uxth	r4, r3
 80031c2:	4b50      	ldr	r3, [pc, #320]	; (8003304 <BSP_LCD_DrawCircle+0x1d8>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4950      	ldr	r1, [pc, #320]	; (8003308 <BSP_LCD_DrawCircle+0x1dc>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	4621      	mov	r1, r4
 80031d8:	f000 fa78 	bl	80036cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	88fa      	ldrh	r2, [r7, #6]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	b298      	uxth	r0, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	88ba      	ldrh	r2, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	b29c      	uxth	r4, r3
 80031f0:	4b44      	ldr	r3, [pc, #272]	; (8003304 <BSP_LCD_DrawCircle+0x1d8>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4944      	ldr	r1, [pc, #272]	; (8003308 <BSP_LCD_DrawCircle+0x1dc>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	4621      	mov	r1, r4
 8003206:	f000 fa61 	bl	80036cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	b29a      	uxth	r2, r3
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	4413      	add	r3, r2
 8003212:	b298      	uxth	r0, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	b29a      	uxth	r2, r3
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	b29c      	uxth	r4, r3
 800321e:	4b39      	ldr	r3, [pc, #228]	; (8003304 <BSP_LCD_DrawCircle+0x1d8>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4939      	ldr	r1, [pc, #228]	; (8003308 <BSP_LCD_DrawCircle+0x1dc>)
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4621      	mov	r1, r4
 8003234:	f000 fa4a 	bl	80036cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	b29b      	uxth	r3, r3
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	b298      	uxth	r0, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	b29a      	uxth	r2, r3
 8003246:	88bb      	ldrh	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	b29c      	uxth	r4, r3
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <BSP_LCD_DrawCircle+0x1d8>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	492d      	ldr	r1, [pc, #180]	; (8003308 <BSP_LCD_DrawCircle+0x1dc>)
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	4621      	mov	r1, r4
 8003262:	f000 fa33 	bl	80036cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	b29a      	uxth	r2, r3
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4413      	add	r3, r2
 800326e:	b298      	uxth	r0, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	b29a      	uxth	r2, r3
 8003274:	88bb      	ldrh	r3, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	b29c      	uxth	r4, r3
 800327a:	4b22      	ldr	r3, [pc, #136]	; (8003304 <BSP_LCD_DrawCircle+0x1d8>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4922      	ldr	r1, [pc, #136]	; (8003308 <BSP_LCD_DrawCircle+0x1dc>)
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4621      	mov	r1, r4
 8003290:	f000 fa1c 	bl	80036cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	b29b      	uxth	r3, r3
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	b298      	uxth	r0, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	88bb      	ldrh	r3, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	b29c      	uxth	r4, r3
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <BSP_LCD_DrawCircle+0x1d8>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4916      	ldr	r1, [pc, #88]	; (8003308 <BSP_LCD_DrawCircle+0x1dc>)
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	4621      	mov	r1, r4
 80032be:	f000 fa05 	bl	80036cc <BSP_LCD_DrawPixel>

    if (d < 0)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da06      	bge.n	80032d6 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4413      	add	r3, r2
 80032d0:	3306      	adds	r3, #6
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	e00a      	b.n	80032ec <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	009a      	lsls	r2, r3, #2
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4413      	add	r3, r2
 80032e2:	330a      	adds	r3, #10
 80032e4:	617b      	str	r3, [r7, #20]
      cury--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	3301      	adds	r3, #1
 80032f0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	f67f af2b 	bls.w	8003152 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	200001b0 	.word	0x200001b0
 8003308:	200001b4 	.word	0x200001b4

0800330c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800330c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af02      	add	r7, sp, #8
 8003314:	4604      	mov	r4, r0
 8003316:	4608      	mov	r0, r1
 8003318:	4611      	mov	r1, r2
 800331a:	461a      	mov	r2, r3
 800331c:	4623      	mov	r3, r4
 800331e:	80fb      	strh	r3, [r7, #6]
 8003320:	4603      	mov	r3, r0
 8003322:	80bb      	strh	r3, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <BSP_LCD_FillRect+0xa8>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4920      	ldr	r1, [pc, #128]	; (80033b8 <BSP_LCD_FillRect+0xac>)
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fd42 	bl	8002dcc <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <BSP_LCD_FillRect+0xa8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <BSP_LCD_FillRect+0xb0>)
 800334e:	2134      	movs	r1, #52	; 0x34
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	335c      	adds	r3, #92	; 0x5c
 8003358:	681c      	ldr	r4, [r3, #0]
 800335a:	f7ff fc59 	bl	8002c10 <BSP_LCD_GetXSize>
 800335e:	4602      	mov	r2, r0
 8003360:	88bb      	ldrh	r3, [r7, #4]
 8003362:	fb03 f202 	mul.w	r2, r3, r2
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4423      	add	r3, r4
 800336e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <BSP_LCD_FillRect+0xa8>)
 8003372:	681c      	ldr	r4, [r3, #0]
 8003374:	68fd      	ldr	r5, [r7, #12]
 8003376:	887e      	ldrh	r6, [r7, #2]
 8003378:	f8b7 8000 	ldrh.w	r8, [r7]
 800337c:	f7ff fc48 	bl	8002c10 <BSP_LCD_GetXSize>
 8003380:	4602      	mov	r2, r0
 8003382:	887b      	ldrh	r3, [r7, #2]
 8003384:	1ad1      	subs	r1, r2, r3
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <BSP_LCD_FillRect+0xa8>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	480b      	ldr	r0, [pc, #44]	; (80033b8 <BSP_LCD_FillRect+0xac>)
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4403      	add	r3, r0
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	9100      	str	r1, [sp, #0]
 800339c:	4643      	mov	r3, r8
 800339e:	4632      	mov	r2, r6
 80033a0:	4629      	mov	r1, r5
 80033a2:	4620      	mov	r0, r4
 80033a4:	f000 fa72 	bl	800388c <FillBuffer>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b2:	bf00      	nop
 80033b4:	200001b0 	.word	0x200001b0
 80033b8:	200001b4 	.word	0x200001b4
 80033bc:	2000066c 	.word	0x2000066c

080033c0 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	80fb      	strh	r3, [r7, #6]
 80033ca:	460b      	mov	r3, r1
 80033cc:	80bb      	strh	r3, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80033d2:	887b      	ldrh	r3, [r7, #2]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	f1c3 0303 	rsb	r3, r3, #3
 80033da:	617b      	str	r3, [r7, #20]

  curx = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80033e4:	4b44      	ldr	r3, [pc, #272]	; (80034f8 <BSP_LCD_FillCircle+0x138>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4944      	ldr	r1, [pc, #272]	; (80034fc <BSP_LCD_FillCircle+0x13c>)
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fce8 	bl	8002dcc <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80033fc:	e061      	b.n	80034c2 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d021      	beq.n	8003448 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	b29b      	uxth	r3, r3
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	b298      	uxth	r0, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	b29a      	uxth	r2, r3
 8003412:	88bb      	ldrh	r3, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	b299      	uxth	r1, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	b29b      	uxth	r3, r3
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	f7ff fe45 	bl	80030b0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	b29b      	uxth	r3, r3
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	b298      	uxth	r0, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	b29b      	uxth	r3, r3
 8003434:	88ba      	ldrh	r2, [r7, #4]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	b299      	uxth	r1, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	b29b      	uxth	r3, r3
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	b29b      	uxth	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	f7ff fe34 	bl	80030b0 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d021      	beq.n	8003492 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	b29b      	uxth	r3, r3
 8003452:	88fa      	ldrh	r2, [r7, #6]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	b298      	uxth	r0, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	b29b      	uxth	r3, r3
 800345c:	88ba      	ldrh	r2, [r7, #4]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	b299      	uxth	r1, r3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	b29b      	uxth	r3, r3
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	f7ff fe20 	bl	80030b0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	b29b      	uxth	r3, r3
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b298      	uxth	r0, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	b29a      	uxth	r2, r3
 800347e:	88bb      	ldrh	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	b299      	uxth	r1, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	b29b      	uxth	r3, r3
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	b29b      	uxth	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	f7ff fe0f 	bl	80030b0 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	da06      	bge.n	80034a6 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	009a      	lsls	r2, r3, #2
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	4413      	add	r3, r2
 80034a0:	3306      	adds	r3, #6
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	e00a      	b.n	80034bc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	009a      	lsls	r2, r3, #2
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4413      	add	r3, r2
 80034b2:	330a      	adds	r3, #10
 80034b4:	617b      	str	r3, [r7, #20]
      cury--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3301      	adds	r3, #1
 80034c0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d999      	bls.n	80033fe <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <BSP_LCD_FillCircle+0x138>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	490b      	ldr	r1, [pc, #44]	; (80034fc <BSP_LCD_FillCircle+0x13c>)
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fc75 	bl	8002dcc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	88b9      	ldrh	r1, [r7, #4]
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fe1f 	bl	800312c <BSP_LCD_DrawCircle>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200001b0 	.word	0x200001b0
 80034fc:	200001b4 	.word	0x200001b4

08003500 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <BSP_LCD_DisplayOn+0x1c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800350e:	4b03      	ldr	r3, [pc, #12]	; (800351c <BSP_LCD_DisplayOn+0x1c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4798      	blx	r3
  }
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000714 	.word	0x20000714

08003520 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08e      	sub	sp, #56	; 0x38
 8003524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
 800352a:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4a60      	ldr	r2, [pc, #384]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003534:	6453      	str	r3, [r2, #68]	; 0x44
 8003536:	4b5e      	ldr	r3, [pc, #376]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a59      	ldr	r2, [pc, #356]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 800354c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
 8003552:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6313      	str	r3, [r2, #48]	; 0x30
 800356e:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	4b4c      	ldr	r3, [pc, #304]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	4a4b      	ldr	r2, [pc, #300]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	6313      	str	r3, [r2, #48]	; 0x30
 800358a:	4b49      	ldr	r3, [pc, #292]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	4b3e      	ldr	r3, [pc, #248]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a3d      	ldr	r2, [pc, #244]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035bc:	f043 0308 	orr.w	r3, r3, #8
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a36      	ldr	r2, [pc, #216]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035d8:	f043 0320 	orr.w	r3, r3, #32
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <BSP_LCD_MspInit+0x190>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003606:	f641 0358 	movw	r3, #6232	; 0x1858
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003614:	2302      	movs	r3, #2
 8003616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003618:	230e      	movs	r3, #14
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800361c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003620:	4619      	mov	r1, r3
 8003622:	4824      	ldr	r0, [pc, #144]	; (80036b4 <BSP_LCD_MspInit+0x194>)
 8003624:	f001 fada 	bl	8004bdc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003628:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800362e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003632:	4619      	mov	r1, r3
 8003634:	4820      	ldr	r0, [pc, #128]	; (80036b8 <BSP_LCD_MspInit+0x198>)
 8003636:	f001 fad1 	bl	8004bdc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800363a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003644:	4619      	mov	r1, r3
 8003646:	481d      	ldr	r0, [pc, #116]	; (80036bc <BSP_LCD_MspInit+0x19c>)
 8003648:	f001 fac8 	bl	8004bdc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800364c:	2348      	movs	r3, #72	; 0x48
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003654:	4619      	mov	r1, r3
 8003656:	481a      	ldr	r0, [pc, #104]	; (80036c0 <BSP_LCD_MspInit+0x1a0>)
 8003658:	f001 fac0 	bl	8004bdc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800365c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003666:	4619      	mov	r1, r3
 8003668:	4816      	ldr	r0, [pc, #88]	; (80036c4 <BSP_LCD_MspInit+0x1a4>)
 800366a:	f001 fab7 	bl	8004bdc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800366e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003678:	4619      	mov	r1, r3
 800367a:	4813      	ldr	r0, [pc, #76]	; (80036c8 <BSP_LCD_MspInit+0x1a8>)
 800367c:	f001 faae 	bl	8004bdc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003680:	2303      	movs	r3, #3
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003684:	2309      	movs	r3, #9
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368c:	4619      	mov	r1, r3
 800368e:	480a      	ldr	r0, [pc, #40]	; (80036b8 <BSP_LCD_MspInit+0x198>)
 8003690:	f001 faa4 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800369a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369e:	4619      	mov	r1, r3
 80036a0:	4809      	ldr	r0, [pc, #36]	; (80036c8 <BSP_LCD_MspInit+0x1a8>)
 80036a2:	f001 fa9b 	bl	8004bdc <HAL_GPIO_Init>
}
 80036a6:	bf00      	nop
 80036a8:	3738      	adds	r7, #56	; 0x38
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020800 	.word	0x40020800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021400 	.word	0x40021400
 80036c8:	40021800 	.word	0x40021800

080036cc <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80036cc:	b5b0      	push	{r4, r5, r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	603a      	str	r2, [r7, #0]
 80036d6:	80fb      	strh	r3, [r7, #6]
 80036d8:	460b      	mov	r3, r1
 80036da:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <BSP_LCD_DrawPixel+0x44>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <BSP_LCD_DrawPixel+0x48>)
 80036e2:	2134      	movs	r1, #52	; 0x34
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	335c      	adds	r3, #92	; 0x5c
 80036ec:	681c      	ldr	r4, [r3, #0]
 80036ee:	88bd      	ldrh	r5, [r7, #4]
 80036f0:	f7ff fa8e 	bl	8002c10 <BSP_LCD_GetXSize>
 80036f4:	4603      	mov	r3, r0
 80036f6:	fb03 f205 	mul.w	r2, r3, r5
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4423      	add	r3, r4
 8003702:	461a      	mov	r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6013      	str	r3, [r2, #0]
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bdb0      	pop	{r4, r5, r7, pc}
 8003710:	200001b0 	.word	0x200001b0
 8003714:	2000066c 	.word	0x2000066c

08003718 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	603a      	str	r2, [r7, #0]
 8003722:	80fb      	strh	r3, [r7, #6]
 8003724:	460b      	mov	r3, r1
 8003726:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	2300      	movs	r3, #0
 800372e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <DrawChar+0x16c>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4953      	ldr	r1, [pc, #332]	; (8003888 <DrawChar+0x170>)
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	3308      	adds	r3, #8
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	88db      	ldrh	r3, [r3, #6]
 800374a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800374c:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <DrawChar+0x16c>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	494d      	ldr	r1, [pc, #308]	; (8003888 <DrawChar+0x170>)
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3308      	adds	r3, #8
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	889b      	ldrh	r3, [r3, #4]
 8003762:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003764:	8a3b      	ldrh	r3, [r7, #16]
 8003766:	3307      	adds	r3, #7
 8003768:	2b00      	cmp	r3, #0
 800376a:	da00      	bge.n	800376e <DrawChar+0x56>
 800376c:	3307      	adds	r3, #7
 800376e:	10db      	asrs	r3, r3, #3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	b2da      	uxtb	r2, r3
 8003776:	8a3b      	ldrh	r3, [r7, #16]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	e076      	b.n	8003872 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003784:	8a3b      	ldrh	r3, [r7, #16]
 8003786:	3307      	adds	r3, #7
 8003788:	2b00      	cmp	r3, #0
 800378a:	da00      	bge.n	800378e <DrawChar+0x76>
 800378c:	3307      	adds	r3, #7
 800378e:	10db      	asrs	r3, r3, #3
 8003790:	461a      	mov	r2, r3
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fb03 f302 	mul.w	r3, r3, r2
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	4413      	add	r3, r2
 800379c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800379e:	8a3b      	ldrh	r3, [r7, #16]
 80037a0:	3307      	adds	r3, #7
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da00      	bge.n	80037a8 <DrawChar+0x90>
 80037a6:	3307      	adds	r3, #7
 80037a8:	10db      	asrs	r3, r3, #3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d002      	beq.n	80037b4 <DrawChar+0x9c>
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d004      	beq.n	80037bc <DrawChar+0xa4>
 80037b2:	e00c      	b.n	80037ce <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
      break;
 80037ba:	e016      	b.n	80037ea <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	3201      	adds	r2, #1
 80037c6:	7812      	ldrb	r2, [r2, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
      break;
 80037cc:	e00d      	b.n	80037ea <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	041a      	lsls	r2, r3, #16
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	3301      	adds	r3, #1
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	4313      	orrs	r3, r2
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	3202      	adds	r2, #2
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
      break;
 80037e8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e036      	b.n	800385e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80037f0:	8a3a      	ldrh	r2, [r7, #16]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	1ad2      	subs	r2, r2, r3
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	4413      	add	r3, r2
 80037fa:	3b01      	subs	r3, #1
 80037fc:	2201      	movs	r2, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	461a      	mov	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	b29a      	uxth	r2, r3
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	4413      	add	r3, r2
 8003814:	b298      	uxth	r0, r3
 8003816:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <DrawChar+0x16c>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	491b      	ldr	r1, [pc, #108]	; (8003888 <DrawChar+0x170>)
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	88bb      	ldrh	r3, [r7, #4]
 800382a:	4619      	mov	r1, r3
 800382c:	f7ff ff4e 	bl	80036cc <BSP_LCD_DrawPixel>
 8003830:	e012      	b.n	8003858 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	b29a      	uxth	r2, r3
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	4413      	add	r3, r2
 800383a:	b298      	uxth	r0, r3
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <DrawChar+0x16c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4911      	ldr	r1, [pc, #68]	; (8003888 <DrawChar+0x170>)
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3304      	adds	r3, #4
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	88bb      	ldrh	r3, [r7, #4]
 8003852:	4619      	mov	r1, r3
 8003854:	f7ff ff3a 	bl	80036cc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	3301      	adds	r3, #1
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	8a3b      	ldrh	r3, [r7, #16]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	429a      	cmp	r2, r3
 8003864:	d3c4      	bcc.n	80037f0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003866:	88bb      	ldrh	r3, [r7, #4]
 8003868:	3301      	adds	r3, #1
 800386a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3301      	adds	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	8a7b      	ldrh	r3, [r7, #18]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	429a      	cmp	r2, r3
 8003878:	d384      	bcc.n	8003784 <DrawChar+0x6c>
  }
}
 800387a:	bf00      	nop
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200001b0 	.word	0x200001b0
 8003888:	200001b4 	.word	0x200001b4

0800388c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <FillBuffer+0x68>)
 800389c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038a0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <FillBuffer+0x68>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80038a8:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <FillBuffer+0x68>)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <FillBuffer+0x68>)
 80038b0:	4a11      	ldr	r2, [pc, #68]	; (80038f8 <FillBuffer+0x6c>)
 80038b2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80038b4:	480f      	ldr	r0, [pc, #60]	; (80038f4 <FillBuffer+0x68>)
 80038b6:	f000 fdf5 	bl	80044a4 <HAL_DMA2D_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d115      	bne.n	80038ec <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80038c0:	68f9      	ldr	r1, [r7, #12]
 80038c2:	480c      	ldr	r0, [pc, #48]	; (80038f4 <FillBuffer+0x68>)
 80038c4:	f001 f85c 	bl	8004980 <HAL_DMA2D_ConfigLayer>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69f9      	ldr	r1, [r7, #28]
 80038d8:	4806      	ldr	r0, [pc, #24]	; (80038f4 <FillBuffer+0x68>)
 80038da:	f000 fe2c 	bl	8004536 <HAL_DMA2D_Start>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80038e4:	210a      	movs	r1, #10
 80038e6:	4803      	ldr	r0, [pc, #12]	; (80038f4 <FillBuffer+0x68>)
 80038e8:	f000 fe50 	bl	800458c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000140 	.word	0x20000140
 80038f8:	4002b000 	.word	0x4002b000

080038fc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003902:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <BSP_SDRAM_Init+0xb0>)
 8003904:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003906:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 8003908:	2202      	movs	r2, #2
 800390a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800390c:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 800390e:	2207      	movs	r2, #7
 8003910:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 8003914:	2204      	movs	r2, #4
 8003916:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 800391a:	2207      	movs	r2, #7
 800391c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 8003920:	2202      	movs	r2, #2
 8003922:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 8003926:	2202      	movs	r2, #2
 8003928:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 800392c:	2202      	movs	r2, #2
 800392e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003932:	2201      	movs	r2, #1
 8003934:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800393e:	2204      	movs	r2, #4
 8003940:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003944:	2210      	movs	r2, #16
 8003946:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003950:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003954:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003958:	2200      	movs	r2, #0
 800395a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800395e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003962:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003966:	2200      	movs	r2, #0
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800396c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003972:	2100      	movs	r1, #0
 8003974:	480c      	ldr	r0, [pc, #48]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 8003976:	f000 f87f 	bl	8003a78 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800397a:	490d      	ldr	r1, [pc, #52]	; (80039b0 <BSP_SDRAM_Init+0xb4>)
 800397c:	480a      	ldr	r0, [pc, #40]	; (80039a8 <BSP_SDRAM_Init+0xac>)
 800397e:	f005 f8b3 	bl	8008ae8 <HAL_SDRAM_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <BSP_SDRAM_Init+0xb8>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e002      	b.n	8003996 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <BSP_SDRAM_Init+0xb8>)
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003996:	f240 506a 	movw	r0, #1386	; 0x56a
 800399a:	f000 f80d 	bl	80039b8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <BSP_SDRAM_Init+0xb8>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	200001cc 	.word	0x200001cc
 80039ac:	a0000140 	.word	0xa0000140
 80039b0:	20000200 	.word	0x20000200
 80039b4:	2000007c 	.word	0x2000007c

080039b8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80039ca:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039cc:	2208      	movs	r2, #8
 80039ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80039d0:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80039d6:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80039dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e0:	4923      	ldr	r1, [pc, #140]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e2:	4824      	ldr	r0, [pc, #144]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039e4:	f005 f8b4 	bl	8008b50 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f000 fa7f 	bl	8003eec <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80039ee:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f0:	2202      	movs	r2, #2
 80039f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f6:	2208      	movs	r2, #8
 80039f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0a:	4919      	ldr	r1, [pc, #100]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0c:	4819      	ldr	r0, [pc, #100]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a0e:	f005 f89f 	bl	8008b50 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a14:	2203      	movs	r2, #3
 8003a16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a20:	2204      	movs	r2, #4
 8003a22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2e:	4910      	ldr	r1, [pc, #64]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a30:	4810      	ldr	r0, [pc, #64]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a32:	f005 f88d 	bl	8008b50 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003a36:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003a3a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a3e:	2204      	movs	r2, #4
 8003a40:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a44:	2208      	movs	r2, #8
 8003a46:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a52:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a58:	4905      	ldr	r1, [pc, #20]	; (8003a70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a5a:	4806      	ldr	r0, [pc, #24]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a5c:	f005 f878 	bl	8008b50 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4804      	ldr	r0, [pc, #16]	; (8003a74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a64:	f005 f89f 	bl	8008ba6 <HAL_SDRAM_ProgramRefreshRate>
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	2000021c 	.word	0x2000021c
 8003a74:	200001cc 	.word	0x200001cc

08003a78 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	; 0x40
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80ec 	beq.w	8003c62 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8e:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	4a76      	ldr	r2, [pc, #472]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6393      	str	r3, [r2, #56]	; 0x38
 8003a9a:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a6f      	ldr	r2, [pc, #444]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003ab0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	623b      	str	r3, [r7, #32]
 8003ac6:	4b69      	ldr	r3, [pc, #420]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a61      	ldr	r2, [pc, #388]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b04:	f043 0308 	orr.w	r3, r3, #8
 8003b08:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0a:	4b58      	ldr	r3, [pc, #352]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	4b54      	ldr	r3, [pc, #336]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a53      	ldr	r2, [pc, #332]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b20:	f043 0310 	orr.w	r3, r3, #16
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	4b4d      	ldr	r3, [pc, #308]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a4c      	ldr	r2, [pc, #304]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b3c:	f043 0320 	orr.w	r3, r3, #32
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b4a      	ldr	r3, [pc, #296]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a45      	ldr	r2, [pc, #276]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b43      	ldr	r3, [pc, #268]	; (8003c6c <BSP_SDRAM_MspInit+0x1f4>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003b76:	230c      	movs	r3, #12
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003b7a:	2360      	movs	r3, #96	; 0x60
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b82:	4619      	mov	r1, r3
 8003b84:	483a      	ldr	r0, [pc, #232]	; (8003c70 <BSP_SDRAM_MspInit+0x1f8>)
 8003b86:	f001 f829 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b92:	4619      	mov	r1, r3
 8003b94:	4837      	ldr	r0, [pc, #220]	; (8003c74 <BSP_SDRAM_MspInit+0x1fc>)
 8003b96:	f001 f821 	bl	8004bdc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003b9a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4834      	ldr	r0, [pc, #208]	; (8003c78 <BSP_SDRAM_MspInit+0x200>)
 8003ba8:	f001 f818 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003bac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4830      	ldr	r0, [pc, #192]	; (8003c7c <BSP_SDRAM_MspInit+0x204>)
 8003bba:	f001 f80f 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003bbe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bc8:	4619      	mov	r1, r3
 8003bca:	482d      	ldr	r0, [pc, #180]	; (8003c80 <BSP_SDRAM_MspInit+0x208>)
 8003bcc:	f001 f806 	bl	8004bdc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003bd0:	f248 1333 	movw	r3, #33075	; 0x8133
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4829      	ldr	r0, [pc, #164]	; (8003c84 <BSP_SDRAM_MspInit+0x20c>)
 8003bde:	f000 fffd 	bl	8004bdc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003be2:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003be8:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bfc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c04:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c0c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003c14:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c1a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c22:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c24:	2203      	movs	r2, #3
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c28:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c2e:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <BSP_SDRAM_MspInit+0x214>)
 8003c38:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003c46:	4810      	ldr	r0, [pc, #64]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c48:	f000 fb1e 	bl	8004288 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003c4c:	480e      	ldr	r0, [pc, #56]	; (8003c88 <BSP_SDRAM_MspInit+0x210>)
 8003c4e:	f000 fa6d 	bl	800412c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c52:	2200      	movs	r2, #0
 8003c54:	210f      	movs	r1, #15
 8003c56:	2038      	movs	r0, #56	; 0x38
 8003c58:	f000 fa22 	bl	80040a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c5c:	2038      	movs	r0, #56	; 0x38
 8003c5e:	f000 fa3b 	bl	80040d8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003c62:	bf00      	nop
 8003c64:	3740      	adds	r7, #64	; 0x40
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020400 	.word	0x40020400
 8003c74:	40020800 	.word	0x40020800
 8003c78:	40020c00 	.word	0x40020c00
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40021400 	.word	0x40021400
 8003c84:	40021800 	.word	0x40021800
 8003c88:	2000022c 	.word	0x2000022c
 8003c8c:	40026410 	.word	0x40026410

08003c90 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	460a      	mov	r2, r1
 8003c9a:	80fb      	strh	r3, [r7, #6]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003ca4:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <BSP_TS_Init+0x64>)
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <BSP_TS_Init+0x68>)
 8003cac:	88bb      	ldrh	r3, [r7, #4]
 8003cae:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <BSP_TS_Init+0x6c>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2082      	movs	r0, #130	; 0x82
 8003cb6:	4798      	blx	r3
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f640 0311 	movw	r3, #2065	; 0x811
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d104      	bne.n	8003cce <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <BSP_TS_Init+0x70>)
 8003cc6:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <BSP_TS_Init+0x6c>)
 8003cc8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <BSP_TS_Init+0x70>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2082      	movs	r0, #130	; 0x82
 8003cdc:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <BSP_TS_Init+0x70>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2082      	movs	r0, #130	; 0x82
 8003ce6:	4798      	blx	r3
  }

  return ret;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000290 	.word	0x20000290
 8003cf8:	20000292 	.word	0x20000292
 8003cfc:	2000003c 	.word	0x2000003c
 8003d00:	2000028c 	.word	0x2000028c

08003d04 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003d0c:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <BSP_TS_GetState+0x148>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2082      	movs	r0, #130	; 0x82
 8003d14:	4798      	blx	r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 808d 	beq.w	8003e42 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003d28:	4b48      	ldr	r3, [pc, #288]	; (8003e4c <BSP_TS_GetState+0x148>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f107 020c 	add.w	r2, r7, #12
 8003d32:	f107 010e 	add.w	r1, r7, #14
 8003d36:	2082      	movs	r0, #130	; 0x82
 8003d38:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003d3a:	89bb      	ldrh	r3, [r7, #12]
 8003d3c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003d44:	89bb      	ldrh	r3, [r7, #12]
 8003d46:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <BSP_TS_GetState+0x14c>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	08db      	lsrs	r3, r3, #3
 8003d4e:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003d50:	8abb      	ldrh	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	82bb      	strh	r3, [r7, #20]
 8003d5a:	e008      	b.n	8003d6e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <BSP_TS_GetState+0x150>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	8aba      	ldrh	r2, [r7, #20]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d903      	bls.n	8003d6e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <BSP_TS_GetState+0x150>)
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003d6e:	8abb      	ldrh	r3, [r7, #20]
 8003d70:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003d72:	89fb      	ldrh	r3, [r7, #14]
 8003d74:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d806      	bhi.n	8003d8a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003d7c:	89fb      	ldrh	r3, [r7, #14]
 8003d7e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003d82:	330e      	adds	r3, #14
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	81fb      	strh	r3, [r7, #14]
 8003d88:	e005      	b.n	8003d96 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003d8a:	89fb      	ldrh	r3, [r7, #14]
 8003d8c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003d90:	3308      	adds	r3, #8
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003d96:	89fb      	ldrh	r3, [r7, #14]
 8003d98:	4a2f      	ldr	r2, [pc, #188]	; (8003e58 <BSP_TS_GetState+0x154>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003da2:	8afb      	ldrh	r3, [r7, #22]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	82fb      	strh	r3, [r7, #22]
 8003dac:	e008      	b.n	8003dc0 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003dae:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <BSP_TS_GetState+0x158>)
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	8afa      	ldrh	r2, [r7, #22]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d903      	bls.n	8003dc0 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <BSP_TS_GetState+0x158>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003dc0:	8afb      	ldrh	r3, [r7, #22]
 8003dc2:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003dc4:	89fb      	ldrh	r3, [r7, #14]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <BSP_TS_GetState+0x15c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d906      	bls.n	8003dde <BSP_TS_GetState+0xda>
 8003dd0:	89fa      	ldrh	r2, [r7, #14]
 8003dd2:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <BSP_TS_GetState+0x15c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	e005      	b.n	8003dea <BSP_TS_GetState+0xe6>
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <BSP_TS_GetState+0x15c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	89fb      	ldrh	r3, [r7, #14]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003dec:	89bb      	ldrh	r3, [r7, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <BSP_TS_GetState+0x160>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d906      	bls.n	8003e06 <BSP_TS_GetState+0x102>
 8003df8:	89ba      	ldrh	r2, [r7, #12]
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <BSP_TS_GetState+0x160>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	e005      	b.n	8003e12 <BSP_TS_GetState+0x10e>
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <BSP_TS_GetState+0x160>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	89bb      	ldrh	r3, [r7, #12]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003e14:	8a7a      	ldrh	r2, [r7, #18]
 8003e16:	8a3b      	ldrh	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	dd07      	ble.n	8003e2e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003e1e:	89fb      	ldrh	r3, [r7, #14]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <BSP_TS_GetState+0x15c>)
 8003e24:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003e26:	89bb      	ldrh	r3, [r7, #12]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <BSP_TS_GetState+0x160>)
 8003e2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <BSP_TS_GetState+0x15c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <BSP_TS_GetState+0x160>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	809a      	strh	r2, [r3, #4]
  }
}
 8003e42:	bf00      	nop
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000028c 	.word	0x2000028c
 8003e50:	ba2e8ba3 	.word	0xba2e8ba3
 8003e54:	20000292 	.word	0x20000292
 8003e58:	88888889 	.word	0x88888889
 8003e5c:	20000290 	.word	0x20000290
 8003e60:	20000294 	.word	0x20000294
 8003e64:	20000298 	.word	0x20000298

08003e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_Init+0x40>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0d      	ldr	r2, [pc, #52]	; (8003ea8 <HAL_Init+0x40>)
 8003e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_Init+0x40>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <HAL_Init+0x40>)
 8003e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_Init+0x40>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a07      	ldr	r2, [pc, #28]	; (8003ea8 <HAL_Init+0x40>)
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e90:	2003      	movs	r0, #3
 8003e92:	f000 f8fa 	bl	800408a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7fd fb00 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e9c:	f7fd fad2 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00

08003eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_IncTick+0x20>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_IncTick+0x24>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4413      	add	r3, r2
 8003ebc:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <HAL_IncTick+0x24>)
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000084 	.word	0x20000084
 8003ed0:	20000718 	.word	0x20000718

08003ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_GetTick+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000718 	.word	0x20000718

08003eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ef4:	f7ff ffee 	bl	8003ed4 <HAL_GetTick>
 8003ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d005      	beq.n	8003f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_Delay+0x40>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f12:	bf00      	nop
 8003f14:	f7ff ffde 	bl	8003ed4 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d8f7      	bhi.n	8003f14 <HAL_Delay+0x28>
  {
  }
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000084 	.word	0x20000084

08003f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <__NVIC_SetPriorityGrouping+0x44>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f62:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <__NVIC_SetPriorityGrouping+0x44>)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	60d3      	str	r3, [r2, #12]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f7c:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <__NVIC_GetPriorityGrouping+0x18>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	0a1b      	lsrs	r3, r3, #8
 8003f82:	f003 0307 	and.w	r3, r3, #7
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	db0b      	blt.n	8003fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	f003 021f 	and.w	r2, r3, #31
 8003fac:	4907      	ldr	r1, [pc, #28]	; (8003fcc <__NVIC_EnableIRQ+0x38>)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	e000e100 	.word	0xe000e100

08003fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	6039      	str	r1, [r7, #0]
 8003fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	db0a      	blt.n	8003ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	490c      	ldr	r1, [pc, #48]	; (800401c <__NVIC_SetPriority+0x4c>)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	0112      	lsls	r2, r2, #4
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff8:	e00a      	b.n	8004010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4908      	ldr	r1, [pc, #32]	; (8004020 <__NVIC_SetPriority+0x50>)
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3b04      	subs	r3, #4
 8004008:	0112      	lsls	r2, r2, #4
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	440b      	add	r3, r1
 800400e:	761a      	strb	r2, [r3, #24]
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000e100 	.word	0xe000e100
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004024:	b480      	push	{r7}
 8004026:	b089      	sub	sp, #36	; 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f1c3 0307 	rsb	r3, r3, #7
 800403e:	2b04      	cmp	r3, #4
 8004040:	bf28      	it	cs
 8004042:	2304      	movcs	r3, #4
 8004044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3304      	adds	r3, #4
 800404a:	2b06      	cmp	r3, #6
 800404c:	d902      	bls.n	8004054 <NVIC_EncodePriority+0x30>
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3b03      	subs	r3, #3
 8004052:	e000      	b.n	8004056 <NVIC_EncodePriority+0x32>
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004058:	f04f 32ff 	mov.w	r2, #4294967295
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43da      	mvns	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	401a      	ands	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800406c:	f04f 31ff 	mov.w	r1, #4294967295
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	43d9      	mvns	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800407c:	4313      	orrs	r3, r2
         );
}
 800407e:	4618      	mov	r0, r3
 8004080:	3724      	adds	r7, #36	; 0x24
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ff4c 	bl	8003f30 <__NVIC_SetPriorityGrouping>
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040b2:	f7ff ff61 	bl	8003f78 <__NVIC_GetPriorityGrouping>
 80040b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	6978      	ldr	r0, [r7, #20]
 80040be:	f7ff ffb1 	bl	8004024 <NVIC_EncodePriority>
 80040c2:	4602      	mov	r2, r0
 80040c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff ff80 	bl	8003fd0 <__NVIC_SetPriority>
}
 80040d0:	bf00      	nop
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff54 	bl	8003f94 <__NVIC_EnableIRQ>
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e00e      	b.n	8004124 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	795b      	ldrb	r3, [r3, #5]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fc f9fe 	bl	8000518 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004138:	f7ff fecc 	bl	8003ed4 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e099      	b.n	800427c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004168:	e00f      	b.n	800418a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800416a:	f7ff feb3 	bl	8003ed4 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b05      	cmp	r3, #5
 8004176:	d908      	bls.n	800418a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2203      	movs	r2, #3
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e078      	b.n	800427c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e8      	bne.n	800416a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4b38      	ldr	r3, [pc, #224]	; (8004284 <HAL_DMA_Init+0x158>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d107      	bne.n	80041f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	4313      	orrs	r3, r2
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0307 	bic.w	r3, r3, #7
 800420a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b04      	cmp	r3, #4
 800421c:	d117      	bne.n	800424e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8bd 	bl	80043b0 <DMA_CheckFifoParam>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2240      	movs	r2, #64	; 0x40
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800424a:	2301      	movs	r3, #1
 800424c:	e016      	b.n	800427c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f874 	bl	8004344 <DMA_CalcBaseAndBitshift>
 800425c:	4603      	mov	r3, r0
 800425e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	223f      	movs	r2, #63	; 0x3f
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	f010803f 	.word	0xf010803f

08004288 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e050      	b.n	800433c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d101      	bne.n	80042aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
 80042a8:	e048      	b.n	800433c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2221      	movs	r2, #33	; 0x21
 80042e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f82a 	bl	8004344 <DMA_CalcBaseAndBitshift>
 80042f0:	4603      	mov	r3, r0
 80042f2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	223f      	movs	r2, #63	; 0x3f
 800431e:	409a      	lsls	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	3b10      	subs	r3, #16
 8004354:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800435e:	4a13      	ldr	r2, [pc, #76]	; (80043ac <DMA_CalcBaseAndBitshift+0x68>)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b03      	cmp	r3, #3
 8004370:	d909      	bls.n	8004386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	659a      	str	r2, [r3, #88]	; 0x58
 8004384:	e007      	b.n	8004396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	aaaaaaab 	.word	0xaaaaaaab
 80043ac:	0800e2bc 	.word	0x0800e2bc

080043b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d11f      	bne.n	800440a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d855      	bhi.n	800447c <DMA_CheckFifoParam+0xcc>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <DMA_CheckFifoParam+0x28>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043fb 	.word	0x080043fb
 80043e0:	080043e9 	.word	0x080043e9
 80043e4:	0800447d 	.word	0x0800447d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d045      	beq.n	8004480 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f8:	e042      	b.n	8004480 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004402:	d13f      	bne.n	8004484 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004408:	e03c      	b.n	8004484 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004412:	d121      	bne.n	8004458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d836      	bhi.n	8004488 <DMA_CheckFifoParam+0xd8>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <DMA_CheckFifoParam+0x70>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004431 	.word	0x08004431
 8004424:	08004437 	.word	0x08004437
 8004428:	08004431 	.word	0x08004431
 800442c:	08004449 	.word	0x08004449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      break;
 8004434:	e02f      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d024      	beq.n	800448c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004446:	e021      	b.n	800448c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004450:	d11e      	bne.n	8004490 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004456:	e01b      	b.n	8004490 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d902      	bls.n	8004464 <DMA_CheckFifoParam+0xb4>
 800445e:	2b03      	cmp	r3, #3
 8004460:	d003      	beq.n	800446a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004462:	e018      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      break;
 8004468:	e015      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
      break;
 800447a:	e00b      	b.n	8004494 <DMA_CheckFifoParam+0xe4>
      break;
 800447c:	bf00      	nop
 800447e:	e00a      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      break;
 8004480:	bf00      	nop
 8004482:	e008      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      break;
 8004484:	bf00      	nop
 8004486:	e006      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      break;
 8004488:	bf00      	nop
 800448a:	e004      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      break;
 800448c:	bf00      	nop
 800448e:	e002      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      break;   
 8004490:	bf00      	nop
 8004492:	e000      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      break;
 8004494:	bf00      	nop
    }
  } 
  
  return status; 
 8004496:	7bfb      	ldrb	r3, [r7, #15]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e03b      	b.n	800452e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc f878 	bl	80005c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	f023 0107 	bic.w	r1, r3, #7
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800450e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68d1      	ldr	r1, [r2, #12]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	430b      	orrs	r3, r1
 800451c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af02      	add	r7, sp, #8
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_DMA2D_Start+0x1c>
 800454e:	2302      	movs	r3, #2
 8004550:	e018      	b.n	8004584 <HAL_DMA2D_Start+0x4e>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fa99 	bl	8004aa4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d056      	beq.n	8004656 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80045a8:	f7ff fc94 	bl	8003ed4 <HAL_GetTick>
 80045ac:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80045ae:	e04b      	b.n	8004648 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d023      	beq.n	800460a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	f043 0202 	orr.w	r2, r3, #2
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	f043 0201 	orr.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2221      	movs	r2, #33	; 0x21
 80045f4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2204      	movs	r2, #4
 80045fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0a5      	b.n	8004756 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d01a      	beq.n	8004648 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004612:	f7ff fc5f 	bl	8003ed4 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <HAL_DMA2D_PollForTransfer+0x9c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10f      	bne.n	8004648 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e086      	b.n	8004756 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ac      	beq.n	80045b0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d061      	beq.n	800473c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004678:	f7ff fc2c 	bl	8003ed4 <HAL_GetTick>
 800467c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800467e:	e056      	b.n	800472e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02e      	beq.n	80046f0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	f043 0204 	orr.w	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	f043 0201 	orr.w	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2229      	movs	r2, #41	; 0x29
 80046da:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2204      	movs	r2, #4
 80046e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e032      	b.n	8004756 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d01a      	beq.n	800472e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80046f8:	f7ff fbec 	bl	8003ed4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d302      	bcc.n	800470e <HAL_DMA2D_PollForTransfer+0x182>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2203      	movs	r2, #3
 800471e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e013      	b.n	8004756 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0a1      	beq.n	8004680 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2212      	movs	r2, #18
 8004742:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d026      	beq.n	80047ce <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d021      	beq.n	80047ce <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004798:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	f043 0201 	orr.w	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2201      	movs	r2, #1
 80047ac:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2204      	movs	r2, #4
 80047b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d026      	beq.n	8004826 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d021      	beq.n	8004826 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047f0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2220      	movs	r2, #32
 80047f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	f043 0202 	orr.w	r2, r3, #2
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d026      	beq.n	800487e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	2b00      	cmp	r3, #0
 8004838:	d021      	beq.n	800487e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004848:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2208      	movs	r2, #8
 8004850:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	f043 0204 	orr.w	r2, r3, #4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2204      	movs	r2, #4
 8004862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d013      	beq.n	80048b0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00e      	beq.n	80048b0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2204      	movs	r2, #4
 80048a8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f853 	bl	8004956 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d024      	beq.n	8004904 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01f      	beq.n	8004904 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048d2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2202      	movs	r2, #2
 80048da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01f      	beq.n	800494e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01a      	beq.n	800494e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004926:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2210      	movs	r2, #16
 800492e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f80e 	bl	800496a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_DMA2D_ConfigLayer+0x20>
 800499c:	2302      	movs	r3, #2
 800499e:	e079      	b.n	8004a94 <HAL_DMA2D_ConfigLayer+0x114>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	3318      	adds	r3, #24
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	041b      	lsls	r3, r3, #16
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80049ca:	4b35      	ldr	r3, [pc, #212]	; (8004aa0 <HAL_DMA2D_ConfigLayer+0x120>)
 80049cc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b0a      	cmp	r3, #10
 80049d4:	d003      	beq.n	80049de <HAL_DMA2D_ConfigLayer+0x5e>
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b09      	cmp	r3, #9
 80049dc:	d107      	bne.n	80049ee <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e005      	b.n	80049fa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d120      	bne.n	8004a42 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	ea02 0103 	and.w	r1, r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b0a      	cmp	r3, #10
 8004a28:	d003      	beq.n	8004a32 <HAL_DMA2D_ConfigLayer+0xb2>
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b09      	cmp	r3, #9
 8004a30:	d127      	bne.n	8004a82 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a40:	e01f      	b.n	8004a82 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	ea02 0103 	and.w	r1, r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b0a      	cmp	r3, #10
 8004a6a:	d003      	beq.n	8004a74 <HAL_DMA2D_ConfigLayer+0xf4>
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	d106      	bne.n	8004a82 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004a80:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	ff03000f 	.word	0xff03000f

08004aa4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b08b      	sub	sp, #44	; 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	041a      	lsls	r2, r3, #16
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004adc:	d174      	bne.n	8004bc8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aec:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004af4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d108      	bne.n	8004b16 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
 8004b14:	e053      	b.n	8004bbe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d106      	bne.n	8004b2c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	e048      	b.n	8004bbe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d111      	bne.n	8004b58 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	0cdb      	lsrs	r3, r3, #19
 8004b38:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	0a9b      	lsrs	r3, r3, #10
 8004b3e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	08db      	lsrs	r3, r3, #3
 8004b44:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	02db      	lsls	r3, r3, #11
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
 8004b56:	e032      	b.n	8004bbe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d117      	bne.n	8004b90 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	0fdb      	lsrs	r3, r3, #31
 8004b64:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	0cdb      	lsrs	r3, r3, #19
 8004b6a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	0adb      	lsrs	r3, r3, #11
 8004b70:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	08db      	lsrs	r3, r3, #3
 8004b76:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	029b      	lsls	r3, r3, #10
 8004b80:	431a      	orrs	r2, r3
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	03db      	lsls	r3, r3, #15
 8004b86:	4313      	orrs	r3, r2
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	e016      	b.n	8004bbe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	0f1b      	lsrs	r3, r3, #28
 8004b94:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	0d1b      	lsrs	r3, r3, #20
 8004b9a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	0b1b      	lsrs	r3, r3, #12
 8004ba0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	011a      	lsls	r2, r3, #4
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	031b      	lsls	r3, r3, #12
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004bc6:	e003      	b.n	8004bd0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	60da      	str	r2, [r3, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	372c      	adds	r7, #44	; 0x2c
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b089      	sub	sp, #36	; 0x24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e177      	b.n	8004ee8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	f040 8166 	bne.w	8004ee2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d00b      	beq.n	8004c36 <HAL_GPIO_Init+0x5a>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d007      	beq.n	8004c36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c2a:	2b11      	cmp	r3, #17
 8004c2c:	d003      	beq.n	8004c36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b12      	cmp	r3, #18
 8004c34:	d130      	bne.n	8004c98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	2203      	movs	r2, #3
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43db      	mvns	r3, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	f003 0201 	and.w	r2, r3, #1
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4013      	ands	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d003      	beq.n	8004cd8 <HAL_GPIO_Init+0xfc>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b12      	cmp	r3, #18
 8004cd6:	d123      	bne.n	8004d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	08da      	lsrs	r2, r3, #3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3208      	adds	r2, #8
 8004ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	220f      	movs	r2, #15
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	08da      	lsrs	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3208      	adds	r2, #8
 8004d1a:	69b9      	ldr	r1, [r7, #24]
 8004d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0203 	and.w	r2, r3, #3
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80c0 	beq.w	8004ee2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	4b65      	ldr	r3, [pc, #404]	; (8004efc <HAL_GPIO_Init+0x320>)
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	4a64      	ldr	r2, [pc, #400]	; (8004efc <HAL_GPIO_Init+0x320>)
 8004d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d70:	6453      	str	r3, [r2, #68]	; 0x44
 8004d72:	4b62      	ldr	r3, [pc, #392]	; (8004efc <HAL_GPIO_Init+0x320>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d7e:	4a60      	ldr	r2, [pc, #384]	; (8004f00 <HAL_GPIO_Init+0x324>)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	089b      	lsrs	r3, r3, #2
 8004d84:	3302      	adds	r3, #2
 8004d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	220f      	movs	r2, #15
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a57      	ldr	r2, [pc, #348]	; (8004f04 <HAL_GPIO_Init+0x328>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d037      	beq.n	8004e1a <HAL_GPIO_Init+0x23e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a56      	ldr	r2, [pc, #344]	; (8004f08 <HAL_GPIO_Init+0x32c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d031      	beq.n	8004e16 <HAL_GPIO_Init+0x23a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a55      	ldr	r2, [pc, #340]	; (8004f0c <HAL_GPIO_Init+0x330>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02b      	beq.n	8004e12 <HAL_GPIO_Init+0x236>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a54      	ldr	r2, [pc, #336]	; (8004f10 <HAL_GPIO_Init+0x334>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d025      	beq.n	8004e0e <HAL_GPIO_Init+0x232>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a53      	ldr	r2, [pc, #332]	; (8004f14 <HAL_GPIO_Init+0x338>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01f      	beq.n	8004e0a <HAL_GPIO_Init+0x22e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a52      	ldr	r2, [pc, #328]	; (8004f18 <HAL_GPIO_Init+0x33c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d019      	beq.n	8004e06 <HAL_GPIO_Init+0x22a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a51      	ldr	r2, [pc, #324]	; (8004f1c <HAL_GPIO_Init+0x340>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_GPIO_Init+0x226>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a50      	ldr	r2, [pc, #320]	; (8004f20 <HAL_GPIO_Init+0x344>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00d      	beq.n	8004dfe <HAL_GPIO_Init+0x222>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a4f      	ldr	r2, [pc, #316]	; (8004f24 <HAL_GPIO_Init+0x348>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <HAL_GPIO_Init+0x21e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a4e      	ldr	r2, [pc, #312]	; (8004f28 <HAL_GPIO_Init+0x34c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_GPIO_Init+0x21a>
 8004df2:	2309      	movs	r3, #9
 8004df4:	e012      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004df6:	230a      	movs	r3, #10
 8004df8:	e010      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	e00e      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004dfe:	2307      	movs	r3, #7
 8004e00:	e00c      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004e02:	2306      	movs	r3, #6
 8004e04:	e00a      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004e06:	2305      	movs	r3, #5
 8004e08:	e008      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	e006      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e004      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e002      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <HAL_GPIO_Init+0x240>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	f002 0203 	and.w	r2, r2, #3
 8004e22:	0092      	lsls	r2, r2, #2
 8004e24:	4093      	lsls	r3, r2
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e2c:	4934      	ldr	r1, [pc, #208]	; (8004f00 <HAL_GPIO_Init+0x324>)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	089b      	lsrs	r3, r3, #2
 8004e32:	3302      	adds	r3, #2
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e3a:	4b3c      	ldr	r3, [pc, #240]	; (8004f2c <HAL_GPIO_Init+0x350>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e5e:	4a33      	ldr	r2, [pc, #204]	; (8004f2c <HAL_GPIO_Init+0x350>)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e64:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <HAL_GPIO_Init+0x350>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e88:	4a28      	ldr	r2, [pc, #160]	; (8004f2c <HAL_GPIO_Init+0x350>)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e8e:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <HAL_GPIO_Init+0x350>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <HAL_GPIO_Init+0x350>)
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <HAL_GPIO_Init+0x350>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004edc:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <HAL_GPIO_Init+0x350>)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	f67f ae84 	bls.w	8004bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3724      	adds	r7, #36	; 0x24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40013800 	.word	0x40013800
 8004f04:	40020000 	.word	0x40020000
 8004f08:	40020400 	.word	0x40020400
 8004f0c:	40020800 	.word	0x40020800
 8004f10:	40020c00 	.word	0x40020c00
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40021400 	.word	0x40021400
 8004f1c:	40021800 	.word	0x40021800
 8004f20:	40021c00 	.word	0x40021c00
 8004f24:	40022000 	.word	0x40022000
 8004f28:	40022400 	.word	0x40022400
 8004f2c:	40013c00 	.word	0x40013c00

08004f30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e0d9      	b.n	8005100 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	f040 80c9 	bne.w	80050fa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004f68:	4a6a      	ldr	r2, [pc, #424]	; (8005114 <HAL_GPIO_DeInit+0x1e4>)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	089b      	lsrs	r3, r3, #2
 8004f6e:	3302      	adds	r3, #2
 8004f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f74:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	220f      	movs	r2, #15
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	4013      	ands	r3, r2
 8004f88:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a62      	ldr	r2, [pc, #392]	; (8005118 <HAL_GPIO_DeInit+0x1e8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d037      	beq.n	8005002 <HAL_GPIO_DeInit+0xd2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a61      	ldr	r2, [pc, #388]	; (800511c <HAL_GPIO_DeInit+0x1ec>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_GPIO_DeInit+0xce>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a60      	ldr	r2, [pc, #384]	; (8005120 <HAL_GPIO_DeInit+0x1f0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02b      	beq.n	8004ffa <HAL_GPIO_DeInit+0xca>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a5f      	ldr	r2, [pc, #380]	; (8005124 <HAL_GPIO_DeInit+0x1f4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d025      	beq.n	8004ff6 <HAL_GPIO_DeInit+0xc6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a5e      	ldr	r2, [pc, #376]	; (8005128 <HAL_GPIO_DeInit+0x1f8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <HAL_GPIO_DeInit+0xc2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a5d      	ldr	r2, [pc, #372]	; (800512c <HAL_GPIO_DeInit+0x1fc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d019      	beq.n	8004fee <HAL_GPIO_DeInit+0xbe>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a5c      	ldr	r2, [pc, #368]	; (8005130 <HAL_GPIO_DeInit+0x200>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_GPIO_DeInit+0xba>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a5b      	ldr	r2, [pc, #364]	; (8005134 <HAL_GPIO_DeInit+0x204>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00d      	beq.n	8004fe6 <HAL_GPIO_DeInit+0xb6>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a5a      	ldr	r2, [pc, #360]	; (8005138 <HAL_GPIO_DeInit+0x208>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <HAL_GPIO_DeInit+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a59      	ldr	r2, [pc, #356]	; (800513c <HAL_GPIO_DeInit+0x20c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_GPIO_DeInit+0xae>
 8004fda:	2309      	movs	r3, #9
 8004fdc:	e012      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004fde:	230a      	movs	r3, #10
 8004fe0:	e010      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	e00e      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004fe6:	2307      	movs	r3, #7
 8004fe8:	e00c      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004fea:	2306      	movs	r3, #6
 8004fec:	e00a      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004fee:	2305      	movs	r3, #5
 8004ff0:	e008      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	e006      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e004      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e002      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_GPIO_DeInit+0xd4>
 8005002:	2300      	movs	r3, #0
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	f002 0203 	and.w	r2, r2, #3
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	4093      	lsls	r3, r2
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	d132      	bne.n	800507a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005014:	4b4a      	ldr	r3, [pc, #296]	; (8005140 <HAL_GPIO_DeInit+0x210>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	4948      	ldr	r1, [pc, #288]	; (8005140 <HAL_GPIO_DeInit+0x210>)
 800501e:	4013      	ands	r3, r2
 8005020:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005022:	4b47      	ldr	r3, [pc, #284]	; (8005140 <HAL_GPIO_DeInit+0x210>)
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	43db      	mvns	r3, r3
 800502a:	4945      	ldr	r1, [pc, #276]	; (8005140 <HAL_GPIO_DeInit+0x210>)
 800502c:	4013      	ands	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005030:	4b43      	ldr	r3, [pc, #268]	; (8005140 <HAL_GPIO_DeInit+0x210>)
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	43db      	mvns	r3, r3
 8005038:	4941      	ldr	r1, [pc, #260]	; (8005140 <HAL_GPIO_DeInit+0x210>)
 800503a:	4013      	ands	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800503e:	4b40      	ldr	r3, [pc, #256]	; (8005140 <HAL_GPIO_DeInit+0x210>)
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	43db      	mvns	r3, r3
 8005046:	493e      	ldr	r1, [pc, #248]	; (8005140 <HAL_GPIO_DeInit+0x210>)
 8005048:	4013      	ands	r3, r2
 800504a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	220f      	movs	r2, #15
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800505c:	4a2d      	ldr	r2, [pc, #180]	; (8005114 <HAL_GPIO_DeInit+0x1e4>)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	089b      	lsrs	r3, r3, #2
 8005062:	3302      	adds	r3, #2
 8005064:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	43da      	mvns	r2, r3
 800506c:	4829      	ldr	r0, [pc, #164]	; (8005114 <HAL_GPIO_DeInit+0x1e4>)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	089b      	lsrs	r3, r3, #2
 8005072:	400a      	ands	r2, r1
 8005074:	3302      	adds	r3, #2
 8005076:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	2103      	movs	r1, #3
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	401a      	ands	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	08da      	lsrs	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3208      	adds	r2, #8
 8005098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	220f      	movs	r2, #15
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	08d2      	lsrs	r2, r2, #3
 80050b0:	4019      	ands	r1, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3208      	adds	r2, #8
 80050b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	2103      	movs	r1, #3
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	2101      	movs	r1, #1
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	fa01 f303 	lsl.w	r3, r1, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	401a      	ands	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2103      	movs	r1, #3
 80050ee:	fa01 f303 	lsl.w	r3, r1, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	401a      	ands	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	3301      	adds	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b0f      	cmp	r3, #15
 8005104:	f67f af22 	bls.w	8004f4c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40013800 	.word	0x40013800
 8005118:	40020000 	.word	0x40020000
 800511c:	40020400 	.word	0x40020400
 8005120:	40020800 	.word	0x40020800
 8005124:	40020c00 	.word	0x40020c00
 8005128:	40021000 	.word	0x40021000
 800512c:	40021400 	.word	0x40021400
 8005130:	40021800 	.word	0x40021800
 8005134:	40021c00 	.word	0x40021c00
 8005138:	40022000 	.word	0x40022000
 800513c:	40022400 	.word	0x40022400
 8005140:	40013c00 	.word	0x40013c00

08005144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	807b      	strh	r3, [r7, #2]
 8005150:	4613      	mov	r3, r2
 8005152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005154:	787b      	ldrb	r3, [r7, #1]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005160:	e003      	b.n	800516a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	041a      	lsls	r2, r3, #16
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	619a      	str	r2, [r3, #24]
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b086      	sub	sp, #24
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f005 fc67 	bl	800aa60 <USB_GetMode>
 8005192:	4603      	mov	r3, r0
 8005194:	2b01      	cmp	r3, #1
 8005196:	f040 80ef 	bne.w	8005378 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f005 fc4b 	bl	800aa3a <USB_ReadInterrupts>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80e5 	beq.w	8005376 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f005 fc42 	bl	800aa3a <USB_ReadInterrupts>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c0:	d104      	bne.n	80051cc <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80051ca:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f005 fc32 	bl	800aa3a <USB_ReadInterrupts>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e0:	d104      	bne.n	80051ec <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051ea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f005 fc22 	bl	800aa3a <USB_ReadInterrupts>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005200:	d104      	bne.n	800520c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800520a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f005 fc12 	bl	800aa3a <USB_ReadInterrupts>
 8005216:	4603      	mov	r3, r0
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b02      	cmp	r3, #2
 800521e:	d103      	bne.n	8005228 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2202      	movs	r2, #2
 8005226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f005 fc04 	bl	800aa3a <USB_ReadInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800523c:	d115      	bne.n	800526a <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005246:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d108      	bne.n	800526a <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f006 ff27 	bl	800c0ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2101      	movs	r1, #1
 8005264:	4618      	mov	r0, r3
 8005266:	f005 fc09 	bl	800aa7c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f005 fbe3 	bl	800aa3a <USB_ReadInterrupts>
 8005274:	4603      	mov	r3, r0
 8005276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800527e:	d102      	bne.n	8005286 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 f8ef 	bl	8006464 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f005 fbd5 	bl	800aa3a <USB_ReadInterrupts>
 8005290:	4603      	mov	r3, r0
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b08      	cmp	r3, #8
 8005298:	d106      	bne.n	80052a8 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f006 feea 	bl	800c074 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2208      	movs	r2, #8
 80052a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f005 fbc4 	bl	800aa3a <USB_ReadInterrupts>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052bc:	d138      	bne.n	8005330 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f005 fc14 	bl	800aaf0 <USB_HC_ReadInterrupt>
 80052c8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	e025      	b.n	800531c <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d018      	beq.n	8005316 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fa:	d106      	bne.n	800530a <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f858 	bl	80053b8 <HCD_HC_IN_IRQHandler>
 8005308:	e005      	b.n	8005316 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fc86 	bl	8005c22 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3301      	adds	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	429a      	cmp	r2, r3
 8005324:	d3d4      	bcc.n	80052d0 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800532e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f005 fb80 	bl	800aa3a <USB_ReadInterrupts>
 800533a:	4603      	mov	r3, r0
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b10      	cmp	r3, #16
 8005342:	d101      	bne.n	8005348 <HAL_HCD_IRQHandler+0x1d2>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_HCD_IRQHandler+0x1d4>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d014      	beq.n	8005378 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699a      	ldr	r2, [r3, #24]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0210 	bic.w	r2, r2, #16
 800535c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 ffd4 	bl	800630c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0210 	orr.w	r2, r2, #16
 8005372:	619a      	str	r2, [r3, #24]
 8005374:	e000      	b.n	8005378 <HAL_HCD_IRQHandler+0x202>
      return;
 8005376:	bf00      	nop
    }
  }
}
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_HCD_Stop+0x16>
 8005390:	2302      	movs	r3, #2
 8005392:	e00d      	b.n	80053b0 <HAL_HCD_Stop+0x32>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f005 fcb5 	bl	800ad10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d119      	bne.n	800541c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f4:	461a      	mov	r2, r3
 80053f6:	2304      	movs	r3, #4
 80053f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4413      	add	r3, r2
 8005402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	440a      	add	r2, r1
 8005410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	60d3      	str	r3, [r2, #12]
 800541a:	e0ce      	b.n	80055ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005432:	d12c      	bne.n	800548e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	461a      	mov	r2, r3
 8005442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005446:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	440b      	add	r3, r1
 8005456:	335d      	adds	r3, #93	; 0x5d
 8005458:	2207      	movs	r2, #7
 800545a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	440a      	add	r2, r1
 8005472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005476:	f043 0302 	orr.w	r3, r3, #2
 800547a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f005 fb43 	bl	800ab12 <USB_HC_Halt>
 800548c:	e095      	b.n	80055ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d109      	bne.n	80054b8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	461a      	mov	r2, r3
 80054b2:	2320      	movs	r3, #32
 80054b4:	6093      	str	r3, [r2, #8]
 80054b6:	e080      	b.n	80055ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d134      	bne.n	8005538 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	440b      	add	r3, r1
 80054fc:	335d      	adds	r3, #93	; 0x5d
 80054fe:	2205      	movs	r2, #5
 8005500:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4413      	add	r3, r2
 800550a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550e:	461a      	mov	r2, r3
 8005510:	2310      	movs	r3, #16
 8005512:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	2308      	movs	r3, #8
 8005524:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f005 faee 	bl	800ab12 <USB_HC_Halt>
 8005536:	e040      	b.n	80055ba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554e:	d134      	bne.n	80055ba <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	440a      	add	r2, r1
 8005566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	4611      	mov	r1, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f005 fac9 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558c:	461a      	mov	r2, r3
 800558e:	2310      	movs	r3, #16
 8005590:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	440b      	add	r3, r1
 80055a0:	335d      	adds	r3, #93	; 0x5d
 80055a2:	2208      	movs	r2, #8
 80055a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	461a      	mov	r2, r3
 80055b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d0:	d122      	bne.n	8005618 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ec:	f043 0302 	orr.w	r3, r3, #2
 80055f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	4611      	mov	r1, r2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f005 fa88 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560e:	461a      	mov	r2, r3
 8005610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005614:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005616:	e300      	b.n	8005c1a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b01      	cmp	r3, #1
 800562c:	f040 80fd 	bne.w	800582a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01b      	beq.n	8005670 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	440b      	add	r3, r1
 8005646:	3348      	adds	r3, #72	; 0x48
 8005648:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	0159      	lsls	r1, r3, #5
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	440b      	add	r3, r1
 8005652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800565c:	1ad1      	subs	r1, r2, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4403      	add	r3, r0
 800566c:	334c      	adds	r3, #76	; 0x4c
 800566e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	440b      	add	r3, r1
 800567e:	335d      	adds	r3, #93	; 0x5d
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	440b      	add	r3, r1
 8005692:	3358      	adds	r3, #88	; 0x58
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	461a      	mov	r2, r3
 80056a6:	2301      	movs	r3, #1
 80056a8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	440b      	add	r3, r1
 80056b8:	333f      	adds	r3, #63	; 0x3f
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	333f      	adds	r3, #63	; 0x3f
 80056d0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d121      	bne.n	800571a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f0:	f043 0302 	orr.w	r3, r3, #2
 80056f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f005 fa06 	bl	800ab12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	461a      	mov	r2, r3
 8005714:	2310      	movs	r3, #16
 8005716:	6093      	str	r3, [r2, #8]
 8005718:	e070      	b.n	80057fc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	440b      	add	r3, r1
 8005728:	333f      	adds	r3, #63	; 0x3f
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d12a      	bne.n	8005786 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	440a      	add	r2, r1
 8005746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800574a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800574e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	440b      	add	r3, r1
 800575e:	335c      	adds	r3, #92	; 0x5c
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	b2d8      	uxtb	r0, r3
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	335c      	adds	r3, #92	; 0x5c
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	4601      	mov	r1, r0
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f006 fca2 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005784:	e03a      	b.n	80057fc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	440b      	add	r3, r1
 8005794:	333f      	adds	r3, #63	; 0x3f
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d12f      	bne.n	80057fc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	335c      	adds	r3, #92	; 0x5c
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	440b      	add	r3, r1
 80057be:	3350      	adds	r3, #80	; 0x50
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f083 0301 	eor.w	r3, r3, #1
 80057c6:	b2d8      	uxtb	r0, r3
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	440b      	add	r3, r1
 80057d6:	3350      	adds	r3, #80	; 0x50
 80057d8:	4602      	mov	r2, r0
 80057da:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	b2d8      	uxtb	r0, r3
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	440b      	add	r3, r1
 80057ee:	335c      	adds	r3, #92	; 0x5c
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	4601      	mov	r1, r0
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f006 fc66 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	440b      	add	r3, r1
 800580a:	3350      	adds	r3, #80	; 0x50
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	f083 0301 	eor.w	r3, r3, #1
 8005812:	b2d8      	uxtb	r0, r3
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	440b      	add	r3, r1
 8005822:	3350      	adds	r3, #80	; 0x50
 8005824:	4602      	mov	r2, r0
 8005826:	701a      	strb	r2, [r3, #0]
}
 8005828:	e1f7      	b.n	8005c1a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4413      	add	r3, r2
 8005832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b02      	cmp	r3, #2
 800583e:	f040 811a 	bne.w	8005a76 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4413      	add	r3, r2
 800584a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	440a      	add	r2, r1
 8005858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585c:	f023 0302 	bic.w	r3, r3, #2
 8005860:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	440b      	add	r3, r1
 8005870:	335d      	adds	r3, #93	; 0x5d
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10a      	bne.n	800588e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	440b      	add	r3, r1
 8005886:	335c      	adds	r3, #92	; 0x5c
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e0d9      	b.n	8005a42 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	335d      	adds	r3, #93	; 0x5d
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b05      	cmp	r3, #5
 80058a2:	d10a      	bne.n	80058ba <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	440b      	add	r3, r1
 80058b2:	335c      	adds	r3, #92	; 0x5c
 80058b4:	2205      	movs	r2, #5
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e0c3      	b.n	8005a42 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	440b      	add	r3, r1
 80058c8:	335d      	adds	r3, #93	; 0x5d
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d00a      	beq.n	80058e6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	440b      	add	r3, r1
 80058de:	335d      	adds	r3, #93	; 0x5d
 80058e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d156      	bne.n	8005994 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	440b      	add	r3, r1
 80058f4:	3358      	adds	r3, #88	; 0x58
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	1c59      	adds	r1, r3, #1
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4403      	add	r3, r0
 8005908:	3358      	adds	r3, #88	; 0x58
 800590a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	440b      	add	r3, r1
 800591a:	3358      	adds	r3, #88	; 0x58
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d914      	bls.n	800594c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	3358      	adds	r3, #88	; 0x58
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	335c      	adds	r3, #92	; 0x5c
 8005946:	2204      	movs	r2, #4
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	e009      	b.n	8005960 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	440b      	add	r3, r1
 800595a:	335c      	adds	r3, #92	; 0x5c
 800595c:	2202      	movs	r2, #2
 800595e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005976:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800597e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	461a      	mov	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e056      	b.n	8005a42 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	440b      	add	r3, r1
 80059a2:	335d      	adds	r3, #93	; 0x5d
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d123      	bne.n	80059f2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	440b      	add	r3, r1
 80059b8:	335c      	adds	r3, #92	; 0x5c
 80059ba:	2202      	movs	r2, #2
 80059bc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059d4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	461a      	mov	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e027      	b.n	8005a42 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	335d      	adds	r3, #93	; 0x5d
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b07      	cmp	r3, #7
 8005a06:	d11c      	bne.n	8005a42 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	440b      	add	r3, r1
 8005a16:	3358      	adds	r3, #88	; 0x58
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	1c59      	adds	r1, r3, #1
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4403      	add	r3, r0
 8005a2a:	3358      	adds	r3, #88	; 0x58
 8005a2c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	440b      	add	r3, r1
 8005a3c:	335c      	adds	r3, #92	; 0x5c
 8005a3e:	2204      	movs	r2, #4
 8005a40:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2302      	movs	r3, #2
 8005a52:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	b2d8      	uxtb	r0, r3
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	335c      	adds	r3, #92	; 0x5c
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4601      	mov	r1, r0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f006 fb2a 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005a74:	e0d1      	b.n	8005c1a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a88:	2b80      	cmp	r3, #128	; 0x80
 8005a8a:	d13e      	bne.n	8005b0a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa6:	f043 0302 	orr.w	r3, r3, #2
 8005aaa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	440b      	add	r3, r1
 8005aba:	3358      	adds	r3, #88	; 0x58
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4403      	add	r3, r0
 8005ace:	3358      	adds	r3, #88	; 0x58
 8005ad0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	440b      	add	r3, r1
 8005ae0:	335d      	adds	r3, #93	; 0x5d
 8005ae2:	2206      	movs	r2, #6
 8005ae4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	4611      	mov	r1, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f005 f80e 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	461a      	mov	r2, r3
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	6093      	str	r3, [r2, #8]
}
 8005b08:	e087      	b.n	8005c1a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d17c      	bne.n	8005c1a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	440b      	add	r3, r1
 8005b2e:	333f      	adds	r3, #63	; 0x3f
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d122      	bne.n	8005b7c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	440b      	add	r3, r1
 8005b44:	3358      	adds	r3, #88	; 0x58
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f004 ffcc 	bl	800ab12 <USB_HC_Halt>
 8005b7a:	e045      	b.n	8005c08 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	333f      	adds	r3, #63	; 0x3f
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	440b      	add	r3, r1
 8005ba0:	333f      	adds	r3, #63	; 0x3f
 8005ba2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d12f      	bne.n	8005c08 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3358      	adds	r3, #88	; 0x58
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d121      	bne.n	8005c08 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	440b      	add	r3, r1
 8005bd2:	335d      	adds	r3, #93	; 0x5d
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf2:	f043 0302 	orr.w	r3, r3, #2
 8005bf6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f004 ff85 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c14:	461a      	mov	r2, r3
 8005c16:	2310      	movs	r3, #16
 8005c18:	6093      	str	r3, [r2, #8]
}
 8005c1a:	bf00      	nop
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b086      	sub	sp, #24
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d119      	bne.n	8005c86 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	461a      	mov	r2, r3
 8005c60:	2304      	movs	r3, #4
 8005c62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7e:	f043 0302 	orr.w	r3, r3, #2
 8005c82:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005c84:	e33e      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d141      	bne.n	8005d20 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2320      	movs	r3, #32
 8005cac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	440b      	add	r3, r1
 8005cbc:	333d      	adds	r3, #61	; 0x3d
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	f040 831f 	bne.w	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	333d      	adds	r3, #61	; 0x3d
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	440b      	add	r3, r1
 8005ce8:	335c      	adds	r3, #92	; 0x5c
 8005cea:	2202      	movs	r2, #2
 8005cec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f004 fefa 	bl	800ab12 <USB_HC_Halt>
}
 8005d1e:	e2f1      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d13f      	bne.n	8005db6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	440b      	add	r3, r1
 8005d44:	335d      	adds	r3, #93	; 0x5d
 8005d46:	2204      	movs	r2, #4
 8005d48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	440b      	add	r3, r1
 8005d58:	333d      	adds	r3, #61	; 0x3d
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3358      	adds	r3, #88	; 0x58
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f004 feb8 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	461a      	mov	r2, r3
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	6093      	str	r3, [r2, #8]
}
 8005db4:	e2a6      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dcc:	d122      	bne.n	8005e14 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de8:	f043 0302 	orr.w	r3, r3, #2
 8005dec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f004 fe8a 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e10:	6093      	str	r3, [r2, #8]
}
 8005e12:	e277      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d135      	bne.n	8005e96 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	440b      	add	r3, r1
 8005e38:	3358      	adds	r3, #88	; 0x58
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e58:	f043 0302 	orr.w	r3, r3, #2
 8005e5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f004 fe52 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	440b      	add	r3, r1
 8005e8e:	335d      	adds	r3, #93	; 0x5d
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
}
 8005e94:	e236      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d12b      	bne.n	8005f04 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2308      	movs	r3, #8
 8005ebc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed8:	f043 0302 	orr.w	r3, r3, #2
 8005edc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f004 fe12 	bl	800ab12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	440b      	add	r3, r1
 8005efc:	335d      	adds	r3, #93	; 0x5d
 8005efe:	2205      	movs	r2, #5
 8005f00:	701a      	strb	r2, [r3, #0]
}
 8005f02:	e1ff      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d155      	bne.n	8005fc6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	440b      	add	r3, r1
 8005f28:	3358      	adds	r3, #88	; 0x58
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	440b      	add	r3, r1
 8005f3c:	335d      	adds	r3, #93	; 0x5d
 8005f3e:	2203      	movs	r2, #3
 8005f40:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	440b      	add	r3, r1
 8005f50:	333d      	adds	r3, #61	; 0x3d
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d114      	bne.n	8005f82 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	333c      	adds	r3, #60	; 0x3c
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	440b      	add	r3, r1
 8005f7c:	333d      	adds	r3, #61	; 0x3d
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9c:	f043 0302 	orr.w	r3, r3, #2
 8005fa0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f004 fdb0 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	6093      	str	r3, [r2, #8]
}
 8005fc4:	e19e      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd8:	2b80      	cmp	r3, #128	; 0x80
 8005fda:	d12b      	bne.n	8006034 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff6:	f043 0302 	orr.w	r3, r3, #2
 8005ffa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	4611      	mov	r1, r2
 8006006:	4618      	mov	r0, r3
 8006008:	f004 fd83 	bl	800ab12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	335d      	adds	r3, #93	; 0x5d
 800601c:	2206      	movs	r2, #6
 800601e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	461a      	mov	r2, r3
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	6093      	str	r3, [r2, #8]
}
 8006032:	e167      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604a:	d135      	bne.n	80060b8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f043 0302 	orr.w	r3, r3, #2
 800606a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	4611      	mov	r1, r2
 8006076:	4618      	mov	r0, r3
 8006078:	f004 fd4b 	bl	800ab12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	461a      	mov	r2, r3
 800608a:	2310      	movs	r3, #16
 800608c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	461a      	mov	r2, r3
 800609c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	440b      	add	r3, r1
 80060b0:	335d      	adds	r3, #93	; 0x5d
 80060b2:	2208      	movs	r2, #8
 80060b4:	701a      	strb	r2, [r3, #0]
}
 80060b6:	e125      	b.n	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	f040 811a 	bne.w	8006304 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ea:	f023 0302 	bic.w	r3, r3, #2
 80060ee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	440b      	add	r3, r1
 80060fe:	335d      	adds	r3, #93	; 0x5d
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d137      	bne.n	8006176 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	440b      	add	r3, r1
 8006114:	335c      	adds	r3, #92	; 0x5c
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	440b      	add	r3, r1
 8006128:	333f      	adds	r3, #63	; 0x3f
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d00b      	beq.n	8006148 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	440b      	add	r3, r1
 800613e:	333f      	adds	r3, #63	; 0x3f
 8006140:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006142:	2b03      	cmp	r3, #3
 8006144:	f040 80c5 	bne.w	80062d2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	440b      	add	r3, r1
 8006156:	3351      	adds	r3, #81	; 0x51
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f083 0301 	eor.w	r3, r3, #1
 800615e:	b2d8      	uxtb	r0, r3
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	440b      	add	r3, r1
 800616e:	3351      	adds	r3, #81	; 0x51
 8006170:	4602      	mov	r2, r0
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e0ad      	b.n	80062d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	440b      	add	r3, r1
 8006184:	335d      	adds	r3, #93	; 0x5d
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b03      	cmp	r3, #3
 800618a:	d10a      	bne.n	80061a2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	440b      	add	r3, r1
 800619a:	335c      	adds	r3, #92	; 0x5c
 800619c:	2202      	movs	r2, #2
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e097      	b.n	80062d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	440b      	add	r3, r1
 80061b0:	335d      	adds	r3, #93	; 0x5d
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d10a      	bne.n	80061ce <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	440b      	add	r3, r1
 80061c6:	335c      	adds	r3, #92	; 0x5c
 80061c8:	2202      	movs	r2, #2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e081      	b.n	80062d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	440b      	add	r3, r1
 80061dc:	335d      	adds	r3, #93	; 0x5d
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	d10a      	bne.n	80061fa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	440b      	add	r3, r1
 80061f2:	335c      	adds	r3, #92	; 0x5c
 80061f4:	2205      	movs	r2, #5
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	e06b      	b.n	80062d2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	440b      	add	r3, r1
 8006208:	335d      	adds	r3, #93	; 0x5d
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d00a      	beq.n	8006226 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	440b      	add	r3, r1
 800621e:	335d      	adds	r3, #93	; 0x5d
 8006220:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006222:	2b08      	cmp	r3, #8
 8006224:	d155      	bne.n	80062d2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	440b      	add	r3, r1
 8006234:	3358      	adds	r3, #88	; 0x58
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	1c59      	adds	r1, r3, #1
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4403      	add	r3, r0
 8006248:	3358      	adds	r3, #88	; 0x58
 800624a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	440b      	add	r3, r1
 800625a:	3358      	adds	r3, #88	; 0x58
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b03      	cmp	r3, #3
 8006260:	d914      	bls.n	800628c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	440b      	add	r3, r1
 8006270:	3358      	adds	r3, #88	; 0x58
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	440b      	add	r3, r1
 8006284:	335c      	adds	r3, #92	; 0x5c
 8006286:	2204      	movs	r2, #4
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	e009      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	440b      	add	r3, r1
 800629a:	335c      	adds	r3, #92	; 0x5c
 800629c:	2202      	movs	r2, #2
 800629e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062cc:	461a      	mov	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	461a      	mov	r2, r3
 80062e0:	2302      	movs	r3, #2
 80062e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	b2d8      	uxtb	r0, r3
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	440b      	add	r3, r1
 80062f6:	335c      	adds	r3, #92	; 0x5c
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	4601      	mov	r1, r0
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f005 fee2 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006304:	bf00      	nop
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	0c5b      	lsrs	r3, r3, #17
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	091b      	lsrs	r3, r3, #4
 800633c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006340:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b02      	cmp	r3, #2
 8006346:	d003      	beq.n	8006350 <HCD_RXQLVL_IRQHandler+0x44>
 8006348:	2b05      	cmp	r3, #5
 800634a:	f000 8082 	beq.w	8006452 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800634e:	e083      	b.n	8006458 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d07f      	beq.n	8006456 <HCD_RXQLVL_IRQHandler+0x14a>
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	440b      	add	r3, r1
 8006364:	3344      	adds	r3, #68	; 0x44
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d074      	beq.n	8006456 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	440b      	add	r3, r1
 800637e:	3344      	adds	r3, #68	; 0x44
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	b292      	uxth	r2, r2
 8006386:	4619      	mov	r1, r3
 8006388:	f004 fb2e 	bl	800a9e8 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	440b      	add	r3, r1
 800639a:	3344      	adds	r3, #68	; 0x44
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	18d1      	adds	r1, r2, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4403      	add	r3, r0
 80063b0:	3344      	adds	r3, #68	; 0x44
 80063b2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	440b      	add	r3, r1
 80063c2:	334c      	adds	r3, #76	; 0x4c
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	18d1      	adds	r1, r2, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	4403      	add	r3, r0
 80063d8:	334c      	adds	r3, #76	; 0x4c
 80063da:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <HCD_RXQLVL_IRQHandler+0x154>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d031      	beq.n	8006456 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006408:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006410:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	440b      	add	r3, r1
 8006432:	3350      	adds	r3, #80	; 0x50
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f083 0301 	eor.w	r3, r3, #1
 800643a:	b2d8      	uxtb	r0, r3
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	440b      	add	r3, r1
 800644a:	3350      	adds	r3, #80	; 0x50
 800644c:	4602      	mov	r2, r0
 800644e:	701a      	strb	r2, [r3, #0]
      break;
 8006450:	e001      	b.n	8006456 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006456:	bf00      	nop
  }
}
 8006458:	bf00      	nop
 800645a:	3728      	adds	r7, #40	; 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	1ff80000 	.word	0x1ff80000

08006464 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006490:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b02      	cmp	r3, #2
 800649a:	d10b      	bne.n	80064b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d102      	bne.n	80064ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f005 fdf2 	bl	800c090 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f043 0302 	orr.w	r3, r3, #2
 80064b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d132      	bne.n	8006524 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f043 0308 	orr.w	r3, r3, #8
 80064c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d126      	bne.n	800651e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d113      	bne.n	8006500 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80064de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064e2:	d106      	bne.n	80064f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2102      	movs	r1, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f004 fac6 	bl	800aa7c <USB_InitFSLSPClkSel>
 80064f0:	e011      	b.n	8006516 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f004 fabf 	bl	800aa7c <USB_InitFSLSPClkSel>
 80064fe:	e00a      	b.n	8006516 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d106      	bne.n	8006516 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800650e:	461a      	mov	r2, r3
 8006510:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006514:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f005 fde8 	bl	800c0ec <HAL_HCD_PortEnabled_Callback>
 800651c:	e002      	b.n	8006524 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f005 fdf2 	bl	800c108 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b20      	cmp	r3, #32
 800652c:	d103      	bne.n	8006536 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f043 0320 	orr.w	r3, r3, #32
 8006534:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6013      	str	r3, [r2, #0]
}
 8006542:	bf00      	nop
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e11f      	b.n	800679e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fa fa94 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2224      	movs	r2, #36	; 0x24
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800659e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065b0:	f002 f882 	bl	80086b8 <HAL_RCC_GetPCLK1Freq>
 80065b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4a7b      	ldr	r2, [pc, #492]	; (80067a8 <HAL_I2C_Init+0x25c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d807      	bhi.n	80065d0 <HAL_I2C_Init+0x84>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4a7a      	ldr	r2, [pc, #488]	; (80067ac <HAL_I2C_Init+0x260>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	bf94      	ite	ls
 80065c8:	2301      	movls	r3, #1
 80065ca:	2300      	movhi	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e006      	b.n	80065de <HAL_I2C_Init+0x92>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a77      	ldr	r2, [pc, #476]	; (80067b0 <HAL_I2C_Init+0x264>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	bf94      	ite	ls
 80065d8:	2301      	movls	r3, #1
 80065da:	2300      	movhi	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e0db      	b.n	800679e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a72      	ldr	r2, [pc, #456]	; (80067b4 <HAL_I2C_Init+0x268>)
 80065ea:	fba2 2303 	umull	r2, r3, r2, r3
 80065ee:	0c9b      	lsrs	r3, r3, #18
 80065f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4a64      	ldr	r2, [pc, #400]	; (80067a8 <HAL_I2C_Init+0x25c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d802      	bhi.n	8006620 <HAL_I2C_Init+0xd4>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	3301      	adds	r3, #1
 800661e:	e009      	b.n	8006634 <HAL_I2C_Init+0xe8>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	4a63      	ldr	r2, [pc, #396]	; (80067b8 <HAL_I2C_Init+0x26c>)
 800662c:	fba2 2303 	umull	r2, r3, r2, r3
 8006630:	099b      	lsrs	r3, r3, #6
 8006632:	3301      	adds	r3, #1
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	430b      	orrs	r3, r1
 800663a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	4956      	ldr	r1, [pc, #344]	; (80067a8 <HAL_I2C_Init+0x25c>)
 8006650:	428b      	cmp	r3, r1
 8006652:	d80d      	bhi.n	8006670 <HAL_I2C_Init+0x124>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	1e59      	subs	r1, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006662:	3301      	adds	r3, #1
 8006664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006668:	2b04      	cmp	r3, #4
 800666a:	bf38      	it	cc
 800666c:	2304      	movcc	r3, #4
 800666e:	e04f      	b.n	8006710 <HAL_I2C_Init+0x1c4>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d111      	bne.n	800669c <HAL_I2C_Init+0x150>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	1e58      	subs	r0, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6859      	ldr	r1, [r3, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	440b      	add	r3, r1
 8006686:	fbb0 f3f3 	udiv	r3, r0, r3
 800668a:	3301      	adds	r3, #1
 800668c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf0c      	ite	eq
 8006694:	2301      	moveq	r3, #1
 8006696:	2300      	movne	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	e012      	b.n	80066c2 <HAL_I2C_Init+0x176>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1e58      	subs	r0, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6859      	ldr	r1, [r3, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	0099      	lsls	r1, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80066b2:	3301      	adds	r3, #1
 80066b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf0c      	ite	eq
 80066bc:	2301      	moveq	r3, #1
 80066be:	2300      	movne	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_I2C_Init+0x17e>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e022      	b.n	8006710 <HAL_I2C_Init+0x1c4>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10e      	bne.n	80066f0 <HAL_I2C_Init+0x1a4>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1e58      	subs	r0, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	440b      	add	r3, r1
 80066e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80066e4:	3301      	adds	r3, #1
 80066e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ee:	e00f      	b.n	8006710 <HAL_I2C_Init+0x1c4>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	1e58      	subs	r0, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6859      	ldr	r1, [r3, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	0099      	lsls	r1, r3, #2
 8006700:	440b      	add	r3, r1
 8006702:	fbb0 f3f3 	udiv	r3, r0, r3
 8006706:	3301      	adds	r3, #1
 8006708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	6809      	ldr	r1, [r1, #0]
 8006714:	4313      	orrs	r3, r2
 8006716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69da      	ldr	r2, [r3, #28]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800673e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6911      	ldr	r1, [r2, #16]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68d2      	ldr	r2, [r2, #12]
 800674a:	4311      	orrs	r1, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	430b      	orrs	r3, r1
 8006752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695a      	ldr	r2, [r3, #20]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	000186a0 	.word	0x000186a0
 80067ac:	001e847f 	.word	0x001e847f
 80067b0:	003d08ff 	.word	0x003d08ff
 80067b4:	431bde83 	.word	0x431bde83
 80067b8:	10624dd3 	.word	0x10624dd3

080067bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e021      	b.n	8006812 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2224      	movs	r2, #36	; 0x24
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fa f9c4 	bl	8000b74 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	817b      	strh	r3, [r7, #10]
 800682e:	460b      	mov	r3, r1
 8006830:	813b      	strh	r3, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006836:	f7fd fb4d 	bl	8003ed4 <HAL_GetTick>
 800683a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b20      	cmp	r3, #32
 8006846:	f040 80d9 	bne.w	80069fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	2319      	movs	r3, #25
 8006850:	2201      	movs	r2, #1
 8006852:	496d      	ldr	r1, [pc, #436]	; (8006a08 <HAL_I2C_Mem_Write+0x1ec>)
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fc8d 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006860:	2302      	movs	r3, #2
 8006862:	e0cc      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <HAL_I2C_Mem_Write+0x56>
 800686e:	2302      	movs	r3, #2
 8006870:	e0c5      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	d007      	beq.n	8006898 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2221      	movs	r2, #33	; 0x21
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2240      	movs	r2, #64	; 0x40
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a4d      	ldr	r2, [pc, #308]	; (8006a0c <HAL_I2C_Mem_Write+0x1f0>)
 80068d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068da:	88f8      	ldrh	r0, [r7, #6]
 80068dc:	893a      	ldrh	r2, [r7, #8]
 80068de:	8979      	ldrh	r1, [r7, #10]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	4603      	mov	r3, r0
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fac4 	bl	8006e78 <I2C_RequestMemoryWrite>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d052      	beq.n	800699c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e081      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fd0e 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00d      	beq.n	8006926 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	2b04      	cmp	r3, #4
 8006910:	d107      	bne.n	8006922 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e06b      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	781a      	ldrb	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006940:	3b01      	subs	r3, #1
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b04      	cmp	r3, #4
 8006962:	d11b      	bne.n	800699c <HAL_I2C_Mem_Write+0x180>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	d017      	beq.n	800699c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	781a      	ldrb	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1aa      	bne.n	80068fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fcfa 	bl	80073a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00d      	beq.n	80069d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d107      	bne.n	80069cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e016      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	00100002 	.word	0x00100002
 8006a0c:	ffff0000 	.word	0xffff0000

08006a10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08c      	sub	sp, #48	; 0x30
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	817b      	strh	r3, [r7, #10]
 8006a22:	460b      	mov	r3, r1
 8006a24:	813b      	strh	r3, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a2a:	f7fd fa53 	bl	8003ed4 <HAL_GetTick>
 8006a2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	f040 8208 	bne.w	8006e4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2319      	movs	r3, #25
 8006a44:	2201      	movs	r2, #1
 8006a46:	497b      	ldr	r1, [pc, #492]	; (8006c34 <HAL_I2C_Mem_Read+0x224>)
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fb93 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
 8006a56:	e1fb      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_I2C_Mem_Read+0x56>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e1f4      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d007      	beq.n	8006a8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2222      	movs	r2, #34	; 0x22
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2240      	movs	r2, #64	; 0x40
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a5b      	ldr	r2, [pc, #364]	; (8006c38 <HAL_I2C_Mem_Read+0x228>)
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ace:	88f8      	ldrh	r0, [r7, #6]
 8006ad0:	893a      	ldrh	r2, [r7, #8]
 8006ad2:	8979      	ldrh	r1, [r7, #10]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	4603      	mov	r3, r0
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fa60 	bl	8006fa4 <I2C_RequestMemoryRead>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e1b0      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d113      	bne.n	8006b1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af6:	2300      	movs	r3, #0
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	623b      	str	r3, [r7, #32]
 8006b0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e184      	b.n	8006e28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d11b      	bne.n	8006b5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e164      	b.n	8006e28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d11b      	bne.n	8006b9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b86:	2300      	movs	r3, #0
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	e144      	b.n	8006e28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006bb4:	e138      	b.n	8006e28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	f200 80f1 	bhi.w	8006da2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d123      	bne.n	8006c10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fc29 	bl	8007424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e139      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c0e:	e10b      	b.n	8006e28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d14e      	bne.n	8006cb6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4906      	ldr	r1, [pc, #24]	; (8006c3c <HAL_I2C_Mem_Read+0x22c>)
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 faa6 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d008      	beq.n	8006c40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e10e      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
 8006c32:	bf00      	nop
 8006c34:	00100002 	.word	0x00100002
 8006c38:	ffff0000 	.word	0xffff0000
 8006c3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cb4:	e0b8      	b.n	8006e28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4966      	ldr	r1, [pc, #408]	; (8006e58 <HAL_I2C_Mem_Read+0x448>)
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fa57 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e0bf      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	2200      	movs	r2, #0
 8006d1a:	494f      	ldr	r1, [pc, #316]	; (8006e58 <HAL_I2C_Mem_Read+0x448>)
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fa29 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e091      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006da0:	e042      	b.n	8006e28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fb3c 	bl	8007424 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e04c      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d118      	bne.n	8006e28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f47f aec2 	bne.w	8006bb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e000      	b.n	8006e50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e4e:	2302      	movs	r3, #2
  }
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3728      	adds	r7, #40	; 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	00010004 	.word	0x00010004

08006e5c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6a:	b2db      	uxtb	r3, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	4608      	mov	r0, r1
 8006e82:	4611      	mov	r1, r2
 8006e84:	461a      	mov	r2, r3
 8006e86:	4603      	mov	r3, r0
 8006e88:	817b      	strh	r3, [r7, #10]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	813b      	strh	r3, [r7, #8]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f960 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00d      	beq.n	8006ed6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec8:	d103      	bne.n	8006ed2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e05f      	b.n	8006f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ed6:	897b      	ldrh	r3, [r7, #10]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	6a3a      	ldr	r2, [r7, #32]
 8006eea:	492d      	ldr	r1, [pc, #180]	; (8006fa0 <I2C_RequestMemoryWrite+0x128>)
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f998 	bl	8007222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e04c      	b.n	8006f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f14:	6a39      	ldr	r1, [r7, #32]
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 fa02 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00d      	beq.n	8006f3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d107      	bne.n	8006f3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e02b      	b.n	8006f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d105      	bne.n	8006f50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f44:	893b      	ldrh	r3, [r7, #8]
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	611a      	str	r2, [r3, #16]
 8006f4e:	e021      	b.n	8006f94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f50:	893b      	ldrh	r3, [r7, #8]
 8006f52:	0a1b      	lsrs	r3, r3, #8
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f60:	6a39      	ldr	r1, [r7, #32]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 f9dc 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00d      	beq.n	8006f8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d107      	bne.n	8006f86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e005      	b.n	8006f96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f8a:	893b      	ldrh	r3, [r7, #8]
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	00010002 	.word	0x00010002

08006fa4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	817b      	strh	r3, [r7, #10]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	813b      	strh	r3, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f8c2 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007004:	d103      	bne.n	800700e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e0aa      	b.n	8007168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007012:	897b      	ldrh	r3, [r7, #10]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	6a3a      	ldr	r2, [r7, #32]
 8007026:	4952      	ldr	r1, [pc, #328]	; (8007170 <I2C_RequestMemoryRead+0x1cc>)
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f8fa 	bl	8007222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e097      	b.n	8007168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007038:	2300      	movs	r3, #0
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800704e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007050:	6a39      	ldr	r1, [r7, #32]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f964 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00d      	beq.n	800707a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	2b04      	cmp	r3, #4
 8007064:	d107      	bne.n	8007076 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e076      	b.n	8007168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d105      	bne.n	800708c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007080:	893b      	ldrh	r3, [r7, #8]
 8007082:	b2da      	uxtb	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	611a      	str	r2, [r3, #16]
 800708a:	e021      	b.n	80070d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800708c:	893b      	ldrh	r3, [r7, #8]
 800708e:	0a1b      	lsrs	r3, r3, #8
 8007090:	b29b      	uxth	r3, r3
 8007092:	b2da      	uxtb	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800709a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709c:	6a39      	ldr	r1, [r7, #32]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f93e 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00d      	beq.n	80070c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d107      	bne.n	80070c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e050      	b.n	8007168 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070c6:	893b      	ldrh	r3, [r7, #8]
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d2:	6a39      	ldr	r1, [r7, #32]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f923 	bl	8007320 <I2C_WaitOnTXEFlagUntilTimeout>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00d      	beq.n	80070fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d107      	bne.n	80070f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e035      	b.n	8007168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800710a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2200      	movs	r2, #0
 8007114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f82b 	bl	8007174 <I2C_WaitOnFlagUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00d      	beq.n	8007140 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007132:	d103      	bne.n	800713c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e013      	b.n	8007168 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007140:	897b      	ldrh	r3, [r7, #10]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	6a3a      	ldr	r2, [r7, #32]
 8007154:	4906      	ldr	r1, [pc, #24]	; (8007170 <I2C_RequestMemoryRead+0x1cc>)
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f863 	bl	8007222 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	00010002 	.word	0x00010002

08007174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007184:	e025      	b.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d021      	beq.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718e:	f7fc fea1 	bl	8003ed4 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d302      	bcc.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d116      	bne.n	80071d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f043 0220 	orr.w	r2, r3, #32
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e023      	b.n	800721a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	0c1b      	lsrs	r3, r3, #16
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d10d      	bne.n	80071f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	43da      	mvns	r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4013      	ands	r3, r2
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bf0c      	ite	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	2300      	movne	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	461a      	mov	r2, r3
 80071f6:	e00c      	b.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	43da      	mvns	r2, r3
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4013      	ands	r3, r2
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	bf0c      	ite	eq
 800720a:	2301      	moveq	r3, #1
 800720c:	2300      	movne	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	429a      	cmp	r2, r3
 8007216:	d0b6      	beq.n	8007186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
 800722e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007230:	e051      	b.n	80072d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800723c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007240:	d123      	bne.n	800728a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007250:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800725a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f043 0204 	orr.w	r2, r3, #4
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e046      	b.n	8007318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d021      	beq.n	80072d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007292:	f7fc fe1f 	bl	8003ed4 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d302      	bcc.n	80072a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d116      	bne.n	80072d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f043 0220 	orr.w	r2, r3, #32
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e020      	b.n	8007318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10c      	bne.n	80072fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	43da      	mvns	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bf14      	ite	ne
 80072f2:	2301      	movne	r3, #1
 80072f4:	2300      	moveq	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	e00b      	b.n	8007312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	43da      	mvns	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4013      	ands	r3, r2
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf14      	ite	ne
 800730c:	2301      	movne	r3, #1
 800730e:	2300      	moveq	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d18d      	bne.n	8007232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800732c:	e02d      	b.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f8ce 	bl	80074d0 <I2C_IsAcknowledgeFailed>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e02d      	b.n	800739a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d021      	beq.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007346:	f7fc fdc5 	bl	8003ed4 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	d302      	bcc.n	800735c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d116      	bne.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f043 0220 	orr.w	r2, r3, #32
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e007      	b.n	800739a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007394:	2b80      	cmp	r3, #128	; 0x80
 8007396:	d1ca      	bne.n	800732e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073ae:	e02d      	b.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f88d 	bl	80074d0 <I2C_IsAcknowledgeFailed>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e02d      	b.n	800741c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d021      	beq.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c8:	f7fc fd84 	bl	8003ed4 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d116      	bne.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	f043 0220 	orr.w	r2, r3, #32
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e007      	b.n	800741c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b04      	cmp	r3, #4
 8007418:	d1ca      	bne.n	80073b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007430:	e042      	b.n	80074b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b10      	cmp	r3, #16
 800743e:	d119      	bne.n	8007474 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0210 	mvn.w	r2, #16
 8007448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e029      	b.n	80074c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007474:	f7fc fd2e 	bl	8003ed4 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	429a      	cmp	r2, r3
 8007482:	d302      	bcc.n	800748a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d116      	bne.n	80074b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a4:	f043 0220 	orr.w	r2, r3, #32
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e007      	b.n	80074c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d1b5      	bne.n	8007432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e6:	d11b      	bne.n	8007520 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	f043 0204 	orr.w	r2, r3, #4
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e000      	b.n	8007522 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b20      	cmp	r3, #32
 8007542:	d129      	bne.n	8007598 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2224      	movs	r2, #36	; 0x24
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0210 	bic.w	r2, r2, #16
 800756a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	e000      	b.n	800759a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007598:	2302      	movs	r3, #2
  }
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d12a      	bne.n	8007616 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2224      	movs	r2, #36	; 0x24
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80075e0:	89fb      	ldrh	r3, [r7, #14]
 80075e2:	f023 030f 	bic.w	r3, r3, #15
 80075e6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	89fb      	ldrh	r3, [r7, #14]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	89fa      	ldrh	r2, [r7, #14]
 80075f8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0201 	orr.w	r2, r2, #1
 8007608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	e000      	b.n	8007618 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007616:	2302      	movs	r3, #2
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e0bf      	b.n	80077b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7f9 fb6c 	bl	8000d28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007666:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6999      	ldr	r1, [r3, #24]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800767c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6899      	ldr	r1, [r3, #8]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	4b4a      	ldr	r3, [pc, #296]	; (80077c0 <HAL_LTDC_Init+0x19c>)
 8007698:	400b      	ands	r3, r1
 800769a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6899      	ldr	r1, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68d9      	ldr	r1, [r3, #12]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <HAL_LTDC_Init+0x19c>)
 80076c6:	400b      	ands	r3, r1
 80076c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68d9      	ldr	r1, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1a      	ldr	r2, [r3, #32]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6919      	ldr	r1, [r3, #16]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	4b33      	ldr	r3, [pc, #204]	; (80077c0 <HAL_LTDC_Init+0x19c>)
 80076f4:	400b      	ands	r3, r1
 80076f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6919      	ldr	r1, [r3, #16]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6959      	ldr	r1, [r3, #20]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	4b27      	ldr	r3, [pc, #156]	; (80077c0 <HAL_LTDC_Init+0x19c>)
 8007722:	400b      	ands	r3, r1
 8007724:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	041b      	lsls	r3, r3, #16
 800772c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6959      	ldr	r1, [r3, #20]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007754:	041b      	lsls	r3, r3, #16
 8007756:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007766:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0206 	orr.w	r2, r2, #6
 8007792:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	f000f800 	.word	0xf000f800

080077c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d023      	beq.n	800782e <HAL_LTDC_IRQHandler+0x6a>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01e      	beq.n	800782e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0204 	bic.w	r2, r2, #4
 80077fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2204      	movs	r2, #4
 8007806:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800780e:	f043 0201 	orr.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2204      	movs	r2, #4
 800781c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f86f 	bl	800790c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d023      	beq.n	8007880 <HAL_LTDC_IRQHandler+0xbc>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01e      	beq.n	8007880 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0202 	bic.w	r2, r2, #2
 8007850:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2202      	movs	r2, #2
 8007858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007860:	f043 0202 	orr.w	r2, r3, #2
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2204      	movs	r2, #4
 800786e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f846 	bl	800790c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01b      	beq.n	80078c2 <HAL_LTDC_IRQHandler+0xfe>
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d016      	beq.n	80078c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0201 	bic.w	r2, r2, #1
 80078a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2201      	movs	r2, #1
 80078aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f82f 	bl	8007920 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01b      	beq.n	8007904 <HAL_LTDC_IRQHandler+0x140>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f003 0308 	and.w	r3, r3, #8
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d016      	beq.n	8007904 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0208 	bic.w	r2, r2, #8
 80078e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2208      	movs	r2, #8
 80078ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f818 	bl	8007934 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007948:	b5b0      	push	{r4, r5, r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <HAL_LTDC_ConfigLayer+0x1a>
 800795e:	2302      	movs	r3, #2
 8007960:	e02c      	b.n	80079bc <HAL_LTDC_ConfigLayer+0x74>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2134      	movs	r1, #52	; 0x34
 8007978:	fb01 f303 	mul.w	r3, r1, r3
 800797c:	4413      	add	r3, r2
 800797e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	4614      	mov	r4, r2
 8007986:	461d      	mov	r5, r3
 8007988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800798a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800798c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800798e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f8b9 	bl	8007b14 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bdb0      	pop	{r4, r5, r7, pc}

080079c4 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_LTDC_ConfigColorKeying+0x1a>
 80079da:	2302      	movs	r3, #2
 80079dc:	e030      	b.n	8007a40 <HAL_LTDC_ConfigColorKeying+0x7c>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	01db      	lsls	r3, r3, #7
 80079f8:	4413      	add	r3, r2
 80079fa:	3384      	adds	r3, #132	; 0x84
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	4611      	mov	r1, r2
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	01d2      	lsls	r2, r2, #7
 8007a08:	440a      	add	r2, r1
 8007a0a:	3284      	adds	r2, #132	; 0x84
 8007a0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a10:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	01db      	lsls	r3, r3, #7
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3384      	adds	r3, #132	; 0x84
 8007a20:	461a      	mov	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_LTDC_EnableColorKeying+0x18>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e026      	b.n	8007ab2 <HAL_LTDC_EnableColorKeying+0x66>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	01db      	lsls	r3, r3, #7
 8007a7e:	4413      	add	r3, r2
 8007a80:	3384      	adds	r3, #132	; 0x84
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6812      	ldr	r2, [r2, #0]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	01d2      	lsls	r2, r2, #7
 8007a8e:	440a      	add	r2, r1
 8007a90:	3284      	adds	r2, #132	; 0x84
 8007a92:	f043 0302 	orr.w	r3, r3, #2
 8007a96:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d101      	bne.n	8007ad6 <HAL_LTDC_EnableDither+0x16>
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e016      	b.n	8007b04 <HAL_LTDC_EnableDither+0x44>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <HAL_LTDC_EnableDither+0x50>)
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <HAL_LTDC_EnableDither+0x50>)
 8007aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	40016800 	.word	0x40016800

08007b14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b089      	sub	sp, #36	; 0x24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b30:	4413      	add	r3, r2
 8007b32:	041b      	lsls	r3, r3, #16
 8007b34:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	01db      	lsls	r3, r3, #7
 8007b40:	4413      	add	r3, r2
 8007b42:	3384      	adds	r3, #132	; 0x84
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	01d2      	lsls	r2, r2, #7
 8007b50:	440a      	add	r2, r1
 8007b52:	3284      	adds	r2, #132	; 0x84
 8007b54:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007b58:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	0c1b      	lsrs	r3, r3, #16
 8007b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b6a:	4413      	add	r3, r2
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4619      	mov	r1, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	01db      	lsls	r3, r3, #7
 8007b78:	440b      	add	r3, r1
 8007b7a:	3384      	adds	r3, #132	; 0x84
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b92:	4413      	add	r3, r2
 8007b94:	041b      	lsls	r3, r3, #16
 8007b96:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	01db      	lsls	r3, r3, #7
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3384      	adds	r3, #132	; 0x84
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	6812      	ldr	r2, [r2, #0]
 8007bac:	4611      	mov	r1, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	01d2      	lsls	r2, r2, #7
 8007bb2:	440a      	add	r2, r1
 8007bb4:	3284      	adds	r2, #132	; 0x84
 8007bb6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007bba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bca:	4413      	add	r3, r2
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	01db      	lsls	r3, r3, #7
 8007bd8:	440b      	add	r3, r1
 8007bda:	3384      	adds	r3, #132	; 0x84
 8007bdc:	4619      	mov	r1, r3
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	01db      	lsls	r3, r3, #7
 8007bee:	4413      	add	r3, r2
 8007bf0:	3384      	adds	r3, #132	; 0x84
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	01d2      	lsls	r2, r2, #7
 8007bfe:	440a      	add	r2, r1
 8007c00:	3284      	adds	r2, #132	; 0x84
 8007c02:	f023 0307 	bic.w	r3, r3, #7
 8007c06:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	01db      	lsls	r3, r3, #7
 8007c12:	4413      	add	r3, r2
 8007c14:	3384      	adds	r3, #132	; 0x84
 8007c16:	461a      	mov	r2, r3
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	061b      	lsls	r3, r3, #24
 8007c38:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	01db      	lsls	r3, r3, #7
 8007c44:	4413      	add	r3, r2
 8007c46:	3384      	adds	r3, #132	; 0x84
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	01db      	lsls	r3, r3, #7
 8007c54:	4413      	add	r3, r2
 8007c56:	3384      	adds	r3, #132	; 0x84
 8007c58:	461a      	mov	r2, r3
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c64:	461a      	mov	r2, r3
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4619      	mov	r1, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	01db      	lsls	r3, r3, #7
 8007c78:	440b      	add	r3, r1
 8007c7a:	3384      	adds	r3, #132	; 0x84
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	01db      	lsls	r3, r3, #7
 8007c8e:	4413      	add	r3, r2
 8007c90:	3384      	adds	r3, #132	; 0x84
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	4611      	mov	r1, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	01d2      	lsls	r2, r2, #7
 8007c9e:	440a      	add	r2, r1
 8007ca0:	3284      	adds	r2, #132	; 0x84
 8007ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ca6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	01db      	lsls	r3, r3, #7
 8007cb2:	4413      	add	r3, r2
 8007cb4:	3384      	adds	r3, #132	; 0x84
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	01db      	lsls	r3, r3, #7
 8007cc8:	4413      	add	r3, r2
 8007cca:	3384      	adds	r3, #132	; 0x84
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	6812      	ldr	r2, [r2, #0]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	01d2      	lsls	r2, r2, #7
 8007cd8:	440a      	add	r2, r1
 8007cda:	3284      	adds	r2, #132	; 0x84
 8007cdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007ce0:	f023 0307 	bic.w	r3, r3, #7
 8007ce4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	68f9      	ldr	r1, [r7, #12]
 8007cf0:	6809      	ldr	r1, [r1, #0]
 8007cf2:	4608      	mov	r0, r1
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	01c9      	lsls	r1, r1, #7
 8007cf8:	4401      	add	r1, r0
 8007cfa:	3184      	adds	r1, #132	; 0x84
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	01db      	lsls	r3, r3, #7
 8007d0a:	4413      	add	r3, r2
 8007d0c:	3384      	adds	r3, #132	; 0x84
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	01db      	lsls	r3, r3, #7
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3384      	adds	r3, #132	; 0x84
 8007d1e:	461a      	mov	r2, r3
 8007d20:	2300      	movs	r3, #0
 8007d22:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	01db      	lsls	r3, r3, #7
 8007d2e:	4413      	add	r3, r2
 8007d30:	3384      	adds	r3, #132	; 0x84
 8007d32:	461a      	mov	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007d42:	2304      	movs	r3, #4
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	e01b      	b.n	8007d80 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d102      	bne.n	8007d56 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007d50:	2303      	movs	r3, #3
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	e014      	b.n	8007d80 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d00b      	beq.n	8007d76 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d007      	beq.n	8007d76 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d003      	beq.n	8007d76 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007d72:	2b07      	cmp	r3, #7
 8007d74:	d102      	bne.n	8007d7c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007d76:	2302      	movs	r3, #2
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	e001      	b.n	8007d80 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	01db      	lsls	r3, r3, #7
 8007d8a:	4413      	add	r3, r2
 8007d8c:	3384      	adds	r3, #132	; 0x84
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	4611      	mov	r1, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	01d2      	lsls	r2, r2, #7
 8007d9a:	440a      	add	r2, r1
 8007d9c:	3284      	adds	r2, #132	; 0x84
 8007d9e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007da2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
 8007dae:	041a      	lsls	r2, r3, #16
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6859      	ldr	r1, [r3, #4]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	1acb      	subs	r3, r1, r3
 8007dba:	69f9      	ldr	r1, [r7, #28]
 8007dbc:	fb01 f303 	mul.w	r3, r1, r3
 8007dc0:	3303      	adds	r3, #3
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	6809      	ldr	r1, [r1, #0]
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	01c9      	lsls	r1, r1, #7
 8007dcc:	4401      	add	r1, r0
 8007dce:	3184      	adds	r1, #132	; 0x84
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	01db      	lsls	r3, r3, #7
 8007dde:	4413      	add	r3, r2
 8007de0:	3384      	adds	r3, #132	; 0x84
 8007de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	6812      	ldr	r2, [r2, #0]
 8007de8:	4611      	mov	r1, r2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	01d2      	lsls	r2, r2, #7
 8007dee:	440a      	add	r2, r1
 8007df0:	3284      	adds	r2, #132	; 0x84
 8007df2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	01db      	lsls	r3, r3, #7
 8007e06:	4413      	add	r3, r2
 8007e08:	3384      	adds	r3, #132	; 0x84
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	01db      	lsls	r3, r3, #7
 8007e1c:	4413      	add	r3, r2
 8007e1e:	3384      	adds	r3, #132	; 0x84
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	6812      	ldr	r2, [r2, #0]
 8007e26:	4611      	mov	r1, r2
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	01d2      	lsls	r2, r2, #7
 8007e2c:	440a      	add	r2, r1
 8007e2e:	3284      	adds	r2, #132	; 0x84
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	6013      	str	r3, [r2, #0]
}
 8007e36:	bf00      	nop
 8007e38:	3724      	adds	r7, #36	; 0x24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e25b      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d075      	beq.n	8007f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e62:	4ba3      	ldr	r3, [pc, #652]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 030c 	and.w	r3, r3, #12
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d00c      	beq.n	8007e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e6e:	4ba0      	ldr	r3, [pc, #640]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e76:	2b08      	cmp	r3, #8
 8007e78:	d112      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e7a:	4b9d      	ldr	r3, [pc, #628]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e86:	d10b      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e88:	4b99      	ldr	r3, [pc, #612]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d05b      	beq.n	8007f4c <HAL_RCC_OscConfig+0x108>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d157      	bne.n	8007f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e236      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea8:	d106      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x74>
 8007eaa:	4b91      	ldr	r3, [pc, #580]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a90      	ldr	r2, [pc, #576]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	e01d      	b.n	8007ef4 <HAL_RCC_OscConfig+0xb0>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ec0:	d10c      	bne.n	8007edc <HAL_RCC_OscConfig+0x98>
 8007ec2:	4b8b      	ldr	r3, [pc, #556]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a8a      	ldr	r2, [pc, #552]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	4b88      	ldr	r3, [pc, #544]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a87      	ldr	r2, [pc, #540]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	e00b      	b.n	8007ef4 <HAL_RCC_OscConfig+0xb0>
 8007edc:	4b84      	ldr	r3, [pc, #528]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a83      	ldr	r2, [pc, #524]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	4b81      	ldr	r3, [pc, #516]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a80      	ldr	r2, [pc, #512]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d013      	beq.n	8007f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007efc:	f7fb ffea 	bl	8003ed4 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f04:	f7fb ffe6 	bl	8003ed4 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b64      	cmp	r3, #100	; 0x64
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e1fb      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f16:	4b76      	ldr	r3, [pc, #472]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0f0      	beq.n	8007f04 <HAL_RCC_OscConfig+0xc0>
 8007f22:	e014      	b.n	8007f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f24:	f7fb ffd6 	bl	8003ed4 <HAL_GetTick>
 8007f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f2c:	f7fb ffd2 	bl	8003ed4 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b64      	cmp	r3, #100	; 0x64
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e1e7      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f3e:	4b6c      	ldr	r3, [pc, #432]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f0      	bne.n	8007f2c <HAL_RCC_OscConfig+0xe8>
 8007f4a:	e000      	b.n	8007f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d063      	beq.n	8008022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f5a:	4b65      	ldr	r3, [pc, #404]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 030c 	and.w	r3, r3, #12
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00b      	beq.n	8007f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f66:	4b62      	ldr	r3, [pc, #392]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d11c      	bne.n	8007fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f72:	4b5f      	ldr	r3, [pc, #380]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d116      	bne.n	8007fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f7e:	4b5c      	ldr	r3, [pc, #368]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_RCC_OscConfig+0x152>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d001      	beq.n	8007f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e1bb      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f96:	4b56      	ldr	r3, [pc, #344]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4952      	ldr	r1, [pc, #328]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007faa:	e03a      	b.n	8008022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d020      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fb4:	4b4f      	ldr	r3, [pc, #316]	; (80080f4 <HAL_RCC_OscConfig+0x2b0>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fba:	f7fb ff8b 	bl	8003ed4 <HAL_GetTick>
 8007fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fc2:	f7fb ff87 	bl	8003ed4 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e19c      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd4:	4b46      	ldr	r3, [pc, #280]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0f0      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe0:	4b43      	ldr	r3, [pc, #268]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	4940      	ldr	r1, [pc, #256]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	600b      	str	r3, [r1, #0]
 8007ff4:	e015      	b.n	8008022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ff6:	4b3f      	ldr	r3, [pc, #252]	; (80080f4 <HAL_RCC_OscConfig+0x2b0>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffc:	f7fb ff6a 	bl	8003ed4 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008004:	f7fb ff66 	bl	8003ed4 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e17b      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008016:	4b36      	ldr	r3, [pc, #216]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d030      	beq.n	8008090 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d016      	beq.n	8008064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008036:	4b30      	ldr	r3, [pc, #192]	; (80080f8 <HAL_RCC_OscConfig+0x2b4>)
 8008038:	2201      	movs	r2, #1
 800803a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800803c:	f7fb ff4a 	bl	8003ed4 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008044:	f7fb ff46 	bl	8003ed4 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e15b      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008056:	4b26      	ldr	r3, [pc, #152]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8008058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0f0      	beq.n	8008044 <HAL_RCC_OscConfig+0x200>
 8008062:	e015      	b.n	8008090 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008064:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <HAL_RCC_OscConfig+0x2b4>)
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800806a:	f7fb ff33 	bl	8003ed4 <HAL_GetTick>
 800806e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008070:	e008      	b.n	8008084 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008072:	f7fb ff2f 	bl	8003ed4 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d901      	bls.n	8008084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e144      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008084:	4b1a      	ldr	r3, [pc, #104]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 8008086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f0      	bne.n	8008072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80a0 	beq.w	80081de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800809e:	2300      	movs	r3, #0
 80080a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080a2:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10f      	bne.n	80080ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080ae:	2300      	movs	r3, #0
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	4a0e      	ldr	r2, [pc, #56]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 80080b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080bc:	6413      	str	r3, [r2, #64]	; 0x40
 80080be:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <HAL_RCC_OscConfig+0x2ac>)
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c6:	60bb      	str	r3, [r7, #8]
 80080c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080ca:	2301      	movs	r3, #1
 80080cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <HAL_RCC_OscConfig+0x2b8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d121      	bne.n	800811e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080da:	4b08      	ldr	r3, [pc, #32]	; (80080fc <HAL_RCC_OscConfig+0x2b8>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a07      	ldr	r2, [pc, #28]	; (80080fc <HAL_RCC_OscConfig+0x2b8>)
 80080e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080e6:	f7fb fef5 	bl	8003ed4 <HAL_GetTick>
 80080ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080ec:	e011      	b.n	8008112 <HAL_RCC_OscConfig+0x2ce>
 80080ee:	bf00      	nop
 80080f0:	40023800 	.word	0x40023800
 80080f4:	42470000 	.word	0x42470000
 80080f8:	42470e80 	.word	0x42470e80
 80080fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008100:	f7fb fee8 	bl	8003ed4 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e0fd      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008112:	4b81      	ldr	r3, [pc, #516]	; (8008318 <HAL_RCC_OscConfig+0x4d4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0f0      	beq.n	8008100 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d106      	bne.n	8008134 <HAL_RCC_OscConfig+0x2f0>
 8008126:	4b7d      	ldr	r3, [pc, #500]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	4a7c      	ldr	r2, [pc, #496]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	6713      	str	r3, [r2, #112]	; 0x70
 8008132:	e01c      	b.n	800816e <HAL_RCC_OscConfig+0x32a>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b05      	cmp	r3, #5
 800813a:	d10c      	bne.n	8008156 <HAL_RCC_OscConfig+0x312>
 800813c:	4b77      	ldr	r3, [pc, #476]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	4a76      	ldr	r2, [pc, #472]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 8008142:	f043 0304 	orr.w	r3, r3, #4
 8008146:	6713      	str	r3, [r2, #112]	; 0x70
 8008148:	4b74      	ldr	r3, [pc, #464]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 800814a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814c:	4a73      	ldr	r2, [pc, #460]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	6713      	str	r3, [r2, #112]	; 0x70
 8008154:	e00b      	b.n	800816e <HAL_RCC_OscConfig+0x32a>
 8008156:	4b71      	ldr	r3, [pc, #452]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	4a70      	ldr	r2, [pc, #448]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 800815c:	f023 0301 	bic.w	r3, r3, #1
 8008160:	6713      	str	r3, [r2, #112]	; 0x70
 8008162:	4b6e      	ldr	r3, [pc, #440]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 8008164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008166:	4a6d      	ldr	r2, [pc, #436]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 8008168:	f023 0304 	bic.w	r3, r3, #4
 800816c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d015      	beq.n	80081a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008176:	f7fb fead 	bl	8003ed4 <HAL_GetTick>
 800817a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800817c:	e00a      	b.n	8008194 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800817e:	f7fb fea9 	bl	8003ed4 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	f241 3288 	movw	r2, #5000	; 0x1388
 800818c:	4293      	cmp	r3, r2
 800818e:	d901      	bls.n	8008194 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e0bc      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008194:	4b61      	ldr	r3, [pc, #388]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 8008196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0ee      	beq.n	800817e <HAL_RCC_OscConfig+0x33a>
 80081a0:	e014      	b.n	80081cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081a2:	f7fb fe97 	bl	8003ed4 <HAL_GetTick>
 80081a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081a8:	e00a      	b.n	80081c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081aa:	f7fb fe93 	bl	8003ed4 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e0a6      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081c0:	4b56      	ldr	r3, [pc, #344]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 80081c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1ee      	bne.n	80081aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d105      	bne.n	80081de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081d2:	4b52      	ldr	r3, [pc, #328]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	4a51      	ldr	r2, [pc, #324]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 80081d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 8092 	beq.w	800830c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081e8:	4b4c      	ldr	r3, [pc, #304]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 030c 	and.w	r3, r3, #12
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d05c      	beq.n	80082ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d141      	bne.n	8008280 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081fc:	4b48      	ldr	r3, [pc, #288]	; (8008320 <HAL_RCC_OscConfig+0x4dc>)
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008202:	f7fb fe67 	bl	8003ed4 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800820a:	f7fb fe63 	bl	8003ed4 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e078      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800821c:	4b3f      	ldr	r3, [pc, #252]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f0      	bne.n	800820a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	019b      	lsls	r3, r3, #6
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	3b01      	subs	r3, #1
 8008242:	041b      	lsls	r3, r3, #16
 8008244:	431a      	orrs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	061b      	lsls	r3, r3, #24
 800824c:	4933      	ldr	r1, [pc, #204]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 800824e:	4313      	orrs	r3, r2
 8008250:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008252:	4b33      	ldr	r3, [pc, #204]	; (8008320 <HAL_RCC_OscConfig+0x4dc>)
 8008254:	2201      	movs	r2, #1
 8008256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008258:	f7fb fe3c 	bl	8003ed4 <HAL_GetTick>
 800825c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008260:	f7fb fe38 	bl	8003ed4 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e04d      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008272:	4b2a      	ldr	r3, [pc, #168]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0f0      	beq.n	8008260 <HAL_RCC_OscConfig+0x41c>
 800827e:	e045      	b.n	800830c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008280:	4b27      	ldr	r3, [pc, #156]	; (8008320 <HAL_RCC_OscConfig+0x4dc>)
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008286:	f7fb fe25 	bl	8003ed4 <HAL_GetTick>
 800828a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800828e:	f7fb fe21 	bl	8003ed4 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e036      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a0:	4b1e      	ldr	r3, [pc, #120]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f0      	bne.n	800828e <HAL_RCC_OscConfig+0x44a>
 80082ac:	e02e      	b.n	800830c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d101      	bne.n	80082ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e029      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082ba:	4b18      	ldr	r3, [pc, #96]	; (800831c <HAL_RCC_OscConfig+0x4d8>)
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d11c      	bne.n	8008308 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082d8:	429a      	cmp	r2, r3
 80082da:	d115      	bne.n	8008308 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082e2:	4013      	ands	r3, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d10d      	bne.n	8008308 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d106      	bne.n	8008308 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008304:	429a      	cmp	r2, r3
 8008306:	d001      	beq.n	800830c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40007000 	.word	0x40007000
 800831c:	40023800 	.word	0x40023800
 8008320:	42470060 	.word	0x42470060

08008324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e0cc      	b.n	80084d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008338:	4b68      	ldr	r3, [pc, #416]	; (80084dc <HAL_RCC_ClockConfig+0x1b8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	429a      	cmp	r2, r3
 8008344:	d90c      	bls.n	8008360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008346:	4b65      	ldr	r3, [pc, #404]	; (80084dc <HAL_RCC_ClockConfig+0x1b8>)
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800834e:	4b63      	ldr	r3, [pc, #396]	; (80084dc <HAL_RCC_ClockConfig+0x1b8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d001      	beq.n	8008360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e0b8      	b.n	80084d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	2b00      	cmp	r3, #0
 800836a:	d020      	beq.n	80083ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008378:	4b59      	ldr	r3, [pc, #356]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	4a58      	ldr	r2, [pc, #352]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 800837e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0308 	and.w	r3, r3, #8
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008390:	4b53      	ldr	r3, [pc, #332]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	4a52      	ldr	r2, [pc, #328]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800839a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800839c:	4b50      	ldr	r3, [pc, #320]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	494d      	ldr	r1, [pc, #308]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d044      	beq.n	8008444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d107      	bne.n	80083d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083c2:	4b47      	ldr	r3, [pc, #284]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d119      	bne.n	8008402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e07f      	b.n	80084d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d003      	beq.n	80083e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d107      	bne.n	80083f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083e2:	4b3f      	ldr	r3, [pc, #252]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d109      	bne.n	8008402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e06f      	b.n	80084d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f2:	4b3b      	ldr	r3, [pc, #236]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e067      	b.n	80084d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008402:	4b37      	ldr	r3, [pc, #220]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f023 0203 	bic.w	r2, r3, #3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	4934      	ldr	r1, [pc, #208]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008410:	4313      	orrs	r3, r2
 8008412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008414:	f7fb fd5e 	bl	8003ed4 <HAL_GetTick>
 8008418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800841a:	e00a      	b.n	8008432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800841c:	f7fb fd5a 	bl	8003ed4 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	f241 3288 	movw	r2, #5000	; 0x1388
 800842a:	4293      	cmp	r3, r2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e04f      	b.n	80084d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008432:	4b2b      	ldr	r3, [pc, #172]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 020c 	and.w	r2, r3, #12
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	429a      	cmp	r2, r3
 8008442:	d1eb      	bne.n	800841c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008444:	4b25      	ldr	r3, [pc, #148]	; (80084dc <HAL_RCC_ClockConfig+0x1b8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 030f 	and.w	r3, r3, #15
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d20c      	bcs.n	800846c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008452:	4b22      	ldr	r3, [pc, #136]	; (80084dc <HAL_RCC_ClockConfig+0x1b8>)
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800845a:	4b20      	ldr	r3, [pc, #128]	; (80084dc <HAL_RCC_ClockConfig+0x1b8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d001      	beq.n	800846c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e032      	b.n	80084d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d008      	beq.n	800848a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008478:	4b19      	ldr	r3, [pc, #100]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	4916      	ldr	r1, [pc, #88]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008486:	4313      	orrs	r3, r2
 8008488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008496:	4b12      	ldr	r3, [pc, #72]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	00db      	lsls	r3, r3, #3
 80084a4:	490e      	ldr	r1, [pc, #56]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084aa:	f000 f821 	bl	80084f0 <HAL_RCC_GetSysClockFreq>
 80084ae:	4601      	mov	r1, r0
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	091b      	lsrs	r3, r3, #4
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	4a0a      	ldr	r2, [pc, #40]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 80084bc:	5cd3      	ldrb	r3, [r2, r3]
 80084be:	fa21 f303 	lsr.w	r3, r1, r3
 80084c2:	4a09      	ldr	r2, [pc, #36]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80084c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <HAL_RCC_ClockConfig+0x1c8>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7f8 ffe6 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40023c00 	.word	0x40023c00
 80084e0:	40023800 	.word	0x40023800
 80084e4:	0800c378 	.word	0x0800c378
 80084e8:	20000000 	.word	0x20000000
 80084ec:	20000080 	.word	0x20000080

080084f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	607b      	str	r3, [r7, #4]
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	2300      	movs	r3, #0
 8008500:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008506:	4b63      	ldr	r3, [pc, #396]	; (8008694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f003 030c 	and.w	r3, r3, #12
 800850e:	2b04      	cmp	r3, #4
 8008510:	d007      	beq.n	8008522 <HAL_RCC_GetSysClockFreq+0x32>
 8008512:	2b08      	cmp	r3, #8
 8008514:	d008      	beq.n	8008528 <HAL_RCC_GetSysClockFreq+0x38>
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 80b4 	bne.w	8008684 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800851c:	4b5e      	ldr	r3, [pc, #376]	; (8008698 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800851e:	60bb      	str	r3, [r7, #8]
       break;
 8008520:	e0b3      	b.n	800868a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008522:	4b5e      	ldr	r3, [pc, #376]	; (800869c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008524:	60bb      	str	r3, [r7, #8]
      break;
 8008526:	e0b0      	b.n	800868a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008528:	4b5a      	ldr	r3, [pc, #360]	; (8008694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008530:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008532:	4b58      	ldr	r3, [pc, #352]	; (8008694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d04a      	beq.n	80085d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800853e:	4b55      	ldr	r3, [pc, #340]	; (8008694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	099b      	lsrs	r3, r3, #6
 8008544:	f04f 0400 	mov.w	r4, #0
 8008548:	f240 11ff 	movw	r1, #511	; 0x1ff
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	ea03 0501 	and.w	r5, r3, r1
 8008554:	ea04 0602 	and.w	r6, r4, r2
 8008558:	4629      	mov	r1, r5
 800855a:	4632      	mov	r2, r6
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	f04f 0400 	mov.w	r4, #0
 8008564:	0154      	lsls	r4, r2, #5
 8008566:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800856a:	014b      	lsls	r3, r1, #5
 800856c:	4619      	mov	r1, r3
 800856e:	4622      	mov	r2, r4
 8008570:	1b49      	subs	r1, r1, r5
 8008572:	eb62 0206 	sbc.w	r2, r2, r6
 8008576:	f04f 0300 	mov.w	r3, #0
 800857a:	f04f 0400 	mov.w	r4, #0
 800857e:	0194      	lsls	r4, r2, #6
 8008580:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008584:	018b      	lsls	r3, r1, #6
 8008586:	1a5b      	subs	r3, r3, r1
 8008588:	eb64 0402 	sbc.w	r4, r4, r2
 800858c:	f04f 0100 	mov.w	r1, #0
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	00e2      	lsls	r2, r4, #3
 8008596:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800859a:	00d9      	lsls	r1, r3, #3
 800859c:	460b      	mov	r3, r1
 800859e:	4614      	mov	r4, r2
 80085a0:	195b      	adds	r3, r3, r5
 80085a2:	eb44 0406 	adc.w	r4, r4, r6
 80085a6:	f04f 0100 	mov.w	r1, #0
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	0262      	lsls	r2, r4, #9
 80085b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80085b4:	0259      	lsls	r1, r3, #9
 80085b6:	460b      	mov	r3, r1
 80085b8:	4614      	mov	r4, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	4621      	mov	r1, r4
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f04f 0400 	mov.w	r4, #0
 80085c4:	461a      	mov	r2, r3
 80085c6:	4623      	mov	r3, r4
 80085c8:	f7f7 fe12 	bl	80001f0 <__aeabi_uldivmod>
 80085cc:	4603      	mov	r3, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e049      	b.n	8008668 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085d4:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	099b      	lsrs	r3, r3, #6
 80085da:	f04f 0400 	mov.w	r4, #0
 80085de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	ea03 0501 	and.w	r5, r3, r1
 80085ea:	ea04 0602 	and.w	r6, r4, r2
 80085ee:	4629      	mov	r1, r5
 80085f0:	4632      	mov	r2, r6
 80085f2:	f04f 0300 	mov.w	r3, #0
 80085f6:	f04f 0400 	mov.w	r4, #0
 80085fa:	0154      	lsls	r4, r2, #5
 80085fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008600:	014b      	lsls	r3, r1, #5
 8008602:	4619      	mov	r1, r3
 8008604:	4622      	mov	r2, r4
 8008606:	1b49      	subs	r1, r1, r5
 8008608:	eb62 0206 	sbc.w	r2, r2, r6
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	f04f 0400 	mov.w	r4, #0
 8008614:	0194      	lsls	r4, r2, #6
 8008616:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800861a:	018b      	lsls	r3, r1, #6
 800861c:	1a5b      	subs	r3, r3, r1
 800861e:	eb64 0402 	sbc.w	r4, r4, r2
 8008622:	f04f 0100 	mov.w	r1, #0
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	00e2      	lsls	r2, r4, #3
 800862c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008630:	00d9      	lsls	r1, r3, #3
 8008632:	460b      	mov	r3, r1
 8008634:	4614      	mov	r4, r2
 8008636:	195b      	adds	r3, r3, r5
 8008638:	eb44 0406 	adc.w	r4, r4, r6
 800863c:	f04f 0100 	mov.w	r1, #0
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	02a2      	lsls	r2, r4, #10
 8008646:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800864a:	0299      	lsls	r1, r3, #10
 800864c:	460b      	mov	r3, r1
 800864e:	4614      	mov	r4, r2
 8008650:	4618      	mov	r0, r3
 8008652:	4621      	mov	r1, r4
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f04f 0400 	mov.w	r4, #0
 800865a:	461a      	mov	r2, r3
 800865c:	4623      	mov	r3, r4
 800865e:	f7f7 fdc7 	bl	80001f0 <__aeabi_uldivmod>
 8008662:	4603      	mov	r3, r0
 8008664:	460c      	mov	r4, r1
 8008666:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008668:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	0c1b      	lsrs	r3, r3, #16
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	3301      	adds	r3, #1
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008680:	60bb      	str	r3, [r7, #8]
      break;
 8008682:	e002      	b.n	800868a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008684:	4b04      	ldr	r3, [pc, #16]	; (8008698 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008686:	60bb      	str	r3, [r7, #8]
      break;
 8008688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800868a:	68bb      	ldr	r3, [r7, #8]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008694:	40023800 	.word	0x40023800
 8008698:	00f42400 	.word	0x00f42400
 800869c:	007a1200 	.word	0x007a1200

080086a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086a0:	b480      	push	{r7}
 80086a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086a4:	4b03      	ldr	r3, [pc, #12]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80086a6:	681b      	ldr	r3, [r3, #0]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20000000 	.word	0x20000000

080086b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086bc:	f7ff fff0 	bl	80086a0 <HAL_RCC_GetHCLKFreq>
 80086c0:	4601      	mov	r1, r0
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	0a9b      	lsrs	r3, r3, #10
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	4a03      	ldr	r2, [pc, #12]	; (80086dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80086ce:	5cd3      	ldrb	r3, [r2, r3]
 80086d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	40023800 	.word	0x40023800
 80086dc:	0800c388 	.word	0x0800c388

080086e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086e4:	f7ff ffdc 	bl	80086a0 <HAL_RCC_GetHCLKFreq>
 80086e8:	4601      	mov	r1, r0
 80086ea:	4b05      	ldr	r3, [pc, #20]	; (8008700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	0b5b      	lsrs	r3, r3, #13
 80086f0:	f003 0307 	and.w	r3, r3, #7
 80086f4:	4a03      	ldr	r2, [pc, #12]	; (8008704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086f6:	5cd3      	ldrb	r3, [r2, r3]
 80086f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	40023800 	.word	0x40023800
 8008704:	0800c388 	.word	0x0800c388

08008708 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	220f      	movs	r2, #15
 8008716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008718:	4b12      	ldr	r3, [pc, #72]	; (8008764 <HAL_RCC_GetClockConfig+0x5c>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0203 	and.w	r2, r3, #3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008724:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <HAL_RCC_GetClockConfig+0x5c>)
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <HAL_RCC_GetClockConfig+0x5c>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <HAL_RCC_GetClockConfig+0x5c>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	08db      	lsrs	r3, r3, #3
 8008742:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <HAL_RCC_GetClockConfig+0x60>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 020f 	and.w	r2, r3, #15
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	601a      	str	r2, [r3, #0]
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	40023800 	.word	0x40023800
 8008768:	40023c00 	.word	0x40023c00

0800876c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800879c:	2b00      	cmp	r3, #0
 800879e:	d075      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087a0:	4bad      	ldr	r3, [pc, #692]	; (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087a6:	f7fb fb95 	bl	8003ed4 <HAL_GetTick>
 80087aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087ac:	e008      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80087ae:	f7fb fb91 	bl	8003ed4 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d901      	bls.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e18b      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087c0:	4ba6      	ldr	r3, [pc, #664]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1f0      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	019a      	lsls	r2, r3, #6
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	071b      	lsls	r3, r3, #28
 80087e4:	499d      	ldr	r1, [pc, #628]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01f      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087f8:	4b98      	ldr	r3, [pc, #608]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087fe:	0f1b      	lsrs	r3, r3, #28
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	019a      	lsls	r2, r3, #6
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	061b      	lsls	r3, r3, #24
 8008812:	431a      	orrs	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	071b      	lsls	r3, r3, #28
 8008818:	4990      	ldr	r1, [pc, #576]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800881a:	4313      	orrs	r3, r2
 800881c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008820:	4b8e      	ldr	r3, [pc, #568]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008826:	f023 021f 	bic.w	r2, r3, #31
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	3b01      	subs	r3, #1
 8008830:	498a      	ldr	r1, [pc, #552]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008832:	4313      	orrs	r3, r2
 8008834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00d      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	019a      	lsls	r2, r3, #6
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	061b      	lsls	r3, r3, #24
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	071b      	lsls	r3, r3, #28
 8008858:	4980      	ldr	r1, [pc, #512]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008860:	4b7d      	ldr	r3, [pc, #500]	; (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008862:	2201      	movs	r2, #1
 8008864:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008866:	f7fb fb35 	bl	8003ed4 <HAL_GetTick>
 800886a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800886c:	e008      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800886e:	f7fb fb31 	bl	8003ed4 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d901      	bls.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e12b      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008880:	4b76      	ldr	r3, [pc, #472]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0f0      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d105      	bne.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d079      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088a4:	4b6e      	ldr	r3, [pc, #440]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088aa:	f7fb fb13 	bl	8003ed4 <HAL_GetTick>
 80088ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088b0:	e008      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80088b2:	f7fb fb0f 	bl	8003ed4 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e109      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088c4:	4b65      	ldr	r3, [pc, #404]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d0:	d0ef      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d020      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088de:	4b5f      	ldr	r3, [pc, #380]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e4:	0f1b      	lsrs	r3, r3, #28
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	019a      	lsls	r2, r3, #6
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	061b      	lsls	r3, r3, #24
 80088f8:	431a      	orrs	r2, r3
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	071b      	lsls	r3, r3, #28
 80088fe:	4957      	ldr	r1, [pc, #348]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008900:	4313      	orrs	r3, r2
 8008902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008906:	4b55      	ldr	r3, [pc, #340]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800890c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	3b01      	subs	r3, #1
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	4950      	ldr	r1, [pc, #320]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800891a:	4313      	orrs	r3, r2
 800891c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01e      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800892c:	4b4b      	ldr	r3, [pc, #300]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008932:	0e1b      	lsrs	r3, r3, #24
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	019a      	lsls	r2, r3, #6
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	061b      	lsls	r3, r3, #24
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	071b      	lsls	r3, r3, #28
 800894c:	4943      	ldr	r1, [pc, #268]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800894e:	4313      	orrs	r3, r2
 8008950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008954:	4b41      	ldr	r3, [pc, #260]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	493e      	ldr	r1, [pc, #248]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008964:	4313      	orrs	r3, r2
 8008966:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800896a:	4b3d      	ldr	r3, [pc, #244]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800896c:	2201      	movs	r2, #1
 800896e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008970:	f7fb fab0 	bl	8003ed4 <HAL_GetTick>
 8008974:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008976:	e008      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008978:	f7fb faac 	bl	8003ed4 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e0a6      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800898a:	4b34      	ldr	r3, [pc, #208]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008996:	d1ef      	bne.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 808d 	beq.w	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	4b2c      	ldr	r3, [pc, #176]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	4a2b      	ldr	r2, [pc, #172]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b4:	6413      	str	r3, [r2, #64]	; 0x40
 80089b6:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80089c2:	4b28      	ldr	r3, [pc, #160]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80089c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089ce:	f7fb fa81 	bl	8003ed4 <HAL_GetTick>
 80089d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80089d4:	e008      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80089d6:	f7fb fa7d 	bl	8003ed4 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e077      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80089e8:	4b1e      	ldr	r3, [pc, #120]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0f0      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089f4:	4b19      	ldr	r3, [pc, #100]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d039      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d032      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a12:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a1c:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a22:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008a28:	4a0c      	ldr	r2, [pc, #48]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008a2e:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d11e      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008a3a:	f7fb fa4b 	bl	8003ed4 <HAL_GetTick>
 8008a3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a40:	e014      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a42:	f7fb fa47 	bl	8003ed4 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d90b      	bls.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e03f      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008a58:	42470068 	.word	0x42470068
 8008a5c:	40023800 	.word	0x40023800
 8008a60:	42470070 	.word	0x42470070
 8008a64:	40007000 	.word	0x40007000
 8008a68:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0e4      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a84:	d10d      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008a86:	4b16      	ldr	r3, [pc, #88]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a9a:	4911      	ldr	r1, [pc, #68]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	608b      	str	r3, [r1, #8]
 8008aa0:	e005      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	4a0e      	ldr	r2, [pc, #56]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008aa8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008aac:	6093      	str	r3, [r2, #8]
 8008aae:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008ab0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aba:	4909      	ldr	r1, [pc, #36]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d004      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008ad2:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008ad4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	424711e0 	.word	0x424711e0

08008ae8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e025      	b.n	8008b48 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7f7 fe5f 	bl	80007d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f001 fdb1 	bl	800a690 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	f001 fe1c 	bl	800a776 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d101      	bne.n	8008b6c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e018      	b.n	8008b9e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f001 fe79 	bl	800a874 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d104      	bne.n	8008b94 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008b92:	e003      	b.n	8008b9c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d101      	bne.n	8008bc0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e00e      	b.n	8008bde <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 fe8c 	bl	800a8ec <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e056      	b.n	8008ca6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7f8 fbb0 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	431a      	orrs	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c54:	431a      	orrs	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	ea42 0103 	orr.w	r1, r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	0c1b      	lsrs	r3, r3, #16
 8008c76:	f003 0104 	and.w	r1, r3, #4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69da      	ldr	r2, [r3, #28]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e01a      	b.n	8008cf6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cd6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7f8 fb95 	bl	8001408 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b088      	sub	sp, #32
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	603b      	str	r3, [r7, #0]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d101      	bne.n	8008d20 <HAL_SPI_Transmit+0x22>
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	e11e      	b.n	8008f5e <HAL_SPI_Transmit+0x260>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d28:	f7fb f8d4 	bl	8003ed4 <HAL_GetTick>
 8008d2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008d2e:	88fb      	ldrh	r3, [r7, #6]
 8008d30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d002      	beq.n	8008d44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008d3e:	2302      	movs	r3, #2
 8008d40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d42:	e103      	b.n	8008f4c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d002      	beq.n	8008d50 <HAL_SPI_Transmit+0x52>
 8008d4a:	88fb      	ldrh	r3, [r7, #6]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d54:	e0fa      	b.n	8008f4c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2203      	movs	r2, #3
 8008d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	88fa      	ldrh	r2, [r7, #6]
 8008d6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	88fa      	ldrh	r2, [r7, #6]
 8008d74:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d9c:	d107      	bne.n	8008dae <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db8:	2b40      	cmp	r3, #64	; 0x40
 8008dba:	d007      	beq.n	8008dcc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd4:	d14b      	bne.n	8008e6e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <HAL_SPI_Transmit+0xe6>
 8008dde:	8afb      	ldrh	r3, [r7, #22]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d13e      	bne.n	8008e62 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	881a      	ldrh	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df4:	1c9a      	adds	r2, r3, #2
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e08:	e02b      	b.n	8008e62 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d112      	bne.n	8008e3e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	881a      	ldrh	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	1c9a      	adds	r2, r3, #2
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e3c:	e011      	b.n	8008e62 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e3e:	f7fb f849 	bl	8003ed4 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d803      	bhi.n	8008e56 <HAL_SPI_Transmit+0x158>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e54:	d102      	bne.n	8008e5c <HAL_SPI_Transmit+0x15e>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e60:	e074      	b.n	8008f4c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1ce      	bne.n	8008e0a <HAL_SPI_Transmit+0x10c>
 8008e6c:	e04c      	b.n	8008f08 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <HAL_SPI_Transmit+0x17e>
 8008e76:	8afb      	ldrh	r3, [r7, #22]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d140      	bne.n	8008efe <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	330c      	adds	r3, #12
 8008e86:	7812      	ldrb	r2, [r2, #0]
 8008e88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008ea2:	e02c      	b.n	8008efe <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d113      	bne.n	8008eda <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ed8:	e011      	b.n	8008efe <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eda:	f7fa fffb 	bl	8003ed4 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d803      	bhi.n	8008ef2 <HAL_SPI_Transmit+0x1f4>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d102      	bne.n	8008ef8 <HAL_SPI_Transmit+0x1fa>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008efc:	e026      	b.n	8008f4c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1cd      	bne.n	8008ea4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fbb3 	bl	8009678 <SPI_EndRxTxTransaction>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f26:	2300      	movs	r3, #0
 8008f28:	613b      	str	r3, [r7, #16]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	613b      	str	r3, [r7, #16]
 8008f3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	77fb      	strb	r3, [r7, #31]
 8008f48:	e000      	b.n	8008f4c <HAL_SPI_Transmit+0x24e>
  }

error:
 8008f4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b088      	sub	sp, #32
 8008f6a:	af02      	add	r7, sp, #8
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f82:	d112      	bne.n	8008faa <HAL_SPI_Receive+0x44>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10e      	bne.n	8008faa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2204      	movs	r2, #4
 8008f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f94:	88fa      	ldrh	r2, [r7, #6]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f8e9 	bl	8009178 <HAL_SPI_TransmitReceive>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	e0e2      	b.n	8009170 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <HAL_SPI_Receive+0x52>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e0db      	b.n	8009170 <HAL_SPI_Receive+0x20a>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fc0:	f7fa ff88 	bl	8003ed4 <HAL_GetTick>
 8008fc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d002      	beq.n	8008fd8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fd6:	e0c2      	b.n	800915e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <HAL_SPI_Receive+0x7e>
 8008fde:	88fb      	ldrh	r3, [r7, #6]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fe8:	e0b9      	b.n	800915e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2204      	movs	r2, #4
 8008fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	88fa      	ldrh	r2, [r7, #6]
 8009002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	88fa      	ldrh	r2, [r7, #6]
 8009008:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009030:	d107      	bne.n	8009042 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009040:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904c:	2b40      	cmp	r3, #64	; 0x40
 800904e:	d007      	beq.n	8009060 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800905e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d162      	bne.n	800912e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009068:	e02e      	b.n	80090c8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b01      	cmp	r3, #1
 8009076:	d115      	bne.n	80090a4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f103 020c 	add.w	r2, r3, #12
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	7812      	ldrb	r2, [r2, #0]
 8009086:	b2d2      	uxtb	r2, r2
 8009088:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009098:	b29b      	uxth	r3, r3
 800909a:	3b01      	subs	r3, #1
 800909c:	b29a      	uxth	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090a2:	e011      	b.n	80090c8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090a4:	f7fa ff16 	bl	8003ed4 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d803      	bhi.n	80090bc <HAL_SPI_Receive+0x156>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ba:	d102      	bne.n	80090c2 <HAL_SPI_Receive+0x15c>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d102      	bne.n	80090c8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80090c6:	e04a      	b.n	800915e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1cb      	bne.n	800906a <HAL_SPI_Receive+0x104>
 80090d2:	e031      	b.n	8009138 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d113      	bne.n	800910a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ec:	b292      	uxth	r2, r2
 80090ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	1c9a      	adds	r2, r3, #2
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009108:	e011      	b.n	800912e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800910a:	f7fa fee3 	bl	8003ed4 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d803      	bhi.n	8009122 <HAL_SPI_Receive+0x1bc>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009120:	d102      	bne.n	8009128 <HAL_SPI_Receive+0x1c2>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d102      	bne.n	800912e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800912c:	e017      	b.n	800915e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009132:	b29b      	uxth	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1cd      	bne.n	80090d4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 fa35 	bl	80095ac <SPI_EndRxTransaction>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2220      	movs	r2, #32
 800914c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	75fb      	strb	r3, [r7, #23]
 800915a:	e000      	b.n	800915e <HAL_SPI_Receive+0x1f8>
  }

error :
 800915c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800916e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08c      	sub	sp, #48	; 0x30
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009186:	2301      	movs	r3, #1
 8009188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <HAL_SPI_TransmitReceive+0x26>
 800919a:	2302      	movs	r3, #2
 800919c:	e18a      	b.n	80094b4 <HAL_SPI_TransmitReceive+0x33c>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091a6:	f7fa fe95 	bl	8003ed4 <HAL_GetTick>
 80091aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80091bc:	887b      	ldrh	r3, [r7, #2]
 80091be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d00f      	beq.n	80091e8 <HAL_SPI_TransmitReceive+0x70>
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091ce:	d107      	bne.n	80091e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <HAL_SPI_TransmitReceive+0x68>
 80091d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d003      	beq.n	80091e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80091e0:	2302      	movs	r3, #2
 80091e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091e6:	e15b      	b.n	80094a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d005      	beq.n	80091fa <HAL_SPI_TransmitReceive+0x82>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <HAL_SPI_TransmitReceive+0x82>
 80091f4:	887b      	ldrh	r3, [r7, #2]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d103      	bne.n	8009202 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009200:	e14e      	b.n	80094a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b04      	cmp	r3, #4
 800920c:	d003      	beq.n	8009216 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2205      	movs	r2, #5
 8009212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	887a      	ldrh	r2, [r7, #2]
 8009226:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	887a      	ldrh	r2, [r7, #2]
 800922c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	887a      	ldrh	r2, [r7, #2]
 8009238:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	887a      	ldrh	r2, [r7, #2]
 800923e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009256:	2b40      	cmp	r3, #64	; 0x40
 8009258:	d007      	beq.n	800926a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009268:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009272:	d178      	bne.n	8009366 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <HAL_SPI_TransmitReceive+0x10a>
 800927c:	8b7b      	ldrh	r3, [r7, #26]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d166      	bne.n	8009350 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009286:	881a      	ldrh	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	1c9a      	adds	r2, r3, #2
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800929c:	b29b      	uxth	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092a6:	e053      	b.n	8009350 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d11b      	bne.n	80092ee <HAL_SPI_TransmitReceive+0x176>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d016      	beq.n	80092ee <HAL_SPI_TransmitReceive+0x176>
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d113      	bne.n	80092ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	881a      	ldrh	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d6:	1c9a      	adds	r2, r3, #2
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d119      	bne.n	8009330 <HAL_SPI_TransmitReceive+0x1b8>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d014      	beq.n	8009330 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009310:	b292      	uxth	r2, r2
 8009312:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	1c9a      	adds	r2, r3, #2
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009322:	b29b      	uxth	r3, r3
 8009324:	3b01      	subs	r3, #1
 8009326:	b29a      	uxth	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800932c:	2301      	movs	r3, #1
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009330:	f7fa fdd0 	bl	8003ed4 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800933c:	429a      	cmp	r2, r3
 800933e:	d807      	bhi.n	8009350 <HAL_SPI_TransmitReceive+0x1d8>
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	d003      	beq.n	8009350 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800934e:	e0a7      	b.n	80094a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009354:	b29b      	uxth	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1a6      	bne.n	80092a8 <HAL_SPI_TransmitReceive+0x130>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1a1      	bne.n	80092a8 <HAL_SPI_TransmitReceive+0x130>
 8009364:	e07c      	b.n	8009460 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <HAL_SPI_TransmitReceive+0x1fc>
 800936e:	8b7b      	ldrh	r3, [r7, #26]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d16b      	bne.n	800944c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009390:	b29b      	uxth	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800939a:	e057      	b.n	800944c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d11c      	bne.n	80093e4 <HAL_SPI_TransmitReceive+0x26c>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d017      	beq.n	80093e4 <HAL_SPI_TransmitReceive+0x26c>
 80093b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d114      	bne.n	80093e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	7812      	ldrb	r2, [r2, #0]
 80093c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	3b01      	subs	r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d119      	bne.n	8009426 <HAL_SPI_TransmitReceive+0x2ae>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d014      	beq.n	8009426 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009406:	b2d2      	uxtb	r2, r2
 8009408:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009418:	b29b      	uxth	r3, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	b29a      	uxth	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009422:	2301      	movs	r3, #1
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009426:	f7fa fd55 	bl	8003ed4 <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009432:	429a      	cmp	r2, r3
 8009434:	d803      	bhi.n	800943e <HAL_SPI_TransmitReceive+0x2c6>
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943c:	d102      	bne.n	8009444 <HAL_SPI_TransmitReceive+0x2cc>
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800944a:	e029      	b.n	80094a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009450:	b29b      	uxth	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1a2      	bne.n	800939c <HAL_SPI_TransmitReceive+0x224>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800945a:	b29b      	uxth	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d19d      	bne.n	800939c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 f907 	bl	8009678 <SPI_EndRxTxTransaction>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d006      	beq.n	800947e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800947c:	e010      	b.n	80094a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10b      	bne.n	800949e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	e000      	b.n	80094a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800949e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3730      	adds	r7, #48	; 0x30
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094ca:	b2db      	uxtb	r3, r3
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094e8:	e04c      	b.n	8009584 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d048      	beq.n	8009584 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80094f2:	f7fa fcef 	bl	8003ed4 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d902      	bls.n	8009508 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d13d      	bne.n	8009584 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009516:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009520:	d111      	bne.n	8009546 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800952a:	d004      	beq.n	8009536 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009534:	d107      	bne.n	8009546 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009544:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800954e:	d10f      	bne.n	8009570 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800956e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e00f      	b.n	80095a4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4013      	ands	r3, r2
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	429a      	cmp	r2, r3
 8009592:	bf0c      	ite	eq
 8009594:	2301      	moveq	r3, #1
 8009596:	2300      	movne	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d1a3      	bne.n	80094ea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095c0:	d111      	bne.n	80095e6 <SPI_EndRxTransaction+0x3a>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ca:	d004      	beq.n	80095d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095d4:	d107      	bne.n	80095e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095ee:	d12a      	bne.n	8009646 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f8:	d012      	beq.n	8009620 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2200      	movs	r2, #0
 8009602:	2180      	movs	r1, #128	; 0x80
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7ff ff67 	bl	80094d8 <SPI_WaitFlagStateUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d02d      	beq.n	800966c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009614:	f043 0220 	orr.w	r2, r3, #32
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e026      	b.n	800966e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	2101      	movs	r1, #1
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff ff54 	bl	80094d8 <SPI_WaitFlagStateUntilTimeout>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d01a      	beq.n	800966c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963a:	f043 0220 	orr.w	r2, r3, #32
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e013      	b.n	800966e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2200      	movs	r2, #0
 800964e:	2101      	movs	r1, #1
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7ff ff41 	bl	80094d8 <SPI_WaitFlagStateUntilTimeout>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d007      	beq.n	800966c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009660:	f043 0220 	orr.w	r2, r3, #32
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e000      	b.n	800966e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af02      	add	r7, sp, #8
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009684:	4b1b      	ldr	r3, [pc, #108]	; (80096f4 <SPI_EndRxTxTransaction+0x7c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a1b      	ldr	r2, [pc, #108]	; (80096f8 <SPI_EndRxTxTransaction+0x80>)
 800968a:	fba2 2303 	umull	r2, r3, r2, r3
 800968e:	0d5b      	lsrs	r3, r3, #21
 8009690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009694:	fb02 f303 	mul.w	r3, r2, r3
 8009698:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096a2:	d112      	bne.n	80096ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2200      	movs	r2, #0
 80096ac:	2180      	movs	r1, #128	; 0x80
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff ff12 	bl	80094d8 <SPI_WaitFlagStateUntilTimeout>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096be:	f043 0220 	orr.w	r2, r3, #32
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e00f      	b.n	80096ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e0:	2b80      	cmp	r3, #128	; 0x80
 80096e2:	d0f2      	beq.n	80096ca <SPI_EndRxTxTransaction+0x52>
 80096e4:	e000      	b.n	80096e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80096e6:	bf00      	nop
  }

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20000000 	.word	0x20000000
 80096f8:	165e9f81 	.word	0x165e9f81

080096fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e01d      	b.n	800974a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7f7 ffbc 	bl	80016a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3304      	adds	r3, #4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f000 fa14 	bl	8009b68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 0201 	orr.w	r2, r2, #1
 8009768:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b06      	cmp	r3, #6
 800977a:	d007      	beq.n	800978c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d122      	bne.n	80097f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d11b      	bne.n	80097f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f06f 0202 	mvn.w	r2, #2
 80097c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f9a5 	bl	8009b2c <HAL_TIM_IC_CaptureCallback>
 80097e2:	e005      	b.n	80097f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f997 	bl	8009b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f9a8 	bl	8009b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b04      	cmp	r3, #4
 8009802:	d122      	bne.n	800984a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f003 0304 	and.w	r3, r3, #4
 800980e:	2b04      	cmp	r3, #4
 8009810:	d11b      	bne.n	800984a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f06f 0204 	mvn.w	r2, #4
 800981a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f97b 	bl	8009b2c <HAL_TIM_IC_CaptureCallback>
 8009836:	e005      	b.n	8009844 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f96d 	bl	8009b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f97e 	bl	8009b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	f003 0308 	and.w	r3, r3, #8
 8009854:	2b08      	cmp	r3, #8
 8009856:	d122      	bne.n	800989e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f003 0308 	and.w	r3, r3, #8
 8009862:	2b08      	cmp	r3, #8
 8009864:	d11b      	bne.n	800989e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f06f 0208 	mvn.w	r2, #8
 800986e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2204      	movs	r2, #4
 8009874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	69db      	ldr	r3, [r3, #28]
 800987c:	f003 0303 	and.w	r3, r3, #3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f951 	bl	8009b2c <HAL_TIM_IC_CaptureCallback>
 800988a:	e005      	b.n	8009898 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f943 	bl	8009b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f954 	bl	8009b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f003 0310 	and.w	r3, r3, #16
 80098a8:	2b10      	cmp	r3, #16
 80098aa:	d122      	bne.n	80098f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f003 0310 	and.w	r3, r3, #16
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d11b      	bne.n	80098f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f06f 0210 	mvn.w	r2, #16
 80098c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2208      	movs	r2, #8
 80098c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f927 	bl	8009b2c <HAL_TIM_IC_CaptureCallback>
 80098de:	e005      	b.n	80098ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f919 	bl	8009b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f92a 	bl	8009b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d10e      	bne.n	800991e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b01      	cmp	r3, #1
 800990c:	d107      	bne.n	800991e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f06f 0201 	mvn.w	r2, #1
 8009916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7f7 fcdd 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009928:	2b80      	cmp	r3, #128	; 0x80
 800992a:	d10e      	bne.n	800994a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009936:	2b80      	cmp	r3, #128	; 0x80
 8009938:	d107      	bne.n	800994a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 facf 	bl	8009ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009954:	2b40      	cmp	r3, #64	; 0x40
 8009956:	d10e      	bne.n	8009976 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009962:	2b40      	cmp	r3, #64	; 0x40
 8009964:	d107      	bne.n	8009976 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800996e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f8ef 	bl	8009b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f003 0320 	and.w	r3, r3, #32
 8009980:	2b20      	cmp	r3, #32
 8009982:	d10e      	bne.n	80099a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b20      	cmp	r3, #32
 8009990:	d107      	bne.n	80099a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f06f 0220 	mvn.w	r2, #32
 800999a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fa99 	bl	8009ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <HAL_TIM_ConfigClockSource+0x18>
 80099be:	2302      	movs	r3, #2
 80099c0:	e0a6      	b.n	8009b10 <HAL_TIM_ConfigClockSource+0x166>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2202      	movs	r2, #2
 80099ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d067      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0x120>
 80099fa:	2b40      	cmp	r3, #64	; 0x40
 80099fc:	d80b      	bhi.n	8009a16 <HAL_TIM_ConfigClockSource+0x6c>
 80099fe:	2b10      	cmp	r3, #16
 8009a00:	d073      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x140>
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d802      	bhi.n	8009a0c <HAL_TIM_ConfigClockSource+0x62>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d06f      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009a0a:	e078      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	d06c      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x140>
 8009a10:	2b30      	cmp	r3, #48	; 0x30
 8009a12:	d06a      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009a14:	e073      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a16:	2b70      	cmp	r3, #112	; 0x70
 8009a18:	d00d      	beq.n	8009a36 <HAL_TIM_ConfigClockSource+0x8c>
 8009a1a:	2b70      	cmp	r3, #112	; 0x70
 8009a1c:	d804      	bhi.n	8009a28 <HAL_TIM_ConfigClockSource+0x7e>
 8009a1e:	2b50      	cmp	r3, #80	; 0x50
 8009a20:	d033      	beq.n	8009a8a <HAL_TIM_ConfigClockSource+0xe0>
 8009a22:	2b60      	cmp	r3, #96	; 0x60
 8009a24:	d041      	beq.n	8009aaa <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009a26:	e06a      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a2c:	d066      	beq.n	8009afc <HAL_TIM_ConfigClockSource+0x152>
 8009a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a32:	d017      	beq.n	8009a64 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009a34:	e063      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	6899      	ldr	r1, [r3, #8]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f000 f9a9 	bl	8009d9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	609a      	str	r2, [r3, #8]
      break;
 8009a62:	e04c      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	6899      	ldr	r1, [r3, #8]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f000 f992 	bl	8009d9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689a      	ldr	r2, [r3, #8]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a86:	609a      	str	r2, [r3, #8]
      break;
 8009a88:	e039      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	6859      	ldr	r1, [r3, #4]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	461a      	mov	r2, r3
 8009a98:	f000 f906 	bl	8009ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2150      	movs	r1, #80	; 0x50
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 f95f 	bl	8009d66 <TIM_ITRx_SetConfig>
      break;
 8009aa8:	e029      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	6859      	ldr	r1, [r3, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f000 f925 	bl	8009d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2160      	movs	r1, #96	; 0x60
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 f94f 	bl	8009d66 <TIM_ITRx_SetConfig>
      break;
 8009ac8:	e019      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6859      	ldr	r1, [r3, #4]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f000 f8e6 	bl	8009ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2140      	movs	r1, #64	; 0x40
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 f93f 	bl	8009d66 <TIM_ITRx_SetConfig>
      break;
 8009ae8:	e009      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f000 f936 	bl	8009d66 <TIM_ITRx_SetConfig>
      break;
 8009afa:	e000      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009afc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a40      	ldr	r2, [pc, #256]	; (8009c7c <TIM_Base_SetConfig+0x114>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d013      	beq.n	8009ba8 <TIM_Base_SetConfig+0x40>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b86:	d00f      	beq.n	8009ba8 <TIM_Base_SetConfig+0x40>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a3d      	ldr	r2, [pc, #244]	; (8009c80 <TIM_Base_SetConfig+0x118>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d00b      	beq.n	8009ba8 <TIM_Base_SetConfig+0x40>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a3c      	ldr	r2, [pc, #240]	; (8009c84 <TIM_Base_SetConfig+0x11c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d007      	beq.n	8009ba8 <TIM_Base_SetConfig+0x40>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a3b      	ldr	r2, [pc, #236]	; (8009c88 <TIM_Base_SetConfig+0x120>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d003      	beq.n	8009ba8 <TIM_Base_SetConfig+0x40>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a3a      	ldr	r2, [pc, #232]	; (8009c8c <TIM_Base_SetConfig+0x124>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d108      	bne.n	8009bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a2f      	ldr	r2, [pc, #188]	; (8009c7c <TIM_Base_SetConfig+0x114>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d02b      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc8:	d027      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a2c      	ldr	r2, [pc, #176]	; (8009c80 <TIM_Base_SetConfig+0x118>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d023      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a2b      	ldr	r2, [pc, #172]	; (8009c84 <TIM_Base_SetConfig+0x11c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d01f      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a2a      	ldr	r2, [pc, #168]	; (8009c88 <TIM_Base_SetConfig+0x120>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d01b      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a29      	ldr	r2, [pc, #164]	; (8009c8c <TIM_Base_SetConfig+0x124>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d017      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a28      	ldr	r2, [pc, #160]	; (8009c90 <TIM_Base_SetConfig+0x128>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d013      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a27      	ldr	r2, [pc, #156]	; (8009c94 <TIM_Base_SetConfig+0x12c>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d00f      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a26      	ldr	r2, [pc, #152]	; (8009c98 <TIM_Base_SetConfig+0x130>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d00b      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a25      	ldr	r2, [pc, #148]	; (8009c9c <TIM_Base_SetConfig+0x134>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d007      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a24      	ldr	r2, [pc, #144]	; (8009ca0 <TIM_Base_SetConfig+0x138>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d003      	beq.n	8009c1a <TIM_Base_SetConfig+0xb2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a23      	ldr	r2, [pc, #140]	; (8009ca4 <TIM_Base_SetConfig+0x13c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d108      	bne.n	8009c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a0a      	ldr	r2, [pc, #40]	; (8009c7c <TIM_Base_SetConfig+0x114>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d003      	beq.n	8009c60 <TIM_Base_SetConfig+0xf8>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <TIM_Base_SetConfig+0x124>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d103      	bne.n	8009c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	615a      	str	r2, [r3, #20]
}
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	40010000 	.word	0x40010000
 8009c80:	40000400 	.word	0x40000400
 8009c84:	40000800 	.word	0x40000800
 8009c88:	40000c00 	.word	0x40000c00
 8009c8c:	40010400 	.word	0x40010400
 8009c90:	40014000 	.word	0x40014000
 8009c94:	40014400 	.word	0x40014400
 8009c98:	40014800 	.word	0x40014800
 8009c9c:	40001800 	.word	0x40001800
 8009ca0:	40001c00 	.word	0x40001c00
 8009ca4:	40002000 	.word	0x40002000

08009ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	f023 0201 	bic.w	r2, r3, #1
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	011b      	lsls	r3, r3, #4
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f023 030a 	bic.w	r3, r3, #10
 8009ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	621a      	str	r2, [r3, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	371c      	adds	r7, #28
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b087      	sub	sp, #28
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	f023 0210 	bic.w	r2, r3, #16
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	031b      	lsls	r3, r3, #12
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	011b      	lsls	r3, r3, #4
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	621a      	str	r2, [r3, #32]
}
 8009d5a:	bf00      	nop
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b085      	sub	sp, #20
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	f043 0307 	orr.w	r3, r3, #7
 8009d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	609a      	str	r2, [r3, #8]
}
 8009d90:	bf00      	nop
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	021a      	lsls	r2, r3, #8
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	609a      	str	r2, [r3, #8]
}
 8009dd0:	bf00      	nop
 8009dd2:	371c      	adds	r7, #28
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d101      	bne.n	8009df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009df0:	2302      	movs	r3, #2
 8009df2:	e05a      	b.n	8009eaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a21      	ldr	r2, [pc, #132]	; (8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d022      	beq.n	8009e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e40:	d01d      	beq.n	8009e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a1d      	ldr	r2, [pc, #116]	; (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d018      	beq.n	8009e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a1b      	ldr	r2, [pc, #108]	; (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d013      	beq.n	8009e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a1a      	ldr	r2, [pc, #104]	; (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d00e      	beq.n	8009e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a18      	ldr	r2, [pc, #96]	; (8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d009      	beq.n	8009e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a17      	ldr	r2, [pc, #92]	; (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d004      	beq.n	8009e7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a15      	ldr	r2, [pc, #84]	; (8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d10c      	bne.n	8009e98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	40010000 	.word	0x40010000
 8009ebc:	40000400 	.word	0x40000400
 8009ec0:	40000800 	.word	0x40000800
 8009ec4:	40000c00 	.word	0x40000c00
 8009ec8:	40010400 	.word	0x40010400
 8009ecc:	40014000 	.word	0x40014000
 8009ed0:	40001800 	.word	0x40001800

08009ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e03f      	b.n	8009f8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7f7 fdfc 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2224      	movs	r2, #36	; 0x24
 8009f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68da      	ldr	r2, [r3, #12]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f829 	bl	8009f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	691a      	ldr	r2, [r3, #16]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	695a      	ldr	r2, [r3, #20]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2220      	movs	r2, #32
 8009f88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	b085      	sub	sp, #20
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68da      	ldr	r2, [r3, #12]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009fda:	f023 030c 	bic.w	r3, r3, #12
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6812      	ldr	r2, [r2, #0]
 8009fe2:	68f9      	ldr	r1, [r7, #12]
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	699a      	ldr	r2, [r3, #24]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a006:	f040 818b 	bne.w	800a320 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4ac1      	ldr	r2, [pc, #772]	; (800a314 <UART_SetConfig+0x37c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d005      	beq.n	800a020 <UART_SetConfig+0x88>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4abf      	ldr	r2, [pc, #764]	; (800a318 <UART_SetConfig+0x380>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	f040 80bd 	bne.w	800a19a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a020:	f7fe fb5e 	bl	80086e0 <HAL_RCC_GetPCLK2Freq>
 800a024:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	461d      	mov	r5, r3
 800a02a:	f04f 0600 	mov.w	r6, #0
 800a02e:	46a8      	mov	r8, r5
 800a030:	46b1      	mov	r9, r6
 800a032:	eb18 0308 	adds.w	r3, r8, r8
 800a036:	eb49 0409 	adc.w	r4, r9, r9
 800a03a:	4698      	mov	r8, r3
 800a03c:	46a1      	mov	r9, r4
 800a03e:	eb18 0805 	adds.w	r8, r8, r5
 800a042:	eb49 0906 	adc.w	r9, r9, r6
 800a046:	f04f 0100 	mov.w	r1, #0
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a052:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a056:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a05a:	4688      	mov	r8, r1
 800a05c:	4691      	mov	r9, r2
 800a05e:	eb18 0005 	adds.w	r0, r8, r5
 800a062:	eb49 0106 	adc.w	r1, r9, r6
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	461d      	mov	r5, r3
 800a06c:	f04f 0600 	mov.w	r6, #0
 800a070:	196b      	adds	r3, r5, r5
 800a072:	eb46 0406 	adc.w	r4, r6, r6
 800a076:	461a      	mov	r2, r3
 800a078:	4623      	mov	r3, r4
 800a07a:	f7f6 f8b9 	bl	80001f0 <__aeabi_uldivmod>
 800a07e:	4603      	mov	r3, r0
 800a080:	460c      	mov	r4, r1
 800a082:	461a      	mov	r2, r3
 800a084:	4ba5      	ldr	r3, [pc, #660]	; (800a31c <UART_SetConfig+0x384>)
 800a086:	fba3 2302 	umull	r2, r3, r3, r2
 800a08a:	095b      	lsrs	r3, r3, #5
 800a08c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	461d      	mov	r5, r3
 800a094:	f04f 0600 	mov.w	r6, #0
 800a098:	46a9      	mov	r9, r5
 800a09a:	46b2      	mov	sl, r6
 800a09c:	eb19 0309 	adds.w	r3, r9, r9
 800a0a0:	eb4a 040a 	adc.w	r4, sl, sl
 800a0a4:	4699      	mov	r9, r3
 800a0a6:	46a2      	mov	sl, r4
 800a0a8:	eb19 0905 	adds.w	r9, r9, r5
 800a0ac:	eb4a 0a06 	adc.w	sl, sl, r6
 800a0b0:	f04f 0100 	mov.w	r1, #0
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0c4:	4689      	mov	r9, r1
 800a0c6:	4692      	mov	sl, r2
 800a0c8:	eb19 0005 	adds.w	r0, r9, r5
 800a0cc:	eb4a 0106 	adc.w	r1, sl, r6
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	461d      	mov	r5, r3
 800a0d6:	f04f 0600 	mov.w	r6, #0
 800a0da:	196b      	adds	r3, r5, r5
 800a0dc:	eb46 0406 	adc.w	r4, r6, r6
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4623      	mov	r3, r4
 800a0e4:	f7f6 f884 	bl	80001f0 <__aeabi_uldivmod>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4b8b      	ldr	r3, [pc, #556]	; (800a31c <UART_SetConfig+0x384>)
 800a0f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0f4:	095b      	lsrs	r3, r3, #5
 800a0f6:	2164      	movs	r1, #100	; 0x64
 800a0f8:	fb01 f303 	mul.w	r3, r1, r3
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	3332      	adds	r3, #50	; 0x32
 800a102:	4a86      	ldr	r2, [pc, #536]	; (800a31c <UART_SetConfig+0x384>)
 800a104:	fba2 2303 	umull	r2, r3, r2, r3
 800a108:	095b      	lsrs	r3, r3, #5
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a110:	4498      	add	r8, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	461d      	mov	r5, r3
 800a116:	f04f 0600 	mov.w	r6, #0
 800a11a:	46a9      	mov	r9, r5
 800a11c:	46b2      	mov	sl, r6
 800a11e:	eb19 0309 	adds.w	r3, r9, r9
 800a122:	eb4a 040a 	adc.w	r4, sl, sl
 800a126:	4699      	mov	r9, r3
 800a128:	46a2      	mov	sl, r4
 800a12a:	eb19 0905 	adds.w	r9, r9, r5
 800a12e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a132:	f04f 0100 	mov.w	r1, #0
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a13e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a146:	4689      	mov	r9, r1
 800a148:	4692      	mov	sl, r2
 800a14a:	eb19 0005 	adds.w	r0, r9, r5
 800a14e:	eb4a 0106 	adc.w	r1, sl, r6
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	461d      	mov	r5, r3
 800a158:	f04f 0600 	mov.w	r6, #0
 800a15c:	196b      	adds	r3, r5, r5
 800a15e:	eb46 0406 	adc.w	r4, r6, r6
 800a162:	461a      	mov	r2, r3
 800a164:	4623      	mov	r3, r4
 800a166:	f7f6 f843 	bl	80001f0 <__aeabi_uldivmod>
 800a16a:	4603      	mov	r3, r0
 800a16c:	460c      	mov	r4, r1
 800a16e:	461a      	mov	r2, r3
 800a170:	4b6a      	ldr	r3, [pc, #424]	; (800a31c <UART_SetConfig+0x384>)
 800a172:	fba3 1302 	umull	r1, r3, r3, r2
 800a176:	095b      	lsrs	r3, r3, #5
 800a178:	2164      	movs	r1, #100	; 0x64
 800a17a:	fb01 f303 	mul.w	r3, r1, r3
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	00db      	lsls	r3, r3, #3
 800a182:	3332      	adds	r3, #50	; 0x32
 800a184:	4a65      	ldr	r2, [pc, #404]	; (800a31c <UART_SetConfig+0x384>)
 800a186:	fba2 2303 	umull	r2, r3, r2, r3
 800a18a:	095b      	lsrs	r3, r3, #5
 800a18c:	f003 0207 	and.w	r2, r3, #7
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4442      	add	r2, r8
 800a196:	609a      	str	r2, [r3, #8]
 800a198:	e26f      	b.n	800a67a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a19a:	f7fe fa8d 	bl	80086b8 <HAL_RCC_GetPCLK1Freq>
 800a19e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	461d      	mov	r5, r3
 800a1a4:	f04f 0600 	mov.w	r6, #0
 800a1a8:	46a8      	mov	r8, r5
 800a1aa:	46b1      	mov	r9, r6
 800a1ac:	eb18 0308 	adds.w	r3, r8, r8
 800a1b0:	eb49 0409 	adc.w	r4, r9, r9
 800a1b4:	4698      	mov	r8, r3
 800a1b6:	46a1      	mov	r9, r4
 800a1b8:	eb18 0805 	adds.w	r8, r8, r5
 800a1bc:	eb49 0906 	adc.w	r9, r9, r6
 800a1c0:	f04f 0100 	mov.w	r1, #0
 800a1c4:	f04f 0200 	mov.w	r2, #0
 800a1c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a1cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a1d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a1d4:	4688      	mov	r8, r1
 800a1d6:	4691      	mov	r9, r2
 800a1d8:	eb18 0005 	adds.w	r0, r8, r5
 800a1dc:	eb49 0106 	adc.w	r1, r9, r6
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	461d      	mov	r5, r3
 800a1e6:	f04f 0600 	mov.w	r6, #0
 800a1ea:	196b      	adds	r3, r5, r5
 800a1ec:	eb46 0406 	adc.w	r4, r6, r6
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	f7f5 fffc 	bl	80001f0 <__aeabi_uldivmod>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	460c      	mov	r4, r1
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4b47      	ldr	r3, [pc, #284]	; (800a31c <UART_SetConfig+0x384>)
 800a200:	fba3 2302 	umull	r2, r3, r3, r2
 800a204:	095b      	lsrs	r3, r3, #5
 800a206:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	461d      	mov	r5, r3
 800a20e:	f04f 0600 	mov.w	r6, #0
 800a212:	46a9      	mov	r9, r5
 800a214:	46b2      	mov	sl, r6
 800a216:	eb19 0309 	adds.w	r3, r9, r9
 800a21a:	eb4a 040a 	adc.w	r4, sl, sl
 800a21e:	4699      	mov	r9, r3
 800a220:	46a2      	mov	sl, r4
 800a222:	eb19 0905 	adds.w	r9, r9, r5
 800a226:	eb4a 0a06 	adc.w	sl, sl, r6
 800a22a:	f04f 0100 	mov.w	r1, #0
 800a22e:	f04f 0200 	mov.w	r2, #0
 800a232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a236:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a23a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a23e:	4689      	mov	r9, r1
 800a240:	4692      	mov	sl, r2
 800a242:	eb19 0005 	adds.w	r0, r9, r5
 800a246:	eb4a 0106 	adc.w	r1, sl, r6
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	461d      	mov	r5, r3
 800a250:	f04f 0600 	mov.w	r6, #0
 800a254:	196b      	adds	r3, r5, r5
 800a256:	eb46 0406 	adc.w	r4, r6, r6
 800a25a:	461a      	mov	r2, r3
 800a25c:	4623      	mov	r3, r4
 800a25e:	f7f5 ffc7 	bl	80001f0 <__aeabi_uldivmod>
 800a262:	4603      	mov	r3, r0
 800a264:	460c      	mov	r4, r1
 800a266:	461a      	mov	r2, r3
 800a268:	4b2c      	ldr	r3, [pc, #176]	; (800a31c <UART_SetConfig+0x384>)
 800a26a:	fba3 1302 	umull	r1, r3, r3, r2
 800a26e:	095b      	lsrs	r3, r3, #5
 800a270:	2164      	movs	r1, #100	; 0x64
 800a272:	fb01 f303 	mul.w	r3, r1, r3
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	3332      	adds	r3, #50	; 0x32
 800a27c:	4a27      	ldr	r2, [pc, #156]	; (800a31c <UART_SetConfig+0x384>)
 800a27e:	fba2 2303 	umull	r2, r3, r2, r3
 800a282:	095b      	lsrs	r3, r3, #5
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a28a:	4498      	add	r8, r3
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	461d      	mov	r5, r3
 800a290:	f04f 0600 	mov.w	r6, #0
 800a294:	46a9      	mov	r9, r5
 800a296:	46b2      	mov	sl, r6
 800a298:	eb19 0309 	adds.w	r3, r9, r9
 800a29c:	eb4a 040a 	adc.w	r4, sl, sl
 800a2a0:	4699      	mov	r9, r3
 800a2a2:	46a2      	mov	sl, r4
 800a2a4:	eb19 0905 	adds.w	r9, r9, r5
 800a2a8:	eb4a 0a06 	adc.w	sl, sl, r6
 800a2ac:	f04f 0100 	mov.w	r1, #0
 800a2b0:	f04f 0200 	mov.w	r2, #0
 800a2b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a2bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	4692      	mov	sl, r2
 800a2c4:	eb19 0005 	adds.w	r0, r9, r5
 800a2c8:	eb4a 0106 	adc.w	r1, sl, r6
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	461d      	mov	r5, r3
 800a2d2:	f04f 0600 	mov.w	r6, #0
 800a2d6:	196b      	adds	r3, r5, r5
 800a2d8:	eb46 0406 	adc.w	r4, r6, r6
 800a2dc:	461a      	mov	r2, r3
 800a2de:	4623      	mov	r3, r4
 800a2e0:	f7f5 ff86 	bl	80001f0 <__aeabi_uldivmod>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <UART_SetConfig+0x384>)
 800a2ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a2f0:	095b      	lsrs	r3, r3, #5
 800a2f2:	2164      	movs	r1, #100	; 0x64
 800a2f4:	fb01 f303 	mul.w	r3, r1, r3
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	3332      	adds	r3, #50	; 0x32
 800a2fe:	4a07      	ldr	r2, [pc, #28]	; (800a31c <UART_SetConfig+0x384>)
 800a300:	fba2 2303 	umull	r2, r3, r2, r3
 800a304:	095b      	lsrs	r3, r3, #5
 800a306:	f003 0207 	and.w	r2, r3, #7
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4442      	add	r2, r8
 800a310:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a312:	e1b2      	b.n	800a67a <UART_SetConfig+0x6e2>
 800a314:	40011000 	.word	0x40011000
 800a318:	40011400 	.word	0x40011400
 800a31c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4ad7      	ldr	r2, [pc, #860]	; (800a684 <UART_SetConfig+0x6ec>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d005      	beq.n	800a336 <UART_SetConfig+0x39e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4ad6      	ldr	r2, [pc, #856]	; (800a688 <UART_SetConfig+0x6f0>)
 800a330:	4293      	cmp	r3, r2
 800a332:	f040 80d1 	bne.w	800a4d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a336:	f7fe f9d3 	bl	80086e0 <HAL_RCC_GetPCLK2Freq>
 800a33a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	469a      	mov	sl, r3
 800a340:	f04f 0b00 	mov.w	fp, #0
 800a344:	46d0      	mov	r8, sl
 800a346:	46d9      	mov	r9, fp
 800a348:	eb18 0308 	adds.w	r3, r8, r8
 800a34c:	eb49 0409 	adc.w	r4, r9, r9
 800a350:	4698      	mov	r8, r3
 800a352:	46a1      	mov	r9, r4
 800a354:	eb18 080a 	adds.w	r8, r8, sl
 800a358:	eb49 090b 	adc.w	r9, r9, fp
 800a35c:	f04f 0100 	mov.w	r1, #0
 800a360:	f04f 0200 	mov.w	r2, #0
 800a364:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a368:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a36c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a370:	4688      	mov	r8, r1
 800a372:	4691      	mov	r9, r2
 800a374:	eb1a 0508 	adds.w	r5, sl, r8
 800a378:	eb4b 0609 	adc.w	r6, fp, r9
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	4619      	mov	r1, r3
 800a382:	f04f 0200 	mov.w	r2, #0
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	f04f 0400 	mov.w	r4, #0
 800a38e:	0094      	lsls	r4, r2, #2
 800a390:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a394:	008b      	lsls	r3, r1, #2
 800a396:	461a      	mov	r2, r3
 800a398:	4623      	mov	r3, r4
 800a39a:	4628      	mov	r0, r5
 800a39c:	4631      	mov	r1, r6
 800a39e:	f7f5 ff27 	bl	80001f0 <__aeabi_uldivmod>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	4bb8      	ldr	r3, [pc, #736]	; (800a68c <UART_SetConfig+0x6f4>)
 800a3aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ae:	095b      	lsrs	r3, r3, #5
 800a3b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	469b      	mov	fp, r3
 800a3b8:	f04f 0c00 	mov.w	ip, #0
 800a3bc:	46d9      	mov	r9, fp
 800a3be:	46e2      	mov	sl, ip
 800a3c0:	eb19 0309 	adds.w	r3, r9, r9
 800a3c4:	eb4a 040a 	adc.w	r4, sl, sl
 800a3c8:	4699      	mov	r9, r3
 800a3ca:	46a2      	mov	sl, r4
 800a3cc:	eb19 090b 	adds.w	r9, r9, fp
 800a3d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a3d4:	f04f 0100 	mov.w	r1, #0
 800a3d8:	f04f 0200 	mov.w	r2, #0
 800a3dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a3e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a3e8:	4689      	mov	r9, r1
 800a3ea:	4692      	mov	sl, r2
 800a3ec:	eb1b 0509 	adds.w	r5, fp, r9
 800a3f0:	eb4c 060a 	adc.w	r6, ip, sl
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	f04f 0200 	mov.w	r2, #0
 800a3fe:	f04f 0300 	mov.w	r3, #0
 800a402:	f04f 0400 	mov.w	r4, #0
 800a406:	0094      	lsls	r4, r2, #2
 800a408:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a40c:	008b      	lsls	r3, r1, #2
 800a40e:	461a      	mov	r2, r3
 800a410:	4623      	mov	r3, r4
 800a412:	4628      	mov	r0, r5
 800a414:	4631      	mov	r1, r6
 800a416:	f7f5 feeb 	bl	80001f0 <__aeabi_uldivmod>
 800a41a:	4603      	mov	r3, r0
 800a41c:	460c      	mov	r4, r1
 800a41e:	461a      	mov	r2, r3
 800a420:	4b9a      	ldr	r3, [pc, #616]	; (800a68c <UART_SetConfig+0x6f4>)
 800a422:	fba3 1302 	umull	r1, r3, r3, r2
 800a426:	095b      	lsrs	r3, r3, #5
 800a428:	2164      	movs	r1, #100	; 0x64
 800a42a:	fb01 f303 	mul.w	r3, r1, r3
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	011b      	lsls	r3, r3, #4
 800a432:	3332      	adds	r3, #50	; 0x32
 800a434:	4a95      	ldr	r2, [pc, #596]	; (800a68c <UART_SetConfig+0x6f4>)
 800a436:	fba2 2303 	umull	r2, r3, r2, r3
 800a43a:	095b      	lsrs	r3, r3, #5
 800a43c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a440:	4498      	add	r8, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	469b      	mov	fp, r3
 800a446:	f04f 0c00 	mov.w	ip, #0
 800a44a:	46d9      	mov	r9, fp
 800a44c:	46e2      	mov	sl, ip
 800a44e:	eb19 0309 	adds.w	r3, r9, r9
 800a452:	eb4a 040a 	adc.w	r4, sl, sl
 800a456:	4699      	mov	r9, r3
 800a458:	46a2      	mov	sl, r4
 800a45a:	eb19 090b 	adds.w	r9, r9, fp
 800a45e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a462:	f04f 0100 	mov.w	r1, #0
 800a466:	f04f 0200 	mov.w	r2, #0
 800a46a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a46e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a476:	4689      	mov	r9, r1
 800a478:	4692      	mov	sl, r2
 800a47a:	eb1b 0509 	adds.w	r5, fp, r9
 800a47e:	eb4c 060a 	adc.w	r6, ip, sl
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	4619      	mov	r1, r3
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	f04f 0300 	mov.w	r3, #0
 800a490:	f04f 0400 	mov.w	r4, #0
 800a494:	0094      	lsls	r4, r2, #2
 800a496:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a49a:	008b      	lsls	r3, r1, #2
 800a49c:	461a      	mov	r2, r3
 800a49e:	4623      	mov	r3, r4
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	f7f5 fea4 	bl	80001f0 <__aeabi_uldivmod>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4b77      	ldr	r3, [pc, #476]	; (800a68c <UART_SetConfig+0x6f4>)
 800a4b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a4b4:	095b      	lsrs	r3, r3, #5
 800a4b6:	2164      	movs	r1, #100	; 0x64
 800a4b8:	fb01 f303 	mul.w	r3, r1, r3
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	011b      	lsls	r3, r3, #4
 800a4c0:	3332      	adds	r3, #50	; 0x32
 800a4c2:	4a72      	ldr	r2, [pc, #456]	; (800a68c <UART_SetConfig+0x6f4>)
 800a4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c8:	095b      	lsrs	r3, r3, #5
 800a4ca:	f003 020f 	and.w	r2, r3, #15
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4442      	add	r2, r8
 800a4d4:	609a      	str	r2, [r3, #8]
 800a4d6:	e0d0      	b.n	800a67a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4d8:	f7fe f8ee 	bl	80086b8 <HAL_RCC_GetPCLK1Freq>
 800a4dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	469a      	mov	sl, r3
 800a4e2:	f04f 0b00 	mov.w	fp, #0
 800a4e6:	46d0      	mov	r8, sl
 800a4e8:	46d9      	mov	r9, fp
 800a4ea:	eb18 0308 	adds.w	r3, r8, r8
 800a4ee:	eb49 0409 	adc.w	r4, r9, r9
 800a4f2:	4698      	mov	r8, r3
 800a4f4:	46a1      	mov	r9, r4
 800a4f6:	eb18 080a 	adds.w	r8, r8, sl
 800a4fa:	eb49 090b 	adc.w	r9, r9, fp
 800a4fe:	f04f 0100 	mov.w	r1, #0
 800a502:	f04f 0200 	mov.w	r2, #0
 800a506:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a50a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a50e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a512:	4688      	mov	r8, r1
 800a514:	4691      	mov	r9, r2
 800a516:	eb1a 0508 	adds.w	r5, sl, r8
 800a51a:	eb4b 0609 	adc.w	r6, fp, r9
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	4619      	mov	r1, r3
 800a524:	f04f 0200 	mov.w	r2, #0
 800a528:	f04f 0300 	mov.w	r3, #0
 800a52c:	f04f 0400 	mov.w	r4, #0
 800a530:	0094      	lsls	r4, r2, #2
 800a532:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a536:	008b      	lsls	r3, r1, #2
 800a538:	461a      	mov	r2, r3
 800a53a:	4623      	mov	r3, r4
 800a53c:	4628      	mov	r0, r5
 800a53e:	4631      	mov	r1, r6
 800a540:	f7f5 fe56 	bl	80001f0 <__aeabi_uldivmod>
 800a544:	4603      	mov	r3, r0
 800a546:	460c      	mov	r4, r1
 800a548:	461a      	mov	r2, r3
 800a54a:	4b50      	ldr	r3, [pc, #320]	; (800a68c <UART_SetConfig+0x6f4>)
 800a54c:	fba3 2302 	umull	r2, r3, r3, r2
 800a550:	095b      	lsrs	r3, r3, #5
 800a552:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	469b      	mov	fp, r3
 800a55a:	f04f 0c00 	mov.w	ip, #0
 800a55e:	46d9      	mov	r9, fp
 800a560:	46e2      	mov	sl, ip
 800a562:	eb19 0309 	adds.w	r3, r9, r9
 800a566:	eb4a 040a 	adc.w	r4, sl, sl
 800a56a:	4699      	mov	r9, r3
 800a56c:	46a2      	mov	sl, r4
 800a56e:	eb19 090b 	adds.w	r9, r9, fp
 800a572:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a576:	f04f 0100 	mov.w	r1, #0
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a58a:	4689      	mov	r9, r1
 800a58c:	4692      	mov	sl, r2
 800a58e:	eb1b 0509 	adds.w	r5, fp, r9
 800a592:	eb4c 060a 	adc.w	r6, ip, sl
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	4619      	mov	r1, r3
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	f04f 0400 	mov.w	r4, #0
 800a5a8:	0094      	lsls	r4, r2, #2
 800a5aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a5ae:	008b      	lsls	r3, r1, #2
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4623      	mov	r3, r4
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	f7f5 fe1a 	bl	80001f0 <__aeabi_uldivmod>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4b32      	ldr	r3, [pc, #200]	; (800a68c <UART_SetConfig+0x6f4>)
 800a5c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a5c8:	095b      	lsrs	r3, r3, #5
 800a5ca:	2164      	movs	r1, #100	; 0x64
 800a5cc:	fb01 f303 	mul.w	r3, r1, r3
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	011b      	lsls	r3, r3, #4
 800a5d4:	3332      	adds	r3, #50	; 0x32
 800a5d6:	4a2d      	ldr	r2, [pc, #180]	; (800a68c <UART_SetConfig+0x6f4>)
 800a5d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5dc:	095b      	lsrs	r3, r3, #5
 800a5de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5e2:	4498      	add	r8, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	469b      	mov	fp, r3
 800a5e8:	f04f 0c00 	mov.w	ip, #0
 800a5ec:	46d9      	mov	r9, fp
 800a5ee:	46e2      	mov	sl, ip
 800a5f0:	eb19 0309 	adds.w	r3, r9, r9
 800a5f4:	eb4a 040a 	adc.w	r4, sl, sl
 800a5f8:	4699      	mov	r9, r3
 800a5fa:	46a2      	mov	sl, r4
 800a5fc:	eb19 090b 	adds.w	r9, r9, fp
 800a600:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a604:	f04f 0100 	mov.w	r1, #0
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a610:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a614:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a618:	4689      	mov	r9, r1
 800a61a:	4692      	mov	sl, r2
 800a61c:	eb1b 0509 	adds.w	r5, fp, r9
 800a620:	eb4c 060a 	adc.w	r6, ip, sl
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	4619      	mov	r1, r3
 800a62a:	f04f 0200 	mov.w	r2, #0
 800a62e:	f04f 0300 	mov.w	r3, #0
 800a632:	f04f 0400 	mov.w	r4, #0
 800a636:	0094      	lsls	r4, r2, #2
 800a638:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a63c:	008b      	lsls	r3, r1, #2
 800a63e:	461a      	mov	r2, r3
 800a640:	4623      	mov	r3, r4
 800a642:	4628      	mov	r0, r5
 800a644:	4631      	mov	r1, r6
 800a646:	f7f5 fdd3 	bl	80001f0 <__aeabi_uldivmod>
 800a64a:	4603      	mov	r3, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	461a      	mov	r2, r3
 800a650:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <UART_SetConfig+0x6f4>)
 800a652:	fba3 1302 	umull	r1, r3, r3, r2
 800a656:	095b      	lsrs	r3, r3, #5
 800a658:	2164      	movs	r1, #100	; 0x64
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	011b      	lsls	r3, r3, #4
 800a662:	3332      	adds	r3, #50	; 0x32
 800a664:	4a09      	ldr	r2, [pc, #36]	; (800a68c <UART_SetConfig+0x6f4>)
 800a666:	fba2 2303 	umull	r2, r3, r2, r3
 800a66a:	095b      	lsrs	r3, r3, #5
 800a66c:	f003 020f 	and.w	r2, r3, #15
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4442      	add	r2, r8
 800a676:	609a      	str	r2, [r3, #8]
}
 800a678:	e7ff      	b.n	800a67a <UART_SetConfig+0x6e2>
 800a67a:	bf00      	nop
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a684:	40011000 	.word	0x40011000
 800a688:	40011400 	.word	0x40011400
 800a68c:	51eb851f 	.word	0x51eb851f

0800a690 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d029      	beq.n	800a6fe <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a6b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6ba:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6c4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a6ca:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a6d0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a6d6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a6dc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a6e2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a6e8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a6ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	e034      	b.n	800a768 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a70a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a714:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a71a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	4313      	orrs	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a72e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a732:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a73c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a742:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a748:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a74e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a754:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	4313      	orrs	r3, r2
 800a75a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a776:	b480      	push	{r7}
 800a778:	b087      	sub	sp, #28
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d02e      	beq.n	800a7ee <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a79c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a7ac:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a7b6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a7c0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a7ca:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a7d4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	609a      	str	r2, [r3, #8]
 800a7ec:	e03b      	b.n	800a866 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7fe:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	3b01      	subs	r3, #1
 800a806:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a810:	4313      	orrs	r3, r2
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a824:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	3b01      	subs	r3, #1
 800a832:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a834:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a83e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	3b01      	subs	r3, #1
 800a846:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a848:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	3b01      	subs	r3, #1
 800a850:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a852:	4313      	orrs	r3, r2
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4313      	orrs	r3, r2
 800a858:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	371c      	adds	r7, #28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a890:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	3b01      	subs	r3, #1
 800a898:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a89a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a8ac:	f7f9 fb12 	bl	8003ed4 <HAL_GetTick>
 800a8b0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a8b2:	e010      	b.n	800a8d6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d00c      	beq.n	800a8d6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d007      	beq.n	800a8d2 <FMC_SDRAM_SendCommand+0x5e>
 800a8c2:	f7f9 fb07 	bl	8003ed4 <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d201      	bcs.n	800a8d6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e006      	b.n	800a8e4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	d0e8      	beq.n	800a8b4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	695a      	ldr	r2, [r3, #20]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	431a      	orrs	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f043 0201 	orr.w	r2, r3, #1
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f023 0201 	bic.w	r2, r3, #1
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
	...

0800a958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	019b      	lsls	r3, r3, #6
 800a96a:	f043 0220 	orr.w	r2, r3, #32
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4a09      	ldr	r2, [pc, #36]	; (800a9a0 <USB_FlushTxFifo+0x48>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d901      	bls.n	800a984 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e006      	b.n	800a992 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	f003 0320 	and.w	r3, r3, #32
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	d0f0      	beq.n	800a972 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	00030d40 	.word	0x00030d40

0800a9a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2210      	movs	r2, #16
 800a9b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <USB_FlushRxFifo+0x40>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d901      	bls.n	800a9c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e006      	b.n	800a9d6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	f003 0310 	and.w	r3, r3, #16
 800a9d0:	2b10      	cmp	r3, #16
 800a9d2:	d0f0      	beq.n	800a9b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	00030d40 	.word	0x00030d40

0800a9e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b089      	sub	sp, #36	; 0x24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	3303      	adds	r3, #3
 800aa02:	089b      	lsrs	r3, r3, #2
 800aa04:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800aa06:	2300      	movs	r3, #0
 800aa08:	61bb      	str	r3, [r7, #24]
 800aa0a:	e00b      	b.n	800aa24 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	3301      	adds	r3, #1
 800aa22:	61bb      	str	r3, [r7, #24]
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d3ef      	bcc.n	800aa0c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800aa2c:	69fb      	ldr	r3, [r7, #28]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3724      	adds	r7, #36	; 0x24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b085      	sub	sp, #20
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa52:	68fb      	ldr	r3, [r7, #12]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa9a:	f023 0303 	bic.w	r3, r3, #3
 800aa9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aab4:	4313      	orrs	r3, r2
 800aab6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aab8:	78fb      	ldrb	r3, [r7, #3]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d107      	bne.n	800aace <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aac4:	461a      	mov	r2, r3
 800aac6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aaca:	6053      	str	r3, [r2, #4]
 800aacc:	e009      	b.n	800aae2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800aace:	78fb      	ldrb	r3, [r7, #3]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d106      	bne.n	800aae2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aada:	461a      	mov	r2, r3
 800aadc:	f241 7370 	movw	r3, #6000	; 0x1770
 800aae0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	b29b      	uxth	r3, r3
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b087      	sub	sp, #28
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ab22:	78fb      	ldrb	r3, [r7, #3]
 800ab24:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	0c9b      	lsrs	r3, r3, #18
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <USB_HC_Halt+0x3a>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d16c      	bne.n	800ac26 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	0151      	lsls	r1, r2, #5
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	440a      	add	r2, r1
 800ab62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab6a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d143      	bne.n	800ac00 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	0151      	lsls	r1, r2, #5
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	440a      	add	r2, r1
 800abae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	0151      	lsls	r1, r2, #5
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	440a      	add	r2, r1
 800abce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abd6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	3301      	adds	r3, #1
 800abdc:	617b      	str	r3, [r7, #20]
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abe4:	d81d      	bhi.n	800ac22 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	015a      	lsls	r2, r3, #5
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	4413      	add	r3, r2
 800abee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abfc:	d0ec      	beq.n	800abd8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800abfe:	e080      	b.n	800ad02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	0151      	lsls	r1, r2, #5
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	440a      	add	r2, r1
 800ac16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac1e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac20:	e06f      	b.n	800ad02 <USB_HC_Halt+0x1f0>
          break;
 800ac22:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac24:	e06d      	b.n	800ad02 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac44:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d143      	bne.n	800acde <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac74:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	0151      	lsls	r1, r2, #5
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	440a      	add	r2, r1
 800ac8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac94:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	0151      	lsls	r1, r2, #5
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	440a      	add	r2, r1
 800acac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acb4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	3301      	adds	r3, #1
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acc2:	d81d      	bhi.n	800ad00 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	4413      	add	r3, r2
 800accc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acda:	d0ec      	beq.n	800acb6 <USB_HC_Halt+0x1a4>
 800acdc:	e011      	b.n	800ad02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	0151      	lsls	r1, r2, #5
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	440a      	add	r2, r1
 800acf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	e000      	b.n	800ad02 <USB_HC_Halt+0x1f0>
          break;
 800ad00:	bf00      	nop
    }
  }

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	371c      	adds	r7, #28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff fe07 	bl	800a934 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ad26:	2110      	movs	r1, #16
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff fe15 	bl	800a958 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fe38 	bl	800a9a4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ad34:	2300      	movs	r3, #0
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	e01f      	b.n	800ad7a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	015a      	lsls	r2, r3, #5
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	4413      	add	r3, r2
 800ad42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad60:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6e:	461a      	mov	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	3301      	adds	r3, #1
 800ad78:	613b      	str	r3, [r7, #16]
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b0f      	cmp	r3, #15
 800ad7e:	d9dc      	bls.n	800ad3a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ad80:	2300      	movs	r3, #0
 800ad82:	613b      	str	r3, [r7, #16]
 800ad84:	e034      	b.n	800adf0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad9c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ada4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adba:	461a      	mov	r2, r3
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	3301      	adds	r3, #1
 800adc4:	617b      	str	r3, [r7, #20]
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adcc:	d80c      	bhi.n	800ade8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	4413      	add	r3, r2
 800add6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ade4:	d0ec      	beq.n	800adc0 <USB_StopHost+0xb0>
 800ade6:	e000      	b.n	800adea <USB_StopHost+0xda>
        break;
 800ade8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	3301      	adds	r3, #1
 800adee:	613b      	str	r3, [r7, #16]
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	2b0f      	cmp	r3, #15
 800adf4:	d9c7      	bls.n	800ad86 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adfc:	461a      	mov	r2, r3
 800adfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ae02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff fd80 	bl	800a912 <USB_EnableGlobalInt>

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae2a:	1c5a      	adds	r2, r3, #1
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f804 	bl	800ae40 <USBH_HandleSof>
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b0b      	cmp	r3, #11
 800ae50:	d10a      	bne.n	800ae68 <USBH_HandleSof+0x28>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
  }
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae94:	2200      	movs	r2, #0
 800ae96:	4619      	mov	r1, r3
 800ae98:	f000 f8ae 	bl	800aff8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ae9c:	bf00      	nop
}
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aeb4:	bf00      	nop
}
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aef4:	2200      	movs	r2, #0
 800aef6:	4619      	mov	r1, r3
 800aef8:	f000 f87e 	bl	800aff8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 f8fc 	bl	800c124 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	791b      	ldrb	r3, [r3, #4]
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f830 	bl	800af98 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	795b      	ldrb	r3, [r3, #5]
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f82a 	bl	800af98 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af58:	2200      	movs	r2, #0
 800af5a:	4619      	mov	r1, r3
 800af5c:	f000 f84c 	bl	800aff8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af86:	2200      	movs	r2, #0
 800af88:	4619      	mov	r1, r3
 800af8a:	f000 f835 	bl	800aff8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800afa4:	78fb      	ldrb	r3, [r7, #3]
 800afa6:	2b0a      	cmp	r3, #10
 800afa8:	d80d      	bhi.n	800afc6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	33e0      	adds	r3, #224	; 0xe0
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	78fb      	ldrb	r3, [r7, #3]
 800afb8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	33e0      	adds	r3, #224	; 0xe0
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	440b      	add	r3, r1
 800afc4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afda:	f3ef 8305 	mrs	r3, IPSR
 800afde:	607b      	str	r3, [r7, #4]
  return(result);
 800afe0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bf14      	ite	ne
 800afe6:	2301      	movne	r3, #1
 800afe8:	2300      	moveq	r3, #0
 800afea:	b2db      	uxtb	r3, r3
}
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b004:	2300      	movs	r3, #0
 800b006:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <osMessagePut+0x1e>
    ticks = 1;
 800b012:	2301      	movs	r3, #1
 800b014:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b016:	f7ff ffdd 	bl	800afd4 <inHandlerMode>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d018      	beq.n	800b052 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b020:	f107 0210 	add.w	r2, r7, #16
 800b024:	f107 0108 	add.w	r1, r7, #8
 800b028:	2300      	movs	r3, #0
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 f9a6 	bl	800b37c <xQueueGenericSendFromISR>
 800b030:	4603      	mov	r3, r0
 800b032:	2b01      	cmp	r3, #1
 800b034:	d001      	beq.n	800b03a <osMessagePut+0x42>
      return osErrorOS;
 800b036:	23ff      	movs	r3, #255	; 0xff
 800b038:	e018      	b.n	800b06c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d014      	beq.n	800b06a <osMessagePut+0x72>
 800b040:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <osMessagePut+0x7c>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	e00b      	b.n	800b06a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b052:	f107 0108 	add.w	r1, r7, #8
 800b056:	2300      	movs	r3, #0
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 f894 	bl	800b188 <xQueueGenericSend>
 800b060:	4603      	mov	r3, r0
 800b062:	2b01      	cmp	r3, #1
 800b064:	d001      	beq.n	800b06a <osMessagePut+0x72>
      return osErrorOS;
 800b066:	23ff      	movs	r3, #255	; 0xff
 800b068:	e000      	b.n	800b06c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	689a      	ldr	r2, [r3, #8]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	601a      	str	r2, [r3, #0]
}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d6:	d103      	bne.n	800b0e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	e00c      	b.n	800b0fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	e002      	b.n	800b0ee <vListInsert+0x2e>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d2f6      	bcs.n	800b0e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	601a      	str	r2, [r3, #0]
}
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b132:	b480      	push	{r7}
 800b134:	b085      	sub	sp, #20
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	6892      	ldr	r2, [r2, #8]
 800b148:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	6852      	ldr	r2, [r2, #4]
 800b152:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d103      	bne.n	800b166 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689a      	ldr	r2, [r3, #8]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	1e5a      	subs	r2, r3, #1
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
	...

0800b188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08e      	sub	sp, #56	; 0x38
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b196:	2300      	movs	r3, #0
 800b198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d109      	bne.n	800b1b8 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b6:	e7fe      	b.n	800b1b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <xQueueGenericSend+0x3e>
 800b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <xQueueGenericSend+0x42>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <xQueueGenericSend+0x44>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d109      	bne.n	800b1e4 <xQueueGenericSend+0x5c>
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b1e2:	e7fe      	b.n	800b1e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d103      	bne.n	800b1f2 <xQueueGenericSend+0x6a>
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d101      	bne.n	800b1f6 <xQueueGenericSend+0x6e>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <xQueueGenericSend+0x70>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d109      	bne.n	800b210 <xQueueGenericSend+0x88>
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	623b      	str	r3, [r7, #32]
 800b20e:	e7fe      	b.n	800b20e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b210:	f000 fd26 	bl	800bc60 <xTaskGetSchedulerState>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d102      	bne.n	800b220 <xQueueGenericSend+0x98>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <xQueueGenericSend+0x9c>
 800b220:	2301      	movs	r3, #1
 800b222:	e000      	b.n	800b226 <xQueueGenericSend+0x9e>
 800b224:	2300      	movs	r3, #0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d109      	bne.n	800b23e <xQueueGenericSend+0xb6>
 800b22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22e:	f383 8811 	msr	BASEPRI, r3
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	e7fe      	b.n	800b23c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b23e:	f000 fe2b 	bl	800be98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d302      	bcc.n	800b254 <xQueueGenericSend+0xcc>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b02      	cmp	r3, #2
 800b252:	d129      	bne.n	800b2a8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b25a:	f000 f923 	bl	800b4a4 <prvCopyDataToQueue>
 800b25e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	2b00      	cmp	r3, #0
 800b266:	d010      	beq.n	800b28a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	3324      	adds	r3, #36	; 0x24
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 fbf3 	bl	800ba58 <xTaskRemoveFromEventList>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d013      	beq.n	800b2a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b278:	4b3f      	ldr	r3, [pc, #252]	; (800b378 <xQueueGenericSend+0x1f0>)
 800b27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	e00a      	b.n	800b2a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d007      	beq.n	800b2a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b290:	4b39      	ldr	r3, [pc, #228]	; (800b378 <xQueueGenericSend+0x1f0>)
 800b292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b2a0:	f000 fe28 	bl	800bef4 <vPortExitCritical>
				return pdPASS;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e063      	b.n	800b370 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d103      	bne.n	800b2b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2ae:	f000 fe21 	bl	800bef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e05c      	b.n	800b370 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d106      	bne.n	800b2ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2bc:	f107 0314 	add.w	r3, r7, #20
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fc2b 	bl	800bb1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2ca:	f000 fe13 	bl	800bef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2ce:	f000 f9bd 	bl	800b64c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2d2:	f000 fde1 	bl	800be98 <vPortEnterCritical>
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2dc:	b25b      	sxtb	r3, r3
 800b2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e2:	d103      	bne.n	800b2ec <xQueueGenericSend+0x164>
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2f2:	b25b      	sxtb	r3, r3
 800b2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f8:	d103      	bne.n	800b302 <xQueueGenericSend+0x17a>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b302:	f000 fdf7 	bl	800bef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b306:	1d3a      	adds	r2, r7, #4
 800b308:	f107 0314 	add.w	r3, r7, #20
 800b30c:	4611      	mov	r1, r2
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 fc1a 	bl	800bb48 <xTaskCheckForTimeOut>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d124      	bne.n	800b364 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b31a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b31c:	f000 f97e 	bl	800b61c <prvIsQueueFull>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d018      	beq.n	800b358 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b328:	3310      	adds	r3, #16
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 fb6e 	bl	800ba10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b336:	f000 f91f 	bl	800b578 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b33a:	f000 f995 	bl	800b668 <xTaskResumeAll>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	f47f af7c 	bne.w	800b23e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b346:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <xQueueGenericSend+0x1f0>)
 800b348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	e772      	b.n	800b23e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b35a:	f000 f90d 	bl	800b578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b35e:	f000 f983 	bl	800b668 <xTaskResumeAll>
 800b362:	e76c      	b.n	800b23e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b366:	f000 f907 	bl	800b578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b36a:	f000 f97d 	bl	800b668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b36e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b370:	4618      	mov	r0, r3
 800b372:	3738      	adds	r7, #56	; 0x38
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	e000ed04 	.word	0xe000ed04

0800b37c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b08e      	sub	sp, #56	; 0x38
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <xQueueGenericSendFromISR+0x2c>
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3a6:	e7fe      	b.n	800b3a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d103      	bne.n	800b3b6 <xQueueGenericSendFromISR+0x3a>
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <xQueueGenericSendFromISR+0x3e>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e000      	b.n	800b3bc <xQueueGenericSendFromISR+0x40>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d109      	bne.n	800b3d4 <xQueueGenericSendFromISR+0x58>
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	623b      	str	r3, [r7, #32]
 800b3d2:	e7fe      	b.n	800b3d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d103      	bne.n	800b3e2 <xQueueGenericSendFromISR+0x66>
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d101      	bne.n	800b3e6 <xQueueGenericSendFromISR+0x6a>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <xQueueGenericSendFromISR+0x6c>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d109      	bne.n	800b400 <xQueueGenericSendFromISR+0x84>
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	61fb      	str	r3, [r7, #28]
 800b3fe:	e7fe      	b.n	800b3fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b400:	f000 fdfa 	bl	800bff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b404:	f3ef 8211 	mrs	r2, BASEPRI
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	61ba      	str	r2, [r7, #24]
 800b41a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b41c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b41e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b428:	429a      	cmp	r2, r3
 800b42a:	d302      	bcc.n	800b432 <xQueueGenericSendFromISR+0xb6>
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d12c      	bne.n	800b48c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	68b9      	ldr	r1, [r7, #8]
 800b440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b442:	f000 f82f 	bl	800b4a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b446:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44e:	d112      	bne.n	800b476 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	2b00      	cmp	r3, #0
 800b456:	d016      	beq.n	800b486 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	3324      	adds	r3, #36	; 0x24
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 fafb 	bl	800ba58 <xTaskRemoveFromEventList>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00e      	beq.n	800b486 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00b      	beq.n	800b486 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e007      	b.n	800b486 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b47a:	3301      	adds	r3, #1
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	b25a      	sxtb	r2, r3
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b486:	2301      	movs	r3, #1
 800b488:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b48a:	e001      	b.n	800b490 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	637b      	str	r3, [r7, #52]	; 0x34
 800b490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b492:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3738      	adds	r7, #56	; 0x38
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10d      	bne.n	800b4de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d14d      	bne.n	800b566 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 fbe4 	bl	800bc9c <xTaskPriorityDisinherit>
 800b4d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	609a      	str	r2, [r3, #8]
 800b4dc:	e043      	b.n	800b566 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d119      	bne.n	800b518 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6858      	ldr	r0, [r3, #4]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	68b9      	ldr	r1, [r7, #8]
 800b4f0:	f000 fe9e 	bl	800c230 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fc:	441a      	add	r2, r3
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d32b      	bcc.n	800b566 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	605a      	str	r2, [r3, #4]
 800b516:	e026      	b.n	800b566 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68d8      	ldr	r0, [r3, #12]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b520:	461a      	mov	r2, r3
 800b522:	68b9      	ldr	r1, [r7, #8]
 800b524:	f000 fe84 	bl	800c230 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	68da      	ldr	r2, [r3, #12]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b530:	425b      	negs	r3, r3
 800b532:	441a      	add	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68da      	ldr	r2, [r3, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	429a      	cmp	r2, r3
 800b542:	d207      	bcs.n	800b554 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	689a      	ldr	r2, [r3, #8]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54c:	425b      	negs	r3, r3
 800b54e:	441a      	add	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b02      	cmp	r3, #2
 800b558:	d105      	bne.n	800b566 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	3b01      	subs	r3, #1
 800b564:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b56e:	697b      	ldr	r3, [r7, #20]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b580:	f000 fc8a 	bl	800be98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b58a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b58c:	e011      	b.n	800b5b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b592:	2b00      	cmp	r3, #0
 800b594:	d012      	beq.n	800b5bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3324      	adds	r3, #36	; 0x24
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 fa5c 	bl	800ba58 <xTaskRemoveFromEventList>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5a6:	f000 fb2f 	bl	800bc08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	dce9      	bgt.n	800b58e <prvUnlockQueue+0x16>
 800b5ba:	e000      	b.n	800b5be <prvUnlockQueue+0x46>
					break;
 800b5bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	22ff      	movs	r2, #255	; 0xff
 800b5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b5c6:	f000 fc95 	bl	800bef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5ca:	f000 fc65 	bl	800be98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5d6:	e011      	b.n	800b5fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d012      	beq.n	800b606 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3310      	adds	r3, #16
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 fa37 	bl	800ba58 <xTaskRemoveFromEventList>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b5f0:	f000 fb0a 	bl	800bc08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b600:	2b00      	cmp	r3, #0
 800b602:	dce9      	bgt.n	800b5d8 <prvUnlockQueue+0x60>
 800b604:	e000      	b.n	800b608 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b606:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	22ff      	movs	r2, #255	; 0xff
 800b60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b610:	f000 fc70 	bl	800bef4 <vPortExitCritical>
}
 800b614:	bf00      	nop
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b624:	f000 fc38 	bl	800be98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b630:	429a      	cmp	r2, r3
 800b632:	d102      	bne.n	800b63a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b634:	2301      	movs	r3, #1
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	e001      	b.n	800b63e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b63e:	f000 fc59 	bl	800bef4 <vPortExitCritical>

	return xReturn;
 800b642:	68fb      	ldr	r3, [r7, #12]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <vTaskSuspendAll+0x18>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3301      	adds	r3, #1
 800b656:	4a03      	ldr	r2, [pc, #12]	; (800b664 <vTaskSuspendAll+0x18>)
 800b658:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b65a:	bf00      	nop
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr
 800b664:	2000037c 	.word	0x2000037c

0800b668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b672:	2300      	movs	r3, #0
 800b674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b676:	4b41      	ldr	r3, [pc, #260]	; (800b77c <xTaskResumeAll+0x114>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d109      	bne.n	800b692 <xTaskResumeAll+0x2a>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	603b      	str	r3, [r7, #0]
 800b690:	e7fe      	b.n	800b690 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b692:	f000 fc01 	bl	800be98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b696:	4b39      	ldr	r3, [pc, #228]	; (800b77c <xTaskResumeAll+0x114>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3b01      	subs	r3, #1
 800b69c:	4a37      	ldr	r2, [pc, #220]	; (800b77c <xTaskResumeAll+0x114>)
 800b69e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a0:	4b36      	ldr	r3, [pc, #216]	; (800b77c <xTaskResumeAll+0x114>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d161      	bne.n	800b76c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6a8:	4b35      	ldr	r3, [pc, #212]	; (800b780 <xTaskResumeAll+0x118>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d05d      	beq.n	800b76c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6b0:	e02e      	b.n	800b710 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6b2:	4b34      	ldr	r3, [pc, #208]	; (800b784 <xTaskResumeAll+0x11c>)
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	3318      	adds	r3, #24
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff fd37 	bl	800b132 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff fd32 	bl	800b132 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	409a      	lsls	r2, r3
 800b6d6:	4b2c      	ldr	r3, [pc, #176]	; (800b788 <xTaskResumeAll+0x120>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	4a2a      	ldr	r2, [pc, #168]	; (800b788 <xTaskResumeAll+0x120>)
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4a27      	ldr	r2, [pc, #156]	; (800b78c <xTaskResumeAll+0x124>)
 800b6ee:	441a      	add	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7ff fcbe 	bl	800b078 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4b23      	ldr	r3, [pc, #140]	; (800b790 <xTaskResumeAll+0x128>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	429a      	cmp	r2, r3
 800b708:	d302      	bcc.n	800b710 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b70a:	4b22      	ldr	r3, [pc, #136]	; (800b794 <xTaskResumeAll+0x12c>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b710:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <xTaskResumeAll+0x11c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1cc      	bne.n	800b6b2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b71e:	f000 fa7f 	bl	800bc20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b722:	4b1d      	ldr	r3, [pc, #116]	; (800b798 <xTaskResumeAll+0x130>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d010      	beq.n	800b750 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b72e:	f000 f837 	bl	800b7a0 <xTaskIncrementTick>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b738:	4b16      	ldr	r3, [pc, #88]	; (800b794 <xTaskResumeAll+0x12c>)
 800b73a:	2201      	movs	r2, #1
 800b73c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3b01      	subs	r3, #1
 800b742:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1f1      	bne.n	800b72e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b74a:	4b13      	ldr	r3, [pc, #76]	; (800b798 <xTaskResumeAll+0x130>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b750:	4b10      	ldr	r3, [pc, #64]	; (800b794 <xTaskResumeAll+0x12c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d009      	beq.n	800b76c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b758:	2301      	movs	r3, #1
 800b75a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b75c:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <xTaskResumeAll+0x134>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b76c:	f000 fbc2 	bl	800bef4 <vPortExitCritical>

	return xAlreadyYielded;
 800b770:	68bb      	ldr	r3, [r7, #8]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	2000037c 	.word	0x2000037c
 800b780:	2000035c 	.word	0x2000035c
 800b784:	20000334 	.word	0x20000334
 800b788:	20000364 	.word	0x20000364
 800b78c:	200002a0 	.word	0x200002a0
 800b790:	2000029c 	.word	0x2000029c
 800b794:	20000370 	.word	0x20000370
 800b798:	2000036c 	.word	0x2000036c
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7aa:	4b4e      	ldr	r3, [pc, #312]	; (800b8e4 <xTaskIncrementTick+0x144>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f040 8087 	bne.w	800b8c2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b7b4:	4b4c      	ldr	r3, [pc, #304]	; (800b8e8 <xTaskIncrementTick+0x148>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b7bc:	4a4a      	ldr	r2, [pc, #296]	; (800b8e8 <xTaskIncrementTick+0x148>)
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d11f      	bne.n	800b808 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b7c8:	4b48      	ldr	r3, [pc, #288]	; (800b8ec <xTaskIncrementTick+0x14c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <xTaskIncrementTick+0x46>
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	e7fe      	b.n	800b7e4 <xTaskIncrementTick+0x44>
 800b7e6:	4b41      	ldr	r3, [pc, #260]	; (800b8ec <xTaskIncrementTick+0x14c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	4b40      	ldr	r3, [pc, #256]	; (800b8f0 <xTaskIncrementTick+0x150>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a3e      	ldr	r2, [pc, #248]	; (800b8ec <xTaskIncrementTick+0x14c>)
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	4a3e      	ldr	r2, [pc, #248]	; (800b8f0 <xTaskIncrementTick+0x150>)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6013      	str	r3, [r2, #0]
 800b7fa:	4b3e      	ldr	r3, [pc, #248]	; (800b8f4 <xTaskIncrementTick+0x154>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3301      	adds	r3, #1
 800b800:	4a3c      	ldr	r2, [pc, #240]	; (800b8f4 <xTaskIncrementTick+0x154>)
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	f000 fa0c 	bl	800bc20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b808:	4b3b      	ldr	r3, [pc, #236]	; (800b8f8 <xTaskIncrementTick+0x158>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d348      	bcc.n	800b8a4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b812:	4b36      	ldr	r3, [pc, #216]	; (800b8ec <xTaskIncrementTick+0x14c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d104      	bne.n	800b826 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b81c:	4b36      	ldr	r3, [pc, #216]	; (800b8f8 <xTaskIncrementTick+0x158>)
 800b81e:	f04f 32ff 	mov.w	r2, #4294967295
 800b822:	601a      	str	r2, [r3, #0]
					break;
 800b824:	e03e      	b.n	800b8a4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b826:	4b31      	ldr	r3, [pc, #196]	; (800b8ec <xTaskIncrementTick+0x14c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d203      	bcs.n	800b846 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b83e:	4a2e      	ldr	r2, [pc, #184]	; (800b8f8 <xTaskIncrementTick+0x158>)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b844:	e02e      	b.n	800b8a4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	3304      	adds	r3, #4
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff fc71 	bl	800b132 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b854:	2b00      	cmp	r3, #0
 800b856:	d004      	beq.n	800b862 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	3318      	adds	r3, #24
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7ff fc68 	bl	800b132 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b866:	2201      	movs	r2, #1
 800b868:	409a      	lsls	r2, r3
 800b86a:	4b24      	ldr	r3, [pc, #144]	; (800b8fc <xTaskIncrementTick+0x15c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4313      	orrs	r3, r2
 800b870:	4a22      	ldr	r2, [pc, #136]	; (800b8fc <xTaskIncrementTick+0x15c>)
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b878:	4613      	mov	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4a1f      	ldr	r2, [pc, #124]	; (800b900 <xTaskIncrementTick+0x160>)
 800b882:	441a      	add	r2, r3
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	3304      	adds	r3, #4
 800b888:	4619      	mov	r1, r3
 800b88a:	4610      	mov	r0, r2
 800b88c:	f7ff fbf4 	bl	800b078 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b894:	4b1b      	ldr	r3, [pc, #108]	; (800b904 <xTaskIncrementTick+0x164>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d3b9      	bcc.n	800b812 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8a2:	e7b6      	b.n	800b812 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b8a4:	4b17      	ldr	r3, [pc, #92]	; (800b904 <xTaskIncrementTick+0x164>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8aa:	4915      	ldr	r1, [pc, #84]	; (800b900 <xTaskIncrementTick+0x160>)
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	440b      	add	r3, r1
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d907      	bls.n	800b8cc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	617b      	str	r3, [r7, #20]
 800b8c0:	e004      	b.n	800b8cc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b8c2:	4b11      	ldr	r3, [pc, #68]	; (800b908 <xTaskIncrementTick+0x168>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	4a0f      	ldr	r2, [pc, #60]	; (800b908 <xTaskIncrementTick+0x168>)
 800b8ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <xTaskIncrementTick+0x16c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b8d8:	697b      	ldr	r3, [r7, #20]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	2000037c 	.word	0x2000037c
 800b8e8:	20000360 	.word	0x20000360
 800b8ec:	2000032c 	.word	0x2000032c
 800b8f0:	20000330 	.word	0x20000330
 800b8f4:	20000374 	.word	0x20000374
 800b8f8:	20000378 	.word	0x20000378
 800b8fc:	20000364 	.word	0x20000364
 800b900:	200002a0 	.word	0x200002a0
 800b904:	2000029c 	.word	0x2000029c
 800b908:	2000036c 	.word	0x2000036c
 800b90c:	20000370 	.word	0x20000370

0800b910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b916:	4b39      	ldr	r3, [pc, #228]	; (800b9fc <vTaskSwitchContext+0xec>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b91e:	4b38      	ldr	r3, [pc, #224]	; (800ba00 <vTaskSwitchContext+0xf0>)
 800b920:	2201      	movs	r2, #1
 800b922:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b924:	e065      	b.n	800b9f2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800b926:	4b36      	ldr	r3, [pc, #216]	; (800ba00 <vTaskSwitchContext+0xf0>)
 800b928:	2200      	movs	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b92c:	4b35      	ldr	r3, [pc, #212]	; (800ba04 <vTaskSwitchContext+0xf4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b938:	61bb      	str	r3, [r7, #24]
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	429a      	cmp	r2, r3
 800b942:	d111      	bne.n	800b968 <vTaskSwitchContext+0x58>
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	3304      	adds	r3, #4
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d10b      	bne.n	800b968 <vTaskSwitchContext+0x58>
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	3308      	adds	r3, #8
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d105      	bne.n	800b968 <vTaskSwitchContext+0x58>
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	330c      	adds	r3, #12
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	429a      	cmp	r2, r3
 800b966:	d008      	beq.n	800b97a <vTaskSwitchContext+0x6a>
 800b968:	4b26      	ldr	r3, [pc, #152]	; (800ba04 <vTaskSwitchContext+0xf4>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	4b25      	ldr	r3, [pc, #148]	; (800ba04 <vTaskSwitchContext+0xf4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	3334      	adds	r3, #52	; 0x34
 800b972:	4619      	mov	r1, r3
 800b974:	4610      	mov	r0, r2
 800b976:	f7f4 ff37 	bl	80007e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b97a:	4b23      	ldr	r3, [pc, #140]	; (800ba08 <vTaskSwitchContext+0xf8>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	fab3 f383 	clz	r3, r3
 800b986:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	f1c3 031f 	rsb	r3, r3, #31
 800b98e:	617b      	str	r3, [r7, #20]
 800b990:	491e      	ldr	r1, [pc, #120]	; (800ba0c <vTaskSwitchContext+0xfc>)
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	440b      	add	r3, r1
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d109      	bne.n	800b9b8 <vTaskSwitchContext+0xa8>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	e7fe      	b.n	800b9b6 <vTaskSwitchContext+0xa6>
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4a12      	ldr	r2, [pc, #72]	; (800ba0c <vTaskSwitchContext+0xfc>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	613b      	str	r3, [r7, #16]
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	605a      	str	r2, [r3, #4]
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	3308      	adds	r3, #8
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d104      	bne.n	800b9e8 <vTaskSwitchContext+0xd8>
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	605a      	str	r2, [r3, #4]
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	4a05      	ldr	r2, [pc, #20]	; (800ba04 <vTaskSwitchContext+0xf4>)
 800b9f0:	6013      	str	r3, [r2, #0]
}
 800b9f2:	bf00      	nop
 800b9f4:	3720      	adds	r7, #32
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	2000037c 	.word	0x2000037c
 800ba00:	20000370 	.word	0x20000370
 800ba04:	2000029c 	.word	0x2000029c
 800ba08:	20000364 	.word	0x20000364
 800ba0c:	200002a0 	.word	0x200002a0

0800ba10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d109      	bne.n	800ba34 <vTaskPlaceOnEventList+0x24>
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	60fb      	str	r3, [r7, #12]
 800ba32:	e7fe      	b.n	800ba32 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba34:	4b07      	ldr	r3, [pc, #28]	; (800ba54 <vTaskPlaceOnEventList+0x44>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3318      	adds	r3, #24
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff fb3f 	bl	800b0c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba42:	2101      	movs	r1, #1
 800ba44:	6838      	ldr	r0, [r7, #0]
 800ba46:	f000 f9ad 	bl	800bda4 <prvAddCurrentTaskToDelayedList>
}
 800ba4a:	bf00      	nop
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	2000029c 	.word	0x2000029c

0800ba58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d109      	bne.n	800ba82 <xTaskRemoveFromEventList+0x2a>
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	e7fe      	b.n	800ba80 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	3318      	adds	r3, #24
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fb53 	bl	800b132 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba8c:	4b1d      	ldr	r3, [pc, #116]	; (800bb04 <xTaskRemoveFromEventList+0xac>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d11c      	bne.n	800bace <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fb4a 	bl	800b132 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa2:	2201      	movs	r2, #1
 800baa4:	409a      	lsls	r2, r3
 800baa6:	4b18      	ldr	r3, [pc, #96]	; (800bb08 <xTaskRemoveFromEventList+0xb0>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4313      	orrs	r3, r2
 800baac:	4a16      	ldr	r2, [pc, #88]	; (800bb08 <xTaskRemoveFromEventList+0xb0>)
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4a13      	ldr	r2, [pc, #76]	; (800bb0c <xTaskRemoveFromEventList+0xb4>)
 800babe:	441a      	add	r2, r3
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	3304      	adds	r3, #4
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f7ff fad6 	bl	800b078 <vListInsertEnd>
 800bacc:	e005      	b.n	800bada <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	3318      	adds	r3, #24
 800bad2:	4619      	mov	r1, r3
 800bad4:	480e      	ldr	r0, [pc, #56]	; (800bb10 <xTaskRemoveFromEventList+0xb8>)
 800bad6:	f7ff facf 	bl	800b078 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bade:	4b0d      	ldr	r3, [pc, #52]	; (800bb14 <xTaskRemoveFromEventList+0xbc>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d905      	bls.n	800baf4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bae8:	2301      	movs	r3, #1
 800baea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800baec:	4b0a      	ldr	r3, [pc, #40]	; (800bb18 <xTaskRemoveFromEventList+0xc0>)
 800baee:	2201      	movs	r2, #1
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	e001      	b.n	800baf8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800baf4:	2300      	movs	r3, #0
 800baf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800baf8:	697b      	ldr	r3, [r7, #20]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	2000037c 	.word	0x2000037c
 800bb08:	20000364 	.word	0x20000364
 800bb0c:	200002a0 	.word	0x200002a0
 800bb10:	20000334 	.word	0x20000334
 800bb14:	2000029c 	.word	0x2000029c
 800bb18:	20000370 	.word	0x20000370

0800bb1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <vTaskInternalSetTimeOutState+0x24>)
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb2c:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <vTaskInternalSetTimeOutState+0x28>)
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	605a      	str	r2, [r3, #4]
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	20000374 	.word	0x20000374
 800bb44:	20000360 	.word	0x20000360

0800bb48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d109      	bne.n	800bb6c <xTaskCheckForTimeOut+0x24>
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	613b      	str	r3, [r7, #16]
 800bb6a:	e7fe      	b.n	800bb6a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d109      	bne.n	800bb86 <xTaskCheckForTimeOut+0x3e>
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	e7fe      	b.n	800bb84 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bb86:	f000 f987 	bl	800be98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb8a:	4b1d      	ldr	r3, [pc, #116]	; (800bc00 <xTaskCheckForTimeOut+0xb8>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	69ba      	ldr	r2, [r7, #24]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba2:	d102      	bne.n	800bbaa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bba4:	2300      	movs	r3, #0
 800bba6:	61fb      	str	r3, [r7, #28]
 800bba8:	e023      	b.n	800bbf2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	4b15      	ldr	r3, [pc, #84]	; (800bc04 <xTaskCheckForTimeOut+0xbc>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d007      	beq.n	800bbc6 <xTaskCheckForTimeOut+0x7e>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	69ba      	ldr	r2, [r7, #24]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d302      	bcc.n	800bbc6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	61fb      	str	r3, [r7, #28]
 800bbc4:	e015      	b.n	800bbf2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d20b      	bcs.n	800bbe8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	1ad2      	subs	r2, r2, r3
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff ff9d 	bl	800bb1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	61fb      	str	r3, [r7, #28]
 800bbe6:	e004      	b.n	800bbf2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2200      	movs	r2, #0
 800bbec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbf2:	f000 f97f 	bl	800bef4 <vPortExitCritical>

	return xReturn;
 800bbf6:	69fb      	ldr	r3, [r7, #28]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3720      	adds	r7, #32
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20000360 	.word	0x20000360
 800bc04:	20000374 	.word	0x20000374

0800bc08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc0c:	4b03      	ldr	r3, [pc, #12]	; (800bc1c <vTaskMissedYield+0x14>)
 800bc0e:	2201      	movs	r2, #1
 800bc10:	601a      	str	r2, [r3, #0]
}
 800bc12:	bf00      	nop
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	20000370 	.word	0x20000370

0800bc20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc26:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <prvResetNextTaskUnblockTime+0x38>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d104      	bne.n	800bc3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc30:	4b0a      	ldr	r3, [pc, #40]	; (800bc5c <prvResetNextTaskUnblockTime+0x3c>)
 800bc32:	f04f 32ff 	mov.w	r2, #4294967295
 800bc36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc38:	e008      	b.n	800bc4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3a:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <prvResetNextTaskUnblockTime+0x38>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	4a04      	ldr	r2, [pc, #16]	; (800bc5c <prvResetNextTaskUnblockTime+0x3c>)
 800bc4a:	6013      	str	r3, [r2, #0]
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	2000032c 	.word	0x2000032c
 800bc5c:	20000378 	.word	0x20000378

0800bc60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc66:	4b0b      	ldr	r3, [pc, #44]	; (800bc94 <xTaskGetSchedulerState+0x34>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	607b      	str	r3, [r7, #4]
 800bc72:	e008      	b.n	800bc86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc74:	4b08      	ldr	r3, [pc, #32]	; (800bc98 <xTaskGetSchedulerState+0x38>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	607b      	str	r3, [r7, #4]
 800bc80:	e001      	b.n	800bc86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc82:	2300      	movs	r3, #0
 800bc84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc86:	687b      	ldr	r3, [r7, #4]
	}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	20000368 	.word	0x20000368
 800bc98:	2000037c 	.word	0x2000037c

0800bc9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d06c      	beq.n	800bd8c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcb2:	4b39      	ldr	r3, [pc, #228]	; (800bd98 <xTaskPriorityDisinherit+0xfc>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d009      	beq.n	800bcd0 <xTaskPriorityDisinherit+0x34>
 800bcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	60fb      	str	r3, [r7, #12]
 800bcce:	e7fe      	b.n	800bcce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d109      	bne.n	800bcec <xTaskPriorityDisinherit+0x50>
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	60bb      	str	r3, [r7, #8]
 800bcea:	e7fe      	b.n	800bcea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcf0:	1e5a      	subs	r2, r3, #1
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d044      	beq.n	800bd8c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d140      	bne.n	800bd8c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fa0f 	bl	800b132 <uxListRemove>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d115      	bne.n	800bd46 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1e:	491f      	ldr	r1, [pc, #124]	; (800bd9c <xTaskPriorityDisinherit+0x100>)
 800bd20:	4613      	mov	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <xTaskPriorityDisinherit+0xaa>
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd34:	2201      	movs	r2, #1
 800bd36:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3a:	43da      	mvns	r2, r3
 800bd3c:	4b18      	ldr	r3, [pc, #96]	; (800bda0 <xTaskPriorityDisinherit+0x104>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4013      	ands	r3, r2
 800bd42:	4a17      	ldr	r2, [pc, #92]	; (800bda0 <xTaskPriorityDisinherit+0x104>)
 800bd44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd52:	f1c3 0207 	rsb	r2, r3, #7
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5e:	2201      	movs	r2, #1
 800bd60:	409a      	lsls	r2, r3
 800bd62:	4b0f      	ldr	r3, [pc, #60]	; (800bda0 <xTaskPriorityDisinherit+0x104>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	4a0d      	ldr	r2, [pc, #52]	; (800bda0 <xTaskPriorityDisinherit+0x104>)
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4a08      	ldr	r2, [pc, #32]	; (800bd9c <xTaskPriorityDisinherit+0x100>)
 800bd7a:	441a      	add	r2, r3
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7ff f978 	bl	800b078 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd8c:	697b      	ldr	r3, [r7, #20]
	}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	2000029c 	.word	0x2000029c
 800bd9c:	200002a0 	.word	0x200002a0
 800bda0:	20000364 	.word	0x20000364

0800bda4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdae:	4b29      	ldr	r3, [pc, #164]	; (800be54 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdb4:	4b28      	ldr	r3, [pc, #160]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff f9b9 	bl	800b132 <uxListRemove>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10b      	bne.n	800bdde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bdc6:	4b24      	ldr	r3, [pc, #144]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdcc:	2201      	movs	r2, #1
 800bdce:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd2:	43da      	mvns	r2, r3
 800bdd4:	4b21      	ldr	r3, [pc, #132]	; (800be5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4013      	ands	r3, r2
 800bdda:	4a20      	ldr	r2, [pc, #128]	; (800be5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde4:	d10a      	bne.n	800bdfc <prvAddCurrentTaskToDelayedList+0x58>
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d007      	beq.n	800bdfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdec:	4b1a      	ldr	r3, [pc, #104]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	481a      	ldr	r0, [pc, #104]	; (800be60 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bdf6:	f7ff f93f 	bl	800b078 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdfa:	e026      	b.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4413      	add	r3, r2
 800be02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be04:	4b14      	ldr	r3, [pc, #80]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	429a      	cmp	r2, r3
 800be12:	d209      	bcs.n	800be28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be14:	4b13      	ldr	r3, [pc, #76]	; (800be64 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4619      	mov	r1, r3
 800be20:	4610      	mov	r0, r2
 800be22:	f7ff f94d 	bl	800b0c0 <vListInsert>
}
 800be26:	e010      	b.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be28:	4b0f      	ldr	r3, [pc, #60]	; (800be68 <prvAddCurrentTaskToDelayedList+0xc4>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7ff f943 	bl	800b0c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be3a:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	429a      	cmp	r2, r3
 800be42:	d202      	bcs.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be44:	4a09      	ldr	r2, [pc, #36]	; (800be6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6013      	str	r3, [r2, #0]
}
 800be4a:	bf00      	nop
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20000360 	.word	0x20000360
 800be58:	2000029c 	.word	0x2000029c
 800be5c:	20000364 	.word	0x20000364
 800be60:	20000348 	.word	0x20000348
 800be64:	20000330 	.word	0x20000330
 800be68:	2000032c 	.word	0x2000032c
 800be6c:	20000378 	.word	0x20000378

0800be70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <pxCurrentTCBConst2>)
 800be72:	6819      	ldr	r1, [r3, #0]
 800be74:	6808      	ldr	r0, [r1, #0]
 800be76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7a:	f380 8809 	msr	PSP, r0
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8811 	msr	BASEPRI, r0
 800be8a:	4770      	bx	lr
 800be8c:	f3af 8000 	nop.w

0800be90 <pxCurrentTCBConst2>:
 800be90:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop

0800be98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800beb0:	4b0e      	ldr	r3, [pc, #56]	; (800beec <vPortEnterCritical+0x54>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3301      	adds	r3, #1
 800beb6:	4a0d      	ldr	r2, [pc, #52]	; (800beec <vPortEnterCritical+0x54>)
 800beb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800beba:	4b0c      	ldr	r3, [pc, #48]	; (800beec <vPortEnterCritical+0x54>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d10e      	bne.n	800bee0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bec2:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <vPortEnterCritical+0x58>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d009      	beq.n	800bee0 <vPortEnterCritical+0x48>
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	603b      	str	r3, [r7, #0]
 800bede:	e7fe      	b.n	800bede <vPortEnterCritical+0x46>
	}
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	20000088 	.word	0x20000088
 800bef0:	e000ed04 	.word	0xe000ed04

0800bef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800befa:	4b11      	ldr	r3, [pc, #68]	; (800bf40 <vPortExitCritical+0x4c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d109      	bne.n	800bf16 <vPortExitCritical+0x22>
 800bf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf06:	f383 8811 	msr	BASEPRI, r3
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	607b      	str	r3, [r7, #4]
 800bf14:	e7fe      	b.n	800bf14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bf16:	4b0a      	ldr	r3, [pc, #40]	; (800bf40 <vPortExitCritical+0x4c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	4a08      	ldr	r2, [pc, #32]	; (800bf40 <vPortExitCritical+0x4c>)
 800bf1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf20:	4b07      	ldr	r3, [pc, #28]	; (800bf40 <vPortExitCritical+0x4c>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d104      	bne.n	800bf32 <vPortExitCritical+0x3e>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf32:	bf00      	nop
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	20000088 	.word	0x20000088
	...

0800bf50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf50:	f3ef 8009 	mrs	r0, PSP
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	4b15      	ldr	r3, [pc, #84]	; (800bfb0 <pxCurrentTCBConst>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	f01e 0f10 	tst.w	lr, #16
 800bf60:	bf08      	it	eq
 800bf62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6a:	6010      	str	r0, [r2, #0]
 800bf6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf74:	f380 8811 	msr	BASEPRI, r0
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f7ff fcc6 	bl	800b910 <vTaskSwitchContext>
 800bf84:	f04f 0000 	mov.w	r0, #0
 800bf88:	f380 8811 	msr	BASEPRI, r0
 800bf8c:	bc09      	pop	{r0, r3}
 800bf8e:	6819      	ldr	r1, [r3, #0]
 800bf90:	6808      	ldr	r0, [r1, #0]
 800bf92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf96:	f01e 0f10 	tst.w	lr, #16
 800bf9a:	bf08      	it	eq
 800bf9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bfa0:	f380 8809 	msr	PSP, r0
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	f3af 8000 	nop.w

0800bfb0 <pxCurrentTCBConst>:
 800bfb0:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop

0800bfb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bfd0:	f7ff fbe6 	bl	800b7a0 <xTaskIncrementTick>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfda:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <SysTick_Handler+0x3c>)
 800bfdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bfec:	bf00      	nop
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	e000ed04 	.word	0xe000ed04

0800bff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bffe:	f3ef 8305 	mrs	r3, IPSR
 800c002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b0f      	cmp	r3, #15
 800c008:	d913      	bls.n	800c032 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c00a:	4a16      	ldr	r2, [pc, #88]	; (800c064 <vPortValidateInterruptPriority+0x6c>)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4413      	add	r3, r2
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c014:	4b14      	ldr	r3, [pc, #80]	; (800c068 <vPortValidateInterruptPriority+0x70>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	7afa      	ldrb	r2, [r7, #11]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d209      	bcs.n	800c032 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	607b      	str	r3, [r7, #4]
 800c030:	e7fe      	b.n	800c030 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c032:	4b0e      	ldr	r3, [pc, #56]	; (800c06c <vPortValidateInterruptPriority+0x74>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c03a:	4b0d      	ldr	r3, [pc, #52]	; (800c070 <vPortValidateInterruptPriority+0x78>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d909      	bls.n	800c056 <vPortValidateInterruptPriority+0x5e>
 800c042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c046:	f383 8811 	msr	BASEPRI, r3
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	603b      	str	r3, [r7, #0]
 800c054:	e7fe      	b.n	800c054 <vPortValidateInterruptPriority+0x5c>
	}
 800c056:	bf00      	nop
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	e000e3f0 	.word	0xe000e3f0
 800c068:	20000380 	.word	0x20000380
 800c06c:	e000ed0c 	.word	0xe000ed0c
 800c070:	20000384 	.word	0x20000384

0800c074 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe feca 	bl	800ae1c <USBH_LL_IncTimer>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe ff0e 	bl	800aec0 <USBH_LL_Connect>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe ff23 	bl	800af06 <USBH_LL_Disconnect>
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe ff43 	bl	800af6a <USBH_LL_NotifyURBChange>
#endif
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe feb8 	bl	800ae70 <USBH_LL_PortEnabled>
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fec4 	bl	800aea4 <USBH_LL_PortDisabled>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7f9 f91f 	bl	800537e <HAL_HCD_Stop>
 800c140:	4603      	mov	r3, r0
 800c142:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c144:	7bfb      	ldrb	r3, [r7, #15]
 800c146:	4618      	mov	r0, r3
 800c148:	f000 f808 	bl	800c15c <USBH_Get_USB_Status>
 800c14c:	4603      	mov	r3, r0
 800c14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c150:	7bbb      	ldrb	r3, [r7, #14]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	2b03      	cmp	r3, #3
 800c16e:	d817      	bhi.n	800c1a0 <USBH_Get_USB_Status+0x44>
 800c170:	a201      	add	r2, pc, #4	; (adr r2, 800c178 <USBH_Get_USB_Status+0x1c>)
 800c172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c176:	bf00      	nop
 800c178:	0800c189 	.word	0x0800c189
 800c17c:	0800c18f 	.word	0x0800c18f
 800c180:	0800c195 	.word	0x0800c195
 800c184:	0800c19b 	.word	0x0800c19b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	73fb      	strb	r3, [r7, #15]
    break;
 800c18c:	e00b      	b.n	800c1a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c18e:	2302      	movs	r3, #2
 800c190:	73fb      	strb	r3, [r7, #15]
    break;
 800c192:	e008      	b.n	800c1a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c194:	2301      	movs	r3, #1
 800c196:	73fb      	strb	r3, [r7, #15]
    break;
 800c198:	e005      	b.n	800c1a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c19a:	2302      	movs	r3, #2
 800c19c:	73fb      	strb	r3, [r7, #15]
    break;
 800c19e:	e002      	b.n	800c1a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a4:	bf00      	nop
  }
  return usb_status;
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <__libc_init_array>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	4e0d      	ldr	r6, [pc, #52]	; (800c1ec <__libc_init_array+0x38>)
 800c1b8:	4c0d      	ldr	r4, [pc, #52]	; (800c1f0 <__libc_init_array+0x3c>)
 800c1ba:	1ba4      	subs	r4, r4, r6
 800c1bc:	10a4      	asrs	r4, r4, #2
 800c1be:	2500      	movs	r5, #0
 800c1c0:	42a5      	cmp	r5, r4
 800c1c2:	d109      	bne.n	800c1d8 <__libc_init_array+0x24>
 800c1c4:	4e0b      	ldr	r6, [pc, #44]	; (800c1f4 <__libc_init_array+0x40>)
 800c1c6:	4c0c      	ldr	r4, [pc, #48]	; (800c1f8 <__libc_init_array+0x44>)
 800c1c8:	f000 f884 	bl	800c2d4 <_init>
 800c1cc:	1ba4      	subs	r4, r4, r6
 800c1ce:	10a4      	asrs	r4, r4, #2
 800c1d0:	2500      	movs	r5, #0
 800c1d2:	42a5      	cmp	r5, r4
 800c1d4:	d105      	bne.n	800c1e2 <__libc_init_array+0x2e>
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1dc:	4798      	blx	r3
 800c1de:	3501      	adds	r5, #1
 800c1e0:	e7ee      	b.n	800c1c0 <__libc_init_array+0xc>
 800c1e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1e6:	4798      	blx	r3
 800c1e8:	3501      	adds	r5, #1
 800c1ea:	e7f2      	b.n	800c1d2 <__libc_init_array+0x1e>
 800c1ec:	0800e2f4 	.word	0x0800e2f4
 800c1f0:	0800e2f4 	.word	0x0800e2f4
 800c1f4:	0800e2f4 	.word	0x0800e2f4
 800c1f8:	0800e2f8 	.word	0x0800e2f8

0800c1fc <__itoa>:
 800c1fc:	1e93      	subs	r3, r2, #2
 800c1fe:	2b22      	cmp	r3, #34	; 0x22
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	d904      	bls.n	800c210 <__itoa+0x14>
 800c206:	2300      	movs	r3, #0
 800c208:	700b      	strb	r3, [r1, #0]
 800c20a:	461c      	mov	r4, r3
 800c20c:	4620      	mov	r0, r4
 800c20e:	bd10      	pop	{r4, pc}
 800c210:	2a0a      	cmp	r2, #10
 800c212:	d109      	bne.n	800c228 <__itoa+0x2c>
 800c214:	2800      	cmp	r0, #0
 800c216:	da07      	bge.n	800c228 <__itoa+0x2c>
 800c218:	232d      	movs	r3, #45	; 0x2d
 800c21a:	700b      	strb	r3, [r1, #0]
 800c21c:	4240      	negs	r0, r0
 800c21e:	2101      	movs	r1, #1
 800c220:	4421      	add	r1, r4
 800c222:	f000 f819 	bl	800c258 <__utoa>
 800c226:	e7f1      	b.n	800c20c <__itoa+0x10>
 800c228:	2100      	movs	r1, #0
 800c22a:	e7f9      	b.n	800c220 <__itoa+0x24>

0800c22c <itoa>:
 800c22c:	f7ff bfe6 	b.w	800c1fc <__itoa>

0800c230 <memcpy>:
 800c230:	b510      	push	{r4, lr}
 800c232:	1e43      	subs	r3, r0, #1
 800c234:	440a      	add	r2, r1
 800c236:	4291      	cmp	r1, r2
 800c238:	d100      	bne.n	800c23c <memcpy+0xc>
 800c23a:	bd10      	pop	{r4, pc}
 800c23c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c240:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c244:	e7f7      	b.n	800c236 <memcpy+0x6>

0800c246 <memset>:
 800c246:	4402      	add	r2, r0
 800c248:	4603      	mov	r3, r0
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d100      	bne.n	800c250 <memset+0xa>
 800c24e:	4770      	bx	lr
 800c250:	f803 1b01 	strb.w	r1, [r3], #1
 800c254:	e7f9      	b.n	800c24a <memset+0x4>
	...

0800c258 <__utoa>:
 800c258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c25a:	4b1d      	ldr	r3, [pc, #116]	; (800c2d0 <__utoa+0x78>)
 800c25c:	b08b      	sub	sp, #44	; 0x2c
 800c25e:	4605      	mov	r5, r0
 800c260:	460c      	mov	r4, r1
 800c262:	466e      	mov	r6, sp
 800c264:	f103 0c20 	add.w	ip, r3, #32
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	6859      	ldr	r1, [r3, #4]
 800c26c:	4637      	mov	r7, r6
 800c26e:	c703      	stmia	r7!, {r0, r1}
 800c270:	3308      	adds	r3, #8
 800c272:	4563      	cmp	r3, ip
 800c274:	463e      	mov	r6, r7
 800c276:	d1f7      	bne.n	800c268 <__utoa+0x10>
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	791b      	ldrb	r3, [r3, #4]
 800c27c:	713b      	strb	r3, [r7, #4]
 800c27e:	1e93      	subs	r3, r2, #2
 800c280:	2b22      	cmp	r3, #34	; 0x22
 800c282:	6038      	str	r0, [r7, #0]
 800c284:	f04f 0300 	mov.w	r3, #0
 800c288:	d904      	bls.n	800c294 <__utoa+0x3c>
 800c28a:	7023      	strb	r3, [r4, #0]
 800c28c:	461c      	mov	r4, r3
 800c28e:	4620      	mov	r0, r4
 800c290:	b00b      	add	sp, #44	; 0x2c
 800c292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c294:	1e66      	subs	r6, r4, #1
 800c296:	fbb5 f0f2 	udiv	r0, r5, r2
 800c29a:	af0a      	add	r7, sp, #40	; 0x28
 800c29c:	fb02 5510 	mls	r5, r2, r0, r5
 800c2a0:	443d      	add	r5, r7
 800c2a2:	1c59      	adds	r1, r3, #1
 800c2a4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800c2a8:	f806 5f01 	strb.w	r5, [r6, #1]!
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	b968      	cbnz	r0, 800c2cc <__utoa+0x74>
 800c2b0:	5460      	strb	r0, [r4, r1]
 800c2b2:	4423      	add	r3, r4
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	1b19      	subs	r1, r3, r4
 800c2b8:	1b10      	subs	r0, r2, r4
 800c2ba:	4281      	cmp	r1, r0
 800c2bc:	dde7      	ble.n	800c28e <__utoa+0x36>
 800c2be:	7811      	ldrb	r1, [r2, #0]
 800c2c0:	7818      	ldrb	r0, [r3, #0]
 800c2c2:	f802 0b01 	strb.w	r0, [r2], #1
 800c2c6:	f803 1901 	strb.w	r1, [r3], #-1
 800c2ca:	e7f4      	b.n	800c2b6 <__utoa+0x5e>
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	e7e2      	b.n	800c296 <__utoa+0x3e>
 800c2d0:	0800e2c4 	.word	0x0800e2c4

0800c2d4 <_init>:
 800c2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d6:	bf00      	nop
 800c2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2da:	bc08      	pop	{r3}
 800c2dc:	469e      	mov	lr, r3
 800c2de:	4770      	bx	lr

0800c2e0 <_fini>:
 800c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e2:	bf00      	nop
 800c2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2e6:	bc08      	pop	{r3}
 800c2e8:	469e      	mov	lr, r3
 800c2ea:	4770      	bx	lr
