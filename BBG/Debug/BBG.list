
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fac  0800bc60  0800bc60  0001bc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc0c  0800dc0c  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc0c  0800dc0c  0001dc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc14  0800dc14  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc14  0800dc14  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc18  0800dc18  0001dc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800dc1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  200000f0  0800dd0c  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  0800dd0c  00020a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eb03  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000723c  00000000  00000000  0005ec23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002740  00000000  00000000  00065e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002410  00000000  00000000  000685a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003017a  00000000  00000000  0006a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029045  00000000  00000000  0009ab2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6719  00000000  00000000  000c3b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ba288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a51c  00000000  00000000  001ba304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bc48 	.word	0x0800bc48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	0800bc48 	.word	0x0800bc48

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BBG_init>:
#include "BBG.h"
#include <stdlib.h>
#include <stdio.h>
#include "main.h"

void BBG_init(BBG* bbg, Platforma * platforma, Klocek ** klocki, Kulka * kulka, int lkl) {
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b089      	sub	sp, #36	; 0x24
 80004f4:	af02      	add	r7, sp, #8
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]

	bbg->liczba_klockow = lkl;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000502:	60da      	str	r2, [r3, #12]
	bbg->platforma = platforma;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	601a      	str	r2, [r3, #0]
	rysuj_platforme(bbg->platforma);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 ff9a 	bl	8001448 <rysuj_platforme>

	bbg->klocki = klocki;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < bbg->liczba_klockow; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e03a      	b.n	8000596 <BBG_init+0xa6>
		    uint32_t kolor = i % 2 == 0 ? LCD_COLOR_YELLOW : LCD_COLOR_BLUE;
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	d102      	bne.n	8000530 <BBG_init+0x40>
 800052a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800052e:	e000      	b.n	8000532 <BBG_init+0x42>
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <BBG_init+0xc8>)
 8000532:	613b      	str	r3, [r7, #16]
		    Klocek_init(bbg->klocki[i], i * bbg->klocki[i]->szerokosc, 0, bbg->klocki[i]->szerokosc, bbg->klocki[i]->wysokosc,kolor);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	685a      	ldr	r2, [r3, #4]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	fb02 f103 	mul.w	r1, r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	689c      	ldr	r4, [r3, #8]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	685a      	ldr	r2, [r3, #4]
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	9201      	str	r2, [sp, #4]
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	4623      	mov	r3, r4
 8000578:	2200      	movs	r2, #0
 800057a:	f000 fb87 	bl	8000c8c <Klocek_init>
		    rysuj_klocek(bbg->klocki[i]);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	685a      	ldr	r2, [r3, #4]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fb9a 	bl	8000cc4 <rysuj_klocek>
	for (int i = 0; i < bbg->liczba_klockow; i++) {
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	3301      	adds	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	429a      	cmp	r2, r3
 800059e:	dbbf      	blt.n	8000520 <BBG_init+0x30>
		}
	bbg->kulka = kulka;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	609a      	str	r2, [r3, #8]
	rysuj_kulke(bbg->kulka);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fbc4 	bl	8000d38 <rysuj_kulke>
}
 80005b0:	bf00      	nop
 80005b2:	371c      	adds	r7, #28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	ff0000ff 	.word	0xff0000ff

080005bc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_CRC_Init+0x20>)
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <MX_CRC_Init+0x24>)
 80005c4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_CRC_Init+0x20>)
 80005c8:	f003 fa26 	bl	8003a18 <HAL_CRC_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005d2:	f000 ff13 	bl	80013fc <Error_Handler>
  }

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200003bc 	.word	0x200003bc
 80005e0:	40023000 	.word	0x40023000

080005e4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <HAL_CRC_MspInit+0x3c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d10d      	bne.n	8000612 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_CRC_MspInit+0x40>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a09      	ldr	r2, [pc, #36]	; (8000624 <HAL_CRC_MspInit+0x40>)
 8000600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <HAL_CRC_MspInit+0x40>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023000 	.word	0x40023000
 8000624:	40023800 	.word	0x40023800

08000628 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_DMA2D_Init+0x5c>)
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <MX_DMA2D_Init+0x60>)
 8000630:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_DMA2D_Init+0x5c>)
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_DMA2D_Init+0x5c>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_DMA2D_Init+0x5c>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_DMA2D_Init+0x5c>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_DMA2D_Init+0x5c>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_DMA2D_Init+0x5c>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_DMA2D_Init+0x5c>)
 8000658:	2200      	movs	r2, #0
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800065c:	4809      	ldr	r0, [pc, #36]	; (8000684 <MX_DMA2D_Init+0x5c>)
 800065e:	f003 fbb3 	bl	8003dc8 <HAL_DMA2D_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000668:	f000 fec8 	bl	80013fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800066c:	2101      	movs	r1, #1
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_DMA2D_Init+0x5c>)
 8000670:	f003 fe18 	bl	80042a4 <HAL_DMA2D_ConfigLayer>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800067a:	f000 febf 	bl	80013fc <Error_Handler>
  }

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200003c4 	.word	0x200003c4
 8000688:	4002b000 	.word	0x4002b000

0800068c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_DMA2D_MspInit+0x48>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d115      	bne.n	80006ca <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <HAL_DMA2D_MspInit+0x4c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <HAL_DMA2D_MspInit+0x4c>)
 80006a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_DMA2D_MspInit+0x4c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2105      	movs	r1, #5
 80006be:	205a      	movs	r0, #90	; 0x5a
 80006c0:	f003 f980 	bl	80039c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80006c4:	205a      	movs	r0, #90	; 0x5a
 80006c6:	f003 f999 	bl	80039fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	4002b000 	.word	0x4002b000
 80006d8:	40023800 	.word	0x40023800

080006dc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_FMC_Init+0x98>)
 80006f6:	4a20      	ldr	r2, [pc, #128]	; (8000778 <MX_FMC_Init+0x9c>)
 80006f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_FMC_Init+0x98>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_FMC_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_FMC_Init+0x98>)
 8000708:	2204      	movs	r2, #4
 800070a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_FMC_Init+0x98>)
 800070e:	2210      	movs	r2, #16
 8000710:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_FMC_Init+0x98>)
 8000714:	2240      	movs	r2, #64	; 0x40
 8000716:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_FMC_Init+0x98>)
 800071a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800071e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_FMC_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_FMC_Init+0x98>)
 8000728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800072c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_FMC_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_FMC_Init+0x98>)
 8000736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_FMC_Init+0x98>)
 800075e:	f007 fe55 	bl	800840c <HAL_SDRAM_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000768:	f000 fe48 	bl	80013fc <Error_Handler>
  }

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000404 	.word	0x20000404
 8000778:	a0000140 	.word	0xa0000140

0800077c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <HAL_FMC_MspInit+0x104>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d16f      	bne.n	8000878 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000798:	4b39      	ldr	r3, [pc, #228]	; (8000880 <HAL_FMC_MspInit+0x104>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <HAL_FMC_MspInit+0x108>)
 80007a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a6:	4a37      	ldr	r2, [pc, #220]	; (8000884 <HAL_FMC_MspInit+0x108>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6393      	str	r3, [r2, #56]	; 0x38
 80007ae:	4b35      	ldr	r3, [pc, #212]	; (8000884 <HAL_FMC_MspInit+0x108>)
 80007b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80007ba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007be:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007cc:	230c      	movs	r3, #12
 80007ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	482c      	ldr	r0, [pc, #176]	; (8000888 <HAL_FMC_MspInit+0x10c>)
 80007d6:	f003 fe93 	bl	8004500 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007da:	2301      	movs	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ea:	230c      	movs	r3, #12
 80007ec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4826      	ldr	r0, [pc, #152]	; (800088c <HAL_FMC_MspInit+0x110>)
 80007f4:	f003 fe84 	bl	8004500 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80007f8:	f248 1333 	movw	r3, #33075	; 0x8133
 80007fc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800080a:	230c      	movs	r3, #12
 800080c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	481f      	ldr	r0, [pc, #124]	; (8000890 <HAL_FMC_MspInit+0x114>)
 8000814:	f003 fe74 	bl	8004500 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000818:	f64f 7383 	movw	r3, #65411	; 0xff83
 800081c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800082a:	230c      	movs	r3, #12
 800082c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4818      	ldr	r0, [pc, #96]	; (8000894 <HAL_FMC_MspInit+0x118>)
 8000834:	f003 fe64 	bl	8004500 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000838:	f24c 7303 	movw	r3, #50947	; 0xc703
 800083c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084a:	230c      	movs	r3, #12
 800084c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <HAL_FMC_MspInit+0x11c>)
 8000854:	f003 fe54 	bl	8004500 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000858:	2360      	movs	r3, #96	; 0x60
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000868:	230c      	movs	r3, #12
 800086a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	480a      	ldr	r0, [pc, #40]	; (800089c <HAL_FMC_MspInit+0x120>)
 8000872:	f003 fe45 	bl	8004500 <HAL_GPIO_Init>
 8000876:	e000      	b.n	800087a <HAL_FMC_MspInit+0xfe>
    return;
 8000878:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000010c 	.word	0x2000010c
 8000884:	40023800 	.word	0x40023800
 8000888:	40021400 	.word	0x40021400
 800088c:	40020800 	.word	0x40020800
 8000890:	40021800 	.word	0x40021800
 8000894:	40021000 	.word	0x40021000
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40020400 	.word	0x40020400

080008a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80008a8:	f7ff ff68 	bl	800077c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
 80008e6:	4b7a      	ldr	r3, [pc, #488]	; (8000ad0 <MX_GPIO_Init+0x204>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a79      	ldr	r2, [pc, #484]	; (8000ad0 <MX_GPIO_Init+0x204>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b77      	ldr	r3, [pc, #476]	; (8000ad0 <MX_GPIO_Init+0x204>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	623b      	str	r3, [r7, #32]
 80008fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	4b73      	ldr	r3, [pc, #460]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a72      	ldr	r2, [pc, #456]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b70      	ldr	r3, [pc, #448]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	61fb      	str	r3, [r7, #28]
 8000918:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b6c      	ldr	r3, [pc, #432]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a6b      	ldr	r2, [pc, #428]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b69      	ldr	r3, [pc, #420]	; (8000ad0 <MX_GPIO_Init+0x204>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	4b65      	ldr	r3, [pc, #404]	; (8000ad0 <MX_GPIO_Init+0x204>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a64      	ldr	r2, [pc, #400]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a5d      	ldr	r2, [pc, #372]	; (8000ad0 <MX_GPIO_Init+0x204>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b5b      	ldr	r3, [pc, #364]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a56      	ldr	r2, [pc, #344]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b54      	ldr	r3, [pc, #336]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b50      	ldr	r3, [pc, #320]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4f      	ldr	r2, [pc, #316]	; (8000ad0 <MX_GPIO_Init+0x204>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <MX_GPIO_Init+0x204>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <MX_GPIO_Init+0x204>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a48      	ldr	r2, [pc, #288]	; (8000ad0 <MX_GPIO_Init+0x204>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <MX_GPIO_Init+0x204>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2116      	movs	r1, #22
 80009c6:	4843      	ldr	r0, [pc, #268]	; (8000ad4 <MX_GPIO_Init+0x208>)
 80009c8:	f004 f84e 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	4841      	ldr	r0, [pc, #260]	; (8000ad8 <MX_GPIO_Init+0x20c>)
 80009d2:	f004 f849 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009dc:	483f      	ldr	r0, [pc, #252]	; (8000adc <MX_GPIO_Init+0x210>)
 80009de:	f004 f843 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009e8:	483d      	ldr	r0, [pc, #244]	; (8000ae0 <MX_GPIO_Init+0x214>)
 80009ea:	f004 f83d 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009ee:	2316      	movs	r3, #22
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	4833      	ldr	r0, [pc, #204]	; (8000ad4 <MX_GPIO_Init+0x208>)
 8000a06:	f003 fd7b 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000a0a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <MX_GPIO_Init+0x218>)
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	482e      	ldr	r0, [pc, #184]	; (8000ad8 <MX_GPIO_Init+0x20c>)
 8000a20:	f003 fd6e 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4827      	ldr	r0, [pc, #156]	; (8000ad8 <MX_GPIO_Init+0x20c>)
 8000a3c:	f003 fd60 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <MX_GPIO_Init+0x218>)
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <MX_GPIO_Init+0x208>)
 8000a54:	f003 fd54 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <MX_GPIO_Init+0x21c>)
 8000a6c:	f003 fd48 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_GPIO_Init+0x210>)
 8000a86:	f003 fd3b 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_GPIO_Init+0x210>)
 8000aa4:	f003 fd2c 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000aa8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_GPIO_Init+0x214>)
 8000ac2:	f003 fd1d 	bl	8004500 <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3738      	adds	r7, #56	; 0x38
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	10120000 	.word	0x10120000
 8000ae8:	40020400 	.word	0x40020400

08000aec <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <MX_I2C3_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <MX_I2C3_Init+0x7c>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b2a:	f005 f9a1 	bl	8005e70 <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 fc62 	bl	80013fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b3c:	f006 f989 	bl	8006e52 <HAL_I2CEx_ConfigAnalogFilter>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b46:	f000 fc59 	bl	80013fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_I2C3_Init+0x74>)
 8000b4e:	f006 f9bc 	bl	8006eca <HAL_I2CEx_ConfigDigitalFilter>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b58:	f000 fc50 	bl	80013fc <Error_Handler>
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000438 	.word	0x20000438
 8000b64:	40005c00 	.word	0x40005c00
 8000b68:	000186a0 	.word	0x000186a0

08000b6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <HAL_I2C_MspInit+0xc4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d14b      	bne.n	8000c26 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000be4:	f003 fc8c 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <HAL_I2C_MspInit+0xd0>)
 8000c06:	f003 fc7b 	bl	8004500 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000c14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005c00 	.word	0x40005c00
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_I2C_MspDeInit+0x3c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10f      	bne.n	8000c72 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_I2C_MspDeInit+0x40>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_I2C_MspDeInit+0x40>)
 8000c58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000c5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_I2C_MspDeInit+0x44>)
 8000c64:	f003 fdf6 	bl	8004854 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <HAL_I2C_MspDeInit+0x48>)
 8000c6e:	f003 fdf1 	bl	8004854 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40005c00 	.word	0x40005c00
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000

08000c8c <Klocek_init>:
#include "klocek.h"
#include "main.h"


// Inicjalizacja struktury Klocek
void Klocek_init(Klocek* k, int x, int y, int w, int h, uint32_t kol) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
    k->pozycja_x = x;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	68ba      	ldr	r2, [r7, #8]
 8000c9e:	601a      	str	r2, [r3, #0]
    k->pozycja_y = y;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	605a      	str	r2, [r3, #4]
    k->szerokosc = w;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	609a      	str	r2, [r3, #8]
    k->wysokosc = h;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	60da      	str	r2, [r3, #12]
    k->kolor = kol;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	69fa      	ldr	r2, [r7, #28]
 8000cb6:	611a      	str	r2, [r3, #16]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <rysuj_klocek>:

void rysuj_klocek(Klocek* k){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(k->kolor);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 ff77 	bl	8002bc4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(k->pozycja_x, k->pozycja_y, k->szerokosc, k->wysokosc);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	b298      	uxth	r0, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	b299      	uxth	r1, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f002 f90b 	bl	8002f08 <BSP_LCD_FillRect>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <Kulka_init>:

#include "Kulka.h"
#include "main.h"

// Inicjalizacja struktury Kulka
void Kulka_init(Kulka* kulka, int x, int y, int r, int vx, int vy, uint32_t kol) {
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	603b      	str	r3, [r7, #0]
    kulka->polozenie_x = x;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	601a      	str	r2, [r3, #0]
    kulka->polozenie_y = y;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	605a      	str	r2, [r3, #4]
    kulka->promien = r;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	609a      	str	r2, [r3, #8]
    kulka->predkosc_x = vx;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	60da      	str	r2, [r3, #12]
    kulka->predkosc_y = vy;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	611a      	str	r2, [r3, #16]
    kulka->kolor = kol;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6a3a      	ldr	r2, [r7, #32]
 8000d2a:	615a      	str	r2, [r3, #20]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <rysuj_kulke>:

void rysuj_kulke(Kulka* kulka){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(kulka->kolor);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 ff3d 	bl	8002bc4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(kulka->polozenie_x, kulka->polozenie_y, kulka->promien);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	b299      	uxth	r1, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f002 f92d 	bl	8002fbc <BSP_LCD_FillCircle>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b09a      	sub	sp, #104	; 0x68
 8000d70:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d76:	2234      	movs	r2, #52	; 0x34
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00a feef 	bl	800bb5e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2234      	movs	r2, #52	; 0x34
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00a fee9 	bl	800bb5e <memset>

  hltdc.Instance = LTDC;
 8000d8c:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000d8e:	4a50      	ldr	r2, [pc, #320]	; (8000ed0 <MX_LTDC_Init+0x164>)
 8000d90:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d92:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d98:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d9e:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000da4:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000daa:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000dac:	2209      	movs	r2, #9
 8000dae:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000db0:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000db6:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000db8:	221d      	movs	r2, #29
 8000dba:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000dbc:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000dc2:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000dc4:	f240 120d 	movw	r2, #269	; 0x10d
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000dcc:	f240 1243 	movw	r2, #323	; 0x143
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000dd4:	f240 1217 	movw	r2, #279	; 0x117
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000dda:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000ddc:	f240 1247 	movw	r2, #327	; 0x147
 8000de0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000de2:	4b3a      	ldr	r3, [pc, #232]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dfa:	4834      	ldr	r0, [pc, #208]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000dfc:	f006 f8a4 	bl	8006f48 <HAL_LTDC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000e06:	f000 faf9 	bl	80013fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000e0e:	23f0      	movs	r3, #240	; 0xf0
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000e16:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000e20:	23ff      	movs	r3, #255	; 0xff
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e2c:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e32:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000e36:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000e38:	23f0      	movs	r3, #240	; 0xf0
 8000e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000e3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e40:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481b      	ldr	r0, [pc, #108]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000e5e:	f006 fa05 	bl	800726c <HAL_LTDC_ConfigLayer>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8000e68:	f000 fac8 	bl	80013fc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e88:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000eb4:	f006 f9da 	bl	800726c <HAL_LTDC_ConfigLayer>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000ebe:	f000 fa9d 	bl	80013fc <Error_Handler>
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3768      	adds	r7, #104	; 0x68
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000048c 	.word	0x2000048c
 8000ed0:	40016800 	.word	0x40016800

08000ed4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a7b      	ldr	r2, [pc, #492]	; (80010e0 <HAL_LTDC_MspInit+0x20c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 80f0 	bne.w	80010d8 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
 8000efc:	4b79      	ldr	r3, [pc, #484]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	4a78      	ldr	r2, [pc, #480]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f06:	6453      	str	r3, [r2, #68]	; 0x44
 8000f08:	4b76      	ldr	r3, [pc, #472]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a71      	ldr	r2, [pc, #452]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f1e:	f043 0320 	orr.w	r3, r3, #32
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	4b6b      	ldr	r3, [pc, #428]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a6a      	ldr	r2, [pc, #424]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a63      	ldr	r2, [pc, #396]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b61      	ldr	r3, [pc, #388]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a5c      	ldr	r2, [pc, #368]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	4b56      	ldr	r3, [pc, #344]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a55      	ldr	r2, [pc, #340]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_LTDC_MspInit+0x210>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fce:	230e      	movs	r3, #14
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4843      	ldr	r0, [pc, #268]	; (80010e8 <HAL_LTDC_MspInit+0x214>)
 8000fda:	f003 fa91 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000fde:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff0:	230e      	movs	r3, #14
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	483c      	ldr	r0, [pc, #240]	; (80010ec <HAL_LTDC_MspInit+0x218>)
 8000ffc:	f003 fa80 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001000:	2303      	movs	r3, #3
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001010:	2309      	movs	r3, #9
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4835      	ldr	r0, [pc, #212]	; (80010f0 <HAL_LTDC_MspInit+0x21c>)
 800101c:	f003 fa70 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001020:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001032:	230e      	movs	r3, #14
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	482c      	ldr	r0, [pc, #176]	; (80010f0 <HAL_LTDC_MspInit+0x21c>)
 800103e:	f003 fa5f 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001042:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001054:	230e      	movs	r3, #14
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	4825      	ldr	r0, [pc, #148]	; (80010f4 <HAL_LTDC_MspInit+0x220>)
 8001060:	f003 fa4e 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001064:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001076:	230e      	movs	r3, #14
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	481d      	ldr	r0, [pc, #116]	; (80010f8 <HAL_LTDC_MspInit+0x224>)
 8001082:	f003 fa3d 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001086:	2348      	movs	r3, #72	; 0x48
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001096:	230e      	movs	r3, #14
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4816      	ldr	r0, [pc, #88]	; (80010fc <HAL_LTDC_MspInit+0x228>)
 80010a2:	f003 fa2d 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010b8:	2309      	movs	r3, #9
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <HAL_LTDC_MspInit+0x220>)
 80010c4:	f003 fa1c 	bl	8004500 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2105      	movs	r1, #5
 80010cc:	2058      	movs	r0, #88	; 0x58
 80010ce:	f002 fc79 	bl	80039c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010d2:	2058      	movs	r0, #88	; 0x58
 80010d4:	f002 fc92 	bl	80039fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80010d8:	bf00      	nop
 80010da:	3738      	adds	r7, #56	; 0x38
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40016800 	.word	0x40016800
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40021400 	.word	0x40021400
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40021800 	.word	0x40021800
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b09d      	sub	sp, #116	; 0x74
 8001104:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f002 fb41 	bl	800378c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f8e1 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f7ff fbdd 	bl	80008cc <MX_GPIO_Init>
  MX_CRC_Init();
 8001112:	f7ff fa53 	bl	80005bc <MX_CRC_Init>
  MX_DMA2D_Init();
 8001116:	f7ff fa87 	bl	8000628 <MX_DMA2D_Init>
  MX_FMC_Init();
 800111a:	f7ff fadf 	bl	80006dc <MX_FMC_Init>
  MX_I2C3_Init();
 800111e:	f7ff fce5 	bl	8000aec <MX_I2C3_Init>
  MX_LTDC_Init();
 8001122:	f7ff fe23 	bl	8000d6c <MX_LTDC_Init>
  MX_SPI5_Init();
 8001126:	f000 f9ab 	bl	8001480 <MX_SPI5_Init>
  MX_TIM1_Init();
 800112a:	f000 fb59 	bl	80017e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800112e:	f000 fbc9 	bl	80018c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001132:	f001 fbff 	bl	8002934 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8001136:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800113a:	2001      	movs	r0, #1
 800113c:	f001 fc7c 	bl	8002a38 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f001 fcdd 	bl	8002b00 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001146:	485e      	ldr	r0, [pc, #376]	; (80012c0 <main+0x1c0>)
 8001148:	f001 fd88 	bl	8002c5c <BSP_LCD_Clear>
    //HAL_Delay(1000);
    BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	2001      	movs	r0, #1
 8001152:	f001 fd23 	bl	8002b9c <BSP_LCD_SetColorKeying>
    BSP_LCD_SetLayerVisible(1, DISABLE);
 8001156:	2100      	movs	r1, #0
 8001158:	2001      	movs	r0, #1
 800115a:	f001 fce1 	bl	8002b20 <BSP_LCD_SetLayerVisible>

    BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 800115e:	4959      	ldr	r1, [pc, #356]	; (80012c4 <main+0x1c4>)
 8001160:	2000      	movs	r0, #0
 8001162:	f001 fc69 	bl	8002a38 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0);
 8001166:	2000      	movs	r0, #0
 8001168:	f001 fcca 	bl	8002b00 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 800116c:	f001 ffc6 	bl	80030fc <BSP_LCD_DisplayOn>

    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f001 fd72 	bl	8002c5c <BSP_LCD_Clear>

    BSP_LCD_SetFont(&Font12);
 8001178:	4853      	ldr	r0, [pc, #332]	; (80012c8 <main+0x1c8>)
 800117a:	f001 fd55 	bl	8002c28 <BSP_LCD_SetFont>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800117e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001182:	f001 fd1f 	bl	8002bc4 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	f001 fd33 	bl	8002bf4 <BSP_LCD_SetBackColor>

//    Touchscreen_Calibration();
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800118e:	f001 fc3b 	bl	8002a08 <BSP_LCD_GetXSize>
 8001192:	4603      	mov	r3, r0
 8001194:	b29c      	uxth	r4, r3
 8001196:	f001 fc43 	bl	8002a20 <BSP_LCD_GetYSize>
 800119a:	4603      	mov	r3, r0
 800119c:	b29b      	uxth	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	4620      	mov	r0, r4
 80011a2:	f002 fab9 	bl	8003718 <BSP_TS_Init>
    BSP_LCD_Clear(LCD_COLOR_RED);
 80011a6:	4849      	ldr	r0, [pc, #292]	; (80012cc <main+0x1cc>)
 80011a8:	f001 fd58 	bl	8002c5c <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80011ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011b0:	f001 fd20 	bl	8002bf4 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80011b4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80011b8:	f001 fd04 	bl	8002bc4 <BSP_LCD_SetTextColor>

    // kulka
    int kulka_pocz_x = 100;
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	65bb      	str	r3, [r7, #88]	; 0x58
    int kulka_pocz_y = 250;
 80011c0:	23fa      	movs	r3, #250	; 0xfa
 80011c2:	657b      	str	r3, [r7, #84]	; 0x54
    int kulka_r = 8;
 80011c4:	2308      	movs	r3, #8
 80011c6:	653b      	str	r3, [r7, #80]	; 0x50
    int kulka_vx = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    int kulka_vy = 1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t kulka_kolor = LCD_COLOR_BLACK;
 80011d0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80011d4:	647b      	str	r3, [r7, #68]	; 0x44

    // platforma
    int platforma_x = 120;
 80011d6:	2378      	movs	r3, #120	; 0x78
 80011d8:	643b      	str	r3, [r7, #64]	; 0x40
    int platforma_y = 300;
 80011da:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
    int platforma_krok = 5;
 80011e0:	2305      	movs	r3, #5
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
    int platforma_wysokosc = 10;
 80011e4:	230a      	movs	r3, #10
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
    int platforma_szerokosc = 50;
 80011e8:	2332      	movs	r3, #50	; 0x32
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t platforma_kolor = LCD_COLOR_YELLOW;
 80011ec:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    // klocek
    int klocek_szerokosc = 30;
 80011f2:	231e      	movs	r3, #30
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
    int klocek_wysokosc = 10;
 80011f6:	230a      	movs	r3, #10
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    int liczba_klockow = 10;
 80011fa:	230a      	movs	r3, #10
 80011fc:	623b      	str	r3, [r7, #32]

	Platforma* platforma = (Platforma*)malloc(sizeof(Platforma));
 80011fe:	2018      	movs	r0, #24
 8001200:	f00a fc9a 	bl	800bb38 <malloc>
 8001204:	4603      	mov	r3, r0
 8001206:	61fb      	str	r3, [r7, #28]
	Kulka* kulka = (Kulka*)malloc(sizeof(Kulka));
 8001208:	2018      	movs	r0, #24
 800120a:	f00a fc95 	bl	800bb38 <malloc>
 800120e:	4603      	mov	r3, r0
 8001210:	61bb      	str	r3, [r7, #24]
    Klocek** klocki = (Klocek**)malloc(liczba_klockow * sizeof(Klocek*));
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f00a fc8e 	bl	800bb38 <malloc>
 800121c:	4603      	mov	r3, r0
 800121e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < liczba_klockow; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001224:	e026      	b.n	8001274 <main+0x174>
        klocki[i] = (Klocek*)malloc(sizeof(Klocek));
 8001226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	18d4      	adds	r4, r2, r3
 800122e:	2014      	movs	r0, #20
 8001230:	f00a fc82 	bl	800bb38 <malloc>
 8001234:	4603      	mov	r3, r0
 8001236:	6023      	str	r3, [r4, #0]
        uint32_t kolor_klocka = i % 2 == 0 ? LCD_COLOR_BLUE : LCD_COLOR_YELLOW;
 8001238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <main+0x146>
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <main+0x1c0>)
 8001244:	e001      	b.n	800124a <main+0x14a>
 8001246:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800124a:	613b      	str	r3, [r7, #16]
        Klocek_init(klocki[i], i * klocek_szerokosc, klocek_wysokosc, klocek_szerokosc, klocek_wysokosc, kolor_klocka);
 800124c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4413      	add	r3, r2
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125a:	fb02 f103 	mul.w	r1, r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126a:	f7ff fd0f 	bl	8000c8c <Klocek_init>
    for (int i = 0; i < liczba_klockow; i++) {
 800126e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001270:	3301      	adds	r3, #1
 8001272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbd4      	blt.n	8001226 <main+0x126>
    }


	//Klocek* klocek = (Klocek*)malloc(sizeof(Klocek));

    Platforma_init(platforma, platforma_x, platforma_y, platforma_szerokosc, platforma_wysokosc, platforma_krok, platforma_kolor);
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800128c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800128e:	69f8      	ldr	r0, [r7, #28]
 8001290:	f000 f8bb 	bl	800140a <Platforma_init>
    Kulka_init(kulka, kulka_pocz_x, kulka_pocz_y, kulka_r, kulka_vx, kulka_vy, kulka_kolor);
 8001294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80012a6:	69b8      	ldr	r0, [r7, #24]
 80012a8:	f7ff fd27 	bl	8000cfa <Kulka_init>
//    Klocek_init(klocek, klocek_, 0, 10, 5);

	BBG bbg;
	BBG_init(&bbg, platforma, klocki, kulka, liczba_klockow);
 80012ac:	4638      	mov	r0, r7
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	69f9      	ldr	r1, [r7, #28]
 80012b8:	f7ff f91a 	bl	80004f0 <BBG_init>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <main+0x1bc>
 80012be:	bf00      	nop
 80012c0:	ff0000ff 	.word	0xff0000ff
 80012c4:	d0130000 	.word	0xd0130000
 80012c8:	20000074 	.word	0x20000074
 80012cc:	ffff0000 	.word	0xffff0000

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0a0      	sub	sp, #128	; 0x80
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012da:	2230      	movs	r2, #48	; 0x30
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f00a fc3d 	bl	800bb5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2230      	movs	r2, #48	; 0x30
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00a fc2e 	bl	800bb5e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <SystemClock_Config+0x100>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <SystemClock_Config+0x100>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <SystemClock_Config+0x100>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <SystemClock_Config+0x104>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <SystemClock_Config+0x104>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <SystemClock_Config+0x104>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133e:	2301      	movs	r3, #1
 8001340:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001346:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001348:	2302      	movs	r3, #2
 800134a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001350:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001352:	2304      	movs	r3, #4
 8001354:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001356:	2348      	movs	r3, #72	; 0x48
 8001358:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135a:	2302      	movs	r3, #2
 800135c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800135e:	2303      	movs	r3, #3
 8001360:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001362:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001366:	4618      	mov	r0, r3
 8001368:	f006 f9fe 	bl	8007768 <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001372:	f000 f843 	bl	80013fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fc58 	bl	8007c48 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800139e:	f000 f82d 	bl	80013fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013a2:	2308      	movs	r3, #8
 80013a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80013a6:	2332      	movs	r3, #50	; 0x32
 80013a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80013ae:	2300      	movs	r3, #0
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4618      	mov	r0, r3
 80013b8:	f006 fe6a 	bl	8008090 <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80013c2:	f000 f81b 	bl	80013fc <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3780      	adds	r7, #128	; 0x80
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000

080013d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ea:	f002 f9f1 	bl	80037d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40001000 	.word	0x40001000

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */


  /* USER CODE END Error_Handler_Debug */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <Platforma_init>:

#include "Platforma.h"
#include "main.h"

// Inicjalizacja struktury Platforma
void Platforma_init(Platforma* platforma, int x, int y ,int w, int h, int k, uint32_t kol) {
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	603b      	str	r3, [r7, #0]
    platforma->polozenie_x = x;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	601a      	str	r2, [r3, #0]
    platforma->polozenie_y = y;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]
    platforma->szerokosc = w;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	609a      	str	r2, [r3, #8]
    platforma->wysokosc = h;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	60da      	str	r2, [r3, #12]
    platforma->krok = k;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	611a      	str	r2, [r3, #16]
    platforma->kolor = kol;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a3a      	ldr	r2, [r7, #32]
 800143a:	615a      	str	r2, [r3, #20]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <rysuj_platforme>:
void rysuj_platforme(Platforma* platforma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(platforma->kolor);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	4618      	mov	r0, r3
 8001456:	f001 fbb5 	bl	8002bc4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(platforma->polozenie_x, platforma->polozenie_y, platforma->szerokosc, platforma->wysokosc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	b298      	uxth	r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	b299      	uxth	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f001 fd49 	bl	8002f08 <BSP_LCD_FillRect>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_SPI5_Init+0x64>)
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <MX_SPI5_Init+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_SPI5_Init+0x64>)
 800148c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001490:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_SPI5_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MX_SPI5_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014b4:	2218      	movs	r2, #24
 80014b6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014cc:	220a      	movs	r2, #10
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_SPI5_Init+0x64>)
 80014d2:	f007 f81a 	bl	800850a <HAL_SPI_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80014dc:	f7ff ff8e 	bl	80013fc <Error_Handler>
  }

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000534 	.word	0x20000534
 80014e8:	40015000 	.word	0x40015000

080014ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_SPI_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12c      	bne.n	8001568 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_SPI_MspInit+0x88>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_SPI_MspInit+0x88>)
 8001518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_SPI_MspInit+0x88>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_SPI_MspInit+0x88>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_SPI_MspInit+0x88>)
 8001534:	f043 0320 	orr.w	r3, r3, #32
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_SPI_MspInit+0x88>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001546:	f44f 7360 	mov.w	r3, #896	; 0x380
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001558:	2305      	movs	r3, #5
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <HAL_SPI_MspInit+0x8c>)
 8001564:	f002 ffcc 	bl	8004500 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40015000 	.word	0x40015000
 8001574:	40023800 	.word	0x40023800
 8001578:	40021400 	.word	0x40021400

0800157c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_SPI_MspDeInit+0x30>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10a      	bne.n	80015a4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_SPI_MspDeInit+0x34>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_SPI_MspDeInit+0x34>)
 8001594:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800159a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_SPI_MspDeInit+0x38>)
 80015a0:	f003 f958 	bl	8004854 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40015000 	.word	0x40015000
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40021400 	.word	0x40021400

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_MspInit+0x54>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_MspInit+0x54>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x54>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_MspInit+0x54>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_MspInit+0x54>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_MspInit+0x54>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	210f      	movs	r1, #15
 80015fa:	f06f 0001 	mvn.w	r0, #1
 80015fe:	f002 f9e1 	bl	80039c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	2036      	movs	r0, #54	; 0x36
 8001626:	f002 f9cd 	bl	80039c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800162a:	2036      	movs	r0, #54	; 0x36
 800162c:	f002 f9e6 	bl	80039fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_InitTick+0xa4>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_InitTick+0xa4>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_InitTick+0xa4>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800164c:	f107 0210 	add.w	r2, r7, #16
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fce8 	bl	800802c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800165c:	f006 fcbe 	bl	8007fdc <HAL_RCC_GetPCLK1Freq>
 8001660:	4603      	mov	r3, r0
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <HAL_InitTick+0xa8>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	3b01      	subs	r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_InitTick+0xac>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_InitTick+0xb0>)
 8001678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_InitTick+0xac>)
 800167c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001680:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_InitTick+0xac>)
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_InitTick+0xac>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_InitTick+0xac>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <HAL_InitTick+0xac>)
 8001696:	f007 fcc3 	bl	8009020 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d104      	bne.n	80016aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <HAL_InitTick+0xac>)
 80016a2:	f007 fce8 	bl	8009076 <HAL_TIM_Base_Start_IT>
 80016a6:	4603      	mov	r3, r0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3730      	adds	r7, #48	; 0x30
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	2000058c 	.word	0x2000058c
 80016c0:	40001000 	.word	0x40001000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM6_DAC_IRQHandler+0x10>)
 80016fe:	f007 fcde 	bl	80090be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000058c 	.word	0x2000058c

0800170c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <OTG_HS_IRQHandler+0x10>)
 8001712:	f003 f9c2 	bl	8004a9a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000750 	.word	0x20000750

08001720 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <LTDC_IRQHandler+0x10>)
 8001726:	f005 fcdf 	bl	80070e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000048c 	.word	0x2000048c

08001734 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA2D_IRQHandler+0x10>)
 800173a:	f002 fca2 	bl	8004082 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200003c4 	.word	0x200003c4

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f00a f9b4 	bl	800bae4 <__errno>
 800177c:	4602      	mov	r2, r0
 800177e:	230c      	movs	r3, #12
 8001780:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20030000 	.word	0x20030000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	20000110 	.word	0x20000110
 80017b0:	20000a18 	.word	0x20000a18

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <SystemInit+0x28>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017be:	4a07      	ldr	r2, [pc, #28]	; (80017dc <SystemInit+0x28>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SystemInit+0x28>)
 80017ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ce:	609a      	str	r2, [r3, #8]
#endif
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_TIM1_Init+0x98>)
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <MX_TIM1_Init+0x9c>)
 8001800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_TIM1_Init+0x98>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_TIM1_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_TIM1_Init+0x98>)
 8001810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_TIM1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_TIM1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_TIM1_Init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <MX_TIM1_Init+0x98>)
 800182a:	f007 fbf9 	bl	8009020 <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001834:	f7ff fde2 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <MX_TIM1_Init+0x98>)
 8001846:	f007 fd42 	bl	80092ce <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001850:	f7ff fdd4 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_TIM1_Init+0x98>)
 8001862:	f007 ff4d 	bl	8009700 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800186c:	f7ff fdc6 	bl	80013fc <Error_Handler>
  }

}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200005cc 	.word	0x200005cc
 800187c:	40010000 	.word	0x40010000

08001880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_TIM_Base_MspInit+0x3c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10d      	bne.n	80018ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_TIM_Base_MspInit+0x40>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_TIM_Base_MspInit+0x40>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_TIM_Base_MspInit+0x40>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40010000 	.word	0x40010000
 80018c0:	40023800 	.word	0x40023800

080018c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_USART1_UART_Init+0x50>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018fc:	f007 ff90 	bl	8009820 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001906:	f7ff fd79 	bl	80013fc <Error_Handler>
  }

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000060c 	.word	0x2000060c
 8001914:	40011000 	.word	0x40011000

08001918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_UART_MspInit+0x84>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d12c      	bne.n	8001994 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_UART_MspInit+0x88>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_UART_MspInit+0x88>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_UART_MspInit+0x88>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_UART_MspInit+0x88>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_UART_MspInit+0x88>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_UART_MspInit+0x88>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001972:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001984:	2307      	movs	r3, #7
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 8001990:	f002 fdb6 	bl	8004500 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40011000 	.word	0x40011000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ae:	e003      	b.n	80019b8 <LoopCopyDataInit>

080019b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019b6:	3104      	adds	r1, #4

080019b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c0:	d3f6      	bcc.n	80019b0 <CopyDataInit>
  ldr  r2, =_sbss
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019c4:	e002      	b.n	80019cc <LoopFillZerobss>

080019c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019c8:	f842 3b04 	str.w	r3, [r2], #4

080019cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d0:	d3f9      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019d2:	f7ff feef 	bl	80017b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f00a f88b 	bl	800baf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff fb91 	bl	8001100 <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019e0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80019e4:	0800dc1c 	.word	0x0800dc1c
  ldr  r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019ec:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 80019f0:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 80019f4:	20000a18 	.word	0x20000a18

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>

080019fa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019fe:	f000 fe4b 	bl	8002698 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001a02:	20ca      	movs	r0, #202	; 0xca
 8001a04:	f000 f95d 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001a08:	20c3      	movs	r0, #195	; 0xc3
 8001a0a:	f000 f967 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001a0e:	2008      	movs	r0, #8
 8001a10:	f000 f964 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001a14:	2050      	movs	r0, #80	; 0x50
 8001a16:	f000 f961 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001a1a:	20cf      	movs	r0, #207	; 0xcf
 8001a1c:	f000 f951 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 f95b 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001a26:	20c1      	movs	r0, #193	; 0xc1
 8001a28:	f000 f958 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001a2c:	2030      	movs	r0, #48	; 0x30
 8001a2e:	f000 f955 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001a32:	20ed      	movs	r0, #237	; 0xed
 8001a34:	f000 f945 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001a38:	2064      	movs	r0, #100	; 0x64
 8001a3a:	f000 f94f 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f000 f94c 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001a44:	2012      	movs	r0, #18
 8001a46:	f000 f949 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001a4a:	2081      	movs	r0, #129	; 0x81
 8001a4c:	f000 f946 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001a50:	20e8      	movs	r0, #232	; 0xe8
 8001a52:	f000 f936 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001a56:	2085      	movs	r0, #133	; 0x85
 8001a58:	f000 f940 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f000 f93d 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a62:	2078      	movs	r0, #120	; 0x78
 8001a64:	f000 f93a 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001a68:	20cb      	movs	r0, #203	; 0xcb
 8001a6a:	f000 f92a 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001a6e:	2039      	movs	r0, #57	; 0x39
 8001a70:	f000 f934 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001a74:	202c      	movs	r0, #44	; 0x2c
 8001a76:	f000 f931 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f92e 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001a80:	2034      	movs	r0, #52	; 0x34
 8001a82:	f000 f92b 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001a86:	2002      	movs	r0, #2
 8001a88:	f000 f928 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001a8c:	20f7      	movs	r0, #247	; 0xf7
 8001a8e:	f000 f918 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001a92:	2020      	movs	r0, #32
 8001a94:	f000 f922 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001a98:	20ea      	movs	r0, #234	; 0xea
 8001a9a:	f000 f912 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 f91c 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f000 f919 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001aaa:	20b1      	movs	r0, #177	; 0xb1
 8001aac:	f000 f909 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f000 f913 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001ab6:	201b      	movs	r0, #27
 8001ab8:	f000 f910 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001abc:	20b6      	movs	r0, #182	; 0xb6
 8001abe:	f000 f900 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001ac2:	200a      	movs	r0, #10
 8001ac4:	f000 f90a 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001ac8:	20a2      	movs	r0, #162	; 0xa2
 8001aca:	f000 f907 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001ace:	20c0      	movs	r0, #192	; 0xc0
 8001ad0:	f000 f8f7 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f000 f901 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001ada:	20c1      	movs	r0, #193	; 0xc1
 8001adc:	f000 f8f1 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ae0:	2010      	movs	r0, #16
 8001ae2:	f000 f8fb 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001ae6:	20c5      	movs	r0, #197	; 0xc5
 8001ae8:	f000 f8eb 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001aec:	2045      	movs	r0, #69	; 0x45
 8001aee:	f000 f8f5 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001af2:	2015      	movs	r0, #21
 8001af4:	f000 f8f2 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001af8:	20c7      	movs	r0, #199	; 0xc7
 8001afa:	f000 f8e2 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001afe:	2090      	movs	r0, #144	; 0x90
 8001b00:	f000 f8ec 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001b04:	2036      	movs	r0, #54	; 0x36
 8001b06:	f000 f8dc 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001b0a:	20c8      	movs	r0, #200	; 0xc8
 8001b0c:	f000 f8e6 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001b10:	20f2      	movs	r0, #242	; 0xf2
 8001b12:	f000 f8d6 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f8e0 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001b1c:	20b0      	movs	r0, #176	; 0xb0
 8001b1e:	f000 f8d0 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001b22:	20c2      	movs	r0, #194	; 0xc2
 8001b24:	f000 f8da 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001b28:	20b6      	movs	r0, #182	; 0xb6
 8001b2a:	f000 f8ca 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001b2e:	200a      	movs	r0, #10
 8001b30:	f000 f8d4 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001b34:	20a7      	movs	r0, #167	; 0xa7
 8001b36:	f000 f8d1 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001b3a:	2027      	movs	r0, #39	; 0x27
 8001b3c:	f000 f8ce 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b40:	2004      	movs	r0, #4
 8001b42:	f000 f8cb 	bl	8001cdc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001b46:	202a      	movs	r0, #42	; 0x2a
 8001b48:	f000 f8bb 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f000 f8c5 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f8c2 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 f8bf 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001b5e:	20ef      	movs	r0, #239	; 0xef
 8001b60:	f000 f8bc 	bl	8001cdc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001b64:	202b      	movs	r0, #43	; 0x2b
 8001b66:	f000 f8ac 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 f8b6 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 f8b3 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f000 f8b0 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001b7c:	203f      	movs	r0, #63	; 0x3f
 8001b7e:	f000 f8ad 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001b82:	20f6      	movs	r0, #246	; 0xf6
 8001b84:	f000 f89d 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f000 f8a7 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f000 f8a4 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001b94:	2006      	movs	r0, #6
 8001b96:	f000 f8a1 	bl	8001cdc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001b9a:	202c      	movs	r0, #44	; 0x2c
 8001b9c:	f000 f891 	bl	8001cc2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001ba0:	20c8      	movs	r0, #200	; 0xc8
 8001ba2:	f000 fe67 	bl	8002874 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001ba6:	2026      	movs	r0, #38	; 0x26
 8001ba8:	f000 f88b 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f000 f895 	bl	8001cdc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001bb2:	20e0      	movs	r0, #224	; 0xe0
 8001bb4:	f000 f885 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001bb8:	200f      	movs	r0, #15
 8001bba:	f000 f88f 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001bbe:	2029      	movs	r0, #41	; 0x29
 8001bc0:	f000 f88c 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001bc4:	2024      	movs	r0, #36	; 0x24
 8001bc6:	f000 f889 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001bca:	200c      	movs	r0, #12
 8001bcc:	f000 f886 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001bd0:	200e      	movs	r0, #14
 8001bd2:	f000 f883 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bd6:	2009      	movs	r0, #9
 8001bd8:	f000 f880 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001bdc:	204e      	movs	r0, #78	; 0x4e
 8001bde:	f000 f87d 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001be2:	2078      	movs	r0, #120	; 0x78
 8001be4:	f000 f87a 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001be8:	203c      	movs	r0, #60	; 0x3c
 8001bea:	f000 f877 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bee:	2009      	movs	r0, #9
 8001bf0:	f000 f874 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001bf4:	2013      	movs	r0, #19
 8001bf6:	f000 f871 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f000 f86e 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001c00:	2017      	movs	r0, #23
 8001c02:	f000 f86b 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c06:	2011      	movs	r0, #17
 8001c08:	f000 f868 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f865 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001c12:	20e1      	movs	r0, #225	; 0xe1
 8001c14:	f000 f855 	bl	8001cc2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 f85f 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001c1e:	2016      	movs	r0, #22
 8001c20:	f000 f85c 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001c24:	201b      	movs	r0, #27
 8001c26:	f000 f859 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001c2a:	2004      	movs	r0, #4
 8001c2c:	f000 f856 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c30:	2011      	movs	r0, #17
 8001c32:	f000 f853 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001c36:	2007      	movs	r0, #7
 8001c38:	f000 f850 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001c3c:	2031      	movs	r0, #49	; 0x31
 8001c3e:	f000 f84d 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001c42:	2033      	movs	r0, #51	; 0x33
 8001c44:	f000 f84a 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001c48:	2042      	movs	r0, #66	; 0x42
 8001c4a:	f000 f847 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001c4e:	2005      	movs	r0, #5
 8001c50:	f000 f844 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001c54:	200c      	movs	r0, #12
 8001c56:	f000 f841 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f000 f83e 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001c60:	2028      	movs	r0, #40	; 0x28
 8001c62:	f000 f83b 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001c66:	202f      	movs	r0, #47	; 0x2f
 8001c68:	f000 f838 	bl	8001cdc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001c6c:	200f      	movs	r0, #15
 8001c6e:	f000 f835 	bl	8001cdc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001c72:	2011      	movs	r0, #17
 8001c74:	f000 f825 	bl	8001cc2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001c78:	20c8      	movs	r0, #200	; 0xc8
 8001c7a:	f000 fdfb 	bl	8002874 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c7e:	2029      	movs	r0, #41	; 0x29
 8001c80:	f000 f81f 	bl	8001cc2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001c84:	202c      	movs	r0, #44	; 0x2c
 8001c86:	f000 f81c 	bl	8001cc2 <ili9341_WriteReg>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c92:	f000 fd01 	bl	8002698 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001c96:	2103      	movs	r1, #3
 8001c98:	20d3      	movs	r0, #211	; 0xd3
 8001c9a:	f000 f82c 	bl	8001cf6 <ili9341_ReadData>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b29b      	uxth	r3, r3
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001caa:	2029      	movs	r0, #41	; 0x29
 8001cac:	f000 f809 	bl	8001cc2 <ili9341_WriteReg>
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001cb8:	2028      	movs	r0, #40	; 0x28
 8001cba:	f000 f802 	bl	8001cc2 <ili9341_WriteReg>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fd7c 	bl	80027cc <LCD_IO_WriteReg>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fd4d 	bl	8002788 <LCD_IO_WriteData>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460a      	mov	r2, r1
 8001d00:	80fb      	strh	r3, [r7, #6]
 8001d02:	4613      	mov	r3, r2
 8001d04:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001d06:	797a      	ldrb	r2, [r7, #5]
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 fd7f 	bl	8002810 <LCD_IO_ReadData>
 8001d12:	4603      	mov	r3, r0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001d20:	23f0      	movs	r3, #240	; 0xf0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001d30:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fa59 	bl	8002204 <stmpe811_GetInstance>
 8001d52:	4603      	mov	r3, r0
 8001d54:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	2bff      	cmp	r3, #255	; 0xff
 8001d5a:	d112      	bne.n	8001d82 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 fa51 	bl	8002204 <stmpe811_GetInstance>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001d66:	7bbb      	ldrb	r3, [r7, #14]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d80a      	bhi.n	8001d82 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	b2d1      	uxtb	r1, r2
 8001d72:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <stmpe811_Init+0x4c>)
 8001d74:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001d76:	f000 fd88 	bl	800288a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f807 	bl	8001d90 <stmpe811_Reset>
    }
  }
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000114 	.word	0x20000114

08001d90 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2202      	movs	r2, #2
 8001da0:	2103      	movs	r1, #3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fd7d 	bl	80028a2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001da8:	200a      	movs	r0, #10
 8001daa:	f000 fdb7 	bl	800291c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2200      	movs	r2, #0
 8001db4:	2103      	movs	r1, #3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fd73 	bl	80028a2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f000 fdad 	bl	800291c <IOE_Delay>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001dca:	b590      	push	{r4, r7, lr}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001dd4:	f000 fd59 	bl	800288a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fd72 	bl	80028c8 <IOE_Read>
 8001de4:	4603      	mov	r3, r0
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fd69 	bl	80028c8 <IOE_Read>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	b29b      	uxth	r3, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd90      	pop	{r4, r7, pc}

08001e08 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2109      	movs	r1, #9
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fd53 	bl	80028c8 <IOE_Read>
 8001e22:	4603      	mov	r3, r0
 8001e24:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	2109      	movs	r1, #9
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fd33 	bl	80028a2 <IOE_Write>
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2109      	movs	r1, #9
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fd35 	bl	80028c8 <IOE_Read>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	2109      	movs	r1, #9
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fd15 	bl	80028a2 <IOE_Write>
    
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	80fb      	strh	r3, [r7, #6]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	210a      	movs	r1, #10
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fd14 	bl	80028c8 <IOE_Read>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	797b      	ldrb	r3, [r7, #5]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	210a      	movs	r1, #10
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fcf4 	bl	80028a2 <IOE_Write>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	460a      	mov	r2, r1
 8001ecc:	80fb      	strh	r3, [r7, #6]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	210a      	movs	r1, #10
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fcf3 	bl	80028c8 <IOE_Read>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001ee6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	b25a      	sxtb	r2, r3
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	210a      	movs	r1, #10
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fcce 	bl	80028a2 <IOE_Write>
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	460a      	mov	r2, r1
 8001f18:	80fb      	strh	r3, [r7, #6]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	210b      	movs	r1, #11
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fccf 	bl	80028c8 <IOE_Read>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	797b      	ldrb	r3, [r7, #5]
 8001f30:	4013      	ands	r3, r2
 8001f32:	b2db      	uxtb	r3, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	460a      	mov	r2, r1
 8001f46:	80fb      	strh	r3, [r7, #6]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	797a      	ldrb	r2, [r7, #5]
 8001f52:	210b      	movs	r1, #11
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fca4 	bl	80028a2 <IOE_Write>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	6039      	str	r1, [r7, #0]
 8001f6c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2117      	movs	r1, #23
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fca5 	bl	80028c8 <IOE_Read>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	b25a      	sxtb	r2, r3
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	2117      	movs	r1, #23
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fc80 	bl	80028a2 <IOE_Write>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fc84 	bl	80028c8 <IOE_Read>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	f023 0304 	bic.w	r3, r3, #4
 8001fca:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fc64 	bl	80028a2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	21f0      	movs	r1, #240	; 0xf0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ffbf 	bl	8001f62 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	2104      	movs	r1, #4
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fc54 	bl	80028a2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2249      	movs	r2, #73	; 0x49
 8002000:	2120      	movs	r1, #32
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fc4d 	bl	80028a2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002008:	2002      	movs	r0, #2
 800200a:	f000 fc87 	bl	800291c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2201      	movs	r2, #1
 8002014:	2121      	movs	r1, #33	; 0x21
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fc43 	bl	80028a2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	229a      	movs	r2, #154	; 0x9a
 8002022:	2141      	movs	r1, #65	; 0x41
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fc3c 	bl	80028a2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2201      	movs	r2, #1
 8002030:	214a      	movs	r1, #74	; 0x4a
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fc35 	bl	80028a2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2201      	movs	r2, #1
 800203e:	214b      	movs	r1, #75	; 0x4b
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fc2e 	bl	80028a2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2200      	movs	r2, #0
 800204c:	214b      	movs	r1, #75	; 0x4b
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fc27 	bl	80028a2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2201      	movs	r2, #1
 800205a:	2156      	movs	r1, #86	; 0x56
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fc20 	bl	80028a2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2201      	movs	r2, #1
 8002068:	2158      	movs	r1, #88	; 0x58
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fc19 	bl	80028a2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2201      	movs	r2, #1
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fc12 	bl	80028a2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	22ff      	movs	r2, #255	; 0xff
 8002084:	210b      	movs	r1, #11
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fc0b 	bl	80028a2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800208c:	2002      	movs	r0, #2
 800208e:	f000 fc45 	bl	800291c <IOE_Delay>
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fc0a 	bl	80028c8 <IOE_Read>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	bf0c      	ite	eq
 80020be:	2301      	moveq	r3, #1
 80020c0:	2300      	movne	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80020c6:	7bbb      	ldrb	r3, [r7, #14]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	214c      	movs	r1, #76	; 0x4c
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fbf8 	bl	80028c8 <IOE_Read>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e00d      	b.n	8002100 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2201      	movs	r2, #1
 80020ea:	214b      	movs	r1, #75	; 0x4b
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fbd8 	bl	80028a2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2200      	movs	r2, #0
 80020f8:	214b      	movs	r1, #75	; 0x4b
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fbd1 	bl	80028a2 <IOE_Write>
  }
  
  return ret;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	b2d8      	uxtb	r0, r3
 800211c:	f107 0210 	add.w	r2, r7, #16
 8002120:	2304      	movs	r3, #4
 8002122:	21d7      	movs	r1, #215	; 0xd7
 8002124:	f000 fbe3 	bl	80028ee <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002128:	7c3b      	ldrb	r3, [r7, #16]
 800212a:	061a      	lsls	r2, r3, #24
 800212c:	7c7b      	ldrb	r3, [r7, #17]
 800212e:	041b      	lsls	r3, r3, #16
 8002130:	431a      	orrs	r2, r3
 8002132:	7cbb      	ldrb	r3, [r7, #18]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	4313      	orrs	r3, r2
 8002138:	7cfa      	ldrb	r2, [r7, #19]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	0d1b      	lsrs	r3, r3, #20
 8002142:	b29a      	uxth	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2201      	movs	r2, #1
 800215e:	214b      	movs	r1, #75	; 0x4b
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fb9e 	bl	80028a2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002166:	89fb      	ldrh	r3, [r7, #14]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2200      	movs	r2, #0
 800216c:	214b      	movs	r1, #75	; 0x4b
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fb97 	bl	80028a2 <IOE_Write>
}
 8002174:	bf00      	nop
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002186:	f000 fb86 	bl	8002896 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	211f      	movs	r1, #31
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fe76 	bl	8001e80 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fe36 	bl	8001e08 <stmpe811_EnableGlobalIT>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fe47 	bl	8001e44 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	211f      	movs	r1, #31
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fe81 	bl	8001ec2 <stmpe811_DisableITSource>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	211f      	movs	r1, #31
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fe99 	bl	8001f0e <stmpe811_ReadGITStatus>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	211f      	movs	r1, #31
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fea1 	bl	8001f3c <stmpe811_ClearGlobalIT>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	e00b      	b.n	8002230 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <stmpe811_GetInstance+0x40>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	b29b      	uxth	r3, r3
 8002220:	88fa      	ldrh	r2, [r7, #6]
 8002222:	429a      	cmp	r2, r3
 8002224:	d101      	bne.n	800222a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	e006      	b.n	8002238 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3301      	adds	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d9f0      	bls.n	8002218 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002236:	23ff      	movs	r3, #255	; 0xff
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	20000114 	.word	0x20000114

08002248 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a33      	ldr	r2, [pc, #204]	; (8002324 <I2Cx_MspInit+0xdc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d15f      	bne.n	800231a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <I2Cx_MspInit+0xe0>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a31      	ldr	r2, [pc, #196]	; (8002328 <I2Cx_MspInit+0xe0>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <I2Cx_MspInit+0xe0>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <I2Cx_MspInit+0xe0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a2a      	ldr	r2, [pc, #168]	; (8002328 <I2Cx_MspInit+0xe0>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <I2Cx_MspInit+0xe0>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002298:	2312      	movs	r3, #18
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80022a0:	2302      	movs	r3, #2
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80022a4:	2304      	movs	r3, #4
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	481f      	ldr	r0, [pc, #124]	; (800232c <I2Cx_MspInit+0xe4>)
 80022b0:	f002 f926 	bl	8004500 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80022b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	481b      	ldr	r0, [pc, #108]	; (8002330 <I2Cx_MspInit+0xe8>)
 80022c2:	f002 f91d 	bl	8004500 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <I2Cx_MspInit+0xe0>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a16      	ldr	r2, [pc, #88]	; (8002328 <I2Cx_MspInit+0xe0>)
 80022d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <I2Cx_MspInit+0xe0>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <I2Cx_MspInit+0xe0>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <I2Cx_MspInit+0xe0>)
 80022e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ec:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <I2Cx_MspInit+0xe0>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <I2Cx_MspInit+0xe0>)
 80022f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022f8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	210f      	movs	r1, #15
 80022fe:	2048      	movs	r0, #72	; 0x48
 8002300:	f001 fb60 	bl	80039c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002304:	2048      	movs	r0, #72	; 0x48
 8002306:	f001 fb79 	bl	80039fc <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	210f      	movs	r1, #15
 800230e:	2049      	movs	r0, #73	; 0x49
 8002310:	f001 fb58 	bl	80039c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002314:	2049      	movs	r0, #73	; 0x49
 8002316:	f001 fb71 	bl	80039fc <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40005c00 	.word	0x40005c00
 8002328:	40023800 	.word	0x40023800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020800 	.word	0x40020800

08002334 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002338:	4814      	ldr	r0, [pc, #80]	; (800238c <I2Cx_Init+0x58>)
 800233a:	f004 fa21 	bl	8006780 <HAL_I2C_GetState>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d121      	bne.n	8002388 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <I2Cx_Init+0x58>)
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <I2Cx_Init+0x5c>)
 8002348:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <I2Cx_Init+0x58>)
 800234c:	4a11      	ldr	r2, [pc, #68]	; (8002394 <I2Cx_Init+0x60>)
 800234e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <I2Cx_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <I2Cx_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <I2Cx_Init+0x58>)
 800235e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002362:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <I2Cx_Init+0x58>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <I2Cx_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <I2Cx_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <I2Cx_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <I2Cx_Init+0x58>)
 800237e:	f7ff ff63 	bl	8002248 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002382:	4802      	ldr	r0, [pc, #8]	; (800238c <I2Cx_Init+0x58>)
 8002384:	f003 fd74 	bl	8005e70 <HAL_I2C_Init>
  }
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000064c 	.word	0x2000064c
 8002390:	40005c00 	.word	0x40005c00
 8002394:	000186a0 	.word	0x000186a0

08002398 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <I2Cx_ITConfig+0x58>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <I2Cx_ITConfig+0x58>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <I2Cx_ITConfig+0x58>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80023ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80023c0:	2301      	movs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <I2Cx_ITConfig+0x5c>)
 80023ca:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	4619      	mov	r1, r3
 80023d0:	4809      	ldr	r0, [pc, #36]	; (80023f8 <I2Cx_ITConfig+0x60>)
 80023d2:	f002 f895 	bl	8004500 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80023d6:	2200      	movs	r2, #0
 80023d8:	210f      	movs	r1, #15
 80023da:	2028      	movs	r0, #40	; 0x28
 80023dc:	f001 faf2 	bl	80039c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80023e0:	2028      	movs	r0, #40	; 0x28
 80023e2:	f001 fb0b 	bl	80039fc <HAL_NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	10210000 	.word	0x10210000
 80023f8:	40020000 	.word	0x40020000

080023fc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af04      	add	r7, sp, #16
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
 8002406:	460b      	mov	r3, r1
 8002408:	71bb      	strb	r3, [r7, #6]
 800240a:	4613      	mov	r3, r2
 800240c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	b299      	uxth	r1, r3
 8002416:	79bb      	ldrb	r3, [r7, #6]
 8002418:	b29a      	uxth	r2, r3
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <I2Cx_WriteData+0x4c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	9302      	str	r3, [sp, #8]
 8002420:	2301      	movs	r3, #1
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	1d7b      	adds	r3, r7, #5
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	4808      	ldr	r0, [pc, #32]	; (800244c <I2Cx_WriteData+0x50>)
 800242c:	f003 fe88 	bl	8006140 <HAL_I2C_Mem_Write>
 8002430:	4603      	mov	r3, r0
 8002432:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800243a:	f000 f863 	bl	8002504 <I2Cx_Error>
  }        
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000064 	.word	0x20000064
 800244c:	2000064c 	.word	0x2000064c

08002450 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af04      	add	r7, sp, #16
 8002456:	4603      	mov	r3, r0
 8002458:	460a      	mov	r2, r1
 800245a:	71fb      	strb	r3, [r7, #7]
 800245c:	4613      	mov	r3, r2
 800245e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	b299      	uxth	r1, r3
 800246c:	79bb      	ldrb	r3, [r7, #6]
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <I2Cx_ReadData+0x50>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	2301      	movs	r3, #1
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	f107 030e 	add.w	r3, r7, #14
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2301      	movs	r3, #1
 8002482:	4808      	ldr	r0, [pc, #32]	; (80024a4 <I2Cx_ReadData+0x54>)
 8002484:	f003 ff56 	bl	8006334 <HAL_I2C_Mem_Read>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002492:	f000 f837 	bl	8002504 <I2Cx_Error>
  
  }
  return value;
 8002496:	7bbb      	ldrb	r3, [r7, #14]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000064 	.word	0x20000064
 80024a4:	2000064c 	.word	0x2000064c

080024a8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af04      	add	r7, sp, #16
 80024ae:	603a      	str	r2, [r7, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
 80024b6:	460b      	mov	r3, r1
 80024b8:	71bb      	strb	r3, [r7, #6]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	b299      	uxth	r1, r3
 80024c6:	79bb      	ldrb	r3, [r7, #6]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <I2Cx_ReadBuffer+0x54>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	9302      	str	r3, [sp, #8]
 80024d0:	88bb      	ldrh	r3, [r7, #4]
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2301      	movs	r3, #1
 80024da:	4809      	ldr	r0, [pc, #36]	; (8002500 <I2Cx_ReadBuffer+0x58>)
 80024dc:	f003 ff2a 	bl	8006334 <HAL_I2C_Mem_Read>
 80024e0:	4603      	mov	r3, r0
 80024e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e002      	b.n	80024f4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80024ee:	f000 f809 	bl	8002504 <I2Cx_Error>

    return 1;
 80024f2:	2301      	movs	r3, #1
  }
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000064 	.word	0x20000064
 8002500:	2000064c 	.word	0x2000064c

08002504 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <I2Cx_Error+0x14>)
 800250a:	f003 fde9 	bl	80060e0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800250e:	f7ff ff11 	bl	8002334 <I2Cx_Init>
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000064c 	.word	0x2000064c

0800251c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002520:	4819      	ldr	r0, [pc, #100]	; (8002588 <SPIx_Init+0x6c>)
 8002522:	f006 fc5d 	bl	8008de0 <HAL_SPI_GetState>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12b      	bne.n	8002584 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <SPIx_Init+0x6c>)
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <SPIx_Init+0x70>)
 8002530:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <SPIx_Init+0x6c>)
 8002534:	2218      	movs	r2, #24
 8002536:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <SPIx_Init+0x6c>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <SPIx_Init+0x6c>)
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <SPIx_Init+0x6c>)
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <SPIx_Init+0x6c>)
 800254c:	2200      	movs	r2, #0
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <SPIx_Init+0x6c>)
 8002552:	2207      	movs	r2, #7
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <SPIx_Init+0x6c>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <SPIx_Init+0x6c>)
 800255e:	2200      	movs	r2, #0
 8002560:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <SPIx_Init+0x6c>)
 8002564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002568:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <SPIx_Init+0x6c>)
 800256c:	2200      	movs	r2, #0
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SPIx_Init+0x6c>)
 8002572:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002576:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002578:	4803      	ldr	r0, [pc, #12]	; (8002588 <SPIx_Init+0x6c>)
 800257a:	f000 f853 	bl	8002624 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800257e:	4802      	ldr	r0, [pc, #8]	; (8002588 <SPIx_Init+0x6c>)
 8002580:	f005 ffc3 	bl	800850a <HAL_SPI_Init>
  } 
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000118 	.word	0x20000118
 800258c:	40015000 	.word	0x40015000

08002590 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <SPIx_Read+0x38>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f107 0108 	add.w	r1, r7, #8
 80025aa:	4808      	ldr	r0, [pc, #32]	; (80025cc <SPIx_Read+0x3c>)
 80025ac:	f006 f96d 	bl	800888a <HAL_SPI_Receive>
 80025b0:	4603      	mov	r3, r0
 80025b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80025ba:	f000 f827 	bl	800260c <SPIx_Error>
  }
  
  return readvalue;
 80025be:	68bb      	ldr	r3, [r7, #8]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000068 	.word	0x20000068
 80025cc:	20000118 	.word	0x20000118

080025d0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <SPIx_Write+0x34>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1db9      	adds	r1, r7, #6
 80025e4:	2201      	movs	r2, #1
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <SPIx_Write+0x38>)
 80025e8:	f006 f81b 	bl	8008622 <HAL_SPI_Transmit>
 80025ec:	4603      	mov	r3, r0
 80025ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80025f6:	f000 f809 	bl	800260c <SPIx_Error>
  }
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000068 	.word	0x20000068
 8002608:	20000118 	.word	0x20000118

0800260c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002610:	4803      	ldr	r0, [pc, #12]	; (8002620 <SPIx_Error+0x14>)
 8002612:	f005 ffde 	bl	80085d2 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002616:	f7ff ff81 	bl	800251c <SPIx_Init>
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000118 	.word	0x20000118

08002624 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <SPIx_MspInit+0x6c>)
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	4a16      	ldr	r2, [pc, #88]	; (8002690 <SPIx_MspInit+0x6c>)
 8002636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800263a:	6453      	str	r3, [r2, #68]	; 0x44
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <SPIx_MspInit+0x6c>)
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <SPIx_MspInit+0x6c>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a0f      	ldr	r2, [pc, #60]	; (8002690 <SPIx_MspInit+0x6c>)
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <SPIx_MspInit+0x6c>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002664:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002668:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800266e:	2302      	movs	r3, #2
 8002670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002672:	2301      	movs	r3, #1
 8002674:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002676:	2305      	movs	r3, #5
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	4804      	ldr	r0, [pc, #16]	; (8002694 <SPIx_MspInit+0x70>)
 8002682:	f001 ff3d 	bl	8004500 <HAL_GPIO_Init>
}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	40021400 	.word	0x40021400

08002698 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <LCD_IO_Init+0xe0>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d164      	bne.n	8002770 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80026a6:	4b34      	ldr	r3, [pc, #208]	; (8002778 <LCD_IO_Init+0xe0>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <LCD_IO_Init+0xe4>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a31      	ldr	r2, [pc, #196]	; (800277c <LCD_IO_Init+0xe4>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <LCD_IO_Init+0xe4>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80026c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026ce:	2301      	movs	r3, #1
 80026d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	4619      	mov	r1, r3
 80026e0:	4827      	ldr	r0, [pc, #156]	; (8002780 <LCD_IO_Init+0xe8>)
 80026e2:	f001 ff0d 	bl	8004500 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <LCD_IO_Init+0xe4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a23      	ldr	r2, [pc, #140]	; (800277c <LCD_IO_Init+0xe4>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b21      	ldr	r3, [pc, #132]	; (800277c <LCD_IO_Init+0xe4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002706:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002708:	2301      	movs	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002710:	2302      	movs	r3, #2
 8002712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4619      	mov	r1, r3
 800271a:	4819      	ldr	r0, [pc, #100]	; (8002780 <LCD_IO_Init+0xe8>)
 800271c:	f001 fef0 	bl	8004500 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4b15      	ldr	r3, [pc, #84]	; (800277c <LCD_IO_Init+0xe4>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	4a14      	ldr	r2, [pc, #80]	; (800277c <LCD_IO_Init+0xe4>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6313      	str	r3, [r2, #48]	; 0x30
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <LCD_IO_Init+0xe4>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800273c:	2304      	movs	r3, #4
 800273e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4619      	mov	r1, r3
 8002752:	480c      	ldr	r0, [pc, #48]	; (8002784 <LCD_IO_Init+0xec>)
 8002754:	f001 fed4 	bl	8004500 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002758:	2200      	movs	r2, #0
 800275a:	2104      	movs	r1, #4
 800275c:	4809      	ldr	r0, [pc, #36]	; (8002784 <LCD_IO_Init+0xec>)
 800275e:	f002 f983 	bl	8004a68 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002762:	2201      	movs	r2, #1
 8002764:	2104      	movs	r1, #4
 8002766:	4807      	ldr	r0, [pc, #28]	; (8002784 <LCD_IO_Init+0xec>)
 8002768:	f002 f97e 	bl	8004a68 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800276c:	f7ff fed6 	bl	800251c <SPIx_Init>
  }
}
 8002770:	bf00      	nop
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000170 	.word	0x20000170
 800277c:	40023800 	.word	0x40023800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40020800 	.word	0x40020800

08002788 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002792:	2201      	movs	r2, #1
 8002794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002798:	480a      	ldr	r0, [pc, #40]	; (80027c4 <LCD_IO_WriteData+0x3c>)
 800279a:	f002 f965 	bl	8004a68 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800279e:	2200      	movs	r2, #0
 80027a0:	2104      	movs	r1, #4
 80027a2:	4809      	ldr	r0, [pc, #36]	; (80027c8 <LCD_IO_WriteData+0x40>)
 80027a4:	f002 f960 	bl	8004a68 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff10 	bl	80025d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027b0:	2201      	movs	r2, #1
 80027b2:	2104      	movs	r1, #4
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <LCD_IO_WriteData+0x40>)
 80027b6:	f002 f957 	bl	8004a68 <HAL_GPIO_WritePin>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40020800 	.word	0x40020800

080027cc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80027d6:	2200      	movs	r2, #0
 80027d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027dc:	480a      	ldr	r0, [pc, #40]	; (8002808 <LCD_IO_WriteReg+0x3c>)
 80027de:	f002 f943 	bl	8004a68 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80027e2:	2200      	movs	r2, #0
 80027e4:	2104      	movs	r1, #4
 80027e6:	4809      	ldr	r0, [pc, #36]	; (800280c <LCD_IO_WriteReg+0x40>)
 80027e8:	f002 f93e 	bl	8004a68 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff feed 	bl	80025d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027f6:	2201      	movs	r2, #1
 80027f8:	2104      	movs	r1, #4
 80027fa:	4804      	ldr	r0, [pc, #16]	; (800280c <LCD_IO_WriteReg+0x40>)
 80027fc:	f002 f934 	bl	8004a68 <HAL_GPIO_WritePin>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40020800 	.word	0x40020800

08002810 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	460a      	mov	r2, r1
 800281a:	80fb      	strh	r3, [r7, #6]
 800281c:	4613      	mov	r3, r2
 800281e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002824:	2200      	movs	r2, #0
 8002826:	2104      	movs	r1, #4
 8002828:	4810      	ldr	r0, [pc, #64]	; (800286c <LCD_IO_ReadData+0x5c>)
 800282a:	f002 f91d 	bl	8004a68 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800282e:	2200      	movs	r2, #0
 8002830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002834:	480e      	ldr	r0, [pc, #56]	; (8002870 <LCD_IO_ReadData+0x60>)
 8002836:	f002 f917 	bl	8004a68 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fec7 	bl	80025d0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002842:	797b      	ldrb	r3, [r7, #5]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fea3 	bl	8002590 <SPIx_Read>
 800284a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002852:	4807      	ldr	r0, [pc, #28]	; (8002870 <LCD_IO_ReadData+0x60>)
 8002854:	f002 f908 	bl	8004a68 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002858:	2201      	movs	r2, #1
 800285a:	2104      	movs	r1, #4
 800285c:	4803      	ldr	r0, [pc, #12]	; (800286c <LCD_IO_ReadData+0x5c>)
 800285e:	f002 f903 	bl	8004a68 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00

08002874 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 ffc7 	bl	8003810 <HAL_Delay>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800288a:	b580      	push	{r7, lr}
 800288c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800288e:	f7ff fd51 	bl	8002334 <I2Cx_Init>
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}

08002896 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800289a:	f7ff fd7d 	bl	8002398 <I2Cx_ITConfig>
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
 80028ac:	460b      	mov	r3, r1
 80028ae:	71bb      	strb	r3, [r7, #6]
 80028b0:	4613      	mov	r3, r2
 80028b2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80028b4:	797a      	ldrb	r2, [r7, #5]
 80028b6:	79b9      	ldrb	r1, [r7, #6]
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fd9e 	bl	80023fc <I2Cx_WriteData>
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	460a      	mov	r2, r1
 80028d2:	71fb      	strb	r3, [r7, #7]
 80028d4:	4613      	mov	r3, r2
 80028d6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80028d8:	79ba      	ldrb	r2, [r7, #6]
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fdb6 	bl	8002450 <I2Cx_ReadData>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	603a      	str	r2, [r7, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
 80028fc:	460b      	mov	r3, r1
 80028fe:	71bb      	strb	r3, [r7, #6]
 8002900:	4613      	mov	r3, r2
 8002902:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002904:	88bb      	ldrh	r3, [r7, #4]
 8002906:	79b9      	ldrb	r1, [r7, #6]
 8002908:	79f8      	ldrb	r0, [r7, #7]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	f7ff fdcc 	bl	80024a8 <I2Cx_ReadBuffer>
 8002910:	4603      	mov	r3, r0
 8002912:	b29b      	uxth	r3, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 ff73 	bl	8003810 <HAL_Delay>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <BSP_LCD_Init+0xbc>)
 800293a:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <BSP_LCD_Init+0xc0>)
 800293c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800293e:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002940:	2209      	movs	r2, #9
 8002942:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002946:	2201      	movs	r2, #1
 8002948:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800294a:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <BSP_LCD_Init+0xbc>)
 800294c:	221d      	movs	r2, #29
 800294e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002950:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002952:	2203      	movs	r2, #3
 8002954:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002958:	f240 120d 	movw	r2, #269	; 0x10d
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002960:	f240 1243 	movw	r2, #323	; 0x143
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002968:	f240 1217 	movw	r2, #279	; 0x117
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002970:	f240 1247 	movw	r2, #327	; 0x147
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <BSP_LCD_Init+0xbc>)
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <BSP_LCD_Init+0xc4>)
 8002990:	2208      	movs	r2, #8
 8002992:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002994:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <BSP_LCD_Init+0xc4>)
 8002996:	22c0      	movs	r2, #192	; 0xc0
 8002998:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <BSP_LCD_Init+0xc4>)
 800299c:	2204      	movs	r2, #4
 800299e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80029a0:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <BSP_LCD_Init+0xc4>)
 80029a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80029a8:	4813      	ldr	r0, [pc, #76]	; (80029f8 <BSP_LCD_Init+0xc4>)
 80029aa:	f005 fb71 	bl	8008090 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <BSP_LCD_Init+0xbc>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <BSP_LCD_Init+0xbc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <BSP_LCD_Init+0xbc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <BSP_LCD_Init+0xbc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80029c6:	f000 fba9 	bl	800311c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80029ca:	4809      	ldr	r0, [pc, #36]	; (80029f0 <BSP_LCD_Init+0xbc>)
 80029cc:	f004 fabc 	bl	8006f48 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <BSP_LCD_Init+0xc8>)
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <BSP_LCD_Init+0xcc>)
 80029d4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <BSP_LCD_Init+0xc8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80029de:	f000 fcd1 	bl	8003384 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80029e2:	4808      	ldr	r0, [pc, #32]	; (8002a04 <BSP_LCD_Init+0xd0>)
 80029e4:	f000 f920 	bl	8002c28 <BSP_LCD_SetFont>

  return LCD_OK;
 80029e8:	2300      	movs	r3, #0
}  
 80029ea:	4618      	mov	r0, r3
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200006a0 	.word	0x200006a0
 80029f4:	40016800 	.word	0x40016800
 80029f8:	200001b4 	.word	0x200001b4
 80029fc:	20000748 	.word	0x20000748
 8002a00:	20000004 	.word	0x20000004
 8002a04:	2000006c 	.word	0x2000006c

08002a08 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <BSP_LCD_GetXSize+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4798      	blx	r3
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000748 	.word	0x20000748

08002a20 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <BSP_LCD_GetYSize+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	4798      	blx	r3
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000748 	.word	0x20000748

08002a38 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b090      	sub	sp, #64	; 0x40
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002a48:	f7ff ffde 	bl	8002a08 <BSP_LCD_GetXSize>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002a54:	f7ff ffe4 	bl	8002a20 <BSP_LCD_GetYSize>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002a64:	23ff      	movs	r3, #255	; 0xff
 8002a66:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a84:	2307      	movs	r3, #7
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002a88:	f7ff ffbe 	bl	8002a08 <BSP_LCD_GetXSize>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002a90:	f7ff ffc6 	bl	8002a20 <BSP_LCD_GetYSize>
 8002a94:	4603      	mov	r3, r0
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002a98:	88fa      	ldrh	r2, [r7, #6]
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4814      	ldr	r0, [pc, #80]	; (8002af4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002aa2:	f004 fbe3 	bl	800726c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	4913      	ldr	r1, [pc, #76]	; (8002af8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	490e      	ldr	r1, [pc, #56]	; (8002af8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3308      	adds	r3, #8
 8002acc:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <BSP_LCD_LayerDefaultInit+0xc4>)
 8002ace:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	4909      	ldr	r1, [pc, #36]	; (8002af8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002ae6:	f004 fc7d 	bl	80073e4 <HAL_LTDC_EnableDither>
}
 8002aea:	bf00      	nop
 8002aec:	3740      	adds	r7, #64	; 0x40
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200006a0 	.word	0x200006a0
 8002af8:	200001e8 	.word	0x200001e8
 8002afc:	2000006c 	.word	0x2000006c

08002b00 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002b08:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <BSP_LCD_SelectLayer+0x1c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	200001e4 	.word	0x200001e4

08002b20 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d112      	bne.n	8002b58 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <BSP_LCD_SetLayerVisible+0x78>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	01db      	lsls	r3, r3, #7
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3384      	adds	r3, #132	; 0x84
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <BSP_LCD_SetLayerVisible+0x78>)
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	4611      	mov	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	01d2      	lsls	r2, r2, #7
 8002b4c:	440a      	add	r2, r1
 8002b4e:	3284      	adds	r2, #132	; 0x84
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e011      	b.n	8002b7c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <BSP_LCD_SetLayerVisible+0x78>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	01db      	lsls	r3, r3, #7
 8002b62:	4413      	add	r3, r2
 8002b64:	3384      	adds	r3, #132	; 0x84
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_LCD_SetLayerVisible+0x78>)
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	01d2      	lsls	r2, r2, #7
 8002b72:	440a      	add	r2, r1
 8002b74:	3284      	adds	r2, #132	; 0x84
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <BSP_LCD_SetLayerVisible+0x78>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <BSP_LCD_SetLayerVisible+0x78>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	200006a0 	.word	0x200006a0

08002b9c <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6839      	ldr	r1, [r7, #0]
 8002baa:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <BSP_LCD_SetColorKeying+0x24>)
 8002bac:	f004 fb9c 	bl	80072e8 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <BSP_LCD_SetColorKeying+0x24>)
 8002bb4:	f004 fbdc 	bl	8007370 <HAL_LTDC_EnableColorKeying>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200006a0 	.word	0x200006a0

08002bc4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <BSP_LCD_SetTextColor+0x28>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4907      	ldr	r1, [pc, #28]	; (8002bf0 <BSP_LCD_SetTextColor+0x2c>)
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	200001e4 	.word	0x200001e4
 8002bf0:	200001e8 	.word	0x200001e8

08002bf4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <BSP_LCD_SetBackColor+0x2c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4908      	ldr	r1, [pc, #32]	; (8002c24 <BSP_LCD_SetBackColor+0x30>)
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	200001e4 	.word	0x200001e4
 8002c24:	200001e8 	.word	0x200001e8

08002c28 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <BSP_LCD_SetFont+0x2c>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4908      	ldr	r1, [pc, #32]	; (8002c58 <BSP_LCD_SetFont+0x30>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3308      	adds	r3, #8
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	601a      	str	r2, [r3, #0]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	200001e4 	.word	0x200001e4
 8002c58:	200001e8 	.word	0x200001e8

08002c5c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <BSP_LCD_Clear+0x48>)
 8002c66:	681c      	ldr	r4, [r3, #0]
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <BSP_LCD_Clear+0x48>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <BSP_LCD_Clear+0x4c>)
 8002c6e:	2134      	movs	r1, #52	; 0x34
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	335c      	adds	r3, #92	; 0x5c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461d      	mov	r5, r3
 8002c7c:	f7ff fec4 	bl	8002a08 <BSP_LCD_GetXSize>
 8002c80:	4606      	mov	r6, r0
 8002c82:	f7ff fecd 	bl	8002a20 <BSP_LCD_GetYSize>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	4632      	mov	r2, r6
 8002c94:	4629      	mov	r1, r5
 8002c96:	4620      	mov	r0, r4
 8002c98:	f000 fb3c 	bl	8003314 <FillBuffer>
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca4:	200001e4 	.word	0x200001e4
 8002ca8:	200006a0 	.word	0x200006a0

08002cac <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002cac:	b5b0      	push	{r4, r5, r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	80bb      	strh	r3, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <BSP_LCD_DrawHLine+0x70>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <BSP_LCD_DrawHLine+0x74>)
 8002cc8:	2134      	movs	r1, #52	; 0x34
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	335c      	adds	r3, #92	; 0x5c
 8002cd2:	681c      	ldr	r4, [r3, #0]
 8002cd4:	f7ff fe98 	bl	8002a08 <BSP_LCD_GetXSize>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	88bb      	ldrh	r3, [r7, #4]
 8002cdc:	fb03 f202 	mul.w	r2, r3, r2
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4423      	add	r3, r4
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <BSP_LCD_DrawHLine+0x70>)
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	68fc      	ldr	r4, [r7, #12]
 8002cf0:	887d      	ldrh	r5, [r7, #2]
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <BSP_LCD_DrawHLine+0x70>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	490b      	ldr	r1, [pc, #44]	; (8002d24 <BSP_LCD_DrawHLine+0x78>)
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2300      	movs	r3, #0
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	462a      	mov	r2, r5
 8002d0e:	4621      	mov	r1, r4
 8002d10:	f000 fb00 	bl	8003314 <FillBuffer>
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1c:	200001e4 	.word	0x200001e4
 8002d20:	200006a0 	.word	0x200006a0
 8002d24:	200001e8 	.word	0x200001e8

08002d28 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
 8002d32:	460b      	mov	r3, r1
 8002d34:	80bb      	strh	r3, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	f1c3 0303 	rsb	r3, r3, #3
 8002d42:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002d4c:	e0cf      	b.n	8002eee <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	4413      	add	r3, r2
 8002d56:	b298      	uxth	r0, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	88ba      	ldrh	r2, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	b29c      	uxth	r4, r3
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <BSP_LCD_DrawCircle+0x1d8>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4967      	ldr	r1, [pc, #412]	; (8002f04 <BSP_LCD_DrawCircle+0x1dc>)
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4621      	mov	r1, r4
 8002d78:	f000 faa6 	bl	80032c8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	88fa      	ldrh	r2, [r7, #6]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	b298      	uxth	r0, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	88ba      	ldrh	r2, [r7, #4]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	b29c      	uxth	r4, r3
 8002d90:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <BSP_LCD_DrawCircle+0x1d8>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	495b      	ldr	r1, [pc, #364]	; (8002f04 <BSP_LCD_DrawCircle+0x1dc>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	4621      	mov	r1, r4
 8002da6:	f000 fa8f 	bl	80032c8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	4413      	add	r3, r2
 8002db2:	b298      	uxth	r0, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	88ba      	ldrh	r2, [r7, #4]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	b29c      	uxth	r4, r3
 8002dbe:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <BSP_LCD_DrawCircle+0x1d8>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4950      	ldr	r1, [pc, #320]	; (8002f04 <BSP_LCD_DrawCircle+0x1dc>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	f000 fa78 	bl	80032c8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	b298      	uxth	r0, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	88ba      	ldrh	r2, [r7, #4]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b29c      	uxth	r4, r3
 8002dec:	4b44      	ldr	r3, [pc, #272]	; (8002f00 <BSP_LCD_DrawCircle+0x1d8>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4944      	ldr	r1, [pc, #272]	; (8002f04 <BSP_LCD_DrawCircle+0x1dc>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4621      	mov	r1, r4
 8002e02:	f000 fa61 	bl	80032c8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b298      	uxth	r0, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	88bb      	ldrh	r3, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	b29c      	uxth	r4, r3
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <BSP_LCD_DrawCircle+0x1d8>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4939      	ldr	r1, [pc, #228]	; (8002f04 <BSP_LCD_DrawCircle+0x1dc>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4621      	mov	r1, r4
 8002e30:	f000 fa4a 	bl	80032c8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b298      	uxth	r0, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	88bb      	ldrh	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	b29c      	uxth	r4, r3
 8002e48:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <BSP_LCD_DrawCircle+0x1d8>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	492d      	ldr	r1, [pc, #180]	; (8002f04 <BSP_LCD_DrawCircle+0x1dc>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	f000 fa33 	bl	80032c8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	4413      	add	r3, r2
 8002e6a:	b298      	uxth	r0, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	88bb      	ldrh	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	b29c      	uxth	r4, r3
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <BSP_LCD_DrawCircle+0x1d8>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4922      	ldr	r1, [pc, #136]	; (8002f04 <BSP_LCD_DrawCircle+0x1dc>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	f000 fa1c 	bl	80032c8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	b298      	uxth	r0, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	88bb      	ldrh	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b29c      	uxth	r4, r3
 8002ea4:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <BSP_LCD_DrawCircle+0x1d8>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4916      	ldr	r1, [pc, #88]	; (8002f04 <BSP_LCD_DrawCircle+0x1dc>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4621      	mov	r1, r4
 8002eba:	f000 fa05 	bl	80032c8 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da06      	bge.n	8002ed2 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	009a      	lsls	r2, r3, #2
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4413      	add	r3, r2
 8002ecc:	3306      	adds	r3, #6
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e00a      	b.n	8002ee8 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	009a      	lsls	r2, r3, #2
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	4413      	add	r3, r2
 8002ede:	330a      	adds	r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]
      cury--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f67f af2b 	bls.w	8002d4e <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}
 8002f00:	200001e4 	.word	0x200001e4
 8002f04:	200001e8 	.word	0x200001e8

08002f08 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af02      	add	r7, sp, #8
 8002f10:	4604      	mov	r4, r0
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	4623      	mov	r3, r4
 8002f1a:	80fb      	strh	r3, [r7, #6]
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	80bb      	strh	r3, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <BSP_LCD_FillRect+0xa8>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4920      	ldr	r1, [pc, #128]	; (8002fb4 <BSP_LCD_FillRect+0xac>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fe40 	bl	8002bc4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <BSP_LCD_FillRect+0xa8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <BSP_LCD_FillRect+0xb0>)
 8002f4a:	2134      	movs	r1, #52	; 0x34
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	335c      	adds	r3, #92	; 0x5c
 8002f54:	681c      	ldr	r4, [r3, #0]
 8002f56:	f7ff fd57 	bl	8002a08 <BSP_LCD_GetXSize>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	88bb      	ldrh	r3, [r7, #4]
 8002f5e:	fb03 f202 	mul.w	r2, r3, r2
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4423      	add	r3, r4
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <BSP_LCD_FillRect+0xa8>)
 8002f6e:	681c      	ldr	r4, [r3, #0]
 8002f70:	68fd      	ldr	r5, [r7, #12]
 8002f72:	887e      	ldrh	r6, [r7, #2]
 8002f74:	f8b7 8000 	ldrh.w	r8, [r7]
 8002f78:	f7ff fd46 	bl	8002a08 <BSP_LCD_GetXSize>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	1ad1      	subs	r1, r2, r3
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <BSP_LCD_FillRect+0xa8>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	480b      	ldr	r0, [pc, #44]	; (8002fb4 <BSP_LCD_FillRect+0xac>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4403      	add	r3, r0
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	9100      	str	r1, [sp, #0]
 8002f98:	4643      	mov	r3, r8
 8002f9a:	4632      	mov	r2, r6
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 f9b8 	bl	8003314 <FillBuffer>
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fae:	bf00      	nop
 8002fb0:	200001e4 	.word	0x200001e4
 8002fb4:	200001e8 	.word	0x200001e8
 8002fb8:	200006a0 	.word	0x200006a0

08002fbc <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	80fb      	strh	r3, [r7, #6]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	80bb      	strh	r3, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	f1c3 0303 	rsb	r3, r3, #3
 8002fd6:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002fe0:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <BSP_LCD_FillCircle+0x138>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4944      	ldr	r1, [pc, #272]	; (80030f8 <BSP_LCD_FillCircle+0x13c>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fde6 	bl	8002bc4 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002ff8:	e061      	b.n	80030be <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d021      	beq.n	8003044 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	b29b      	uxth	r3, r3
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	b298      	uxth	r0, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	b29a      	uxth	r2, r3
 800300e:	88bb      	ldrh	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	b299      	uxth	r1, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	b29b      	uxth	r3, r3
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	f7ff fe45 	bl	8002cac <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	b29b      	uxth	r3, r3
 8003026:	88fa      	ldrh	r2, [r7, #6]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	b298      	uxth	r0, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	b29b      	uxth	r3, r3
 8003030:	88ba      	ldrh	r2, [r7, #4]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	b299      	uxth	r1, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	b29b      	uxth	r3, r3
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	f7ff fe34 	bl	8002cac <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d021      	beq.n	800308e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	b29b      	uxth	r3, r3
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	b298      	uxth	r0, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	b29b      	uxth	r3, r3
 8003058:	88ba      	ldrh	r2, [r7, #4]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	b299      	uxth	r1, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	b29b      	uxth	r3, r3
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	f7ff fe20 	bl	8002cac <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	b29b      	uxth	r3, r3
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	b298      	uxth	r0, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	b29a      	uxth	r2, r3
 800307a:	88bb      	ldrh	r3, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	b299      	uxth	r1, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	b29b      	uxth	r3, r3
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	b29b      	uxth	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	f7ff fe0f 	bl	8002cac <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	da06      	bge.n	80030a2 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	4413      	add	r3, r2
 800309c:	3306      	adds	r3, #6
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e00a      	b.n	80030b8 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	009a      	lsls	r2, r3, #2
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	4413      	add	r3, r2
 80030ae:	330a      	adds	r3, #10
 80030b0:	617b      	str	r3, [r7, #20]
      cury--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	3301      	adds	r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d999      	bls.n	8002ffa <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <BSP_LCD_FillCircle+0x138>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	490b      	ldr	r1, [pc, #44]	; (80030f8 <BSP_LCD_FillCircle+0x13c>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fd73 	bl	8002bc4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	88b9      	ldrh	r1, [r7, #4]
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fe1f 	bl	8002d28 <BSP_LCD_DrawCircle>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200001e4 	.word	0x200001e4
 80030f8:	200001e8 	.word	0x200001e8

080030fc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <BSP_LCD_DisplayOn+0x1c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800310a:	4b03      	ldr	r3, [pc, #12]	; (8003118 <BSP_LCD_DisplayOn+0x1c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4798      	blx	r3
  }
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000748 	.word	0x20000748

0800311c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	; 0x38
 8003120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
 8003126:	4b61      	ldr	r3, [pc, #388]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a60      	ldr	r2, [pc, #384]	; (80032ac <BSP_LCD_MspInit+0x190>)
 800312c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800313a:	623b      	str	r3, [r7, #32]
 800313c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	4b5a      	ldr	r3, [pc, #360]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a59      	ldr	r2, [pc, #356]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003148:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b57      	ldr	r3, [pc, #348]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	4b53      	ldr	r3, [pc, #332]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a52      	ldr	r2, [pc, #328]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b50      	ldr	r3, [pc, #320]	; (80032ac <BSP_LCD_MspInit+0x190>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <BSP_LCD_MspInit+0x190>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a4b      	ldr	r2, [pc, #300]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b49      	ldr	r3, [pc, #292]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b45      	ldr	r3, [pc, #276]	; (80032ac <BSP_LCD_MspInit+0x190>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a44      	ldr	r2, [pc, #272]	; (80032ac <BSP_LCD_MspInit+0x190>)
 800319c:	f043 0304 	orr.w	r3, r3, #4
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b42      	ldr	r3, [pc, #264]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a3d      	ldr	r2, [pc, #244]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a36      	ldr	r2, [pc, #216]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031d4:	f043 0320 	orr.w	r3, r3, #32
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <BSP_LCD_MspInit+0x190>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003202:	f641 0358 	movw	r3, #6232	; 0x1858
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003210:	2302      	movs	r3, #2
 8003212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003214:	230e      	movs	r3, #14
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321c:	4619      	mov	r1, r3
 800321e:	4824      	ldr	r0, [pc, #144]	; (80032b0 <BSP_LCD_MspInit+0x194>)
 8003220:	f001 f96e 	bl	8004500 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003224:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800322a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4820      	ldr	r0, [pc, #128]	; (80032b4 <BSP_LCD_MspInit+0x198>)
 8003232:	f001 f965 	bl	8004500 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003236:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800323c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003240:	4619      	mov	r1, r3
 8003242:	481d      	ldr	r0, [pc, #116]	; (80032b8 <BSP_LCD_MspInit+0x19c>)
 8003244:	f001 f95c 	bl	8004500 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003248:	2348      	movs	r3, #72	; 0x48
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800324c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	481a      	ldr	r0, [pc, #104]	; (80032bc <BSP_LCD_MspInit+0x1a0>)
 8003254:	f001 f954 	bl	8004500 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800325e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003262:	4619      	mov	r1, r3
 8003264:	4816      	ldr	r0, [pc, #88]	; (80032c0 <BSP_LCD_MspInit+0x1a4>)
 8003266:	f001 f94b 	bl	8004500 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800326a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003274:	4619      	mov	r1, r3
 8003276:	4813      	ldr	r0, [pc, #76]	; (80032c4 <BSP_LCD_MspInit+0x1a8>)
 8003278:	f001 f942 	bl	8004500 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800327c:	2303      	movs	r3, #3
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003280:	2309      	movs	r3, #9
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003288:	4619      	mov	r1, r3
 800328a:	480a      	ldr	r0, [pc, #40]	; (80032b4 <BSP_LCD_MspInit+0x198>)
 800328c:	f001 f938 	bl	8004500 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329a:	4619      	mov	r1, r3
 800329c:	4809      	ldr	r0, [pc, #36]	; (80032c4 <BSP_LCD_MspInit+0x1a8>)
 800329e:	f001 f92f 	bl	8004500 <HAL_GPIO_Init>
}
 80032a2:	bf00      	nop
 80032a4:	3738      	adds	r7, #56	; 0x38
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40020800 	.word	0x40020800
 80032bc:	40020c00 	.word	0x40020c00
 80032c0:	40021400 	.word	0x40021400
 80032c4:	40021800 	.word	0x40021800

080032c8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	603a      	str	r2, [r7, #0]
 80032d2:	80fb      	strh	r3, [r7, #6]
 80032d4:	460b      	mov	r3, r1
 80032d6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <BSP_LCD_DrawPixel+0x44>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <BSP_LCD_DrawPixel+0x48>)
 80032de:	2134      	movs	r1, #52	; 0x34
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	335c      	adds	r3, #92	; 0x5c
 80032e8:	681c      	ldr	r4, [r3, #0]
 80032ea:	88bd      	ldrh	r5, [r7, #4]
 80032ec:	f7ff fb8c 	bl	8002a08 <BSP_LCD_GetXSize>
 80032f0:	4603      	mov	r3, r0
 80032f2:	fb03 f205 	mul.w	r2, r3, r5
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4423      	add	r3, r4
 80032fe:	461a      	mov	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bdb0      	pop	{r4, r5, r7, pc}
 800330c:	200001e4 	.word	0x200001e4
 8003310:	200006a0 	.word	0x200006a0

08003314 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <FillBuffer+0x68>)
 8003324:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003328:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <FillBuffer+0x68>)
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003330:	4a12      	ldr	r2, [pc, #72]	; (800337c <FillBuffer+0x68>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <FillBuffer+0x68>)
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <FillBuffer+0x6c>)
 800333a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800333c:	480f      	ldr	r0, [pc, #60]	; (800337c <FillBuffer+0x68>)
 800333e:	f000 fd43 	bl	8003dc8 <HAL_DMA2D_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d115      	bne.n	8003374 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	480c      	ldr	r0, [pc, #48]	; (800337c <FillBuffer+0x68>)
 800334c:	f000 ffaa 	bl	80042a4 <HAL_DMA2D_ConfigLayer>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10e      	bne.n	8003374 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69f9      	ldr	r1, [r7, #28]
 8003360:	4806      	ldr	r0, [pc, #24]	; (800337c <FillBuffer+0x68>)
 8003362:	f000 fd7a 	bl	8003e5a <HAL_DMA2D_Start>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800336c:	210a      	movs	r1, #10
 800336e:	4803      	ldr	r0, [pc, #12]	; (800337c <FillBuffer+0x68>)
 8003370:	f000 fd9e 	bl	8003eb0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000174 	.word	0x20000174
 8003380:	4002b000 	.word	0x4002b000

08003384 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003388:	4b29      	ldr	r3, [pc, #164]	; (8003430 <BSP_SDRAM_Init+0xac>)
 800338a:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <BSP_SDRAM_Init+0xb0>)
 800338c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <BSP_SDRAM_Init+0xb4>)
 8003390:	2202      	movs	r2, #2
 8003392:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003394:	4b28      	ldr	r3, [pc, #160]	; (8003438 <BSP_SDRAM_Init+0xb4>)
 8003396:	2207      	movs	r2, #7
 8003398:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <BSP_SDRAM_Init+0xb4>)
 800339c:	2204      	movs	r2, #4
 800339e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <BSP_SDRAM_Init+0xb4>)
 80033a2:	2207      	movs	r2, #7
 80033a4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <BSP_SDRAM_Init+0xb4>)
 80033a8:	2202      	movs	r2, #2
 80033aa:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <BSP_SDRAM_Init+0xb4>)
 80033ae:	2202      	movs	r2, #2
 80033b0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <BSP_SDRAM_Init+0xb4>)
 80033b4:	2202      	movs	r2, #2
 80033b6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80033b8:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033c6:	2204      	movs	r2, #4
 80033c8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80033ca:	4b19      	ldr	r3, [pc, #100]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033cc:	2210      	movs	r2, #16
 80033ce:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033d2:	2240      	movs	r2, #64	; 0x40
 80033d4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80033d6:	4b16      	ldr	r3, [pc, #88]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033d8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80033dc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ea:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80033fa:	2100      	movs	r1, #0
 80033fc:	480c      	ldr	r0, [pc, #48]	; (8003430 <BSP_SDRAM_Init+0xac>)
 80033fe:	f000 f87f 	bl	8003500 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003402:	490d      	ldr	r1, [pc, #52]	; (8003438 <BSP_SDRAM_Init+0xb4>)
 8003404:	480a      	ldr	r0, [pc, #40]	; (8003430 <BSP_SDRAM_Init+0xac>)
 8003406:	f005 f801 	bl	800840c <HAL_SDRAM_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <BSP_SDRAM_Init+0xb8>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e002      	b.n	800341e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <BSP_SDRAM_Init+0xb8>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800341e:	f240 506a 	movw	r0, #1386	; 0x56a
 8003422:	f000 f80d 	bl	8003440 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <BSP_SDRAM_Init+0xb8>)
 8003428:	781b      	ldrb	r3, [r3, #0]
}
 800342a:	4618      	mov	r0, r3
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000200 	.word	0x20000200
 8003434:	a0000140 	.word	0xa0000140
 8003438:	20000234 	.word	0x20000234
 800343c:	2000007c 	.word	0x2000007c

08003440 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800344c:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003454:	2208      	movs	r2, #8
 8003456:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800345a:	2201      	movs	r2, #1
 800345c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003460:	2200      	movs	r2, #0
 8003462:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003468:	4923      	ldr	r1, [pc, #140]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800346a:	4824      	ldr	r0, [pc, #144]	; (80034fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800346c:	f005 f802 	bl	8008474 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003470:	2001      	movs	r0, #1
 8003472:	f000 f9cd 	bl	8003810 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003478:	2202      	movs	r2, #2
 800347a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800347e:	2208      	movs	r2, #8
 8003480:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003484:	2201      	movs	r2, #1
 8003486:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800348e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003492:	4919      	ldr	r1, [pc, #100]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003494:	4819      	ldr	r0, [pc, #100]	; (80034fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003496:	f004 ffed 	bl	8008474 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800349c:	2203      	movs	r2, #3
 800349e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a2:	2208      	movs	r2, #8
 80034a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80034a6:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a8:	2204      	movs	r2, #4
 80034aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80034b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b6:	4910      	ldr	r1, [pc, #64]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b8:	4810      	ldr	r0, [pc, #64]	; (80034fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034ba:	f004 ffdb 	bl	8008474 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80034be:	f44f 730c 	mov.w	r3, #560	; 0x230
 80034c2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034c6:	2204      	movs	r2, #4
 80034c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034cc:	2208      	movs	r2, #8
 80034ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034da:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80034dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e0:	4905      	ldr	r1, [pc, #20]	; (80034f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034e2:	4806      	ldr	r0, [pc, #24]	; (80034fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034e4:	f004 ffc6 	bl	8008474 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4804      	ldr	r0, [pc, #16]	; (80034fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034ec:	f004 ffed 	bl	80084ca <HAL_SDRAM_ProgramRefreshRate>
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000250 	.word	0x20000250
 80034fc:	20000200 	.word	0x20000200

08003500 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b090      	sub	sp, #64	; 0x40
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80ec 	beq.w	80036ea <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
 8003516:	4b77      	ldr	r3, [pc, #476]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	4a76      	ldr	r2, [pc, #472]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6393      	str	r3, [r2, #56]	; 0x38
 8003522:	4b74      	ldr	r3, [pc, #464]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	4b70      	ldr	r3, [pc, #448]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a6f      	ldr	r2, [pc, #444]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b6d      	ldr	r3, [pc, #436]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]
 800354e:	4b69      	ldr	r3, [pc, #420]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	4a68      	ldr	r2, [pc, #416]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	6313      	str	r3, [r2, #48]	; 0x30
 800355a:	4b66      	ldr	r3, [pc, #408]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	4b62      	ldr	r3, [pc, #392]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a61      	ldr	r2, [pc, #388]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b5f      	ldr	r3, [pc, #380]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	4b5b      	ldr	r3, [pc, #364]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a5a      	ldr	r2, [pc, #360]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 800358c:	f043 0308 	orr.w	r3, r3, #8
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	4b54      	ldr	r3, [pc, #336]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a53      	ldr	r2, [pc, #332]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035a8:	f043 0310 	orr.w	r3, r3, #16
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b51      	ldr	r3, [pc, #324]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a45      	ldr	r2, [pc, #276]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b43      	ldr	r3, [pc, #268]	; (80036f4 <BSP_SDRAM_MspInit+0x1f4>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80035f6:	2302      	movs	r3, #2
 80035f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80035fe:	230c      	movs	r3, #12
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003602:	2360      	movs	r3, #96	; 0x60
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800360a:	4619      	mov	r1, r3
 800360c:	483a      	ldr	r0, [pc, #232]	; (80036f8 <BSP_SDRAM_MspInit+0x1f8>)
 800360e:	f000 ff77 	bl	8004500 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003612:	2301      	movs	r3, #1
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800361a:	4619      	mov	r1, r3
 800361c:	4837      	ldr	r0, [pc, #220]	; (80036fc <BSP_SDRAM_MspInit+0x1fc>)
 800361e:	f000 ff6f 	bl	8004500 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003622:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362c:	4619      	mov	r1, r3
 800362e:	4834      	ldr	r0, [pc, #208]	; (8003700 <BSP_SDRAM_MspInit+0x200>)
 8003630:	f000 ff66 	bl	8004500 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003634:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800363a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800363e:	4619      	mov	r1, r3
 8003640:	4830      	ldr	r0, [pc, #192]	; (8003704 <BSP_SDRAM_MspInit+0x204>)
 8003642:	f000 ff5d 	bl	8004500 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003646:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800364c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003650:	4619      	mov	r1, r3
 8003652:	482d      	ldr	r0, [pc, #180]	; (8003708 <BSP_SDRAM_MspInit+0x208>)
 8003654:	f000 ff54 	bl	8004500 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003658:	f248 1333 	movw	r3, #33075	; 0x8133
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800365e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003662:	4619      	mov	r1, r3
 8003664:	4829      	ldr	r0, [pc, #164]	; (800370c <BSP_SDRAM_MspInit+0x20c>)
 8003666:	f000 ff4b 	bl	8004500 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 800366c:	2200      	movs	r2, #0
 800366e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003670:	4b27      	ldr	r3, [pc, #156]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 8003678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800367e:	4b24      	ldr	r3, [pc, #144]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 8003680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003684:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 8003688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800368c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 8003690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003694:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003696:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 8003698:	2200      	movs	r2, #0
 800369a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800369c:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 800369e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036a2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036ac:	2203      	movs	r2, #3
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036be:	4a15      	ldr	r2, [pc, #84]	; (8003714 <BSP_SDRAM_MspInit+0x214>)
 80036c0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a12      	ldr	r2, [pc, #72]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
 80036c8:	4a11      	ldr	r2, [pc, #68]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80036ce:	4810      	ldr	r0, [pc, #64]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036d0:	f000 fa6c 	bl	8003bac <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80036d4:	480e      	ldr	r0, [pc, #56]	; (8003710 <BSP_SDRAM_MspInit+0x210>)
 80036d6:	f000 f9bb 	bl	8003a50 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80036da:	2200      	movs	r2, #0
 80036dc:	210f      	movs	r1, #15
 80036de:	2038      	movs	r0, #56	; 0x38
 80036e0:	f000 f970 	bl	80039c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80036e4:	2038      	movs	r0, #56	; 0x38
 80036e6:	f000 f989 	bl	80039fc <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80036ea:	bf00      	nop
 80036ec:	3740      	adds	r7, #64	; 0x40
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020400 	.word	0x40020400
 80036fc:	40020800 	.word	0x40020800
 8003700:	40020c00 	.word	0x40020c00
 8003704:	40021000 	.word	0x40021000
 8003708:	40021400 	.word	0x40021400
 800370c:	40021800 	.word	0x40021800
 8003710:	20000260 	.word	0x20000260
 8003714:	40026410 	.word	0x40026410

08003718 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	460a      	mov	r2, r1
 8003722:	80fb      	strh	r3, [r7, #6]
 8003724:	4613      	mov	r3, r2
 8003726:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800372c:	4a13      	ldr	r2, [pc, #76]	; (800377c <BSP_TS_Init+0x64>)
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003732:	4a13      	ldr	r2, [pc, #76]	; (8003780 <BSP_TS_Init+0x68>)
 8003734:	88bb      	ldrh	r3, [r7, #4]
 8003736:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <BSP_TS_Init+0x6c>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2082      	movs	r0, #130	; 0x82
 800373e:	4798      	blx	r3
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	f640 0311 	movw	r3, #2065	; 0x811
 8003748:	429a      	cmp	r2, r3
 800374a:	d104      	bne.n	8003756 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <BSP_TS_Init+0x70>)
 800374e:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <BSP_TS_Init+0x6c>)
 8003750:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <BSP_TS_Init+0x70>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2082      	movs	r0, #130	; 0x82
 8003764:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <BSP_TS_Init+0x70>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2082      	movs	r0, #130	; 0x82
 800376e:	4798      	blx	r3
  }

  return ret;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	200002c4 	.word	0x200002c4
 8003780:	200002c6 	.word	0x200002c6
 8003784:	2000003c 	.word	0x2000003c
 8003788:	200002c0 	.word	0x200002c0

0800378c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <HAL_Init+0x40>)
 8003796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_Init+0x40>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_Init+0x40>)
 80037a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a07      	ldr	r2, [pc, #28]	; (80037cc <HAL_Init+0x40>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b4:	2003      	movs	r0, #3
 80037b6:	f000 f8fa 	bl	80039ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7fd ff28 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c0:	f7fd fefa 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023c00 	.word	0x40023c00

080037d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_IncTick+0x20>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_IncTick+0x24>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <HAL_IncTick+0x24>)
 80037e2:	6013      	str	r3, [r2, #0]
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000084 	.word	0x20000084
 80037f4:	2000074c 	.word	0x2000074c

080037f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return uwTick;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_GetTick+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	2000074c 	.word	0x2000074c

08003810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003818:	f7ff ffee 	bl	80037f8 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d005      	beq.n	8003836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_Delay+0x40>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003836:	bf00      	nop
 8003838:	f7ff ffde 	bl	80037f8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8f7      	bhi.n	8003838 <HAL_Delay+0x28>
  {
  }
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000084 	.word	0x20000084

08003854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800387c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <__NVIC_GetPriorityGrouping+0x18>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 0307 	and.w	r3, r3, #7
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db0b      	blt.n	80038e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4907      	ldr	r1, [pc, #28]	; (80038f0 <__NVIC_EnableIRQ+0x38>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	; (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	; (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
         );
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ff4c 	bl	8003854 <__NVIC_SetPriorityGrouping>
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d6:	f7ff ff61 	bl	800389c <__NVIC_GetPriorityGrouping>
 80039da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	6978      	ldr	r0, [r7, #20]
 80039e2:	f7ff ffb1 	bl	8003948 <NVIC_EncodePriority>
 80039e6:	4602      	mov	r2, r0
 80039e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff80 	bl	80038f4 <__NVIC_SetPriority>
}
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff54 	bl	80038b8 <__NVIC_EnableIRQ>
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00e      	b.n	8003a48 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	795b      	ldrb	r3, [r3, #5]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fc fdd2 	bl	80005e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a5c:	f7ff fecc 	bl	80037f8 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e099      	b.n	8003ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a8c:	e00f      	b.n	8003aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8e:	f7ff feb3 	bl	80037f8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d908      	bls.n	8003aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e078      	b.n	8003ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e8      	bne.n	8003a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_DMA_Init+0x158>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d107      	bne.n	8003b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	4313      	orrs	r3, r2
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0307 	bic.w	r3, r3, #7
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d117      	bne.n	8003b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8bd 	bl	8003cd4 <DMA_CheckFifoParam>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e016      	b.n	8003ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f874 	bl	8003c68 <DMA_CalcBaseAndBitshift>
 8003b80:	4603      	mov	r3, r0
 8003b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	223f      	movs	r2, #63	; 0x3f
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	f010803f 	.word	0xf010803f

08003bac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e050      	b.n	8003c60 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d101      	bne.n	8003bce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e048      	b.n	8003c60 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2221      	movs	r2, #33	; 0x21
 8003c0c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f82a 	bl	8003c68 <DMA_CalcBaseAndBitshift>
 8003c14:	4603      	mov	r3, r0
 8003c16:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	223f      	movs	r2, #63	; 0x3f
 8003c42:	409a      	lsls	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	3b10      	subs	r3, #16
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <DMA_CalcBaseAndBitshift+0x64>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d909      	bls.n	8003caa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	1d1a      	adds	r2, r3, #4
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ca8:	e007      	b.n	8003cba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	aaaaaaab 	.word	0xaaaaaaab
 8003cd0:	0800dba4 	.word	0x0800dba4

08003cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11f      	bne.n	8003d2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d855      	bhi.n	8003da0 <DMA_CheckFifoParam+0xcc>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <DMA_CheckFifoParam+0x28>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d1f 	.word	0x08003d1f
 8003d04:	08003d0d 	.word	0x08003d0d
 8003d08:	08003da1 	.word	0x08003da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d045      	beq.n	8003da4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d1c:	e042      	b.n	8003da4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d26:	d13f      	bne.n	8003da8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2c:	e03c      	b.n	8003da8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d36:	d121      	bne.n	8003d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d836      	bhi.n	8003dac <DMA_CheckFifoParam+0xd8>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <DMA_CheckFifoParam+0x70>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d5b 	.word	0x08003d5b
 8003d4c:	08003d55 	.word	0x08003d55
 8003d50:	08003d6d 	.word	0x08003d6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      break;
 8003d58:	e02f      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d024      	beq.n	8003db0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6a:	e021      	b.n	8003db0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d74:	d11e      	bne.n	8003db4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d7a:	e01b      	b.n	8003db4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <DMA_CheckFifoParam+0xb4>
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d003      	beq.n	8003d8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d86:	e018      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e015      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00e      	beq.n	8003db8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9e:	e00b      	b.n	8003db8 <DMA_CheckFifoParam+0xe4>
      break;
 8003da0:	bf00      	nop
 8003da2:	e00a      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003da4:	bf00      	nop
 8003da6:	e008      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003da8:	bf00      	nop
 8003daa:	e006      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003dac:	bf00      	nop
 8003dae:	e004      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;   
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
      break;
 8003db8:	bf00      	nop
    }
  } 
  
  return status; 
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e03b      	b.n	8003e52 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fc fc4c 	bl	800068c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	f023 0107 	bic.w	r1, r3, #7
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68d1      	ldr	r1, [r2, #12]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af02      	add	r7, sp, #8
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA2D_Start+0x1c>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e018      	b.n	8003ea8 <HAL_DMA2D_Start+0x4e>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fa99 	bl	80043c8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d056      	beq.n	8003f7a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003ecc:	f7ff fc94 	bl	80037f8 <HAL_GetTick>
 8003ed0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ed2:	e04b      	b.n	8003f6c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d023      	beq.n	8003f2e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	f043 0202 	orr.w	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2221      	movs	r2, #33	; 0x21
 8003f18:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0a5      	b.n	800407a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d01a      	beq.n	8003f6c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003f36:	f7ff fc5f 	bl	80037f8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <HAL_DMA2D_PollForTransfer+0x9c>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10f      	bne.n	8003f6c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e086      	b.n	800407a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ac      	beq.n	8003ed4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d061      	beq.n	8004060 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9c:	f7ff fc2c 	bl	80037f8 <HAL_GetTick>
 8003fa0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fa2:	e056      	b.n	8004052 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02e      	beq.n	8004014 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	f043 0204 	orr.w	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2229      	movs	r2, #41	; 0x29
 8003ffe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2204      	movs	r2, #4
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e032      	b.n	800407a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d01a      	beq.n	8004052 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800401c:	f7ff fbec 	bl	80037f8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <HAL_DMA2D_PollForTransfer+0x182>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	f043 0220 	orr.w	r2, r3, #32
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2203      	movs	r2, #3
 8004042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e013      	b.n	800407a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0a1      	beq.n	8003fa4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2212      	movs	r2, #18
 8004066:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d026      	beq.n	80040f2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d021      	beq.n	80040f2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040bc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2201      	movs	r2, #1
 80040d0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2204      	movs	r2, #4
 80040d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d026      	beq.n	800414a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d021      	beq.n	800414a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004114:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2220      	movs	r2, #32
 800411c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	f043 0202 	orr.w	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d026      	beq.n	80041a2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800415a:	2b00      	cmp	r3, #0
 800415c:	d021      	beq.n	80041a2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2208      	movs	r2, #8
 8004174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2204      	movs	r2, #4
 8004186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00e      	beq.n	80041d4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2204      	movs	r2, #4
 80041cc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f853 	bl	800427a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d024      	beq.n	8004228 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01f      	beq.n	8004228 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2202      	movs	r2, #2
 80041fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01f      	beq.n	8004272 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01a      	beq.n	8004272 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800424a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2210      	movs	r2, #16
 8004252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f80e 	bl	800428e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_DMA2D_ConfigLayer+0x20>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e079      	b.n	80043b8 <HAL_DMA2D_ConfigLayer+0x114>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	3318      	adds	r3, #24
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80042ee:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_DMA2D_ConfigLayer+0x120>)
 80042f0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b0a      	cmp	r3, #10
 80042f8:	d003      	beq.n	8004302 <HAL_DMA2D_ConfigLayer+0x5e>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b09      	cmp	r3, #9
 8004300:	d107      	bne.n	8004312 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e005      	b.n	800431e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	061b      	lsls	r3, r3, #24
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d120      	bne.n	8004366 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	43db      	mvns	r3, r3
 800432e:	ea02 0103 	and.w	r1, r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	430a      	orrs	r2, r1
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b0a      	cmp	r3, #10
 800434c:	d003      	beq.n	8004356 <HAL_DMA2D_ConfigLayer+0xb2>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b09      	cmp	r3, #9
 8004354:	d127      	bne.n	80043a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004362:	629a      	str	r2, [r3, #40]	; 0x28
 8004364:	e01f      	b.n	80043a6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	43db      	mvns	r3, r3
 8004370:	ea02 0103 	and.w	r1, r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	430a      	orrs	r2, r1
 800437c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b0a      	cmp	r3, #10
 800438e:	d003      	beq.n	8004398 <HAL_DMA2D_ConfigLayer+0xf4>
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b09      	cmp	r3, #9
 8004396:	d106      	bne.n	80043a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043a4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	ff03000f 	.word	0xff03000f

080043c8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b08b      	sub	sp, #44	; 0x2c
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	041a      	lsls	r2, r3, #16
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004400:	d174      	bne.n	80044ec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004408:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004410:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004418:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d108      	bne.n	800443a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	431a      	orrs	r2, r3
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	4313      	orrs	r3, r2
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
 8004438:	e053      	b.n	80044e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d106      	bne.n	8004450 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4313      	orrs	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	e048      	b.n	80044e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d111      	bne.n	800447c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	0cdb      	lsrs	r3, r3, #19
 800445c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	0a9b      	lsrs	r3, r3, #10
 8004462:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	08db      	lsrs	r3, r3, #3
 8004468:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	02db      	lsls	r3, r3, #11
 8004472:	4313      	orrs	r3, r2
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
 800447a:	e032      	b.n	80044e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d117      	bne.n	80044b4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	0fdb      	lsrs	r3, r3, #31
 8004488:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	0cdb      	lsrs	r3, r3, #19
 800448e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	0adb      	lsrs	r3, r3, #11
 8004494:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	08db      	lsrs	r3, r3, #3
 800449a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	029b      	lsls	r3, r3, #10
 80044a4:	431a      	orrs	r2, r3
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	03db      	lsls	r3, r3, #15
 80044aa:	4313      	orrs	r3, r2
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	e016      	b.n	80044e2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	0f1b      	lsrs	r3, r3, #28
 80044b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	0d1b      	lsrs	r3, r3, #20
 80044be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	0b1b      	lsrs	r3, r3, #12
 80044c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	091b      	lsrs	r3, r3, #4
 80044ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	011a      	lsls	r2, r3, #4
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	431a      	orrs	r2, r3
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	031b      	lsls	r3, r3, #12
 80044da:	4313      	orrs	r3, r2
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80044ea:	e003      	b.n	80044f4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	60da      	str	r2, [r3, #12]
}
 80044f4:	bf00      	nop
 80044f6:	372c      	adds	r7, #44	; 0x2c
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	; 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	e177      	b.n	800480c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800451c:	2201      	movs	r2, #1
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	429a      	cmp	r2, r3
 8004536:	f040 8166 	bne.w	8004806 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d00b      	beq.n	800455a <HAL_GPIO_Init+0x5a>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d007      	beq.n	800455a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800454e:	2b11      	cmp	r3, #17
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b12      	cmp	r3, #18
 8004558:	d130      	bne.n	80045bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004590:	2201      	movs	r2, #1
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 0201 	and.w	r2, r3, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	2203      	movs	r2, #3
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0xfc>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b12      	cmp	r3, #18
 80045fa:	d123      	bne.n	8004644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	08da      	lsrs	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3208      	adds	r2, #8
 8004604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	220f      	movs	r2, #15
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	08da      	lsrs	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3208      	adds	r2, #8
 800463e:	69b9      	ldr	r1, [r7, #24]
 8004640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2203      	movs	r2, #3
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4013      	ands	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0203 	and.w	r2, r3, #3
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80c0 	beq.w	8004806 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4b65      	ldr	r3, [pc, #404]	; (8004820 <HAL_GPIO_Init+0x320>)
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	4a64      	ldr	r2, [pc, #400]	; (8004820 <HAL_GPIO_Init+0x320>)
 8004690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004694:	6453      	str	r3, [r2, #68]	; 0x44
 8004696:	4b62      	ldr	r3, [pc, #392]	; (8004820 <HAL_GPIO_Init+0x320>)
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046a2:	4a60      	ldr	r2, [pc, #384]	; (8004824 <HAL_GPIO_Init+0x324>)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	089b      	lsrs	r3, r3, #2
 80046a8:	3302      	adds	r3, #2
 80046aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	220f      	movs	r2, #15
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_GPIO_Init+0x328>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d037      	beq.n	800473e <HAL_GPIO_Init+0x23e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a56      	ldr	r2, [pc, #344]	; (800482c <HAL_GPIO_Init+0x32c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_GPIO_Init+0x23a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a55      	ldr	r2, [pc, #340]	; (8004830 <HAL_GPIO_Init+0x330>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d02b      	beq.n	8004736 <HAL_GPIO_Init+0x236>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a54      	ldr	r2, [pc, #336]	; (8004834 <HAL_GPIO_Init+0x334>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d025      	beq.n	8004732 <HAL_GPIO_Init+0x232>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a53      	ldr	r2, [pc, #332]	; (8004838 <HAL_GPIO_Init+0x338>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01f      	beq.n	800472e <HAL_GPIO_Init+0x22e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a52      	ldr	r2, [pc, #328]	; (800483c <HAL_GPIO_Init+0x33c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d019      	beq.n	800472a <HAL_GPIO_Init+0x22a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a51      	ldr	r2, [pc, #324]	; (8004840 <HAL_GPIO_Init+0x340>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_GPIO_Init+0x226>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a50      	ldr	r2, [pc, #320]	; (8004844 <HAL_GPIO_Init+0x344>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00d      	beq.n	8004722 <HAL_GPIO_Init+0x222>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4f      	ldr	r2, [pc, #316]	; (8004848 <HAL_GPIO_Init+0x348>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <HAL_GPIO_Init+0x21e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4e      	ldr	r2, [pc, #312]	; (800484c <HAL_GPIO_Init+0x34c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_GPIO_Init+0x21a>
 8004716:	2309      	movs	r3, #9
 8004718:	e012      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800471a:	230a      	movs	r3, #10
 800471c:	e010      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800471e:	2308      	movs	r3, #8
 8004720:	e00e      	b.n	8004740 <HAL_GPIO_Init+0x240>
 8004722:	2307      	movs	r3, #7
 8004724:	e00c      	b.n	8004740 <HAL_GPIO_Init+0x240>
 8004726:	2306      	movs	r3, #6
 8004728:	e00a      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800472a:	2305      	movs	r3, #5
 800472c:	e008      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800472e:	2304      	movs	r3, #4
 8004730:	e006      	b.n	8004740 <HAL_GPIO_Init+0x240>
 8004732:	2303      	movs	r3, #3
 8004734:	e004      	b.n	8004740 <HAL_GPIO_Init+0x240>
 8004736:	2302      	movs	r3, #2
 8004738:	e002      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800473e:	2300      	movs	r3, #0
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	f002 0203 	and.w	r2, r2, #3
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	4093      	lsls	r3, r2
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004750:	4934      	ldr	r1, [pc, #208]	; (8004824 <HAL_GPIO_Init+0x324>)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	089b      	lsrs	r3, r3, #2
 8004756:	3302      	adds	r3, #2
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800475e:	4b3c      	ldr	r3, [pc, #240]	; (8004850 <HAL_GPIO_Init+0x350>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	43db      	mvns	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004782:	4a33      	ldr	r2, [pc, #204]	; (8004850 <HAL_GPIO_Init+0x350>)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004788:	4b31      	ldr	r3, [pc, #196]	; (8004850 <HAL_GPIO_Init+0x350>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ac:	4a28      	ldr	r2, [pc, #160]	; (8004850 <HAL_GPIO_Init+0x350>)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047b2:	4b27      	ldr	r3, [pc, #156]	; (8004850 <HAL_GPIO_Init+0x350>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4013      	ands	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_GPIO_Init+0x350>)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047dc:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <HAL_GPIO_Init+0x350>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <HAL_GPIO_Init+0x350>)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3301      	adds	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b0f      	cmp	r3, #15
 8004810:	f67f ae84 	bls.w	800451c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004814:	bf00      	nop
 8004816:	3724      	adds	r7, #36	; 0x24
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	40023800 	.word	0x40023800
 8004824:	40013800 	.word	0x40013800
 8004828:	40020000 	.word	0x40020000
 800482c:	40020400 	.word	0x40020400
 8004830:	40020800 	.word	0x40020800
 8004834:	40020c00 	.word	0x40020c00
 8004838:	40021000 	.word	0x40021000
 800483c:	40021400 	.word	0x40021400
 8004840:	40021800 	.word	0x40021800
 8004844:	40021c00 	.word	0x40021c00
 8004848:	40022000 	.word	0x40022000
 800484c:	40022400 	.word	0x40022400
 8004850:	40013c00 	.word	0x40013c00

08004854 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e0d9      	b.n	8004a24 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004870:	2201      	movs	r2, #1
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	f040 80c9 	bne.w	8004a1e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800488c:	4a6a      	ldr	r2, [pc, #424]	; (8004a38 <HAL_GPIO_DeInit+0x1e4>)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	3302      	adds	r3, #2
 8004894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004898:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	220f      	movs	r2, #15
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a62      	ldr	r2, [pc, #392]	; (8004a3c <HAL_GPIO_DeInit+0x1e8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d037      	beq.n	8004926 <HAL_GPIO_DeInit+0xd2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a61      	ldr	r2, [pc, #388]	; (8004a40 <HAL_GPIO_DeInit+0x1ec>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d031      	beq.n	8004922 <HAL_GPIO_DeInit+0xce>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a60      	ldr	r2, [pc, #384]	; (8004a44 <HAL_GPIO_DeInit+0x1f0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02b      	beq.n	800491e <HAL_GPIO_DeInit+0xca>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a5f      	ldr	r2, [pc, #380]	; (8004a48 <HAL_GPIO_DeInit+0x1f4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d025      	beq.n	800491a <HAL_GPIO_DeInit+0xc6>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a5e      	ldr	r2, [pc, #376]	; (8004a4c <HAL_GPIO_DeInit+0x1f8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01f      	beq.n	8004916 <HAL_GPIO_DeInit+0xc2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a5d      	ldr	r2, [pc, #372]	; (8004a50 <HAL_GPIO_DeInit+0x1fc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d019      	beq.n	8004912 <HAL_GPIO_DeInit+0xbe>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a5c      	ldr	r2, [pc, #368]	; (8004a54 <HAL_GPIO_DeInit+0x200>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_GPIO_DeInit+0xba>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a5b      	ldr	r2, [pc, #364]	; (8004a58 <HAL_GPIO_DeInit+0x204>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00d      	beq.n	800490a <HAL_GPIO_DeInit+0xb6>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a5a      	ldr	r2, [pc, #360]	; (8004a5c <HAL_GPIO_DeInit+0x208>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <HAL_GPIO_DeInit+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a59      	ldr	r2, [pc, #356]	; (8004a60 <HAL_GPIO_DeInit+0x20c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d101      	bne.n	8004902 <HAL_GPIO_DeInit+0xae>
 80048fe:	2309      	movs	r3, #9
 8004900:	e012      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 8004902:	230a      	movs	r3, #10
 8004904:	e010      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 8004906:	2308      	movs	r3, #8
 8004908:	e00e      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 800490a:	2307      	movs	r3, #7
 800490c:	e00c      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 800490e:	2306      	movs	r3, #6
 8004910:	e00a      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 8004912:	2305      	movs	r3, #5
 8004914:	e008      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 8004916:	2304      	movs	r3, #4
 8004918:	e006      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 800491a:	2303      	movs	r3, #3
 800491c:	e004      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 800491e:	2302      	movs	r3, #2
 8004920:	e002      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_GPIO_DeInit+0xd4>
 8004926:	2300      	movs	r3, #0
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	f002 0203 	and.w	r2, r2, #3
 800492e:	0092      	lsls	r2, r2, #2
 8004930:	4093      	lsls	r3, r2
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	429a      	cmp	r2, r3
 8004936:	d132      	bne.n	800499e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004938:	4b4a      	ldr	r3, [pc, #296]	; (8004a64 <HAL_GPIO_DeInit+0x210>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	43db      	mvns	r3, r3
 8004940:	4948      	ldr	r1, [pc, #288]	; (8004a64 <HAL_GPIO_DeInit+0x210>)
 8004942:	4013      	ands	r3, r2
 8004944:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_GPIO_DeInit+0x210>)
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43db      	mvns	r3, r3
 800494e:	4945      	ldr	r1, [pc, #276]	; (8004a64 <HAL_GPIO_DeInit+0x210>)
 8004950:	4013      	ands	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004954:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_GPIO_DeInit+0x210>)
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	43db      	mvns	r3, r3
 800495c:	4941      	ldr	r1, [pc, #260]	; (8004a64 <HAL_GPIO_DeInit+0x210>)
 800495e:	4013      	ands	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004962:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <HAL_GPIO_DeInit+0x210>)
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	43db      	mvns	r3, r3
 800496a:	493e      	ldr	r1, [pc, #248]	; (8004a64 <HAL_GPIO_DeInit+0x210>)
 800496c:	4013      	ands	r3, r2
 800496e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	220f      	movs	r2, #15
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004980:	4a2d      	ldr	r2, [pc, #180]	; (8004a38 <HAL_GPIO_DeInit+0x1e4>)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	3302      	adds	r3, #2
 8004988:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	43da      	mvns	r2, r3
 8004990:	4829      	ldr	r0, [pc, #164]	; (8004a38 <HAL_GPIO_DeInit+0x1e4>)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	400a      	ands	r2, r1
 8004998:	3302      	adds	r3, #2
 800499a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	2103      	movs	r1, #3
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	08da      	lsrs	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3208      	adds	r2, #8
 80049bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	220f      	movs	r2, #15
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	08d2      	lsrs	r2, r2, #3
 80049d4:	4019      	ands	r1, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3208      	adds	r2, #8
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	2103      	movs	r1, #3
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	401a      	ands	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	2101      	movs	r1, #1
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	401a      	ands	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	2103      	movs	r1, #3
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	401a      	ands	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	3301      	adds	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	f67f af22 	bls.w	8004870 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	40013800 	.word	0x40013800
 8004a3c:	40020000 	.word	0x40020000
 8004a40:	40020400 	.word	0x40020400
 8004a44:	40020800 	.word	0x40020800
 8004a48:	40020c00 	.word	0x40020c00
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40021400 	.word	0x40021400
 8004a54:	40021800 	.word	0x40021800
 8004a58:	40021c00 	.word	0x40021c00
 8004a5c:	40022000 	.word	0x40022000
 8004a60:	40022400 	.word	0x40022400
 8004a64:	40013c00 	.word	0x40013c00

08004a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
 8004a74:	4613      	mov	r3, r2
 8004a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a78:	787b      	ldrb	r3, [r7, #1]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a84:	e003      	b.n	8004a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	041a      	lsls	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	619a      	str	r2, [r3, #24]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f005 fc67 	bl	800a384 <USB_GetMode>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	f040 80ef 	bne.w	8004c9c <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f005 fc4b 	bl	800a35e <USB_ReadInterrupts>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80e5 	beq.w	8004c9a <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f005 fc42 	bl	800a35e <USB_ReadInterrupts>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae4:	d104      	bne.n	8004af0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004aee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f005 fc32 	bl	800a35e <USB_ReadInterrupts>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b04:	d104      	bne.n	8004b10 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b0e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f005 fc22 	bl	800a35e <USB_ReadInterrupts>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b24:	d104      	bne.n	8004b30 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b2e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f005 fc12 	bl	800a35e <USB_ReadInterrupts>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d103      	bne.n	8004b4c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f005 fc04 	bl	800a35e <USB_ReadInterrupts>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b60:	d115      	bne.n	8004b8e <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004b6a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d108      	bne.n	8004b8e <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f006 ff2d 	bl	800b9dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f005 fc09 	bl	800a3a0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f005 fbe3 	bl	800a35e <USB_ReadInterrupts>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ba2:	d102      	bne.n	8004baa <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f001 f8ef 	bl	8005d88 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f005 fbd5 	bl	800a35e <USB_ReadInterrupts>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d106      	bne.n	8004bcc <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f006 fef0 	bl	800b9a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2208      	movs	r2, #8
 8004bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f005 fbc4 	bl	800a35e <USB_ReadInterrupts>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be0:	d138      	bne.n	8004c54 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f005 fc14 	bl	800a414 <USB_HC_ReadInterrupt>
 8004bec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	e025      	b.n	8004c40 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d018      	beq.n	8004c3a <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1e:	d106      	bne.n	8004c2e <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f858 	bl	8004cdc <HCD_HC_IN_IRQHandler>
 8004c2c:	e005      	b.n	8004c3a <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fc86 	bl	8005546 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3d4      	bcc.n	8004bf4 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f005 fb80 	bl	800a35e <USB_ReadInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d101      	bne.n	8004c6c <HAL_HCD_IRQHandler+0x1d2>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_HCD_IRQHandler+0x1d4>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d014      	beq.n	8004c9c <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0210 	bic.w	r2, r2, #16
 8004c80:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 ffd4 	bl	8005c30 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0210 	orr.w	r2, r2, #16
 8004c96:	619a      	str	r2, [r3, #24]
 8004c98:	e000      	b.n	8004c9c <HAL_HCD_IRQHandler+0x202>
      return;
 8004c9a:	bf00      	nop
    }
  }
}
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_HCD_Stop+0x16>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e00d      	b.n	8004cd4 <HAL_HCD_Stop+0x32>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f005 fcb5 	bl	800a634 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d119      	bne.n	8004d40 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	60d3      	str	r3, [r2, #12]
 8004d3e:	e0ce      	b.n	8004ede <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d56:	d12c      	bne.n	8004db2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	461a      	mov	r2, r3
 8004d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	440b      	add	r3, r1
 8004d7a:	335d      	adds	r3, #93	; 0x5d
 8004d7c:	2207      	movs	r2, #7
 8004d7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d9a:	f043 0302 	orr.w	r3, r3, #2
 8004d9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f005 fb43 	bl	800a436 <USB_HC_Halt>
 8004db0:	e095      	b.n	8004ede <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d109      	bne.n	8004ddc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	e080      	b.n	8004ede <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d134      	bne.n	8004e5c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	440b      	add	r3, r1
 8004e20:	335d      	adds	r3, #93	; 0x5d
 8004e22:	2205      	movs	r2, #5
 8004e24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e32:	461a      	mov	r2, r3
 8004e34:	2310      	movs	r3, #16
 8004e36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	461a      	mov	r2, r3
 8004e46:	2308      	movs	r3, #8
 8004e48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	4611      	mov	r1, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f005 faee 	bl	800a436 <USB_HC_Halt>
 8004e5a:	e040      	b.n	8004ede <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d134      	bne.n	8004ede <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e8e:	f043 0302 	orr.w	r3, r3, #2
 8004e92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f005 fac9 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	440b      	add	r3, r1
 8004ec4:	335d      	adds	r3, #93	; 0x5d
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004edc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef4:	d122      	bne.n	8004f3c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f005 fa88 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f32:	461a      	mov	r2, r3
 8004f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f38:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004f3a:	e300      	b.n	800553e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	f040 80fd 	bne.w	800514e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01b      	beq.n	8004f94 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	440b      	add	r3, r1
 8004f6a:	3348      	adds	r3, #72	; 0x48
 8004f6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	0159      	lsls	r1, r3, #5
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	440b      	add	r3, r1
 8004f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004f80:	1ad1      	subs	r1, r2, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4403      	add	r3, r0
 8004f90:	334c      	adds	r3, #76	; 0x4c
 8004f92:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	440b      	add	r3, r1
 8004fa2:	335d      	adds	r3, #93	; 0x5d
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3358      	adds	r3, #88	; 0x58
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2301      	movs	r3, #1
 8004fcc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	440b      	add	r3, r1
 8004fdc:	333f      	adds	r3, #63	; 0x3f
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	440b      	add	r3, r1
 8004ff2:	333f      	adds	r3, #63	; 0x3f
 8004ff4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d121      	bne.n	800503e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	440a      	add	r2, r1
 8005010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f005 fa06 	bl	800a436 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4413      	add	r3, r2
 8005032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005036:	461a      	mov	r2, r3
 8005038:	2310      	movs	r3, #16
 800503a:	6093      	str	r3, [r2, #8]
 800503c:	e070      	b.n	8005120 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	440b      	add	r3, r1
 800504c:	333f      	adds	r3, #63	; 0x3f
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d12a      	bne.n	80050aa <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	440a      	add	r2, r1
 800506a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800506e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005072:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	440b      	add	r3, r1
 8005082:	335c      	adds	r3, #92	; 0x5c
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	b2d8      	uxtb	r0, r3
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	335c      	adds	r3, #92	; 0x5c
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	4601      	mov	r1, r0
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f006 fca8 	bl	800b9f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050a8:	e03a      	b.n	8005120 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	440b      	add	r3, r1
 80050b8:	333f      	adds	r3, #63	; 0x3f
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d12f      	bne.n	8005120 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	440b      	add	r3, r1
 80050ce:	335c      	adds	r3, #92	; 0x5c
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	440b      	add	r3, r1
 80050e2:	3350      	adds	r3, #80	; 0x50
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	f083 0301 	eor.w	r3, r3, #1
 80050ea:	b2d8      	uxtb	r0, r3
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	440b      	add	r3, r1
 80050fa:	3350      	adds	r3, #80	; 0x50
 80050fc:	4602      	mov	r2, r0
 80050fe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	b2d8      	uxtb	r0, r3
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	440b      	add	r3, r1
 8005112:	335c      	adds	r3, #92	; 0x5c
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	4601      	mov	r1, r0
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f006 fc6c 	bl	800b9f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	440b      	add	r3, r1
 800512e:	3350      	adds	r3, #80	; 0x50
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f083 0301 	eor.w	r3, r3, #1
 8005136:	b2d8      	uxtb	r0, r3
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	440b      	add	r3, r1
 8005146:	3350      	adds	r3, #80	; 0x50
 8005148:	4602      	mov	r2, r0
 800514a:	701a      	strb	r2, [r3, #0]
}
 800514c:	e1f7      	b.n	800553e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	f040 811a 	bne.w	800539a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	440a      	add	r2, r1
 800517c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005180:	f023 0302 	bic.w	r3, r3, #2
 8005184:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	440b      	add	r3, r1
 8005194:	335d      	adds	r3, #93	; 0x5d
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10a      	bne.n	80051b2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	440b      	add	r3, r1
 80051aa:	335c      	adds	r3, #92	; 0x5c
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e0d9      	b.n	8005366 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	440b      	add	r3, r1
 80051c0:	335d      	adds	r3, #93	; 0x5d
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b05      	cmp	r3, #5
 80051c6:	d10a      	bne.n	80051de <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	335c      	adds	r3, #92	; 0x5c
 80051d8:	2205      	movs	r2, #5
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e0c3      	b.n	8005366 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	335d      	adds	r3, #93	; 0x5d
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b06      	cmp	r3, #6
 80051f2:	d00a      	beq.n	800520a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	440b      	add	r3, r1
 8005202:	335d      	adds	r3, #93	; 0x5d
 8005204:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005206:	2b08      	cmp	r3, #8
 8005208:	d156      	bne.n	80052b8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	440b      	add	r3, r1
 8005218:	3358      	adds	r3, #88	; 0x58
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	1c59      	adds	r1, r3, #1
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4403      	add	r3, r0
 800522c:	3358      	adds	r3, #88	; 0x58
 800522e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	3358      	adds	r3, #88	; 0x58
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b03      	cmp	r3, #3
 8005244:	d914      	bls.n	8005270 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	440b      	add	r3, r1
 8005254:	3358      	adds	r3, #88	; 0x58
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	440b      	add	r3, r1
 8005268:	335c      	adds	r3, #92	; 0x5c
 800526a:	2204      	movs	r2, #4
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e009      	b.n	8005284 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	335c      	adds	r3, #92	; 0x5c
 8005280:	2202      	movs	r2, #2
 8005282:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800529a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e056      	b.n	8005366 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	335d      	adds	r3, #93	; 0x5d
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d123      	bne.n	8005316 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	440b      	add	r3, r1
 80052dc:	335c      	adds	r3, #92	; 0x5c
 80052de:	2202      	movs	r2, #2
 80052e0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052f8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005300:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	461a      	mov	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	e027      	b.n	8005366 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	440b      	add	r3, r1
 8005324:	335d      	adds	r3, #93	; 0x5d
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b07      	cmp	r3, #7
 800532a:	d11c      	bne.n	8005366 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	440b      	add	r3, r1
 800533a:	3358      	adds	r3, #88	; 0x58
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4403      	add	r3, r0
 800534e:	3358      	adds	r3, #88	; 0x58
 8005350:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	440b      	add	r3, r1
 8005360:	335c      	adds	r3, #92	; 0x5c
 8005362:	2204      	movs	r2, #4
 8005364:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005372:	461a      	mov	r2, r3
 8005374:	2302      	movs	r3, #2
 8005376:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	b2d8      	uxtb	r0, r3
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	440b      	add	r3, r1
 800538a:	335c      	adds	r3, #92	; 0x5c
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	4601      	mov	r1, r0
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f006 fb30 	bl	800b9f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005398:	e0d1      	b.n	800553e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d13e      	bne.n	800542e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	440b      	add	r3, r1
 80053de:	3358      	adds	r3, #88	; 0x58
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1c59      	adds	r1, r3, #1
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4613      	mov	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4403      	add	r3, r0
 80053f2:	3358      	adds	r3, #88	; 0x58
 80053f4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	440b      	add	r3, r1
 8005404:	335d      	adds	r3, #93	; 0x5d
 8005406:	2206      	movs	r2, #6
 8005408:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f005 f80e 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	461a      	mov	r2, r3
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	6093      	str	r3, [r2, #8]
}
 800542c:	e087      	b.n	800553e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b10      	cmp	r3, #16
 8005442:	d17c      	bne.n	800553e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	440b      	add	r3, r1
 8005452:	333f      	adds	r3, #63	; 0x3f
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b03      	cmp	r3, #3
 8005458:	d122      	bne.n	80054a0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	3358      	adds	r3, #88	; 0x58
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	440a      	add	r2, r1
 8005484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005488:	f043 0302 	orr.w	r3, r3, #2
 800548c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f004 ffcc 	bl	800a436 <USB_HC_Halt>
 800549e:	e045      	b.n	800552c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	440b      	add	r3, r1
 80054ae:	333f      	adds	r3, #63	; 0x3f
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	440b      	add	r3, r1
 80054c4:	333f      	adds	r3, #63	; 0x3f
 80054c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d12f      	bne.n	800552c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	440b      	add	r3, r1
 80054da:	3358      	adds	r3, #88	; 0x58
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d121      	bne.n	800552c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	440b      	add	r3, r1
 80054f6:	335d      	adds	r3, #93	; 0x5d
 80054f8:	2203      	movs	r2, #3
 80054fa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4413      	add	r3, r2
 8005504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	440a      	add	r2, r1
 8005512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005516:	f043 0302 	orr.w	r3, r3, #2
 800551a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f004 ff85 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005538:	461a      	mov	r2, r3
 800553a:	2310      	movs	r3, #16
 800553c:	6093      	str	r3, [r2, #8]
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b086      	sub	sp, #24
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4413      	add	r3, r2
 8005568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b04      	cmp	r3, #4
 8005574:	d119      	bne.n	80055aa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005582:	461a      	mov	r2, r3
 8005584:	2304      	movs	r3, #4
 8005586:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	440a      	add	r2, r1
 800559e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a2:	f043 0302 	orr.w	r3, r3, #2
 80055a6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80055a8:	e33e      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d141      	bne.n	8005644 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055cc:	461a      	mov	r2, r3
 80055ce:	2320      	movs	r3, #32
 80055d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	440b      	add	r3, r1
 80055e0:	333d      	adds	r3, #61	; 0x3d
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	f040 831f 	bne.w	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	440b      	add	r3, r1
 80055f8:	333d      	adds	r3, #61	; 0x3d
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	440b      	add	r3, r1
 800560c:	335c      	adds	r3, #92	; 0x5c
 800560e:	2202      	movs	r2, #2
 8005610:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	440a      	add	r2, r1
 8005628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562c:	f043 0302 	orr.w	r3, r3, #2
 8005630:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f004 fefa 	bl	800a436 <USB_HC_Halt>
}
 8005642:	e2f1      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d13f      	bne.n	80056da <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	440b      	add	r3, r1
 8005668:	335d      	adds	r3, #93	; 0x5d
 800566a:	2204      	movs	r2, #4
 800566c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	440b      	add	r3, r1
 800567c:	333d      	adds	r3, #61	; 0x3d
 800567e:	2201      	movs	r2, #1
 8005680:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	440b      	add	r3, r1
 8005690:	3358      	adds	r3, #88	; 0x58
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b0:	f043 0302 	orr.w	r3, r3, #2
 80056b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f004 feb8 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	461a      	mov	r2, r3
 80056d4:	2340      	movs	r3, #64	; 0x40
 80056d6:	6093      	str	r3, [r2, #8]
}
 80056d8:	e2a6      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f0:	d122      	bne.n	8005738 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	440a      	add	r2, r1
 8005708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800570c:	f043 0302 	orr.w	r3, r3, #2
 8005710:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f004 fe8a 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	461a      	mov	r2, r3
 8005730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005734:	6093      	str	r3, [r2, #8]
}
 8005736:	e277      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b01      	cmp	r3, #1
 800574c:	d135      	bne.n	80057ba <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	440b      	add	r3, r1
 800575c:	3358      	adds	r3, #88	; 0x58
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4413      	add	r3, r2
 800576a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	440a      	add	r2, r1
 8005778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800577c:	f043 0302 	orr.w	r3, r3, #2
 8005780:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	4611      	mov	r1, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f004 fe52 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579e:	461a      	mov	r2, r3
 80057a0:	2301      	movs	r3, #1
 80057a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	440b      	add	r3, r1
 80057b2:	335d      	adds	r3, #93	; 0x5d
 80057b4:	2201      	movs	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
}
 80057b8:	e236      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d12b      	bne.n	8005828 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	461a      	mov	r2, r3
 80057de:	2308      	movs	r3, #8
 80057e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fc:	f043 0302 	orr.w	r3, r3, #2
 8005800:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	4611      	mov	r1, r2
 800580c:	4618      	mov	r0, r3
 800580e:	f004 fe12 	bl	800a436 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	440b      	add	r3, r1
 8005820:	335d      	adds	r3, #93	; 0x5d
 8005822:	2205      	movs	r2, #5
 8005824:	701a      	strb	r2, [r3, #0]
}
 8005826:	e1ff      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b10      	cmp	r3, #16
 800583c:	d155      	bne.n	80058ea <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	440b      	add	r3, r1
 800584c:	3358      	adds	r3, #88	; 0x58
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	440b      	add	r3, r1
 8005860:	335d      	adds	r3, #93	; 0x5d
 8005862:	2203      	movs	r2, #3
 8005864:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	440b      	add	r3, r1
 8005874:	333d      	adds	r3, #61	; 0x3d
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d114      	bne.n	80058a6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	440b      	add	r3, r1
 800588a:	333c      	adds	r3, #60	; 0x3c
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	440b      	add	r3, r1
 80058a0:	333d      	adds	r3, #61	; 0x3d
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c0:	f043 0302 	orr.w	r3, r3, #2
 80058c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f004 fdb0 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e2:	461a      	mov	r2, r3
 80058e4:	2310      	movs	r3, #16
 80058e6:	6093      	str	r3, [r2, #8]
}
 80058e8:	e19e      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	2b80      	cmp	r3, #128	; 0x80
 80058fe:	d12b      	bne.n	8005958 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4413      	add	r3, r2
 8005908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	440a      	add	r2, r1
 8005916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800591a:	f043 0302 	orr.w	r3, r3, #2
 800591e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f004 fd83 	bl	800a436 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	440b      	add	r3, r1
 800593e:	335d      	adds	r3, #93	; 0x5d
 8005940:	2206      	movs	r2, #6
 8005942:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005950:	461a      	mov	r2, r3
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	6093      	str	r3, [r2, #8]
}
 8005956:	e167      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596e:	d135      	bne.n	80059dc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	440a      	add	r2, r1
 8005986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800598a:	f043 0302 	orr.w	r3, r3, #2
 800598e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	4611      	mov	r1, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f004 fd4b 	bl	800a436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	461a      	mov	r2, r3
 80059ae:	2310      	movs	r3, #16
 80059b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059be:	461a      	mov	r2, r3
 80059c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	440b      	add	r3, r1
 80059d4:	335d      	adds	r3, #93	; 0x5d
 80059d6:	2208      	movs	r2, #8
 80059d8:	701a      	strb	r2, [r3, #0]
}
 80059da:	e125      	b.n	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	f040 811a 	bne.w	8005c28 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a0e:	f023 0302 	bic.w	r3, r3, #2
 8005a12:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	335d      	adds	r3, #93	; 0x5d
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d137      	bne.n	8005a9a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	335c      	adds	r3, #92	; 0x5c
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	333f      	adds	r3, #63	; 0x3f
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d00b      	beq.n	8005a6c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	440b      	add	r3, r1
 8005a62:	333f      	adds	r3, #63	; 0x3f
 8005a64:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	f040 80c5 	bne.w	8005bf6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	440b      	add	r3, r1
 8005a7a:	3351      	adds	r3, #81	; 0x51
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f083 0301 	eor.w	r3, r3, #1
 8005a82:	b2d8      	uxtb	r0, r3
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	440b      	add	r3, r1
 8005a92:	3351      	adds	r3, #81	; 0x51
 8005a94:	4602      	mov	r2, r0
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e0ad      	b.n	8005bf6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	440b      	add	r3, r1
 8005aa8:	335d      	adds	r3, #93	; 0x5d
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d10a      	bne.n	8005ac6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	440b      	add	r3, r1
 8005abe:	335c      	adds	r3, #92	; 0x5c
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e097      	b.n	8005bf6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	440b      	add	r3, r1
 8005ad4:	335d      	adds	r3, #93	; 0x5d
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d10a      	bne.n	8005af2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	335c      	adds	r3, #92	; 0x5c
 8005aec:	2202      	movs	r2, #2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e081      	b.n	8005bf6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	440b      	add	r3, r1
 8005b00:	335d      	adds	r3, #93	; 0x5d
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b05      	cmp	r3, #5
 8005b06:	d10a      	bne.n	8005b1e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	440b      	add	r3, r1
 8005b16:	335c      	adds	r3, #92	; 0x5c
 8005b18:	2205      	movs	r2, #5
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e06b      	b.n	8005bf6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	335d      	adds	r3, #93	; 0x5d
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b06      	cmp	r3, #6
 8005b32:	d00a      	beq.n	8005b4a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	440b      	add	r3, r1
 8005b42:	335d      	adds	r3, #93	; 0x5d
 8005b44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d155      	bne.n	8005bf6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	440b      	add	r3, r1
 8005b58:	3358      	adds	r3, #88	; 0x58
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4403      	add	r3, r0
 8005b6c:	3358      	adds	r3, #88	; 0x58
 8005b6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3358      	adds	r3, #88	; 0x58
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d914      	bls.n	8005bb0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	440b      	add	r3, r1
 8005b94:	3358      	adds	r3, #88	; 0x58
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	440b      	add	r3, r1
 8005ba8:	335c      	adds	r3, #92	; 0x5c
 8005baa:	2204      	movs	r2, #4
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	e009      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	440b      	add	r3, r1
 8005bbe:	335c      	adds	r3, #92	; 0x5c
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bda:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005be2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c02:	461a      	mov	r2, r3
 8005c04:	2302      	movs	r3, #2
 8005c06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	b2d8      	uxtb	r0, r3
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	440b      	add	r3, r1
 8005c1a:	335c      	adds	r3, #92	; 0x5c
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4601      	mov	r1, r0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f005 fee8 	bl	800b9f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c28:	bf00      	nop
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	0c5b      	lsrs	r3, r3, #17
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c64:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d003      	beq.n	8005c74 <HCD_RXQLVL_IRQHandler+0x44>
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	f000 8082 	beq.w	8005d76 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c72:	e083      	b.n	8005d7c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d07f      	beq.n	8005d7a <HCD_RXQLVL_IRQHandler+0x14a>
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	440b      	add	r3, r1
 8005c88:	3344      	adds	r3, #68	; 0x44
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d074      	beq.n	8005d7a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	440b      	add	r3, r1
 8005ca2:	3344      	adds	r3, #68	; 0x44
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	b292      	uxth	r2, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	f004 fb2e 	bl	800a30c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3344      	adds	r3, #68	; 0x44
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	18d1      	adds	r1, r2, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4403      	add	r3, r0
 8005cd4:	3344      	adds	r3, #68	; 0x44
 8005cd6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	334c      	adds	r3, #76	; 0x4c
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	18d1      	adds	r1, r2, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4403      	add	r3, r0
 8005cfc:	334c      	adds	r3, #76	; 0x4c
 8005cfe:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <HCD_RXQLVL_IRQHandler+0x154>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d031      	beq.n	8005d7a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d2c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d34:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d42:	461a      	mov	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	440b      	add	r3, r1
 8005d56:	3350      	adds	r3, #80	; 0x50
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f083 0301 	eor.w	r3, r3, #1
 8005d5e:	b2d8      	uxtb	r0, r3
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	440b      	add	r3, r1
 8005d6e:	3350      	adds	r3, #80	; 0x50
 8005d70:	4602      	mov	r2, r0
 8005d72:	701a      	strb	r2, [r3, #0]
      break;
 8005d74:	e001      	b.n	8005d7a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005d7a:	bf00      	nop
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3728      	adds	r7, #40	; 0x28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	1ff80000 	.word	0x1ff80000

08005d88 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005db4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d10b      	bne.n	8005dd8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d102      	bne.n	8005dd0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f005 fdf8 	bl	800b9c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f043 0302 	orr.w	r3, r3, #2
 8005dd6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d132      	bne.n	8005e48 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f043 0308 	orr.w	r3, r3, #8
 8005de8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d126      	bne.n	8005e42 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d113      	bne.n	8005e24 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e06:	d106      	bne.n	8005e16 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2102      	movs	r1, #2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f004 fac6 	bl	800a3a0 <USB_InitFSLSPClkSel>
 8005e14:	e011      	b.n	8005e3a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f004 fabf 	bl	800a3a0 <USB_InitFSLSPClkSel>
 8005e22:	e00a      	b.n	8005e3a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d106      	bne.n	8005e3a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e32:	461a      	mov	r2, r3
 8005e34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005e38:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f005 fdee 	bl	800ba1c <HAL_HCD_PortEnabled_Callback>
 8005e40:	e002      	b.n	8005e48 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f005 fdf8 	bl	800ba38 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d103      	bne.n	8005e5a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f043 0320 	orr.w	r3, r3, #32
 8005e58:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e60:	461a      	mov	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6013      	str	r3, [r2, #0]
}
 8005e66:	bf00      	nop
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e11f      	b.n	80060c2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fa fe68 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2224      	movs	r2, #36	; 0x24
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0201 	bic.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ed4:	f002 f882 	bl	8007fdc <HAL_RCC_GetPCLK1Freq>
 8005ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4a7b      	ldr	r2, [pc, #492]	; (80060cc <HAL_I2C_Init+0x25c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d807      	bhi.n	8005ef4 <HAL_I2C_Init+0x84>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a7a      	ldr	r2, [pc, #488]	; (80060d0 <HAL_I2C_Init+0x260>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	bf94      	ite	ls
 8005eec:	2301      	movls	r3, #1
 8005eee:	2300      	movhi	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	e006      	b.n	8005f02 <HAL_I2C_Init+0x92>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a77      	ldr	r2, [pc, #476]	; (80060d4 <HAL_I2C_Init+0x264>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	bf94      	ite	ls
 8005efc:	2301      	movls	r3, #1
 8005efe:	2300      	movhi	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e0db      	b.n	80060c2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a72      	ldr	r2, [pc, #456]	; (80060d8 <HAL_I2C_Init+0x268>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	0c9b      	lsrs	r3, r3, #18
 8005f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a64      	ldr	r2, [pc, #400]	; (80060cc <HAL_I2C_Init+0x25c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d802      	bhi.n	8005f44 <HAL_I2C_Init+0xd4>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	3301      	adds	r3, #1
 8005f42:	e009      	b.n	8005f58 <HAL_I2C_Init+0xe8>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f4a:	fb02 f303 	mul.w	r3, r2, r3
 8005f4e:	4a63      	ldr	r2, [pc, #396]	; (80060dc <HAL_I2C_Init+0x26c>)
 8005f50:	fba2 2303 	umull	r2, r3, r2, r3
 8005f54:	099b      	lsrs	r3, r3, #6
 8005f56:	3301      	adds	r3, #1
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4956      	ldr	r1, [pc, #344]	; (80060cc <HAL_I2C_Init+0x25c>)
 8005f74:	428b      	cmp	r3, r1
 8005f76:	d80d      	bhi.n	8005f94 <HAL_I2C_Init+0x124>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	1e59      	subs	r1, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f86:	3301      	adds	r3, #1
 8005f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	bf38      	it	cc
 8005f90:	2304      	movcc	r3, #4
 8005f92:	e04f      	b.n	8006034 <HAL_I2C_Init+0x1c4>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d111      	bne.n	8005fc0 <HAL_I2C_Init+0x150>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	1e58      	subs	r0, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	440b      	add	r3, r1
 8005faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fae:	3301      	adds	r3, #1
 8005fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	e012      	b.n	8005fe6 <HAL_I2C_Init+0x176>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1e58      	subs	r0, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	0099      	lsls	r1, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bf0c      	ite	eq
 8005fe0:	2301      	moveq	r3, #1
 8005fe2:	2300      	movne	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_I2C_Init+0x17e>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e022      	b.n	8006034 <HAL_I2C_Init+0x1c4>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10e      	bne.n	8006014 <HAL_I2C_Init+0x1a4>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1e58      	subs	r0, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6859      	ldr	r1, [r3, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	440b      	add	r3, r1
 8006004:	fbb0 f3f3 	udiv	r3, r0, r3
 8006008:	3301      	adds	r3, #1
 800600a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	e00f      	b.n	8006034 <HAL_I2C_Init+0x1c4>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	1e58      	subs	r0, r3, #1
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6859      	ldr	r1, [r3, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	0099      	lsls	r1, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	fbb0 f3f3 	udiv	r3, r0, r3
 800602a:	3301      	adds	r3, #1
 800602c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	6809      	ldr	r1, [r1, #0]
 8006038:	4313      	orrs	r3, r2
 800603a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6911      	ldr	r1, [r2, #16]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	68d2      	ldr	r2, [r2, #12]
 800606e:	4311      	orrs	r1, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	430b      	orrs	r3, r1
 8006076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	000186a0 	.word	0x000186a0
 80060d0:	001e847f 	.word	0x001e847f
 80060d4:	003d08ff 	.word	0x003d08ff
 80060d8:	431bde83 	.word	0x431bde83
 80060dc:	10624dd3 	.word	0x10624dd3

080060e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e021      	b.n	8006136 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2224      	movs	r2, #36	; 0x24
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fa fd98 	bl	8000c40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4603      	mov	r3, r0
 8006150:	817b      	strh	r3, [r7, #10]
 8006152:	460b      	mov	r3, r1
 8006154:	813b      	strh	r3, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800615a:	f7fd fb4d 	bl	80037f8 <HAL_GetTick>
 800615e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b20      	cmp	r3, #32
 800616a:	f040 80d9 	bne.w	8006320 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	2319      	movs	r3, #25
 8006174:	2201      	movs	r2, #1
 8006176:	496d      	ldr	r1, [pc, #436]	; (800632c <HAL_I2C_Mem_Write+0x1ec>)
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fc8d 	bl	8006a98 <I2C_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
 8006186:	e0cc      	b.n	8006322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_I2C_Mem_Write+0x56>
 8006192:	2302      	movs	r3, #2
 8006194:	e0c5      	b.n	8006322 <HAL_I2C_Mem_Write+0x1e2>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d007      	beq.n	80061bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2221      	movs	r2, #33	; 0x21
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2240      	movs	r2, #64	; 0x40
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a3a      	ldr	r2, [r7, #32]
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4a4d      	ldr	r2, [pc, #308]	; (8006330 <HAL_I2C_Mem_Write+0x1f0>)
 80061fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061fe:	88f8      	ldrh	r0, [r7, #6]
 8006200:	893a      	ldrh	r2, [r7, #8]
 8006202:	8979      	ldrh	r1, [r7, #10]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	4603      	mov	r3, r0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 fac4 	bl	800679c <I2C_RequestMemoryWrite>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d052      	beq.n	80062c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e081      	b.n	8006322 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fd0e 	bl	8006c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00d      	beq.n	800624a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	2b04      	cmp	r3, #4
 8006234:	d107      	bne.n	8006246 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e06b      	b.n	8006322 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	781a      	ldrb	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b04      	cmp	r3, #4
 8006286:	d11b      	bne.n	80062c0 <HAL_I2C_Mem_Write+0x180>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628c:	2b00      	cmp	r3, #0
 800628e:	d017      	beq.n	80062c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1aa      	bne.n	800621e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fcfa 	bl	8006cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00d      	beq.n	80062f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d107      	bne.n	80062f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e016      	b.n	8006322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e000      	b.n	8006322 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	00100002 	.word	0x00100002
 8006330:	ffff0000 	.word	0xffff0000

08006334 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08c      	sub	sp, #48	; 0x30
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	461a      	mov	r2, r3
 8006342:	4603      	mov	r3, r0
 8006344:	817b      	strh	r3, [r7, #10]
 8006346:	460b      	mov	r3, r1
 8006348:	813b      	strh	r3, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800634e:	f7fd fa53 	bl	80037f8 <HAL_GetTick>
 8006352:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b20      	cmp	r3, #32
 800635e:	f040 8208 	bne.w	8006772 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	2319      	movs	r3, #25
 8006368:	2201      	movs	r2, #1
 800636a:	497b      	ldr	r1, [pc, #492]	; (8006558 <HAL_I2C_Mem_Read+0x224>)
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fb93 	bl	8006a98 <I2C_WaitOnFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006378:	2302      	movs	r3, #2
 800637a:	e1fb      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <HAL_I2C_Mem_Read+0x56>
 8006386:	2302      	movs	r3, #2
 8006388:	e1f4      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b01      	cmp	r3, #1
 800639e:	d007      	beq.n	80063b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2222      	movs	r2, #34	; 0x22
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2240      	movs	r2, #64	; 0x40
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80063e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a5b      	ldr	r2, [pc, #364]	; (800655c <HAL_I2C_Mem_Read+0x228>)
 80063f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063f2:	88f8      	ldrh	r0, [r7, #6]
 80063f4:	893a      	ldrh	r2, [r7, #8]
 80063f6:	8979      	ldrh	r1, [r7, #10]
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	4603      	mov	r3, r0
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fa60 	bl	80068c8 <I2C_RequestMemoryRead>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e1b0      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d113      	bne.n	8006442 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641a:	2300      	movs	r3, #0
 800641c:	623b      	str	r3, [r7, #32]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	623b      	str	r3, [r7, #32]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	623b      	str	r3, [r7, #32]
 800642e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e184      	b.n	800674c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006446:	2b01      	cmp	r3, #1
 8006448:	d11b      	bne.n	8006482 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	61fb      	str	r3, [r7, #28]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e164      	b.n	800674c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006486:	2b02      	cmp	r3, #2
 8006488:	d11b      	bne.n	80064c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006498:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	e144      	b.n	800674c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80064d8:	e138      	b.n	800674c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064de:	2b03      	cmp	r3, #3
 80064e0:	f200 80f1 	bhi.w	80066c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d123      	bne.n	8006534 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fc29 	bl	8006d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e139      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006532:	e10b      	b.n	800674c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006538:	2b02      	cmp	r3, #2
 800653a:	d14e      	bne.n	80065da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	2200      	movs	r2, #0
 8006544:	4906      	ldr	r1, [pc, #24]	; (8006560 <HAL_I2C_Mem_Read+0x22c>)
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 faa6 	bl	8006a98 <I2C_WaitOnFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e10e      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
 8006556:	bf00      	nop
 8006558:	00100002 	.word	0x00100002
 800655c:	ffff0000 	.word	0xffff0000
 8006560:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065d8:	e0b8      	b.n	800674c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	2200      	movs	r2, #0
 80065e2:	4966      	ldr	r1, [pc, #408]	; (800677c <HAL_I2C_Mem_Read+0x448>)
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 fa57 	bl	8006a98 <I2C_WaitOnFlagUntilTimeout>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e0bf      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	2200      	movs	r2, #0
 800663e:	494f      	ldr	r1, [pc, #316]	; (800677c <HAL_I2C_Mem_Read+0x448>)
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fa29 	bl	8006a98 <I2C_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e091      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066c4:	e042      	b.n	800674c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fb3c 	bl	8006d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e04c      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b04      	cmp	r3, #4
 8006718:	d118      	bne.n	800674c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006750:	2b00      	cmp	r3, #0
 8006752:	f47f aec2 	bne.w	80064da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e000      	b.n	8006774 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
  }
}
 8006774:	4618      	mov	r0, r3
 8006776:	3728      	adds	r7, #40	; 0x28
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	00010004 	.word	0x00010004

08006780 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678e:	b2db      	uxtb	r3, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	4608      	mov	r0, r1
 80067a6:	4611      	mov	r1, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	817b      	strh	r3, [r7, #10]
 80067ae:	460b      	mov	r3, r1
 80067b0:	813b      	strh	r3, [r7, #8]
 80067b2:	4613      	mov	r3, r2
 80067b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f960 	bl	8006a98 <I2C_WaitOnFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ec:	d103      	bne.n	80067f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e05f      	b.n	80068ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067fa:	897b      	ldrh	r3, [r7, #10]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006808:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	6a3a      	ldr	r2, [r7, #32]
 800680e:	492d      	ldr	r1, [pc, #180]	; (80068c4 <I2C_RequestMemoryWrite+0x128>)
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f998 	bl	8006b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e04c      	b.n	80068ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006838:	6a39      	ldr	r1, [r7, #32]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fa02 	bl	8006c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00d      	beq.n	8006862 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	2b04      	cmp	r3, #4
 800684c:	d107      	bne.n	800685e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800685c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e02b      	b.n	80068ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d105      	bne.n	8006874 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006868:	893b      	ldrh	r3, [r7, #8]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	611a      	str	r2, [r3, #16]
 8006872:	e021      	b.n	80068b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006874:	893b      	ldrh	r3, [r7, #8]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	b29b      	uxth	r3, r3
 800687a:	b2da      	uxtb	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006884:	6a39      	ldr	r1, [r7, #32]
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f9dc 	bl	8006c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00d      	beq.n	80068ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	2b04      	cmp	r3, #4
 8006898:	d107      	bne.n	80068aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e005      	b.n	80068ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068ae:	893b      	ldrh	r3, [r7, #8]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	00010002 	.word	0x00010002

080068c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	4608      	mov	r0, r1
 80068d2:	4611      	mov	r1, r2
 80068d4:	461a      	mov	r2, r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	817b      	strh	r3, [r7, #10]
 80068da:	460b      	mov	r3, r1
 80068dc:	813b      	strh	r3, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	2200      	movs	r2, #0
 800690a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f8c2 	bl	8006a98 <I2C_WaitOnFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00d      	beq.n	8006936 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006928:	d103      	bne.n	8006932 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e0aa      	b.n	8006a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006936:	897b      	ldrh	r3, [r7, #10]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	6a3a      	ldr	r2, [r7, #32]
 800694a:	4952      	ldr	r1, [pc, #328]	; (8006a94 <I2C_RequestMemoryRead+0x1cc>)
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f8fa 	bl	8006b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e097      	b.n	8006a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006974:	6a39      	ldr	r1, [r7, #32]
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f964 	bl	8006c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	2b04      	cmp	r3, #4
 8006988:	d107      	bne.n	800699a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e076      	b.n	8006a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d105      	bne.n	80069b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069a4:	893b      	ldrh	r3, [r7, #8]
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	611a      	str	r2, [r3, #16]
 80069ae:	e021      	b.n	80069f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069b0:	893b      	ldrh	r3, [r7, #8]
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c0:	6a39      	ldr	r1, [r7, #32]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f93e 	bl	8006c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00d      	beq.n	80069ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d107      	bne.n	80069e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e050      	b.n	8006a8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069ea:	893b      	ldrh	r3, [r7, #8]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f6:	6a39      	ldr	r1, [r7, #32]
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f923 	bl	8006c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00d      	beq.n	8006a20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d107      	bne.n	8006a1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e035      	b.n	8006a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f82b 	bl	8006a98 <I2C_WaitOnFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00d      	beq.n	8006a64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a56:	d103      	bne.n	8006a60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e013      	b.n	8006a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a64:	897b      	ldrh	r3, [r7, #10]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	6a3a      	ldr	r2, [r7, #32]
 8006a78:	4906      	ldr	r1, [pc, #24]	; (8006a94 <I2C_RequestMemoryRead+0x1cc>)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f863 	bl	8006b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	00010002 	.word	0x00010002

08006a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006aa8:	e025      	b.n	8006af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab0:	d021      	beq.n	8006af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab2:	f7fc fea1 	bl	80037f8 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d302      	bcc.n	8006ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d116      	bne.n	8006af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f043 0220 	orr.w	r2, r3, #32
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e023      	b.n	8006b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10d      	bne.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	43da      	mvns	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf0c      	ite	eq
 8006b12:	2301      	moveq	r3, #1
 8006b14:	2300      	movne	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	e00c      	b.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	43da      	mvns	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf0c      	ite	eq
 8006b2e:	2301      	moveq	r3, #1
 8006b30:	2300      	movne	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d0b6      	beq.n	8006aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b54:	e051      	b.n	8006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b64:	d123      	bne.n	8006bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f043 0204 	orr.w	r2, r3, #4
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e046      	b.n	8006c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d021      	beq.n	8006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb6:	f7fc fe1f 	bl	80037f8 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d302      	bcc.n	8006bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d116      	bne.n	8006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	f043 0220 	orr.w	r2, r3, #32
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e020      	b.n	8006c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	0c1b      	lsrs	r3, r3, #16
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d10c      	bne.n	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	43da      	mvns	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bf14      	ite	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	2300      	moveq	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	e00b      	b.n	8006c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	43da      	mvns	r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d18d      	bne.n	8006b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c50:	e02d      	b.n	8006cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f8ce 	bl	8006df4 <I2C_IsAcknowledgeFailed>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e02d      	b.n	8006cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d021      	beq.n	8006cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6a:	f7fc fdc5 	bl	80037f8 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d116      	bne.n	8006cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f043 0220 	orr.w	r2, r3, #32
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e007      	b.n	8006cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb8:	2b80      	cmp	r3, #128	; 0x80
 8006cba:	d1ca      	bne.n	8006c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cd2:	e02d      	b.n	8006d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f88d 	bl	8006df4 <I2C_IsAcknowledgeFailed>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e02d      	b.n	8006d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d021      	beq.n	8006d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cec:	f7fc fd84 	bl	80037f8 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d116      	bne.n	8006d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	f043 0220 	orr.w	r2, r3, #32
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e007      	b.n	8006d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d1ca      	bne.n	8006cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d54:	e042      	b.n	8006ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d119      	bne.n	8006d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0210 	mvn.w	r2, #16
 8006d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e029      	b.n	8006dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d98:	f7fc fd2e 	bl	80037f8 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d116      	bne.n	8006ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e007      	b.n	8006dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d1b5      	bne.n	8006d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0a:	d11b      	bne.n	8006e44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	f043 0204 	orr.w	r2, r3, #4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d129      	bne.n	8006ebc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2224      	movs	r2, #36	; 0x24
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0210 	bic.w	r2, r2, #16
 8006e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	e000      	b.n	8006ebe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006ebc:	2302      	movs	r3, #2
  }
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d12a      	bne.n	8006f3a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2224      	movs	r2, #36	; 0x24
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006f04:	89fb      	ldrh	r3, [r7, #14]
 8006f06:	f023 030f 	bic.w	r3, r3, #15
 8006f0a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	89fb      	ldrh	r3, [r7, #14]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	89fa      	ldrh	r2, [r7, #14]
 8006f1c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0201 	orr.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	e000      	b.n	8006f3c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006f3a:	2302      	movs	r3, #2
  }
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e0bf      	b.n	80070da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7f9 ffb0 	bl	8000ed4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006f8a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6999      	ldr	r1, [r3, #24]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fa0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6899      	ldr	r1, [r3, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4b4a      	ldr	r3, [pc, #296]	; (80070e4 <HAL_LTDC_Init+0x19c>)
 8006fbc:	400b      	ands	r3, r1
 8006fbe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6899      	ldr	r1, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68d9      	ldr	r1, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	; (80070e4 <HAL_LTDC_Init+0x19c>)
 8006fea:	400b      	ands	r3, r1
 8006fec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	041b      	lsls	r3, r3, #16
 8006ff4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68d9      	ldr	r1, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1a      	ldr	r2, [r3, #32]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6919      	ldr	r1, [r3, #16]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b33      	ldr	r3, [pc, #204]	; (80070e4 <HAL_LTDC_Init+0x19c>)
 8007018:	400b      	ands	r3, r1
 800701a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	041b      	lsls	r3, r3, #16
 8007022:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6919      	ldr	r1, [r3, #16]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6959      	ldr	r1, [r3, #20]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b27      	ldr	r3, [pc, #156]	; (80070e4 <HAL_LTDC_Init+0x19c>)
 8007046:	400b      	ands	r3, r1
 8007048:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6959      	ldr	r1, [r3, #20]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800708a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0206 	orr.w	r2, r2, #6
 80070b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	f000f800 	.word	0xf000f800

080070e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f003 0304 	and.w	r3, r3, #4
 8007106:	2b00      	cmp	r3, #0
 8007108:	d023      	beq.n	8007152 <HAL_LTDC_IRQHandler+0x6a>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01e      	beq.n	8007152 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0204 	bic.w	r2, r2, #4
 8007122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2204      	movs	r2, #4
 800712a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007132:	f043 0201 	orr.w	r2, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2204      	movs	r2, #4
 8007140:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f86f 	bl	8007230 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d023      	beq.n	80071a4 <HAL_LTDC_IRQHandler+0xbc>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01e      	beq.n	80071a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0202 	bic.w	r2, r2, #2
 8007174:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2202      	movs	r2, #2
 800717c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007184:	f043 0202 	orr.w	r2, r3, #2
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2204      	movs	r2, #4
 8007192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f846 	bl	8007230 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01b      	beq.n	80071e6 <HAL_LTDC_IRQHandler+0xfe>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d016      	beq.n	80071e6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2201      	movs	r2, #1
 80071ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f82f 	bl	8007244 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <HAL_LTDC_IRQHandler+0x140>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d016      	beq.n	8007228 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0208 	bic.w	r2, r2, #8
 8007208:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2208      	movs	r2, #8
 8007210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f818 	bl	8007258 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800726c:	b5b0      	push	{r4, r5, r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_LTDC_ConfigLayer+0x1a>
 8007282:	2302      	movs	r3, #2
 8007284:	e02c      	b.n	80072e0 <HAL_LTDC_ConfigLayer+0x74>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2202      	movs	r2, #2
 8007292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2134      	movs	r1, #52	; 0x34
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	4413      	add	r3, r2
 80072a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4614      	mov	r4, r2
 80072aa:	461d      	mov	r5, r3
 80072ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 f8b9 	bl	8007438 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2201      	movs	r2, #1
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bdb0      	pop	{r4, r5, r7, pc}

080072e8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d101      	bne.n	8007302 <HAL_LTDC_ConfigColorKeying+0x1a>
 80072fe:	2302      	movs	r3, #2
 8007300:	e030      	b.n	8007364 <HAL_LTDC_ConfigColorKeying+0x7c>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	01db      	lsls	r3, r3, #7
 800731c:	4413      	add	r3, r2
 800731e:	3384      	adds	r3, #132	; 0x84
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	6812      	ldr	r2, [r2, #0]
 8007326:	4611      	mov	r1, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	01d2      	lsls	r2, r2, #7
 800732c:	440a      	add	r2, r1
 800732e:	3284      	adds	r2, #132	; 0x84
 8007330:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007334:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	01db      	lsls	r3, r3, #7
 8007340:	4413      	add	r3, r2
 8007342:	3384      	adds	r3, #132	; 0x84
 8007344:	461a      	mov	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2201      	movs	r2, #1
 8007350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_LTDC_EnableColorKeying+0x18>
 8007384:	2302      	movs	r3, #2
 8007386:	e026      	b.n	80073d6 <HAL_LTDC_EnableColorKeying+0x66>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	01db      	lsls	r3, r3, #7
 80073a2:	4413      	add	r3, r2
 80073a4:	3384      	adds	r3, #132	; 0x84
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	4611      	mov	r1, r2
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	01d2      	lsls	r2, r2, #7
 80073b2:	440a      	add	r2, r1
 80073b4:	3284      	adds	r2, #132	; 0x84
 80073b6:	f043 0302 	orr.w	r3, r3, #2
 80073ba:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2201      	movs	r2, #1
 80073c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_LTDC_EnableDither+0x16>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e016      	b.n	8007428 <HAL_LTDC_EnableDither+0x44>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <HAL_LTDC_EnableDither+0x50>)
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	4a09      	ldr	r2, [pc, #36]	; (8007434 <HAL_LTDC_EnableDither+0x50>)
 8007410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007414:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	40016800 	.word	0x40016800

08007438 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007438:	b480      	push	{r7}
 800743a:	b089      	sub	sp, #36	; 0x24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	0c1b      	lsrs	r3, r3, #16
 8007450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007454:	4413      	add	r3, r2
 8007456:	041b      	lsls	r3, r3, #16
 8007458:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	01db      	lsls	r3, r3, #7
 8007464:	4413      	add	r3, r2
 8007466:	3384      	adds	r3, #132	; 0x84
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	4611      	mov	r1, r2
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	01d2      	lsls	r2, r2, #7
 8007474:	440a      	add	r2, r1
 8007476:	3284      	adds	r2, #132	; 0x84
 8007478:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800747c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800748e:	4413      	add	r3, r2
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	01db      	lsls	r3, r3, #7
 800749c:	440b      	add	r3, r1
 800749e:	3384      	adds	r3, #132	; 0x84
 80074a0:	4619      	mov	r1, r3
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074b6:	4413      	add	r3, r2
 80074b8:	041b      	lsls	r3, r3, #16
 80074ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	01db      	lsls	r3, r3, #7
 80074c6:	4413      	add	r3, r2
 80074c8:	3384      	adds	r3, #132	; 0x84
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	4611      	mov	r1, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	01d2      	lsls	r2, r2, #7
 80074d6:	440a      	add	r2, r1
 80074d8:	3284      	adds	r2, #132	; 0x84
 80074da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ee:	4413      	add	r3, r2
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4619      	mov	r1, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	01db      	lsls	r3, r3, #7
 80074fc:	440b      	add	r3, r1
 80074fe:	3384      	adds	r3, #132	; 0x84
 8007500:	4619      	mov	r1, r3
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4313      	orrs	r3, r2
 8007506:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	01db      	lsls	r3, r3, #7
 8007512:	4413      	add	r3, r2
 8007514:	3384      	adds	r3, #132	; 0x84
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	4611      	mov	r1, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	01d2      	lsls	r2, r2, #7
 8007522:	440a      	add	r2, r1
 8007524:	3284      	adds	r2, #132	; 0x84
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	01db      	lsls	r3, r3, #7
 8007536:	4413      	add	r3, r2
 8007538:	3384      	adds	r3, #132	; 0x84
 800753a:	461a      	mov	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007552:	041b      	lsls	r3, r3, #16
 8007554:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	061b      	lsls	r3, r3, #24
 800755c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	01db      	lsls	r3, r3, #7
 8007568:	4413      	add	r3, r2
 800756a:	3384      	adds	r3, #132	; 0x84
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	01db      	lsls	r3, r3, #7
 8007578:	4413      	add	r3, r2
 800757a:	3384      	adds	r3, #132	; 0x84
 800757c:	461a      	mov	r2, r3
 800757e:	2300      	movs	r3, #0
 8007580:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007588:	461a      	mov	r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	431a      	orrs	r2, r3
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	431a      	orrs	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4619      	mov	r1, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	01db      	lsls	r3, r3, #7
 800759c:	440b      	add	r3, r1
 800759e:	3384      	adds	r3, #132	; 0x84
 80075a0:	4619      	mov	r1, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	01db      	lsls	r3, r3, #7
 80075b2:	4413      	add	r3, r2
 80075b4:	3384      	adds	r3, #132	; 0x84
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	6812      	ldr	r2, [r2, #0]
 80075bc:	4611      	mov	r1, r2
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	01d2      	lsls	r2, r2, #7
 80075c2:	440a      	add	r2, r1
 80075c4:	3284      	adds	r2, #132	; 0x84
 80075c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	01db      	lsls	r3, r3, #7
 80075d6:	4413      	add	r3, r2
 80075d8:	3384      	adds	r3, #132	; 0x84
 80075da:	461a      	mov	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	4413      	add	r3, r2
 80075ee:	3384      	adds	r3, #132	; 0x84
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	4611      	mov	r1, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	01d2      	lsls	r2, r2, #7
 80075fc:	440a      	add	r2, r1
 80075fe:	3284      	adds	r2, #132	; 0x84
 8007600:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007604:	f023 0307 	bic.w	r3, r3, #7
 8007608:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	69da      	ldr	r2, [r3, #28]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	6809      	ldr	r1, [r1, #0]
 8007616:	4608      	mov	r0, r1
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	01c9      	lsls	r1, r1, #7
 800761c:	4401      	add	r1, r0
 800761e:	3184      	adds	r1, #132	; 0x84
 8007620:	4313      	orrs	r3, r2
 8007622:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	01db      	lsls	r3, r3, #7
 800762e:	4413      	add	r3, r2
 8007630:	3384      	adds	r3, #132	; 0x84
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	01db      	lsls	r3, r3, #7
 800763e:	4413      	add	r3, r2
 8007640:	3384      	adds	r3, #132	; 0x84
 8007642:	461a      	mov	r2, r3
 8007644:	2300      	movs	r3, #0
 8007646:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	01db      	lsls	r3, r3, #7
 8007652:	4413      	add	r3, r2
 8007654:	3384      	adds	r3, #132	; 0x84
 8007656:	461a      	mov	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007666:	2304      	movs	r3, #4
 8007668:	61fb      	str	r3, [r7, #28]
 800766a:	e01b      	b.n	80076a4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d102      	bne.n	800767a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007674:	2303      	movs	r3, #3
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	e014      	b.n	80076a4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b04      	cmp	r3, #4
 8007680:	d00b      	beq.n	800769a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007686:	2b02      	cmp	r3, #2
 8007688:	d007      	beq.n	800769a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800768e:	2b03      	cmp	r3, #3
 8007690:	d003      	beq.n	800769a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007696:	2b07      	cmp	r3, #7
 8007698:	d102      	bne.n	80076a0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800769a:	2302      	movs	r3, #2
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	e001      	b.n	80076a4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80076a0:	2301      	movs	r3, #1
 80076a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	01db      	lsls	r3, r3, #7
 80076ae:	4413      	add	r3, r2
 80076b0:	3384      	adds	r3, #132	; 0x84
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	4611      	mov	r1, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	01d2      	lsls	r2, r2, #7
 80076be:	440a      	add	r2, r1
 80076c0:	3284      	adds	r2, #132	; 0x84
 80076c2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80076c6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	69fa      	ldr	r2, [r7, #28]
 80076ce:	fb02 f303 	mul.w	r3, r2, r3
 80076d2:	041a      	lsls	r2, r3, #16
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6859      	ldr	r1, [r3, #4]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	1acb      	subs	r3, r1, r3
 80076de:	69f9      	ldr	r1, [r7, #28]
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	3303      	adds	r3, #3
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	6809      	ldr	r1, [r1, #0]
 80076ea:	4608      	mov	r0, r1
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	01c9      	lsls	r1, r1, #7
 80076f0:	4401      	add	r1, r0
 80076f2:	3184      	adds	r1, #132	; 0x84
 80076f4:	4313      	orrs	r3, r2
 80076f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	01db      	lsls	r3, r3, #7
 8007702:	4413      	add	r3, r2
 8007704:	3384      	adds	r3, #132	; 0x84
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	6812      	ldr	r2, [r2, #0]
 800770c:	4611      	mov	r1, r2
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	01d2      	lsls	r2, r2, #7
 8007712:	440a      	add	r2, r1
 8007714:	3284      	adds	r2, #132	; 0x84
 8007716:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800771a:	f023 0307 	bic.w	r3, r3, #7
 800771e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	01db      	lsls	r3, r3, #7
 800772a:	4413      	add	r3, r2
 800772c:	3384      	adds	r3, #132	; 0x84
 800772e:	461a      	mov	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	01db      	lsls	r3, r3, #7
 8007740:	4413      	add	r3, r2
 8007742:	3384      	adds	r3, #132	; 0x84
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	4611      	mov	r1, r2
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	01d2      	lsls	r2, r2, #7
 8007750:	440a      	add	r2, r1
 8007752:	3284      	adds	r2, #132	; 0x84
 8007754:	f043 0301 	orr.w	r3, r3, #1
 8007758:	6013      	str	r3, [r2, #0]
}
 800775a:	bf00      	nop
 800775c:	3724      	adds	r7, #36	; 0x24
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e25b      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d075      	beq.n	8007872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007786:	4ba3      	ldr	r3, [pc, #652]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 030c 	and.w	r3, r3, #12
 800778e:	2b04      	cmp	r3, #4
 8007790:	d00c      	beq.n	80077ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007792:	4ba0      	ldr	r3, [pc, #640]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800779a:	2b08      	cmp	r3, #8
 800779c:	d112      	bne.n	80077c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800779e:	4b9d      	ldr	r3, [pc, #628]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077aa:	d10b      	bne.n	80077c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ac:	4b99      	ldr	r3, [pc, #612]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d05b      	beq.n	8007870 <HAL_RCC_OscConfig+0x108>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d157      	bne.n	8007870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e236      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077cc:	d106      	bne.n	80077dc <HAL_RCC_OscConfig+0x74>
 80077ce:	4b91      	ldr	r3, [pc, #580]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a90      	ldr	r2, [pc, #576]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e01d      	b.n	8007818 <HAL_RCC_OscConfig+0xb0>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e4:	d10c      	bne.n	8007800 <HAL_RCC_OscConfig+0x98>
 80077e6:	4b8b      	ldr	r3, [pc, #556]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a8a      	ldr	r2, [pc, #552]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b88      	ldr	r3, [pc, #544]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a87      	ldr	r2, [pc, #540]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e00b      	b.n	8007818 <HAL_RCC_OscConfig+0xb0>
 8007800:	4b84      	ldr	r3, [pc, #528]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a83      	ldr	r2, [pc, #524]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	4b81      	ldr	r3, [pc, #516]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a80      	ldr	r2, [pc, #512]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d013      	beq.n	8007848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007820:	f7fb ffea 	bl	80037f8 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007828:	f7fb ffe6 	bl	80037f8 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b64      	cmp	r3, #100	; 0x64
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e1fb      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783a:	4b76      	ldr	r3, [pc, #472]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0xc0>
 8007846:	e014      	b.n	8007872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007848:	f7fb ffd6 	bl	80037f8 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007850:	f7fb ffd2 	bl	80037f8 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e1e7      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007862:	4b6c      	ldr	r3, [pc, #432]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0xe8>
 800786e:	e000      	b.n	8007872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d063      	beq.n	8007946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787e:	4b65      	ldr	r3, [pc, #404]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00b      	beq.n	80078a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800788a:	4b62      	ldr	r3, [pc, #392]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007892:	2b08      	cmp	r3, #8
 8007894:	d11c      	bne.n	80078d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007896:	4b5f      	ldr	r3, [pc, #380]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d116      	bne.n	80078d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078a2:	4b5c      	ldr	r3, [pc, #368]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_RCC_OscConfig+0x152>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d001      	beq.n	80078ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e1bb      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ba:	4b56      	ldr	r3, [pc, #344]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4952      	ldr	r1, [pc, #328]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ce:	e03a      	b.n	8007946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d020      	beq.n	800791a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d8:	4b4f      	ldr	r3, [pc, #316]	; (8007a18 <HAL_RCC_OscConfig+0x2b0>)
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078de:	f7fb ff8b 	bl	80037f8 <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e4:	e008      	b.n	80078f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e6:	f7fb ff87 	bl	80037f8 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e19c      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f8:	4b46      	ldr	r3, [pc, #280]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0f0      	beq.n	80078e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007904:	4b43      	ldr	r3, [pc, #268]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	4940      	ldr	r1, [pc, #256]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007914:	4313      	orrs	r3, r2
 8007916:	600b      	str	r3, [r1, #0]
 8007918:	e015      	b.n	8007946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800791a:	4b3f      	ldr	r3, [pc, #252]	; (8007a18 <HAL_RCC_OscConfig+0x2b0>)
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007920:	f7fb ff6a 	bl	80037f8 <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007928:	f7fb ff66 	bl	80037f8 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e17b      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800793a:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f0      	bne.n	8007928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d030      	beq.n	80079b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d016      	beq.n	8007988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800795a:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <HAL_RCC_OscConfig+0x2b4>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007960:	f7fb ff4a 	bl	80037f8 <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007968:	f7fb ff46 	bl	80037f8 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e15b      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800797a:	4b26      	ldr	r3, [pc, #152]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800797c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f0      	beq.n	8007968 <HAL_RCC_OscConfig+0x200>
 8007986:	e015      	b.n	80079b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007988:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <HAL_RCC_OscConfig+0x2b4>)
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800798e:	f7fb ff33 	bl	80037f8 <HAL_GetTick>
 8007992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007994:	e008      	b.n	80079a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007996:	f7fb ff2f 	bl	80037f8 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d901      	bls.n	80079a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e144      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f0      	bne.n	8007996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80a0 	beq.w	8007b02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079c6:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10f      	bne.n	80079f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	4a0e      	ldr	r2, [pc, #56]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e0:	6413      	str	r3, [r2, #64]	; 0x40
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ea:	60bb      	str	r3, [r7, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ee:	2301      	movs	r3, #1
 80079f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f2:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <HAL_RCC_OscConfig+0x2b8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d121      	bne.n	8007a42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <HAL_RCC_OscConfig+0x2b8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a07      	ldr	r2, [pc, #28]	; (8007a20 <HAL_RCC_OscConfig+0x2b8>)
 8007a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a0a:	f7fb fef5 	bl	80037f8 <HAL_GetTick>
 8007a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a10:	e011      	b.n	8007a36 <HAL_RCC_OscConfig+0x2ce>
 8007a12:	bf00      	nop
 8007a14:	40023800 	.word	0x40023800
 8007a18:	42470000 	.word	0x42470000
 8007a1c:	42470e80 	.word	0x42470e80
 8007a20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a24:	f7fb fee8 	bl	80037f8 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e0fd      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a36:	4b81      	ldr	r3, [pc, #516]	; (8007c3c <HAL_RCC_OscConfig+0x4d4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d106      	bne.n	8007a58 <HAL_RCC_OscConfig+0x2f0>
 8007a4a:	4b7d      	ldr	r3, [pc, #500]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4e:	4a7c      	ldr	r2, [pc, #496]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	6713      	str	r3, [r2, #112]	; 0x70
 8007a56:	e01c      	b.n	8007a92 <HAL_RCC_OscConfig+0x32a>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d10c      	bne.n	8007a7a <HAL_RCC_OscConfig+0x312>
 8007a60:	4b77      	ldr	r3, [pc, #476]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a64:	4a76      	ldr	r2, [pc, #472]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a66:	f043 0304 	orr.w	r3, r3, #4
 8007a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6c:	4b74      	ldr	r3, [pc, #464]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a70:	4a73      	ldr	r2, [pc, #460]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	6713      	str	r3, [r2, #112]	; 0x70
 8007a78:	e00b      	b.n	8007a92 <HAL_RCC_OscConfig+0x32a>
 8007a7a:	4b71      	ldr	r3, [pc, #452]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	4a70      	ldr	r2, [pc, #448]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a80:	f023 0301 	bic.w	r3, r3, #1
 8007a84:	6713      	str	r3, [r2, #112]	; 0x70
 8007a86:	4b6e      	ldr	r3, [pc, #440]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8a:	4a6d      	ldr	r2, [pc, #436]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007a8c:	f023 0304 	bic.w	r3, r3, #4
 8007a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d015      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9a:	f7fb fead 	bl	80037f8 <HAL_GetTick>
 8007a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aa0:	e00a      	b.n	8007ab8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aa2:	f7fb fea9 	bl	80037f8 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d901      	bls.n	8007ab8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e0bc      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab8:	4b61      	ldr	r3, [pc, #388]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0ee      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x33a>
 8007ac4:	e014      	b.n	8007af0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ac6:	f7fb fe97 	bl	80037f8 <HAL_GetTick>
 8007aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007acc:	e00a      	b.n	8007ae4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ace:	f7fb fe93 	bl	80037f8 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d901      	bls.n	8007ae4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e0a6      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ae4:	4b56      	ldr	r3, [pc, #344]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1ee      	bne.n	8007ace <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d105      	bne.n	8007b02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af6:	4b52      	ldr	r3, [pc, #328]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	4a51      	ldr	r2, [pc, #324]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8092 	beq.w	8007c30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b0c:	4b4c      	ldr	r3, [pc, #304]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 030c 	and.w	r3, r3, #12
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d05c      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d141      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b20:	4b48      	ldr	r3, [pc, #288]	; (8007c44 <HAL_RCC_OscConfig+0x4dc>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b26:	f7fb fe67 	bl	80037f8 <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b2e:	f7fb fe63 	bl	80037f8 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e078      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b40:	4b3f      	ldr	r3, [pc, #252]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f0      	bne.n	8007b2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69da      	ldr	r2, [r3, #28]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	019b      	lsls	r3, r3, #6
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	3b01      	subs	r3, #1
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	061b      	lsls	r3, r3, #24
 8007b70:	4933      	ldr	r1, [pc, #204]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b76:	4b33      	ldr	r3, [pc, #204]	; (8007c44 <HAL_RCC_OscConfig+0x4dc>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b7c:	f7fb fe3c 	bl	80037f8 <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b84:	f7fb fe38 	bl	80037f8 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e04d      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b96:	4b2a      	ldr	r3, [pc, #168]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0f0      	beq.n	8007b84 <HAL_RCC_OscConfig+0x41c>
 8007ba2:	e045      	b.n	8007c30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ba4:	4b27      	ldr	r3, [pc, #156]	; (8007c44 <HAL_RCC_OscConfig+0x4dc>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007baa:	f7fb fe25 	bl	80037f8 <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bb2:	f7fb fe21 	bl	80037f8 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e036      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bc4:	4b1e      	ldr	r3, [pc, #120]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f0      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x44a>
 8007bd0:	e02e      	b.n	8007c30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e029      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bde:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <HAL_RCC_OscConfig+0x4d8>)
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d11c      	bne.n	8007c2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d115      	bne.n	8007c2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c06:	4013      	ands	r3, r2
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d10d      	bne.n	8007c2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d106      	bne.n	8007c2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d001      	beq.n	8007c30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e000      	b.n	8007c32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40007000 	.word	0x40007000
 8007c40:	40023800 	.word	0x40023800
 8007c44:	42470060 	.word	0x42470060

08007c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0cc      	b.n	8007df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c5c:	4b68      	ldr	r3, [pc, #416]	; (8007e00 <HAL_RCC_ClockConfig+0x1b8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d90c      	bls.n	8007c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6a:	4b65      	ldr	r3, [pc, #404]	; (8007e00 <HAL_RCC_ClockConfig+0x1b8>)
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c72:	4b63      	ldr	r3, [pc, #396]	; (8007e00 <HAL_RCC_ClockConfig+0x1b8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d001      	beq.n	8007c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e0b8      	b.n	8007df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d020      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c9c:	4b59      	ldr	r3, [pc, #356]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	4a58      	ldr	r2, [pc, #352]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cb4:	4b53      	ldr	r3, [pc, #332]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	4a52      	ldr	r2, [pc, #328]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cc0:	4b50      	ldr	r3, [pc, #320]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	494d      	ldr	r1, [pc, #308]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d044      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d107      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ce6:	4b47      	ldr	r3, [pc, #284]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d119      	bne.n	8007d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e07f      	b.n	8007df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d003      	beq.n	8007d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d107      	bne.n	8007d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d06:	4b3f      	ldr	r3, [pc, #252]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e06f      	b.n	8007df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d16:	4b3b      	ldr	r3, [pc, #236]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e067      	b.n	8007df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d26:	4b37      	ldr	r3, [pc, #220]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f023 0203 	bic.w	r2, r3, #3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	4934      	ldr	r1, [pc, #208]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d38:	f7fb fd5e 	bl	80037f8 <HAL_GetTick>
 8007d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d3e:	e00a      	b.n	8007d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d40:	f7fb fd5a 	bl	80037f8 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e04f      	b.n	8007df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d56:	4b2b      	ldr	r3, [pc, #172]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f003 020c 	and.w	r2, r3, #12
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d1eb      	bne.n	8007d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d68:	4b25      	ldr	r3, [pc, #148]	; (8007e00 <HAL_RCC_ClockConfig+0x1b8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d20c      	bcs.n	8007d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d76:	4b22      	ldr	r3, [pc, #136]	; (8007e00 <HAL_RCC_ClockConfig+0x1b8>)
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d7e:	4b20      	ldr	r3, [pc, #128]	; (8007e00 <HAL_RCC_ClockConfig+0x1b8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d001      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e032      	b.n	8007df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d008      	beq.n	8007dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d9c:	4b19      	ldr	r3, [pc, #100]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	4916      	ldr	r1, [pc, #88]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dba:	4b12      	ldr	r3, [pc, #72]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	490e      	ldr	r1, [pc, #56]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dce:	f000 f821 	bl	8007e14 <HAL_RCC_GetSysClockFreq>
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4b0b      	ldr	r3, [pc, #44]	; (8007e04 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	4a0a      	ldr	r2, [pc, #40]	; (8007e08 <HAL_RCC_ClockConfig+0x1c0>)
 8007de0:	5cd3      	ldrb	r3, [r2, r3]
 8007de2:	fa21 f303 	lsr.w	r3, r1, r3
 8007de6:	4a09      	ldr	r2, [pc, #36]	; (8007e0c <HAL_RCC_ClockConfig+0x1c4>)
 8007de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7f9 fc0e 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	40023c00 	.word	0x40023c00
 8007e04:	40023800 	.word	0x40023800
 8007e08:	0800bc60 	.word	0x0800bc60
 8007e0c:	20000000 	.word	0x20000000
 8007e10:	20000080 	.word	0x20000080

08007e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	2300      	movs	r3, #0
 8007e24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e2a:	4b63      	ldr	r3, [pc, #396]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 030c 	and.w	r3, r3, #12
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d007      	beq.n	8007e46 <HAL_RCC_GetSysClockFreq+0x32>
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d008      	beq.n	8007e4c <HAL_RCC_GetSysClockFreq+0x38>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 80b4 	bne.w	8007fa8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e40:	4b5e      	ldr	r3, [pc, #376]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007e42:	60bb      	str	r3, [r7, #8]
       break;
 8007e44:	e0b3      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e46:	4b5e      	ldr	r3, [pc, #376]	; (8007fc0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007e48:	60bb      	str	r3, [r7, #8]
      break;
 8007e4a:	e0b0      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e4c:	4b5a      	ldr	r3, [pc, #360]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e56:	4b58      	ldr	r3, [pc, #352]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04a      	beq.n	8007ef8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e62:	4b55      	ldr	r3, [pc, #340]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	099b      	lsrs	r3, r3, #6
 8007e68:	f04f 0400 	mov.w	r4, #0
 8007e6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	ea03 0501 	and.w	r5, r3, r1
 8007e78:	ea04 0602 	and.w	r6, r4, r2
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4632      	mov	r2, r6
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	f04f 0400 	mov.w	r4, #0
 8007e88:	0154      	lsls	r4, r2, #5
 8007e8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007e8e:	014b      	lsls	r3, r1, #5
 8007e90:	4619      	mov	r1, r3
 8007e92:	4622      	mov	r2, r4
 8007e94:	1b49      	subs	r1, r1, r5
 8007e96:	eb62 0206 	sbc.w	r2, r2, r6
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	f04f 0400 	mov.w	r4, #0
 8007ea2:	0194      	lsls	r4, r2, #6
 8007ea4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007ea8:	018b      	lsls	r3, r1, #6
 8007eaa:	1a5b      	subs	r3, r3, r1
 8007eac:	eb64 0402 	sbc.w	r4, r4, r2
 8007eb0:	f04f 0100 	mov.w	r1, #0
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	00e2      	lsls	r2, r4, #3
 8007eba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007ebe:	00d9      	lsls	r1, r3, #3
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4614      	mov	r4, r2
 8007ec4:	195b      	adds	r3, r3, r5
 8007ec6:	eb44 0406 	adc.w	r4, r4, r6
 8007eca:	f04f 0100 	mov.w	r1, #0
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	0262      	lsls	r2, r4, #9
 8007ed4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007ed8:	0259      	lsls	r1, r3, #9
 8007eda:	460b      	mov	r3, r1
 8007edc:	4614      	mov	r4, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f04f 0400 	mov.w	r4, #0
 8007ee8:	461a      	mov	r2, r3
 8007eea:	4623      	mov	r3, r4
 8007eec:	f7f8 f980 	bl	80001f0 <__aeabi_uldivmod>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	e049      	b.n	8007f8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ef8:	4b2f      	ldr	r3, [pc, #188]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	099b      	lsrs	r3, r3, #6
 8007efe:	f04f 0400 	mov.w	r4, #0
 8007f02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	ea03 0501 	and.w	r5, r3, r1
 8007f0e:	ea04 0602 	and.w	r6, r4, r2
 8007f12:	4629      	mov	r1, r5
 8007f14:	4632      	mov	r2, r6
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	f04f 0400 	mov.w	r4, #0
 8007f1e:	0154      	lsls	r4, r2, #5
 8007f20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f24:	014b      	lsls	r3, r1, #5
 8007f26:	4619      	mov	r1, r3
 8007f28:	4622      	mov	r2, r4
 8007f2a:	1b49      	subs	r1, r1, r5
 8007f2c:	eb62 0206 	sbc.w	r2, r2, r6
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	f04f 0400 	mov.w	r4, #0
 8007f38:	0194      	lsls	r4, r2, #6
 8007f3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f3e:	018b      	lsls	r3, r1, #6
 8007f40:	1a5b      	subs	r3, r3, r1
 8007f42:	eb64 0402 	sbc.w	r4, r4, r2
 8007f46:	f04f 0100 	mov.w	r1, #0
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	00e2      	lsls	r2, r4, #3
 8007f50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f54:	00d9      	lsls	r1, r3, #3
 8007f56:	460b      	mov	r3, r1
 8007f58:	4614      	mov	r4, r2
 8007f5a:	195b      	adds	r3, r3, r5
 8007f5c:	eb44 0406 	adc.w	r4, r4, r6
 8007f60:	f04f 0100 	mov.w	r1, #0
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	02a2      	lsls	r2, r4, #10
 8007f6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007f6e:	0299      	lsls	r1, r3, #10
 8007f70:	460b      	mov	r3, r1
 8007f72:	4614      	mov	r4, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	4621      	mov	r1, r4
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f04f 0400 	mov.w	r4, #0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4623      	mov	r3, r4
 8007f82:	f7f8 f935 	bl	80001f0 <__aeabi_uldivmod>
 8007f86:	4603      	mov	r3, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	0c1b      	lsrs	r3, r3, #16
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	3301      	adds	r3, #1
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	60bb      	str	r3, [r7, #8]
      break;
 8007fa6:	e002      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fa8:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007faa:	60bb      	str	r3, [r7, #8]
      break;
 8007fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fae:	68bb      	ldr	r3, [r7, #8]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb8:	40023800 	.word	0x40023800
 8007fbc:	00f42400 	.word	0x00f42400
 8007fc0:	007a1200 	.word	0x007a1200

08007fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fc8:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fca:	681b      	ldr	r3, [r3, #0]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20000000 	.word	0x20000000

08007fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fe0:	f7ff fff0 	bl	8007fc4 <HAL_RCC_GetHCLKFreq>
 8007fe4:	4601      	mov	r1, r0
 8007fe6:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	0a9b      	lsrs	r3, r3, #10
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	4a03      	ldr	r2, [pc, #12]	; (8008000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ff2:	5cd3      	ldrb	r3, [r2, r3]
 8007ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	40023800 	.word	0x40023800
 8008000:	0800bc70 	.word	0x0800bc70

08008004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008008:	f7ff ffdc 	bl	8007fc4 <HAL_RCC_GetHCLKFreq>
 800800c:	4601      	mov	r1, r0
 800800e:	4b05      	ldr	r3, [pc, #20]	; (8008024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	0b5b      	lsrs	r3, r3, #13
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	4a03      	ldr	r2, [pc, #12]	; (8008028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800801a:	5cd3      	ldrb	r3, [r2, r3]
 800801c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40023800 	.word	0x40023800
 8008028:	0800bc70 	.word	0x0800bc70

0800802c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	220f      	movs	r2, #15
 800803a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800803c:	4b12      	ldr	r3, [pc, #72]	; (8008088 <HAL_RCC_GetClockConfig+0x5c>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f003 0203 	and.w	r2, r3, #3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <HAL_RCC_GetClockConfig+0x5c>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008054:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <HAL_RCC_GetClockConfig+0x5c>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008060:	4b09      	ldr	r3, [pc, #36]	; (8008088 <HAL_RCC_GetClockConfig+0x5c>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	08db      	lsrs	r3, r3, #3
 8008066:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800806e:	4b07      	ldr	r3, [pc, #28]	; (800808c <HAL_RCC_GetClockConfig+0x60>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 020f 	and.w	r2, r3, #15
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	601a      	str	r2, [r3, #0]
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40023800 	.word	0x40023800
 800808c:	40023c00 	.word	0x40023c00

08008090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d075      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80080c4:	4bad      	ldr	r3, [pc, #692]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080ca:	f7fb fb95 	bl	80037f8 <HAL_GetTick>
 80080ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080d0:	e008      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080d2:	f7fb fb91 	bl	80037f8 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e18b      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080e4:	4ba6      	ldr	r3, [pc, #664]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f0      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	019a      	lsls	r2, r3, #6
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	071b      	lsls	r3, r3, #28
 8008108:	499d      	ldr	r1, [pc, #628]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01f      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800811c:	4b98      	ldr	r3, [pc, #608]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800811e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008122:	0f1b      	lsrs	r3, r3, #28
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	019a      	lsls	r2, r3, #6
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	061b      	lsls	r3, r3, #24
 8008136:	431a      	orrs	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	071b      	lsls	r3, r3, #28
 800813c:	4990      	ldr	r1, [pc, #576]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800813e:	4313      	orrs	r3, r2
 8008140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008144:	4b8e      	ldr	r3, [pc, #568]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800814a:	f023 021f 	bic.w	r2, r3, #31
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	3b01      	subs	r3, #1
 8008154:	498a      	ldr	r1, [pc, #552]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008156:	4313      	orrs	r3, r2
 8008158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00d      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	019a      	lsls	r2, r3, #6
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	061b      	lsls	r3, r3, #24
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	071b      	lsls	r3, r3, #28
 800817c:	4980      	ldr	r1, [pc, #512]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008184:	4b7d      	ldr	r3, [pc, #500]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800818a:	f7fb fb35 	bl	80037f8 <HAL_GetTick>
 800818e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008190:	e008      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008192:	f7fb fb31 	bl	80037f8 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e12b      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081a4:	4b76      	ldr	r3, [pc, #472]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f0      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d079      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80081c8:	4b6e      	ldr	r3, [pc, #440]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081ce:	f7fb fb13 	bl	80037f8 <HAL_GetTick>
 80081d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081d4:	e008      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80081d6:	f7fb fb0f 	bl	80037f8 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d901      	bls.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e109      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081e8:	4b65      	ldr	r3, [pc, #404]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f4:	d0ef      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d020      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008202:	4b5f      	ldr	r3, [pc, #380]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008208:	0f1b      	lsrs	r3, r3, #28
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	019a      	lsls	r2, r3, #6
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	061b      	lsls	r3, r3, #24
 800821c:	431a      	orrs	r2, r3
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	071b      	lsls	r3, r3, #28
 8008222:	4957      	ldr	r1, [pc, #348]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008224:	4313      	orrs	r3, r2
 8008226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800822a:	4b55      	ldr	r3, [pc, #340]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800822c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008230:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	3b01      	subs	r3, #1
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	4950      	ldr	r1, [pc, #320]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d01e      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008250:	4b4b      	ldr	r3, [pc, #300]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008256:	0e1b      	lsrs	r3, r3, #24
 8008258:	f003 030f 	and.w	r3, r3, #15
 800825c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	019a      	lsls	r2, r3, #6
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	061b      	lsls	r3, r3, #24
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	071b      	lsls	r3, r3, #28
 8008270:	4943      	ldr	r1, [pc, #268]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008278:	4b41      	ldr	r3, [pc, #260]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800827a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800827e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	493e      	ldr	r1, [pc, #248]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008288:	4313      	orrs	r3, r2
 800828a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800828e:	4b3d      	ldr	r3, [pc, #244]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008290:	2201      	movs	r2, #1
 8008292:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008294:	f7fb fab0 	bl	80037f8 <HAL_GetTick>
 8008298:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800829a:	e008      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800829c:	f7fb faac 	bl	80037f8 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d901      	bls.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e0a6      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082ae:	4b34      	ldr	r3, [pc, #208]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ba:	d1ef      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 808d 	beq.w	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	4b2c      	ldr	r3, [pc, #176]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	4a2b      	ldr	r2, [pc, #172]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d8:	6413      	str	r3, [r2, #64]	; 0x40
 80082da:	4b29      	ldr	r3, [pc, #164]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80082e6:	4b28      	ldr	r3, [pc, #160]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a27      	ldr	r2, [pc, #156]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80082ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082f2:	f7fb fa81 	bl	80037f8 <HAL_GetTick>
 80082f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80082f8:	e008      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082fa:	f7fb fa7d 	bl	80037f8 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d901      	bls.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e077      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800830c:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0f0      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008318:	4b19      	ldr	r3, [pc, #100]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008320:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d039      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	429a      	cmp	r2, r3
 8008334:	d032      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008336:	4b12      	ldr	r3, [pc, #72]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800833e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008340:	4b12      	ldr	r3, [pc, #72]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008346:	4b11      	ldr	r3, [pc, #68]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800834c:	4a0c      	ldr	r2, [pc, #48]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b01      	cmp	r3, #1
 800835c:	d11e      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800835e:	f7fb fa4b 	bl	80037f8 <HAL_GetTick>
 8008362:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008364:	e014      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008366:	f7fb fa47 	bl	80037f8 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	f241 3288 	movw	r2, #5000	; 0x1388
 8008374:	4293      	cmp	r3, r2
 8008376:	d90b      	bls.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e03f      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800837c:	42470068 	.word	0x42470068
 8008380:	40023800 	.word	0x40023800
 8008384:	42470070 	.word	0x42470070
 8008388:	40007000 	.word	0x40007000
 800838c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008390:	4b1c      	ldr	r3, [pc, #112]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0e4      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083a8:	d10d      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80083aa:	4b16      	ldr	r3, [pc, #88]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80083ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083be:	4911      	ldr	r1, [pc, #68]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	608b      	str	r3, [r1, #8]
 80083c4:	e005      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	4a0e      	ldr	r2, [pc, #56]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80083d0:	6093      	str	r3, [r2, #8]
 80083d2:	4b0c      	ldr	r3, [pc, #48]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083de:	4909      	ldr	r1, [pc, #36]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d004      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80083f6:	4b04      	ldr	r3, [pc, #16]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80083f8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	40023800 	.word	0x40023800
 8008408:	424711e0 	.word	0x424711e0

0800840c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e025      	b.n	800846c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d106      	bne.n	800843a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7f8 fa33 	bl	80008a0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2202      	movs	r2, #2
 800843e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f001 fdb1 	bl	8009fb4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	461a      	mov	r2, r3
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	f001 fe1c 	bl	800a09a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d101      	bne.n	8008490 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800848c:	2302      	movs	r3, #2
 800848e:	e018      	b.n	80084c2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 fe79 	bl	800a198 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d104      	bne.n	80084b8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2205      	movs	r2, #5
 80084b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80084b6:	e003      	b.n	80084c0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d101      	bne.n	80084e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80084e0:	2302      	movs	r3, #2
 80084e2:	e00e      	b.n	8008502 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 fe8c 	bl	800a210 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e056      	b.n	80085ca <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7f8 ffd8 	bl	80014ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	ea42 0103 	orr.w	r1, r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	f003 0104 	and.w	r1, r3, #4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69da      	ldr	r2, [r3, #28]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e01a      	b.n	800861a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7f8 ffbd 	bl	800157c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b088      	sub	sp, #32
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	603b      	str	r3, [r7, #0]
 800862e:	4613      	mov	r3, r2
 8008630:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_SPI_Transmit+0x22>
 8008640:	2302      	movs	r3, #2
 8008642:	e11e      	b.n	8008882 <HAL_SPI_Transmit+0x260>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800864c:	f7fb f8d4 	bl	80037f8 <HAL_GetTick>
 8008650:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b01      	cmp	r3, #1
 8008660:	d002      	beq.n	8008668 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008662:	2302      	movs	r3, #2
 8008664:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008666:	e103      	b.n	8008870 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <HAL_SPI_Transmit+0x52>
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008678:	e0fa      	b.n	8008870 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2203      	movs	r2, #3
 800867e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	88fa      	ldrh	r2, [r7, #6]
 8008692:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	88fa      	ldrh	r2, [r7, #6]
 8008698:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c0:	d107      	bne.n	80086d2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	d007      	beq.n	80086f0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086f8:	d14b      	bne.n	8008792 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <HAL_SPI_Transmit+0xe6>
 8008702:	8afb      	ldrh	r3, [r7, #22]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d13e      	bne.n	8008786 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870c:	881a      	ldrh	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	1c9a      	adds	r2, r3, #2
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800872c:	e02b      	b.n	8008786 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b02      	cmp	r3, #2
 800873a:	d112      	bne.n	8008762 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	881a      	ldrh	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874c:	1c9a      	adds	r2, r3, #2
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008760:	e011      	b.n	8008786 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008762:	f7fb f849 	bl	80037f8 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d803      	bhi.n	800877a <HAL_SPI_Transmit+0x158>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d102      	bne.n	8008780 <HAL_SPI_Transmit+0x15e>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d102      	bne.n	8008786 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008784:	e074      	b.n	8008870 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1ce      	bne.n	800872e <HAL_SPI_Transmit+0x10c>
 8008790:	e04c      	b.n	800882c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_SPI_Transmit+0x17e>
 800879a:	8afb      	ldrh	r3, [r7, #22]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d140      	bne.n	8008822 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	7812      	ldrb	r2, [r2, #0]
 80087ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80087c6:	e02c      	b.n	8008822 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d113      	bne.n	80087fe <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	330c      	adds	r3, #12
 80087e0:	7812      	ldrb	r2, [r2, #0]
 80087e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3b01      	subs	r3, #1
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80087fc:	e011      	b.n	8008822 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087fe:	f7fa fffb 	bl	80037f8 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d803      	bhi.n	8008816 <HAL_SPI_Transmit+0x1f4>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d102      	bne.n	800881c <HAL_SPI_Transmit+0x1fa>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008820:	e026      	b.n	8008870 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1cd      	bne.n	80087c8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fbb3 	bl	8008f9c <SPI_EndRxTxTransaction>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2220      	movs	r2, #32
 8008840:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	77fb      	strb	r3, [r7, #31]
 800886c:	e000      	b.n	8008870 <HAL_SPI_Transmit+0x24e>
  }

error:
 800886e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008880:	7ffb      	ldrb	r3, [r7, #31]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af02      	add	r7, sp, #8
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	603b      	str	r3, [r7, #0]
 8008896:	4613      	mov	r3, r2
 8008898:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088a6:	d112      	bne.n	80088ce <HAL_SPI_Receive+0x44>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10e      	bne.n	80088ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2204      	movs	r2, #4
 80088b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80088b8:	88fa      	ldrh	r2, [r7, #6]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	4613      	mov	r3, r2
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 f8e9 	bl	8008a9c <HAL_SPI_TransmitReceive>
 80088ca:	4603      	mov	r3, r0
 80088cc:	e0e2      	b.n	8008a94 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_SPI_Receive+0x52>
 80088d8:	2302      	movs	r3, #2
 80088da:	e0db      	b.n	8008a94 <HAL_SPI_Receive+0x20a>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088e4:	f7fa ff88 	bl	80037f8 <HAL_GetTick>
 80088e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d002      	beq.n	80088fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
 80088f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088fa:	e0c2      	b.n	8008a82 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <HAL_SPI_Receive+0x7e>
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800890c:	e0b9      	b.n	8008a82 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2204      	movs	r2, #4
 8008912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	88fa      	ldrh	r2, [r7, #6]
 800892c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008954:	d107      	bne.n	8008966 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008964:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008970:	2b40      	cmp	r3, #64	; 0x40
 8008972:	d007      	beq.n	8008984 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008982:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d162      	bne.n	8008a52 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800898c:	e02e      	b.n	80089ec <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b01      	cmp	r3, #1
 800899a:	d115      	bne.n	80089c8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f103 020c 	add.w	r2, r3, #12
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	7812      	ldrb	r2, [r2, #0]
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b2:	1c5a      	adds	r2, r3, #1
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089c6:	e011      	b.n	80089ec <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089c8:	f7fa ff16 	bl	80037f8 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d803      	bhi.n	80089e0 <HAL_SPI_Receive+0x156>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089de:	d102      	bne.n	80089e6 <HAL_SPI_Receive+0x15c>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089ea:	e04a      	b.n	8008a82 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1cb      	bne.n	800898e <HAL_SPI_Receive+0x104>
 80089f6:	e031      	b.n	8008a5c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d113      	bne.n	8008a2e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	b292      	uxth	r2, r2
 8008a12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	1c9a      	adds	r2, r3, #2
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a2c:	e011      	b.n	8008a52 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a2e:	f7fa fee3 	bl	80037f8 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d803      	bhi.n	8008a46 <HAL_SPI_Receive+0x1bc>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a44:	d102      	bne.n	8008a4c <HAL_SPI_Receive+0x1c2>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d102      	bne.n	8008a52 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a50:	e017      	b.n	8008a82 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1cd      	bne.n	80089f8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 fa35 	bl	8008ed0 <SPI_EndRxTransaction>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	75fb      	strb	r3, [r7, #23]
 8008a7e:	e000      	b.n	8008a82 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008a80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08c      	sub	sp, #48	; 0x30
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_SPI_TransmitReceive+0x26>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e18a      	b.n	8008dd8 <HAL_SPI_TransmitReceive+0x33c>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aca:	f7fa fe95 	bl	80037f8 <HAL_GetTick>
 8008ace:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ae0:	887b      	ldrh	r3, [r7, #2]
 8008ae2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d00f      	beq.n	8008b0c <HAL_SPI_TransmitReceive+0x70>
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008af2:	d107      	bne.n	8008b04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d103      	bne.n	8008b04 <HAL_SPI_TransmitReceive+0x68>
 8008afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	d003      	beq.n	8008b0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
 8008b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b0a:	e15b      	b.n	8008dc4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d005      	beq.n	8008b1e <HAL_SPI_TransmitReceive+0x82>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <HAL_SPI_TransmitReceive+0x82>
 8008b18:	887b      	ldrh	r3, [r7, #2]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b24:	e14e      	b.n	8008dc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d003      	beq.n	8008b3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2205      	movs	r2, #5
 8008b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	887a      	ldrh	r2, [r7, #2]
 8008b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	887a      	ldrh	r2, [r7, #2]
 8008b50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	887a      	ldrh	r2, [r7, #2]
 8008b5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	887a      	ldrh	r2, [r7, #2]
 8008b62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b40      	cmp	r3, #64	; 0x40
 8008b7c:	d007      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b96:	d178      	bne.n	8008c8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <HAL_SPI_TransmitReceive+0x10a>
 8008ba0:	8b7b      	ldrh	r3, [r7, #26]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d166      	bne.n	8008c74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	881a      	ldrh	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	1c9a      	adds	r2, r3, #2
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bca:	e053      	b.n	8008c74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d11b      	bne.n	8008c12 <HAL_SPI_TransmitReceive+0x176>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d016      	beq.n	8008c12 <HAL_SPI_TransmitReceive+0x176>
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d113      	bne.n	8008c12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	881a      	ldrh	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	1c9a      	adds	r2, r3, #2
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d119      	bne.n	8008c54 <HAL_SPI_TransmitReceive+0x1b8>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d014      	beq.n	8008c54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	b292      	uxth	r2, r2
 8008c36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	1c9a      	adds	r2, r3, #2
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c50:	2301      	movs	r3, #1
 8008c52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c54:	f7fa fdd0 	bl	80037f8 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d807      	bhi.n	8008c74 <HAL_SPI_TransmitReceive+0x1d8>
 8008c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6a:	d003      	beq.n	8008c74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c72:	e0a7      	b.n	8008dc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1a6      	bne.n	8008bcc <HAL_SPI_TransmitReceive+0x130>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1a1      	bne.n	8008bcc <HAL_SPI_TransmitReceive+0x130>
 8008c88:	e07c      	b.n	8008d84 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <HAL_SPI_TransmitReceive+0x1fc>
 8008c92:	8b7b      	ldrh	r3, [r7, #26]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d16b      	bne.n	8008d70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	330c      	adds	r3, #12
 8008ca2:	7812      	ldrb	r2, [r2, #0]
 8008ca4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cbe:	e057      	b.n	8008d70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d11c      	bne.n	8008d08 <HAL_SPI_TransmitReceive+0x26c>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d017      	beq.n	8008d08 <HAL_SPI_TransmitReceive+0x26c>
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d114      	bne.n	8008d08 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	7812      	ldrb	r2, [r2, #0]
 8008cea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d119      	bne.n	8008d4a <HAL_SPI_TransmitReceive+0x2ae>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d014      	beq.n	8008d4a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2a:	b2d2      	uxtb	r2, r2
 8008d2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d46:	2301      	movs	r3, #1
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d4a:	f7fa fd55 	bl	80037f8 <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d803      	bhi.n	8008d62 <HAL_SPI_TransmitReceive+0x2c6>
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d102      	bne.n	8008d68 <HAL_SPI_TransmitReceive+0x2cc>
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d103      	bne.n	8008d70 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d6e:	e029      	b.n	8008dc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1a2      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x224>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d19d      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 f907 	bl	8008f9c <SPI_EndRxTxTransaction>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d006      	beq.n	8008da2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008da0:	e010      	b.n	8008dc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10b      	bne.n	8008dc2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	e000      	b.n	8008dc4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3730      	adds	r7, #48	; 0x30
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dee:	b2db      	uxtb	r3, r3
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e0c:	e04c      	b.n	8008ea8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d048      	beq.n	8008ea8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008e16:	f7fa fcef 	bl	80037f8 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d902      	bls.n	8008e2c <SPI_WaitFlagStateUntilTimeout+0x30>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d13d      	bne.n	8008ea8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e44:	d111      	bne.n	8008e6a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e4e:	d004      	beq.n	8008e5a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e58:	d107      	bne.n	8008e6a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e72:	d10f      	bne.n	8008e94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e00f      	b.n	8008ec8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d1a3      	bne.n	8008e0e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af02      	add	r7, sp, #8
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ee4:	d111      	bne.n	8008f0a <SPI_EndRxTransaction+0x3a>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eee:	d004      	beq.n	8008efa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef8:	d107      	bne.n	8008f0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f12:	d12a      	bne.n	8008f6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f1c:	d012      	beq.n	8008f44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2200      	movs	r2, #0
 8008f26:	2180      	movs	r1, #128	; 0x80
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7ff ff67 	bl	8008dfc <SPI_WaitFlagStateUntilTimeout>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d02d      	beq.n	8008f90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f38:	f043 0220 	orr.w	r2, r3, #32
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e026      	b.n	8008f92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff ff54 	bl	8008dfc <SPI_WaitFlagStateUntilTimeout>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d01a      	beq.n	8008f90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5e:	f043 0220 	orr.w	r2, r3, #32
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e013      	b.n	8008f92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2200      	movs	r2, #0
 8008f72:	2101      	movs	r1, #1
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff ff41 	bl	8008dfc <SPI_WaitFlagStateUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	f043 0220 	orr.w	r2, r3, #32
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e000      	b.n	8008f92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fa8:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <SPI_EndRxTxTransaction+0x7c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a1b      	ldr	r2, [pc, #108]	; (800901c <SPI_EndRxTxTransaction+0x80>)
 8008fae:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb2:	0d5b      	lsrs	r3, r3, #21
 8008fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fb8:	fb02 f303 	mul.w	r3, r2, r3
 8008fbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fc6:	d112      	bne.n	8008fee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2180      	movs	r1, #128	; 0x80
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7ff ff12 	bl	8008dfc <SPI_WaitFlagStateUntilTimeout>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d016      	beq.n	800900c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe2:	f043 0220 	orr.w	r2, r3, #32
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e00f      	b.n	800900e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00a      	beq.n	800900a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009004:	2b80      	cmp	r3, #128	; 0x80
 8009006:	d0f2      	beq.n	8008fee <SPI_EndRxTxTransaction+0x52>
 8009008:	e000      	b.n	800900c <SPI_EndRxTxTransaction+0x70>
        break;
 800900a:	bf00      	nop
  }

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000000 	.word	0x20000000
 800901c:	165e9f81 	.word	0x165e9f81

08009020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e01d      	b.n	800906e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7f8 fc1a 	bl	8001880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3304      	adds	r3, #4
 800905c:	4619      	mov	r1, r3
 800905e:	4610      	mov	r0, r2
 8009060:	f000 fa14 	bl	800948c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0201 	orr.w	r2, r2, #1
 800908c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b06      	cmp	r3, #6
 800909e:	d007      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0201 	orr.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d122      	bne.n	800911a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d11b      	bne.n	800911a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f06f 0202 	mvn.w	r2, #2
 80090ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f003 0303 	and.w	r3, r3, #3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f9a5 	bl	8009450 <HAL_TIM_IC_CaptureCallback>
 8009106:	e005      	b.n	8009114 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f997 	bl	800943c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9a8 	bl	8009464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b04      	cmp	r3, #4
 8009126:	d122      	bne.n	800916e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f003 0304 	and.w	r3, r3, #4
 8009132:	2b04      	cmp	r3, #4
 8009134:	d11b      	bne.n	800916e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f06f 0204 	mvn.w	r2, #4
 800913e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f97b 	bl	8009450 <HAL_TIM_IC_CaptureCallback>
 800915a:	e005      	b.n	8009168 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f96d 	bl	800943c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f97e 	bl	8009464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	f003 0308 	and.w	r3, r3, #8
 8009178:	2b08      	cmp	r3, #8
 800917a:	d122      	bne.n	80091c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b08      	cmp	r3, #8
 8009188:	d11b      	bne.n	80091c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f06f 0208 	mvn.w	r2, #8
 8009192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2204      	movs	r2, #4
 8009198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f951 	bl	8009450 <HAL_TIM_IC_CaptureCallback>
 80091ae:	e005      	b.n	80091bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f943 	bl	800943c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f954 	bl	8009464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	f003 0310 	and.w	r3, r3, #16
 80091cc:	2b10      	cmp	r3, #16
 80091ce:	d122      	bne.n	8009216 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f003 0310 	and.w	r3, r3, #16
 80091da:	2b10      	cmp	r3, #16
 80091dc:	d11b      	bne.n	8009216 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f06f 0210 	mvn.w	r2, #16
 80091e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2208      	movs	r2, #8
 80091ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f927 	bl	8009450 <HAL_TIM_IC_CaptureCallback>
 8009202:	e005      	b.n	8009210 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f919 	bl	800943c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f92a 	bl	8009464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b01      	cmp	r3, #1
 8009222:	d10e      	bne.n	8009242 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b01      	cmp	r3, #1
 8009230:	d107      	bne.n	8009242 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f06f 0201 	mvn.w	r2, #1
 800923a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7f8 f8cb 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924c:	2b80      	cmp	r3, #128	; 0x80
 800924e:	d10e      	bne.n	800926e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925a:	2b80      	cmp	r3, #128	; 0x80
 800925c:	d107      	bne.n	800926e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 facf 	bl	800980c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b40      	cmp	r3, #64	; 0x40
 800927a:	d10e      	bne.n	800929a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b40      	cmp	r3, #64	; 0x40
 8009288:	d107      	bne.n	800929a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f8ef 	bl	8009478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d10e      	bne.n	80092c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d107      	bne.n	80092c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f06f 0220 	mvn.w	r2, #32
 80092be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fa99 	bl	80097f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <HAL_TIM_ConfigClockSource+0x18>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e0a6      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x166>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2202      	movs	r2, #2
 80092f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009304:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800930c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b40      	cmp	r3, #64	; 0x40
 800931c:	d067      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x120>
 800931e:	2b40      	cmp	r3, #64	; 0x40
 8009320:	d80b      	bhi.n	800933a <HAL_TIM_ConfigClockSource+0x6c>
 8009322:	2b10      	cmp	r3, #16
 8009324:	d073      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x140>
 8009326:	2b10      	cmp	r3, #16
 8009328:	d802      	bhi.n	8009330 <HAL_TIM_ConfigClockSource+0x62>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d06f      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800932e:	e078      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009330:	2b20      	cmp	r3, #32
 8009332:	d06c      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x140>
 8009334:	2b30      	cmp	r3, #48	; 0x30
 8009336:	d06a      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009338:	e073      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800933a:	2b70      	cmp	r3, #112	; 0x70
 800933c:	d00d      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x8c>
 800933e:	2b70      	cmp	r3, #112	; 0x70
 8009340:	d804      	bhi.n	800934c <HAL_TIM_ConfigClockSource+0x7e>
 8009342:	2b50      	cmp	r3, #80	; 0x50
 8009344:	d033      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0xe0>
 8009346:	2b60      	cmp	r3, #96	; 0x60
 8009348:	d041      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x100>
      break;
 800934a:	e06a      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800934c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009350:	d066      	beq.n	8009420 <HAL_TIM_ConfigClockSource+0x152>
 8009352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009356:	d017      	beq.n	8009388 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009358:	e063      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6899      	ldr	r1, [r3, #8]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f000 f9a9 	bl	80096c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800937c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	609a      	str	r2, [r3, #8]
      break;
 8009386:	e04c      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	6899      	ldr	r1, [r3, #8]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f000 f992 	bl	80096c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093aa:	609a      	str	r2, [r3, #8]
      break;
 80093ac:	e039      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6859      	ldr	r1, [r3, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f000 f906 	bl	80095cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2150      	movs	r1, #80	; 0x50
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f95f 	bl	800968a <TIM_ITRx_SetConfig>
      break;
 80093cc:	e029      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6859      	ldr	r1, [r3, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	461a      	mov	r2, r3
 80093dc:	f000 f925 	bl	800962a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2160      	movs	r1, #96	; 0x60
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f94f 	bl	800968a <TIM_ITRx_SetConfig>
      break;
 80093ec:	e019      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6859      	ldr	r1, [r3, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f000 f8e6 	bl	80095cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2140      	movs	r1, #64	; 0x40
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f93f 	bl	800968a <TIM_ITRx_SetConfig>
      break;
 800940c:	e009      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	4610      	mov	r0, r2
 800941a:	f000 f936 	bl	800968a <TIM_ITRx_SetConfig>
      break;
 800941e:	e000      	b.n	8009422 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009420:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a40      	ldr	r2, [pc, #256]	; (80095a0 <TIM_Base_SetConfig+0x114>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d013      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094aa:	d00f      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a3d      	ldr	r2, [pc, #244]	; (80095a4 <TIM_Base_SetConfig+0x118>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00b      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a3c      	ldr	r2, [pc, #240]	; (80095a8 <TIM_Base_SetConfig+0x11c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d007      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a3b      	ldr	r2, [pc, #236]	; (80095ac <TIM_Base_SetConfig+0x120>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d003      	beq.n	80094cc <TIM_Base_SetConfig+0x40>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a3a      	ldr	r2, [pc, #232]	; (80095b0 <TIM_Base_SetConfig+0x124>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d108      	bne.n	80094de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	4313      	orrs	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a2f      	ldr	r2, [pc, #188]	; (80095a0 <TIM_Base_SetConfig+0x114>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d02b      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ec:	d027      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a2c      	ldr	r2, [pc, #176]	; (80095a4 <TIM_Base_SetConfig+0x118>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d023      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a2b      	ldr	r2, [pc, #172]	; (80095a8 <TIM_Base_SetConfig+0x11c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d01f      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a2a      	ldr	r2, [pc, #168]	; (80095ac <TIM_Base_SetConfig+0x120>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d01b      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a29      	ldr	r2, [pc, #164]	; (80095b0 <TIM_Base_SetConfig+0x124>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d017      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a28      	ldr	r2, [pc, #160]	; (80095b4 <TIM_Base_SetConfig+0x128>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d013      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a27      	ldr	r2, [pc, #156]	; (80095b8 <TIM_Base_SetConfig+0x12c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d00f      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a26      	ldr	r2, [pc, #152]	; (80095bc <TIM_Base_SetConfig+0x130>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00b      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a25      	ldr	r2, [pc, #148]	; (80095c0 <TIM_Base_SetConfig+0x134>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d007      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a24      	ldr	r2, [pc, #144]	; (80095c4 <TIM_Base_SetConfig+0x138>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d003      	beq.n	800953e <TIM_Base_SetConfig+0xb2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a23      	ldr	r2, [pc, #140]	; (80095c8 <TIM_Base_SetConfig+0x13c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d108      	bne.n	8009550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	4313      	orrs	r3, r2
 800954e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	4313      	orrs	r3, r2
 800955c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	689a      	ldr	r2, [r3, #8]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <TIM_Base_SetConfig+0x114>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d003      	beq.n	8009584 <TIM_Base_SetConfig+0xf8>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a0c      	ldr	r2, [pc, #48]	; (80095b0 <TIM_Base_SetConfig+0x124>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d103      	bne.n	800958c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	615a      	str	r2, [r3, #20]
}
 8009592:	bf00      	nop
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	40010000 	.word	0x40010000
 80095a4:	40000400 	.word	0x40000400
 80095a8:	40000800 	.word	0x40000800
 80095ac:	40000c00 	.word	0x40000c00
 80095b0:	40010400 	.word	0x40010400
 80095b4:	40014000 	.word	0x40014000
 80095b8:	40014400 	.word	0x40014400
 80095bc:	40014800 	.word	0x40014800
 80095c0:	40001800 	.word	0x40001800
 80095c4:	40001c00 	.word	0x40001c00
 80095c8:	40002000 	.word	0x40002000

080095cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	f023 0201 	bic.w	r2, r3, #1
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	011b      	lsls	r3, r3, #4
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	4313      	orrs	r3, r2
 8009600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f023 030a 	bic.w	r3, r3, #10
 8009608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	621a      	str	r2, [r3, #32]
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800962a:	b480      	push	{r7}
 800962c:	b087      	sub	sp, #28
 800962e:	af00      	add	r7, sp, #0
 8009630:	60f8      	str	r0, [r7, #12]
 8009632:	60b9      	str	r1, [r7, #8]
 8009634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	f023 0210 	bic.w	r2, r3, #16
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	031b      	lsls	r3, r3, #12
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	4313      	orrs	r3, r2
 800965e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	f043 0307 	orr.w	r3, r3, #7
 80096ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	609a      	str	r2, [r3, #8]
}
 80096b4:	bf00      	nop
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	021a      	lsls	r2, r3, #8
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	431a      	orrs	r2, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	609a      	str	r2, [r3, #8]
}
 80096f4:	bf00      	nop
 80096f6:	371c      	adds	r7, #28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009710:	2b01      	cmp	r3, #1
 8009712:	d101      	bne.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009714:	2302      	movs	r3, #2
 8009716:	e05a      	b.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4313      	orrs	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a21      	ldr	r2, [pc, #132]	; (80097dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d022      	beq.n	80097a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009764:	d01d      	beq.n	80097a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a1d      	ldr	r2, [pc, #116]	; (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d018      	beq.n	80097a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a1b      	ldr	r2, [pc, #108]	; (80097e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d013      	beq.n	80097a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a1a      	ldr	r2, [pc, #104]	; (80097e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d00e      	beq.n	80097a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a18      	ldr	r2, [pc, #96]	; (80097ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d009      	beq.n	80097a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a17      	ldr	r2, [pc, #92]	; (80097f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d004      	beq.n	80097a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a15      	ldr	r2, [pc, #84]	; (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d10c      	bne.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	40010000 	.word	0x40010000
 80097e0:	40000400 	.word	0x40000400
 80097e4:	40000800 	.word	0x40000800
 80097e8:	40000c00 	.word	0x40000c00
 80097ec:	40010400 	.word	0x40010400
 80097f0:	40014000 	.word	0x40014000
 80097f4:	40001800 	.word	0x40001800

080097f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e03f      	b.n	80098b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7f8 f866 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2224      	movs	r2, #36	; 0x24
 8009850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f829 	bl	80098bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	691a      	ldr	r2, [r3, #16]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	695a      	ldr	r2, [r3, #20]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68da      	ldr	r2, [r3, #12]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2220      	movs	r2, #32
 80098a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80098fe:	f023 030c 	bic.w	r3, r3, #12
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	68f9      	ldr	r1, [r7, #12]
 8009908:	430b      	orrs	r3, r1
 800990a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	699a      	ldr	r2, [r3, #24]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	430a      	orrs	r2, r1
 8009920:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800992a:	f040 818b 	bne.w	8009c44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4ac1      	ldr	r2, [pc, #772]	; (8009c38 <UART_SetConfig+0x37c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d005      	beq.n	8009944 <UART_SetConfig+0x88>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4abf      	ldr	r2, [pc, #764]	; (8009c3c <UART_SetConfig+0x380>)
 800993e:	4293      	cmp	r3, r2
 8009940:	f040 80bd 	bne.w	8009abe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009944:	f7fe fb5e 	bl	8008004 <HAL_RCC_GetPCLK2Freq>
 8009948:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	461d      	mov	r5, r3
 800994e:	f04f 0600 	mov.w	r6, #0
 8009952:	46a8      	mov	r8, r5
 8009954:	46b1      	mov	r9, r6
 8009956:	eb18 0308 	adds.w	r3, r8, r8
 800995a:	eb49 0409 	adc.w	r4, r9, r9
 800995e:	4698      	mov	r8, r3
 8009960:	46a1      	mov	r9, r4
 8009962:	eb18 0805 	adds.w	r8, r8, r5
 8009966:	eb49 0906 	adc.w	r9, r9, r6
 800996a:	f04f 0100 	mov.w	r1, #0
 800996e:	f04f 0200 	mov.w	r2, #0
 8009972:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009976:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800997a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800997e:	4688      	mov	r8, r1
 8009980:	4691      	mov	r9, r2
 8009982:	eb18 0005 	adds.w	r0, r8, r5
 8009986:	eb49 0106 	adc.w	r1, r9, r6
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	461d      	mov	r5, r3
 8009990:	f04f 0600 	mov.w	r6, #0
 8009994:	196b      	adds	r3, r5, r5
 8009996:	eb46 0406 	adc.w	r4, r6, r6
 800999a:	461a      	mov	r2, r3
 800999c:	4623      	mov	r3, r4
 800999e:	f7f6 fc27 	bl	80001f0 <__aeabi_uldivmod>
 80099a2:	4603      	mov	r3, r0
 80099a4:	460c      	mov	r4, r1
 80099a6:	461a      	mov	r2, r3
 80099a8:	4ba5      	ldr	r3, [pc, #660]	; (8009c40 <UART_SetConfig+0x384>)
 80099aa:	fba3 2302 	umull	r2, r3, r3, r2
 80099ae:	095b      	lsrs	r3, r3, #5
 80099b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	461d      	mov	r5, r3
 80099b8:	f04f 0600 	mov.w	r6, #0
 80099bc:	46a9      	mov	r9, r5
 80099be:	46b2      	mov	sl, r6
 80099c0:	eb19 0309 	adds.w	r3, r9, r9
 80099c4:	eb4a 040a 	adc.w	r4, sl, sl
 80099c8:	4699      	mov	r9, r3
 80099ca:	46a2      	mov	sl, r4
 80099cc:	eb19 0905 	adds.w	r9, r9, r5
 80099d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80099d4:	f04f 0100 	mov.w	r1, #0
 80099d8:	f04f 0200 	mov.w	r2, #0
 80099dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099e8:	4689      	mov	r9, r1
 80099ea:	4692      	mov	sl, r2
 80099ec:	eb19 0005 	adds.w	r0, r9, r5
 80099f0:	eb4a 0106 	adc.w	r1, sl, r6
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	461d      	mov	r5, r3
 80099fa:	f04f 0600 	mov.w	r6, #0
 80099fe:	196b      	adds	r3, r5, r5
 8009a00:	eb46 0406 	adc.w	r4, r6, r6
 8009a04:	461a      	mov	r2, r3
 8009a06:	4623      	mov	r3, r4
 8009a08:	f7f6 fbf2 	bl	80001f0 <__aeabi_uldivmod>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	461a      	mov	r2, r3
 8009a12:	4b8b      	ldr	r3, [pc, #556]	; (8009c40 <UART_SetConfig+0x384>)
 8009a14:	fba3 1302 	umull	r1, r3, r3, r2
 8009a18:	095b      	lsrs	r3, r3, #5
 8009a1a:	2164      	movs	r1, #100	; 0x64
 8009a1c:	fb01 f303 	mul.w	r3, r1, r3
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	3332      	adds	r3, #50	; 0x32
 8009a26:	4a86      	ldr	r2, [pc, #536]	; (8009c40 <UART_SetConfig+0x384>)
 8009a28:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2c:	095b      	lsrs	r3, r3, #5
 8009a2e:	005b      	lsls	r3, r3, #1
 8009a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a34:	4498      	add	r8, r3
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	461d      	mov	r5, r3
 8009a3a:	f04f 0600 	mov.w	r6, #0
 8009a3e:	46a9      	mov	r9, r5
 8009a40:	46b2      	mov	sl, r6
 8009a42:	eb19 0309 	adds.w	r3, r9, r9
 8009a46:	eb4a 040a 	adc.w	r4, sl, sl
 8009a4a:	4699      	mov	r9, r3
 8009a4c:	46a2      	mov	sl, r4
 8009a4e:	eb19 0905 	adds.w	r9, r9, r5
 8009a52:	eb4a 0a06 	adc.w	sl, sl, r6
 8009a56:	f04f 0100 	mov.w	r1, #0
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a6a:	4689      	mov	r9, r1
 8009a6c:	4692      	mov	sl, r2
 8009a6e:	eb19 0005 	adds.w	r0, r9, r5
 8009a72:	eb4a 0106 	adc.w	r1, sl, r6
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	461d      	mov	r5, r3
 8009a7c:	f04f 0600 	mov.w	r6, #0
 8009a80:	196b      	adds	r3, r5, r5
 8009a82:	eb46 0406 	adc.w	r4, r6, r6
 8009a86:	461a      	mov	r2, r3
 8009a88:	4623      	mov	r3, r4
 8009a8a:	f7f6 fbb1 	bl	80001f0 <__aeabi_uldivmod>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	460c      	mov	r4, r1
 8009a92:	461a      	mov	r2, r3
 8009a94:	4b6a      	ldr	r3, [pc, #424]	; (8009c40 <UART_SetConfig+0x384>)
 8009a96:	fba3 1302 	umull	r1, r3, r3, r2
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	2164      	movs	r1, #100	; 0x64
 8009a9e:	fb01 f303 	mul.w	r3, r1, r3
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	3332      	adds	r3, #50	; 0x32
 8009aa8:	4a65      	ldr	r2, [pc, #404]	; (8009c40 <UART_SetConfig+0x384>)
 8009aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	f003 0207 	and.w	r2, r3, #7
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4442      	add	r2, r8
 8009aba:	609a      	str	r2, [r3, #8]
 8009abc:	e26f      	b.n	8009f9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009abe:	f7fe fa8d 	bl	8007fdc <HAL_RCC_GetPCLK1Freq>
 8009ac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	461d      	mov	r5, r3
 8009ac8:	f04f 0600 	mov.w	r6, #0
 8009acc:	46a8      	mov	r8, r5
 8009ace:	46b1      	mov	r9, r6
 8009ad0:	eb18 0308 	adds.w	r3, r8, r8
 8009ad4:	eb49 0409 	adc.w	r4, r9, r9
 8009ad8:	4698      	mov	r8, r3
 8009ada:	46a1      	mov	r9, r4
 8009adc:	eb18 0805 	adds.w	r8, r8, r5
 8009ae0:	eb49 0906 	adc.w	r9, r9, r6
 8009ae4:	f04f 0100 	mov.w	r1, #0
 8009ae8:	f04f 0200 	mov.w	r2, #0
 8009aec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009af0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009af4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009af8:	4688      	mov	r8, r1
 8009afa:	4691      	mov	r9, r2
 8009afc:	eb18 0005 	adds.w	r0, r8, r5
 8009b00:	eb49 0106 	adc.w	r1, r9, r6
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	461d      	mov	r5, r3
 8009b0a:	f04f 0600 	mov.w	r6, #0
 8009b0e:	196b      	adds	r3, r5, r5
 8009b10:	eb46 0406 	adc.w	r4, r6, r6
 8009b14:	461a      	mov	r2, r3
 8009b16:	4623      	mov	r3, r4
 8009b18:	f7f6 fb6a 	bl	80001f0 <__aeabi_uldivmod>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	461a      	mov	r2, r3
 8009b22:	4b47      	ldr	r3, [pc, #284]	; (8009c40 <UART_SetConfig+0x384>)
 8009b24:	fba3 2302 	umull	r2, r3, r3, r2
 8009b28:	095b      	lsrs	r3, r3, #5
 8009b2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	461d      	mov	r5, r3
 8009b32:	f04f 0600 	mov.w	r6, #0
 8009b36:	46a9      	mov	r9, r5
 8009b38:	46b2      	mov	sl, r6
 8009b3a:	eb19 0309 	adds.w	r3, r9, r9
 8009b3e:	eb4a 040a 	adc.w	r4, sl, sl
 8009b42:	4699      	mov	r9, r3
 8009b44:	46a2      	mov	sl, r4
 8009b46:	eb19 0905 	adds.w	r9, r9, r5
 8009b4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8009b4e:	f04f 0100 	mov.w	r1, #0
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b62:	4689      	mov	r9, r1
 8009b64:	4692      	mov	sl, r2
 8009b66:	eb19 0005 	adds.w	r0, r9, r5
 8009b6a:	eb4a 0106 	adc.w	r1, sl, r6
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	461d      	mov	r5, r3
 8009b74:	f04f 0600 	mov.w	r6, #0
 8009b78:	196b      	adds	r3, r5, r5
 8009b7a:	eb46 0406 	adc.w	r4, r6, r6
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4623      	mov	r3, r4
 8009b82:	f7f6 fb35 	bl	80001f0 <__aeabi_uldivmod>
 8009b86:	4603      	mov	r3, r0
 8009b88:	460c      	mov	r4, r1
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	4b2c      	ldr	r3, [pc, #176]	; (8009c40 <UART_SetConfig+0x384>)
 8009b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	2164      	movs	r1, #100	; 0x64
 8009b96:	fb01 f303 	mul.w	r3, r1, r3
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	3332      	adds	r3, #50	; 0x32
 8009ba0:	4a27      	ldr	r2, [pc, #156]	; (8009c40 <UART_SetConfig+0x384>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	095b      	lsrs	r3, r3, #5
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009bae:	4498      	add	r8, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	461d      	mov	r5, r3
 8009bb4:	f04f 0600 	mov.w	r6, #0
 8009bb8:	46a9      	mov	r9, r5
 8009bba:	46b2      	mov	sl, r6
 8009bbc:	eb19 0309 	adds.w	r3, r9, r9
 8009bc0:	eb4a 040a 	adc.w	r4, sl, sl
 8009bc4:	4699      	mov	r9, r3
 8009bc6:	46a2      	mov	sl, r4
 8009bc8:	eb19 0905 	adds.w	r9, r9, r5
 8009bcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8009bd0:	f04f 0100 	mov.w	r1, #0
 8009bd4:	f04f 0200 	mov.w	r2, #0
 8009bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009be0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009be4:	4689      	mov	r9, r1
 8009be6:	4692      	mov	sl, r2
 8009be8:	eb19 0005 	adds.w	r0, r9, r5
 8009bec:	eb4a 0106 	adc.w	r1, sl, r6
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	461d      	mov	r5, r3
 8009bf6:	f04f 0600 	mov.w	r6, #0
 8009bfa:	196b      	adds	r3, r5, r5
 8009bfc:	eb46 0406 	adc.w	r4, r6, r6
 8009c00:	461a      	mov	r2, r3
 8009c02:	4623      	mov	r3, r4
 8009c04:	f7f6 faf4 	bl	80001f0 <__aeabi_uldivmod>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <UART_SetConfig+0x384>)
 8009c10:	fba3 1302 	umull	r1, r3, r3, r2
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	2164      	movs	r1, #100	; 0x64
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	3332      	adds	r3, #50	; 0x32
 8009c22:	4a07      	ldr	r2, [pc, #28]	; (8009c40 <UART_SetConfig+0x384>)
 8009c24:	fba2 2303 	umull	r2, r3, r2, r3
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	f003 0207 	and.w	r2, r3, #7
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4442      	add	r2, r8
 8009c34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009c36:	e1b2      	b.n	8009f9e <UART_SetConfig+0x6e2>
 8009c38:	40011000 	.word	0x40011000
 8009c3c:	40011400 	.word	0x40011400
 8009c40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4ad7      	ldr	r2, [pc, #860]	; (8009fa8 <UART_SetConfig+0x6ec>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d005      	beq.n	8009c5a <UART_SetConfig+0x39e>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4ad6      	ldr	r2, [pc, #856]	; (8009fac <UART_SetConfig+0x6f0>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	f040 80d1 	bne.w	8009dfc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c5a:	f7fe f9d3 	bl	8008004 <HAL_RCC_GetPCLK2Freq>
 8009c5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	469a      	mov	sl, r3
 8009c64:	f04f 0b00 	mov.w	fp, #0
 8009c68:	46d0      	mov	r8, sl
 8009c6a:	46d9      	mov	r9, fp
 8009c6c:	eb18 0308 	adds.w	r3, r8, r8
 8009c70:	eb49 0409 	adc.w	r4, r9, r9
 8009c74:	4698      	mov	r8, r3
 8009c76:	46a1      	mov	r9, r4
 8009c78:	eb18 080a 	adds.w	r8, r8, sl
 8009c7c:	eb49 090b 	adc.w	r9, r9, fp
 8009c80:	f04f 0100 	mov.w	r1, #0
 8009c84:	f04f 0200 	mov.w	r2, #0
 8009c88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c94:	4688      	mov	r8, r1
 8009c96:	4691      	mov	r9, r2
 8009c98:	eb1a 0508 	adds.w	r5, sl, r8
 8009c9c:	eb4b 0609 	adc.w	r6, fp, r9
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f04f 0200 	mov.w	r2, #0
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	f04f 0400 	mov.w	r4, #0
 8009cb2:	0094      	lsls	r4, r2, #2
 8009cb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009cb8:	008b      	lsls	r3, r1, #2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	4623      	mov	r3, r4
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	f7f6 fa95 	bl	80001f0 <__aeabi_uldivmod>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	460c      	mov	r4, r1
 8009cca:	461a      	mov	r2, r3
 8009ccc:	4bb8      	ldr	r3, [pc, #736]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009cce:	fba3 2302 	umull	r2, r3, r3, r2
 8009cd2:	095b      	lsrs	r3, r3, #5
 8009cd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	469b      	mov	fp, r3
 8009cdc:	f04f 0c00 	mov.w	ip, #0
 8009ce0:	46d9      	mov	r9, fp
 8009ce2:	46e2      	mov	sl, ip
 8009ce4:	eb19 0309 	adds.w	r3, r9, r9
 8009ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8009cec:	4699      	mov	r9, r3
 8009cee:	46a2      	mov	sl, r4
 8009cf0:	eb19 090b 	adds.w	r9, r9, fp
 8009cf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009cf8:	f04f 0100 	mov.w	r1, #0
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d0c:	4689      	mov	r9, r1
 8009d0e:	4692      	mov	sl, r2
 8009d10:	eb1b 0509 	adds.w	r5, fp, r9
 8009d14:	eb4c 060a 	adc.w	r6, ip, sl
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f04f 0200 	mov.w	r2, #0
 8009d22:	f04f 0300 	mov.w	r3, #0
 8009d26:	f04f 0400 	mov.w	r4, #0
 8009d2a:	0094      	lsls	r4, r2, #2
 8009d2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d30:	008b      	lsls	r3, r1, #2
 8009d32:	461a      	mov	r2, r3
 8009d34:	4623      	mov	r3, r4
 8009d36:	4628      	mov	r0, r5
 8009d38:	4631      	mov	r1, r6
 8009d3a:	f7f6 fa59 	bl	80001f0 <__aeabi_uldivmod>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	460c      	mov	r4, r1
 8009d42:	461a      	mov	r2, r3
 8009d44:	4b9a      	ldr	r3, [pc, #616]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009d46:	fba3 1302 	umull	r1, r3, r3, r2
 8009d4a:	095b      	lsrs	r3, r3, #5
 8009d4c:	2164      	movs	r1, #100	; 0x64
 8009d4e:	fb01 f303 	mul.w	r3, r1, r3
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	3332      	adds	r3, #50	; 0x32
 8009d58:	4a95      	ldr	r2, [pc, #596]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5e:	095b      	lsrs	r3, r3, #5
 8009d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d64:	4498      	add	r8, r3
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	469b      	mov	fp, r3
 8009d6a:	f04f 0c00 	mov.w	ip, #0
 8009d6e:	46d9      	mov	r9, fp
 8009d70:	46e2      	mov	sl, ip
 8009d72:	eb19 0309 	adds.w	r3, r9, r9
 8009d76:	eb4a 040a 	adc.w	r4, sl, sl
 8009d7a:	4699      	mov	r9, r3
 8009d7c:	46a2      	mov	sl, r4
 8009d7e:	eb19 090b 	adds.w	r9, r9, fp
 8009d82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009d86:	f04f 0100 	mov.w	r1, #0
 8009d8a:	f04f 0200 	mov.w	r2, #0
 8009d8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d9a:	4689      	mov	r9, r1
 8009d9c:	4692      	mov	sl, r2
 8009d9e:	eb1b 0509 	adds.w	r5, fp, r9
 8009da2:	eb4c 060a 	adc.w	r6, ip, sl
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	4619      	mov	r1, r3
 8009dac:	f04f 0200 	mov.w	r2, #0
 8009db0:	f04f 0300 	mov.w	r3, #0
 8009db4:	f04f 0400 	mov.w	r4, #0
 8009db8:	0094      	lsls	r4, r2, #2
 8009dba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009dbe:	008b      	lsls	r3, r1, #2
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	f7f6 fa12 	bl	80001f0 <__aeabi_uldivmod>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4b77      	ldr	r3, [pc, #476]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8009dd8:	095b      	lsrs	r3, r3, #5
 8009dda:	2164      	movs	r1, #100	; 0x64
 8009ddc:	fb01 f303 	mul.w	r3, r1, r3
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	3332      	adds	r3, #50	; 0x32
 8009de6:	4a72      	ldr	r2, [pc, #456]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009de8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dec:	095b      	lsrs	r3, r3, #5
 8009dee:	f003 020f 	and.w	r2, r3, #15
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4442      	add	r2, r8
 8009df8:	609a      	str	r2, [r3, #8]
 8009dfa:	e0d0      	b.n	8009f9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009dfc:	f7fe f8ee 	bl	8007fdc <HAL_RCC_GetPCLK1Freq>
 8009e00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	469a      	mov	sl, r3
 8009e06:	f04f 0b00 	mov.w	fp, #0
 8009e0a:	46d0      	mov	r8, sl
 8009e0c:	46d9      	mov	r9, fp
 8009e0e:	eb18 0308 	adds.w	r3, r8, r8
 8009e12:	eb49 0409 	adc.w	r4, r9, r9
 8009e16:	4698      	mov	r8, r3
 8009e18:	46a1      	mov	r9, r4
 8009e1a:	eb18 080a 	adds.w	r8, r8, sl
 8009e1e:	eb49 090b 	adc.w	r9, r9, fp
 8009e22:	f04f 0100 	mov.w	r1, #0
 8009e26:	f04f 0200 	mov.w	r2, #0
 8009e2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009e2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009e32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009e36:	4688      	mov	r8, r1
 8009e38:	4691      	mov	r9, r2
 8009e3a:	eb1a 0508 	adds.w	r5, sl, r8
 8009e3e:	eb4b 0609 	adc.w	r6, fp, r9
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	4619      	mov	r1, r3
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	f04f 0300 	mov.w	r3, #0
 8009e50:	f04f 0400 	mov.w	r4, #0
 8009e54:	0094      	lsls	r4, r2, #2
 8009e56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009e5a:	008b      	lsls	r3, r1, #2
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	4623      	mov	r3, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	4631      	mov	r1, r6
 8009e64:	f7f6 f9c4 	bl	80001f0 <__aeabi_uldivmod>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4b50      	ldr	r3, [pc, #320]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009e70:	fba3 2302 	umull	r2, r3, r3, r2
 8009e74:	095b      	lsrs	r3, r3, #5
 8009e76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	469b      	mov	fp, r3
 8009e7e:	f04f 0c00 	mov.w	ip, #0
 8009e82:	46d9      	mov	r9, fp
 8009e84:	46e2      	mov	sl, ip
 8009e86:	eb19 0309 	adds.w	r3, r9, r9
 8009e8a:	eb4a 040a 	adc.w	r4, sl, sl
 8009e8e:	4699      	mov	r9, r3
 8009e90:	46a2      	mov	sl, r4
 8009e92:	eb19 090b 	adds.w	r9, r9, fp
 8009e96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009e9a:	f04f 0100 	mov.w	r1, #0
 8009e9e:	f04f 0200 	mov.w	r2, #0
 8009ea2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ea6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009eaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009eae:	4689      	mov	r9, r1
 8009eb0:	4692      	mov	sl, r2
 8009eb2:	eb1b 0509 	adds.w	r5, fp, r9
 8009eb6:	eb4c 060a 	adc.w	r6, ip, sl
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f04f 0200 	mov.w	r2, #0
 8009ec4:	f04f 0300 	mov.w	r3, #0
 8009ec8:	f04f 0400 	mov.w	r4, #0
 8009ecc:	0094      	lsls	r4, r2, #2
 8009ece:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ed2:	008b      	lsls	r3, r1, #2
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	4623      	mov	r3, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	4631      	mov	r1, r6
 8009edc:	f7f6 f988 	bl	80001f0 <__aeabi_uldivmod>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	4b32      	ldr	r3, [pc, #200]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8009eec:	095b      	lsrs	r3, r3, #5
 8009eee:	2164      	movs	r1, #100	; 0x64
 8009ef0:	fb01 f303 	mul.w	r3, r1, r3
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	3332      	adds	r3, #50	; 0x32
 8009efa:	4a2d      	ldr	r2, [pc, #180]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009efc:	fba2 2303 	umull	r2, r3, r2, r3
 8009f00:	095b      	lsrs	r3, r3, #5
 8009f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f06:	4498      	add	r8, r3
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	469b      	mov	fp, r3
 8009f0c:	f04f 0c00 	mov.w	ip, #0
 8009f10:	46d9      	mov	r9, fp
 8009f12:	46e2      	mov	sl, ip
 8009f14:	eb19 0309 	adds.w	r3, r9, r9
 8009f18:	eb4a 040a 	adc.w	r4, sl, sl
 8009f1c:	4699      	mov	r9, r3
 8009f1e:	46a2      	mov	sl, r4
 8009f20:	eb19 090b 	adds.w	r9, r9, fp
 8009f24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f28:	f04f 0100 	mov.w	r1, #0
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f3c:	4689      	mov	r9, r1
 8009f3e:	4692      	mov	sl, r2
 8009f40:	eb1b 0509 	adds.w	r5, fp, r9
 8009f44:	eb4c 060a 	adc.w	r6, ip, sl
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	f04f 0200 	mov.w	r2, #0
 8009f52:	f04f 0300 	mov.w	r3, #0
 8009f56:	f04f 0400 	mov.w	r4, #0
 8009f5a:	0094      	lsls	r4, r2, #2
 8009f5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f60:	008b      	lsls	r3, r1, #2
 8009f62:	461a      	mov	r2, r3
 8009f64:	4623      	mov	r3, r4
 8009f66:	4628      	mov	r0, r5
 8009f68:	4631      	mov	r1, r6
 8009f6a:	f7f6 f941 	bl	80001f0 <__aeabi_uldivmod>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	461a      	mov	r2, r3
 8009f74:	4b0e      	ldr	r3, [pc, #56]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009f76:	fba3 1302 	umull	r1, r3, r3, r2
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	2164      	movs	r1, #100	; 0x64
 8009f7e:	fb01 f303 	mul.w	r3, r1, r3
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	011b      	lsls	r3, r3, #4
 8009f86:	3332      	adds	r3, #50	; 0x32
 8009f88:	4a09      	ldr	r2, [pc, #36]	; (8009fb0 <UART_SetConfig+0x6f4>)
 8009f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f8e:	095b      	lsrs	r3, r3, #5
 8009f90:	f003 020f 	and.w	r2, r3, #15
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4442      	add	r2, r8
 8009f9a:	609a      	str	r2, [r3, #8]
}
 8009f9c:	e7ff      	b.n	8009f9e <UART_SetConfig+0x6e2>
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	40011000 	.word	0x40011000
 8009fac:	40011400 	.word	0x40011400
 8009fb0:	51eb851f 	.word	0x51eb851f

08009fb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d029      	beq.n	800a022 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009fde:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009fe8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009fee:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009ff4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009ffa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a000:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a006:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a00c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a012:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	e034      	b.n	800a08c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a02e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a038:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a03e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a052:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a056:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a060:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a066:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a06c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a072:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a078:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b087      	sub	sp, #28
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d02e      	beq.n	800a112 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a0c0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a0d0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a0da:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a0e4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a0ee:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a0f8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a102:	4313      	orrs	r3, r2
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	4313      	orrs	r3, r2
 800a108:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	609a      	str	r2, [r3, #8]
 800a110:	e03b      	b.n	800a18a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a11e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a122:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	3b01      	subs	r3, #1
 800a12a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	3b01      	subs	r3, #1
 800a132:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a134:	4313      	orrs	r3, r2
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	4313      	orrs	r3, r2
 800a13a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a148:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	3b01      	subs	r3, #1
 800a156:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a158:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	3b01      	subs	r3, #1
 800a160:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a162:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	3b01      	subs	r3, #1
 800a16a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a16c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	3b01      	subs	r3, #1
 800a174:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a176:	4313      	orrs	r3, r2
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	371c      	adds	r7, #28
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1b4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a1be:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a1d0:	f7f9 fb12 	bl	80037f8 <HAL_GetTick>
 800a1d4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a1d6:	e010      	b.n	800a1fa <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d00c      	beq.n	800a1fa <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d007      	beq.n	800a1f6 <FMC_SDRAM_SendCommand+0x5e>
 800a1e6:	f7f9 fb07 	bl	80037f8 <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d201      	bcs.n	800a1fa <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e006      	b.n	800a208 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	f003 0320 	and.w	r3, r3, #32
 800a202:	2b20      	cmp	r3, #32
 800a204:	d0e8      	beq.n	800a1d8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	695a      	ldr	r2, [r3, #20]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f043 0201 	orr.w	r2, r3, #1
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f023 0201 	bic.w	r2, r3, #1
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
	...

0800a27c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	019b      	lsls	r3, r3, #6
 800a28e:	f043 0220 	orr.w	r2, r3, #32
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3301      	adds	r3, #1
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4a09      	ldr	r2, [pc, #36]	; (800a2c4 <USB_FlushTxFifo+0x48>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d901      	bls.n	800a2a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e006      	b.n	800a2b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	f003 0320 	and.w	r3, r3, #32
 800a2b0:	2b20      	cmp	r3, #32
 800a2b2:	d0f0      	beq.n	800a296 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	00030d40 	.word	0x00030d40

0800a2c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2210      	movs	r2, #16
 800a2d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4a09      	ldr	r2, [pc, #36]	; (800a308 <USB_FlushRxFifo+0x40>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d901      	bls.n	800a2ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e006      	b.n	800a2fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	f003 0310 	and.w	r3, r3, #16
 800a2f4:	2b10      	cmp	r3, #16
 800a2f6:	d0f0      	beq.n	800a2da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	00030d40 	.word	0x00030d40

0800a30c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b089      	sub	sp, #36	; 0x24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a322:	88fb      	ldrh	r3, [r7, #6]
 800a324:	3303      	adds	r3, #3
 800a326:	089b      	lsrs	r3, r3, #2
 800a328:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a32a:	2300      	movs	r3, #0
 800a32c:	61bb      	str	r3, [r7, #24]
 800a32e:	e00b      	b.n	800a348 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	3304      	adds	r3, #4
 800a340:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	3301      	adds	r3, #1
 800a346:	61bb      	str	r3, [r7, #24]
 800a348:	69ba      	ldr	r2, [r7, #24]
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d3ef      	bcc.n	800a330 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a350:	69fb      	ldr	r3, [r7, #28]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3724      	adds	r7, #36	; 0x24
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a35e:	b480      	push	{r7}
 800a360:	b085      	sub	sp, #20
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4013      	ands	r3, r2
 800a374:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a376:	68fb      	ldr	r3, [r7, #12]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	f003 0301 	and.w	r3, r3, #1
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3be:	f023 0303 	bic.w	r3, r3, #3
 800a3c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d107      	bne.n	800a3f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a3ee:	6053      	str	r3, [r2, #4]
 800a3f0:	e009      	b.n	800a406 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a3f2:	78fb      	ldrb	r3, [r7, #3]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d106      	bne.n	800a406 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3fe:	461a      	mov	r2, r3
 800a400:	f241 7370 	movw	r3, #6000	; 0x1770
 800a404:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	b29b      	uxth	r3, r3
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a436:	b480      	push	{r7}
 800a438:	b087      	sub	sp, #28
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a446:	78fb      	ldrb	r3, [r7, #3]
 800a448:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	015a      	lsls	r2, r3, #5
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	4413      	add	r3, r2
 800a456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	0c9b      	lsrs	r3, r3, #18
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <USB_HC_Halt+0x3a>
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d16c      	bne.n	800a54a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	4413      	add	r3, r2
 800a478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	0151      	lsls	r1, r2, #5
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	440a      	add	r2, r1
 800a486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a48a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a48e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d143      	bne.n	800a524 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	0151      	lsls	r1, r2, #5
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	440a      	add	r2, r1
 800a4b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	0151      	lsls	r1, r2, #5
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	440a      	add	r2, r1
 800a4d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4fa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	3301      	adds	r3, #1
 800a500:	617b      	str	r3, [r7, #20]
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a508:	d81d      	bhi.n	800a546 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4413      	add	r3, r2
 800a512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a51c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a520:	d0ec      	beq.n	800a4fc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a522:	e080      	b.n	800a626 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	0151      	lsls	r1, r2, #5
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	440a      	add	r2, r1
 800a53a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a53e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a542:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a544:	e06f      	b.n	800a626 <USB_HC_Halt+0x1f0>
          break;
 800a546:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a548:	e06d      	b.n	800a626 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	4413      	add	r3, r2
 800a552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	0151      	lsls	r1, r2, #5
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	440a      	add	r2, r1
 800a560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a568:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d143      	bne.n	800a602 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	4413      	add	r3, r2
 800a582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	0151      	lsls	r1, r2, #5
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	440a      	add	r2, r1
 800a590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a598:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	0151      	lsls	r1, r2, #5
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	440a      	add	r2, r1
 800a5b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	0151      	lsls	r1, r2, #5
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	440a      	add	r2, r1
 800a5d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5d8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5e6:	d81d      	bhi.n	800a624 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5fe:	d0ec      	beq.n	800a5da <USB_HC_Halt+0x1a4>
 800a600:	e011      	b.n	800a626 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	440a      	add	r2, r1
 800a618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a61c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a620:	6013      	str	r3, [r2, #0]
 800a622:	e000      	b.n	800a626 <USB_HC_Halt+0x1f0>
          break;
 800a624:	bf00      	nop
    }
  }

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	371c      	adds	r7, #28
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff fe07 	bl	800a258 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a64a:	2110      	movs	r1, #16
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff fe15 	bl	800a27c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff fe38 	bl	800a2c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a658:	2300      	movs	r3, #0
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	e01f      	b.n	800a69e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4413      	add	r3, r2
 800a666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a674:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a67c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a684:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a692:	461a      	mov	r2, r3
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	3301      	adds	r3, #1
 800a69c:	613b      	str	r3, [r7, #16]
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	2b0f      	cmp	r3, #15
 800a6a2:	d9dc      	bls.n	800a65e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	e034      	b.n	800a714 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6de:	461a      	mov	r2, r3
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	617b      	str	r3, [r7, #20]
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6f0:	d80c      	bhi.n	800a70c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a708:	d0ec      	beq.n	800a6e4 <USB_StopHost+0xb0>
 800a70a:	e000      	b.n	800a70e <USB_StopHost+0xda>
        break;
 800a70c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	3301      	adds	r3, #1
 800a712:	613b      	str	r3, [r7, #16]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2b0f      	cmp	r3, #15
 800a718:	d9c7      	bls.n	800a6aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a720:	461a      	mov	r2, r3
 800a722:	f04f 33ff 	mov.w	r3, #4294967295
 800a726:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f04f 32ff 	mov.w	r2, #4294967295
 800a72e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff fd80 	bl	800a236 <USB_EnableGlobalInt>

  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f804 	bl	800a764 <USBH_HandleSof>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b0b      	cmp	r3, #11
 800a774:	d10a      	bne.n	800a78c <USBH_HandleSof+0x28>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d005      	beq.n	800a78c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	4798      	blx	r3
  }
}
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	f000 f8ae 	bl	800a91c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a7c0:	bf00      	nop
}
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a7d8:	bf00      	nop
}
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a818:	2200      	movs	r2, #0
 800a81a:	4619      	mov	r1, r3
 800a81c:	f000 f87e 	bl	800a91c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 f902 	bl	800ba54 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	791b      	ldrb	r3, [r3, #4]
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f830 	bl	800a8bc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	795b      	ldrb	r3, [r3, #5]
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f82a 	bl	800a8bc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a87c:	2200      	movs	r2, #0
 800a87e:	4619      	mov	r1, r3
 800a880:	f000 f84c 	bl	800a91c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	f000 f835 	bl	800a91c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a8c8:	78fb      	ldrb	r3, [r7, #3]
 800a8ca:	2b0a      	cmp	r3, #10
 800a8cc:	d80d      	bhi.n	800a8ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a8ce:	78fb      	ldrb	r3, [r7, #3]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	33e0      	adds	r3, #224	; 0xe0
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a8e0:	6879      	ldr	r1, [r7, #4]
 800a8e2:	33e0      	adds	r3, #224	; 0xe0
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	440b      	add	r3, r1
 800a8e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8fe:	f3ef 8305 	mrs	r3, IPSR
 800a902:	607b      	str	r3, [r7, #4]
  return(result);
 800a904:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a906:	2b00      	cmp	r3, #0
 800a908:	bf14      	ite	ne
 800a90a:	2301      	movne	r3, #1
 800a90c:	2300      	moveq	r3, #0
 800a90e:	b2db      	uxtb	r3, r3
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a928:	2300      	movs	r3, #0
 800a92a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <osMessagePut+0x1e>
    ticks = 1;
 800a936:	2301      	movs	r3, #1
 800a938:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a93a:	f7ff ffdd 	bl	800a8f8 <inHandlerMode>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d018      	beq.n	800a976 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a944:	f107 0210 	add.w	r2, r7, #16
 800a948:	f107 0108 	add.w	r1, r7, #8
 800a94c:	2300      	movs	r3, #0
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 f9a6 	bl	800aca0 <xQueueGenericSendFromISR>
 800a954:	4603      	mov	r3, r0
 800a956:	2b01      	cmp	r3, #1
 800a958:	d001      	beq.n	800a95e <osMessagePut+0x42>
      return osErrorOS;
 800a95a:	23ff      	movs	r3, #255	; 0xff
 800a95c:	e018      	b.n	800a990 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d014      	beq.n	800a98e <osMessagePut+0x72>
 800a964:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <osMessagePut+0x7c>)
 800a966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	e00b      	b.n	800a98e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a976:	f107 0108 	add.w	r1, r7, #8
 800a97a:	2300      	movs	r3, #0
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f000 f894 	bl	800aaac <xQueueGenericSend>
 800a984:	4603      	mov	r3, r0
 800a986:	2b01      	cmp	r3, #1
 800a988:	d001      	beq.n	800a98e <osMessagePut+0x72>
      return osErrorOS;
 800a98a:	23ff      	movs	r3, #255	; 0xff
 800a98c:	e000      	b.n	800a990 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	e000ed04 	.word	0xe000ed04

0800a99c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	689a      	ldr	r2, [r3, #8]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	1c5a      	adds	r2, r3, #1
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	601a      	str	r2, [r3, #0]
}
 800a9d8:	bf00      	nop
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fa:	d103      	bne.n	800aa04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	60fb      	str	r3, [r7, #12]
 800aa02:	e00c      	b.n	800aa1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3308      	adds	r3, #8
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	e002      	b.n	800aa12 <vListInsert+0x2e>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	60fb      	str	r3, [r7, #12]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d2f6      	bcs.n	800aa0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]
}
 800aa4a:	bf00      	nop
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa56:	b480      	push	{r7}
 800aa58:	b085      	sub	sp, #20
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6892      	ldr	r2, [r2, #8]
 800aa6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	6852      	ldr	r2, [r2, #4]
 800aa76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d103      	bne.n	800aa8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	1e5a      	subs	r2, r3, #1
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
	...

0800aaac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08e      	sub	sp, #56	; 0x38
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aaba:	2300      	movs	r3, #0
 800aabc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d109      	bne.n	800aadc <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aada:	e7fe      	b.n	800aada <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d103      	bne.n	800aaea <xQueueGenericSend+0x3e>
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <xQueueGenericSend+0x42>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <xQueueGenericSend+0x44>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d109      	bne.n	800ab08 <xQueueGenericSend+0x5c>
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	627b      	str	r3, [r7, #36]	; 0x24
 800ab06:	e7fe      	b.n	800ab06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d103      	bne.n	800ab16 <xQueueGenericSend+0x6a>
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <xQueueGenericSend+0x6e>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <xQueueGenericSend+0x70>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d109      	bne.n	800ab34 <xQueueGenericSend+0x88>
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	623b      	str	r3, [r7, #32]
 800ab32:	e7fe      	b.n	800ab32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab34:	f000 fd26 	bl	800b584 <xTaskGetSchedulerState>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d102      	bne.n	800ab44 <xQueueGenericSend+0x98>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <xQueueGenericSend+0x9c>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e000      	b.n	800ab4a <xQueueGenericSend+0x9e>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <xQueueGenericSend+0xb6>
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	61fb      	str	r3, [r7, #28]
 800ab60:	e7fe      	b.n	800ab60 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab62:	f000 fe31 	bl	800b7c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d302      	bcc.n	800ab78 <xQueueGenericSend+0xcc>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d129      	bne.n	800abcc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	68b9      	ldr	r1, [r7, #8]
 800ab7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab7e:	f000 f923 	bl	800adc8 <prvCopyDataToQueue>
 800ab82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d010      	beq.n	800abae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	3324      	adds	r3, #36	; 0x24
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 fbf3 	bl	800b37c <xTaskRemoveFromEventList>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d013      	beq.n	800abc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab9c:	4b3f      	ldr	r3, [pc, #252]	; (800ac9c <xQueueGenericSend+0x1f0>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	e00a      	b.n	800abc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d007      	beq.n	800abc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abb4:	4b39      	ldr	r3, [pc, #228]	; (800ac9c <xQueueGenericSend+0x1f0>)
 800abb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abc4:	f000 fe2e 	bl	800b824 <vPortExitCritical>
				return pdPASS;
 800abc8:	2301      	movs	r3, #1
 800abca:	e063      	b.n	800ac94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d103      	bne.n	800abda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abd2:	f000 fe27 	bl	800b824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abd6:	2300      	movs	r3, #0
 800abd8:	e05c      	b.n	800ac94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abe0:	f107 0314 	add.w	r3, r7, #20
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 fc2b 	bl	800b440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abea:	2301      	movs	r3, #1
 800abec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abee:	f000 fe19 	bl	800b824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abf2:	f000 f9bd 	bl	800af70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abf6:	f000 fde7 	bl	800b7c8 <vPortEnterCritical>
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac00:	b25b      	sxtb	r3, r3
 800ac02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac06:	d103      	bne.n	800ac10 <xQueueGenericSend+0x164>
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac16:	b25b      	sxtb	r3, r3
 800ac18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1c:	d103      	bne.n	800ac26 <xQueueGenericSend+0x17a>
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac26:	f000 fdfd 	bl	800b824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac2a:	1d3a      	adds	r2, r7, #4
 800ac2c:	f107 0314 	add.w	r3, r7, #20
 800ac30:	4611      	mov	r1, r2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fc1a 	bl	800b46c <xTaskCheckForTimeOut>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d124      	bne.n	800ac88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac40:	f000 f97e 	bl	800af40 <prvIsQueueFull>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d018      	beq.n	800ac7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	3310      	adds	r3, #16
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	4611      	mov	r1, r2
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fb6e 	bl	800b334 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac5a:	f000 f91f 	bl	800ae9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac5e:	f000 f995 	bl	800af8c <xTaskResumeAll>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f47f af7c 	bne.w	800ab62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ac6a:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <xQueueGenericSend+0x1f0>)
 800ac6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	e772      	b.n	800ab62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac7e:	f000 f90d 	bl	800ae9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac82:	f000 f983 	bl	800af8c <xTaskResumeAll>
 800ac86:	e76c      	b.n	800ab62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac8a:	f000 f907 	bl	800ae9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac8e:	f000 f97d 	bl	800af8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3738      	adds	r7, #56	; 0x38
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	e000ed04 	.word	0xe000ed04

0800aca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b08e      	sub	sp, #56	; 0x38
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d109      	bne.n	800accc <xQueueGenericSendFromISR+0x2c>
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	627b      	str	r3, [r7, #36]	; 0x24
 800acca:	e7fe      	b.n	800acca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d103      	bne.n	800acda <xQueueGenericSendFromISR+0x3a>
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <xQueueGenericSendFromISR+0x3e>
 800acda:	2301      	movs	r3, #1
 800acdc:	e000      	b.n	800ace0 <xQueueGenericSendFromISR+0x40>
 800acde:	2300      	movs	r3, #0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d109      	bne.n	800acf8 <xQueueGenericSendFromISR+0x58>
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	623b      	str	r3, [r7, #32]
 800acf6:	e7fe      	b.n	800acf6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d103      	bne.n	800ad06 <xQueueGenericSendFromISR+0x66>
 800acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d101      	bne.n	800ad0a <xQueueGenericSendFromISR+0x6a>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e000      	b.n	800ad0c <xQueueGenericSendFromISR+0x6c>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <xQueueGenericSendFromISR+0x84>
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	61fb      	str	r3, [r7, #28]
 800ad22:	e7fe      	b.n	800ad22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad24:	f000 fe00 	bl	800b928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad28:	f3ef 8211 	mrs	r2, BASEPRI
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	61ba      	str	r2, [r7, #24]
 800ad3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d302      	bcc.n	800ad56 <xQueueGenericSendFromISR+0xb6>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d12c      	bne.n	800adb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	68b9      	ldr	r1, [r7, #8]
 800ad64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad66:	f000 f82f 	bl	800adc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ad6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad72:	d112      	bne.n	800ad9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d016      	beq.n	800adaa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	3324      	adds	r3, #36	; 0x24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 fafb 	bl	800b37c <xTaskRemoveFromEventList>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00e      	beq.n	800adaa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00b      	beq.n	800adaa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	e007      	b.n	800adaa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad9e:	3301      	adds	r3, #1
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	b25a      	sxtb	r2, r3
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800adaa:	2301      	movs	r3, #1
 800adac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800adae:	e001      	b.n	800adb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	637b      	str	r3, [r7, #52]	; 0x34
 800adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3738      	adds	r7, #56	; 0x38
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800add4:	2300      	movs	r3, #0
 800add6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800addc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10d      	bne.n	800ae02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d14d      	bne.n	800ae8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fbe4 	bl	800b5c0 <xTaskPriorityDisinherit>
 800adf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	609a      	str	r2, [r3, #8]
 800ae00:	e043      	b.n	800ae8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d119      	bne.n	800ae3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6858      	ldr	r0, [r3, #4]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae10:	461a      	mov	r2, r3
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	f000 fe98 	bl	800bb48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae20:	441a      	add	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d32b      	bcc.n	800ae8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	605a      	str	r2, [r3, #4]
 800ae3a:	e026      	b.n	800ae8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	68d8      	ldr	r0, [r3, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae44:	461a      	mov	r2, r3
 800ae46:	68b9      	ldr	r1, [r7, #8]
 800ae48:	f000 fe7e 	bl	800bb48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae54:	425b      	negs	r3, r3
 800ae56:	441a      	add	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d207      	bcs.n	800ae78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae70:	425b      	negs	r3, r3
 800ae72:	441a      	add	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d105      	bne.n	800ae8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	1c5a      	adds	r2, r3, #1
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae92:	697b      	ldr	r3, [r7, #20]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aea4:	f000 fc90 	bl	800b7c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeb0:	e011      	b.n	800aed6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d012      	beq.n	800aee0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3324      	adds	r3, #36	; 0x24
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fa5c 	bl	800b37c <xTaskRemoveFromEventList>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aeca:	f000 fb2f 	bl	800b52c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	dce9      	bgt.n	800aeb2 <prvUnlockQueue+0x16>
 800aede:	e000      	b.n	800aee2 <prvUnlockQueue+0x46>
					break;
 800aee0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	22ff      	movs	r2, #255	; 0xff
 800aee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aeea:	f000 fc9b 	bl	800b824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aeee:	f000 fc6b 	bl	800b7c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aef8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aefa:	e011      	b.n	800af20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d012      	beq.n	800af2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3310      	adds	r3, #16
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 fa37 	bl	800b37c <xTaskRemoveFromEventList>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af14:	f000 fb0a 	bl	800b52c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af24:	2b00      	cmp	r3, #0
 800af26:	dce9      	bgt.n	800aefc <prvUnlockQueue+0x60>
 800af28:	e000      	b.n	800af2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	22ff      	movs	r2, #255	; 0xff
 800af30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af34:	f000 fc76 	bl	800b824 <vPortExitCritical>
}
 800af38:	bf00      	nop
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af48:	f000 fc3e 	bl	800b7c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af54:	429a      	cmp	r2, r3
 800af56:	d102      	bne.n	800af5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af58:	2301      	movs	r3, #1
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	e001      	b.n	800af62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af62:	f000 fc5f 	bl	800b824 <vPortExitCritical>

	return xReturn;
 800af66:	68fb      	ldr	r3, [r7, #12]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af70:	b480      	push	{r7}
 800af72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800af74:	4b04      	ldr	r3, [pc, #16]	; (800af88 <vTaskSuspendAll+0x18>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3301      	adds	r3, #1
 800af7a:	4a03      	ldr	r2, [pc, #12]	; (800af88 <vTaskSuspendAll+0x18>)
 800af7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800af7e:	bf00      	nop
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	200003a8 	.word	0x200003a8

0800af8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af96:	2300      	movs	r3, #0
 800af98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af9a:	4b41      	ldr	r3, [pc, #260]	; (800b0a0 <xTaskResumeAll+0x114>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d109      	bne.n	800afb6 <xTaskResumeAll+0x2a>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	603b      	str	r3, [r7, #0]
 800afb4:	e7fe      	b.n	800afb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afb6:	f000 fc07 	bl	800b7c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afba:	4b39      	ldr	r3, [pc, #228]	; (800b0a0 <xTaskResumeAll+0x114>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	4a37      	ldr	r2, [pc, #220]	; (800b0a0 <xTaskResumeAll+0x114>)
 800afc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afc4:	4b36      	ldr	r3, [pc, #216]	; (800b0a0 <xTaskResumeAll+0x114>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d161      	bne.n	800b090 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afcc:	4b35      	ldr	r3, [pc, #212]	; (800b0a4 <xTaskResumeAll+0x118>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d05d      	beq.n	800b090 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afd4:	e02e      	b.n	800b034 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afd6:	4b34      	ldr	r3, [pc, #208]	; (800b0a8 <xTaskResumeAll+0x11c>)
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3318      	adds	r3, #24
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff fd37 	bl	800aa56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3304      	adds	r3, #4
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff fd32 	bl	800aa56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff6:	2201      	movs	r2, #1
 800aff8:	409a      	lsls	r2, r3
 800affa:	4b2c      	ldr	r3, [pc, #176]	; (800b0ac <xTaskResumeAll+0x120>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4313      	orrs	r3, r2
 800b000:	4a2a      	ldr	r2, [pc, #168]	; (800b0ac <xTaskResumeAll+0x120>)
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b008:	4613      	mov	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4a27      	ldr	r2, [pc, #156]	; (800b0b0 <xTaskResumeAll+0x124>)
 800b012:	441a      	add	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3304      	adds	r3, #4
 800b018:	4619      	mov	r1, r3
 800b01a:	4610      	mov	r0, r2
 800b01c:	f7ff fcbe 	bl	800a99c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b024:	4b23      	ldr	r3, [pc, #140]	; (800b0b4 <xTaskResumeAll+0x128>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d302      	bcc.n	800b034 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b02e:	4b22      	ldr	r3, [pc, #136]	; (800b0b8 <xTaskResumeAll+0x12c>)
 800b030:	2201      	movs	r2, #1
 800b032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b034:	4b1c      	ldr	r3, [pc, #112]	; (800b0a8 <xTaskResumeAll+0x11c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1cc      	bne.n	800afd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b042:	f000 fa7f 	bl	800b544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b046:	4b1d      	ldr	r3, [pc, #116]	; (800b0bc <xTaskResumeAll+0x130>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d010      	beq.n	800b074 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b052:	f000 f837 	bl	800b0c4 <xTaskIncrementTick>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b05c:	4b16      	ldr	r3, [pc, #88]	; (800b0b8 <xTaskResumeAll+0x12c>)
 800b05e:	2201      	movs	r2, #1
 800b060:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3b01      	subs	r3, #1
 800b066:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1f1      	bne.n	800b052 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b06e:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <xTaskResumeAll+0x130>)
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b074:	4b10      	ldr	r3, [pc, #64]	; (800b0b8 <xTaskResumeAll+0x12c>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d009      	beq.n	800b090 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b07c:	2301      	movs	r3, #1
 800b07e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b080:	4b0f      	ldr	r3, [pc, #60]	; (800b0c0 <xTaskResumeAll+0x134>)
 800b082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b086:	601a      	str	r2, [r3, #0]
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b090:	f000 fbc8 	bl	800b824 <vPortExitCritical>

	return xAlreadyYielded;
 800b094:	68bb      	ldr	r3, [r7, #8]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	200003a8 	.word	0x200003a8
 800b0a4:	20000388 	.word	0x20000388
 800b0a8:	20000360 	.word	0x20000360
 800b0ac:	20000390 	.word	0x20000390
 800b0b0:	200002cc 	.word	0x200002cc
 800b0b4:	200002c8 	.word	0x200002c8
 800b0b8:	2000039c 	.word	0x2000039c
 800b0bc:	20000398 	.word	0x20000398
 800b0c0:	e000ed04 	.word	0xe000ed04

0800b0c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ce:	4b4e      	ldr	r3, [pc, #312]	; (800b208 <xTaskIncrementTick+0x144>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f040 8087 	bne.w	800b1e6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0d8:	4b4c      	ldr	r3, [pc, #304]	; (800b20c <xTaskIncrementTick+0x148>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0e0:	4a4a      	ldr	r2, [pc, #296]	; (800b20c <xTaskIncrementTick+0x148>)
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d11f      	bne.n	800b12c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0ec:	4b48      	ldr	r3, [pc, #288]	; (800b210 <xTaskIncrementTick+0x14c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d009      	beq.n	800b10a <xTaskIncrementTick+0x46>
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	e7fe      	b.n	800b108 <xTaskIncrementTick+0x44>
 800b10a:	4b41      	ldr	r3, [pc, #260]	; (800b210 <xTaskIncrementTick+0x14c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	4b40      	ldr	r3, [pc, #256]	; (800b214 <xTaskIncrementTick+0x150>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a3e      	ldr	r2, [pc, #248]	; (800b210 <xTaskIncrementTick+0x14c>)
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	4a3e      	ldr	r2, [pc, #248]	; (800b214 <xTaskIncrementTick+0x150>)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	4b3e      	ldr	r3, [pc, #248]	; (800b218 <xTaskIncrementTick+0x154>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	4a3c      	ldr	r2, [pc, #240]	; (800b218 <xTaskIncrementTick+0x154>)
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	f000 fa0c 	bl	800b544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b12c:	4b3b      	ldr	r3, [pc, #236]	; (800b21c <xTaskIncrementTick+0x158>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	429a      	cmp	r2, r3
 800b134:	d348      	bcc.n	800b1c8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b136:	4b36      	ldr	r3, [pc, #216]	; (800b210 <xTaskIncrementTick+0x14c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d104      	bne.n	800b14a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b140:	4b36      	ldr	r3, [pc, #216]	; (800b21c <xTaskIncrementTick+0x158>)
 800b142:	f04f 32ff 	mov.w	r2, #4294967295
 800b146:	601a      	str	r2, [r3, #0]
					break;
 800b148:	e03e      	b.n	800b1c8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14a:	4b31      	ldr	r3, [pc, #196]	; (800b210 <xTaskIncrementTick+0x14c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d203      	bcs.n	800b16a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b162:	4a2e      	ldr	r2, [pc, #184]	; (800b21c <xTaskIncrementTick+0x158>)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b168:	e02e      	b.n	800b1c8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	3304      	adds	r3, #4
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff fc71 	bl	800aa56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	3318      	adds	r3, #24
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff fc68 	bl	800aa56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18a:	2201      	movs	r2, #1
 800b18c:	409a      	lsls	r2, r3
 800b18e:	4b24      	ldr	r3, [pc, #144]	; (800b220 <xTaskIncrementTick+0x15c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4313      	orrs	r3, r2
 800b194:	4a22      	ldr	r2, [pc, #136]	; (800b220 <xTaskIncrementTick+0x15c>)
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4a1f      	ldr	r2, [pc, #124]	; (800b224 <xTaskIncrementTick+0x160>)
 800b1a6:	441a      	add	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7ff fbf4 	bl	800a99c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4b1b      	ldr	r3, [pc, #108]	; (800b228 <xTaskIncrementTick+0x164>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d3b9      	bcc.n	800b136 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1c6:	e7b6      	b.n	800b136 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1c8:	4b17      	ldr	r3, [pc, #92]	; (800b228 <xTaskIncrementTick+0x164>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ce:	4915      	ldr	r1, [pc, #84]	; (800b224 <xTaskIncrementTick+0x160>)
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	440b      	add	r3, r1
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d907      	bls.n	800b1f0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	e004      	b.n	800b1f0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b1e6:	4b11      	ldr	r3, [pc, #68]	; (800b22c <xTaskIncrementTick+0x168>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	4a0f      	ldr	r2, [pc, #60]	; (800b22c <xTaskIncrementTick+0x168>)
 800b1ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b1f0:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <xTaskIncrementTick+0x16c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b1fc:	697b      	ldr	r3, [r7, #20]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	200003a8 	.word	0x200003a8
 800b20c:	2000038c 	.word	0x2000038c
 800b210:	20000358 	.word	0x20000358
 800b214:	2000035c 	.word	0x2000035c
 800b218:	200003a0 	.word	0x200003a0
 800b21c:	200003a4 	.word	0x200003a4
 800b220:	20000390 	.word	0x20000390
 800b224:	200002cc 	.word	0x200002cc
 800b228:	200002c8 	.word	0x200002c8
 800b22c:	20000398 	.word	0x20000398
 800b230:	2000039c 	.word	0x2000039c

0800b234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b23a:	4b39      	ldr	r3, [pc, #228]	; (800b320 <vTaskSwitchContext+0xec>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b242:	4b38      	ldr	r3, [pc, #224]	; (800b324 <vTaskSwitchContext+0xf0>)
 800b244:	2201      	movs	r2, #1
 800b246:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b248:	e065      	b.n	800b316 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800b24a:	4b36      	ldr	r3, [pc, #216]	; (800b324 <vTaskSwitchContext+0xf0>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b250:	4b35      	ldr	r3, [pc, #212]	; (800b328 <vTaskSwitchContext+0xf4>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b256:	61fb      	str	r3, [r7, #28]
 800b258:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b25c:	61bb      	str	r3, [r7, #24]
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	429a      	cmp	r2, r3
 800b266:	d111      	bne.n	800b28c <vTaskSwitchContext+0x58>
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	3304      	adds	r3, #4
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	69ba      	ldr	r2, [r7, #24]
 800b270:	429a      	cmp	r2, r3
 800b272:	d10b      	bne.n	800b28c <vTaskSwitchContext+0x58>
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	3308      	adds	r3, #8
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d105      	bne.n	800b28c <vTaskSwitchContext+0x58>
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	330c      	adds	r3, #12
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	69ba      	ldr	r2, [r7, #24]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d008      	beq.n	800b29e <vTaskSwitchContext+0x6a>
 800b28c:	4b26      	ldr	r3, [pc, #152]	; (800b328 <vTaskSwitchContext+0xf4>)
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	4b25      	ldr	r3, [pc, #148]	; (800b328 <vTaskSwitchContext+0xf4>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3334      	adds	r3, #52	; 0x34
 800b296:	4619      	mov	r1, r3
 800b298:	4610      	mov	r0, r2
 800b29a:	f7f5 fb0b 	bl	80008b4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b29e:	4b23      	ldr	r3, [pc, #140]	; (800b32c <vTaskSwitchContext+0xf8>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	fab3 f383 	clz	r3, r3
 800b2aa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	f1c3 031f 	rsb	r3, r3, #31
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	491e      	ldr	r1, [pc, #120]	; (800b330 <vTaskSwitchContext+0xfc>)
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	440b      	add	r3, r1
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d109      	bne.n	800b2dc <vTaskSwitchContext+0xa8>
	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	607b      	str	r3, [r7, #4]
 800b2da:	e7fe      	b.n	800b2da <vTaskSwitchContext+0xa6>
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4a12      	ldr	r2, [pc, #72]	; (800b330 <vTaskSwitchContext+0xfc>)
 800b2e8:	4413      	add	r3, r2
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	605a      	str	r2, [r3, #4]
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d104      	bne.n	800b30c <vTaskSwitchContext+0xd8>
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	605a      	str	r2, [r3, #4]
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	4a05      	ldr	r2, [pc, #20]	; (800b328 <vTaskSwitchContext+0xf4>)
 800b314:	6013      	str	r3, [r2, #0]
}
 800b316:	bf00      	nop
 800b318:	3720      	adds	r7, #32
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	200003a8 	.word	0x200003a8
 800b324:	2000039c 	.word	0x2000039c
 800b328:	200002c8 	.word	0x200002c8
 800b32c:	20000390 	.word	0x20000390
 800b330:	200002cc 	.word	0x200002cc

0800b334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d109      	bne.n	800b358 <vTaskPlaceOnEventList+0x24>
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	e7fe      	b.n	800b356 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b358:	4b07      	ldr	r3, [pc, #28]	; (800b378 <vTaskPlaceOnEventList+0x44>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3318      	adds	r3, #24
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7ff fb3f 	bl	800a9e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b366:	2101      	movs	r1, #1
 800b368:	6838      	ldr	r0, [r7, #0]
 800b36a:	f000 f9ad 	bl	800b6c8 <prvAddCurrentTaskToDelayedList>
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	200002c8 	.word	0x200002c8

0800b37c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d109      	bne.n	800b3a6 <xTaskRemoveFromEventList+0x2a>
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	e7fe      	b.n	800b3a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	3318      	adds	r3, #24
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fb53 	bl	800aa56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3b0:	4b1d      	ldr	r3, [pc, #116]	; (800b428 <xTaskRemoveFromEventList+0xac>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d11c      	bne.n	800b3f2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7ff fb4a 	bl	800aa56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	409a      	lsls	r2, r3
 800b3ca:	4b18      	ldr	r3, [pc, #96]	; (800b42c <xTaskRemoveFromEventList+0xb0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	4a16      	ldr	r2, [pc, #88]	; (800b42c <xTaskRemoveFromEventList+0xb0>)
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4a13      	ldr	r2, [pc, #76]	; (800b430 <xTaskRemoveFromEventList+0xb4>)
 800b3e2:	441a      	add	r2, r3
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	f7ff fad6 	bl	800a99c <vListInsertEnd>
 800b3f0:	e005      	b.n	800b3fe <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	3318      	adds	r3, #24
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	480e      	ldr	r0, [pc, #56]	; (800b434 <xTaskRemoveFromEventList+0xb8>)
 800b3fa:	f7ff facf 	bl	800a99c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b402:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <xTaskRemoveFromEventList+0xbc>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	429a      	cmp	r2, r3
 800b40a:	d905      	bls.n	800b418 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b40c:	2301      	movs	r3, #1
 800b40e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <xTaskRemoveFromEventList+0xc0>)
 800b412:	2201      	movs	r2, #1
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	e001      	b.n	800b41c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b418:	2300      	movs	r3, #0
 800b41a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b41c:	697b      	ldr	r3, [r7, #20]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	200003a8 	.word	0x200003a8
 800b42c:	20000390 	.word	0x20000390
 800b430:	200002cc 	.word	0x200002cc
 800b434:	20000360 	.word	0x20000360
 800b438:	200002c8 	.word	0x200002c8
 800b43c:	2000039c 	.word	0x2000039c

0800b440 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b448:	4b06      	ldr	r3, [pc, #24]	; (800b464 <vTaskInternalSetTimeOutState+0x24>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <vTaskInternalSetTimeOutState+0x28>)
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	605a      	str	r2, [r3, #4]
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	200003a0 	.word	0x200003a0
 800b468:	2000038c 	.word	0x2000038c

0800b46c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d109      	bne.n	800b490 <xTaskCheckForTimeOut+0x24>
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	e7fe      	b.n	800b48e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d109      	bne.n	800b4aa <xTaskCheckForTimeOut+0x3e>
 800b496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	e7fe      	b.n	800b4a8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b4aa:	f000 f98d 	bl	800b7c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4ae:	4b1d      	ldr	r3, [pc, #116]	; (800b524 <xTaskCheckForTimeOut+0xb8>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	69ba      	ldr	r2, [r7, #24]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c6:	d102      	bne.n	800b4ce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	61fb      	str	r3, [r7, #28]
 800b4cc:	e023      	b.n	800b516 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b15      	ldr	r3, [pc, #84]	; (800b528 <xTaskCheckForTimeOut+0xbc>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d007      	beq.n	800b4ea <xTaskCheckForTimeOut+0x7e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	69ba      	ldr	r2, [r7, #24]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d302      	bcc.n	800b4ea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	61fb      	str	r3, [r7, #28]
 800b4e8:	e015      	b.n	800b516 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d20b      	bcs.n	800b50c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	1ad2      	subs	r2, r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff ff9d 	bl	800b440 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b506:	2300      	movs	r3, #0
 800b508:	61fb      	str	r3, [r7, #28]
 800b50a:	e004      	b.n	800b516 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b512:	2301      	movs	r3, #1
 800b514:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b516:	f000 f985 	bl	800b824 <vPortExitCritical>

	return xReturn;
 800b51a:	69fb      	ldr	r3, [r7, #28]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3720      	adds	r7, #32
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	2000038c 	.word	0x2000038c
 800b528:	200003a0 	.word	0x200003a0

0800b52c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b52c:	b480      	push	{r7}
 800b52e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b530:	4b03      	ldr	r3, [pc, #12]	; (800b540 <vTaskMissedYield+0x14>)
 800b532:	2201      	movs	r2, #1
 800b534:	601a      	str	r2, [r3, #0]
}
 800b536:	bf00      	nop
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	2000039c 	.word	0x2000039c

0800b544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b54a:	4b0c      	ldr	r3, [pc, #48]	; (800b57c <prvResetNextTaskUnblockTime+0x38>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d104      	bne.n	800b55e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b554:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <prvResetNextTaskUnblockTime+0x3c>)
 800b556:	f04f 32ff 	mov.w	r2, #4294967295
 800b55a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b55c:	e008      	b.n	800b570 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b55e:	4b07      	ldr	r3, [pc, #28]	; (800b57c <prvResetNextTaskUnblockTime+0x38>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	4a04      	ldr	r2, [pc, #16]	; (800b580 <prvResetNextTaskUnblockTime+0x3c>)
 800b56e:	6013      	str	r3, [r2, #0]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20000358 	.word	0x20000358
 800b580:	200003a4 	.word	0x200003a4

0800b584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b58a:	4b0b      	ldr	r3, [pc, #44]	; (800b5b8 <xTaskGetSchedulerState+0x34>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b592:	2301      	movs	r3, #1
 800b594:	607b      	str	r3, [r7, #4]
 800b596:	e008      	b.n	800b5aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b598:	4b08      	ldr	r3, [pc, #32]	; (800b5bc <xTaskGetSchedulerState+0x38>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	607b      	str	r3, [r7, #4]
 800b5a4:	e001      	b.n	800b5aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5aa:	687b      	ldr	r3, [r7, #4]
	}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	20000394 	.word	0x20000394
 800b5bc:	200003a8 	.word	0x200003a8

0800b5c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d06c      	beq.n	800b6b0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5d6:	4b39      	ldr	r3, [pc, #228]	; (800b6bc <xTaskPriorityDisinherit+0xfc>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d009      	beq.n	800b5f4 <xTaskPriorityDisinherit+0x34>
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	60fb      	str	r3, [r7, #12]
 800b5f2:	e7fe      	b.n	800b5f2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d109      	bne.n	800b610 <xTaskPriorityDisinherit+0x50>
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	60bb      	str	r3, [r7, #8]
 800b60e:	e7fe      	b.n	800b60e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b614:	1e5a      	subs	r2, r3, #1
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b622:	429a      	cmp	r2, r3
 800b624:	d044      	beq.n	800b6b0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d140      	bne.n	800b6b0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	3304      	adds	r3, #4
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff fa0f 	bl	800aa56 <uxListRemove>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d115      	bne.n	800b66a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b642:	491f      	ldr	r1, [pc, #124]	; (800b6c0 <xTaskPriorityDisinherit+0x100>)
 800b644:	4613      	mov	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	440b      	add	r3, r1
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <xTaskPriorityDisinherit+0xaa>
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b658:	2201      	movs	r2, #1
 800b65a:	fa02 f303 	lsl.w	r3, r2, r3
 800b65e:	43da      	mvns	r2, r3
 800b660:	4b18      	ldr	r3, [pc, #96]	; (800b6c4 <xTaskPriorityDisinherit+0x104>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4013      	ands	r3, r2
 800b666:	4a17      	ldr	r2, [pc, #92]	; (800b6c4 <xTaskPriorityDisinherit+0x104>)
 800b668:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	f1c3 0207 	rsb	r2, r3, #7
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b682:	2201      	movs	r2, #1
 800b684:	409a      	lsls	r2, r3
 800b686:	4b0f      	ldr	r3, [pc, #60]	; (800b6c4 <xTaskPriorityDisinherit+0x104>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	4a0d      	ldr	r2, [pc, #52]	; (800b6c4 <xTaskPriorityDisinherit+0x104>)
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4a08      	ldr	r2, [pc, #32]	; (800b6c0 <xTaskPriorityDisinherit+0x100>)
 800b69e:	441a      	add	r2, r3
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	f7ff f978 	bl	800a99c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6b0:	697b      	ldr	r3, [r7, #20]
	}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	200002c8 	.word	0x200002c8
 800b6c0:	200002cc 	.word	0x200002cc
 800b6c4:	20000390 	.word	0x20000390

0800b6c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6d2:	4b29      	ldr	r3, [pc, #164]	; (800b778 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6d8:	4b28      	ldr	r3, [pc, #160]	; (800b77c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff f9b9 	bl	800aa56 <uxListRemove>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10b      	bne.n	800b702 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b6ea:	4b24      	ldr	r3, [pc, #144]	; (800b77c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f6:	43da      	mvns	r2, r3
 800b6f8:	4b21      	ldr	r3, [pc, #132]	; (800b780 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	4a20      	ldr	r2, [pc, #128]	; (800b780 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b700:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b708:	d10a      	bne.n	800b720 <prvAddCurrentTaskToDelayedList+0x58>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d007      	beq.n	800b720 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b710:	4b1a      	ldr	r3, [pc, #104]	; (800b77c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3304      	adds	r3, #4
 800b716:	4619      	mov	r1, r3
 800b718:	481a      	ldr	r0, [pc, #104]	; (800b784 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b71a:	f7ff f93f 	bl	800a99c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b71e:	e026      	b.n	800b76e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4413      	add	r3, r2
 800b726:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b728:	4b14      	ldr	r3, [pc, #80]	; (800b77c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	429a      	cmp	r2, r3
 800b736:	d209      	bcs.n	800b74c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b738:	4b13      	ldr	r3, [pc, #76]	; (800b788 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	4b0f      	ldr	r3, [pc, #60]	; (800b77c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3304      	adds	r3, #4
 800b742:	4619      	mov	r1, r3
 800b744:	4610      	mov	r0, r2
 800b746:	f7ff f94d 	bl	800a9e4 <vListInsert>
}
 800b74a:	e010      	b.n	800b76e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b74c:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3304      	adds	r3, #4
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f7ff f943 	bl	800a9e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	429a      	cmp	r2, r3
 800b766:	d202      	bcs.n	800b76e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b768:	4a09      	ldr	r2, [pc, #36]	; (800b790 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	6013      	str	r3, [r2, #0]
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	2000038c 	.word	0x2000038c
 800b77c:	200002c8 	.word	0x200002c8
 800b780:	20000390 	.word	0x20000390
 800b784:	20000374 	.word	0x20000374
 800b788:	2000035c 	.word	0x2000035c
 800b78c:	20000358 	.word	0x20000358
 800b790:	200003a4 	.word	0x200003a4
	...

0800b7a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b7a0:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <pxCurrentTCBConst2>)
 800b7a2:	6819      	ldr	r1, [r3, #0]
 800b7a4:	6808      	ldr	r0, [r1, #0]
 800b7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7aa:	f380 8809 	msr	PSP, r0
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f04f 0000 	mov.w	r0, #0
 800b7b6:	f380 8811 	msr	BASEPRI, r0
 800b7ba:	4770      	bx	lr
 800b7bc:	f3af 8000 	nop.w

0800b7c0 <pxCurrentTCBConst2>:
 800b7c0:	200002c8 	.word	0x200002c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop

0800b7c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7e0:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <vPortEnterCritical+0x54>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a0d      	ldr	r2, [pc, #52]	; (800b81c <vPortEnterCritical+0x54>)
 800b7e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b7ea:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <vPortEnterCritical+0x54>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d10e      	bne.n	800b810 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b7f2:	4b0b      	ldr	r3, [pc, #44]	; (800b820 <vPortEnterCritical+0x58>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d009      	beq.n	800b810 <vPortEnterCritical+0x48>
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	603b      	str	r3, [r7, #0]
 800b80e:	e7fe      	b.n	800b80e <vPortEnterCritical+0x46>
	}
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	20000088 	.word	0x20000088
 800b820:	e000ed04 	.word	0xe000ed04

0800b824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b82a:	4b11      	ldr	r3, [pc, #68]	; (800b870 <vPortExitCritical+0x4c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d109      	bne.n	800b846 <vPortExitCritical+0x22>
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	607b      	str	r3, [r7, #4]
 800b844:	e7fe      	b.n	800b844 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b846:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <vPortExitCritical+0x4c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3b01      	subs	r3, #1
 800b84c:	4a08      	ldr	r2, [pc, #32]	; (800b870 <vPortExitCritical+0x4c>)
 800b84e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b850:	4b07      	ldr	r3, [pc, #28]	; (800b870 <vPortExitCritical+0x4c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d104      	bne.n	800b862 <vPortExitCritical+0x3e>
 800b858:	2300      	movs	r3, #0
 800b85a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b862:	bf00      	nop
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20000088 	.word	0x20000088
	...

0800b880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b880:	f3ef 8009 	mrs	r0, PSP
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	4b15      	ldr	r3, [pc, #84]	; (800b8e0 <pxCurrentTCBConst>)
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	f01e 0f10 	tst.w	lr, #16
 800b890:	bf08      	it	eq
 800b892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89a:	6010      	str	r0, [r2, #0]
 800b89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8a4:	f380 8811 	msr	BASEPRI, r0
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f7ff fcc0 	bl	800b234 <vTaskSwitchContext>
 800b8b4:	f04f 0000 	mov.w	r0, #0
 800b8b8:	f380 8811 	msr	BASEPRI, r0
 800b8bc:	bc09      	pop	{r0, r3}
 800b8be:	6819      	ldr	r1, [r3, #0]
 800b8c0:	6808      	ldr	r0, [r1, #0]
 800b8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c6:	f01e 0f10 	tst.w	lr, #16
 800b8ca:	bf08      	it	eq
 800b8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8d0:	f380 8809 	msr	PSP, r0
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	f3af 8000 	nop.w

0800b8e0 <pxCurrentTCBConst>:
 800b8e0:	200002c8 	.word	0x200002c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b8e4:	bf00      	nop
 800b8e6:	bf00      	nop

0800b8e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b900:	f7ff fbe0 	bl	800b0c4 <xTaskIncrementTick>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d003      	beq.n	800b912 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <SysTick_Handler+0x3c>)
 800b90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	2300      	movs	r3, #0
 800b914:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b91c:	bf00      	nop
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	e000ed04 	.word	0xe000ed04

0800b928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b92e:	f3ef 8305 	mrs	r3, IPSR
 800b932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b0f      	cmp	r3, #15
 800b938:	d913      	bls.n	800b962 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b93a:	4a16      	ldr	r2, [pc, #88]	; (800b994 <vPortValidateInterruptPriority+0x6c>)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	4413      	add	r3, r2
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b944:	4b14      	ldr	r3, [pc, #80]	; (800b998 <vPortValidateInterruptPriority+0x70>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	7afa      	ldrb	r2, [r7, #11]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d209      	bcs.n	800b962 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	607b      	str	r3, [r7, #4]
 800b960:	e7fe      	b.n	800b960 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b962:	4b0e      	ldr	r3, [pc, #56]	; (800b99c <vPortValidateInterruptPriority+0x74>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b96a:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <vPortValidateInterruptPriority+0x78>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d909      	bls.n	800b986 <vPortValidateInterruptPriority+0x5e>
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	e7fe      	b.n	800b984 <vPortValidateInterruptPriority+0x5c>
	}
 800b986:	bf00      	nop
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	e000e3f0 	.word	0xe000e3f0
 800b998:	200003ac 	.word	0x200003ac
 800b99c:	e000ed0c 	.word	0xe000ed0c
 800b9a0:	200003b0 	.word	0x200003b0

0800b9a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe fec4 	bl	800a740 <USBH_LL_IncTimer>
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fe ff08 	bl	800a7e4 <USBH_LL_Connect>
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fe ff1d 	bl	800a82a <USBH_LL_Disconnect>
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	460b      	mov	r3, r1
 800ba02:	70fb      	strb	r3, [r7, #3]
 800ba04:	4613      	mov	r3, r2
 800ba06:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fe ff3d 	bl	800a88e <USBH_LL_NotifyURBChange>
#endif
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe feb2 	bl	800a794 <USBH_LL_PortEnabled>
}
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe febe 	bl	800a7c8 <USBH_LL_PortDisabled>
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7f9 f919 	bl	8004ca2 <HAL_HCD_Stop>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 f808 	bl	800ba8c <USBH_Get_USB_Status>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	4603      	mov	r3, r0
 800ba94:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba9a:	79fb      	ldrb	r3, [r7, #7]
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	d817      	bhi.n	800bad0 <USBH_Get_USB_Status+0x44>
 800baa0:	a201      	add	r2, pc, #4	; (adr r2, 800baa8 <USBH_Get_USB_Status+0x1c>)
 800baa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa6:	bf00      	nop
 800baa8:	0800bab9 	.word	0x0800bab9
 800baac:	0800babf 	.word	0x0800babf
 800bab0:	0800bac5 	.word	0x0800bac5
 800bab4:	0800bacb 	.word	0x0800bacb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	73fb      	strb	r3, [r7, #15]
    break;
 800babc:	e00b      	b.n	800bad6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800babe:	2302      	movs	r3, #2
 800bac0:	73fb      	strb	r3, [r7, #15]
    break;
 800bac2:	e008      	b.n	800bad6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bac4:	2301      	movs	r3, #1
 800bac6:	73fb      	strb	r3, [r7, #15]
    break;
 800bac8:	e005      	b.n	800bad6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800baca:	2302      	movs	r3, #2
 800bacc:	73fb      	strb	r3, [r7, #15]
    break;
 800bace:	e002      	b.n	800bad6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bad0:	2302      	movs	r3, #2
 800bad2:	73fb      	strb	r3, [r7, #15]
    break;
 800bad4:	bf00      	nop
  }
  return usb_status;
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <__errno>:
 800bae4:	4b01      	ldr	r3, [pc, #4]	; (800baec <__errno+0x8>)
 800bae6:	6818      	ldr	r0, [r3, #0]
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	2000008c 	.word	0x2000008c

0800baf0 <__libc_init_array>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	4e0d      	ldr	r6, [pc, #52]	; (800bb28 <__libc_init_array+0x38>)
 800baf4:	4c0d      	ldr	r4, [pc, #52]	; (800bb2c <__libc_init_array+0x3c>)
 800baf6:	1ba4      	subs	r4, r4, r6
 800baf8:	10a4      	asrs	r4, r4, #2
 800bafa:	2500      	movs	r5, #0
 800bafc:	42a5      	cmp	r5, r4
 800bafe:	d109      	bne.n	800bb14 <__libc_init_array+0x24>
 800bb00:	4e0b      	ldr	r6, [pc, #44]	; (800bb30 <__libc_init_array+0x40>)
 800bb02:	4c0c      	ldr	r4, [pc, #48]	; (800bb34 <__libc_init_array+0x44>)
 800bb04:	f000 f8a0 	bl	800bc48 <_init>
 800bb08:	1ba4      	subs	r4, r4, r6
 800bb0a:	10a4      	asrs	r4, r4, #2
 800bb0c:	2500      	movs	r5, #0
 800bb0e:	42a5      	cmp	r5, r4
 800bb10:	d105      	bne.n	800bb1e <__libc_init_array+0x2e>
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb18:	4798      	blx	r3
 800bb1a:	3501      	adds	r5, #1
 800bb1c:	e7ee      	b.n	800bafc <__libc_init_array+0xc>
 800bb1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb22:	4798      	blx	r3
 800bb24:	3501      	adds	r5, #1
 800bb26:	e7f2      	b.n	800bb0e <__libc_init_array+0x1e>
 800bb28:	0800dc14 	.word	0x0800dc14
 800bb2c:	0800dc14 	.word	0x0800dc14
 800bb30:	0800dc14 	.word	0x0800dc14
 800bb34:	0800dc18 	.word	0x0800dc18

0800bb38 <malloc>:
 800bb38:	4b02      	ldr	r3, [pc, #8]	; (800bb44 <malloc+0xc>)
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	f000 b817 	b.w	800bb70 <_malloc_r>
 800bb42:	bf00      	nop
 800bb44:	2000008c 	.word	0x2000008c

0800bb48 <memcpy>:
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	1e43      	subs	r3, r0, #1
 800bb4c:	440a      	add	r2, r1
 800bb4e:	4291      	cmp	r1, r2
 800bb50:	d100      	bne.n	800bb54 <memcpy+0xc>
 800bb52:	bd10      	pop	{r4, pc}
 800bb54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb5c:	e7f7      	b.n	800bb4e <memcpy+0x6>

0800bb5e <memset>:
 800bb5e:	4402      	add	r2, r0
 800bb60:	4603      	mov	r3, r0
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d100      	bne.n	800bb68 <memset+0xa>
 800bb66:	4770      	bx	lr
 800bb68:	f803 1b01 	strb.w	r1, [r3], #1
 800bb6c:	e7f9      	b.n	800bb62 <memset+0x4>
	...

0800bb70 <_malloc_r>:
 800bb70:	b570      	push	{r4, r5, r6, lr}
 800bb72:	1ccd      	adds	r5, r1, #3
 800bb74:	f025 0503 	bic.w	r5, r5, #3
 800bb78:	3508      	adds	r5, #8
 800bb7a:	2d0c      	cmp	r5, #12
 800bb7c:	bf38      	it	cc
 800bb7e:	250c      	movcc	r5, #12
 800bb80:	2d00      	cmp	r5, #0
 800bb82:	4606      	mov	r6, r0
 800bb84:	db01      	blt.n	800bb8a <_malloc_r+0x1a>
 800bb86:	42a9      	cmp	r1, r5
 800bb88:	d903      	bls.n	800bb92 <_malloc_r+0x22>
 800bb8a:	230c      	movs	r3, #12
 800bb8c:	6033      	str	r3, [r6, #0]
 800bb8e:	2000      	movs	r0, #0
 800bb90:	bd70      	pop	{r4, r5, r6, pc}
 800bb92:	f000 f857 	bl	800bc44 <__malloc_lock>
 800bb96:	4a21      	ldr	r2, [pc, #132]	; (800bc1c <_malloc_r+0xac>)
 800bb98:	6814      	ldr	r4, [r2, #0]
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	b991      	cbnz	r1, 800bbc4 <_malloc_r+0x54>
 800bb9e:	4c20      	ldr	r4, [pc, #128]	; (800bc20 <_malloc_r+0xb0>)
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	b91b      	cbnz	r3, 800bbac <_malloc_r+0x3c>
 800bba4:	4630      	mov	r0, r6
 800bba6:	f000 f83d 	bl	800bc24 <_sbrk_r>
 800bbaa:	6020      	str	r0, [r4, #0]
 800bbac:	4629      	mov	r1, r5
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f000 f838 	bl	800bc24 <_sbrk_r>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	d124      	bne.n	800bc02 <_malloc_r+0x92>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	6033      	str	r3, [r6, #0]
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f000 f842 	bl	800bc46 <__malloc_unlock>
 800bbc2:	e7e4      	b.n	800bb8e <_malloc_r+0x1e>
 800bbc4:	680b      	ldr	r3, [r1, #0]
 800bbc6:	1b5b      	subs	r3, r3, r5
 800bbc8:	d418      	bmi.n	800bbfc <_malloc_r+0x8c>
 800bbca:	2b0b      	cmp	r3, #11
 800bbcc:	d90f      	bls.n	800bbee <_malloc_r+0x7e>
 800bbce:	600b      	str	r3, [r1, #0]
 800bbd0:	50cd      	str	r5, [r1, r3]
 800bbd2:	18cc      	adds	r4, r1, r3
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f000 f836 	bl	800bc46 <__malloc_unlock>
 800bbda:	f104 000b 	add.w	r0, r4, #11
 800bbde:	1d23      	adds	r3, r4, #4
 800bbe0:	f020 0007 	bic.w	r0, r0, #7
 800bbe4:	1ac3      	subs	r3, r0, r3
 800bbe6:	d0d3      	beq.n	800bb90 <_malloc_r+0x20>
 800bbe8:	425a      	negs	r2, r3
 800bbea:	50e2      	str	r2, [r4, r3]
 800bbec:	e7d0      	b.n	800bb90 <_malloc_r+0x20>
 800bbee:	428c      	cmp	r4, r1
 800bbf0:	684b      	ldr	r3, [r1, #4]
 800bbf2:	bf16      	itet	ne
 800bbf4:	6063      	strne	r3, [r4, #4]
 800bbf6:	6013      	streq	r3, [r2, #0]
 800bbf8:	460c      	movne	r4, r1
 800bbfa:	e7eb      	b.n	800bbd4 <_malloc_r+0x64>
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	6849      	ldr	r1, [r1, #4]
 800bc00:	e7cc      	b.n	800bb9c <_malloc_r+0x2c>
 800bc02:	1cc4      	adds	r4, r0, #3
 800bc04:	f024 0403 	bic.w	r4, r4, #3
 800bc08:	42a0      	cmp	r0, r4
 800bc0a:	d005      	beq.n	800bc18 <_malloc_r+0xa8>
 800bc0c:	1a21      	subs	r1, r4, r0
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f000 f808 	bl	800bc24 <_sbrk_r>
 800bc14:	3001      	adds	r0, #1
 800bc16:	d0cf      	beq.n	800bbb8 <_malloc_r+0x48>
 800bc18:	6025      	str	r5, [r4, #0]
 800bc1a:	e7db      	b.n	800bbd4 <_malloc_r+0x64>
 800bc1c:	200003b4 	.word	0x200003b4
 800bc20:	200003b8 	.word	0x200003b8

0800bc24 <_sbrk_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4c06      	ldr	r4, [pc, #24]	; (800bc40 <_sbrk_r+0x1c>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	6023      	str	r3, [r4, #0]
 800bc30:	f7f5 fd8a 	bl	8001748 <_sbrk>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_sbrk_r+0x1a>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_sbrk_r+0x1a>
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20000a14 	.word	0x20000a14

0800bc44 <__malloc_lock>:
 800bc44:	4770      	bx	lr

0800bc46 <__malloc_unlock>:
 800bc46:	4770      	bx	lr

0800bc48 <_init>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	bf00      	nop
 800bc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4e:	bc08      	pop	{r3}
 800bc50:	469e      	mov	lr, r3
 800bc52:	4770      	bx	lr

0800bc54 <_fini>:
 800bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc56:	bf00      	nop
 800bc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc5a:	bc08      	pop	{r3}
 800bc5c:	469e      	mov	lr, r3
 800bc5e:	4770      	bx	lr
