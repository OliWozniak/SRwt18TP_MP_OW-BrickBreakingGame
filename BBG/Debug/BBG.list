
BBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010aec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000203c  08010c9c  08010c9c  00020c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cd8  08012cd8  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08012cd8  08012cd8  00022cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ce0  08012ce0  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ce0  08012ce0  00022ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ce4  08012ce4  00022ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08012ce8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ffc  20000110  08012df8  00030110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000910c  08012df8  0003910c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000435b9  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ae7  00000000  00000000  000736f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028b8  00000000  00000000  0007b1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002570  00000000  00000000  0007da98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030e69  00000000  00000000  00080008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b449  00000000  00000000  000b0e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7711  00000000  00000000  000dc2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d39cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9a4  00000000  00000000  001d3a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010c84 	.word	0x08010c84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	08010c84 	.word	0x08010c84

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_CRC_Init+0x20>)
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <MX_CRC_Init+0x24>)
 80004f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_CRC_Init+0x20>)
 80004fc:	f003 fd9c 	bl	8004038 <HAL_CRC_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000506:	f000 fead 	bl	8001264 <Error_Handler>
  }

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200086c8 	.word	0x200086c8
 8000514:	40023000 	.word	0x40023000

08000518 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_CRC_MspInit+0x3c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d10d      	bne.n	8000546 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_CRC_MspInit+0x40>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023000 	.word	0x40023000
 8000558:	40023800 	.word	0x40023800

0800055c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <MX_DMA2D_Init+0x60>)
 8000564:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000592:	f003 ff29 	bl	80043e8 <HAL_DMA2D_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800059c:	f000 fe62 	bl	8001264 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005a0:	2101      	movs	r1, #1
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 80005a4:	f004 f98e 	bl	80048c4 <HAL_DMA2D_ConfigLayer>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005ae:	f000 fe59 	bl	8001264 <Error_Handler>
  }

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200086d0 	.word	0x200086d0
 80005bc:	4002b000 	.word	0x4002b000

080005c0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_DMA2D_MspInit+0x48>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d115      	bne.n	80005fe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2105      	movs	r1, #5
 80005f2:	205a      	movs	r0, #90	; 0x5a
 80005f4:	f003 fcf6 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005f8:	205a      	movs	r0, #90	; 0x5a
 80005fa:	f003 fd0f 	bl	800401c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	4002b000 	.word	0x4002b000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_FMC_Init+0x98>)
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <MX_FMC_Init+0x9c>)
 800062c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_FMC_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_FMC_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_FMC_Init+0x98>)
 800063c:	2204      	movs	r2, #4
 800063e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_FMC_Init+0x98>)
 8000642:	2210      	movs	r2, #16
 8000644:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_FMC_Init+0x98>)
 8000648:	2240      	movs	r2, #64	; 0x40
 800064a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_FMC_Init+0x98>)
 800064e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000652:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_FMC_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_FMC_Init+0x98>)
 800065c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000660:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_FMC_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_FMC_Init+0x98>)
 800066a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_FMC_Init+0x98>)
 8000692:	f008 fcd1 	bl	8009038 <HAL_SDRAM_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800069c:	f000 fde2 	bl	8001264 <Error_Handler>
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20008710 	.word	0x20008710
 80006ac:	a0000140 	.word	0xa0000140

080006b0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d16f      	bne.n	80007ac <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006cc:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006f2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000700:	230c      	movs	r3, #12
 8000702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <HAL_FMC_MspInit+0x10c>)
 800070a:	f004 fa09 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800071e:	230c      	movs	r3, #12
 8000720:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <HAL_FMC_MspInit+0x110>)
 8000728:	f004 f9fa 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800072c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000730:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800073e:	230c      	movs	r3, #12
 8000740:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <HAL_FMC_MspInit+0x114>)
 8000748:	f004 f9ea 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800074c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000750:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800075e:	230c      	movs	r3, #12
 8000760:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <HAL_FMC_MspInit+0x118>)
 8000768:	f004 f9da 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800076c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000770:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077e:	230c      	movs	r3, #12
 8000780:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <HAL_FMC_MspInit+0x11c>)
 8000788:	f004 f9ca 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800078c:	2360      	movs	r3, #96	; 0x60
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <HAL_FMC_MspInit+0x120>)
 80007a6:	f004 f9bb 	bl	8004b20 <HAL_GPIO_Init>
 80007aa:	e000      	b.n	80007ae <HAL_FMC_MspInit+0xfe>
    return;
 80007ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000012c 	.word	0x2000012c
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40021400 	.word	0x40021400
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40021800 	.word	0x40021800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40020400 	.word	0x40020400

080007d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007dc:	f7ff ff68 	bl	80006b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4a07      	ldr	r2, [pc, #28]	; (8000848 <vApplicationGetIdleTaskMemory+0x2c>)
 800082c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <vApplicationGetIdleTaskMemory+0x30>)
 8000832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000130 	.word	0x20000130
 800084c:	20000188 	.word	0x20000188

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_FREERTOS_Init+0x30>)
 8000858:	1d3c      	adds	r4, r7, #4
 800085a:	461d      	mov	r5, r3
 800085c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000860:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f00d fbcc 	bl	800e00a <osThreadCreate>
 8000872:	4602      	mov	r2, r0
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <MX_FREERTOS_Init+0x34>)
 8000876:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bdb0      	pop	{r4, r5, r7, pc}
 8000880:	08010ca8 	.word	0x08010ca8
 8000884:	20008744 	.word	0x20008744

08000888 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000890:	f00f fde8 	bl	8010464 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f00d fc04 	bl	800e0a2 <osDelay>
 800089a:	e7fb      	b.n	8000894 <StartDefaultTask+0xc>

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	4b7a      	ldr	r3, [pc, #488]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a79      	ldr	r2, [pc, #484]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b77      	ldr	r3, [pc, #476]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	4b73      	ldr	r3, [pc, #460]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a72      	ldr	r2, [pc, #456]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b70      	ldr	r3, [pc, #448]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a6b      	ldr	r2, [pc, #428]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	4b65      	ldr	r3, [pc, #404]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a64      	ldr	r2, [pc, #400]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a5d      	ldr	r2, [pc, #372]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4f      	ldr	r2, [pc, #316]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4d      	ldr	r3, [pc, #308]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2116      	movs	r1, #22
 8000996:	4843      	ldr	r0, [pc, #268]	; (8000aa4 <MX_GPIO_Init+0x208>)
 8000998:	f004 fb76 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	4841      	ldr	r0, [pc, #260]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 80009a2:	f004 fb71 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009ac:	483f      	ldr	r0, [pc, #252]	; (8000aac <MX_GPIO_Init+0x210>)
 80009ae:	f004 fb6b 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009b8:	483d      	ldr	r0, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x214>)
 80009ba:	f004 fb65 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009be:	2316      	movs	r3, #22
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <MX_GPIO_Init+0x208>)
 80009d6:	f004 f8a3 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009da:	f248 0307 	movw	r3, #32775	; 0x8007
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MX_GPIO_Init+0x218>)
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 80009f0:	f004 f896 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 8000a0c:	f004 f888 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a10:	2320      	movs	r3, #32
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0x218>)
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0x208>)
 8000a24:	f004 f87c 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0x21c>)
 8000a3c:	f004 f870 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_GPIO_Init+0x210>)
 8000a56:	f004 f863 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_GPIO_Init+0x210>)
 8000a74:	f004 f854 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_GPIO_Init+0x214>)
 8000a92:	f004 f845 	bl	8004b20 <HAL_GPIO_Init>

}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	10120000 	.word	0x10120000
 8000ab8:	40020400 	.word	0x40020400

08000abc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <MX_I2C3_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <MX_I2C3_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000afa:	f005 ffcf 	bl	8006a9c <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 fbae 	bl	8001264 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4809      	ldr	r0, [pc, #36]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000b0c:	f006 ffb7 	bl	8007a7e <HAL_I2CEx_ConfigAnalogFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b16:	f000 fba5 	bl	8001264 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000b1e:	f006 ffea 	bl	8007af6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b28:	f000 fb9c 	bl	8001264 <Error_Handler>
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20008748 	.word	0x20008748
 8000b34:	40005c00 	.word	0x40005c00
 8000b38:	000186a0 	.word	0x000186a0

08000b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a29      	ldr	r2, [pc, #164]	; (8000c00 <HAL_I2C_MspInit+0xc4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d14b      	bne.n	8000bf6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9c:	2312      	movs	r3, #18
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4815      	ldr	r0, [pc, #84]	; (8000c08 <HAL_I2C_MspInit+0xcc>)
 8000bb4:	f003 ffb4 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000bd6:	f003 ffa3 	bl	8004b20 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40005c00 	.word	0x40005c00
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_I2C_MspDeInit+0x3c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10f      	bne.n	8000c42 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_I2C_MspDeInit+0x40>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_I2C_MspDeInit+0x40>)
 8000c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_I2C_MspDeInit+0x44>)
 8000c34:	f004 f91e 	bl	8004e74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <HAL_I2C_MspDeInit+0x48>)
 8000c3e:	f004 f919 	bl	8004e74 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40005c00 	.word	0x40005c00
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020000 	.word	0x40020000

08000c5c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09a      	sub	sp, #104	; 0x68
 8000c60:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c66:	2234      	movs	r2, #52	; 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00f ff47 	bl	8010afe <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2234      	movs	r2, #52	; 0x34
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00f ff41 	bl	8010afe <memset>

  hltdc.Instance = LTDC;
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c7e:	4a50      	ldr	r2, [pc, #320]	; (8000dc0 <MX_LTDC_Init+0x164>)
 8000c80:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c94:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000c9c:	2209      	movs	r2, #9
 8000c9e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000ca0:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000ca6:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000ca8:	221d      	movs	r2, #29
 8000caa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000cb2:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cb4:	f240 120d 	movw	r2, #269	; 0x10d
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000cba:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cbc:	f240 1243 	movw	r2, #323	; 0x143
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000cc2:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cc4:	f240 1217 	movw	r2, #279	; 0x117
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000ccc:	f240 1247 	movw	r2, #327	; 0x147
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cd2:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cea:	4834      	ldr	r0, [pc, #208]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000cec:	f006 ff42 	bl	8007b74 <HAL_LTDC_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000cf6:	f000 fab5 	bl	8001264 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000cfe:	23f0      	movs	r3, #240	; 0xf0
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000d06:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000d10:	23ff      	movs	r3, #255	; 0xff
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d1c:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000d22:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000d26:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000d28:	23f0      	movs	r3, #240	; 0xf0
 8000d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000d2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d30:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481b      	ldr	r0, [pc, #108]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000d4e:	f007 f8a3 	bl	8007e98 <HAL_LTDC_ConfigLayer>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8000d58:	f000 fa84 	bl	8001264 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d78:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_LTDC_Init+0x160>)
 8000da4:	f007 f878 	bl	8007e98 <HAL_LTDC_ConfigLayer>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000dae:	f000 fa59 	bl	8001264 <Error_Handler>
  }

}
 8000db2:	bf00      	nop
 8000db4:	3768      	adds	r7, #104	; 0x68
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000879c 	.word	0x2000879c
 8000dc0:	40016800 	.word	0x40016800

08000dc4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	; 0x38
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a7b      	ldr	r2, [pc, #492]	; (8000fd0 <HAL_LTDC_MspInit+0x20c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	f040 80f0 	bne.w	8000fc8 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	4b79      	ldr	r3, [pc, #484]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	4a78      	ldr	r2, [pc, #480]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000df6:	6453      	str	r3, [r2, #68]	; 0x44
 8000df8:	4b76      	ldr	r3, [pc, #472]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e00:	623b      	str	r3, [r7, #32]
 8000e02:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a71      	ldr	r2, [pc, #452]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
 8000e14:	4b6f      	ldr	r3, [pc, #444]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a6a      	ldr	r2, [pc, #424]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b68      	ldr	r3, [pc, #416]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a63      	ldr	r2, [pc, #396]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a5c      	ldr	r2, [pc, #368]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b5a      	ldr	r3, [pc, #360]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a55      	ldr	r2, [pc, #340]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <HAL_LTDC_MspInit+0x210>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ebe:	230e      	movs	r3, #14
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4843      	ldr	r0, [pc, #268]	; (8000fd8 <HAL_LTDC_MspInit+0x214>)
 8000eca:	f003 fe29 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000ece:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ee0:	230e      	movs	r3, #14
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	483c      	ldr	r0, [pc, #240]	; (8000fdc <HAL_LTDC_MspInit+0x218>)
 8000eec:	f003 fe18 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f00:	2309      	movs	r3, #9
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4835      	ldr	r0, [pc, #212]	; (8000fe0 <HAL_LTDC_MspInit+0x21c>)
 8000f0c:	f003 fe08 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000f10:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f22:	230e      	movs	r3, #14
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	482c      	ldr	r0, [pc, #176]	; (8000fe0 <HAL_LTDC_MspInit+0x21c>)
 8000f2e:	f003 fdf7 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f32:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f44:	230e      	movs	r3, #14
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4825      	ldr	r0, [pc, #148]	; (8000fe4 <HAL_LTDC_MspInit+0x220>)
 8000f50:	f003 fde6 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f54:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f66:	230e      	movs	r3, #14
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481d      	ldr	r0, [pc, #116]	; (8000fe8 <HAL_LTDC_MspInit+0x224>)
 8000f72:	f003 fdd5 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f76:	2348      	movs	r3, #72	; 0x48
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f86:	230e      	movs	r3, #14
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4816      	ldr	r0, [pc, #88]	; (8000fec <HAL_LTDC_MspInit+0x228>)
 8000f92:	f003 fdc5 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <HAL_LTDC_MspInit+0x220>)
 8000fb4:	f003 fdb4 	bl	8004b20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2105      	movs	r1, #5
 8000fbc:	2058      	movs	r0, #88	; 0x58
 8000fbe:	f003 f811 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fc2:	2058      	movs	r0, #88	; 0x58
 8000fc4:	f003 f82a 	bl	800401c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3738      	adds	r7, #56	; 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40016800 	.word	0x40016800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40021400 	.word	0x40021400
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b093      	sub	sp, #76	; 0x4c
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f002 fed9 	bl	8003dac <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f89d 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f7ff fc4d 	bl	800089c <MX_GPIO_Init>
  MX_CRC_Init();
 8001002:	f7ff fa75 	bl	80004f0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001006:	f7ff faa9 	bl	800055c <MX_DMA2D_Init>
  MX_FMC_Init();
 800100a:	f7ff fb01 	bl	8000610 <MX_FMC_Init>
  MX_I2C3_Init();
 800100e:	f7ff fd55 	bl	8000abc <MX_I2C3_Init>
  MX_LTDC_Init();
 8001012:	f7ff fe23 	bl	8000c5c <MX_LTDC_Init>
  MX_SPI5_Init();
 8001016:	f000 f92d 	bl	8001274 <MX_SPI5_Init>
  MX_TIM1_Init();
 800101a:	f000 fadb 	bl	80015d4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800101e:	f000 fcf7 	bl	8001a10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char buffer [sizeof(int)*8+1];
  int polozenie_x;
  int polozenie_y=10;
 8001022:	230a      	movs	r3, #10
 8001024:	643b      	str	r3, [r7, #64]	; 0x40

  // klocki
  int wysokosc = 5;
 8001026:	2305      	movs	r3, #5
 8001028:	63fb      	str	r3, [r7, #60]	; 0x3c
  int szerokosc = 10;
 800102a:	230a      	movs	r3, #10
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38

  BSP_LCD_Init();
 800102e:	f001 fd27 	bl	8002a80 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8001032:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001036:	2001      	movs	r0, #1
 8001038:	f001 fda4 	bl	8002b84 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f001 fe05 	bl	8002c4c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001042:	4839      	ldr	r0, [pc, #228]	; (8001128 <main+0x138>)
 8001044:	f001 feb0 	bl	8002da8 <BSP_LCD_Clear>
  //HAL_Delay(1000);
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	2001      	movs	r0, #1
 800104e:	f001 fe4b 	bl	8002ce8 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8001052:	2100      	movs	r1, #0
 8001054:	2001      	movs	r0, #1
 8001056:	f001 fe09 	bl	8002c6c <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 800105a:	4934      	ldr	r1, [pc, #208]	; (800112c <main+0x13c>)
 800105c:	2000      	movs	r0, #0
 800105e:	f001 fd91 	bl	8002b84 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8001062:	2000      	movs	r0, #0
 8001064:	f001 fdf2 	bl	8002c4c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001068:	f002 f9ec 	bl	8003444 <BSP_LCD_DisplayOn>

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f001 fe9a 	bl	8002da8 <BSP_LCD_Clear>

  BSP_LCD_SetFont(&Font12);
 8001074:	482e      	ldr	r0, [pc, #184]	; (8001130 <main+0x140>)
 8001076:	f001 fe7d 	bl	8002d74 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800107a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800107e:	f001 fe47 	bl	8002d10 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001082:	f04f 30ff 	mov.w	r0, #4294967295
 8001086:	f001 fe5b 	bl	8002d40 <BSP_LCD_SetBackColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"STATUS OK", CENTER_MODE);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen is initialized", CENTER_MODE);
  }*/
  Touchscreen_Calibration();
 800108a:	f000 fb15 	bl	80016b8 <Touchscreen_Calibration>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800108e:	f001 fd61 	bl	8002b54 <BSP_LCD_GetXSize>
 8001092:	4603      	mov	r3, r0
 8001094:	b29c      	uxth	r4, r3
 8001096:	f001 fd69 	bl	8002b6c <BSP_LCD_GetYSize>
 800109a:	4603      	mov	r3, r0
 800109c:	b29b      	uxth	r3, r3
 800109e:	4619      	mov	r1, r3
 80010a0:	4620      	mov	r0, r4
 80010a2:	f002 fd97 	bl	8003bd4 <BSP_TS_Init>
  BSP_LCD_Clear(LCD_COLOR_RED); //
 80010a6:	4823      	ldr	r0, [pc, #140]	; (8001134 <main+0x144>)
 80010a8:	f001 fe7e 	bl	8002da8 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80010ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010b0:	f001 fe46 	bl	8002d40 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80010b4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80010b8:	f001 fe2a 	bl	8002d10 <BSP_LCD_SetTextColor>
  polozenie_x=BSP_LCD_GetXSize()/2;
 80010bc:	f001 fd4a 	bl	8002b54 <BSP_LCD_GetXSize>
 80010c0:	4603      	mov	r3, r0
 80010c2:	085b      	lsrs	r3, r3, #1
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  //BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Hello, world!", CENTER_MODE);

  BSP_LCD_SetBackColor(LCD_COLOR_YELLOW); // Ustaw kolor tła na żółty
 80010c6:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80010ca:	f001 fe39 	bl	8002d40 <BSP_LCD_SetBackColor>
      for (int i = 0; i < 5; i++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
 80010d2:	e00f      	b.n	80010f4 <main+0x104>
          uint16_t x = i * 10; // Oblicz pozycję X dla każdego klocka
 80010d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
          BSP_LCD_FillRect(x, 0, 10, 5); // Narysuj prostokąt (klocek) o zadanej szerokości i wysokości
 80010e2:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 80010e4:	2305      	movs	r3, #5
 80010e6:	220a      	movs	r2, #10
 80010e8:	2100      	movs	r1, #0
 80010ea:	f002 f8b1 	bl	8003250 <BSP_LCD_FillRect>
      for (int i = 0; i < 5; i++) {
 80010ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f0:	3301      	adds	r3, #1
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
 80010f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	ddec      	ble.n	80010d4 <main+0xe4>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010fa:	f7ff fba9 	bl	8000850 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80010fe:	f00c ff7d 	bl	800dffc <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TS_StateTypeDef  TS_State;
	   uint16_t x = 0, y = 0; // Zmienne na współrzędne X i Y
 8001102:	2300      	movs	r3, #0
 8001104:	867b      	strh	r3, [r7, #50]	; 0x32
 8001106:	2300      	movs	r3, #0
 8001108:	863b      	strh	r3, [r7, #48]	; 0x30
	   BSP_TS_GetState(&TS_State);
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fd9b 	bl	8003c48 <BSP_TS_GetState>
	          if (TS_State.TouchDetected !=0) {
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <main+0x130>
	              x = TS_State.X; // Pierwszy punkt dotknięcia
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	867b      	strh	r3, [r7, #50]	; 0x32
	              y = TS_State.Y;
 800111c:	893b      	ldrh	r3, [r7, #8]
 800111e:	863b      	strh	r3, [r7, #48]	; 0x30
//			  itoa (y,buffer,10);
//			  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 112, (uint8_t*)"Y:", LEFT_MODE);
//			  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 112, (uint8_t*)buffer, CENTER_MODE);
//		  }

	  HAL_Delay(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f002 fe85 	bl	8003e30 <HAL_Delay>
  {
 8001126:	e7ec      	b.n	8001102 <main+0x112>
 8001128:	ff0000ff 	.word	0xff0000ff
 800112c:	d0130000 	.word	0xd0130000
 8001130:	20000074 	.word	0x20000074
 8001134:	ffff0000 	.word	0xffff0000

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0a0      	sub	sp, #128	; 0x80
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00f fcd9 	bl	8010afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2230      	movs	r2, #48	; 0x30
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00f fcca 	bl	8010afe <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <SystemClock_Config+0x100>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a31      	ldr	r2, [pc, #196]	; (8001238 <SystemClock_Config+0x100>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <SystemClock_Config+0x100>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <SystemClock_Config+0x104>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001192:	4a2a      	ldr	r2, [pc, #168]	; (800123c <SystemClock_Config+0x104>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <SystemClock_Config+0x104>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ba:	2304      	movs	r3, #4
 80011bc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011be:	2348      	movs	r3, #72	; 0x48
 80011c0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011c6:	2303      	movs	r3, #3
 80011c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 f8e0 	bl	8008394 <HAL_RCC_OscConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011da:	f000 f843 	bl	8001264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	230f      	movs	r3, #15
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	2302      	movs	r3, #2
 80011e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011f8:	2102      	movs	r1, #2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f007 fb3a 	bl	8008874 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001206:	f000 f82d 	bl	8001264 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800120a:	2308      	movs	r3, #8
 800120c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800120e:	2332      	movs	r3, #50	; 0x32
 8001210:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001212:	2302      	movs	r3, #2
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001216:	2300      	movs	r3, #0
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4618      	mov	r0, r3
 8001220:	f007 fd4c 	bl	8008cbc <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800122a:	f000 f81b 	bl	8001264 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3780      	adds	r7, #128	; 0x80
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40007000 	.word	0x40007000

08001240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001252:	f002 fdcd 	bl	8003df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40001000 	.word	0x40001000

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_SPI5_Init+0x64>)
 800127a:	4a18      	ldr	r2, [pc, #96]	; (80012dc <MX_SPI5_Init+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_SPI5_Init+0x64>)
 8001280:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001284:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_SPI5_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_SPI5_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_SPI5_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_SPI5_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_SPI5_Init+0x64>)
 80012a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_SPI5_Init+0x64>)
 80012a8:	2218      	movs	r2, #24
 80012aa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <MX_SPI5_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_SPI5_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <MX_SPI5_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_SPI5_Init+0x64>)
 80012c0:	220a      	movs	r2, #10
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_SPI5_Init+0x64>)
 80012c6:	f007 ff36 	bl	8009136 <HAL_SPI_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80012d0:	f7ff ffc8 	bl	8001264 <Error_Handler>
  }

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20008844 	.word	0x20008844
 80012dc:	40015000 	.word	0x40015000

080012e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_SPI_MspInit+0x84>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d12c      	bne.n	800135c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_SPI_MspInit+0x88>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_SPI_MspInit+0x88>)
 800130c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_SPI_MspInit+0x88>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_SPI_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_SPI_MspInit+0x88>)
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_SPI_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800133a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800134c:	2305      	movs	r3, #5
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_SPI_MspInit+0x8c>)
 8001358:	f003 fbe2 	bl	8004b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40015000 	.word	0x40015000
 8001368:	40023800 	.word	0x40023800
 800136c:	40021400 	.word	0x40021400

08001370 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_SPI_MspDeInit+0x30>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10a      	bne.n	8001398 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_SPI_MspDeInit+0x34>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_SPI_MspDeInit+0x34>)
 8001388:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800138e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_SPI_MspDeInit+0x38>)
 8001394:	f003 fd6e 	bl	8004e74 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40015000 	.word	0x40015000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40021400 	.word	0x40021400

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_MspInit+0x54>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_MspInit+0x54>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x54>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_MspInit+0x54>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_MspInit+0x54>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_MspInit+0x54>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	210f      	movs	r1, #15
 80013ee:	f06f 0001 	mvn.w	r0, #1
 80013f2:	f002 fdf7 	bl	8003fe4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f002 fde3 	bl	8003fe4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800141e:	2036      	movs	r0, #54	; 0x36
 8001420:	f002 fdfc 	bl	800401c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <HAL_InitTick+0xa4>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_InitTick+0xa4>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_InitTick+0xa4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001440:	f107 0210 	add.w	r2, r7, #16
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f007 fc04 	bl	8008c58 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001450:	f007 fbda 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 8001454:	4603      	mov	r3, r0
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	4a13      	ldr	r2, [pc, #76]	; (80014ac <HAL_InitTick+0xa8>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9b      	lsrs	r3, r3, #18
 8001464:	3b01      	subs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_InitTick+0xac>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <HAL_InitTick+0xb0>)
 800146c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_InitTick+0xac>)
 8001470:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001474:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_InitTick+0xac>)
 8001478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_InitTick+0xac>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_InitTick+0xac>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <HAL_InitTick+0xac>)
 800148a:	f008 fbdf 	bl	8009c4c <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d104      	bne.n	800149e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001494:	4806      	ldr	r0, [pc, #24]	; (80014b0 <HAL_InitTick+0xac>)
 8001496:	f008 fc04 	bl	8009ca2 <HAL_TIM_Base_Start_IT>
 800149a:	4603      	mov	r3, r0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	2000889c 	.word	0x2000889c
 80014b4:	40001000 	.word	0x40001000

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM6_DAC_IRQHandler+0x10>)
 80014f2:	f008 fbfa 	bl	8009cea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000889c 	.word	0x2000889c

08001500 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <OTG_HS_IRQHandler+0x10>)
 8001506:	f004 f867 	bl	80055d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20008e44 	.word	0x20008e44

08001514 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <LTDC_IRQHandler+0x10>)
 800151a:	f006 fbfb 	bl	8007d14 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000879c 	.word	0x2000879c

08001528 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA2D_IRQHandler+0x10>)
 800152e:	f003 f8b8 	bl	80046a2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200086d0 	.word	0x200086d0

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f00f fa82 	bl	8010a74 <__errno>
 8001570:	4602      	mov	r2, r0
 8001572:	230c      	movs	r3, #12
 8001574:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20030000 	.word	0x20030000
 800159c:	00000400 	.word	0x00000400
 80015a0:	20000388 	.word	0x20000388
 80015a4:	20009110 	.word	0x20009110

080015a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <SystemInit+0x28>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <SystemInit+0x28>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <SystemInit+0x28>)
 80015be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c2:	609a      	str	r2, [r3, #8]
#endif
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <MX_TIM1_Init+0x98>)
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <MX_TIM1_Init+0x9c>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_TIM1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_TIM1_Init+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_TIM1_Init+0x98>)
 8001604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001608:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_TIM1_Init+0x98>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_TIM1_Init+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_TIM1_Init+0x98>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <MX_TIM1_Init+0x98>)
 800161e:	f008 fb15 	bl	8009c4c <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001628:	f7ff fe1c 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4619      	mov	r1, r3
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <MX_TIM1_Init+0x98>)
 800163a:	f008 fc5e 	bl	8009efa <HAL_TIM_ConfigClockSource>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001644:	f7ff fe0e 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_TIM1_Init+0x98>)
 8001656:	f008 fe69 	bl	800a32c <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001660:	f7ff fe00 	bl	8001264 <Error_Handler>
  }

}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200088dc 	.word	0x200088dc
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10d      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40023800 	.word	0x40023800

080016b8 <Touchscreen_Calibration>:
  * @brief  Performs the TS calibration
  * @param  None
  * @retval None
  */
void Touchscreen_Calibration(void)
{ 
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]

  TouchscreenCalibration_SetHint();
 80016c6:	f000 f8f1 	bl	80018ac <TouchscreenCalibration_SetHint>
  
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80016ca:	f001 fa43 	bl	8002b54 <BSP_LCD_GetXSize>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b29c      	uxth	r4, r3
 80016d2:	f001 fa4b 	bl	8002b6c <BSP_LCD_GetYSize>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	4620      	mov	r0, r4
 80016de:	f002 fa79 	bl	8003bd4 <BSP_TS_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	71bb      	strb	r3, [r7, #6]
  
  if (status != TS_OK)
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01c      	beq.n	8001726 <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f001 fb26 	bl	8002d40 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80016f4:	4861      	ldr	r0, [pc, #388]	; (800187c <Touchscreen_Calibration+0x1c4>)
 80016f6:	f001 fb0b 	bl	8002d10 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 80016fa:	f001 fa37 	bl	8002b6c <BSP_LCD_GetYSize>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29b      	uxth	r3, r3
 8001702:	3b5f      	subs	r3, #95	; 0x5f
 8001704:	b299      	uxth	r1, r3
 8001706:	2301      	movs	r3, #1
 8001708:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <Touchscreen_Calibration+0x1c8>)
 800170a:	2000      	movs	r0, #0
 800170c:	f001 fbb8 	bl	8002e80 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 8001710:	f001 fa2c 	bl	8002b6c <BSP_LCD_GetYSize>
 8001714:	4603      	mov	r3, r0
 8001716:	b29b      	uxth	r3, r3
 8001718:	3b50      	subs	r3, #80	; 0x50
 800171a:	b299      	uxth	r1, r3
 800171c:	2301      	movs	r3, #1
 800171e:	4a59      	ldr	r2, [pc, #356]	; (8001884 <Touchscreen_Calibration+0x1cc>)
 8001720:	2000      	movs	r0, #0
 8001722:	f001 fbad 	bl	8002e80 <BSP_LCD_DisplayStringAt>
  }
  
  while (1)
  {
    if (status == TS_OK)
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	2b00      	cmp	r3, #0
 800172a:	f040 80a0 	bne.w	800186e <Touchscreen_Calibration+0x1b6>
    {
      aLogX[0] = 15;
 800172e:	4b56      	ldr	r3, [pc, #344]	; (8001888 <Touchscreen_Calibration+0x1d0>)
 8001730:	220f      	movs	r2, #15
 8001732:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 8001734:	4b55      	ldr	r3, [pc, #340]	; (800188c <Touchscreen_Calibration+0x1d4>)
 8001736:	220f      	movs	r2, #15
 8001738:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 800173a:	f001 fa0b 	bl	8002b54 <BSP_LCD_GetXSize>
 800173e:	4603      	mov	r3, r0
 8001740:	b29b      	uxth	r3, r3
 8001742:	3b0f      	subs	r3, #15
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21a      	sxth	r2, r3
 8001748:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <Touchscreen_Calibration+0x1d0>)
 800174a:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 800174c:	f001 fa0e 	bl	8002b6c <BSP_LCD_GetYSize>
 8001750:	4603      	mov	r3, r0
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b0f      	subs	r3, #15
 8001756:	b29b      	uxth	r3, r3
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b4c      	ldr	r3, [pc, #304]	; (800188c <Touchscreen_Calibration+0x1d4>)
 800175c:	805a      	strh	r2, [r3, #2]
      
      for (i = 0; i < 2; i++) 
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e015      	b.n	8001790 <Touchscreen_Calibration+0xd8>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a48      	ldr	r2, [pc, #288]	; (8001888 <Touchscreen_Calibration+0x1d0>)
 8001768:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a47      	ldr	r2, [pc, #284]	; (800188c <Touchscreen_Calibration+0x1d4>)
 8001770:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4a45      	ldr	r2, [pc, #276]	; (8001890 <Touchscreen_Calibration+0x1d8>)
 800177a:	189c      	adds	r4, r3, r2
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4a44      	ldr	r2, [pc, #272]	; (8001894 <Touchscreen_Calibration+0x1dc>)
 8001782:	4413      	add	r3, r2
 8001784:	4622      	mov	r2, r4
 8001786:	f000 f8d1 	bl	800192c <GetPhysValues>
      for (i = 0; i < 2; i++) 
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	3301      	adds	r3, #1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d9e6      	bls.n	8001764 <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <Touchscreen_Calibration+0x1d0>)
 8001798:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800179c:	461a      	mov	r2, r3
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <Touchscreen_Calibration+0x1d0>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017aa:	fb02 f203 	mul.w	r2, r2, r3
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <Touchscreen_Calibration+0x1d8>)
 80017b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <Touchscreen_Calibration+0x1d8>)
 80017b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017bc:	1acb      	subs	r3, r1, r3
 80017be:	fb92 f3f3 	sdiv	r3, r2, r3
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <Touchscreen_Calibration+0x1e0>)
 80017c6:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <Touchscreen_Calibration+0x1d0>)
 80017ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	0152      	lsls	r2, r2, #5
 80017d4:	1ad2      	subs	r2, r2, r3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <Touchscreen_Calibration+0x1d8>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	b299      	uxth	r1, r3
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <Touchscreen_Calibration+0x1e0>)
 80017e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	fb11 f303 	smulbb	r3, r1, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	4b28      	ldr	r3, [pc, #160]	; (800189c <Touchscreen_Calibration+0x1e4>)
 80017fc:	801a      	strh	r2, [r3, #0]
      
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <Touchscreen_Calibration+0x1d4>)
 8001800:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001804:	461a      	mov	r2, r3
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <Touchscreen_Calibration+0x1d4>)
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001812:	fb02 f203 	mul.w	r2, r2, r3
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <Touchscreen_Calibration+0x1dc>)
 8001818:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800181c:	4619      	mov	r1, r3
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <Touchscreen_Calibration+0x1dc>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	1acb      	subs	r3, r1, r3
 8001826:	fb92 f3f3 	sdiv	r3, r2, r3
 800182a:	b21a      	sxth	r2, r3
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <Touchscreen_Calibration+0x1e8>)
 800182e:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <Touchscreen_Calibration+0x1d4>)
 8001832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	0152      	lsls	r2, r2, #5
 800183c:	1ad2      	subs	r2, r2, r3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <Touchscreen_Calibration+0x1dc>)
 8001848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184c:	b299      	uxth	r1, r3
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <Touchscreen_Calibration+0x1e8>)
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	b29b      	uxth	r3, r3
 8001856:	fb11 f303 	smulbb	r3, r1, r3
 800185a:	b29b      	uxth	r3, r3
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <Touchscreen_Calibration+0x1ec>)
 8001864:	801a      	strh	r2, [r3, #0]
      
      Calibration_Done = 1;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <Touchscreen_Calibration+0x1f0>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
      return;
 800186c:	e003      	b.n	8001876 <Touchscreen_Calibration+0x1be>
    }
   
    HAL_Delay(5);
 800186e:	2005      	movs	r0, #5
 8001870:	f002 fade 	bl	8003e30 <HAL_Delay>
    if (status == TS_OK)
 8001874:	e757      	b.n	8001726 <Touchscreen_Calibration+0x6e>
  }
}
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	ffff0000 	.word	0xffff0000
 8001880:	08010cc4 	.word	0x08010cc4
 8001884:	08010ccc 	.word	0x08010ccc
 8001888:	200003a8 	.word	0x200003a8
 800188c:	200003ac 	.word	0x200003ac
 8001890:	200003a0 	.word	0x200003a0
 8001894:	200003a4 	.word	0x200003a4
 8001898:	20000396 	.word	0x20000396
 800189c:	2000039a 	.word	0x2000039a
 80018a0:	20000398 	.word	0x20000398
 80018a4:	2000039c 	.word	0x2000039c
 80018a8:	20000394 	.word	0x20000394

080018ac <TouchscreenCalibration_SetHint>:
  * @brief  Display calibration hint
  * @param  None
  * @retval None
  */
static void TouchscreenCalibration_SetHint(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f001 fa78 	bl	8002da8 <BSP_LCD_Clear>
  
  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80018b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018bc:	f001 fa28 	bl	8002d10 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f001 fa3c 	bl	8002d40 <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 80018c8:	4814      	ldr	r0, [pc, #80]	; (800191c <TouchscreenCalibration_SetHint+0x70>)
 80018ca:	f001 fa53 	bl	8002d74 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 80018ce:	f001 f94d 	bl	8002b6c <BSP_LCD_GetYSize>
 80018d2:	4603      	mov	r3, r0
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b1b      	subs	r3, #27
 80018da:	b299      	uxth	r1, r3
 80018dc:	2301      	movs	r3, #1
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <TouchscreenCalibration_SetHint+0x74>)
 80018e0:	2000      	movs	r0, #0
 80018e2:	f001 facd 	bl	8002e80 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 80018e6:	f001 f941 	bl	8002b6c <BSP_LCD_GetYSize>
 80018ea:	4603      	mov	r3, r0
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b0c      	subs	r3, #12
 80018f2:	b299      	uxth	r1, r3
 80018f4:	2301      	movs	r3, #1
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <TouchscreenCalibration_SetHint+0x78>)
 80018f8:	2000      	movs	r0, #0
 80018fa:	f001 fac1 	bl	8002e80 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 80018fe:	f001 f935 	bl	8002b6c <BSP_LCD_GetYSize>
 8001902:	4603      	mov	r3, r0
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	3303      	adds	r3, #3
 800190a:	b299      	uxth	r1, r3
 800190c:	2301      	movs	r3, #1
 800190e:	4a06      	ldr	r2, [pc, #24]	; (8001928 <TouchscreenCalibration_SetHint+0x7c>)
 8001910:	2000      	movs	r0, #0
 8001912:	f001 fab5 	bl	8002e80 <BSP_LCD_DisplayStringAt>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000074 	.word	0x20000074
 8001920:	08010cf0 	.word	0x08010cf0
 8001924:	08010d10 	.word	0x08010d10
 8001928:	08010d2c 	.word	0x08010d2c

0800192c <GetPhysValues>:
  * @param  pPhysX : Physical X position
  * @param  pPhysY : Physical Y position
  * @retval None
  */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t * pPhysX, int16_t * pPhysY) 
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60ba      	str	r2, [r7, #8]
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4603      	mov	r3, r0
 8001938:	81fb      	strh	r3, [r7, #14]
 800193a:	460b      	mov	r3, r1
 800193c:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800193e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001942:	f001 f9e5 	bl	8002d10 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8001946:	89fb      	ldrh	r3, [r7, #14]
 8001948:	89b9      	ldrh	r1, [r7, #12]
 800194a:	2205      	movs	r2, #5
 800194c:	4618      	mov	r0, r3
 800194e:	f001 fcd9 	bl	8003304 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001952:	f04f 30ff 	mov.w	r0, #4294967295
 8001956:	f001 f9db 	bl	8002d10 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	89b9      	ldrh	r1, [r7, #12]
 800195e:	2202      	movs	r2, #2
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fccf 	bl	8003304 <BSP_LCD_FillCircle>
  
  /* Wait until touch is pressed */
  WaitForPressedState(1);
 8001966:	2001      	movs	r0, #1
 8001968:	f000 f820 	bl	80019ac <WaitForPressedState>
  
  BSP_TS_GetState(&TS_State);
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <GetPhysValues+0x7c>)
 800196e:	f002 f96b 	bl	8003c48 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <GetPhysValues+0x7c>)
 8001974:	885b      	ldrh	r3, [r3, #2]
 8001976:	b21a      	sxth	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y; 
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <GetPhysValues+0x7c>)
 800197e:	889b      	ldrh	r3, [r3, #4]
 8001980:	b21a      	sxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	801a      	strh	r2, [r3, #0]
  
  /* Wait until touch is released */
  WaitForPressedState(0);
 8001986:	2000      	movs	r0, #0
 8001988:	f000 f810 	bl	80019ac <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f001 f9be 	bl	8002d10 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8001994:	89fb      	ldrh	r3, [r7, #14]
 8001996:	89b9      	ldrh	r1, [r7, #12]
 8001998:	2205      	movs	r2, #5
 800199a:	4618      	mov	r0, r3
 800199c:	f001 fcb2 	bl	8003304 <BSP_LCD_FillCircle>
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000038c 	.word	0x2000038c

080019ac <WaitForPressedState>:
  * @brief  Wait For Pressed State
  * @param  Pressed: Pressed State
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef  State;
  
  do 
  {
    BSP_TS_GetState(&State);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 f944 	bl	8003c48 <BSP_TS_GetState>
    HAL_Delay(10);
 80019c0:	200a      	movs	r0, #10
 80019c2:	f002 fa35 	bl	8003e30 <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 80019c6:	89ba      	ldrh	r2, [r7, #12]
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1f2      	bne.n	80019b6 <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 80019d0:	f002 fa22 	bl	8003e18 <HAL_GetTick>
 80019d4:	4603      	mov	r3, r0
 80019d6:	82fb      	strh	r3, [r7, #22]
      do {
        BSP_TS_GetState(&State);      
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f933 	bl	8003c48 <BSP_TS_GetState>
        HAL_Delay(10);
 80019e2:	200a      	movs	r0, #10
 80019e4:	f002 fa24 	bl	8003e30 <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 80019e8:	89ba      	ldrh	r2, [r7, #12]
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d108      	bne.n	8001a04 <WaitForPressedState+0x58>
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 80019f2:	f002 fa11 	bl	8003e18 <HAL_GetTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80019fc:	8afb      	ldrh	r3, [r7, #22]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d802      	bhi.n	8001a08 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);      
 8001a02:	e7e9      	b.n	80019d8 <WaitForPressedState+0x2c>
          break;
 8001a04:	bf00      	nop
    BSP_TS_GetState(&State);
 8001a06:	e7d6      	b.n	80019b6 <WaitForPressedState+0xa>
        {
          return;
 8001a08:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <MX_USART1_UART_Init+0x50>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a48:	f008 fd00 	bl	800a44c <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a52:	f7ff fc07 	bl	8001264 <Error_Handler>
  }

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000891c 	.word	0x2000891c
 8001a60:	40011000 	.word	0x40011000

08001a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_UART_MspInit+0x84>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12c      	bne.n	8001ae0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001abe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_UART_MspInit+0x8c>)
 8001adc:	f003 f820 	bl	8004b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40011000 	.word	0x40011000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b2c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001afa:	e003      	b.n	8001b04 <LoopCopyDataInit>

08001afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b02:	3104      	adds	r1, #4

08001b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b0c:	d3f6      	bcc.n	8001afc <CopyDataInit>
  ldr  r2, =_sbss
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b10:	e002      	b.n	8001b18 <LoopFillZerobss>

08001b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b14:	f842 3b04 	str.w	r3, [r2], #4

08001b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b1c:	d3f9      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b1e:	f7ff fd43 	bl	80015a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f00e ffad 	bl	8010a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b26:	f7ff fa63 	bl	8000ff0 <main>
  bx  lr    
 8001b2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b2c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001b30:	08012ce8 	.word	0x08012ce8
  ldr  r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b38:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8001b3c:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8001b40:	2000910c 	.word	0x2000910c

08001b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>

08001b46 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001b4a:	f000 fe4b 	bl	80027e4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001b4e:	20ca      	movs	r0, #202	; 0xca
 8001b50:	f000 f95d 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001b54:	20c3      	movs	r0, #195	; 0xc3
 8001b56:	f000 f967 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001b5a:	2008      	movs	r0, #8
 8001b5c:	f000 f964 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001b60:	2050      	movs	r0, #80	; 0x50
 8001b62:	f000 f961 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001b66:	20cf      	movs	r0, #207	; 0xcf
 8001b68:	f000 f951 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f000 f95b 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001b72:	20c1      	movs	r0, #193	; 0xc1
 8001b74:	f000 f958 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001b78:	2030      	movs	r0, #48	; 0x30
 8001b7a:	f000 f955 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001b7e:	20ed      	movs	r0, #237	; 0xed
 8001b80:	f000 f945 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001b84:	2064      	movs	r0, #100	; 0x64
 8001b86:	f000 f94f 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f000 f94c 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001b90:	2012      	movs	r0, #18
 8001b92:	f000 f949 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001b96:	2081      	movs	r0, #129	; 0x81
 8001b98:	f000 f946 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001b9c:	20e8      	movs	r0, #232	; 0xe8
 8001b9e:	f000 f936 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001ba2:	2085      	movs	r0, #133	; 0x85
 8001ba4:	f000 f940 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f000 f93d 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001bae:	2078      	movs	r0, #120	; 0x78
 8001bb0:	f000 f93a 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001bb4:	20cb      	movs	r0, #203	; 0xcb
 8001bb6:	f000 f92a 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001bba:	2039      	movs	r0, #57	; 0x39
 8001bbc:	f000 f934 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001bc0:	202c      	movs	r0, #44	; 0x2c
 8001bc2:	f000 f931 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f92e 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001bcc:	2034      	movs	r0, #52	; 0x34
 8001bce:	f000 f92b 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f000 f928 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001bd8:	20f7      	movs	r0, #247	; 0xf7
 8001bda:	f000 f918 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001bde:	2020      	movs	r0, #32
 8001be0:	f000 f922 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001be4:	20ea      	movs	r0, #234	; 0xea
 8001be6:	f000 f912 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 f91c 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 f919 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001bf6:	20b1      	movs	r0, #177	; 0xb1
 8001bf8:	f000 f909 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 f913 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001c02:	201b      	movs	r0, #27
 8001c04:	f000 f910 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001c08:	20b6      	movs	r0, #182	; 0xb6
 8001c0a:	f000 f900 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001c0e:	200a      	movs	r0, #10
 8001c10:	f000 f90a 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001c14:	20a2      	movs	r0, #162	; 0xa2
 8001c16:	f000 f907 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001c1a:	20c0      	movs	r0, #192	; 0xc0
 8001c1c:	f000 f8f7 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001c20:	2010      	movs	r0, #16
 8001c22:	f000 f901 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001c26:	20c1      	movs	r0, #193	; 0xc1
 8001c28:	f000 f8f1 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001c2c:	2010      	movs	r0, #16
 8001c2e:	f000 f8fb 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001c32:	20c5      	movs	r0, #197	; 0xc5
 8001c34:	f000 f8eb 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001c38:	2045      	movs	r0, #69	; 0x45
 8001c3a:	f000 f8f5 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001c3e:	2015      	movs	r0, #21
 8001c40:	f000 f8f2 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001c44:	20c7      	movs	r0, #199	; 0xc7
 8001c46:	f000 f8e2 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001c4a:	2090      	movs	r0, #144	; 0x90
 8001c4c:	f000 f8ec 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001c50:	2036      	movs	r0, #54	; 0x36
 8001c52:	f000 f8dc 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001c56:	20c8      	movs	r0, #200	; 0xc8
 8001c58:	f000 f8e6 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001c5c:	20f2      	movs	r0, #242	; 0xf2
 8001c5e:	f000 f8d6 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f8e0 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001c68:	20b0      	movs	r0, #176	; 0xb0
 8001c6a:	f000 f8d0 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001c6e:	20c2      	movs	r0, #194	; 0xc2
 8001c70:	f000 f8da 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001c74:	20b6      	movs	r0, #182	; 0xb6
 8001c76:	f000 f8ca 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	f000 f8d4 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001c80:	20a7      	movs	r0, #167	; 0xa7
 8001c82:	f000 f8d1 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001c86:	2027      	movs	r0, #39	; 0x27
 8001c88:	f000 f8ce 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001c8c:	2004      	movs	r0, #4
 8001c8e:	f000 f8cb 	bl	8001e28 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001c92:	202a      	movs	r0, #42	; 0x2a
 8001c94:	f000 f8bb 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 f8c5 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f8c2 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 f8bf 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001caa:	20ef      	movs	r0, #239	; 0xef
 8001cac:	f000 f8bc 	bl	8001e28 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001cb0:	202b      	movs	r0, #43	; 0x2b
 8001cb2:	f000 f8ac 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f000 f8b6 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f000 f8b3 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 f8b0 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001cc8:	203f      	movs	r0, #63	; 0x3f
 8001cca:	f000 f8ad 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001cce:	20f6      	movs	r0, #246	; 0xf6
 8001cd0:	f000 f89d 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f000 f8a7 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f8a4 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001ce0:	2006      	movs	r0, #6
 8001ce2:	f000 f8a1 	bl	8001e28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001ce6:	202c      	movs	r0, #44	; 0x2c
 8001ce8:	f000 f891 	bl	8001e0e <ili9341_WriteReg>
  LCD_Delay(200);
 8001cec:	20c8      	movs	r0, #200	; 0xc8
 8001cee:	f000 fe67 	bl	80029c0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001cf2:	2026      	movs	r0, #38	; 0x26
 8001cf4:	f000 f88b 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f000 f895 	bl	8001e28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001cfe:	20e0      	movs	r0, #224	; 0xe0
 8001d00:	f000 f885 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001d04:	200f      	movs	r0, #15
 8001d06:	f000 f88f 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001d0a:	2029      	movs	r0, #41	; 0x29
 8001d0c:	f000 f88c 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001d10:	2024      	movs	r0, #36	; 0x24
 8001d12:	f000 f889 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001d16:	200c      	movs	r0, #12
 8001d18:	f000 f886 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001d1c:	200e      	movs	r0, #14
 8001d1e:	f000 f883 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001d22:	2009      	movs	r0, #9
 8001d24:	f000 f880 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001d28:	204e      	movs	r0, #78	; 0x4e
 8001d2a:	f000 f87d 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d2e:	2078      	movs	r0, #120	; 0x78
 8001d30:	f000 f87a 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001d34:	203c      	movs	r0, #60	; 0x3c
 8001d36:	f000 f877 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001d3a:	2009      	movs	r0, #9
 8001d3c:	f000 f874 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001d40:	2013      	movs	r0, #19
 8001d42:	f000 f871 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001d46:	2005      	movs	r0, #5
 8001d48:	f000 f86e 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001d4c:	2017      	movs	r0, #23
 8001d4e:	f000 f86b 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001d52:	2011      	movs	r0, #17
 8001d54:	f000 f868 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f000 f865 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001d5e:	20e1      	movs	r0, #225	; 0xe1
 8001d60:	f000 f855 	bl	8001e0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f85f 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001d6a:	2016      	movs	r0, #22
 8001d6c:	f000 f85c 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001d70:	201b      	movs	r0, #27
 8001d72:	f000 f859 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001d76:	2004      	movs	r0, #4
 8001d78:	f000 f856 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001d7c:	2011      	movs	r0, #17
 8001d7e:	f000 f853 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001d82:	2007      	movs	r0, #7
 8001d84:	f000 f850 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001d88:	2031      	movs	r0, #49	; 0x31
 8001d8a:	f000 f84d 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001d8e:	2033      	movs	r0, #51	; 0x33
 8001d90:	f000 f84a 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001d94:	2042      	movs	r0, #66	; 0x42
 8001d96:	f000 f847 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001d9a:	2005      	movs	r0, #5
 8001d9c:	f000 f844 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001da0:	200c      	movs	r0, #12
 8001da2:	f000 f841 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001da6:	200a      	movs	r0, #10
 8001da8:	f000 f83e 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001dac:	2028      	movs	r0, #40	; 0x28
 8001dae:	f000 f83b 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001db2:	202f      	movs	r0, #47	; 0x2f
 8001db4:	f000 f838 	bl	8001e28 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001db8:	200f      	movs	r0, #15
 8001dba:	f000 f835 	bl	8001e28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001dbe:	2011      	movs	r0, #17
 8001dc0:	f000 f825 	bl	8001e0e <ili9341_WriteReg>
  LCD_Delay(200);
 8001dc4:	20c8      	movs	r0, #200	; 0xc8
 8001dc6:	f000 fdfb 	bl	80029c0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001dca:	2029      	movs	r0, #41	; 0x29
 8001dcc:	f000 f81f 	bl	8001e0e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001dd0:	202c      	movs	r0, #44	; 0x2c
 8001dd2:	f000 f81c 	bl	8001e0e <ili9341_WriteReg>
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001dde:	f000 fd01 	bl	80027e4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001de2:	2103      	movs	r1, #3
 8001de4:	20d3      	movs	r0, #211	; 0xd3
 8001de6:	f000 f82c 	bl	8001e42 <ili9341_ReadData>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29b      	uxth	r3, r3
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001df6:	2029      	movs	r0, #41	; 0x29
 8001df8:	f000 f809 	bl	8001e0e <ili9341_WriteReg>
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001e04:	2028      	movs	r0, #40	; 0x28
 8001e06:	f000 f802 	bl	8001e0e <ili9341_WriteReg>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fd7c 	bl	8002918 <LCD_IO_WriteReg>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fd4d 	bl	80028d4 <LCD_IO_WriteData>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460a      	mov	r2, r1
 8001e4c:	80fb      	strh	r3, [r7, #6]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001e52:	797a      	ldrb	r2, [r7, #5]
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fd7f 	bl	800295c <LCD_IO_ReadData>
 8001e5e:	4603      	mov	r3, r0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001e6c:	23f0      	movs	r3, #240	; 0xf0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001e7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa59 	bl	8002350 <stmpe811_GetInstance>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2bff      	cmp	r3, #255	; 0xff
 8001ea6:	d112      	bne.n	8001ece <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f000 fa51 	bl	8002350 <stmpe811_GetInstance>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d80a      	bhi.n	8001ece <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	88fa      	ldrh	r2, [r7, #6]
 8001ebc:	b2d1      	uxtb	r1, r2
 8001ebe:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <stmpe811_Init+0x4c>)
 8001ec0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001ec2:	f000 fd88 	bl	80029d6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f807 	bl	8001edc <stmpe811_Reset>
    }
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200003b0 	.word	0x200003b0

08001edc <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2202      	movs	r2, #2
 8001eec:	2103      	movs	r1, #3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fd7d 	bl	80029ee <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001ef4:	200a      	movs	r0, #10
 8001ef6:	f000 fdb7 	bl	8002a68 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2200      	movs	r2, #0
 8001f00:	2103      	movs	r1, #3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fd73 	bl	80029ee <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f000 fdad 	bl	8002a68 <IOE_Delay>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001f16:	b590      	push	{r4, r7, lr}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001f20:	f000 fd59 	bl	80029d6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fd72 	bl	8002a14 <IOE_Read>
 8001f30:	4603      	mov	r3, r0
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fd69 	bl	8002a14 <IOE_Read>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001f46:	4323      	orrs	r3, r4
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	b29b      	uxth	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2109      	movs	r1, #9
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fd53 	bl	8002a14 <IOE_Read>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	2109      	movs	r1, #9
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fd33 	bl	80029ee <IOE_Write>
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2109      	movs	r1, #9
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fd35 	bl	8002a14 <IOE_Read>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	2109      	movs	r1, #9
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fd15 	bl	80029ee <IOE_Write>
    
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	80fb      	strh	r3, [r7, #6]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	210a      	movs	r1, #10
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fd14 	bl	8002a14 <IOE_Read>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	797b      	ldrb	r3, [r7, #5]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	210a      	movs	r1, #10
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fcf4 	bl	80029ee <IOE_Write>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	460a      	mov	r2, r1
 8002018:	80fb      	strh	r3, [r7, #6]
 800201a:	4613      	mov	r3, r2
 800201c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	210a      	movs	r1, #10
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fcf3 	bl	8002a14 <IOE_Read>
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002032:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002036:	43db      	mvns	r3, r3
 8002038:	b25a      	sxtb	r2, r3
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4013      	ands	r3, r2
 8002040:	b25b      	sxtb	r3, r3
 8002042:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	210a      	movs	r1, #10
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fcce 	bl	80029ee <IOE_Write>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	460a      	mov	r2, r1
 8002064:	80fb      	strh	r3, [r7, #6]
 8002066:	4613      	mov	r3, r2
 8002068:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	210b      	movs	r1, #11
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fccf 	bl	8002a14 <IOE_Read>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	797b      	ldrb	r3, [r7, #5]
 800207c:	4013      	ands	r3, r2
 800207e:	b2db      	uxtb	r3, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	460a      	mov	r2, r1
 8002092:	80fb      	strh	r3, [r7, #6]
 8002094:	4613      	mov	r3, r2
 8002096:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	797a      	ldrb	r2, [r7, #5]
 800209e:	210b      	movs	r1, #11
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fca4 	bl	80029ee <IOE_Write>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	6039      	str	r1, [r7, #0]
 80020b8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2117      	movs	r1, #23
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fca5 	bl	8002a14 <IOE_Read>
 80020ca:	4603      	mov	r3, r0
 80020cc:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	b25a      	sxtb	r2, r3
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4013      	ands	r3, r2
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	2117      	movs	r1, #23
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fc80 	bl	80029ee <IOE_Write>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2104      	movs	r1, #4
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fc84 	bl	8002a14 <IOE_Read>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	2104      	movs	r1, #4
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fc64 	bl	80029ee <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	21f0      	movs	r1, #240	; 0xf0
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ffbf 	bl	80020ae <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	2104      	movs	r1, #4
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fc54 	bl	80029ee <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2249      	movs	r2, #73	; 0x49
 800214c:	2120      	movs	r1, #32
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fc4d 	bl	80029ee <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002154:	2002      	movs	r0, #2
 8002156:	f000 fc87 	bl	8002a68 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2201      	movs	r2, #1
 8002160:	2121      	movs	r1, #33	; 0x21
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fc43 	bl	80029ee <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	229a      	movs	r2, #154	; 0x9a
 800216e:	2141      	movs	r1, #65	; 0x41
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fc3c 	bl	80029ee <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2201      	movs	r2, #1
 800217c:	214a      	movs	r1, #74	; 0x4a
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fc35 	bl	80029ee <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2201      	movs	r2, #1
 800218a:	214b      	movs	r1, #75	; 0x4b
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fc2e 	bl	80029ee <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2200      	movs	r2, #0
 8002198:	214b      	movs	r1, #75	; 0x4b
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fc27 	bl	80029ee <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2201      	movs	r2, #1
 80021a6:	2156      	movs	r1, #86	; 0x56
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fc20 	bl	80029ee <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2201      	movs	r2, #1
 80021b4:	2158      	movs	r1, #88	; 0x58
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fc19 	bl	80029ee <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2201      	movs	r2, #1
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fc12 	bl	80029ee <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	22ff      	movs	r2, #255	; 0xff
 80021d0:	210b      	movs	r1, #11
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fc0b 	bl	80029ee <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80021d8:	2002      	movs	r0, #2
 80021da:	f000 fc45 	bl	8002a68 <IOE_Delay>
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2140      	movs	r1, #64	; 0x40
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fc0a 	bl	8002a14 <IOE_Read>
 8002200:	4603      	mov	r3, r0
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b80      	cmp	r3, #128	; 0x80
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002212:	7bbb      	ldrb	r3, [r7, #14]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	214c      	movs	r1, #76	; 0x4c
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fbf8 	bl	8002a14 <IOE_Read>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	e00d      	b.n	800224c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2201      	movs	r2, #1
 8002236:	214b      	movs	r1, #75	; 0x4b
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fbd8 	bl	80029ee <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2200      	movs	r2, #0
 8002244:	214b      	movs	r1, #75	; 0x4b
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fbd1 	bl	80029ee <IOE_Write>
  }
  
  return ret;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	f107 0210 	add.w	r2, r7, #16
 800226c:	2304      	movs	r3, #4
 800226e:	21d7      	movs	r1, #215	; 0xd7
 8002270:	f000 fbe3 	bl	8002a3a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002274:	7c3b      	ldrb	r3, [r7, #16]
 8002276:	061a      	lsls	r2, r3, #24
 8002278:	7c7b      	ldrb	r3, [r7, #17]
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	431a      	orrs	r2, r3
 800227e:	7cbb      	ldrb	r3, [r7, #18]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	4313      	orrs	r3, r2
 8002284:	7cfa      	ldrb	r2, [r7, #19]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	0d1b      	lsrs	r3, r3, #20
 800228e:	b29a      	uxth	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229e:	b29a      	uxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80022a4:	89fb      	ldrh	r3, [r7, #14]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2201      	movs	r2, #1
 80022aa:	214b      	movs	r1, #75	; 0x4b
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fb9e 	bl	80029ee <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80022b2:	89fb      	ldrh	r3, [r7, #14]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2200      	movs	r2, #0
 80022b8:	214b      	movs	r1, #75	; 0x4b
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fb97 	bl	80029ee <IOE_Write>
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80022d2:	f000 fb86 	bl	80029e2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	211f      	movs	r1, #31
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fe76 	bl	8001fcc <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fe36 	bl	8001f54 <stmpe811_EnableGlobalIT>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe47 	bl	8001f90 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	211f      	movs	r1, #31
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fe81 	bl	800200e <stmpe811_DisableITSource>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	211f      	movs	r1, #31
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe99 	bl	800205a <stmpe811_ReadGITStatus>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	211f      	movs	r1, #31
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fea1 	bl	8002088 <stmpe811_ClearGlobalIT>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e00b      	b.n	800237c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <stmpe811_GetInstance+0x40>)
 8002368:	5cd3      	ldrb	r3, [r2, r3]
 800236a:	b29b      	uxth	r3, r3
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	429a      	cmp	r2, r3
 8002370:	d101      	bne.n	8002376 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	e006      	b.n	8002384 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	3301      	adds	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d9f0      	bls.n	8002364 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002382:	23ff      	movs	r3, #255	; 0xff
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	200003b0 	.word	0x200003b0

08002394 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a33      	ldr	r2, [pc, #204]	; (8002470 <I2Cx_MspInit+0xdc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d15f      	bne.n	8002466 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	4b32      	ldr	r3, [pc, #200]	; (8002474 <I2Cx_MspInit+0xe0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a31      	ldr	r2, [pc, #196]	; (8002474 <I2Cx_MspInit+0xe0>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <I2Cx_MspInit+0xe0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <I2Cx_MspInit+0xe0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <I2Cx_MspInit+0xe0>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b28      	ldr	r3, [pc, #160]	; (8002474 <I2Cx_MspInit+0xe0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80023de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80023e4:	2312      	movs	r3, #18
 80023e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80023ec:	2302      	movs	r3, #2
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80023f0:	2304      	movs	r3, #4
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	481f      	ldr	r0, [pc, #124]	; (8002478 <I2Cx_MspInit+0xe4>)
 80023fc:	f002 fb90 	bl	8004b20 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002404:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	481b      	ldr	r0, [pc, #108]	; (800247c <I2Cx_MspInit+0xe8>)
 800240e:	f002 fb87 	bl	8004b20 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <I2Cx_MspInit+0xe0>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <I2Cx_MspInit+0xe0>)
 800241c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <I2Cx_MspInit+0xe0>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <I2Cx_MspInit+0xe0>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a10      	ldr	r2, [pc, #64]	; (8002474 <I2Cx_MspInit+0xe0>)
 8002434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002438:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <I2Cx_MspInit+0xe0>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <I2Cx_MspInit+0xe0>)
 8002440:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002444:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	210f      	movs	r1, #15
 800244a:	2048      	movs	r0, #72	; 0x48
 800244c:	f001 fdca 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002450:	2048      	movs	r0, #72	; 0x48
 8002452:	f001 fde3 	bl	800401c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	210f      	movs	r1, #15
 800245a:	2049      	movs	r0, #73	; 0x49
 800245c:	f001 fdc2 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002460:	2049      	movs	r0, #73	; 0x49
 8002462:	f001 fddb 	bl	800401c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	; 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40005c00 	.word	0x40005c00
 8002474:	40023800 	.word	0x40023800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020800 	.word	0x40020800

08002480 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002484:	4814      	ldr	r0, [pc, #80]	; (80024d8 <I2Cx_Init+0x58>)
 8002486:	f004 ff91 	bl	80073ac <HAL_I2C_GetState>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d121      	bne.n	80024d4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <I2Cx_Init+0x58>)
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <I2Cx_Init+0x5c>)
 8002494:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <I2Cx_Init+0x58>)
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <I2Cx_Init+0x60>)
 800249a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <I2Cx_Init+0x58>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <I2Cx_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <I2Cx_Init+0x58>)
 80024aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ae:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <I2Cx_Init+0x58>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <I2Cx_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <I2Cx_Init+0x58>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <I2Cx_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <I2Cx_Init+0x58>)
 80024ca:	f7ff ff63 	bl	8002394 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80024ce:	4802      	ldr	r0, [pc, #8]	; (80024d8 <I2Cx_Init+0x58>)
 80024d0:	f004 fae4 	bl	8006a9c <HAL_I2C_Init>
  }
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000895c 	.word	0x2000895c
 80024dc:	40005c00 	.word	0x40005c00
 80024e0:	000186a0 	.word	0x000186a0

080024e4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <I2Cx_ITConfig+0x58>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <I2Cx_ITConfig+0x58>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <I2Cx_ITConfig+0x58>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800250c:	2301      	movs	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <I2Cx_ITConfig+0x5c>)
 8002516:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4809      	ldr	r0, [pc, #36]	; (8002544 <I2Cx_ITConfig+0x60>)
 800251e:	f002 faff 	bl	8004b20 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002522:	2200      	movs	r2, #0
 8002524:	210f      	movs	r1, #15
 8002526:	2028      	movs	r0, #40	; 0x28
 8002528:	f001 fd5c 	bl	8003fe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800252c:	2028      	movs	r0, #40	; 0x28
 800252e:	f001 fd75 	bl	800401c <HAL_NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	10210000 	.word	0x10210000
 8002544:	40020000 	.word	0x40020000

08002548 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af04      	add	r7, sp, #16
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	460b      	mov	r3, r1
 8002554:	71bb      	strb	r3, [r7, #6]
 8002556:	4613      	mov	r3, r2
 8002558:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	b299      	uxth	r1, r3
 8002562:	79bb      	ldrb	r3, [r7, #6]
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <I2Cx_WriteData+0x4c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	2301      	movs	r3, #1
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	1d7b      	adds	r3, r7, #5
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2301      	movs	r3, #1
 8002576:	4808      	ldr	r0, [pc, #32]	; (8002598 <I2Cx_WriteData+0x50>)
 8002578:	f004 fbf8 	bl	8006d6c <HAL_I2C_Mem_Write>
 800257c:	4603      	mov	r3, r0
 800257e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002586:	f000 f863 	bl	8002650 <I2Cx_Error>
  }        
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000064 	.word	0x20000064
 8002598:	2000895c 	.word	0x2000895c

0800259c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af04      	add	r7, sp, #16
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	71fb      	strb	r3, [r7, #7]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	b299      	uxth	r1, r3
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <I2Cx_ReadData+0x50>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	2301      	movs	r3, #1
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	f107 030e 	add.w	r3, r7, #14
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	4808      	ldr	r0, [pc, #32]	; (80025f0 <I2Cx_ReadData+0x54>)
 80025d0:	f004 fcc6 	bl	8006f60 <HAL_I2C_Mem_Read>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80025de:	f000 f837 	bl	8002650 <I2Cx_Error>
  
  }
  return value;
 80025e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000064 	.word	0x20000064
 80025f0:	2000895c 	.word	0x2000895c

080025f4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af04      	add	r7, sp, #16
 80025fa:	603a      	str	r2, [r7, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	460b      	mov	r3, r1
 8002604:	71bb      	strb	r3, [r7, #6]
 8002606:	4613      	mov	r3, r2
 8002608:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	b299      	uxth	r1, r3
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	b29a      	uxth	r2, r3
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <I2Cx_ReadBuffer+0x54>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	9302      	str	r3, [sp, #8]
 800261c:	88bb      	ldrh	r3, [r7, #4]
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2301      	movs	r3, #1
 8002626:	4809      	ldr	r0, [pc, #36]	; (800264c <I2Cx_ReadBuffer+0x58>)
 8002628:	f004 fc9a 	bl	8006f60 <HAL_I2C_Mem_Read>
 800262c:	4603      	mov	r3, r0
 800262e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002636:	2300      	movs	r3, #0
 8002638:	e002      	b.n	8002640 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800263a:	f000 f809 	bl	8002650 <I2Cx_Error>

    return 1;
 800263e:	2301      	movs	r3, #1
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000064 	.word	0x20000064
 800264c:	2000895c 	.word	0x2000895c

08002650 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002654:	4803      	ldr	r0, [pc, #12]	; (8002664 <I2Cx_Error+0x14>)
 8002656:	f004 fb59 	bl	8006d0c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800265a:	f7ff ff11 	bl	8002480 <I2Cx_Init>
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000895c 	.word	0x2000895c

08002668 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800266c:	4819      	ldr	r0, [pc, #100]	; (80026d4 <SPIx_Init+0x6c>)
 800266e:	f007 f9cd 	bl	8009a0c <HAL_SPI_GetState>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d12b      	bne.n	80026d0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <SPIx_Init+0x6c>)
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <SPIx_Init+0x70>)
 800267c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <SPIx_Init+0x6c>)
 8002680:	2218      	movs	r2, #24
 8002682:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <SPIx_Init+0x6c>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <SPIx_Init+0x6c>)
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <SPIx_Init+0x6c>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <SPIx_Init+0x6c>)
 8002698:	2200      	movs	r2, #0
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <SPIx_Init+0x6c>)
 800269e:	2207      	movs	r2, #7
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <SPIx_Init+0x6c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <SPIx_Init+0x6c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <SPIx_Init+0x6c>)
 80026b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <SPIx_Init+0x6c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SPIx_Init+0x6c>)
 80026be:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026c2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80026c4:	4803      	ldr	r0, [pc, #12]	; (80026d4 <SPIx_Init+0x6c>)
 80026c6:	f000 f853 	bl	8002770 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80026ca:	4802      	ldr	r0, [pc, #8]	; (80026d4 <SPIx_Init+0x6c>)
 80026cc:	f006 fd33 	bl	8009136 <HAL_SPI_Init>
  } 
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200003b4 	.word	0x200003b4
 80026d8:	40015000 	.word	0x40015000

080026dc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <SPIx_Read+0x38>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f107 0108 	add.w	r1, r7, #8
 80026f6:	4808      	ldr	r0, [pc, #32]	; (8002718 <SPIx_Read+0x3c>)
 80026f8:	f006 fedd 	bl	80094b6 <HAL_SPI_Receive>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002706:	f000 f827 	bl	8002758 <SPIx_Error>
  }
  
  return readvalue;
 800270a:	68bb      	ldr	r3, [r7, #8]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000068 	.word	0x20000068
 8002718:	200003b4 	.word	0x200003b4

0800271c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <SPIx_Write+0x34>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	1db9      	adds	r1, r7, #6
 8002730:	2201      	movs	r2, #1
 8002732:	4808      	ldr	r0, [pc, #32]	; (8002754 <SPIx_Write+0x38>)
 8002734:	f006 fd8b 	bl	800924e <HAL_SPI_Transmit>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002742:	f000 f809 	bl	8002758 <SPIx_Error>
  }
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000068 	.word	0x20000068
 8002754:	200003b4 	.word	0x200003b4

08002758 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800275c:	4803      	ldr	r0, [pc, #12]	; (800276c <SPIx_Error+0x14>)
 800275e:	f006 fd4e 	bl	80091fe <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002762:	f7ff ff81 	bl	8002668 <SPIx_Init>
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200003b4 	.word	0x200003b4

08002770 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <SPIx_MspInit+0x6c>)
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	4a16      	ldr	r2, [pc, #88]	; (80027dc <SPIx_MspInit+0x6c>)
 8002782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002786:	6453      	str	r3, [r2, #68]	; 0x44
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <SPIx_MspInit+0x6c>)
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <SPIx_MspInit+0x6c>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <SPIx_MspInit+0x6c>)
 800279e:	f043 0320 	orr.w	r3, r3, #32
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <SPIx_MspInit+0x6c>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80027b0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80027b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80027be:	2301      	movs	r3, #1
 80027c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80027c2:	2305      	movs	r3, #5
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4804      	ldr	r0, [pc, #16]	; (80027e0 <SPIx_MspInit+0x70>)
 80027ce:	f002 f9a7 	bl	8004b20 <HAL_GPIO_Init>
}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40021400 	.word	0x40021400

080027e4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <LCD_IO_Init+0xe0>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d164      	bne.n	80028bc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <LCD_IO_Init+0xe0>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <LCD_IO_Init+0xe4>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <LCD_IO_Init+0xe4>)
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	6313      	str	r3, [r2, #48]	; 0x30
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <LCD_IO_Init+0xe4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002818:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800281a:	2301      	movs	r3, #1
 800281c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002822:	2302      	movs	r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	4619      	mov	r1, r3
 800282c:	4827      	ldr	r0, [pc, #156]	; (80028cc <LCD_IO_Init+0xe8>)
 800282e:	f002 f977 	bl	8004b20 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <LCD_IO_Init+0xe4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <LCD_IO_Init+0xe4>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <LCD_IO_Init+0xe4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800284e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002852:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002854:	2301      	movs	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800285c:	2302      	movs	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	4619      	mov	r1, r3
 8002866:	4819      	ldr	r0, [pc, #100]	; (80028cc <LCD_IO_Init+0xe8>)
 8002868:	f002 f95a 	bl	8004b20 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <LCD_IO_Init+0xe4>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <LCD_IO_Init+0xe4>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6313      	str	r3, [r2, #48]	; 0x30
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <LCD_IO_Init+0xe4>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002888:	2304      	movs	r3, #4
 800288a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800288c:	2301      	movs	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002894:	2302      	movs	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002898:	f107 030c 	add.w	r3, r7, #12
 800289c:	4619      	mov	r1, r3
 800289e:	480c      	ldr	r0, [pc, #48]	; (80028d0 <LCD_IO_Init+0xec>)
 80028a0:	f002 f93e 	bl	8004b20 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80028a4:	2200      	movs	r2, #0
 80028a6:	2104      	movs	r1, #4
 80028a8:	4809      	ldr	r0, [pc, #36]	; (80028d0 <LCD_IO_Init+0xec>)
 80028aa:	f002 fbed 	bl	8005088 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80028ae:	2201      	movs	r2, #1
 80028b0:	2104      	movs	r1, #4
 80028b2:	4807      	ldr	r0, [pc, #28]	; (80028d0 <LCD_IO_Init+0xec>)
 80028b4:	f002 fbe8 	bl	8005088 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80028b8:	f7ff fed6 	bl	8002668 <SPIx_Init>
  }
}
 80028bc:	bf00      	nop
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000040c 	.word	0x2000040c
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020c00 	.word	0x40020c00
 80028d0:	40020800 	.word	0x40020800

080028d4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80028de:	2201      	movs	r2, #1
 80028e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028e4:	480a      	ldr	r0, [pc, #40]	; (8002910 <LCD_IO_WriteData+0x3c>)
 80028e6:	f002 fbcf 	bl	8005088 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80028ea:	2200      	movs	r2, #0
 80028ec:	2104      	movs	r1, #4
 80028ee:	4809      	ldr	r0, [pc, #36]	; (8002914 <LCD_IO_WriteData+0x40>)
 80028f0:	f002 fbca 	bl	8005088 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff10 	bl	800271c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80028fc:	2201      	movs	r2, #1
 80028fe:	2104      	movs	r1, #4
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <LCD_IO_WriteData+0x40>)
 8002902:	f002 fbc1 	bl	8005088 <HAL_GPIO_WritePin>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40020c00 	.word	0x40020c00
 8002914:	40020800 	.word	0x40020800

08002918 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002928:	480a      	ldr	r0, [pc, #40]	; (8002954 <LCD_IO_WriteReg+0x3c>)
 800292a:	f002 fbad 	bl	8005088 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800292e:	2200      	movs	r2, #0
 8002930:	2104      	movs	r1, #4
 8002932:	4809      	ldr	r0, [pc, #36]	; (8002958 <LCD_IO_WriteReg+0x40>)
 8002934:	f002 fba8 	bl	8005088 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff feed 	bl	800271c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002942:	2201      	movs	r2, #1
 8002944:	2104      	movs	r1, #4
 8002946:	4804      	ldr	r0, [pc, #16]	; (8002958 <LCD_IO_WriteReg+0x40>)
 8002948:	f002 fb9e 	bl	8005088 <HAL_GPIO_WritePin>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40020800 	.word	0x40020800

0800295c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	460a      	mov	r2, r1
 8002966:	80fb      	strh	r3, [r7, #6]
 8002968:	4613      	mov	r3, r2
 800296a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002970:	2200      	movs	r2, #0
 8002972:	2104      	movs	r1, #4
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <LCD_IO_ReadData+0x5c>)
 8002976:	f002 fb87 	bl	8005088 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800297a:	2200      	movs	r2, #0
 800297c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002980:	480e      	ldr	r0, [pc, #56]	; (80029bc <LCD_IO_ReadData+0x60>)
 8002982:	f002 fb81 	bl	8005088 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fec7 	bl	800271c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800298e:	797b      	ldrb	r3, [r7, #5]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fea3 	bl	80026dc <SPIx_Read>
 8002996:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002998:	2201      	movs	r2, #1
 800299a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800299e:	4807      	ldr	r0, [pc, #28]	; (80029bc <LCD_IO_ReadData+0x60>)
 80029a0:	f002 fb72 	bl	8005088 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029a4:	2201      	movs	r2, #1
 80029a6:	2104      	movs	r1, #4
 80029a8:	4803      	ldr	r0, [pc, #12]	; (80029b8 <LCD_IO_ReadData+0x5c>)
 80029aa:	f002 fb6d 	bl	8005088 <HAL_GPIO_WritePin>
  
  return readvalue;
 80029ae:	68fb      	ldr	r3, [r7, #12]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00

080029c0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f001 fa31 	bl	8003e30 <HAL_Delay>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80029da:	f7ff fd51 	bl	8002480 <I2Cx_Init>
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80029e6:	f7ff fd7d 	bl	80024e4 <I2Cx_ITConfig>
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}

080029ee <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
 80029f8:	460b      	mov	r3, r1
 80029fa:	71bb      	strb	r3, [r7, #6]
 80029fc:	4613      	mov	r3, r2
 80029fe:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002a00:	797a      	ldrb	r2, [r7, #5]
 8002a02:	79b9      	ldrb	r1, [r7, #6]
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fd9e 	bl	8002548 <I2Cx_WriteData>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	71fb      	strb	r3, [r7, #7]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002a24:	79ba      	ldrb	r2, [r7, #6]
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fdb6 	bl	800259c <I2Cx_ReadData>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	603a      	str	r2, [r7, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	4603      	mov	r3, r0
 8002a46:	71fb      	strb	r3, [r7, #7]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	71bb      	strb	r3, [r7, #6]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002a50:	88bb      	ldrh	r3, [r7, #4]
 8002a52:	79b9      	ldrb	r1, [r7, #6]
 8002a54:	79f8      	ldrb	r0, [r7, #7]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	f7ff fdcc 	bl	80025f4 <I2Cx_ReadBuffer>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b29b      	uxth	r3, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 f9dd 	bl	8003e30 <HAL_Delay>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a86:	4a2e      	ldr	r2, [pc, #184]	; (8002b40 <BSP_LCD_Init+0xc0>)
 8002a88:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a8c:	2209      	movs	r2, #9
 8002a8e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002a90:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a98:	221d      	movs	r2, #29
 8002a9a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002aa4:	f240 120d 	movw	r2, #269	; 0x10d
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002aac:	f240 1243 	movw	r2, #323	; 0x143
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002ab4:	f240 1217 	movw	r2, #279	; 0x117
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002abc:	f240 1247 	movw	r2, #327	; 0x147
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002adc:	2208      	movs	r2, #8
 8002ade:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002ae2:	22c0      	movs	r2, #192	; 0xc0
 8002ae4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002ae8:	2204      	movs	r2, #4
 8002aea:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002aee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002af4:	4813      	ldr	r0, [pc, #76]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002af6:	f006 f8e1 	bl	8008cbc <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002b12:	f000 fca7 	bl	8003464 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002b16:	4809      	ldr	r0, [pc, #36]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002b18:	f005 f82c 	bl	8007b74 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <BSP_LCD_Init+0xc8>)
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <BSP_LCD_Init+0xcc>)
 8002b20:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <BSP_LCD_Init+0xc8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002b2a:	f000 fe89 	bl	8003840 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b2e:	4808      	ldr	r0, [pc, #32]	; (8002b50 <BSP_LCD_Init+0xd0>)
 8002b30:	f000 f920 	bl	8002d74 <BSP_LCD_SetFont>

  return LCD_OK;
 8002b34:	2300      	movs	r3, #0
}  
 8002b36:	4618      	mov	r0, r3
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200089b0 	.word	0x200089b0
 8002b40:	40016800 	.word	0x40016800
 8002b44:	20000450 	.word	0x20000450
 8002b48:	20008a58 	.word	0x20008a58
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	2000006c 	.word	0x2000006c

08002b54 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <BSP_LCD_GetXSize+0x14>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	4798      	blx	r3
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20008a58 	.word	0x20008a58

08002b6c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <BSP_LCD_GetYSize+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	4798      	blx	r3
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20008a58 	.word	0x20008a58

08002b84 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b090      	sub	sp, #64	; 0x40
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002b94:	f7ff ffde 	bl	8002b54 <BSP_LCD_GetXSize>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002ba0:	f7ff ffe4 	bl	8002b6c <BSP_LCD_GetYSize>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002bb0:	23ff      	movs	r3, #255	; 0xff
 8002bb2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002bca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002bd4:	f7ff ffbe 	bl	8002b54 <BSP_LCD_GetXSize>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002bdc:	f7ff ffc6 	bl	8002b6c <BSP_LCD_GetYSize>
 8002be0:	4603      	mov	r3, r0
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	4619      	mov	r1, r3
 8002bec:	4814      	ldr	r0, [pc, #80]	; (8002c40 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002bee:	f005 f953 	bl	8007e98 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	4913      	ldr	r1, [pc, #76]	; (8002c44 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3304      	adds	r3, #4
 8002c02:	f04f 32ff 	mov.w	r2, #4294967295
 8002c06:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	490e      	ldr	r1, [pc, #56]	; (8002c44 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3308      	adds	r3, #8
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002c1a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002c1c:	88fa      	ldrh	r2, [r7, #6]
 8002c1e:	4909      	ldr	r1, [pc, #36]	; (8002c44 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002c30:	4803      	ldr	r0, [pc, #12]	; (8002c40 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c32:	f005 f9ed 	bl	8008010 <HAL_LTDC_EnableDither>
}
 8002c36:	bf00      	nop
 8002c38:	3740      	adds	r7, #64	; 0x40
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200089b0 	.word	0x200089b0
 8002c44:	20000484 	.word	0x20000484
 8002c48:	2000006c 	.word	0x2000006c

08002c4c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <BSP_LCD_SelectLayer+0x1c>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000480 	.word	0x20000480

08002c6c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d112      	bne.n	8002ca4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <BSP_LCD_SetLayerVisible+0x78>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	01db      	lsls	r3, r3, #7
 8002c88:	4413      	add	r3, r2
 8002c8a:	3384      	adds	r3, #132	; 0x84
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <BSP_LCD_SetLayerVisible+0x78>)
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	4611      	mov	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	01d2      	lsls	r2, r2, #7
 8002c98:	440a      	add	r2, r1
 8002c9a:	3284      	adds	r2, #132	; 0x84
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e011      	b.n	8002cc8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <BSP_LCD_SetLayerVisible+0x78>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	01db      	lsls	r3, r3, #7
 8002cae:	4413      	add	r3, r2
 8002cb0:	3384      	adds	r3, #132	; 0x84
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ce4 <BSP_LCD_SetLayerVisible+0x78>)
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	01d2      	lsls	r2, r2, #7
 8002cbe:	440a      	add	r2, r1
 8002cc0:	3284      	adds	r2, #132	; 0x84
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <BSP_LCD_SetLayerVisible+0x78>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <BSP_LCD_SetLayerVisible+0x78>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	200089b0 	.word	0x200089b0

08002ce8 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <BSP_LCD_SetColorKeying+0x24>)
 8002cf8:	f005 f90c 	bl	8007f14 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4803      	ldr	r0, [pc, #12]	; (8002d0c <BSP_LCD_SetColorKeying+0x24>)
 8002d00:	f005 f94c 	bl	8007f9c <HAL_LTDC_EnableColorKeying>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200089b0 	.word	0x200089b0

08002d10 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <BSP_LCD_SetTextColor+0x28>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <BSP_LCD_SetTextColor+0x2c>)
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	601a      	str	r2, [r3, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	20000480 	.word	0x20000480
 8002d3c:	20000484 	.word	0x20000484

08002d40 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <BSP_LCD_SetBackColor+0x2c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4908      	ldr	r1, [pc, #32]	; (8002d70 <BSP_LCD_SetBackColor+0x30>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3304      	adds	r3, #4
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000480 	.word	0x20000480
 8002d70:	20000484 	.word	0x20000484

08002d74 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <BSP_LCD_SetFont+0x2c>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4908      	ldr	r1, [pc, #32]	; (8002da4 <BSP_LCD_SetFont+0x30>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	601a      	str	r2, [r3, #0]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000480 	.word	0x20000480
 8002da4:	20000484 	.word	0x20000484

08002da8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <BSP_LCD_Clear+0x48>)
 8002db2:	681c      	ldr	r4, [r3, #0]
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <BSP_LCD_Clear+0x48>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <BSP_LCD_Clear+0x4c>)
 8002dba:	2134      	movs	r1, #52	; 0x34
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	f7ff fec4 	bl	8002b54 <BSP_LCD_GetXSize>
 8002dcc:	4606      	mov	r6, r0
 8002dce:	f7ff fecd 	bl	8002b6c <BSP_LCD_GetYSize>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	4632      	mov	r2, r6
 8002de0:	4629      	mov	r1, r5
 8002de2:	4620      	mov	r0, r4
 8002de4:	f000 fcf4 	bl	80037d0 <FillBuffer>
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df0:	20000480 	.word	0x20000480
 8002df4:	200089b0 	.word	0x200089b0

08002df8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
 8002e02:	460b      	mov	r3, r1
 8002e04:	80bb      	strh	r3, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <BSP_LCD_DisplayChar+0x80>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	491b      	ldr	r1, [pc, #108]	; (8002e7c <BSP_LCD_DisplayChar+0x84>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <BSP_LCD_DisplayChar+0x80>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4c14      	ldr	r4, [pc, #80]	; (8002e7c <BSP_LCD_DisplayChar+0x84>)
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4423      	add	r3, r4
 8002e36:	3308      	adds	r3, #8
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e3c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <BSP_LCD_DisplayChar+0x80>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <BSP_LCD_DisplayChar+0x84>)
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4423      	add	r3, r4
 8002e50:	3308      	adds	r3, #8
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	889b      	ldrh	r3, [r3, #4]
 8002e56:	3307      	adds	r3, #7
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da00      	bge.n	8002e5e <BSP_LCD_DisplayChar+0x66>
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	10db      	asrs	r3, r3, #3
 8002e60:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e64:	18ca      	adds	r2, r1, r3
 8002e66:	88b9      	ldrh	r1, [r7, #4]
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fbf6 	bl	800365c <DrawChar>
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd90      	pop	{r4, r7, pc}
 8002e78:	20000480 	.word	0x20000480
 8002e7c:	20000484 	.word	0x20000484

08002e80 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60ba      	str	r2, [r7, #8]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	81fb      	strh	r3, [r7, #14]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	81bb      	strh	r3, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002e96:	2301      	movs	r3, #1
 8002e98:	83fb      	strh	r3, [r7, #30]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002eaa:	e002      	b.n	8002eb2 <BSP_LCD_DisplayStringAt+0x32>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	617a      	str	r2, [r7, #20]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f6      	bne.n	8002eac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ebe:	f7ff fe49 	bl	8002b54 <BSP_LCD_GetXSize>
 8002ec2:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <BSP_LCD_DisplayStringAt+0x16c>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	494a      	ldr	r1, [pc, #296]	; (8002ff0 <BSP_LCD_DisplayStringAt+0x170>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	889b      	ldrh	r3, [r3, #4]
 8002ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002edc:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d01c      	beq.n	8002f1e <BSP_LCD_DisplayStringAt+0x9e>
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d017      	beq.n	8002f18 <BSP_LCD_DisplayStringAt+0x98>
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d12e      	bne.n	8002f4a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad1      	subs	r1, r2, r3
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <BSP_LCD_DisplayStringAt+0x16c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	483e      	ldr	r0, [pc, #248]	; (8002ff0 <BSP_LCD_DisplayStringAt+0x170>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4403      	add	r3, r0
 8002f02:	3308      	adds	r3, #8
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	889b      	ldrh	r3, [r3, #4]
 8002f08:	fb03 f301 	mul.w	r3, r3, r1
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	89fb      	ldrh	r3, [r7, #14]
 8002f12:	4413      	add	r3, r2
 8002f14:	83fb      	strh	r3, [r7, #30]
      break;
 8002f16:	e01b      	b.n	8002f50 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002f18:	89fb      	ldrh	r3, [r7, #14]
 8002f1a:	83fb      	strh	r3, [r7, #30]
      break;
 8002f1c:	e018      	b.n	8002f50 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	b299      	uxth	r1, r3
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <BSP_LCD_DisplayStringAt+0x16c>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4831      	ldr	r0, [pc, #196]	; (8002ff0 <BSP_LCD_DisplayStringAt+0x170>)
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4403      	add	r3, r0
 8002f36:	3308      	adds	r3, #8
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	889b      	ldrh	r3, [r3, #4]
 8002f3c:	fb11 f303 	smulbb	r3, r1, r3
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	89fb      	ldrh	r3, [r7, #14]
 8002f44:	4413      	add	r3, r2
 8002f46:	83fb      	strh	r3, [r7, #30]
      break;
 8002f48:	e002      	b.n	8002f50 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8002f4a:	89fb      	ldrh	r3, [r7, #14]
 8002f4c:	83fb      	strh	r3, [r7, #30]
      break;
 8002f4e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f50:	e01a      	b.n	8002f88 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	89b9      	ldrh	r1, [r7, #12]
 8002f58:	8bfb      	ldrh	r3, [r7, #30]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff4c 	bl	8002df8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <BSP_LCD_DisplayStringAt+0x16c>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4922      	ldr	r1, [pc, #136]	; (8002ff0 <BSP_LCD_DisplayStringAt+0x170>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3308      	adds	r3, #8
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	889a      	ldrh	r2, [r3, #4]
 8002f76:	8bfb      	ldrh	r3, [r7, #30]
 8002f78:	4413      	add	r3, r2
 8002f7a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60bb      	str	r3, [r7, #8]
    i++;
 8002f82:	8bbb      	ldrh	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2dc      	uxtb	r4, r3
 8002f96:	f7ff fddd 	bl	8002b54 <BSP_LCD_GetXSize>
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	8bb9      	ldrh	r1, [r7, #28]
 8002f9e:	4b13      	ldr	r3, [pc, #76]	; (8002fec <BSP_LCD_DisplayStringAt+0x16c>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4813      	ldr	r0, [pc, #76]	; (8002ff0 <BSP_LCD_DisplayStringAt+0x170>)
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4403      	add	r3, r0
 8002fae:	3308      	adds	r3, #8
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	889b      	ldrh	r3, [r3, #4]
 8002fb4:	fb03 f301 	mul.w	r3, r3, r1
 8002fb8:	1aeb      	subs	r3, r5, r3
 8002fba:	b299      	uxth	r1, r3
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <BSP_LCD_DisplayStringAt+0x16c>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	480b      	ldr	r0, [pc, #44]	; (8002ff0 <BSP_LCD_DisplayStringAt+0x170>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4403      	add	r3, r0
 8002fcc:	3308      	adds	r3, #8
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	889b      	ldrh	r3, [r3, #4]
 8002fd2:	4299      	cmp	r1, r3
 8002fd4:	bf2c      	ite	cs
 8002fd6:	2301      	movcs	r3, #1
 8002fd8:	2300      	movcc	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4023      	ands	r3, r4
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1b6      	bne.n	8002f52 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8002fe4:	bf00      	nop
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bdb0      	pop	{r4, r5, r7, pc}
 8002fec:	20000480 	.word	0x20000480
 8002ff0:	20000484 	.word	0x20000484

08002ff4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002ff4:	b5b0      	push	{r4, r5, r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]
 8002ffe:	460b      	mov	r3, r1
 8003000:	80bb      	strh	r3, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <BSP_LCD_DrawHLine+0x70>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <BSP_LCD_DrawHLine+0x74>)
 8003010:	2134      	movs	r1, #52	; 0x34
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	335c      	adds	r3, #92	; 0x5c
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	f7ff fd9a 	bl	8002b54 <BSP_LCD_GetXSize>
 8003020:	4602      	mov	r2, r0
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	fb03 f202 	mul.w	r2, r3, r2
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4423      	add	r3, r4
 8003030:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <BSP_LCD_DrawHLine+0x70>)
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	68fc      	ldr	r4, [r7, #12]
 8003038:	887d      	ldrh	r5, [r7, #2]
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <BSP_LCD_DrawHLine+0x70>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	490b      	ldr	r1, [pc, #44]	; (800306c <BSP_LCD_DrawHLine+0x78>)
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	2300      	movs	r3, #0
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2301      	movs	r3, #1
 8003054:	462a      	mov	r2, r5
 8003056:	4621      	mov	r1, r4
 8003058:	f000 fbba 	bl	80037d0 <FillBuffer>
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bdb0      	pop	{r4, r5, r7, pc}
 8003064:	20000480 	.word	0x20000480
 8003068:	200089b0 	.word	0x200089b0
 800306c:	20000484 	.word	0x20000484

08003070 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
 800307a:	460b      	mov	r3, r1
 800307c:	80bb      	strh	r3, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	f1c3 0303 	rsb	r3, r3, #3
 800308a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003090:	887b      	ldrh	r3, [r7, #2]
 8003092:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003094:	e0cf      	b.n	8003236 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	b29a      	uxth	r2, r3
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	4413      	add	r3, r2
 800309e:	b298      	uxth	r0, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	88ba      	ldrh	r2, [r7, #4]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	b29c      	uxth	r4, r3
 80030aa:	4b67      	ldr	r3, [pc, #412]	; (8003248 <BSP_LCD_DrawCircle+0x1d8>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4967      	ldr	r1, [pc, #412]	; (800324c <BSP_LCD_DrawCircle+0x1dc>)
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4621      	mov	r1, r4
 80030c0:	f000 faa6 	bl	8003610 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	b298      	uxth	r0, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	88ba      	ldrh	r2, [r7, #4]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	b29c      	uxth	r4, r3
 80030d8:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <BSP_LCD_DrawCircle+0x1d8>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	495b      	ldr	r1, [pc, #364]	; (800324c <BSP_LCD_DrawCircle+0x1dc>)
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4621      	mov	r1, r4
 80030ee:	f000 fa8f 	bl	8003610 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	4413      	add	r3, r2
 80030fa:	b298      	uxth	r0, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	88ba      	ldrh	r2, [r7, #4]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b29c      	uxth	r4, r3
 8003106:	4b50      	ldr	r3, [pc, #320]	; (8003248 <BSP_LCD_DrawCircle+0x1d8>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4950      	ldr	r1, [pc, #320]	; (800324c <BSP_LCD_DrawCircle+0x1dc>)
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	4621      	mov	r1, r4
 800311c:	f000 fa78 	bl	8003610 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	b29b      	uxth	r3, r3
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	b298      	uxth	r0, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	b29b      	uxth	r3, r3
 800312e:	88ba      	ldrh	r2, [r7, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	b29c      	uxth	r4, r3
 8003134:	4b44      	ldr	r3, [pc, #272]	; (8003248 <BSP_LCD_DrawCircle+0x1d8>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4944      	ldr	r1, [pc, #272]	; (800324c <BSP_LCD_DrawCircle+0x1dc>)
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	4621      	mov	r1, r4
 800314a:	f000 fa61 	bl	8003610 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	b29a      	uxth	r2, r3
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	4413      	add	r3, r2
 8003156:	b298      	uxth	r0, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	b29a      	uxth	r2, r3
 800315c:	88bb      	ldrh	r3, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	b29c      	uxth	r4, r3
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <BSP_LCD_DrawCircle+0x1d8>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4939      	ldr	r1, [pc, #228]	; (800324c <BSP_LCD_DrawCircle+0x1dc>)
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4621      	mov	r1, r4
 8003178:	f000 fa4a 	bl	8003610 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	b29b      	uxth	r3, r3
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	b298      	uxth	r0, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	b29a      	uxth	r2, r3
 800318a:	88bb      	ldrh	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	b29c      	uxth	r4, r3
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <BSP_LCD_DrawCircle+0x1d8>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	492d      	ldr	r1, [pc, #180]	; (800324c <BSP_LCD_DrawCircle+0x1dc>)
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4621      	mov	r1, r4
 80031a6:	f000 fa33 	bl	8003610 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	4413      	add	r3, r2
 80031b2:	b298      	uxth	r0, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	88bb      	ldrh	r3, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	b29c      	uxth	r4, r3
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <BSP_LCD_DrawCircle+0x1d8>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4922      	ldr	r1, [pc, #136]	; (800324c <BSP_LCD_DrawCircle+0x1dc>)
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4621      	mov	r1, r4
 80031d4:	f000 fa1c 	bl	8003610 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	b298      	uxth	r0, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	88bb      	ldrh	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	b29c      	uxth	r4, r3
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <BSP_LCD_DrawCircle+0x1d8>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <BSP_LCD_DrawCircle+0x1dc>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	4621      	mov	r1, r4
 8003202:	f000 fa05 	bl	8003610 <BSP_LCD_DrawPixel>

    if (d < 0)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	da06      	bge.n	800321a <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	4413      	add	r3, r2
 8003214:	3306      	adds	r3, #6
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e00a      	b.n	8003230 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	009a      	lsls	r2, r3, #2
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	4413      	add	r3, r2
 8003226:	330a      	adds	r3, #10
 8003228:	617b      	str	r3, [r7, #20]
      cury--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3b01      	subs	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	3301      	adds	r3, #1
 8003234:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	429a      	cmp	r2, r3
 800323c:	f67f af2b 	bls.w	8003096 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd90      	pop	{r4, r7, pc}
 8003248:	20000480 	.word	0x20000480
 800324c:	20000484 	.word	0x20000484

08003250 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af02      	add	r7, sp, #8
 8003258:	4604      	mov	r4, r0
 800325a:	4608      	mov	r0, r1
 800325c:	4611      	mov	r1, r2
 800325e:	461a      	mov	r2, r3
 8003260:	4623      	mov	r3, r4
 8003262:	80fb      	strh	r3, [r7, #6]
 8003264:	4603      	mov	r3, r0
 8003266:	80bb      	strh	r3, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
 800326c:	4613      	mov	r3, r2
 800326e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <BSP_LCD_FillRect+0xa8>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4920      	ldr	r1, [pc, #128]	; (80032fc <BSP_LCD_FillRect+0xac>)
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fd42 	bl	8002d10 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <BSP_LCD_FillRect+0xa8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <BSP_LCD_FillRect+0xb0>)
 8003292:	2134      	movs	r1, #52	; 0x34
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	335c      	adds	r3, #92	; 0x5c
 800329c:	681c      	ldr	r4, [r3, #0]
 800329e:	f7ff fc59 	bl	8002b54 <BSP_LCD_GetXSize>
 80032a2:	4602      	mov	r2, r0
 80032a4:	88bb      	ldrh	r3, [r7, #4]
 80032a6:	fb03 f202 	mul.w	r2, r3, r2
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4423      	add	r3, r4
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80032b4:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <BSP_LCD_FillRect+0xa8>)
 80032b6:	681c      	ldr	r4, [r3, #0]
 80032b8:	68fd      	ldr	r5, [r7, #12]
 80032ba:	887e      	ldrh	r6, [r7, #2]
 80032bc:	f8b7 8000 	ldrh.w	r8, [r7]
 80032c0:	f7ff fc48 	bl	8002b54 <BSP_LCD_GetXSize>
 80032c4:	4602      	mov	r2, r0
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	1ad1      	subs	r1, r2, r3
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <BSP_LCD_FillRect+0xa8>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	480b      	ldr	r0, [pc, #44]	; (80032fc <BSP_LCD_FillRect+0xac>)
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4403      	add	r3, r0
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	9100      	str	r1, [sp, #0]
 80032e0:	4643      	mov	r3, r8
 80032e2:	4632      	mov	r2, r6
 80032e4:	4629      	mov	r1, r5
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 fa72 	bl	80037d0 <FillBuffer>
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032f6:	bf00      	nop
 80032f8:	20000480 	.word	0x20000480
 80032fc:	20000484 	.word	0x20000484
 8003300:	200089b0 	.word	0x200089b0

08003304 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	80fb      	strh	r3, [r7, #6]
 800330e:	460b      	mov	r3, r1
 8003310:	80bb      	strh	r3, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	f1c3 0303 	rsb	r3, r3, #3
 800331e:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003328:	4b44      	ldr	r3, [pc, #272]	; (800343c <BSP_LCD_FillCircle+0x138>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4944      	ldr	r1, [pc, #272]	; (8003440 <BSP_LCD_FillCircle+0x13c>)
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fce8 	bl	8002d10 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003340:	e061      	b.n	8003406 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d021      	beq.n	800338c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	b29b      	uxth	r3, r3
 800334c:	88fa      	ldrh	r2, [r7, #6]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b298      	uxth	r0, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	b29a      	uxth	r2, r3
 8003356:	88bb      	ldrh	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	b299      	uxth	r1, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	b29b      	uxth	r3, r3
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	b29b      	uxth	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	f7ff fe45 	bl	8002ff4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	b29b      	uxth	r3, r3
 800336e:	88fa      	ldrh	r2, [r7, #6]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	b298      	uxth	r0, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	b29b      	uxth	r3, r3
 8003378:	88ba      	ldrh	r2, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	b299      	uxth	r1, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	b29b      	uxth	r3, r3
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	b29b      	uxth	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	f7ff fe34 	bl	8002ff4 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d021      	beq.n	80033d6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	b29b      	uxth	r3, r3
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	b298      	uxth	r0, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	88ba      	ldrh	r2, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	b299      	uxth	r1, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7ff fe20 	bl	8002ff4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	88fa      	ldrh	r2, [r7, #6]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	b298      	uxth	r0, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	88bb      	ldrh	r3, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	b299      	uxth	r1, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	f7ff fe0f 	bl	8002ff4 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	da06      	bge.n	80033ea <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	009a      	lsls	r2, r3, #2
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	4413      	add	r3, r2
 80033e4:	3306      	adds	r3, #6
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e00a      	b.n	8003400 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	4413      	add	r3, r2
 80033f6:	330a      	adds	r3, #10
 80033f8:	617b      	str	r3, [r7, #20]
      cury--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3301      	adds	r3, #1
 8003404:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	429a      	cmp	r2, r3
 800340c:	d999      	bls.n	8003342 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <BSP_LCD_FillCircle+0x138>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	490b      	ldr	r1, [pc, #44]	; (8003440 <BSP_LCD_FillCircle+0x13c>)
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fc75 	bl	8002d10 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	88b9      	ldrh	r1, [r7, #4]
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fe1f 	bl	8003070 <BSP_LCD_DrawCircle>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000480 	.word	0x20000480
 8003440:	20000484 	.word	0x20000484

08003444 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <BSP_LCD_DisplayOn+0x1c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003452:	4b03      	ldr	r3, [pc, #12]	; (8003460 <BSP_LCD_DisplayOn+0x1c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4798      	blx	r3
  }
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20008a58 	.word	0x20008a58

08003464 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08e      	sub	sp, #56	; 0x38
 8003468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	4a60      	ldr	r2, [pc, #384]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003478:	6453      	str	r3, [r2, #68]	; 0x44
 800347a:	4b5e      	ldr	r3, [pc, #376]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	4b5a      	ldr	r3, [pc, #360]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a59      	ldr	r2, [pc, #356]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003490:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b57      	ldr	r3, [pc, #348]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	4b4c      	ldr	r3, [pc, #304]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b49      	ldr	r3, [pc, #292]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a44      	ldr	r2, [pc, #272]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a36      	ldr	r2, [pc, #216]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 800351c:	f043 0320 	orr.w	r3, r3, #32
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b34      	ldr	r3, [pc, #208]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a2f      	ldr	r2, [pc, #188]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <BSP_LCD_MspInit+0x190>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800354a:	f641 0358 	movw	r3, #6232	; 0x1858
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003558:	2302      	movs	r3, #2
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800355c:	230e      	movs	r3, #14
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003564:	4619      	mov	r1, r3
 8003566:	4824      	ldr	r0, [pc, #144]	; (80035f8 <BSP_LCD_MspInit+0x194>)
 8003568:	f001 fada 	bl	8004b20 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800356c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003576:	4619      	mov	r1, r3
 8003578:	4820      	ldr	r0, [pc, #128]	; (80035fc <BSP_LCD_MspInit+0x198>)
 800357a:	f001 fad1 	bl	8004b20 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800357e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003588:	4619      	mov	r1, r3
 800358a:	481d      	ldr	r0, [pc, #116]	; (8003600 <BSP_LCD_MspInit+0x19c>)
 800358c:	f001 fac8 	bl	8004b20 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003590:	2348      	movs	r3, #72	; 0x48
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003598:	4619      	mov	r1, r3
 800359a:	481a      	ldr	r0, [pc, #104]	; (8003604 <BSP_LCD_MspInit+0x1a0>)
 800359c:	f001 fac0 	bl	8004b20 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80035a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80035a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035aa:	4619      	mov	r1, r3
 80035ac:	4816      	ldr	r0, [pc, #88]	; (8003608 <BSP_LCD_MspInit+0x1a4>)
 80035ae:	f001 fab7 	bl	8004b20 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80035b2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80035b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035bc:	4619      	mov	r1, r3
 80035be:	4813      	ldr	r0, [pc, #76]	; (800360c <BSP_LCD_MspInit+0x1a8>)
 80035c0:	f001 faae 	bl	8004b20 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80035c4:	2303      	movs	r3, #3
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80035c8:	2309      	movs	r3, #9
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d0:	4619      	mov	r1, r3
 80035d2:	480a      	ldr	r0, [pc, #40]	; (80035fc <BSP_LCD_MspInit+0x198>)
 80035d4:	f001 faa4 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80035d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80035de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e2:	4619      	mov	r1, r3
 80035e4:	4809      	ldr	r0, [pc, #36]	; (800360c <BSP_LCD_MspInit+0x1a8>)
 80035e6:	f001 fa9b 	bl	8004b20 <HAL_GPIO_Init>
}
 80035ea:	bf00      	nop
 80035ec:	3738      	adds	r7, #56	; 0x38
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020000 	.word	0x40020000
 80035fc:	40020400 	.word	0x40020400
 8003600:	40020800 	.word	0x40020800
 8003604:	40020c00 	.word	0x40020c00
 8003608:	40021400 	.word	0x40021400
 800360c:	40021800 	.word	0x40021800

08003610 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	603a      	str	r2, [r7, #0]
 800361a:	80fb      	strh	r3, [r7, #6]
 800361c:	460b      	mov	r3, r1
 800361e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <BSP_LCD_DrawPixel+0x44>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <BSP_LCD_DrawPixel+0x48>)
 8003626:	2134      	movs	r1, #52	; 0x34
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	335c      	adds	r3, #92	; 0x5c
 8003630:	681c      	ldr	r4, [r3, #0]
 8003632:	88bd      	ldrh	r5, [r7, #4]
 8003634:	f7ff fa8e 	bl	8002b54 <BSP_LCD_GetXSize>
 8003638:	4603      	mov	r3, r0
 800363a:	fb03 f205 	mul.w	r2, r3, r5
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4423      	add	r3, r4
 8003646:	461a      	mov	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bdb0      	pop	{r4, r5, r7, pc}
 8003654:	20000480 	.word	0x20000480
 8003658:	200089b0 	.word	0x200089b0

0800365c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	603a      	str	r2, [r7, #0]
 8003666:	80fb      	strh	r3, [r7, #6]
 8003668:	460b      	mov	r3, r1
 800366a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003678:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <DrawChar+0x16c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4953      	ldr	r1, [pc, #332]	; (80037cc <DrawChar+0x170>)
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3308      	adds	r3, #8
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	88db      	ldrh	r3, [r3, #6]
 800368e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003690:	4b4d      	ldr	r3, [pc, #308]	; (80037c8 <DrawChar+0x16c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	494d      	ldr	r1, [pc, #308]	; (80037cc <DrawChar+0x170>)
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3308      	adds	r3, #8
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	889b      	ldrh	r3, [r3, #4]
 80036a6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80036a8:	8a3b      	ldrh	r3, [r7, #16]
 80036aa:	3307      	adds	r3, #7
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	da00      	bge.n	80036b2 <DrawChar+0x56>
 80036b0:	3307      	adds	r3, #7
 80036b2:	10db      	asrs	r3, r3, #3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	8a3b      	ldrh	r3, [r7, #16]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	e076      	b.n	80037b6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80036c8:	8a3b      	ldrh	r3, [r7, #16]
 80036ca:	3307      	adds	r3, #7
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da00      	bge.n	80036d2 <DrawChar+0x76>
 80036d0:	3307      	adds	r3, #7
 80036d2:	10db      	asrs	r3, r3, #3
 80036d4:	461a      	mov	r2, r3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fb03 f302 	mul.w	r3, r3, r2
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80036e2:	8a3b      	ldrh	r3, [r7, #16]
 80036e4:	3307      	adds	r3, #7
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da00      	bge.n	80036ec <DrawChar+0x90>
 80036ea:	3307      	adds	r3, #7
 80036ec:	10db      	asrs	r3, r3, #3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d002      	beq.n	80036f8 <DrawChar+0x9c>
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d004      	beq.n	8003700 <DrawChar+0xa4>
 80036f6:	e00c      	b.n	8003712 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	617b      	str	r3, [r7, #20]
      break;
 80036fe:	e016      	b.n	800372e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	3201      	adds	r2, #1
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
      break;
 8003710:	e00d      	b.n	800372e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	041a      	lsls	r2, r3, #16
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3301      	adds	r3, #1
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	4313      	orrs	r3, r2
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	3202      	adds	r2, #2
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
      break;
 800372c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e036      	b.n	80037a2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003734:	8a3a      	ldrh	r2, [r7, #16]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	1ad2      	subs	r2, r2, r3
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	4413      	add	r3, r2
 800373e:	3b01      	subs	r3, #1
 8003740:	2201      	movs	r2, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	461a      	mov	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d012      	beq.n	8003776 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	b29a      	uxth	r2, r3
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	4413      	add	r3, r2
 8003758:	b298      	uxth	r0, r3
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <DrawChar+0x16c>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	491b      	ldr	r1, [pc, #108]	; (80037cc <DrawChar+0x170>)
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	88bb      	ldrh	r3, [r7, #4]
 800376e:	4619      	mov	r1, r3
 8003770:	f7ff ff4e 	bl	8003610 <BSP_LCD_DrawPixel>
 8003774:	e012      	b.n	800379c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	b29a      	uxth	r2, r3
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	4413      	add	r3, r2
 800377e:	b298      	uxth	r0, r3
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <DrawChar+0x16c>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4911      	ldr	r1, [pc, #68]	; (80037cc <DrawChar+0x170>)
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3304      	adds	r3, #4
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	88bb      	ldrh	r3, [r7, #4]
 8003796:	4619      	mov	r1, r3
 8003798:	f7ff ff3a 	bl	8003610 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	3301      	adds	r3, #1
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	8a3b      	ldrh	r3, [r7, #16]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3c4      	bcc.n	8003734 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80037aa:	88bb      	ldrh	r3, [r7, #4]
 80037ac:	3301      	adds	r3, #1
 80037ae:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	8a7b      	ldrh	r3, [r7, #18]
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d384      	bcc.n	80036c8 <DrawChar+0x6c>
  }
}
 80037be:	bf00      	nop
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000480 	.word	0x20000480
 80037cc:	20000484 	.word	0x20000484

080037d0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <FillBuffer+0x68>)
 80037e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037e4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <FillBuffer+0x68>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80037ec:	4a12      	ldr	r2, [pc, #72]	; (8003838 <FillBuffer+0x68>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <FillBuffer+0x68>)
 80037f4:	4a11      	ldr	r2, [pc, #68]	; (800383c <FillBuffer+0x6c>)
 80037f6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80037f8:	480f      	ldr	r0, [pc, #60]	; (8003838 <FillBuffer+0x68>)
 80037fa:	f000 fdf5 	bl	80043e8 <HAL_DMA2D_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d115      	bne.n	8003830 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	480c      	ldr	r0, [pc, #48]	; (8003838 <FillBuffer+0x68>)
 8003808:	f001 f85c 	bl	80048c4 <HAL_DMA2D_ConfigLayer>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10e      	bne.n	8003830 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69f9      	ldr	r1, [r7, #28]
 800381c:	4806      	ldr	r0, [pc, #24]	; (8003838 <FillBuffer+0x68>)
 800381e:	f000 fe2c 	bl	800447a <HAL_DMA2D_Start>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d103      	bne.n	8003830 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003828:	210a      	movs	r1, #10
 800382a:	4803      	ldr	r0, [pc, #12]	; (8003838 <FillBuffer+0x68>)
 800382c:	f000 fe50 	bl	80044d0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000410 	.word	0x20000410
 800383c:	4002b000 	.word	0x4002b000

08003840 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003844:	4b29      	ldr	r3, [pc, #164]	; (80038ec <BSP_SDRAM_Init+0xac>)
 8003846:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <BSP_SDRAM_Init+0xb0>)
 8003848:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800384a:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <BSP_SDRAM_Init+0xb4>)
 800384c:	2202      	movs	r2, #2
 800384e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003850:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <BSP_SDRAM_Init+0xb4>)
 8003852:	2207      	movs	r2, #7
 8003854:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003856:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <BSP_SDRAM_Init+0xb4>)
 8003858:	2204      	movs	r2, #4
 800385a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <BSP_SDRAM_Init+0xb4>)
 800385e:	2207      	movs	r2, #7
 8003860:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <BSP_SDRAM_Init+0xb4>)
 8003864:	2202      	movs	r2, #2
 8003866:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003868:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <BSP_SDRAM_Init+0xb4>)
 800386a:	2202      	movs	r2, #2
 800386c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800386e:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <BSP_SDRAM_Init+0xb4>)
 8003870:	2202      	movs	r2, #2
 8003872:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <BSP_SDRAM_Init+0xac>)
 8003876:	2201      	movs	r2, #1
 8003878:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800387a:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <BSP_SDRAM_Init+0xac>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <BSP_SDRAM_Init+0xac>)
 8003882:	2204      	movs	r2, #4
 8003884:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003886:	4b19      	ldr	r3, [pc, #100]	; (80038ec <BSP_SDRAM_Init+0xac>)
 8003888:	2210      	movs	r2, #16
 800388a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800388c:	4b17      	ldr	r3, [pc, #92]	; (80038ec <BSP_SDRAM_Init+0xac>)
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003892:	4b16      	ldr	r3, [pc, #88]	; (80038ec <BSP_SDRAM_Init+0xac>)
 8003894:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003898:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800389a:	4b14      	ldr	r3, [pc, #80]	; (80038ec <BSP_SDRAM_Init+0xac>)
 800389c:	2200      	movs	r2, #0
 800389e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80038a0:	4b12      	ldr	r3, [pc, #72]	; (80038ec <BSP_SDRAM_Init+0xac>)
 80038a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038a6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80038a8:	4b10      	ldr	r3, [pc, #64]	; (80038ec <BSP_SDRAM_Init+0xac>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <BSP_SDRAM_Init+0xac>)
 80038b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80038b6:	2100      	movs	r1, #0
 80038b8:	480c      	ldr	r0, [pc, #48]	; (80038ec <BSP_SDRAM_Init+0xac>)
 80038ba:	f000 f87f 	bl	80039bc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80038be:	490d      	ldr	r1, [pc, #52]	; (80038f4 <BSP_SDRAM_Init+0xb4>)
 80038c0:	480a      	ldr	r0, [pc, #40]	; (80038ec <BSP_SDRAM_Init+0xac>)
 80038c2:	f005 fbb9 	bl	8009038 <HAL_SDRAM_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <BSP_SDRAM_Init+0xb8>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e002      	b.n	80038da <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <BSP_SDRAM_Init+0xb8>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80038da:	f240 506a 	movw	r0, #1386	; 0x56a
 80038de:	f000 f80d 	bl	80038fc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <BSP_SDRAM_Init+0xb8>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	2000049c 	.word	0x2000049c
 80038f0:	a0000140 	.word	0xa0000140
 80038f4:	200004d0 	.word	0x200004d0
 80038f8:	2000007c 	.word	0x2000007c

080038fc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800390e:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003910:	2208      	movs	r2, #8
 8003912:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003916:	2201      	movs	r2, #1
 8003918:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003924:	4923      	ldr	r1, [pc, #140]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003926:	4824      	ldr	r0, [pc, #144]	; (80039b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003928:	f005 fbba 	bl	80090a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800392c:	2001      	movs	r0, #1
 800392e:	f000 fa7f 	bl	8003e30 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003934:	2202      	movs	r2, #2
 8003936:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003938:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800393a:	2208      	movs	r2, #8
 800393c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003940:	2201      	movs	r2, #1
 8003942:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003944:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800394a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800394e:	4919      	ldr	r1, [pc, #100]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003950:	4819      	ldr	r0, [pc, #100]	; (80039b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003952:	f005 fba5 	bl	80090a0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003958:	2203      	movs	r2, #3
 800395a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800395c:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800395e:	2208      	movs	r2, #8
 8003960:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003964:	2204      	movs	r2, #4
 8003966:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800396a:	2200      	movs	r2, #0
 800396c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800396e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003972:	4910      	ldr	r1, [pc, #64]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003974:	4810      	ldr	r0, [pc, #64]	; (80039b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003976:	f005 fb93 	bl	80090a0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800397a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800397e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003982:	2204      	movs	r2, #4
 8003984:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003988:	2208      	movs	r2, #8
 800398a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800398e:	2201      	movs	r2, #1
 8003990:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003996:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800399c:	4905      	ldr	r1, [pc, #20]	; (80039b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800399e:	4806      	ldr	r0, [pc, #24]	; (80039b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039a0:	f005 fb7e 	bl	80090a0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4804      	ldr	r0, [pc, #16]	; (80039b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039a8:	f005 fba5 	bl	80090f6 <HAL_SDRAM_ProgramRefreshRate>
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	200004ec 	.word	0x200004ec
 80039b8:	2000049c 	.word	0x2000049c

080039bc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b090      	sub	sp, #64	; 0x40
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80ec 	beq.w	8003ba6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	4a76      	ldr	r2, [pc, #472]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6393      	str	r3, [r2, #56]	; 0x38
 80039de:	4b74      	ldr	r3, [pc, #464]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	4b70      	ldr	r3, [pc, #448]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	4a6f      	ldr	r2, [pc, #444]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 80039f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f8:	6313      	str	r3, [r2, #48]	; 0x30
 80039fa:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
 8003a0a:	4b69      	ldr	r3, [pc, #420]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	4a68      	ldr	r2, [pc, #416]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a10:	f043 0302 	orr.w	r3, r3, #2
 8003a14:	6313      	str	r3, [r2, #48]	; 0x30
 8003a16:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	4b62      	ldr	r3, [pc, #392]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a61      	ldr	r2, [pc, #388]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	4b5b      	ldr	r3, [pc, #364]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	4a5a      	ldr	r2, [pc, #360]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4e:	4b58      	ldr	r3, [pc, #352]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a53      	ldr	r2, [pc, #332]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a64:	f043 0310 	orr.w	r3, r3, #16
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b51      	ldr	r3, [pc, #324]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	4b4d      	ldr	r3, [pc, #308]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	4a4c      	ldr	r2, [pc, #304]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a80:	f043 0320 	orr.w	r3, r3, #32
 8003a84:	6313      	str	r3, [r2, #48]	; 0x30
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b46      	ldr	r3, [pc, #280]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a45      	ldr	r2, [pc, #276]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <BSP_SDRAM_MspInit+0x1f4>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003aba:	230c      	movs	r3, #12
 8003abc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003abe:	2360      	movs	r3, #96	; 0x60
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	483a      	ldr	r0, [pc, #232]	; (8003bb4 <BSP_SDRAM_MspInit+0x1f8>)
 8003aca:	f001 f829 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003ace:	2301      	movs	r3, #1
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4837      	ldr	r0, [pc, #220]	; (8003bb8 <BSP_SDRAM_MspInit+0x1fc>)
 8003ada:	f001 f821 	bl	8004b20 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003ade:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4834      	ldr	r0, [pc, #208]	; (8003bbc <BSP_SDRAM_MspInit+0x200>)
 8003aec:	f001 f818 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003af0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003afa:	4619      	mov	r1, r3
 8003afc:	4830      	ldr	r0, [pc, #192]	; (8003bc0 <BSP_SDRAM_MspInit+0x204>)
 8003afe:	f001 f80f 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003b02:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	482d      	ldr	r0, [pc, #180]	; (8003bc4 <BSP_SDRAM_MspInit+0x208>)
 8003b10:	f001 f806 	bl	8004b20 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003b14:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4829      	ldr	r0, [pc, #164]	; (8003bc8 <BSP_SDRAM_MspInit+0x20c>)
 8003b22:	f000 fffd 	bl	8004b20 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003b26:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b38:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b40:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b48:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b50:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003b58:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b5e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b68:	2203      	movs	r2, #3
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003b6c:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b7a:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <BSP_SDRAM_MspInit+0x214>)
 8003b7c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
 8003b84:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003b8a:	4810      	ldr	r0, [pc, #64]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b8c:	f000 fb1e 	bl	80041cc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003b90:	480e      	ldr	r0, [pc, #56]	; (8003bcc <BSP_SDRAM_MspInit+0x210>)
 8003b92:	f000 fa6d 	bl	8004070 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	210f      	movs	r1, #15
 8003b9a:	2038      	movs	r0, #56	; 0x38
 8003b9c:	f000 fa22 	bl	8003fe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003ba0:	2038      	movs	r0, #56	; 0x38
 8003ba2:	f000 fa3b 	bl	800401c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003ba6:	bf00      	nop
 8003ba8:	3740      	adds	r7, #64	; 0x40
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020400 	.word	0x40020400
 8003bb8:	40020800 	.word	0x40020800
 8003bbc:	40020c00 	.word	0x40020c00
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40021400 	.word	0x40021400
 8003bc8:	40021800 	.word	0x40021800
 8003bcc:	200004fc 	.word	0x200004fc
 8003bd0:	40026410 	.word	0x40026410

08003bd4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	460a      	mov	r2, r1
 8003bde:	80fb      	strh	r3, [r7, #6]
 8003be0:	4613      	mov	r3, r2
 8003be2:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003be8:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <BSP_TS_Init+0x64>)
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003bee:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <BSP_TS_Init+0x68>)
 8003bf0:	88bb      	ldrh	r3, [r7, #4]
 8003bf2:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <BSP_TS_Init+0x6c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2082      	movs	r0, #130	; 0x82
 8003bfa:	4798      	blx	r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f640 0311 	movw	r3, #2065	; 0x811
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d104      	bne.n	8003c12 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <BSP_TS_Init+0x70>)
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <BSP_TS_Init+0x6c>)
 8003c0c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <BSP_TS_Init+0x70>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2082      	movs	r0, #130	; 0x82
 8003c20:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <BSP_TS_Init+0x70>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2082      	movs	r0, #130	; 0x82
 8003c2a:	4798      	blx	r3
  }

  return ret;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000560 	.word	0x20000560
 8003c3c:	20000562 	.word	0x20000562
 8003c40:	2000003c 	.word	0x2000003c
 8003c44:	2000055c 	.word	0x2000055c

08003c48 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003c50:	4b4f      	ldr	r3, [pc, #316]	; (8003d90 <BSP_TS_GetState+0x148>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2082      	movs	r0, #130	; 0x82
 8003c58:	4798      	blx	r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 808d 	beq.w	8003d86 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003c6c:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <BSP_TS_GetState+0x148>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f107 020c 	add.w	r2, r7, #12
 8003c76:	f107 010e 	add.w	r1, r7, #14
 8003c7a:	2082      	movs	r0, #130	; 0x82
 8003c7c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003c7e:	89bb      	ldrh	r3, [r7, #12]
 8003c80:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003c88:	89bb      	ldrh	r3, [r7, #12]
 8003c8a:	4a42      	ldr	r2, [pc, #264]	; (8003d94 <BSP_TS_GetState+0x14c>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	08db      	lsrs	r3, r3, #3
 8003c92:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003c94:	8abb      	ldrh	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	82bb      	strh	r3, [r7, #20]
 8003c9e:	e008      	b.n	8003cb2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003ca0:	4b3d      	ldr	r3, [pc, #244]	; (8003d98 <BSP_TS_GetState+0x150>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	8aba      	ldrh	r2, [r7, #20]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d903      	bls.n	8003cb2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003caa:	4b3b      	ldr	r3, [pc, #236]	; (8003d98 <BSP_TS_GetState+0x150>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003cb2:	8abb      	ldrh	r3, [r7, #20]
 8003cb4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003cb6:	89fb      	ldrh	r3, [r7, #14]
 8003cb8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d806      	bhi.n	8003cce <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003cc0:	89fb      	ldrh	r3, [r7, #14]
 8003cc2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003cc6:	330e      	adds	r3, #14
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	81fb      	strh	r3, [r7, #14]
 8003ccc:	e005      	b.n	8003cda <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <BSP_TS_GetState+0x154>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	08db      	lsrs	r3, r3, #3
 8003ce4:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003ce6:	8afb      	ldrh	r3, [r7, #22]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	82fb      	strh	r3, [r7, #22]
 8003cf0:	e008      	b.n	8003d04 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003cf2:	4b2b      	ldr	r3, [pc, #172]	; (8003da0 <BSP_TS_GetState+0x158>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	8afa      	ldrh	r2, [r7, #22]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d903      	bls.n	8003d04 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003cfc:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <BSP_TS_GetState+0x158>)
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003d04:	8afb      	ldrh	r3, [r7, #22]
 8003d06:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003d08:	89fb      	ldrh	r3, [r7, #14]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <BSP_TS_GetState+0x15c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d906      	bls.n	8003d22 <BSP_TS_GetState+0xda>
 8003d14:	89fa      	ldrh	r2, [r7, #14]
 8003d16:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <BSP_TS_GetState+0x15c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	e005      	b.n	8003d2e <BSP_TS_GetState+0xe6>
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <BSP_TS_GetState+0x15c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	89fb      	ldrh	r3, [r7, #14]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003d30:	89bb      	ldrh	r3, [r7, #12]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <BSP_TS_GetState+0x160>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d906      	bls.n	8003d4a <BSP_TS_GetState+0x102>
 8003d3c:	89ba      	ldrh	r2, [r7, #12]
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <BSP_TS_GetState+0x160>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	e005      	b.n	8003d56 <BSP_TS_GetState+0x10e>
 8003d4a:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <BSP_TS_GetState+0x160>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	89bb      	ldrh	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003d58:	8a7a      	ldrh	r2, [r7, #18]
 8003d5a:	8a3b      	ldrh	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	dd07      	ble.n	8003d72 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <BSP_TS_GetState+0x15c>)
 8003d68:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003d6a:	89bb      	ldrh	r3, [r7, #12]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <BSP_TS_GetState+0x160>)
 8003d70:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <BSP_TS_GetState+0x15c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <BSP_TS_GetState+0x160>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	809a      	strh	r2, [r3, #4]
  }
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000055c 	.word	0x2000055c
 8003d94:	ba2e8ba3 	.word	0xba2e8ba3
 8003d98:	20000562 	.word	0x20000562
 8003d9c:	88888889 	.word	0x88888889
 8003da0:	20000560 	.word	0x20000560
 8003da4:	20000564 	.word	0x20000564
 8003da8:	20000568 	.word	0x20000568

08003dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_Init+0x40>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <HAL_Init+0x40>)
 8003db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_Init+0x40>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_Init+0x40>)
 8003dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_Init+0x40>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_Init+0x40>)
 8003dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	f000 f8fa 	bl	8003fce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fd fb12 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003de0:	f7fd fae4 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023c00 	.word	0x40023c00

08003df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_IncTick+0x20>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_IncTick+0x24>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4413      	add	r3, r2
 8003e00:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <HAL_IncTick+0x24>)
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000084 	.word	0x20000084
 8003e14:	20008a5c 	.word	0x20008a5c

08003e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_GetTick+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20008a5c 	.word	0x20008a5c

08003e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e38:	f7ff ffee 	bl	8003e18 <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d005      	beq.n	8003e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_Delay+0x40>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e56:	bf00      	nop
 8003e58:	f7ff ffde 	bl	8003e18 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d8f7      	bhi.n	8003e58 <HAL_Delay+0x28>
  {
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000084 	.word	0x20000084

08003e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea6:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	60d3      	str	r3, [r2, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 0307 	and.w	r3, r3, #7
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db0b      	blt.n	8003f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	4907      	ldr	r1, [pc, #28]	; (8003f10 <__NVIC_EnableIRQ+0x38>)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2001      	movs	r0, #1
 8003efa:	fa00 f202 	lsl.w	r2, r0, r2
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e100 	.word	0xe000e100

08003f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	db0a      	blt.n	8003f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	490c      	ldr	r1, [pc, #48]	; (8003f60 <__NVIC_SetPriority+0x4c>)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	440b      	add	r3, r1
 8003f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f3c:	e00a      	b.n	8003f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4908      	ldr	r1, [pc, #32]	; (8003f64 <__NVIC_SetPriority+0x50>)
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3b04      	subs	r3, #4
 8003f4c:	0112      	lsls	r2, r2, #4
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	440b      	add	r3, r1
 8003f52:	761a      	strb	r2, [r3, #24]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000e100 	.word	0xe000e100
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f1c3 0307 	rsb	r3, r3, #7
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	bf28      	it	cs
 8003f86:	2304      	movcs	r3, #4
 8003f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d902      	bls.n	8003f98 <NVIC_EncodePriority+0x30>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3b03      	subs	r3, #3
 8003f96:	e000      	b.n	8003f9a <NVIC_EncodePriority+0x32>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	43d9      	mvns	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	4313      	orrs	r3, r2
         );
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	; 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ff4c 	bl	8003e74 <__NVIC_SetPriorityGrouping>
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff6:	f7ff ff61 	bl	8003ebc <__NVIC_GetPriorityGrouping>
 8003ffa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	6978      	ldr	r0, [r7, #20]
 8004002:	f7ff ffb1 	bl	8003f68 <NVIC_EncodePriority>
 8004006:	4602      	mov	r2, r0
 8004008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff80 	bl	8003f14 <__NVIC_SetPriority>
}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff54 	bl	8003ed8 <__NVIC_EnableIRQ>
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e00e      	b.n	8004068 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	795b      	ldrb	r3, [r3, #5]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc fa5c 	bl	8000518 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800407c:	f7ff fecc 	bl	8003e18 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e099      	b.n	80041c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ac:	e00f      	b.n	80040ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ae:	f7ff feb3 	bl	8003e18 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	d908      	bls.n	80040ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2203      	movs	r2, #3
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e078      	b.n	80041c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e8      	bne.n	80040ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4b38      	ldr	r3, [pc, #224]	; (80041c8 <HAL_DMA_Init+0x158>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	2b04      	cmp	r3, #4
 8004126:	d107      	bne.n	8004138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	4313      	orrs	r3, r2
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b04      	cmp	r3, #4
 8004160:	d117      	bne.n	8004192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00e      	beq.n	8004192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8bd 	bl	80042f4 <DMA_CheckFifoParam>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2240      	movs	r2, #64	; 0x40
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800418e:	2301      	movs	r3, #1
 8004190:	e016      	b.n	80041c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f874 	bl	8004288 <DMA_CalcBaseAndBitshift>
 80041a0:	4603      	mov	r3, r0
 80041a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	223f      	movs	r2, #63	; 0x3f
 80041aa:	409a      	lsls	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	f010803f 	.word	0xf010803f

080041cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e050      	b.n	8004280 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d101      	bne.n	80041ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
 80041ec:	e048      	b.n	8004280 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2200      	movs	r2, #0
 800421c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2221      	movs	r2, #33	; 0x21
 800422c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f82a 	bl	8004288 <DMA_CalcBaseAndBitshift>
 8004234:	4603      	mov	r3, r0
 8004236:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	223f      	movs	r2, #63	; 0x3f
 8004262:	409a      	lsls	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	3b10      	subs	r3, #16
 8004298:	4a14      	ldr	r2, [pc, #80]	; (80042ec <DMA_CalcBaseAndBitshift+0x64>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <DMA_CalcBaseAndBitshift+0x68>)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d909      	bls.n	80042ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	659a      	str	r2, [r3, #88]	; 0x58
 80042c8:	e007      	b.n	80042da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	aaaaaaab 	.word	0xaaaaaaab
 80042f0:	08012cd0 	.word	0x08012cd0

080042f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d11f      	bne.n	800434e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d855      	bhi.n	80043c0 <DMA_CheckFifoParam+0xcc>
 8004314:	a201      	add	r2, pc, #4	; (adr r2, 800431c <DMA_CheckFifoParam+0x28>)
 8004316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431a:	bf00      	nop
 800431c:	0800432d 	.word	0x0800432d
 8004320:	0800433f 	.word	0x0800433f
 8004324:	0800432d 	.word	0x0800432d
 8004328:	080043c1 	.word	0x080043c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d045      	beq.n	80043c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433c:	e042      	b.n	80043c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004346:	d13f      	bne.n	80043c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434c:	e03c      	b.n	80043c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004356:	d121      	bne.n	800439c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d836      	bhi.n	80043cc <DMA_CheckFifoParam+0xd8>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <DMA_CheckFifoParam+0x70>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004375 	.word	0x08004375
 8004368:	0800437b 	.word	0x0800437b
 800436c:	08004375 	.word	0x08004375
 8004370:	0800438d 	.word	0x0800438d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	e02f      	b.n	80043da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d024      	beq.n	80043d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800438a:	e021      	b.n	80043d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004394:	d11e      	bne.n	80043d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800439a:	e01b      	b.n	80043d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d902      	bls.n	80043a8 <DMA_CheckFifoParam+0xb4>
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d003      	beq.n	80043ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043a6:	e018      	b.n	80043da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
      break;
 80043ac:	e015      	b.n	80043da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00e      	beq.n	80043d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
      break;
 80043be:	e00b      	b.n	80043d8 <DMA_CheckFifoParam+0xe4>
      break;
 80043c0:	bf00      	nop
 80043c2:	e00a      	b.n	80043da <DMA_CheckFifoParam+0xe6>
      break;
 80043c4:	bf00      	nop
 80043c6:	e008      	b.n	80043da <DMA_CheckFifoParam+0xe6>
      break;
 80043c8:	bf00      	nop
 80043ca:	e006      	b.n	80043da <DMA_CheckFifoParam+0xe6>
      break;
 80043cc:	bf00      	nop
 80043ce:	e004      	b.n	80043da <DMA_CheckFifoParam+0xe6>
      break;
 80043d0:	bf00      	nop
 80043d2:	e002      	b.n	80043da <DMA_CheckFifoParam+0xe6>
      break;   
 80043d4:	bf00      	nop
 80043d6:	e000      	b.n	80043da <DMA_CheckFifoParam+0xe6>
      break;
 80043d8:	bf00      	nop
    }
  } 
  
  return status; 
 80043da:	7bfb      	ldrb	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e03b      	b.n	8004472 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc f8d6 	bl	80005c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004438:	f023 0107 	bic.w	r1, r3, #7
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004452:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68d1      	ldr	r1, [r2, #12]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	430b      	orrs	r3, r1
 8004460:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af02      	add	r7, sp, #8
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_DMA2D_Start+0x1c>
 8004492:	2302      	movs	r3, #2
 8004494:	e018      	b.n	80044c8 <HAL_DMA2D_Start+0x4e>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fa99 	bl	80049e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d056      	beq.n	800459a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80044ec:	f7ff fc94 	bl	8003e18 <HAL_GetTick>
 80044f0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80044f2:	e04b      	b.n	800458c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004502:	2b00      	cmp	r3, #0
 8004504:	d023      	beq.n	800454e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	f043 0202 	orr.w	r2, r3, #2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2221      	movs	r2, #33	; 0x21
 8004538:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2204      	movs	r2, #4
 800453e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0a5      	b.n	800469a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d01a      	beq.n	800458c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004556:	f7ff fc5f 	bl	8003e18 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <HAL_DMA2D_PollForTransfer+0x9c>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10f      	bne.n	800458c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2203      	movs	r2, #3
 800457c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e086      	b.n	800469a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ac      	beq.n	80044f4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d061      	beq.n	8004680 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80045bc:	f7ff fc2c 	bl	8003e18 <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80045c2:	e056      	b.n	8004672 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02e      	beq.n	8004634 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e4:	f043 0204 	orr.w	r2, r3, #4
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	f043 0202 	orr.w	r2, r3, #2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	f043 0201 	orr.w	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2229      	movs	r2, #41	; 0x29
 800461e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2204      	movs	r2, #4
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e032      	b.n	800469a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d01a      	beq.n	8004672 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800463c:	f7ff fbec 	bl	8003e18 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d302      	bcc.n	8004652 <HAL_DMA2D_PollForTransfer+0x182>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10f      	bne.n	8004672 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2203      	movs	r2, #3
 8004662:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e013      	b.n	800469a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0a1      	beq.n	80045c4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2212      	movs	r2, #18
 8004686:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d026      	beq.n	8004712 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d021      	beq.n	8004712 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046dc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	f043 0201 	orr.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2201      	movs	r2, #1
 80046f0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2204      	movs	r2, #4
 80046f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d026      	beq.n	800476a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d021      	beq.n	800476a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004734:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2220      	movs	r2, #32
 800473c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	f043 0202 	orr.w	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2204      	movs	r2, #4
 800474e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d026      	beq.n	80047c2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477a:	2b00      	cmp	r3, #0
 800477c:	d021      	beq.n	80047c2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2208      	movs	r2, #8
 8004794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	f043 0204 	orr.w	r2, r3, #4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2204      	movs	r2, #4
 80047a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2204      	movs	r2, #4
 80047ec:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f853 	bl	800489a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d024      	beq.n	8004848 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01f      	beq.n	8004848 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2202      	movs	r2, #2
 800481e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01f      	beq.n	8004892 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01a      	beq.n	8004892 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800486a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f80e 	bl	80048ae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_DMA2D_ConfigLayer+0x20>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e079      	b.n	80049d8 <HAL_DMA2D_ConfigLayer+0x114>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	3318      	adds	r3, #24
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800490e:	4b35      	ldr	r3, [pc, #212]	; (80049e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004910:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b0a      	cmp	r3, #10
 8004918:	d003      	beq.n	8004922 <HAL_DMA2D_ConfigLayer+0x5e>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b09      	cmp	r3, #9
 8004920:	d107      	bne.n	8004932 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e005      	b.n	800493e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	061b      	lsls	r3, r3, #24
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d120      	bne.n	8004986 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43db      	mvns	r3, r3
 800494e:	ea02 0103 	and.w	r1, r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	430a      	orrs	r2, r1
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b0a      	cmp	r3, #10
 800496c:	d003      	beq.n	8004976 <HAL_DMA2D_ConfigLayer+0xb2>
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b09      	cmp	r3, #9
 8004974:	d127      	bne.n	80049c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
 8004984:	e01f      	b.n	80049c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	43db      	mvns	r3, r3
 8004990:	ea02 0103 	and.w	r1, r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	430a      	orrs	r2, r1
 800499c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b0a      	cmp	r3, #10
 80049ae:	d003      	beq.n	80049b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	d106      	bne.n	80049c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80049c4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	ff03000f 	.word	0xff03000f

080049e8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b08b      	sub	sp, #44	; 0x2c
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	041a      	lsls	r2, r3, #16
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a20:	d174      	bne.n	8004b0c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004a28:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a30:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a38:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d108      	bne.n	8004a5a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	e053      	b.n	8004b02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d106      	bne.n	8004a70 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	e048      	b.n	8004b02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d111      	bne.n	8004a9c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	0cdb      	lsrs	r3, r3, #19
 8004a7c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	0a9b      	lsrs	r3, r3, #10
 8004a82:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	02db      	lsls	r3, r3, #11
 8004a92:	4313      	orrs	r3, r2
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9a:	e032      	b.n	8004b02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d117      	bne.n	8004ad4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	0fdb      	lsrs	r3, r3, #31
 8004aa8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	0cdb      	lsrs	r3, r3, #19
 8004aae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	0adb      	lsrs	r3, r3, #11
 8004ab4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	08db      	lsrs	r3, r3, #3
 8004aba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	029b      	lsls	r3, r3, #10
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	03db      	lsls	r3, r3, #15
 8004aca:	4313      	orrs	r3, r2
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad2:	e016      	b.n	8004b02 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	0f1b      	lsrs	r3, r3, #28
 8004ad8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	0d1b      	lsrs	r3, r3, #20
 8004ade:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	0b1b      	lsrs	r3, r3, #12
 8004ae4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	011a      	lsls	r2, r3, #4
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	431a      	orrs	r2, r3
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	031b      	lsls	r3, r3, #12
 8004afa:	4313      	orrs	r3, r2
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004b0a:	e003      	b.n	8004b14 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	60da      	str	r2, [r3, #12]
}
 8004b14:	bf00      	nop
 8004b16:	372c      	adds	r7, #44	; 0x2c
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b089      	sub	sp, #36	; 0x24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e177      	b.n	8004e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	f040 8166 	bne.w	8004e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d00b      	beq.n	8004b7a <HAL_GPIO_Init+0x5a>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d007      	beq.n	8004b7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b6e:	2b11      	cmp	r3, #17
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b12      	cmp	r3, #18
 8004b78:	d130      	bne.n	8004bdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	2203      	movs	r2, #3
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 0201 	and.w	r2, r3, #1
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	2203      	movs	r2, #3
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0xfc>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b12      	cmp	r3, #18
 8004c1a:	d123      	bne.n	8004c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	08da      	lsrs	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3208      	adds	r2, #8
 8004c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	220f      	movs	r2, #15
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	08da      	lsrs	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3208      	adds	r2, #8
 8004c5e:	69b9      	ldr	r1, [r7, #24]
 8004c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0203 	and.w	r2, r3, #3
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80c0 	beq.w	8004e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <HAL_GPIO_Init+0x320>)
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	4a64      	ldr	r2, [pc, #400]	; (8004e40 <HAL_GPIO_Init+0x320>)
 8004cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cb6:	4b62      	ldr	r3, [pc, #392]	; (8004e40 <HAL_GPIO_Init+0x320>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cc2:	4a60      	ldr	r2, [pc, #384]	; (8004e44 <HAL_GPIO_Init+0x324>)
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	3302      	adds	r3, #2
 8004cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	220f      	movs	r2, #15
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a57      	ldr	r2, [pc, #348]	; (8004e48 <HAL_GPIO_Init+0x328>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d037      	beq.n	8004d5e <HAL_GPIO_Init+0x23e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <HAL_GPIO_Init+0x32c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d031      	beq.n	8004d5a <HAL_GPIO_Init+0x23a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a55      	ldr	r2, [pc, #340]	; (8004e50 <HAL_GPIO_Init+0x330>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02b      	beq.n	8004d56 <HAL_GPIO_Init+0x236>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a54      	ldr	r2, [pc, #336]	; (8004e54 <HAL_GPIO_Init+0x334>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d025      	beq.n	8004d52 <HAL_GPIO_Init+0x232>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a53      	ldr	r2, [pc, #332]	; (8004e58 <HAL_GPIO_Init+0x338>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <HAL_GPIO_Init+0x22e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a52      	ldr	r2, [pc, #328]	; (8004e5c <HAL_GPIO_Init+0x33c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d019      	beq.n	8004d4a <HAL_GPIO_Init+0x22a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a51      	ldr	r2, [pc, #324]	; (8004e60 <HAL_GPIO_Init+0x340>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_GPIO_Init+0x226>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a50      	ldr	r2, [pc, #320]	; (8004e64 <HAL_GPIO_Init+0x344>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00d      	beq.n	8004d42 <HAL_GPIO_Init+0x222>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a4f      	ldr	r2, [pc, #316]	; (8004e68 <HAL_GPIO_Init+0x348>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <HAL_GPIO_Init+0x21e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a4e      	ldr	r2, [pc, #312]	; (8004e6c <HAL_GPIO_Init+0x34c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <HAL_GPIO_Init+0x21a>
 8004d36:	2309      	movs	r3, #9
 8004d38:	e012      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	e010      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	e00e      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d42:	2307      	movs	r3, #7
 8004d44:	e00c      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d46:	2306      	movs	r3, #6
 8004d48:	e00a      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d4a:	2305      	movs	r3, #5
 8004d4c:	e008      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d4e:	2304      	movs	r3, #4
 8004d50:	e006      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d52:	2303      	movs	r3, #3
 8004d54:	e004      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e002      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	f002 0203 	and.w	r2, r2, #3
 8004d66:	0092      	lsls	r2, r2, #2
 8004d68:	4093      	lsls	r3, r2
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d70:	4934      	ldr	r1, [pc, #208]	; (8004e44 <HAL_GPIO_Init+0x324>)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	089b      	lsrs	r3, r3, #2
 8004d76:	3302      	adds	r3, #2
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d7e:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <HAL_GPIO_Init+0x350>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004da2:	4a33      	ldr	r2, [pc, #204]	; (8004e70 <HAL_GPIO_Init+0x350>)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004da8:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <HAL_GPIO_Init+0x350>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dcc:	4a28      	ldr	r2, [pc, #160]	; (8004e70 <HAL_GPIO_Init+0x350>)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dd2:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <HAL_GPIO_Init+0x350>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_GPIO_Init+0x350>)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <HAL_GPIO_Init+0x350>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e20:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <HAL_GPIO_Init+0x350>)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	f67f ae84 	bls.w	8004b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e34:	bf00      	nop
 8004e36:	3724      	adds	r7, #36	; 0x24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40013800 	.word	0x40013800
 8004e48:	40020000 	.word	0x40020000
 8004e4c:	40020400 	.word	0x40020400
 8004e50:	40020800 	.word	0x40020800
 8004e54:	40020c00 	.word	0x40020c00
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	40021400 	.word	0x40021400
 8004e60:	40021800 	.word	0x40021800
 8004e64:	40021c00 	.word	0x40021c00
 8004e68:	40022000 	.word	0x40022000
 8004e6c:	40022400 	.word	0x40022400
 8004e70:	40013c00 	.word	0x40013c00

08004e74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e0d9      	b.n	8005044 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e90:	2201      	movs	r2, #1
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	f040 80c9 	bne.w	800503e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004eac:	4a6a      	ldr	r2, [pc, #424]	; (8005058 <HAL_GPIO_DeInit+0x1e4>)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	089b      	lsrs	r3, r3, #2
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	220f      	movs	r2, #15
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a62      	ldr	r2, [pc, #392]	; (800505c <HAL_GPIO_DeInit+0x1e8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d037      	beq.n	8004f46 <HAL_GPIO_DeInit+0xd2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a61      	ldr	r2, [pc, #388]	; (8005060 <HAL_GPIO_DeInit+0x1ec>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d031      	beq.n	8004f42 <HAL_GPIO_DeInit+0xce>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a60      	ldr	r2, [pc, #384]	; (8005064 <HAL_GPIO_DeInit+0x1f0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d02b      	beq.n	8004f3e <HAL_GPIO_DeInit+0xca>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a5f      	ldr	r2, [pc, #380]	; (8005068 <HAL_GPIO_DeInit+0x1f4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d025      	beq.n	8004f3a <HAL_GPIO_DeInit+0xc6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a5e      	ldr	r2, [pc, #376]	; (800506c <HAL_GPIO_DeInit+0x1f8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01f      	beq.n	8004f36 <HAL_GPIO_DeInit+0xc2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a5d      	ldr	r2, [pc, #372]	; (8005070 <HAL_GPIO_DeInit+0x1fc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d019      	beq.n	8004f32 <HAL_GPIO_DeInit+0xbe>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a5c      	ldr	r2, [pc, #368]	; (8005074 <HAL_GPIO_DeInit+0x200>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_GPIO_DeInit+0xba>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a5b      	ldr	r2, [pc, #364]	; (8005078 <HAL_GPIO_DeInit+0x204>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00d      	beq.n	8004f2a <HAL_GPIO_DeInit+0xb6>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a5a      	ldr	r2, [pc, #360]	; (800507c <HAL_GPIO_DeInit+0x208>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <HAL_GPIO_DeInit+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a59      	ldr	r2, [pc, #356]	; (8005080 <HAL_GPIO_DeInit+0x20c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_GPIO_DeInit+0xae>
 8004f1e:	2309      	movs	r3, #9
 8004f20:	e012      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f22:	230a      	movs	r3, #10
 8004f24:	e010      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f26:	2308      	movs	r3, #8
 8004f28:	e00e      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f2a:	2307      	movs	r3, #7
 8004f2c:	e00c      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f2e:	2306      	movs	r3, #6
 8004f30:	e00a      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f32:	2305      	movs	r3, #5
 8004f34:	e008      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f36:	2304      	movs	r3, #4
 8004f38:	e006      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e004      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e002      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_GPIO_DeInit+0xd4>
 8004f46:	2300      	movs	r3, #0
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	f002 0203 	and.w	r2, r2, #3
 8004f4e:	0092      	lsls	r2, r2, #2
 8004f50:	4093      	lsls	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d132      	bne.n	8004fbe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f58:	4b4a      	ldr	r3, [pc, #296]	; (8005084 <HAL_GPIO_DeInit+0x210>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	4948      	ldr	r1, [pc, #288]	; (8005084 <HAL_GPIO_DeInit+0x210>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f66:	4b47      	ldr	r3, [pc, #284]	; (8005084 <HAL_GPIO_DeInit+0x210>)
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	4945      	ldr	r1, [pc, #276]	; (8005084 <HAL_GPIO_DeInit+0x210>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_GPIO_DeInit+0x210>)
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	4941      	ldr	r1, [pc, #260]	; (8005084 <HAL_GPIO_DeInit+0x210>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f82:	4b40      	ldr	r3, [pc, #256]	; (8005084 <HAL_GPIO_DeInit+0x210>)
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	493e      	ldr	r1, [pc, #248]	; (8005084 <HAL_GPIO_DeInit+0x210>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	220f      	movs	r2, #15
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004fa0:	4a2d      	ldr	r2, [pc, #180]	; (8005058 <HAL_GPIO_DeInit+0x1e4>)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	4829      	ldr	r0, [pc, #164]	; (8005058 <HAL_GPIO_DeInit+0x1e4>)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	089b      	lsrs	r3, r3, #2
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	3302      	adds	r3, #2
 8004fba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	2103      	movs	r1, #3
 8004fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	401a      	ands	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	08da      	lsrs	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3208      	adds	r2, #8
 8004fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	220f      	movs	r2, #15
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	08d2      	lsrs	r2, r2, #3
 8004ff4:	4019      	ands	r1, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3208      	adds	r2, #8
 8004ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	2103      	movs	r1, #3
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	2101      	movs	r1, #1
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	2103      	movs	r1, #3
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	401a      	ands	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	3301      	adds	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	f67f af22 	bls.w	8004e90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	40013800 	.word	0x40013800
 800505c:	40020000 	.word	0x40020000
 8005060:	40020400 	.word	0x40020400
 8005064:	40020800 	.word	0x40020800
 8005068:	40020c00 	.word	0x40020c00
 800506c:	40021000 	.word	0x40021000
 8005070:	40021400 	.word	0x40021400
 8005074:	40021800 	.word	0x40021800
 8005078:	40021c00 	.word	0x40021c00
 800507c:	40022000 	.word	0x40022000
 8005080:	40022400 	.word	0x40022400
 8005084:	40013c00 	.word	0x40013c00

08005088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
 8005094:	4613      	mov	r3, r2
 8005096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005098:	787b      	ldrb	r3, [r7, #1]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050a4:	e003      	b.n	80050ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	041a      	lsls	r2, r3, #16
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	619a      	str	r2, [r3, #24]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80050ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050bc:	b08f      	sub	sp, #60	; 0x3c
 80050be:	af0a      	add	r7, sp, #40	; 0x28
 80050c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e054      	b.n	8005176 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f00b fa10 	bl	801050c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2203      	movs	r2, #3
 80050f0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f005 ff1b 	bl	800af46 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	687e      	ldr	r6, [r7, #4]
 8005118:	466d      	mov	r5, sp
 800511a:	f106 0410 	add.w	r4, r6, #16
 800511e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005126:	e894 0003 	ldmia.w	r4, {r0, r1}
 800512a:	e885 0003 	stmia.w	r5, {r0, r1}
 800512e:	1d33      	adds	r3, r6, #4
 8005130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005132:	6838      	ldr	r0, [r7, #0]
 8005134:	f005 fe95 	bl	800ae62 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f005 ff12 	bl	800af68 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	687e      	ldr	r6, [r7, #4]
 800514c:	466d      	mov	r5, sp
 800514e:	f106 0410 	add.w	r4, r6, #16
 8005152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800515a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800515e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005162:	1d33      	adds	r3, r6, #4
 8005164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005166:	6838      	ldr	r0, [r7, #0]
 8005168:	f006 f824 	bl	800b1b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800517e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800517e:	b590      	push	{r4, r7, lr}
 8005180:	b089      	sub	sp, #36	; 0x24
 8005182:	af04      	add	r7, sp, #16
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	4608      	mov	r0, r1
 8005188:	4611      	mov	r1, r2
 800518a:	461a      	mov	r2, r3
 800518c:	4603      	mov	r3, r0
 800518e:	70fb      	strb	r3, [r7, #3]
 8005190:	460b      	mov	r3, r1
 8005192:	70bb      	strb	r3, [r7, #2]
 8005194:	4613      	mov	r3, r2
 8005196:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_HCD_HC_Init+0x28>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e07f      	b.n	80052a6 <HAL_HCD_HC_Init+0x128>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	440b      	add	r3, r1
 80051bc:	333d      	adds	r3, #61	; 0x3d
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	3338      	adds	r3, #56	; 0x38
 80051d2:	787a      	ldrb	r2, [r7, #1]
 80051d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	440b      	add	r3, r1
 80051e4:	3340      	adds	r3, #64	; 0x40
 80051e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80051e8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	440b      	add	r3, r1
 80051f8:	3339      	adds	r3, #57	; 0x39
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	440b      	add	r3, r1
 800520c:	333f      	adds	r3, #63	; 0x3f
 800520e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	78bb      	ldrb	r3, [r7, #2]
 8005218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521c:	b2d8      	uxtb	r0, r3
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	440b      	add	r3, r1
 800522a:	333a      	adds	r3, #58	; 0x3a
 800522c:	4602      	mov	r2, r0
 800522e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005230:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005234:	2b00      	cmp	r3, #0
 8005236:	da0a      	bge.n	800524e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	440b      	add	r3, r1
 8005246:	333b      	adds	r3, #59	; 0x3b
 8005248:	2201      	movs	r2, #1
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e009      	b.n	8005262 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	440b      	add	r3, r1
 800525c:	333b      	adds	r3, #59	; 0x3b
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	440b      	add	r3, r1
 8005270:	333c      	adds	r3, #60	; 0x3c
 8005272:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005276:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	787c      	ldrb	r4, [r7, #1]
 800527e:	78ba      	ldrb	r2, [r7, #2]
 8005280:	78f9      	ldrb	r1, [r7, #3]
 8005282:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005284:	9302      	str	r3, [sp, #8]
 8005286:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	4623      	mov	r3, r4
 8005294:	f006 f910 	bl	800b4b8 <USB_HC_Init>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd90      	pop	{r4, r7, pc}

080052ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_HCD_HC_Halt+0x1e>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e00f      	b.n	80052ec <HAL_HCD_HC_Halt+0x3e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f006 fb4c 	bl	800b97a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4603      	mov	r3, r0
 8005304:	70fb      	strb	r3, [r7, #3]
 8005306:	460b      	mov	r3, r1
 8005308:	70bb      	strb	r3, [r7, #2]
 800530a:	4613      	mov	r3, r2
 800530c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	440b      	add	r3, r1
 800531c:	333b      	adds	r3, #59	; 0x3b
 800531e:	78ba      	ldrb	r2, [r7, #2]
 8005320:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	440b      	add	r3, r1
 8005330:	333f      	adds	r3, #63	; 0x3f
 8005332:	787a      	ldrb	r2, [r7, #1]
 8005334:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005336:	7c3b      	ldrb	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d114      	bne.n	8005366 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	440b      	add	r3, r1
 800534a:	3342      	adds	r3, #66	; 0x42
 800534c:	2203      	movs	r2, #3
 800534e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	440b      	add	r3, r1
 800535e:	333d      	adds	r3, #61	; 0x3d
 8005360:	7f3a      	ldrb	r2, [r7, #28]
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e009      	b.n	800537a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	440b      	add	r3, r1
 8005374:	3342      	adds	r3, #66	; 0x42
 8005376:	2202      	movs	r2, #2
 8005378:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800537a:	787b      	ldrb	r3, [r7, #1]
 800537c:	2b03      	cmp	r3, #3
 800537e:	f200 80d6 	bhi.w	800552e <HAL_HCD_HC_SubmitRequest+0x23a>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	08005399 	.word	0x08005399
 800538c:	08005519 	.word	0x08005519
 8005390:	08005405 	.word	0x08005405
 8005394:	0800548f 	.word	0x0800548f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005398:	7c3b      	ldrb	r3, [r7, #16]
 800539a:	2b01      	cmp	r3, #1
 800539c:	f040 80c9 	bne.w	8005532 <HAL_HCD_HC_SubmitRequest+0x23e>
 80053a0:	78bb      	ldrb	r3, [r7, #2]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f040 80c5 	bne.w	8005532 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80053a8:	8b3b      	ldrh	r3, [r7, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80053ae:	78fa      	ldrb	r2, [r7, #3]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	440b      	add	r3, r1
 80053bc:	3351      	adds	r3, #81	; 0x51
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	440b      	add	r3, r1
 80053d0:	3351      	adds	r3, #81	; 0x51
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	3342      	adds	r3, #66	; 0x42
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80053ec:	e0a1      	b.n	8005532 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	3342      	adds	r3, #66	; 0x42
 80053fe:	2202      	movs	r2, #2
 8005400:	701a      	strb	r2, [r3, #0]
      break;
 8005402:	e096      	b.n	8005532 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005404:	78bb      	ldrb	r3, [r7, #2]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d120      	bne.n	800544c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800540a:	78fa      	ldrb	r2, [r7, #3]
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	440b      	add	r3, r1
 8005418:	3351      	adds	r3, #81	; 0x51
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	3342      	adds	r3, #66	; 0x42
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005434:	e07e      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	3342      	adds	r3, #66	; 0x42
 8005446:	2202      	movs	r2, #2
 8005448:	701a      	strb	r2, [r3, #0]
      break;
 800544a:	e073      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	440b      	add	r3, r1
 800545a:	3350      	adds	r3, #80	; 0x50
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005462:	78fa      	ldrb	r2, [r7, #3]
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	440b      	add	r3, r1
 8005470:	3342      	adds	r3, #66	; 0x42
 8005472:	2200      	movs	r2, #0
 8005474:	701a      	strb	r2, [r3, #0]
      break;
 8005476:	e05d      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	440b      	add	r3, r1
 8005486:	3342      	adds	r3, #66	; 0x42
 8005488:	2202      	movs	r2, #2
 800548a:	701a      	strb	r2, [r3, #0]
      break;
 800548c:	e052      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800548e:	78bb      	ldrb	r3, [r7, #2]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d120      	bne.n	80054d6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	3351      	adds	r3, #81	; 0x51
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	3342      	adds	r3, #66	; 0x42
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80054be:	e039      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	440b      	add	r3, r1
 80054ce:	3342      	adds	r3, #66	; 0x42
 80054d0:	2202      	movs	r2, #2
 80054d2:	701a      	strb	r2, [r3, #0]
      break;
 80054d4:	e02e      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	440b      	add	r3, r1
 80054e4:	3350      	adds	r3, #80	; 0x50
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	440b      	add	r3, r1
 80054fa:	3342      	adds	r3, #66	; 0x42
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
      break;
 8005500:	e018      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	440b      	add	r3, r1
 8005510:	3342      	adds	r3, #66	; 0x42
 8005512:	2202      	movs	r2, #2
 8005514:	701a      	strb	r2, [r3, #0]
      break;
 8005516:	e00d      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005518:	78fa      	ldrb	r2, [r7, #3]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	440b      	add	r3, r1
 8005526:	3342      	adds	r3, #66	; 0x42
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]
      break;
 800552c:	e002      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005532:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	440b      	add	r3, r1
 8005542:	3344      	adds	r3, #68	; 0x44
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	8b39      	ldrh	r1, [r7, #24]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4403      	add	r3, r0
 8005558:	3348      	adds	r3, #72	; 0x48
 800555a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	440b      	add	r3, r1
 800556a:	335c      	adds	r3, #92	; 0x5c
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	440b      	add	r3, r1
 800557e:	334c      	adds	r3, #76	; 0x4c
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005584:	78fa      	ldrb	r2, [r7, #3]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	440b      	add	r3, r1
 8005592:	3339      	adds	r3, #57	; 0x39
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	440b      	add	r3, r1
 80055a6:	335d      	adds	r3, #93	; 0x5d
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	3338      	adds	r3, #56	; 0x38
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	18d1      	adds	r1, r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	f006 f880 	bl	800b6cc <USB_HC_StartXfer>
 80055cc:	4603      	mov	r3, r0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f005 fd9d 	bl	800b12e <USB_GetMode>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	f040 80ef 	bne.w	80057da <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f005 fd81 	bl	800b108 <USB_ReadInterrupts>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80e5 	beq.w	80057d8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f005 fd78 	bl	800b108 <USB_ReadInterrupts>
 8005618:	4603      	mov	r3, r0
 800561a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800561e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005622:	d104      	bne.n	800562e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800562c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f005 fd68 	bl	800b108 <USB_ReadInterrupts>
 8005638:	4603      	mov	r3, r0
 800563a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005642:	d104      	bne.n	800564e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800564c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f005 fd58 	bl	800b108 <USB_ReadInterrupts>
 8005658:	4603      	mov	r3, r0
 800565a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800565e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005662:	d104      	bne.n	800566e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800566c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f005 fd48 	bl	800b108 <USB_ReadInterrupts>
 8005678:	4603      	mov	r3, r0
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d103      	bne.n	800568a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2202      	movs	r2, #2
 8005688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f005 fd3a 	bl	800b108 <USB_ReadInterrupts>
 8005694:	4603      	mov	r3, r0
 8005696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800569a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800569e:	d115      	bne.n	80056cc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80056a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d108      	bne.n	80056cc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f00a ffa0 	bl	8010600 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2101      	movs	r1, #1
 80056c6:	4618      	mov	r0, r3
 80056c8:	f005 fe30 	bl	800b32c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f005 fd19 	bl	800b108 <USB_ReadInterrupts>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056e0:	d102      	bne.n	80056e8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 f966 	bl	80069b4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f005 fd0b 	bl	800b108 <USB_ReadInterrupts>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d106      	bne.n	800570a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f00a ff63 	bl	80105c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2208      	movs	r2, #8
 8005708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f005 fcfa 	bl	800b108 <USB_ReadInterrupts>
 8005714:	4603      	mov	r3, r0
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800571e:	d138      	bne.n	8005792 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f006 f917 	bl	800b958 <USB_HC_ReadInterrupt>
 800572a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e025      	b.n	800577e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575c:	d106      	bne.n	800576c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f8cf 	bl	8005908 <HCD_HC_IN_IRQHandler>
 800576a:	e005      	b.n	8005778 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fcfd 	bl	8006172 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3301      	adds	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	429a      	cmp	r2, r3
 8005786:	d3d4      	bcc.n	8005732 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f005 fcb6 	bl	800b108 <USB_ReadInterrupts>
 800579c:	4603      	mov	r3, r0
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d101      	bne.n	80057aa <HAL_HCD_IRQHandler+0x1d2>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HAL_HCD_IRQHandler+0x1d4>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d014      	beq.n	80057da <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0210 	bic.w	r2, r2, #16
 80057be:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 f84b 	bl	800685c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0210 	orr.w	r2, r2, #16
 80057d4:	619a      	str	r2, [r3, #24]
 80057d6:	e000      	b.n	80057da <HAL_HCD_IRQHandler+0x202>
      return;
 80057d8:	bf00      	nop
    }
  }
}
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_HCD_Start+0x16>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e013      	b.n	800581e <HAL_HCD_Start+0x3e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f005 fb8e 	bl	800af24 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2101      	movs	r1, #1
 800580e:	4618      	mov	r0, r3
 8005810:	f005 fdf0 	bl	800b3f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_HCD_Stop+0x16>
 8005838:	2302      	movs	r3, #2
 800583a:	e00d      	b.n	8005858 <HAL_HCD_Stop+0x32>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f006 f9d1 	bl	800bbf0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f005 fd97 	bl	800b3a0 <USB_ResetPort>
 8005872:	4603      	mov	r3, r0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	440b      	add	r3, r1
 8005896:	335c      	adds	r3, #92	; 0x5c
 8005898:	781b      	ldrb	r3, [r3, #0]
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	440b      	add	r3, r1
 80058c0:	334c      	adds	r3, #76	; 0x4c
 80058c2:	681b      	ldr	r3, [r3, #0]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f005 fdd9 	bl	800b494 <USB_GetCurrentFrame>
 80058e2:	4603      	mov	r3, r0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f005 fdb4 	bl	800b466 <USB_GetHostSpeed>
 80058fe:	4603      	mov	r3, r0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b04      	cmp	r3, #4
 8005936:	d119      	bne.n	800596c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005944:	461a      	mov	r2, r3
 8005946:	2304      	movs	r3, #4
 8005948:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	440a      	add	r2, r1
 8005960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005964:	f043 0302 	orr.w	r3, r3, #2
 8005968:	60d3      	str	r3, [r2, #12]
 800596a:	e0ce      	b.n	8005b0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005982:	d12c      	bne.n	80059de <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005990:	461a      	mov	r2, r3
 8005992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005996:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	440b      	add	r3, r1
 80059a6:	335d      	adds	r3, #93	; 0x5d
 80059a8:	2207      	movs	r2, #7
 80059aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c6:	f043 0302 	orr.w	r3, r3, #2
 80059ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	4611      	mov	r1, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f005 ffcf 	bl	800b97a <USB_HC_Halt>
 80059dc:	e095      	b.n	8005b0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d109      	bne.n	8005a08 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	461a      	mov	r2, r3
 8005a02:	2320      	movs	r3, #32
 8005a04:	6093      	str	r3, [r2, #8]
 8005a06:	e080      	b.n	8005b0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d134      	bne.n	8005a88 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a38:	f043 0302 	orr.w	r3, r3, #2
 8005a3c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	335d      	adds	r3, #93	; 0x5d
 8005a4e:	2205      	movs	r2, #5
 8005a50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2310      	movs	r3, #16
 8005a62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	461a      	mov	r2, r3
 8005a72:	2308      	movs	r3, #8
 8005a74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f005 ff7a 	bl	800b97a <USB_HC_Halt>
 8005a86:	e040      	b.n	8005b0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9e:	d134      	bne.n	8005b0a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aba:	f043 0302 	orr.w	r3, r3, #2
 8005abe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f005 ff55 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	461a      	mov	r2, r3
 8005ade:	2310      	movs	r3, #16
 8005ae0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	335d      	adds	r3, #93	; 0x5d
 8005af2:	2208      	movs	r2, #8
 8005af4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	461a      	mov	r2, r3
 8005b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b08:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b20:	d122      	bne.n	8005b68 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b3c:	f043 0302 	orr.w	r3, r3, #2
 8005b40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f005 ff14 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b64:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005b66:	e300      	b.n	800616a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	f040 80fd 	bne.w	8005d7a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01b      	beq.n	8005bc0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	440b      	add	r3, r1
 8005b96:	3348      	adds	r3, #72	; 0x48
 8005b98:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	0159      	lsls	r1, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005bac:	1ad1      	subs	r1, r2, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4403      	add	r3, r0
 8005bbc:	334c      	adds	r3, #76	; 0x4c
 8005bbe:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	440b      	add	r3, r1
 8005bce:	335d      	adds	r3, #93	; 0x5d
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	440b      	add	r3, r1
 8005be2:	3358      	adds	r3, #88	; 0x58
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	440b      	add	r3, r1
 8005c08:	333f      	adds	r3, #63	; 0x3f
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	440b      	add	r3, r1
 8005c1e:	333f      	adds	r3, #63	; 0x3f
 8005c20:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d121      	bne.n	8005c6a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c40:	f043 0302 	orr.w	r3, r3, #2
 8005c44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f005 fe92 	bl	800b97a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	461a      	mov	r2, r3
 8005c64:	2310      	movs	r3, #16
 8005c66:	6093      	str	r3, [r2, #8]
 8005c68:	e070      	b.n	8005d4c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	333f      	adds	r3, #63	; 0x3f
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d12a      	bne.n	8005cd6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c9e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	440b      	add	r3, r1
 8005cae:	335c      	adds	r3, #92	; 0x5c
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	b2d8      	uxtb	r0, r3
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	440b      	add	r3, r1
 8005cc6:	335c      	adds	r3, #92	; 0x5c
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4601      	mov	r1, r0
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f00a fca4 	bl	801061c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005cd4:	e03a      	b.n	8005d4c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	440b      	add	r3, r1
 8005ce4:	333f      	adds	r3, #63	; 0x3f
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d12f      	bne.n	8005d4c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	440b      	add	r3, r1
 8005cfa:	335c      	adds	r3, #92	; 0x5c
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3350      	adds	r3, #80	; 0x50
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f083 0301 	eor.w	r3, r3, #1
 8005d16:	b2d8      	uxtb	r0, r3
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	440b      	add	r3, r1
 8005d26:	3350      	adds	r3, #80	; 0x50
 8005d28:	4602      	mov	r2, r0
 8005d2a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	b2d8      	uxtb	r0, r3
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	440b      	add	r3, r1
 8005d3e:	335c      	adds	r3, #92	; 0x5c
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	4601      	mov	r1, r0
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f00a fc68 	bl	801061c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	440b      	add	r3, r1
 8005d5a:	3350      	adds	r3, #80	; 0x50
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	f083 0301 	eor.w	r3, r3, #1
 8005d62:	b2d8      	uxtb	r0, r3
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	440b      	add	r3, r1
 8005d72:	3350      	adds	r3, #80	; 0x50
 8005d74:	4602      	mov	r2, r0
 8005d76:	701a      	strb	r2, [r3, #0]
}
 8005d78:	e1f7      	b.n	800616a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f040 811a 	bne.w	8005fc6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dac:	f023 0302 	bic.w	r3, r3, #2
 8005db0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	335d      	adds	r3, #93	; 0x5d
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d10a      	bne.n	8005dde <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	335c      	adds	r3, #92	; 0x5c
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e0d9      	b.n	8005f92 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	440b      	add	r3, r1
 8005dec:	335d      	adds	r3, #93	; 0x5d
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d10a      	bne.n	8005e0a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	440b      	add	r3, r1
 8005e02:	335c      	adds	r3, #92	; 0x5c
 8005e04:	2205      	movs	r2, #5
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e0c3      	b.n	8005f92 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	440b      	add	r3, r1
 8005e18:	335d      	adds	r3, #93	; 0x5d
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b06      	cmp	r3, #6
 8005e1e:	d00a      	beq.n	8005e36 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	440b      	add	r3, r1
 8005e2e:	335d      	adds	r3, #93	; 0x5d
 8005e30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d156      	bne.n	8005ee4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	440b      	add	r3, r1
 8005e44:	3358      	adds	r3, #88	; 0x58
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	1c59      	adds	r1, r3, #1
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4403      	add	r3, r0
 8005e58:	3358      	adds	r3, #88	; 0x58
 8005e5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	440b      	add	r3, r1
 8005e6a:	3358      	adds	r3, #88	; 0x58
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d914      	bls.n	8005e9c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	440b      	add	r3, r1
 8005e80:	3358      	adds	r3, #88	; 0x58
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	440b      	add	r3, r1
 8005e94:	335c      	adds	r3, #92	; 0x5c
 8005e96:	2204      	movs	r2, #4
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	e009      	b.n	8005eb0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	440b      	add	r3, r1
 8005eaa:	335c      	adds	r3, #92	; 0x5c
 8005eac:	2202      	movs	r2, #2
 8005eae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ec6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ece:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005edc:	461a      	mov	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e056      	b.n	8005f92 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	440b      	add	r3, r1
 8005ef2:	335d      	adds	r3, #93	; 0x5d
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d123      	bne.n	8005f42 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	440b      	add	r3, r1
 8005f08:	335c      	adds	r3, #92	; 0x5c
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f24:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f2c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	e027      	b.n	8005f92 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	440b      	add	r3, r1
 8005f50:	335d      	adds	r3, #93	; 0x5d
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b07      	cmp	r3, #7
 8005f56:	d11c      	bne.n	8005f92 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	3358      	adds	r3, #88	; 0x58
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	1c59      	adds	r1, r3, #1
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4403      	add	r3, r0
 8005f7a:	3358      	adds	r3, #88	; 0x58
 8005f7c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	440b      	add	r3, r1
 8005f8c:	335c      	adds	r3, #92	; 0x5c
 8005f8e:	2204      	movs	r2, #4
 8005f90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	b2d8      	uxtb	r0, r3
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	440b      	add	r3, r1
 8005fb6:	335c      	adds	r3, #92	; 0x5c
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f00a fb2c 	bl	801061c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005fc4:	e0d1      	b.n	800616a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd8:	2b80      	cmp	r3, #128	; 0x80
 8005fda:	d13e      	bne.n	800605a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff6:	f043 0302 	orr.w	r3, r3, #2
 8005ffa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	440b      	add	r3, r1
 800600a:	3358      	adds	r3, #88	; 0x58
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4403      	add	r3, r0
 800601e:	3358      	adds	r3, #88	; 0x58
 8006020:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	440b      	add	r3, r1
 8006030:	335d      	adds	r3, #93	; 0x5d
 8006032:	2206      	movs	r2, #6
 8006034:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	4611      	mov	r1, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f005 fc9a 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	461a      	mov	r2, r3
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	6093      	str	r3, [r2, #8]
}
 8006058:	e087      	b.n	800616a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d17c      	bne.n	800616a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	333f      	adds	r3, #63	; 0x3f
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b03      	cmp	r3, #3
 8006084:	d122      	bne.n	80060cc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	440b      	add	r3, r1
 8006094:	3358      	adds	r3, #88	; 0x58
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b4:	f043 0302 	orr.w	r3, r3, #2
 80060b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f005 fc58 	bl	800b97a <USB_HC_Halt>
 80060ca:	e045      	b.n	8006158 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	440b      	add	r3, r1
 80060da:	333f      	adds	r3, #63	; 0x3f
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	440b      	add	r3, r1
 80060f0:	333f      	adds	r3, #63	; 0x3f
 80060f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d12f      	bne.n	8006158 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	440b      	add	r3, r1
 8006106:	3358      	adds	r3, #88	; 0x58
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d121      	bne.n	8006158 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	440b      	add	r3, r1
 8006122:	335d      	adds	r3, #93	; 0x5d
 8006124:	2203      	movs	r2, #3
 8006126:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	440a      	add	r2, r1
 800613e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006142:	f043 0302 	orr.w	r3, r3, #2
 8006146:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f005 fc11 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006164:	461a      	mov	r2, r3
 8006166:	2310      	movs	r3, #16
 8006168:	6093      	str	r3, [r2, #8]
}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d119      	bne.n	80061d6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ae:	461a      	mov	r2, r3
 80061b0:	2304      	movs	r3, #4
 80061b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ce:	f043 0302 	orr.w	r3, r3, #2
 80061d2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80061d4:	e33e      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	d141      	bne.n	8006270 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f8:	461a      	mov	r2, r3
 80061fa:	2320      	movs	r3, #32
 80061fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	440b      	add	r3, r1
 800620c:	333d      	adds	r3, #61	; 0x3d
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	f040 831f 	bne.w	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	440b      	add	r3, r1
 8006224:	333d      	adds	r3, #61	; 0x3d
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	440b      	add	r3, r1
 8006238:	335c      	adds	r3, #92	; 0x5c
 800623a:	2202      	movs	r2, #2
 800623c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	440a      	add	r2, r1
 8006254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006258:	f043 0302 	orr.w	r3, r3, #2
 800625c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f005 fb86 	bl	800b97a <USB_HC_Halt>
}
 800626e:	e2f1      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d13f      	bne.n	8006306 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	440b      	add	r3, r1
 8006294:	335d      	adds	r3, #93	; 0x5d
 8006296:	2204      	movs	r2, #4
 8006298:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	440b      	add	r3, r1
 80062a8:	333d      	adds	r3, #61	; 0x3d
 80062aa:	2201      	movs	r2, #1
 80062ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	440b      	add	r3, r1
 80062bc:	3358      	adds	r3, #88	; 0x58
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062dc:	f043 0302 	orr.w	r3, r3, #2
 80062e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	4611      	mov	r1, r2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f005 fb44 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	461a      	mov	r2, r3
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	6093      	str	r3, [r2, #8]
}
 8006304:	e2a6      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631c:	d122      	bne.n	8006364 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	440a      	add	r2, r1
 8006334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006338:	f043 0302 	orr.w	r3, r3, #2
 800633c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	4611      	mov	r1, r2
 8006348:	4618      	mov	r0, r3
 800634a:	f005 fb16 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4413      	add	r3, r2
 8006356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635a:	461a      	mov	r2, r3
 800635c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006360:	6093      	str	r3, [r2, #8]
}
 8006362:	e277      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b01      	cmp	r3, #1
 8006378:	d135      	bne.n	80063e6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	440b      	add	r3, r1
 8006388:	3358      	adds	r3, #88	; 0x58
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a8:	f043 0302 	orr.w	r3, r3, #2
 80063ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f005 fade 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ca:	461a      	mov	r2, r3
 80063cc:	2301      	movs	r3, #1
 80063ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	440b      	add	r3, r1
 80063de:	335d      	adds	r3, #93	; 0x5d
 80063e0:	2201      	movs	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
}
 80063e4:	e236      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d12b      	bne.n	8006454 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	4413      	add	r3, r2
 8006404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006408:	461a      	mov	r2, r3
 800640a:	2308      	movs	r3, #8
 800640c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	440a      	add	r2, r1
 8006424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006428:	f043 0302 	orr.w	r3, r3, #2
 800642c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f005 fa9e 	bl	800b97a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	440b      	add	r3, r1
 800644c:	335d      	adds	r3, #93	; 0x5d
 800644e:	2205      	movs	r2, #5
 8006450:	701a      	strb	r2, [r3, #0]
}
 8006452:	e1ff      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b10      	cmp	r3, #16
 8006468:	d155      	bne.n	8006516 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	440b      	add	r3, r1
 8006478:	3358      	adds	r3, #88	; 0x58
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	440b      	add	r3, r1
 800648c:	335d      	adds	r3, #93	; 0x5d
 800648e:	2203      	movs	r2, #3
 8006490:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	440b      	add	r3, r1
 80064a0:	333d      	adds	r3, #61	; 0x3d
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d114      	bne.n	80064d2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	440b      	add	r3, r1
 80064b6:	333c      	adds	r3, #60	; 0x3c
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	440b      	add	r3, r1
 80064cc:	333d      	adds	r3, #61	; 0x3d
 80064ce:	2201      	movs	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ec:	f043 0302 	orr.w	r3, r3, #2
 80064f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	4611      	mov	r1, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f005 fa3c 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	461a      	mov	r2, r3
 8006510:	2310      	movs	r3, #16
 8006512:	6093      	str	r3, [r2, #8]
}
 8006514:	e19e      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b80      	cmp	r3, #128	; 0x80
 800652a:	d12b      	bne.n	8006584 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	440a      	add	r2, r1
 8006542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006546:	f043 0302 	orr.w	r3, r3, #2
 800654a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f005 fa0f 	bl	800b97a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	440b      	add	r3, r1
 800656a:	335d      	adds	r3, #93	; 0x5d
 800656c:	2206      	movs	r2, #6
 800656e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4413      	add	r3, r2
 8006578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657c:	461a      	mov	r2, r3
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	6093      	str	r3, [r2, #8]
}
 8006582:	e167      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659a:	d135      	bne.n	8006608 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b6:	f043 0302 	orr.w	r3, r3, #2
 80065ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f005 f9d7 	bl	800b97a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	461a      	mov	r2, r3
 80065da:	2310      	movs	r3, #16
 80065dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ea:	461a      	mov	r2, r3
 80065ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	440b      	add	r3, r1
 8006600:	335d      	adds	r3, #93	; 0x5d
 8006602:	2208      	movs	r2, #8
 8006604:	701a      	strb	r2, [r3, #0]
}
 8006606:	e125      	b.n	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	f040 811a 	bne.w	8006854 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	440a      	add	r2, r1
 8006636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663a:	f023 0302 	bic.w	r3, r3, #2
 800663e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	440b      	add	r3, r1
 800664e:	335d      	adds	r3, #93	; 0x5d
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d137      	bne.n	80066c6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	440b      	add	r3, r1
 8006664:	335c      	adds	r3, #92	; 0x5c
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	440b      	add	r3, r1
 8006678:	333f      	adds	r3, #63	; 0x3f
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d00b      	beq.n	8006698 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	440b      	add	r3, r1
 800668e:	333f      	adds	r3, #63	; 0x3f
 8006690:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006692:	2b03      	cmp	r3, #3
 8006694:	f040 80c5 	bne.w	8006822 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	440b      	add	r3, r1
 80066a6:	3351      	adds	r3, #81	; 0x51
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f083 0301 	eor.w	r3, r3, #1
 80066ae:	b2d8      	uxtb	r0, r3
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	440b      	add	r3, r1
 80066be:	3351      	adds	r3, #81	; 0x51
 80066c0:	4602      	mov	r2, r0
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e0ad      	b.n	8006822 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	440b      	add	r3, r1
 80066d4:	335d      	adds	r3, #93	; 0x5d
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d10a      	bne.n	80066f2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	440b      	add	r3, r1
 80066ea:	335c      	adds	r3, #92	; 0x5c
 80066ec:	2202      	movs	r2, #2
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e097      	b.n	8006822 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	440b      	add	r3, r1
 8006700:	335d      	adds	r3, #93	; 0x5d
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b04      	cmp	r3, #4
 8006706:	d10a      	bne.n	800671e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	440b      	add	r3, r1
 8006716:	335c      	adds	r3, #92	; 0x5c
 8006718:	2202      	movs	r2, #2
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e081      	b.n	8006822 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	440b      	add	r3, r1
 800672c:	335d      	adds	r3, #93	; 0x5d
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b05      	cmp	r3, #5
 8006732:	d10a      	bne.n	800674a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	440b      	add	r3, r1
 8006742:	335c      	adds	r3, #92	; 0x5c
 8006744:	2205      	movs	r2, #5
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	e06b      	b.n	8006822 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	335d      	adds	r3, #93	; 0x5d
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b06      	cmp	r3, #6
 800675e:	d00a      	beq.n	8006776 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	440b      	add	r3, r1
 800676e:	335d      	adds	r3, #93	; 0x5d
 8006770:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006772:	2b08      	cmp	r3, #8
 8006774:	d155      	bne.n	8006822 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	440b      	add	r3, r1
 8006784:	3358      	adds	r3, #88	; 0x58
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	1c59      	adds	r1, r3, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4403      	add	r3, r0
 8006798:	3358      	adds	r3, #88	; 0x58
 800679a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	440b      	add	r3, r1
 80067aa:	3358      	adds	r3, #88	; 0x58
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d914      	bls.n	80067dc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	440b      	add	r3, r1
 80067c0:	3358      	adds	r3, #88	; 0x58
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	440b      	add	r3, r1
 80067d4:	335c      	adds	r3, #92	; 0x5c
 80067d6:	2204      	movs	r2, #4
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e009      	b.n	80067f0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	440b      	add	r3, r1
 80067ea:	335c      	adds	r3, #92	; 0x5c
 80067ec:	2202      	movs	r2, #2
 80067ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006806:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800680e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	461a      	mov	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682e:	461a      	mov	r2, r3
 8006830:	2302      	movs	r3, #2
 8006832:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	b2d8      	uxtb	r0, r3
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	440b      	add	r3, r1
 8006846:	335c      	adds	r3, #92	; 0x5c
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	4601      	mov	r1, r0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f009 fee4 	bl	801061c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006854:	bf00      	nop
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	0c5b      	lsrs	r3, r3, #17
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	091b      	lsrs	r3, r3, #4
 800688c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006890:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d003      	beq.n	80068a0 <HCD_RXQLVL_IRQHandler+0x44>
 8006898:	2b05      	cmp	r3, #5
 800689a:	f000 8082 	beq.w	80069a2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800689e:	e083      	b.n	80069a8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d07f      	beq.n	80069a6 <HCD_RXQLVL_IRQHandler+0x14a>
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	440b      	add	r3, r1
 80068b4:	3344      	adds	r3, #68	; 0x44
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d074      	beq.n	80069a6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	440b      	add	r3, r1
 80068ce:	3344      	adds	r3, #68	; 0x44
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	b292      	uxth	r2, r2
 80068d6:	4619      	mov	r1, r3
 80068d8:	f004 fbed 	bl	800b0b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	440b      	add	r3, r1
 80068ea:	3344      	adds	r3, #68	; 0x44
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	18d1      	adds	r1, r2, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4403      	add	r3, r0
 8006900:	3344      	adds	r3, #68	; 0x44
 8006902:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	440b      	add	r3, r1
 8006912:	334c      	adds	r3, #76	; 0x4c
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	18d1      	adds	r1, r2, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4403      	add	r3, r0
 8006928:	334c      	adds	r3, #76	; 0x4c
 800692a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <HCD_RXQLVL_IRQHandler+0x154>)
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d031      	beq.n	80069a6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	4413      	add	r3, r2
 800694a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006958:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006960:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696e:	461a      	mov	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	440b      	add	r3, r1
 8006982:	3350      	adds	r3, #80	; 0x50
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	f083 0301 	eor.w	r3, r3, #1
 800698a:	b2d8      	uxtb	r0, r3
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	440b      	add	r3, r1
 800699a:	3350      	adds	r3, #80	; 0x50
 800699c:	4602      	mov	r2, r0
 800699e:	701a      	strb	r2, [r3, #0]
      break;
 80069a0:	e001      	b.n	80069a6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80069a2:	bf00      	nop
 80069a4:	e000      	b.n	80069a8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80069a6:	bf00      	nop
  }
}
 80069a8:	bf00      	nop
 80069aa:	3728      	adds	r7, #40	; 0x28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	1ff80000 	.word	0x1ff80000

080069b4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80069e0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d10b      	bne.n	8006a04 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d102      	bne.n	80069fc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f009 fdf4 	bl	80105e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f043 0302 	orr.w	r3, r3, #2
 8006a02:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d132      	bne.n	8006a74 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f043 0308 	orr.w	r3, r3, #8
 8006a14:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d126      	bne.n	8006a6e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d113      	bne.n	8006a50 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a32:	d106      	bne.n	8006a42 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2102      	movs	r1, #2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f004 fc76 	bl	800b32c <USB_InitFSLSPClkSel>
 8006a40:	e011      	b.n	8006a66 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2101      	movs	r1, #1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f004 fc6f 	bl	800b32c <USB_InitFSLSPClkSel>
 8006a4e:	e00a      	b.n	8006a66 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d106      	bne.n	8006a66 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006a64:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f009 fdea 	bl	8010640 <HAL_HCD_PortEnabled_Callback>
 8006a6c:	e002      	b.n	8006a74 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f009 fdf4 	bl	801065c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d103      	bne.n	8006a86 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f043 0320 	orr.w	r3, r3, #32
 8006a84:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6013      	str	r3, [r2, #0]
}
 8006a92:	bf00      	nop
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e11f      	b.n	8006cee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fa f83a 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2224      	movs	r2, #36	; 0x24
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0201 	bic.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b00:	f002 f882 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 8006b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	4a7b      	ldr	r2, [pc, #492]	; (8006cf8 <HAL_I2C_Init+0x25c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d807      	bhi.n	8006b20 <HAL_I2C_Init+0x84>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a7a      	ldr	r2, [pc, #488]	; (8006cfc <HAL_I2C_Init+0x260>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	bf94      	ite	ls
 8006b18:	2301      	movls	r3, #1
 8006b1a:	2300      	movhi	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	e006      	b.n	8006b2e <HAL_I2C_Init+0x92>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a77      	ldr	r2, [pc, #476]	; (8006d00 <HAL_I2C_Init+0x264>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	bf94      	ite	ls
 8006b28:	2301      	movls	r3, #1
 8006b2a:	2300      	movhi	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e0db      	b.n	8006cee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4a72      	ldr	r2, [pc, #456]	; (8006d04 <HAL_I2C_Init+0x268>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	0c9b      	lsrs	r3, r3, #18
 8006b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	4a64      	ldr	r2, [pc, #400]	; (8006cf8 <HAL_I2C_Init+0x25c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d802      	bhi.n	8006b70 <HAL_I2C_Init+0xd4>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	e009      	b.n	8006b84 <HAL_I2C_Init+0xe8>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	4a63      	ldr	r2, [pc, #396]	; (8006d08 <HAL_I2C_Init+0x26c>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	099b      	lsrs	r3, r3, #6
 8006b82:	3301      	adds	r3, #1
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4956      	ldr	r1, [pc, #344]	; (8006cf8 <HAL_I2C_Init+0x25c>)
 8006ba0:	428b      	cmp	r3, r1
 8006ba2:	d80d      	bhi.n	8006bc0 <HAL_I2C_Init+0x124>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	1e59      	subs	r1, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	bf38      	it	cc
 8006bbc:	2304      	movcc	r3, #4
 8006bbe:	e04f      	b.n	8006c60 <HAL_I2C_Init+0x1c4>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d111      	bne.n	8006bec <HAL_I2C_Init+0x150>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	1e58      	subs	r0, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6859      	ldr	r1, [r3, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	440b      	add	r3, r1
 8006bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bda:	3301      	adds	r3, #1
 8006bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e012      	b.n	8006c12 <HAL_I2C_Init+0x176>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1e58      	subs	r0, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6859      	ldr	r1, [r3, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	0099      	lsls	r1, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c02:	3301      	adds	r3, #1
 8006c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2301      	moveq	r3, #1
 8006c0e:	2300      	movne	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <HAL_I2C_Init+0x17e>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e022      	b.n	8006c60 <HAL_I2C_Init+0x1c4>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10e      	bne.n	8006c40 <HAL_I2C_Init+0x1a4>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1e58      	subs	r0, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	440b      	add	r3, r1
 8006c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c34:	3301      	adds	r3, #1
 8006c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3e:	e00f      	b.n	8006c60 <HAL_I2C_Init+0x1c4>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	1e58      	subs	r0, r3, #1
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	0099      	lsls	r1, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c56:	3301      	adds	r3, #1
 8006c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	6809      	ldr	r1, [r1, #0]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69da      	ldr	r2, [r3, #28]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6911      	ldr	r1, [r2, #16]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68d2      	ldr	r2, [r2, #12]
 8006c9a:	4311      	orrs	r1, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6812      	ldr	r2, [r2, #0]
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	000186a0 	.word	0x000186a0
 8006cfc:	001e847f 	.word	0x001e847f
 8006d00:	003d08ff 	.word	0x003d08ff
 8006d04:	431bde83 	.word	0x431bde83
 8006d08:	10624dd3 	.word	0x10624dd3

08006d0c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e021      	b.n	8006d62 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2224      	movs	r2, #36	; 0x24
 8006d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0201 	bic.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7f9 ff6a 	bl	8000c10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	817b      	strh	r3, [r7, #10]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	813b      	strh	r3, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d86:	f7fd f847 	bl	8003e18 <HAL_GetTick>
 8006d8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	f040 80d9 	bne.w	8006f4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	2319      	movs	r3, #25
 8006da0:	2201      	movs	r2, #1
 8006da2:	496d      	ldr	r1, [pc, #436]	; (8006f58 <HAL_I2C_Mem_Write+0x1ec>)
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fc8d 	bl	80076c4 <I2C_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006db0:	2302      	movs	r3, #2
 8006db2:	e0cc      	b.n	8006f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_I2C_Mem_Write+0x56>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e0c5      	b.n	8006f4e <HAL_I2C_Mem_Write+0x1e2>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d007      	beq.n	8006de8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006df6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2221      	movs	r2, #33	; 0x21
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2240      	movs	r2, #64	; 0x40
 8006e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a3a      	ldr	r2, [r7, #32]
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4a4d      	ldr	r2, [pc, #308]	; (8006f5c <HAL_I2C_Mem_Write+0x1f0>)
 8006e28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e2a:	88f8      	ldrh	r0, [r7, #6]
 8006e2c:	893a      	ldrh	r2, [r7, #8]
 8006e2e:	8979      	ldrh	r1, [r7, #10]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	9301      	str	r3, [sp, #4]
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	4603      	mov	r3, r0
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fac4 	bl	80073c8 <I2C_RequestMemoryWrite>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d052      	beq.n	8006eec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e081      	b.n	8006f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fd0e 	bl	8007870 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00d      	beq.n	8006e76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d107      	bne.n	8006e72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e06b      	b.n	8006f4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	781a      	ldrb	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d11b      	bne.n	8006eec <HAL_I2C_Mem_Write+0x180>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d017      	beq.n	8006eec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1aa      	bne.n	8006e4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fcfa 	bl	80078f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00d      	beq.n	8006f20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d107      	bne.n	8006f1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e016      	b.n	8006f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	00100002 	.word	0x00100002
 8006f5c:	ffff0000 	.word	0xffff0000

08006f60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08c      	sub	sp, #48	; 0x30
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	817b      	strh	r3, [r7, #10]
 8006f72:	460b      	mov	r3, r1
 8006f74:	813b      	strh	r3, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f7a:	f7fc ff4d 	bl	8003e18 <HAL_GetTick>
 8006f7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	f040 8208 	bne.w	800739e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	2319      	movs	r3, #25
 8006f94:	2201      	movs	r2, #1
 8006f96:	497b      	ldr	r1, [pc, #492]	; (8007184 <HAL_I2C_Mem_Read+0x224>)
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fb93 	bl	80076c4 <I2C_WaitOnFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e1fb      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_I2C_Mem_Read+0x56>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e1f4      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d007      	beq.n	8006fdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2222      	movs	r2, #34	; 0x22
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2240      	movs	r2, #64	; 0x40
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800700c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4a5b      	ldr	r2, [pc, #364]	; (8007188 <HAL_I2C_Mem_Read+0x228>)
 800701c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800701e:	88f8      	ldrh	r0, [r7, #6]
 8007020:	893a      	ldrh	r2, [r7, #8]
 8007022:	8979      	ldrh	r1, [r7, #10]
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	4603      	mov	r3, r0
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 fa60 	bl	80074f4 <I2C_RequestMemoryRead>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e1b0      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d113      	bne.n	800706e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007046:	2300      	movs	r3, #0
 8007048:	623b      	str	r3, [r7, #32]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	623b      	str	r3, [r7, #32]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	623b      	str	r3, [r7, #32]
 800705a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e184      	b.n	8007378 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007072:	2b01      	cmp	r3, #1
 8007074:	d11b      	bne.n	80070ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007086:	2300      	movs	r3, #0
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	61fb      	str	r3, [r7, #28]
 800709a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e164      	b.n	8007378 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d11b      	bne.n	80070ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070d6:	2300      	movs	r3, #0
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	e144      	b.n	8007378 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007104:	e138      	b.n	8007378 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710a:	2b03      	cmp	r3, #3
 800710c:	f200 80f1 	bhi.w	80072f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007114:	2b01      	cmp	r3, #1
 8007116:	d123      	bne.n	8007160 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fc29 	bl	8007974 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e139      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691a      	ldr	r2, [r3, #16]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007148:	3b01      	subs	r3, #1
 800714a:	b29a      	uxth	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800715e:	e10b      	b.n	8007378 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007164:	2b02      	cmp	r3, #2
 8007166:	d14e      	bne.n	8007206 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	2200      	movs	r2, #0
 8007170:	4906      	ldr	r1, [pc, #24]	; (800718c <HAL_I2C_Mem_Read+0x22c>)
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 faa6 	bl	80076c4 <I2C_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d008      	beq.n	8007190 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e10e      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
 8007182:	bf00      	nop
 8007184:	00100002 	.word	0x00100002
 8007188:	ffff0000 	.word	0xffff0000
 800718c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800719e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007204:	e0b8      	b.n	8007378 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	2200      	movs	r2, #0
 800720e:	4966      	ldr	r1, [pc, #408]	; (80073a8 <HAL_I2C_Mem_Read+0x448>)
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fa57 	bl	80076c4 <I2C_WaitOnFlagUntilTimeout>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e0bf      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800722e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	2200      	movs	r2, #0
 800726a:	494f      	ldr	r1, [pc, #316]	; (80073a8 <HAL_I2C_Mem_Read+0x448>)
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fa29 	bl	80076c4 <I2C_WaitOnFlagUntilTimeout>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e091      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800728a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691a      	ldr	r2, [r3, #16]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072f0:	e042      	b.n	8007378 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fb3c 	bl	8007974 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e04c      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b04      	cmp	r3, #4
 8007344:	d118      	bne.n	8007378 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	f47f aec2 	bne.w	8007106 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2220      	movs	r2, #32
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e000      	b.n	80073a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800739e:	2302      	movs	r3, #2
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	00010004 	.word	0x00010004

080073ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ba:	b2db      	uxtb	r3, r3
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	817b      	strh	r3, [r7, #10]
 80073da:	460b      	mov	r3, r1
 80073dc:	813b      	strh	r3, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f960 	bl	80076c4 <I2C_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007418:	d103      	bne.n	8007422 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007420:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e05f      	b.n	80074e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007426:	897b      	ldrh	r3, [r7, #10]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007434:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	6a3a      	ldr	r2, [r7, #32]
 800743a:	492d      	ldr	r1, [pc, #180]	; (80074f0 <I2C_RequestMemoryWrite+0x128>)
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f998 	bl	8007772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e04c      	b.n	80074e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007464:	6a39      	ldr	r1, [r7, #32]
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fa02 	bl	8007870 <I2C_WaitOnTXEFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00d      	beq.n	800748e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	2b04      	cmp	r3, #4
 8007478:	d107      	bne.n	800748a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007488:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e02b      	b.n	80074e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d105      	bne.n	80074a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007494:	893b      	ldrh	r3, [r7, #8]
 8007496:	b2da      	uxtb	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	611a      	str	r2, [r3, #16]
 800749e:	e021      	b.n	80074e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074a0:	893b      	ldrh	r3, [r7, #8]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b0:	6a39      	ldr	r1, [r7, #32]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f9dc 	bl	8007870 <I2C_WaitOnTXEFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d107      	bne.n	80074d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e005      	b.n	80074e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074da:	893b      	ldrh	r3, [r7, #8]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	00010002 	.word	0x00010002

080074f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	461a      	mov	r2, r3
 8007502:	4603      	mov	r3, r0
 8007504:	817b      	strh	r3, [r7, #10]
 8007506:	460b      	mov	r3, r1
 8007508:	813b      	strh	r3, [r7, #8]
 800750a:	4613      	mov	r3, r2
 800750c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800751c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800752c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	2200      	movs	r2, #0
 8007536:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f8c2 	bl	80076c4 <I2C_WaitOnFlagUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00d      	beq.n	8007562 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007554:	d103      	bne.n	800755e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800755c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e0aa      	b.n	80076b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007562:	897b      	ldrh	r3, [r7, #10]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	461a      	mov	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007570:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	6a3a      	ldr	r2, [r7, #32]
 8007576:	4952      	ldr	r1, [pc, #328]	; (80076c0 <I2C_RequestMemoryRead+0x1cc>)
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f8fa 	bl	8007772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e097      	b.n	80076b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800759e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a0:	6a39      	ldr	r1, [r7, #32]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f964 	bl	8007870 <I2C_WaitOnTXEFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d107      	bne.n	80075c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e076      	b.n	80076b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075ca:	88fb      	ldrh	r3, [r7, #6]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d105      	bne.n	80075dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075d0:	893b      	ldrh	r3, [r7, #8]
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	611a      	str	r2, [r3, #16]
 80075da:	e021      	b.n	8007620 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075dc:	893b      	ldrh	r3, [r7, #8]
 80075de:	0a1b      	lsrs	r3, r3, #8
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ec:	6a39      	ldr	r1, [r7, #32]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f93e 	bl	8007870 <I2C_WaitOnTXEFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00d      	beq.n	8007616 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d107      	bne.n	8007612 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007610:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e050      	b.n	80076b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007616:	893b      	ldrh	r3, [r7, #8]
 8007618:	b2da      	uxtb	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007622:	6a39      	ldr	r1, [r7, #32]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f923 	bl	8007870 <I2C_WaitOnTXEFlagUntilTimeout>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00d      	beq.n	800764c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	2b04      	cmp	r3, #4
 8007636:	d107      	bne.n	8007648 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007646:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e035      	b.n	80076b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800765a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	2200      	movs	r2, #0
 8007664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f82b 	bl	80076c4 <I2C_WaitOnFlagUntilTimeout>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00d      	beq.n	8007690 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007682:	d103      	bne.n	800768c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800768a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e013      	b.n	80076b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007690:	897b      	ldrh	r3, [r7, #10]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f043 0301 	orr.w	r3, r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	6a3a      	ldr	r2, [r7, #32]
 80076a4:	4906      	ldr	r1, [pc, #24]	; (80076c0 <I2C_RequestMemoryRead+0x1cc>)
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f863 	bl	8007772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	00010002 	.word	0x00010002

080076c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076d4:	e025      	b.n	8007722 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d021      	beq.n	8007722 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076de:	f7fc fb9b 	bl	8003e18 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d116      	bne.n	8007722 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f043 0220 	orr.w	r2, r3, #32
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e023      	b.n	800776a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b01      	cmp	r3, #1
 800772a:	d10d      	bne.n	8007748 <I2C_WaitOnFlagUntilTimeout+0x84>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	43da      	mvns	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	e00c      	b.n	8007762 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	43da      	mvns	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4013      	ands	r3, r2
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	bf0c      	ite	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	2300      	movne	r3, #0
 800775e:	b2db      	uxtb	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	429a      	cmp	r2, r3
 8007766:	d0b6      	beq.n	80076d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	607a      	str	r2, [r7, #4]
 800777e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007780:	e051      	b.n	8007826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007790:	d123      	bne.n	80077da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f043 0204 	orr.w	r2, r3, #4
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e046      	b.n	8007868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e0:	d021      	beq.n	8007826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e2:	f7fc fb19 	bl	8003e18 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d302      	bcc.n	80077f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d116      	bne.n	8007826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f043 0220 	orr.w	r2, r3, #32
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e020      	b.n	8007868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b01      	cmp	r3, #1
 800782e:	d10c      	bne.n	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	43da      	mvns	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4013      	ands	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	bf14      	ite	ne
 8007842:	2301      	movne	r3, #1
 8007844:	2300      	moveq	r3, #0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	e00b      	b.n	8007862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	43da      	mvns	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4013      	ands	r3, r2
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf14      	ite	ne
 800785c:	2301      	movne	r3, #1
 800785e:	2300      	moveq	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d18d      	bne.n	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800787c:	e02d      	b.n	80078da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f8ce 	bl	8007a20 <I2C_IsAcknowledgeFailed>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e02d      	b.n	80078ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007894:	d021      	beq.n	80078da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007896:	f7fc fabf 	bl	8003e18 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d302      	bcc.n	80078ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d116      	bne.n	80078da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	f043 0220 	orr.w	r2, r3, #32
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e007      	b.n	80078ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e4:	2b80      	cmp	r3, #128	; 0x80
 80078e6:	d1ca      	bne.n	800787e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078fe:	e02d      	b.n	800795c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f88d 	bl	8007a20 <I2C_IsAcknowledgeFailed>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e02d      	b.n	800796c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d021      	beq.n	800795c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007918:	f7fc fa7e 	bl	8003e18 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	429a      	cmp	r2, r3
 8007926:	d302      	bcc.n	800792e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d116      	bne.n	800795c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	f043 0220 	orr.w	r2, r3, #32
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e007      	b.n	800796c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f003 0304 	and.w	r3, r3, #4
 8007966:	2b04      	cmp	r3, #4
 8007968:	d1ca      	bne.n	8007900 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007980:	e042      	b.n	8007a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d119      	bne.n	80079c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0210 	mvn.w	r2, #16
 8007998:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e029      	b.n	8007a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c4:	f7fc fa28 	bl	8003e18 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d302      	bcc.n	80079da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d116      	bne.n	8007a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	f043 0220 	orr.w	r2, r3, #32
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e007      	b.n	8007a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d1b5      	bne.n	8007982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a36:	d11b      	bne.n	8007a70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	f043 0204 	orr.w	r2, r3, #4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e000      	b.n	8007a72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d129      	bne.n	8007ae8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2224      	movs	r2, #36	; 0x24
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0201 	bic.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0210 	bic.w	r2, r2, #16
 8007aba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0201 	orr.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e000      	b.n	8007aea <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007ae8:	2302      	movs	r3, #2
  }
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b085      	sub	sp, #20
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d12a      	bne.n	8007b66 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2224      	movs	r2, #36	; 0x24
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0201 	bic.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007b30:	89fb      	ldrh	r3, [r7, #14]
 8007b32:	f023 030f 	bic.w	r3, r3, #15
 8007b36:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	89fb      	ldrh	r3, [r7, #14]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	89fa      	ldrh	r2, [r7, #14]
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e000      	b.n	8007b68 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007b66:	2302      	movs	r3, #2
  }
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e0bf      	b.n	8007d06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7f9 f912 	bl	8000dc4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007bb6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6999      	ldr	r1, [r3, #24]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bcc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6899      	ldr	r1, [r3, #8]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	4b4a      	ldr	r3, [pc, #296]	; (8007d10 <HAL_LTDC_Init+0x19c>)
 8007be8:	400b      	ands	r3, r1
 8007bea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6899      	ldr	r1, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68d9      	ldr	r1, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	4b3e      	ldr	r3, [pc, #248]	; (8007d10 <HAL_LTDC_Init+0x19c>)
 8007c16:	400b      	ands	r3, r1
 8007c18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68d9      	ldr	r1, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1a      	ldr	r2, [r3, #32]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6919      	ldr	r1, [r3, #16]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b33      	ldr	r3, [pc, #204]	; (8007d10 <HAL_LTDC_Init+0x19c>)
 8007c44:	400b      	ands	r3, r1
 8007c46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	041b      	lsls	r3, r3, #16
 8007c4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6919      	ldr	r1, [r3, #16]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6959      	ldr	r1, [r3, #20]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <HAL_LTDC_Init+0x19c>)
 8007c72:	400b      	ands	r3, r1
 8007c74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	041b      	lsls	r3, r3, #16
 8007c7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6959      	ldr	r1, [r3, #20]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007ca4:	041b      	lsls	r3, r3, #16
 8007ca6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0206 	orr.w	r2, r2, #6
 8007ce2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0201 	orr.w	r2, r2, #1
 8007cf2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	f000f800 	.word	0xf000f800

08007d14 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d023      	beq.n	8007d7e <HAL_LTDC_IRQHandler+0x6a>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01e      	beq.n	8007d7e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0204 	bic.w	r2, r2, #4
 8007d4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2204      	movs	r2, #4
 8007d56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d5e:	f043 0201 	orr.w	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f86f 	bl	8007e5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d023      	beq.n	8007dd0 <HAL_LTDC_IRQHandler+0xbc>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01e      	beq.n	8007dd0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0202 	bic.w	r2, r2, #2
 8007da0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2202      	movs	r2, #2
 8007da8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007db0:	f043 0202 	orr.w	r2, r3, #2
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f846 	bl	8007e5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01b      	beq.n	8007e12 <HAL_LTDC_IRQHandler+0xfe>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d016      	beq.n	8007e12 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f82f 	bl	8007e70 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <HAL_LTDC_IRQHandler+0x140>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d016      	beq.n	8007e54 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0208 	bic.w	r2, r2, #8
 8007e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f818 	bl	8007e84 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007e54:	bf00      	nop
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e98:	b5b0      	push	{r4, r5, r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d101      	bne.n	8007eb2 <HAL_LTDC_ConfigLayer+0x1a>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e02c      	b.n	8007f0c <HAL_LTDC_ConfigLayer+0x74>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2134      	movs	r1, #52	; 0x34
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f8b9 	bl	8008064 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bdb0      	pop	{r4, r5, r7, pc}

08007f14 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_LTDC_ConfigColorKeying+0x1a>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e030      	b.n	8007f90 <HAL_LTDC_ConfigColorKeying+0x7c>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	01db      	lsls	r3, r3, #7
 8007f48:	4413      	add	r3, r2
 8007f4a:	3384      	adds	r3, #132	; 0x84
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	4611      	mov	r1, r2
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	01d2      	lsls	r2, r2, #7
 8007f58:	440a      	add	r2, r1
 8007f5a:	3284      	adds	r2, #132	; 0x84
 8007f5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f60:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	01db      	lsls	r3, r3, #7
 8007f6c:	4413      	add	r3, r2
 8007f6e:	3384      	adds	r3, #132	; 0x84
 8007f70:	461a      	mov	r2, r3
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_LTDC_EnableColorKeying+0x18>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e026      	b.n	8008002 <HAL_LTDC_EnableColorKeying+0x66>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	01db      	lsls	r3, r3, #7
 8007fce:	4413      	add	r3, r2
 8007fd0:	3384      	adds	r3, #132	; 0x84
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	01d2      	lsls	r2, r2, #7
 8007fde:	440a      	add	r2, r1
 8007fe0:	3284      	adds	r2, #132	; 0x84
 8007fe2:	f043 0302 	orr.w	r3, r3, #2
 8007fe6:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2201      	movs	r2, #1
 8007fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_LTDC_EnableDither+0x16>
 8008022:	2302      	movs	r3, #2
 8008024:	e016      	b.n	8008054 <HAL_LTDC_EnableDither+0x44>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008036:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <HAL_LTDC_EnableDither+0x50>)
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	4a09      	ldr	r2, [pc, #36]	; (8008060 <HAL_LTDC_EnableDither+0x50>)
 800803c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008040:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	40016800 	.word	0x40016800

08008064 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008064:	b480      	push	{r7}
 8008066:	b089      	sub	sp, #36	; 0x24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	0c1b      	lsrs	r3, r3, #16
 800807c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008080:	4413      	add	r3, r2
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	01db      	lsls	r3, r3, #7
 8008090:	4413      	add	r3, r2
 8008092:	3384      	adds	r3, #132	; 0x84
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	4611      	mov	r1, r2
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	01d2      	lsls	r2, r2, #7
 80080a0:	440a      	add	r2, r1
 80080a2:	3284      	adds	r2, #132	; 0x84
 80080a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80080a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	0c1b      	lsrs	r3, r3, #16
 80080b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080ba:	4413      	add	r3, r2
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4619      	mov	r1, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	01db      	lsls	r3, r3, #7
 80080c8:	440b      	add	r3, r1
 80080ca:	3384      	adds	r3, #132	; 0x84
 80080cc:	4619      	mov	r1, r3
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080e2:	4413      	add	r3, r2
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	01db      	lsls	r3, r3, #7
 80080f2:	4413      	add	r3, r2
 80080f4:	3384      	adds	r3, #132	; 0x84
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	6812      	ldr	r2, [r2, #0]
 80080fc:	4611      	mov	r1, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	01d2      	lsls	r2, r2, #7
 8008102:	440a      	add	r2, r1
 8008104:	3284      	adds	r2, #132	; 0x84
 8008106:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800810a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800811a:	4413      	add	r3, r2
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4619      	mov	r1, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	01db      	lsls	r3, r3, #7
 8008128:	440b      	add	r3, r1
 800812a:	3384      	adds	r3, #132	; 0x84
 800812c:	4619      	mov	r1, r3
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4313      	orrs	r3, r2
 8008132:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	01db      	lsls	r3, r3, #7
 800813e:	4413      	add	r3, r2
 8008140:	3384      	adds	r3, #132	; 0x84
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	4611      	mov	r1, r2
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	01d2      	lsls	r2, r2, #7
 800814e:	440a      	add	r2, r1
 8008150:	3284      	adds	r2, #132	; 0x84
 8008152:	f023 0307 	bic.w	r3, r3, #7
 8008156:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	01db      	lsls	r3, r3, #7
 8008162:	4413      	add	r3, r2
 8008164:	3384      	adds	r3, #132	; 0x84
 8008166:	461a      	mov	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	061b      	lsls	r3, r3, #24
 8008188:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	01db      	lsls	r3, r3, #7
 8008194:	4413      	add	r3, r2
 8008196:	3384      	adds	r3, #132	; 0x84
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	01db      	lsls	r3, r3, #7
 80081a4:	4413      	add	r3, r2
 80081a6:	3384      	adds	r3, #132	; 0x84
 80081a8:	461a      	mov	r2, r3
 80081aa:	2300      	movs	r3, #0
 80081ac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081b4:	461a      	mov	r2, r3
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	431a      	orrs	r2, r3
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	431a      	orrs	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4619      	mov	r1, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	01db      	lsls	r3, r3, #7
 80081c8:	440b      	add	r3, r1
 80081ca:	3384      	adds	r3, #132	; 0x84
 80081cc:	4619      	mov	r1, r3
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	461a      	mov	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	01db      	lsls	r3, r3, #7
 80081de:	4413      	add	r3, r2
 80081e0:	3384      	adds	r3, #132	; 0x84
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	6812      	ldr	r2, [r2, #0]
 80081e8:	4611      	mov	r1, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	01d2      	lsls	r2, r2, #7
 80081ee:	440a      	add	r2, r1
 80081f0:	3284      	adds	r2, #132	; 0x84
 80081f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	01db      	lsls	r3, r3, #7
 8008202:	4413      	add	r3, r2
 8008204:	3384      	adds	r3, #132	; 0x84
 8008206:	461a      	mov	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	01db      	lsls	r3, r3, #7
 8008218:	4413      	add	r3, r2
 800821a:	3384      	adds	r3, #132	; 0x84
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	6812      	ldr	r2, [r2, #0]
 8008222:	4611      	mov	r1, r2
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	01d2      	lsls	r2, r2, #7
 8008228:	440a      	add	r2, r1
 800822a:	3284      	adds	r2, #132	; 0x84
 800822c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008230:	f023 0307 	bic.w	r3, r3, #7
 8008234:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	69da      	ldr	r2, [r3, #28]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	68f9      	ldr	r1, [r7, #12]
 8008240:	6809      	ldr	r1, [r1, #0]
 8008242:	4608      	mov	r0, r1
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	01c9      	lsls	r1, r1, #7
 8008248:	4401      	add	r1, r0
 800824a:	3184      	adds	r1, #132	; 0x84
 800824c:	4313      	orrs	r3, r2
 800824e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	01db      	lsls	r3, r3, #7
 800825a:	4413      	add	r3, r2
 800825c:	3384      	adds	r3, #132	; 0x84
 800825e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	01db      	lsls	r3, r3, #7
 800826a:	4413      	add	r3, r2
 800826c:	3384      	adds	r3, #132	; 0x84
 800826e:	461a      	mov	r2, r3
 8008270:	2300      	movs	r3, #0
 8008272:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	01db      	lsls	r3, r3, #7
 800827e:	4413      	add	r3, r2
 8008280:	3384      	adds	r3, #132	; 0x84
 8008282:	461a      	mov	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008292:	2304      	movs	r3, #4
 8008294:	61fb      	str	r3, [r7, #28]
 8008296:	e01b      	b.n	80082d0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d102      	bne.n	80082a6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80082a0:	2303      	movs	r3, #3
 80082a2:	61fb      	str	r3, [r7, #28]
 80082a4:	e014      	b.n	80082d0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d00b      	beq.n	80082c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d007      	beq.n	80082c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d003      	beq.n	80082c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082c2:	2b07      	cmp	r3, #7
 80082c4:	d102      	bne.n	80082cc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80082c6:	2302      	movs	r3, #2
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	e001      	b.n	80082d0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80082cc:	2301      	movs	r3, #1
 80082ce:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	01db      	lsls	r3, r3, #7
 80082da:	4413      	add	r3, r2
 80082dc:	3384      	adds	r3, #132	; 0x84
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	4611      	mov	r1, r2
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	01d2      	lsls	r2, r2, #7
 80082ea:	440a      	add	r2, r1
 80082ec:	3284      	adds	r2, #132	; 0x84
 80082ee:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80082f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	fb02 f303 	mul.w	r3, r2, r3
 80082fe:	041a      	lsls	r2, r3, #16
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6859      	ldr	r1, [r3, #4]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	1acb      	subs	r3, r1, r3
 800830a:	69f9      	ldr	r1, [r7, #28]
 800830c:	fb01 f303 	mul.w	r3, r1, r3
 8008310:	3303      	adds	r3, #3
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	6809      	ldr	r1, [r1, #0]
 8008316:	4608      	mov	r0, r1
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	01c9      	lsls	r1, r1, #7
 800831c:	4401      	add	r1, r0
 800831e:	3184      	adds	r1, #132	; 0x84
 8008320:	4313      	orrs	r3, r2
 8008322:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	01db      	lsls	r3, r3, #7
 800832e:	4413      	add	r3, r2
 8008330:	3384      	adds	r3, #132	; 0x84
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	6812      	ldr	r2, [r2, #0]
 8008338:	4611      	mov	r1, r2
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	01d2      	lsls	r2, r2, #7
 800833e:	440a      	add	r2, r1
 8008340:	3284      	adds	r2, #132	; 0x84
 8008342:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008346:	f023 0307 	bic.w	r3, r3, #7
 800834a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	01db      	lsls	r3, r3, #7
 8008356:	4413      	add	r3, r2
 8008358:	3384      	adds	r3, #132	; 0x84
 800835a:	461a      	mov	r2, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	01db      	lsls	r3, r3, #7
 800836c:	4413      	add	r3, r2
 800836e:	3384      	adds	r3, #132	; 0x84
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	6812      	ldr	r2, [r2, #0]
 8008376:	4611      	mov	r1, r2
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	01d2      	lsls	r2, r2, #7
 800837c:	440a      	add	r2, r1
 800837e:	3284      	adds	r2, #132	; 0x84
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	6013      	str	r3, [r2, #0]
}
 8008386:	bf00      	nop
 8008388:	3724      	adds	r7, #36	; 0x24
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
	...

08008394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e25b      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d075      	beq.n	800849e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083b2:	4ba3      	ldr	r3, [pc, #652]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f003 030c 	and.w	r3, r3, #12
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d00c      	beq.n	80083d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083be:	4ba0      	ldr	r3, [pc, #640]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d112      	bne.n	80083f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083ca:	4b9d      	ldr	r3, [pc, #628]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083d6:	d10b      	bne.n	80083f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d8:	4b99      	ldr	r3, [pc, #612]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d05b      	beq.n	800849c <HAL_RCC_OscConfig+0x108>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d157      	bne.n	800849c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e236      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f8:	d106      	bne.n	8008408 <HAL_RCC_OscConfig+0x74>
 80083fa:	4b91      	ldr	r3, [pc, #580]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a90      	ldr	r2, [pc, #576]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	e01d      	b.n	8008444 <HAL_RCC_OscConfig+0xb0>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008410:	d10c      	bne.n	800842c <HAL_RCC_OscConfig+0x98>
 8008412:	4b8b      	ldr	r3, [pc, #556]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a8a      	ldr	r2, [pc, #552]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	4b88      	ldr	r3, [pc, #544]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a87      	ldr	r2, [pc, #540]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	e00b      	b.n	8008444 <HAL_RCC_OscConfig+0xb0>
 800842c:	4b84      	ldr	r3, [pc, #528]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a83      	ldr	r2, [pc, #524]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	4b81      	ldr	r3, [pc, #516]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a80      	ldr	r2, [pc, #512]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 800843e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d013      	beq.n	8008474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800844c:	f7fb fce4 	bl	8003e18 <HAL_GetTick>
 8008450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008452:	e008      	b.n	8008466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008454:	f7fb fce0 	bl	8003e18 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	2b64      	cmp	r3, #100	; 0x64
 8008460:	d901      	bls.n	8008466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e1fb      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008466:	4b76      	ldr	r3, [pc, #472]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0f0      	beq.n	8008454 <HAL_RCC_OscConfig+0xc0>
 8008472:	e014      	b.n	800849e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008474:	f7fb fcd0 	bl	8003e18 <HAL_GetTick>
 8008478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800847c:	f7fb fccc 	bl	8003e18 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b64      	cmp	r3, #100	; 0x64
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e1e7      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800848e:	4b6c      	ldr	r3, [pc, #432]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f0      	bne.n	800847c <HAL_RCC_OscConfig+0xe8>
 800849a:	e000      	b.n	800849e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800849c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d063      	beq.n	8008572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084aa:	4b65      	ldr	r3, [pc, #404]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f003 030c 	and.w	r3, r3, #12
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084b6:	4b62      	ldr	r3, [pc, #392]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d11c      	bne.n	80084fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084c2:	4b5f      	ldr	r3, [pc, #380]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d116      	bne.n	80084fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ce:	4b5c      	ldr	r3, [pc, #368]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d005      	beq.n	80084e6 <HAL_RCC_OscConfig+0x152>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d001      	beq.n	80084e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e1bb      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084e6:	4b56      	ldr	r3, [pc, #344]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	4952      	ldr	r1, [pc, #328]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084fa:	e03a      	b.n	8008572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d020      	beq.n	8008546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008504:	4b4f      	ldr	r3, [pc, #316]	; (8008644 <HAL_RCC_OscConfig+0x2b0>)
 8008506:	2201      	movs	r2, #1
 8008508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800850a:	f7fb fc85 	bl	8003e18 <HAL_GetTick>
 800850e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008510:	e008      	b.n	8008524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008512:	f7fb fc81 	bl	8003e18 <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e19c      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008524:	4b46      	ldr	r3, [pc, #280]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0f0      	beq.n	8008512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008530:	4b43      	ldr	r3, [pc, #268]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	4940      	ldr	r1, [pc, #256]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008540:	4313      	orrs	r3, r2
 8008542:	600b      	str	r3, [r1, #0]
 8008544:	e015      	b.n	8008572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008546:	4b3f      	ldr	r3, [pc, #252]	; (8008644 <HAL_RCC_OscConfig+0x2b0>)
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854c:	f7fb fc64 	bl	8003e18 <HAL_GetTick>
 8008550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008552:	e008      	b.n	8008566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008554:	f7fb fc60 	bl	8003e18 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e17b      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008566:	4b36      	ldr	r3, [pc, #216]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f0      	bne.n	8008554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d030      	beq.n	80085e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d016      	beq.n	80085b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008586:	4b30      	ldr	r3, [pc, #192]	; (8008648 <HAL_RCC_OscConfig+0x2b4>)
 8008588:	2201      	movs	r2, #1
 800858a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800858c:	f7fb fc44 	bl	8003e18 <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008594:	f7fb fc40 	bl	8003e18 <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e15b      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085a6:	4b26      	ldr	r3, [pc, #152]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80085a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0f0      	beq.n	8008594 <HAL_RCC_OscConfig+0x200>
 80085b2:	e015      	b.n	80085e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085b4:	4b24      	ldr	r3, [pc, #144]	; (8008648 <HAL_RCC_OscConfig+0x2b4>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085ba:	f7fb fc2d 	bl	8003e18 <HAL_GetTick>
 80085be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085c2:	f7fb fc29 	bl	8003e18 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e144      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085d4:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80085d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f0      	bne.n	80085c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80a0 	beq.w	800872e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085ee:	2300      	movs	r3, #0
 80085f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085f2:	4b13      	ldr	r3, [pc, #76]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10f      	bne.n	800861e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085fe:	2300      	movs	r3, #0
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	4a0e      	ldr	r2, [pc, #56]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800860c:	6413      	str	r3, [r2, #64]	; 0x40
 800860e:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <HAL_RCC_OscConfig+0x2ac>)
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008616:	60bb      	str	r3, [r7, #8]
 8008618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800861a:	2301      	movs	r3, #1
 800861c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800861e:	4b0b      	ldr	r3, [pc, #44]	; (800864c <HAL_RCC_OscConfig+0x2b8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008626:	2b00      	cmp	r3, #0
 8008628:	d121      	bne.n	800866e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800862a:	4b08      	ldr	r3, [pc, #32]	; (800864c <HAL_RCC_OscConfig+0x2b8>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a07      	ldr	r2, [pc, #28]	; (800864c <HAL_RCC_OscConfig+0x2b8>)
 8008630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008636:	f7fb fbef 	bl	8003e18 <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800863c:	e011      	b.n	8008662 <HAL_RCC_OscConfig+0x2ce>
 800863e:	bf00      	nop
 8008640:	40023800 	.word	0x40023800
 8008644:	42470000 	.word	0x42470000
 8008648:	42470e80 	.word	0x42470e80
 800864c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008650:	f7fb fbe2 	bl	8003e18 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b02      	cmp	r3, #2
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e0fd      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008662:	4b81      	ldr	r3, [pc, #516]	; (8008868 <HAL_RCC_OscConfig+0x4d4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0f0      	beq.n	8008650 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d106      	bne.n	8008684 <HAL_RCC_OscConfig+0x2f0>
 8008676:	4b7d      	ldr	r3, [pc, #500]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	4a7c      	ldr	r2, [pc, #496]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 800867c:	f043 0301 	orr.w	r3, r3, #1
 8008680:	6713      	str	r3, [r2, #112]	; 0x70
 8008682:	e01c      	b.n	80086be <HAL_RCC_OscConfig+0x32a>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	2b05      	cmp	r3, #5
 800868a:	d10c      	bne.n	80086a6 <HAL_RCC_OscConfig+0x312>
 800868c:	4b77      	ldr	r3, [pc, #476]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008690:	4a76      	ldr	r2, [pc, #472]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 8008692:	f043 0304 	orr.w	r3, r3, #4
 8008696:	6713      	str	r3, [r2, #112]	; 0x70
 8008698:	4b74      	ldr	r3, [pc, #464]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	4a73      	ldr	r2, [pc, #460]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	6713      	str	r3, [r2, #112]	; 0x70
 80086a4:	e00b      	b.n	80086be <HAL_RCC_OscConfig+0x32a>
 80086a6:	4b71      	ldr	r3, [pc, #452]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 80086a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086aa:	4a70      	ldr	r2, [pc, #448]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 80086ac:	f023 0301 	bic.w	r3, r3, #1
 80086b0:	6713      	str	r3, [r2, #112]	; 0x70
 80086b2:	4b6e      	ldr	r3, [pc, #440]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	4a6d      	ldr	r2, [pc, #436]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 80086b8:	f023 0304 	bic.w	r3, r3, #4
 80086bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d015      	beq.n	80086f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c6:	f7fb fba7 	bl	8003e18 <HAL_GetTick>
 80086ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086cc:	e00a      	b.n	80086e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ce:	f7fb fba3 	bl	8003e18 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086dc:	4293      	cmp	r3, r2
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e0bc      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086e4:	4b61      	ldr	r3, [pc, #388]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 80086e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0ee      	beq.n	80086ce <HAL_RCC_OscConfig+0x33a>
 80086f0:	e014      	b.n	800871c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086f2:	f7fb fb91 	bl	8003e18 <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086f8:	e00a      	b.n	8008710 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086fa:	f7fb fb8d 	bl	8003e18 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f241 3288 	movw	r2, #5000	; 0x1388
 8008708:	4293      	cmp	r3, r2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e0a6      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008710:	4b56      	ldr	r3, [pc, #344]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 8008712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1ee      	bne.n	80086fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d105      	bne.n	800872e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008722:	4b52      	ldr	r3, [pc, #328]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	4a51      	ldr	r2, [pc, #324]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 8008728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800872c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 8092 	beq.w	800885c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008738:	4b4c      	ldr	r3, [pc, #304]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 030c 	and.w	r3, r3, #12
 8008740:	2b08      	cmp	r3, #8
 8008742:	d05c      	beq.n	80087fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d141      	bne.n	80087d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800874c:	4b48      	ldr	r3, [pc, #288]	; (8008870 <HAL_RCC_OscConfig+0x4dc>)
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008752:	f7fb fb61 	bl	8003e18 <HAL_GetTick>
 8008756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800875a:	f7fb fb5d 	bl	8003e18 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e078      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800876c:	4b3f      	ldr	r3, [pc, #252]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1f0      	bne.n	800875a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	69da      	ldr	r2, [r3, #28]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	019b      	lsls	r3, r3, #6
 8008788:	431a      	orrs	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	085b      	lsrs	r3, r3, #1
 8008790:	3b01      	subs	r3, #1
 8008792:	041b      	lsls	r3, r3, #16
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	061b      	lsls	r3, r3, #24
 800879c:	4933      	ldr	r1, [pc, #204]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087a2:	4b33      	ldr	r3, [pc, #204]	; (8008870 <HAL_RCC_OscConfig+0x4dc>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a8:	f7fb fb36 	bl	8003e18 <HAL_GetTick>
 80087ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087b0:	f7fb fb32 	bl	8003e18 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e04d      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c2:	4b2a      	ldr	r3, [pc, #168]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0f0      	beq.n	80087b0 <HAL_RCC_OscConfig+0x41c>
 80087ce:	e045      	b.n	800885c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d0:	4b27      	ldr	r3, [pc, #156]	; (8008870 <HAL_RCC_OscConfig+0x4dc>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087d6:	f7fb fb1f 	bl	8003e18 <HAL_GetTick>
 80087da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087dc:	e008      	b.n	80087f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087de:	f7fb fb1b 	bl	8003e18 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d901      	bls.n	80087f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e036      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087f0:	4b1e      	ldr	r3, [pc, #120]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f0      	bne.n	80087de <HAL_RCC_OscConfig+0x44a>
 80087fc:	e02e      	b.n	800885c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e029      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800880a:	4b18      	ldr	r3, [pc, #96]	; (800886c <HAL_RCC_OscConfig+0x4d8>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	429a      	cmp	r2, r3
 800881c:	d11c      	bne.n	8008858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008828:	429a      	cmp	r2, r3
 800882a:	d115      	bne.n	8008858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008832:	4013      	ands	r3, r2
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008838:	4293      	cmp	r3, r2
 800883a:	d10d      	bne.n	8008858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008846:	429a      	cmp	r2, r3
 8008848:	d106      	bne.n	8008858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008854:	429a      	cmp	r2, r3
 8008856:	d001      	beq.n	800885c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e000      	b.n	800885e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	40007000 	.word	0x40007000
 800886c:	40023800 	.word	0x40023800
 8008870:	42470060 	.word	0x42470060

08008874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e0cc      	b.n	8008a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008888:	4b68      	ldr	r3, [pc, #416]	; (8008a2c <HAL_RCC_ClockConfig+0x1b8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 030f 	and.w	r3, r3, #15
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d90c      	bls.n	80088b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008896:	4b65      	ldr	r3, [pc, #404]	; (8008a2c <HAL_RCC_ClockConfig+0x1b8>)
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800889e:	4b63      	ldr	r3, [pc, #396]	; (8008a2c <HAL_RCC_ClockConfig+0x1b8>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 030f 	and.w	r3, r3, #15
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e0b8      	b.n	8008a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d020      	beq.n	80088fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088c8:	4b59      	ldr	r3, [pc, #356]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	4a58      	ldr	r2, [pc, #352]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80088ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088e0:	4b53      	ldr	r3, [pc, #332]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	4a52      	ldr	r2, [pc, #328]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80088e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088ec:	4b50      	ldr	r3, [pc, #320]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	494d      	ldr	r1, [pc, #308]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d044      	beq.n	8008994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d107      	bne.n	8008922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008912:	4b47      	ldr	r3, [pc, #284]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d119      	bne.n	8008952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e07f      	b.n	8008a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d003      	beq.n	8008932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800892e:	2b03      	cmp	r3, #3
 8008930:	d107      	bne.n	8008942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008932:	4b3f      	ldr	r3, [pc, #252]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e06f      	b.n	8008a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008942:	4b3b      	ldr	r3, [pc, #236]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e067      	b.n	8008a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008952:	4b37      	ldr	r3, [pc, #220]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f023 0203 	bic.w	r2, r3, #3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	4934      	ldr	r1, [pc, #208]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 8008960:	4313      	orrs	r3, r2
 8008962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008964:	f7fb fa58 	bl	8003e18 <HAL_GetTick>
 8008968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800896a:	e00a      	b.n	8008982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800896c:	f7fb fa54 	bl	8003e18 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	f241 3288 	movw	r2, #5000	; 0x1388
 800897a:	4293      	cmp	r3, r2
 800897c:	d901      	bls.n	8008982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e04f      	b.n	8008a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008982:	4b2b      	ldr	r3, [pc, #172]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 020c 	and.w	r2, r3, #12
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	429a      	cmp	r2, r3
 8008992:	d1eb      	bne.n	800896c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008994:	4b25      	ldr	r3, [pc, #148]	; (8008a2c <HAL_RCC_ClockConfig+0x1b8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d20c      	bcs.n	80089bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089a2:	4b22      	ldr	r3, [pc, #136]	; (8008a2c <HAL_RCC_ClockConfig+0x1b8>)
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089aa:	4b20      	ldr	r3, [pc, #128]	; (8008a2c <HAL_RCC_ClockConfig+0x1b8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 030f 	and.w	r3, r3, #15
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d001      	beq.n	80089bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e032      	b.n	8008a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d008      	beq.n	80089da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089c8:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	4916      	ldr	r1, [pc, #88]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089e6:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	490e      	ldr	r1, [pc, #56]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089fa:	f000 f821 	bl	8008a40 <HAL_RCC_GetSysClockFreq>
 80089fe:	4601      	mov	r1, r0
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <HAL_RCC_ClockConfig+0x1bc>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	091b      	lsrs	r3, r3, #4
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	4a0a      	ldr	r2, [pc, #40]	; (8008a34 <HAL_RCC_ClockConfig+0x1c0>)
 8008a0c:	5cd3      	ldrb	r3, [r2, r3]
 8008a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8008a12:	4a09      	ldr	r2, [pc, #36]	; (8008a38 <HAL_RCC_ClockConfig+0x1c4>)
 8008a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <HAL_RCC_ClockConfig+0x1c8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7f8 fcf2 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40023c00 	.word	0x40023c00
 8008a30:	40023800 	.word	0x40023800
 8008a34:	08010d8c 	.word	0x08010d8c
 8008a38:	20000000 	.word	0x20000000
 8008a3c:	20000080 	.word	0x20000080

08008a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a56:	4b63      	ldr	r3, [pc, #396]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 030c 	and.w	r3, r3, #12
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d007      	beq.n	8008a72 <HAL_RCC_GetSysClockFreq+0x32>
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d008      	beq.n	8008a78 <HAL_RCC_GetSysClockFreq+0x38>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f040 80b4 	bne.w	8008bd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a6c:	4b5e      	ldr	r3, [pc, #376]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008a6e:	60bb      	str	r3, [r7, #8]
       break;
 8008a70:	e0b3      	b.n	8008bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a72:	4b5e      	ldr	r3, [pc, #376]	; (8008bec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008a74:	60bb      	str	r3, [r7, #8]
      break;
 8008a76:	e0b0      	b.n	8008bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a78:	4b5a      	ldr	r3, [pc, #360]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a82:	4b58      	ldr	r3, [pc, #352]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d04a      	beq.n	8008b24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a8e:	4b55      	ldr	r3, [pc, #340]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	099b      	lsrs	r3, r3, #6
 8008a94:	f04f 0400 	mov.w	r4, #0
 8008a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	ea03 0501 	and.w	r5, r3, r1
 8008aa4:	ea04 0602 	and.w	r6, r4, r2
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4632      	mov	r2, r6
 8008aac:	f04f 0300 	mov.w	r3, #0
 8008ab0:	f04f 0400 	mov.w	r4, #0
 8008ab4:	0154      	lsls	r4, r2, #5
 8008ab6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008aba:	014b      	lsls	r3, r1, #5
 8008abc:	4619      	mov	r1, r3
 8008abe:	4622      	mov	r2, r4
 8008ac0:	1b49      	subs	r1, r1, r5
 8008ac2:	eb62 0206 	sbc.w	r2, r2, r6
 8008ac6:	f04f 0300 	mov.w	r3, #0
 8008aca:	f04f 0400 	mov.w	r4, #0
 8008ace:	0194      	lsls	r4, r2, #6
 8008ad0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ad4:	018b      	lsls	r3, r1, #6
 8008ad6:	1a5b      	subs	r3, r3, r1
 8008ad8:	eb64 0402 	sbc.w	r4, r4, r2
 8008adc:	f04f 0100 	mov.w	r1, #0
 8008ae0:	f04f 0200 	mov.w	r2, #0
 8008ae4:	00e2      	lsls	r2, r4, #3
 8008ae6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008aea:	00d9      	lsls	r1, r3, #3
 8008aec:	460b      	mov	r3, r1
 8008aee:	4614      	mov	r4, r2
 8008af0:	195b      	adds	r3, r3, r5
 8008af2:	eb44 0406 	adc.w	r4, r4, r6
 8008af6:	f04f 0100 	mov.w	r1, #0
 8008afa:	f04f 0200 	mov.w	r2, #0
 8008afe:	0262      	lsls	r2, r4, #9
 8008b00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008b04:	0259      	lsls	r1, r3, #9
 8008b06:	460b      	mov	r3, r1
 8008b08:	4614      	mov	r4, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f04f 0400 	mov.w	r4, #0
 8008b14:	461a      	mov	r2, r3
 8008b16:	4623      	mov	r3, r4
 8008b18:	f7f7 fb6a 	bl	80001f0 <__aeabi_uldivmod>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	e049      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b24:	4b2f      	ldr	r3, [pc, #188]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	099b      	lsrs	r3, r3, #6
 8008b2a:	f04f 0400 	mov.w	r4, #0
 8008b2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008b32:	f04f 0200 	mov.w	r2, #0
 8008b36:	ea03 0501 	and.w	r5, r3, r1
 8008b3a:	ea04 0602 	and.w	r6, r4, r2
 8008b3e:	4629      	mov	r1, r5
 8008b40:	4632      	mov	r2, r6
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	f04f 0400 	mov.w	r4, #0
 8008b4a:	0154      	lsls	r4, r2, #5
 8008b4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008b50:	014b      	lsls	r3, r1, #5
 8008b52:	4619      	mov	r1, r3
 8008b54:	4622      	mov	r2, r4
 8008b56:	1b49      	subs	r1, r1, r5
 8008b58:	eb62 0206 	sbc.w	r2, r2, r6
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	f04f 0400 	mov.w	r4, #0
 8008b64:	0194      	lsls	r4, r2, #6
 8008b66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b6a:	018b      	lsls	r3, r1, #6
 8008b6c:	1a5b      	subs	r3, r3, r1
 8008b6e:	eb64 0402 	sbc.w	r4, r4, r2
 8008b72:	f04f 0100 	mov.w	r1, #0
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	00e2      	lsls	r2, r4, #3
 8008b7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b80:	00d9      	lsls	r1, r3, #3
 8008b82:	460b      	mov	r3, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	195b      	adds	r3, r3, r5
 8008b88:	eb44 0406 	adc.w	r4, r4, r6
 8008b8c:	f04f 0100 	mov.w	r1, #0
 8008b90:	f04f 0200 	mov.w	r2, #0
 8008b94:	02a2      	lsls	r2, r4, #10
 8008b96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008b9a:	0299      	lsls	r1, r3, #10
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4614      	mov	r4, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f04f 0400 	mov.w	r4, #0
 8008baa:	461a      	mov	r2, r3
 8008bac:	4623      	mov	r3, r4
 8008bae:	f7f7 fb1f 	bl	80001f0 <__aeabi_uldivmod>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008bb8:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	0c1b      	lsrs	r3, r3, #16
 8008bbe:	f003 0303 	and.w	r3, r3, #3
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd0:	60bb      	str	r3, [r7, #8]
      break;
 8008bd2:	e002      	b.n	8008bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bd4:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008bd6:	60bb      	str	r3, [r7, #8]
      break;
 8008bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bda:	68bb      	ldr	r3, [r7, #8]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be4:	40023800 	.word	0x40023800
 8008be8:	00f42400 	.word	0x00f42400
 8008bec:	007a1200 	.word	0x007a1200

08008bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bf4:	4b03      	ldr	r3, [pc, #12]	; (8008c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000000 	.word	0x20000000

08008c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c0c:	f7ff fff0 	bl	8008bf0 <HAL_RCC_GetHCLKFreq>
 8008c10:	4601      	mov	r1, r0
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	0a9b      	lsrs	r3, r3, #10
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	4a03      	ldr	r2, [pc, #12]	; (8008c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c1e:	5cd3      	ldrb	r3, [r2, r3]
 8008c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40023800 	.word	0x40023800
 8008c2c:	08010d9c 	.word	0x08010d9c

08008c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c34:	f7ff ffdc 	bl	8008bf0 <HAL_RCC_GetHCLKFreq>
 8008c38:	4601      	mov	r1, r0
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	0b5b      	lsrs	r3, r3, #13
 8008c40:	f003 0307 	and.w	r3, r3, #7
 8008c44:	4a03      	ldr	r2, [pc, #12]	; (8008c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c46:	5cd3      	ldrb	r3, [r2, r3]
 8008c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40023800 	.word	0x40023800
 8008c54:	08010d9c 	.word	0x08010d9c

08008c58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	220f      	movs	r2, #15
 8008c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f003 0203 	and.w	r2, r3, #3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008c74:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008c80:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008c8c:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	08db      	lsrs	r3, r3, #3
 8008c92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c9a:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <HAL_RCC_GetClockConfig+0x60>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 020f 	and.w	r2, r3, #15
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	601a      	str	r2, [r3, #0]
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	40023800 	.word	0x40023800
 8008cb8:	40023c00 	.word	0x40023c00

08008cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10b      	bne.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d105      	bne.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d075      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008cf0:	4bad      	ldr	r3, [pc, #692]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cf6:	f7fb f88f 	bl	8003e18 <HAL_GetTick>
 8008cfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cfc:	e008      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cfe:	f7fb f88b 	bl	8003e18 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d901      	bls.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e18b      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d10:	4ba6      	ldr	r3, [pc, #664]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1f0      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d009      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	019a      	lsls	r2, r3, #6
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	071b      	lsls	r3, r3, #28
 8008d34:	499d      	ldr	r1, [pc, #628]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01f      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d48:	4b98      	ldr	r3, [pc, #608]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d4e:	0f1b      	lsrs	r3, r3, #28
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	019a      	lsls	r2, r3, #6
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	061b      	lsls	r3, r3, #24
 8008d62:	431a      	orrs	r2, r3
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	071b      	lsls	r3, r3, #28
 8008d68:	4990      	ldr	r1, [pc, #576]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008d70:	4b8e      	ldr	r3, [pc, #568]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d76:	f023 021f 	bic.w	r2, r3, #31
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	498a      	ldr	r1, [pc, #552]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00d      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	019a      	lsls	r2, r3, #6
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	061b      	lsls	r3, r3, #24
 8008da0:	431a      	orrs	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	071b      	lsls	r3, r3, #28
 8008da8:	4980      	ldr	r1, [pc, #512]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008db0:	4b7d      	ldr	r3, [pc, #500]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008db6:	f7fb f82f 	bl	8003e18 <HAL_GetTick>
 8008dba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008dbc:	e008      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008dbe:	f7fb f82b 	bl	8003e18 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d901      	bls.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e12b      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008dd0:	4b76      	ldr	r3, [pc, #472]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0f0      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d105      	bne.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d079      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008df4:	4b6e      	ldr	r3, [pc, #440]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008dfa:	f7fb f80d 	bl	8003e18 <HAL_GetTick>
 8008dfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e00:	e008      	b.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008e02:	f7fb f809 	bl	8003e18 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e109      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e14:	4b65      	ldr	r3, [pc, #404]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e20:	d0ef      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d020      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e2e:	4b5f      	ldr	r3, [pc, #380]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e34:	0f1b      	lsrs	r3, r3, #28
 8008e36:	f003 0307 	and.w	r3, r3, #7
 8008e3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	019a      	lsls	r2, r3, #6
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	061b      	lsls	r3, r3, #24
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	071b      	lsls	r3, r3, #28
 8008e4e:	4957      	ldr	r1, [pc, #348]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008e56:	4b55      	ldr	r3, [pc, #340]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	021b      	lsls	r3, r3, #8
 8008e68:	4950      	ldr	r1, [pc, #320]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0308 	and.w	r3, r3, #8
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d01e      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e7c:	4b4b      	ldr	r3, [pc, #300]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e82:	0e1b      	lsrs	r3, r3, #24
 8008e84:	f003 030f 	and.w	r3, r3, #15
 8008e88:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	019a      	lsls	r2, r3, #6
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	061b      	lsls	r3, r3, #24
 8008e94:	431a      	orrs	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	071b      	lsls	r3, r3, #28
 8008e9c:	4943      	ldr	r1, [pc, #268]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ea4:	4b41      	ldr	r3, [pc, #260]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	493e      	ldr	r1, [pc, #248]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008eba:	4b3d      	ldr	r3, [pc, #244]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ec0:	f7fa ffaa 	bl	8003e18 <HAL_GetTick>
 8008ec4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ec6:	e008      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008ec8:	f7fa ffa6 	bl	8003e18 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d901      	bls.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e0a6      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008eda:	4b34      	ldr	r3, [pc, #208]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee6:	d1ef      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0320 	and.w	r3, r3, #32
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 808d 	beq.w	8009010 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	4b2c      	ldr	r3, [pc, #176]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	4a2b      	ldr	r2, [pc, #172]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f04:	6413      	str	r3, [r2, #64]	; 0x40
 8008f06:	4b29      	ldr	r3, [pc, #164]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008f12:	4b28      	ldr	r3, [pc, #160]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a27      	ldr	r2, [pc, #156]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f1e:	f7fa ff7b 	bl	8003e18 <HAL_GetTick>
 8008f22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f24:	e008      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f26:	f7fa ff77 	bl	8003e18 <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d901      	bls.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e077      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f38:	4b1e      	ldr	r3, [pc, #120]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0f0      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f44:	4b19      	ldr	r3, [pc, #100]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d039      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d032      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f62:	4b12      	ldr	r3, [pc, #72]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f6c:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f72:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008f78:	4a0c      	ldr	r2, [pc, #48]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f7e:	4b0b      	ldr	r3, [pc, #44]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d11e      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008f8a:	f7fa ff45 	bl	8003e18 <HAL_GetTick>
 8008f8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f90:	e014      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f92:	f7fa ff41 	bl	8003e18 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d90b      	bls.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e03f      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008fa8:	42470068 	.word	0x42470068
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	42470070 	.word	0x42470070
 8008fb4:	40007000 	.word	0x40007000
 8008fb8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fbc:	4b1c      	ldr	r3, [pc, #112]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0e4      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd4:	d10d      	bne.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008fd6:	4b16      	ldr	r3, [pc, #88]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fea:	4911      	ldr	r1, [pc, #68]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	608b      	str	r3, [r1, #8]
 8008ff0:	e005      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008ff2:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	4a0e      	ldr	r2, [pc, #56]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008ff8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008ffc:	6093      	str	r3, [r2, #8]
 8008ffe:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009000:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800900a:	4909      	ldr	r1, [pc, #36]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800900c:	4313      	orrs	r3, r2
 800900e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0310 	and.w	r3, r3, #16
 8009018:	2b00      	cmp	r3, #0
 800901a:	d004      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009022:	4b04      	ldr	r3, [pc, #16]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009024:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	40023800 	.word	0x40023800
 8009034:	424711e0 	.word	0x424711e0

08009038 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e025      	b.n	8009098 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d106      	bne.n	8009066 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f7f7 fbb7 	bl	80007d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2202      	movs	r2, #2
 800906a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3304      	adds	r3, #4
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f001 fdb1 	bl	800abe0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	461a      	mov	r2, r3
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	f001 fe1c 	bl	800acc6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d101      	bne.n	80090bc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80090b8:	2302      	movs	r3, #2
 80090ba:	e018      	b.n	80090ee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	68b9      	ldr	r1, [r7, #8]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f001 fe79 	bl	800adc4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d104      	bne.n	80090e4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2205      	movs	r2, #5
 80090de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80090e2:	e003      	b.n	80090ec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d101      	bne.n	8009110 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800910c:	2302      	movs	r3, #2
 800910e:	e00e      	b.n	800912e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f001 fe8c 	bl	800ae3c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e056      	b.n	80091f6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7f8 f8bc 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800917e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	431a      	orrs	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	431a      	orrs	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	431a      	orrs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	ea42 0103 	orr.w	r1, r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	0c1b      	lsrs	r3, r3, #16
 80091c6:	f003 0104 	and.w	r1, r3, #4
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69da      	ldr	r2, [r3, #28]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b082      	sub	sp, #8
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e01a      	b.n	8009246 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009226:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7f8 f8a1 	bl	8001370 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b088      	sub	sp, #32
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	603b      	str	r3, [r7, #0]
 800925a:	4613      	mov	r3, r2
 800925c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009268:	2b01      	cmp	r3, #1
 800926a:	d101      	bne.n	8009270 <HAL_SPI_Transmit+0x22>
 800926c:	2302      	movs	r3, #2
 800926e:	e11e      	b.n	80094ae <HAL_SPI_Transmit+0x260>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009278:	f7fa fdce 	bl	8003e18 <HAL_GetTick>
 800927c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800927e:	88fb      	ldrh	r3, [r7, #6]
 8009280:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b01      	cmp	r3, #1
 800928c:	d002      	beq.n	8009294 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800928e:	2302      	movs	r3, #2
 8009290:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009292:	e103      	b.n	800949c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <HAL_SPI_Transmit+0x52>
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092a4:	e0fa      	b.n	800949c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2203      	movs	r2, #3
 80092aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	88fa      	ldrh	r2, [r7, #6]
 80092be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ec:	d107      	bne.n	80092fe <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b40      	cmp	r3, #64	; 0x40
 800930a:	d007      	beq.n	800931c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800931a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009324:	d14b      	bne.n	80093be <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <HAL_SPI_Transmit+0xe6>
 800932e:	8afb      	ldrh	r3, [r7, #22]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d13e      	bne.n	80093b2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009338:	881a      	ldrh	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	1c9a      	adds	r2, r3, #2
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009358:	e02b      	b.n	80093b2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b02      	cmp	r3, #2
 8009366:	d112      	bne.n	800938e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	881a      	ldrh	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	1c9a      	adds	r2, r3, #2
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009382:	b29b      	uxth	r3, r3
 8009384:	3b01      	subs	r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	86da      	strh	r2, [r3, #54]	; 0x36
 800938c:	e011      	b.n	80093b2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800938e:	f7fa fd43 	bl	8003e18 <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d803      	bhi.n	80093a6 <HAL_SPI_Transmit+0x158>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a4:	d102      	bne.n	80093ac <HAL_SPI_Transmit+0x15e>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093b0:	e074      	b.n	800949c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1ce      	bne.n	800935a <HAL_SPI_Transmit+0x10c>
 80093bc:	e04c      	b.n	8009458 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <HAL_SPI_Transmit+0x17e>
 80093c6:	8afb      	ldrh	r3, [r7, #22]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d140      	bne.n	800944e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	330c      	adds	r3, #12
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	3b01      	subs	r3, #1
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80093f2:	e02c      	b.n	800944e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d113      	bne.n	800942a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800941e:	b29b      	uxth	r3, r3
 8009420:	3b01      	subs	r3, #1
 8009422:	b29a      	uxth	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	86da      	strh	r2, [r3, #54]	; 0x36
 8009428:	e011      	b.n	800944e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800942a:	f7fa fcf5 	bl	8003e18 <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d803      	bhi.n	8009442 <HAL_SPI_Transmit+0x1f4>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d102      	bne.n	8009448 <HAL_SPI_Transmit+0x1fa>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800944c:	e026      	b.n	800949c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1cd      	bne.n	80093f4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 fbb3 	bl	8009bc8 <SPI_EndRxTxTransaction>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2220      	movs	r2, #32
 800946c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10a      	bne.n	800948c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009476:	2300      	movs	r3, #0
 8009478:	613b      	str	r3, [r7, #16]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	613b      	str	r3, [r7, #16]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	613b      	str	r3, [r7, #16]
 800948a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	77fb      	strb	r3, [r7, #31]
 8009498:	e000      	b.n	800949c <HAL_SPI_Transmit+0x24e>
  }

error:
 800949a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b088      	sub	sp, #32
 80094ba:	af02      	add	r7, sp, #8
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	603b      	str	r3, [r7, #0]
 80094c2:	4613      	mov	r3, r2
 80094c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094d2:	d112      	bne.n	80094fa <HAL_SPI_Receive+0x44>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10e      	bne.n	80094fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2204      	movs	r2, #4
 80094e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80094e4:	88fa      	ldrh	r2, [r7, #6]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	4613      	mov	r3, r2
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f8e9 	bl	80096c8 <HAL_SPI_TransmitReceive>
 80094f6:	4603      	mov	r3, r0
 80094f8:	e0e2      	b.n	80096c0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009500:	2b01      	cmp	r3, #1
 8009502:	d101      	bne.n	8009508 <HAL_SPI_Receive+0x52>
 8009504:	2302      	movs	r3, #2
 8009506:	e0db      	b.n	80096c0 <HAL_SPI_Receive+0x20a>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009510:	f7fa fc82 	bl	8003e18 <HAL_GetTick>
 8009514:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b01      	cmp	r3, #1
 8009520:	d002      	beq.n	8009528 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009522:	2302      	movs	r3, #2
 8009524:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009526:	e0c2      	b.n	80096ae <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <HAL_SPI_Receive+0x7e>
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d102      	bne.n	800953a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009538:	e0b9      	b.n	80096ae <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2204      	movs	r2, #4
 800953e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	88fa      	ldrh	r2, [r7, #6]
 8009552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	88fa      	ldrh	r2, [r7, #6]
 8009558:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009580:	d107      	bne.n	8009592 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009590:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959c:	2b40      	cmp	r3, #64	; 0x40
 800959e:	d007      	beq.n	80095b0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d162      	bne.n	800967e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80095b8:	e02e      	b.n	8009618 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d115      	bne.n	80095f4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f103 020c 	add.w	r2, r3, #12
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	7812      	ldrb	r2, [r2, #0]
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095f2:	e011      	b.n	8009618 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095f4:	f7fa fc10 	bl	8003e18 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d803      	bhi.n	800960c <HAL_SPI_Receive+0x156>
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960a:	d102      	bne.n	8009612 <HAL_SPI_Receive+0x15c>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009616:	e04a      	b.n	80096ae <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1cb      	bne.n	80095ba <HAL_SPI_Receive+0x104>
 8009622:	e031      	b.n	8009688 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b01      	cmp	r3, #1
 8009630:	d113      	bne.n	800965a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	b292      	uxth	r2, r2
 800963e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	1c9a      	adds	r2, r3, #2
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009658:	e011      	b.n	800967e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800965a:	f7fa fbdd 	bl	8003e18 <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d803      	bhi.n	8009672 <HAL_SPI_Receive+0x1bc>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d102      	bne.n	8009678 <HAL_SPI_Receive+0x1c2>
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009678:	2303      	movs	r3, #3
 800967a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800967c:	e017      	b.n	80096ae <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009682:	b29b      	uxth	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1cd      	bne.n	8009624 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fa35 	bl	8009afc <SPI_EndRxTransaction>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2220      	movs	r2, #32
 800969c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	75fb      	strb	r3, [r7, #23]
 80096aa:	e000      	b.n	80096ae <HAL_SPI_Receive+0x1f8>
  }

error :
 80096ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08c      	sub	sp, #48	; 0x30
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80096d6:	2301      	movs	r3, #1
 80096d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <HAL_SPI_TransmitReceive+0x26>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e18a      	b.n	8009a04 <HAL_SPI_TransmitReceive+0x33c>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096f6:	f7fa fb8f 	bl	8003e18 <HAL_GetTick>
 80096fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800970c:	887b      	ldrh	r3, [r7, #2]
 800970e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009714:	2b01      	cmp	r3, #1
 8009716:	d00f      	beq.n	8009738 <HAL_SPI_TransmitReceive+0x70>
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800971e:	d107      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d103      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x68>
 8009728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800972c:	2b04      	cmp	r3, #4
 800972e:	d003      	beq.n	8009738 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009730:	2302      	movs	r3, #2
 8009732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009736:	e15b      	b.n	80099f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d005      	beq.n	800974a <HAL_SPI_TransmitReceive+0x82>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <HAL_SPI_TransmitReceive+0x82>
 8009744:	887b      	ldrh	r3, [r7, #2]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d103      	bne.n	8009752 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009750:	e14e      	b.n	80099f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b04      	cmp	r3, #4
 800975c:	d003      	beq.n	8009766 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2205      	movs	r2, #5
 8009762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	887a      	ldrh	r2, [r7, #2]
 8009776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	887a      	ldrh	r2, [r7, #2]
 800977c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	887a      	ldrh	r2, [r7, #2]
 8009788:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	887a      	ldrh	r2, [r7, #2]
 800978e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a6:	2b40      	cmp	r3, #64	; 0x40
 80097a8:	d007      	beq.n	80097ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c2:	d178      	bne.n	80098b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <HAL_SPI_TransmitReceive+0x10a>
 80097cc:	8b7b      	ldrh	r3, [r7, #26]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d166      	bne.n	80098a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d6:	881a      	ldrh	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	1c9a      	adds	r2, r3, #2
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	3b01      	subs	r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097f6:	e053      	b.n	80098a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b02      	cmp	r3, #2
 8009804:	d11b      	bne.n	800983e <HAL_SPI_TransmitReceive+0x176>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	d016      	beq.n	800983e <HAL_SPI_TransmitReceive+0x176>
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	2b01      	cmp	r3, #1
 8009814:	d113      	bne.n	800983e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981a:	881a      	ldrh	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009826:	1c9a      	adds	r2, r3, #2
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009830:	b29b      	uxth	r3, r3
 8009832:	3b01      	subs	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b01      	cmp	r3, #1
 800984a:	d119      	bne.n	8009880 <HAL_SPI_TransmitReceive+0x1b8>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009850:	b29b      	uxth	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d014      	beq.n	8009880 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	b292      	uxth	r2, r2
 8009862:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009868:	1c9a      	adds	r2, r3, #2
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009872:	b29b      	uxth	r3, r3
 8009874:	3b01      	subs	r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800987c:	2301      	movs	r3, #1
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009880:	f7fa faca 	bl	8003e18 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800988c:	429a      	cmp	r2, r3
 800988e:	d807      	bhi.n	80098a0 <HAL_SPI_TransmitReceive+0x1d8>
 8009890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009896:	d003      	beq.n	80098a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800989e:	e0a7      	b.n	80099f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1a6      	bne.n	80097f8 <HAL_SPI_TransmitReceive+0x130>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1a1      	bne.n	80097f8 <HAL_SPI_TransmitReceive+0x130>
 80098b4:	e07c      	b.n	80099b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <HAL_SPI_TransmitReceive+0x1fc>
 80098be:	8b7b      	ldrh	r3, [r7, #26]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d16b      	bne.n	800999c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	330c      	adds	r3, #12
 80098ce:	7812      	ldrb	r2, [r2, #0]
 80098d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ea:	e057      	b.n	800999c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d11c      	bne.n	8009934 <HAL_SPI_TransmitReceive+0x26c>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098fe:	b29b      	uxth	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d017      	beq.n	8009934 <HAL_SPI_TransmitReceive+0x26c>
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	2b01      	cmp	r3, #1
 8009908:	d114      	bne.n	8009934 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	330c      	adds	r3, #12
 8009914:	7812      	ldrb	r2, [r2, #0]
 8009916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009926:	b29b      	uxth	r3, r3
 8009928:	3b01      	subs	r3, #1
 800992a:	b29a      	uxth	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b01      	cmp	r3, #1
 8009940:	d119      	bne.n	8009976 <HAL_SPI_TransmitReceive+0x2ae>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009946:	b29b      	uxth	r3, r3
 8009948:	2b00      	cmp	r3, #0
 800994a:	d014      	beq.n	8009976 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	b2d2      	uxtb	r2, r2
 8009958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995e:	1c5a      	adds	r2, r3, #1
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009968:	b29b      	uxth	r3, r3
 800996a:	3b01      	subs	r3, #1
 800996c:	b29a      	uxth	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009972:	2301      	movs	r3, #1
 8009974:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009976:	f7fa fa4f 	bl	8003e18 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009982:	429a      	cmp	r2, r3
 8009984:	d803      	bhi.n	800998e <HAL_SPI_TransmitReceive+0x2c6>
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998c:	d102      	bne.n	8009994 <HAL_SPI_TransmitReceive+0x2cc>
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	2b00      	cmp	r3, #0
 8009992:	d103      	bne.n	800999c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800999a:	e029      	b.n	80099f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1a2      	bne.n	80098ec <HAL_SPI_TransmitReceive+0x224>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d19d      	bne.n	80098ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 f907 	bl	8009bc8 <SPI_EndRxTxTransaction>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2220      	movs	r2, #32
 80099ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80099cc:	e010      	b.n	80099f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10b      	bne.n	80099ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	617b      	str	r3, [r7, #20]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	617b      	str	r3, [r7, #20]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	e000      	b.n	80099f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80099ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3730      	adds	r7, #48	; 0x30
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a1a:	b2db      	uxtb	r3, r3
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	4613      	mov	r3, r2
 8009a36:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a38:	e04c      	b.n	8009ad4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a40:	d048      	beq.n	8009ad4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009a42:	f7fa f9e9 	bl	8003e18 <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d902      	bls.n	8009a58 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d13d      	bne.n	8009ad4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a70:	d111      	bne.n	8009a96 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a7a:	d004      	beq.n	8009a86 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a84:	d107      	bne.n	8009a96 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a9e:	d10f      	bne.n	8009ac0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009abe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e00f      	b.n	8009af4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689a      	ldr	r2, [r3, #8]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	4013      	ands	r3, r2
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	bf0c      	ite	eq
 8009ae4:	2301      	moveq	r3, #1
 8009ae6:	2300      	movne	r3, #0
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	461a      	mov	r2, r3
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d1a3      	bne.n	8009a3a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b10:	d111      	bne.n	8009b36 <SPI_EndRxTransaction+0x3a>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b1a:	d004      	beq.n	8009b26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b24:	d107      	bne.n	8009b36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b3e:	d12a      	bne.n	8009b96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b48:	d012      	beq.n	8009b70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2200      	movs	r2, #0
 8009b52:	2180      	movs	r1, #128	; 0x80
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff ff67 	bl	8009a28 <SPI_WaitFlagStateUntilTimeout>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d02d      	beq.n	8009bbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b64:	f043 0220 	orr.w	r2, r3, #32
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e026      	b.n	8009bbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2200      	movs	r2, #0
 8009b78:	2101      	movs	r1, #1
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f7ff ff54 	bl	8009a28 <SPI_WaitFlagStateUntilTimeout>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01a      	beq.n	8009bbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8a:	f043 0220 	orr.w	r2, r3, #32
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e013      	b.n	8009bbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff ff41 	bl	8009a28 <SPI_WaitFlagStateUntilTimeout>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d007      	beq.n	8009bbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb0:	f043 0220 	orr.w	r2, r3, #32
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e000      	b.n	8009bbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009bd4:	4b1b      	ldr	r3, [pc, #108]	; (8009c44 <SPI_EndRxTxTransaction+0x7c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1b      	ldr	r2, [pc, #108]	; (8009c48 <SPI_EndRxTxTransaction+0x80>)
 8009bda:	fba2 2303 	umull	r2, r3, r2, r3
 8009bde:	0d5b      	lsrs	r3, r3, #21
 8009be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009be4:	fb02 f303 	mul.w	r3, r2, r3
 8009be8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bf2:	d112      	bne.n	8009c1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2180      	movs	r1, #128	; 0x80
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff ff12 	bl	8009a28 <SPI_WaitFlagStateUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d016      	beq.n	8009c38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0e:	f043 0220 	orr.w	r2, r3, #32
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e00f      	b.n	8009c3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00a      	beq.n	8009c36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	d0f2      	beq.n	8009c1a <SPI_EndRxTxTransaction+0x52>
 8009c34:	e000      	b.n	8009c38 <SPI_EndRxTxTransaction+0x70>
        break;
 8009c36:	bf00      	nop
  }

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20000000 	.word	0x20000000
 8009c48:	165e9f81 	.word	0x165e9f81

08009c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e01d      	b.n	8009c9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7f7 fcfe 	bl	8001674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f000 fa14 	bl	800a0b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68da      	ldr	r2, [r3, #12]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f042 0201 	orr.w	r2, r2, #1
 8009cb8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b06      	cmp	r3, #6
 8009cca:	d007      	beq.n	8009cdc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f042 0201 	orr.w	r2, r2, #1
 8009cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d122      	bne.n	8009d46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d11b      	bne.n	8009d46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f06f 0202 	mvn.w	r2, #2
 8009d16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f9a5 	bl	800a07c <HAL_TIM_IC_CaptureCallback>
 8009d32:	e005      	b.n	8009d40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f997 	bl	800a068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f9a8 	bl	800a090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d122      	bne.n	8009d9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d11b      	bne.n	8009d9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f06f 0204 	mvn.w	r2, #4
 8009d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f97b 	bl	800a07c <HAL_TIM_IC_CaptureCallback>
 8009d86:	e005      	b.n	8009d94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f96d 	bl	800a068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f97e 	bl	800a090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f003 0308 	and.w	r3, r3, #8
 8009da4:	2b08      	cmp	r3, #8
 8009da6:	d122      	bne.n	8009dee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d11b      	bne.n	8009dee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f06f 0208 	mvn.w	r2, #8
 8009dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f951 	bl	800a07c <HAL_TIM_IC_CaptureCallback>
 8009dda:	e005      	b.n	8009de8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f943 	bl	800a068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f954 	bl	800a090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f003 0310 	and.w	r3, r3, #16
 8009df8:	2b10      	cmp	r3, #16
 8009dfa:	d122      	bne.n	8009e42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b10      	cmp	r3, #16
 8009e08:	d11b      	bne.n	8009e42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f06f 0210 	mvn.w	r2, #16
 8009e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2208      	movs	r2, #8
 8009e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f927 	bl	800a07c <HAL_TIM_IC_CaptureCallback>
 8009e2e:	e005      	b.n	8009e3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f919 	bl	800a068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f92a 	bl	800a090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d10e      	bne.n	8009e6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d107      	bne.n	8009e6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f06f 0201 	mvn.w	r2, #1
 8009e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7f7 f9e9 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e78:	2b80      	cmp	r3, #128	; 0x80
 8009e7a:	d10e      	bne.n	8009e9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e86:	2b80      	cmp	r3, #128	; 0x80
 8009e88:	d107      	bne.n	8009e9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 facf 	bl	800a438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea4:	2b40      	cmp	r3, #64	; 0x40
 8009ea6:	d10e      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb2:	2b40      	cmp	r3, #64	; 0x40
 8009eb4:	d107      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f8ef 	bl	800a0a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d10e      	bne.n	8009ef2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d107      	bne.n	8009ef2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f06f 0220 	mvn.w	r2, #32
 8009eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fa99 	bl	800a424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d101      	bne.n	8009f12 <HAL_TIM_ConfigClockSource+0x18>
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e0a6      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x166>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f38:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b40      	cmp	r3, #64	; 0x40
 8009f48:	d067      	beq.n	800a01a <HAL_TIM_ConfigClockSource+0x120>
 8009f4a:	2b40      	cmp	r3, #64	; 0x40
 8009f4c:	d80b      	bhi.n	8009f66 <HAL_TIM_ConfigClockSource+0x6c>
 8009f4e:	2b10      	cmp	r3, #16
 8009f50:	d073      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x140>
 8009f52:	2b10      	cmp	r3, #16
 8009f54:	d802      	bhi.n	8009f5c <HAL_TIM_ConfigClockSource+0x62>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d06f      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009f5a:	e078      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	d06c      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x140>
 8009f60:	2b30      	cmp	r3, #48	; 0x30
 8009f62:	d06a      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009f64:	e073      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f66:	2b70      	cmp	r3, #112	; 0x70
 8009f68:	d00d      	beq.n	8009f86 <HAL_TIM_ConfigClockSource+0x8c>
 8009f6a:	2b70      	cmp	r3, #112	; 0x70
 8009f6c:	d804      	bhi.n	8009f78 <HAL_TIM_ConfigClockSource+0x7e>
 8009f6e:	2b50      	cmp	r3, #80	; 0x50
 8009f70:	d033      	beq.n	8009fda <HAL_TIM_ConfigClockSource+0xe0>
 8009f72:	2b60      	cmp	r3, #96	; 0x60
 8009f74:	d041      	beq.n	8009ffa <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009f76:	e06a      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7c:	d066      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x152>
 8009f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f82:	d017      	beq.n	8009fb4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009f84:	e063      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	6899      	ldr	r1, [r3, #8]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f000 f9a9 	bl	800a2ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fa8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	609a      	str	r2, [r3, #8]
      break;
 8009fb2:	e04c      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	6899      	ldr	r1, [r3, #8]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f000 f992 	bl	800a2ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fd6:	609a      	str	r2, [r3, #8]
      break;
 8009fd8:	e039      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	6859      	ldr	r1, [r3, #4]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f000 f906 	bl	800a1f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2150      	movs	r1, #80	; 0x50
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 f95f 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 8009ff8:	e029      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	6859      	ldr	r1, [r3, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	461a      	mov	r2, r3
 800a008:	f000 f925 	bl	800a256 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2160      	movs	r1, #96	; 0x60
 800a012:	4618      	mov	r0, r3
 800a014:	f000 f94f 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 800a018:	e019      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6859      	ldr	r1, [r3, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	461a      	mov	r2, r3
 800a028:	f000 f8e6 	bl	800a1f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2140      	movs	r1, #64	; 0x40
 800a032:	4618      	mov	r0, r3
 800a034:	f000 f93f 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 800a038:	e009      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4619      	mov	r1, r3
 800a044:	4610      	mov	r0, r2
 800a046:	f000 f936 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 800a04a:	e000      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a04c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a40      	ldr	r2, [pc, #256]	; (800a1cc <TIM_Base_SetConfig+0x114>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d013      	beq.n	800a0f8 <TIM_Base_SetConfig+0x40>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d6:	d00f      	beq.n	800a0f8 <TIM_Base_SetConfig+0x40>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a3d      	ldr	r2, [pc, #244]	; (800a1d0 <TIM_Base_SetConfig+0x118>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d00b      	beq.n	800a0f8 <TIM_Base_SetConfig+0x40>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a3c      	ldr	r2, [pc, #240]	; (800a1d4 <TIM_Base_SetConfig+0x11c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d007      	beq.n	800a0f8 <TIM_Base_SetConfig+0x40>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a3b      	ldr	r2, [pc, #236]	; (800a1d8 <TIM_Base_SetConfig+0x120>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d003      	beq.n	800a0f8 <TIM_Base_SetConfig+0x40>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a3a      	ldr	r2, [pc, #232]	; (800a1dc <TIM_Base_SetConfig+0x124>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d108      	bne.n	800a10a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a2f      	ldr	r2, [pc, #188]	; (800a1cc <TIM_Base_SetConfig+0x114>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d02b      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a118:	d027      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a2c      	ldr	r2, [pc, #176]	; (800a1d0 <TIM_Base_SetConfig+0x118>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d023      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a2b      	ldr	r2, [pc, #172]	; (800a1d4 <TIM_Base_SetConfig+0x11c>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d01f      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a2a      	ldr	r2, [pc, #168]	; (800a1d8 <TIM_Base_SetConfig+0x120>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d01b      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a29      	ldr	r2, [pc, #164]	; (800a1dc <TIM_Base_SetConfig+0x124>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d017      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a28      	ldr	r2, [pc, #160]	; (800a1e0 <TIM_Base_SetConfig+0x128>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d013      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a27      	ldr	r2, [pc, #156]	; (800a1e4 <TIM_Base_SetConfig+0x12c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d00f      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a26      	ldr	r2, [pc, #152]	; (800a1e8 <TIM_Base_SetConfig+0x130>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00b      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a25      	ldr	r2, [pc, #148]	; (800a1ec <TIM_Base_SetConfig+0x134>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d007      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a24      	ldr	r2, [pc, #144]	; (800a1f0 <TIM_Base_SetConfig+0x138>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d003      	beq.n	800a16a <TIM_Base_SetConfig+0xb2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a23      	ldr	r2, [pc, #140]	; (800a1f4 <TIM_Base_SetConfig+0x13c>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d108      	bne.n	800a17c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4313      	orrs	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	4313      	orrs	r3, r2
 800a188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	689a      	ldr	r2, [r3, #8]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a0a      	ldr	r2, [pc, #40]	; (800a1cc <TIM_Base_SetConfig+0x114>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d003      	beq.n	800a1b0 <TIM_Base_SetConfig+0xf8>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a0c      	ldr	r2, [pc, #48]	; (800a1dc <TIM_Base_SetConfig+0x124>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d103      	bne.n	800a1b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	615a      	str	r2, [r3, #20]
}
 800a1be:	bf00      	nop
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	40010000 	.word	0x40010000
 800a1d0:	40000400 	.word	0x40000400
 800a1d4:	40000800 	.word	0x40000800
 800a1d8:	40000c00 	.word	0x40000c00
 800a1dc:	40010400 	.word	0x40010400
 800a1e0:	40014000 	.word	0x40014000
 800a1e4:	40014400 	.word	0x40014400
 800a1e8:	40014800 	.word	0x40014800
 800a1ec:	40001800 	.word	0x40001800
 800a1f0:	40001c00 	.word	0x40001c00
 800a1f4:	40002000 	.word	0x40002000

0800a1f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f023 0201 	bic.w	r2, r3, #1
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f023 030a 	bic.w	r3, r3, #10
 800a234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	621a      	str	r2, [r3, #32]
}
 800a24a:	bf00      	nop
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a256:	b480      	push	{r7}
 800a258:	b087      	sub	sp, #28
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	f023 0210 	bic.w	r2, r3, #16
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	031b      	lsls	r3, r3, #12
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4313      	orrs	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	621a      	str	r2, [r3, #32]
}
 800a2aa:	bf00      	nop
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	f043 0307 	orr.w	r3, r3, #7
 800a2d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	609a      	str	r2, [r3, #8]
}
 800a2e0:	bf00      	nop
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	021a      	lsls	r2, r3, #8
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	431a      	orrs	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4313      	orrs	r3, r2
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	609a      	str	r2, [r3, #8]
}
 800a320:	bf00      	nop
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a340:	2302      	movs	r3, #2
 800a342:	e05a      	b.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a36a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4313      	orrs	r3, r2
 800a374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a21      	ldr	r2, [pc, #132]	; (800a408 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d022      	beq.n	800a3ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a390:	d01d      	beq.n	800a3ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a1d      	ldr	r2, [pc, #116]	; (800a40c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d018      	beq.n	800a3ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a1b      	ldr	r2, [pc, #108]	; (800a410 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d013      	beq.n	800a3ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a1a      	ldr	r2, [pc, #104]	; (800a414 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d00e      	beq.n	800a3ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a18      	ldr	r2, [pc, #96]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d009      	beq.n	800a3ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a17      	ldr	r2, [pc, #92]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d004      	beq.n	800a3ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a15      	ldr	r2, [pc, #84]	; (800a420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d10c      	bne.n	800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	40010000 	.word	0x40010000
 800a40c:	40000400 	.word	0x40000400
 800a410:	40000800 	.word	0x40000800
 800a414:	40000c00 	.word	0x40000c00
 800a418:	40010400 	.word	0x40010400
 800a41c:	40014000 	.word	0x40014000
 800a420:	40001800 	.word	0x40001800

0800a424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e03f      	b.n	800a4de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d106      	bne.n	800a478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7f7 faf6 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2224      	movs	r2, #36	; 0x24
 800a47c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68da      	ldr	r2, [r3, #12]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a48e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f829 	bl	800a4e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	695a      	ldr	r2, [r3, #20]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	b085      	sub	sp, #20
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	431a      	orrs	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a52a:	f023 030c 	bic.w	r3, r3, #12
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6812      	ldr	r2, [r2, #0]
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	430b      	orrs	r3, r1
 800a536:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	699a      	ldr	r2, [r3, #24]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a556:	f040 818b 	bne.w	800a870 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4ac1      	ldr	r2, [pc, #772]	; (800a864 <UART_SetConfig+0x37c>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d005      	beq.n	800a570 <UART_SetConfig+0x88>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4abf      	ldr	r2, [pc, #764]	; (800a868 <UART_SetConfig+0x380>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	f040 80bd 	bne.w	800a6ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a570:	f7fe fb5e 	bl	8008c30 <HAL_RCC_GetPCLK2Freq>
 800a574:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	461d      	mov	r5, r3
 800a57a:	f04f 0600 	mov.w	r6, #0
 800a57e:	46a8      	mov	r8, r5
 800a580:	46b1      	mov	r9, r6
 800a582:	eb18 0308 	adds.w	r3, r8, r8
 800a586:	eb49 0409 	adc.w	r4, r9, r9
 800a58a:	4698      	mov	r8, r3
 800a58c:	46a1      	mov	r9, r4
 800a58e:	eb18 0805 	adds.w	r8, r8, r5
 800a592:	eb49 0906 	adc.w	r9, r9, r6
 800a596:	f04f 0100 	mov.w	r1, #0
 800a59a:	f04f 0200 	mov.w	r2, #0
 800a59e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a5a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a5a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a5aa:	4688      	mov	r8, r1
 800a5ac:	4691      	mov	r9, r2
 800a5ae:	eb18 0005 	adds.w	r0, r8, r5
 800a5b2:	eb49 0106 	adc.w	r1, r9, r6
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	461d      	mov	r5, r3
 800a5bc:	f04f 0600 	mov.w	r6, #0
 800a5c0:	196b      	adds	r3, r5, r5
 800a5c2:	eb46 0406 	adc.w	r4, r6, r6
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	f7f5 fe11 	bl	80001f0 <__aeabi_uldivmod>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	4ba5      	ldr	r3, [pc, #660]	; (800a86c <UART_SetConfig+0x384>)
 800a5d6:	fba3 2302 	umull	r2, r3, r3, r2
 800a5da:	095b      	lsrs	r3, r3, #5
 800a5dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	461d      	mov	r5, r3
 800a5e4:	f04f 0600 	mov.w	r6, #0
 800a5e8:	46a9      	mov	r9, r5
 800a5ea:	46b2      	mov	sl, r6
 800a5ec:	eb19 0309 	adds.w	r3, r9, r9
 800a5f0:	eb4a 040a 	adc.w	r4, sl, sl
 800a5f4:	4699      	mov	r9, r3
 800a5f6:	46a2      	mov	sl, r4
 800a5f8:	eb19 0905 	adds.w	r9, r9, r5
 800a5fc:	eb4a 0a06 	adc.w	sl, sl, r6
 800a600:	f04f 0100 	mov.w	r1, #0
 800a604:	f04f 0200 	mov.w	r2, #0
 800a608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a60c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a614:	4689      	mov	r9, r1
 800a616:	4692      	mov	sl, r2
 800a618:	eb19 0005 	adds.w	r0, r9, r5
 800a61c:	eb4a 0106 	adc.w	r1, sl, r6
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	461d      	mov	r5, r3
 800a626:	f04f 0600 	mov.w	r6, #0
 800a62a:	196b      	adds	r3, r5, r5
 800a62c:	eb46 0406 	adc.w	r4, r6, r6
 800a630:	461a      	mov	r2, r3
 800a632:	4623      	mov	r3, r4
 800a634:	f7f5 fddc 	bl	80001f0 <__aeabi_uldivmod>
 800a638:	4603      	mov	r3, r0
 800a63a:	460c      	mov	r4, r1
 800a63c:	461a      	mov	r2, r3
 800a63e:	4b8b      	ldr	r3, [pc, #556]	; (800a86c <UART_SetConfig+0x384>)
 800a640:	fba3 1302 	umull	r1, r3, r3, r2
 800a644:	095b      	lsrs	r3, r3, #5
 800a646:	2164      	movs	r1, #100	; 0x64
 800a648:	fb01 f303 	mul.w	r3, r1, r3
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	00db      	lsls	r3, r3, #3
 800a650:	3332      	adds	r3, #50	; 0x32
 800a652:	4a86      	ldr	r2, [pc, #536]	; (800a86c <UART_SetConfig+0x384>)
 800a654:	fba2 2303 	umull	r2, r3, r2, r3
 800a658:	095b      	lsrs	r3, r3, #5
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a660:	4498      	add	r8, r3
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	461d      	mov	r5, r3
 800a666:	f04f 0600 	mov.w	r6, #0
 800a66a:	46a9      	mov	r9, r5
 800a66c:	46b2      	mov	sl, r6
 800a66e:	eb19 0309 	adds.w	r3, r9, r9
 800a672:	eb4a 040a 	adc.w	r4, sl, sl
 800a676:	4699      	mov	r9, r3
 800a678:	46a2      	mov	sl, r4
 800a67a:	eb19 0905 	adds.w	r9, r9, r5
 800a67e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a682:	f04f 0100 	mov.w	r1, #0
 800a686:	f04f 0200 	mov.w	r2, #0
 800a68a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a68e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a692:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a696:	4689      	mov	r9, r1
 800a698:	4692      	mov	sl, r2
 800a69a:	eb19 0005 	adds.w	r0, r9, r5
 800a69e:	eb4a 0106 	adc.w	r1, sl, r6
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	461d      	mov	r5, r3
 800a6a8:	f04f 0600 	mov.w	r6, #0
 800a6ac:	196b      	adds	r3, r5, r5
 800a6ae:	eb46 0406 	adc.w	r4, r6, r6
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	4623      	mov	r3, r4
 800a6b6:	f7f5 fd9b 	bl	80001f0 <__aeabi_uldivmod>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	460c      	mov	r4, r1
 800a6be:	461a      	mov	r2, r3
 800a6c0:	4b6a      	ldr	r3, [pc, #424]	; (800a86c <UART_SetConfig+0x384>)
 800a6c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a6c6:	095b      	lsrs	r3, r3, #5
 800a6c8:	2164      	movs	r1, #100	; 0x64
 800a6ca:	fb01 f303 	mul.w	r3, r1, r3
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	3332      	adds	r3, #50	; 0x32
 800a6d4:	4a65      	ldr	r2, [pc, #404]	; (800a86c <UART_SetConfig+0x384>)
 800a6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6da:	095b      	lsrs	r3, r3, #5
 800a6dc:	f003 0207 	and.w	r2, r3, #7
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4442      	add	r2, r8
 800a6e6:	609a      	str	r2, [r3, #8]
 800a6e8:	e26f      	b.n	800abca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a6ea:	f7fe fa8d 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800a6ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	461d      	mov	r5, r3
 800a6f4:	f04f 0600 	mov.w	r6, #0
 800a6f8:	46a8      	mov	r8, r5
 800a6fa:	46b1      	mov	r9, r6
 800a6fc:	eb18 0308 	adds.w	r3, r8, r8
 800a700:	eb49 0409 	adc.w	r4, r9, r9
 800a704:	4698      	mov	r8, r3
 800a706:	46a1      	mov	r9, r4
 800a708:	eb18 0805 	adds.w	r8, r8, r5
 800a70c:	eb49 0906 	adc.w	r9, r9, r6
 800a710:	f04f 0100 	mov.w	r1, #0
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a71c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a720:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a724:	4688      	mov	r8, r1
 800a726:	4691      	mov	r9, r2
 800a728:	eb18 0005 	adds.w	r0, r8, r5
 800a72c:	eb49 0106 	adc.w	r1, r9, r6
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	461d      	mov	r5, r3
 800a736:	f04f 0600 	mov.w	r6, #0
 800a73a:	196b      	adds	r3, r5, r5
 800a73c:	eb46 0406 	adc.w	r4, r6, r6
 800a740:	461a      	mov	r2, r3
 800a742:	4623      	mov	r3, r4
 800a744:	f7f5 fd54 	bl	80001f0 <__aeabi_uldivmod>
 800a748:	4603      	mov	r3, r0
 800a74a:	460c      	mov	r4, r1
 800a74c:	461a      	mov	r2, r3
 800a74e:	4b47      	ldr	r3, [pc, #284]	; (800a86c <UART_SetConfig+0x384>)
 800a750:	fba3 2302 	umull	r2, r3, r3, r2
 800a754:	095b      	lsrs	r3, r3, #5
 800a756:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	461d      	mov	r5, r3
 800a75e:	f04f 0600 	mov.w	r6, #0
 800a762:	46a9      	mov	r9, r5
 800a764:	46b2      	mov	sl, r6
 800a766:	eb19 0309 	adds.w	r3, r9, r9
 800a76a:	eb4a 040a 	adc.w	r4, sl, sl
 800a76e:	4699      	mov	r9, r3
 800a770:	46a2      	mov	sl, r4
 800a772:	eb19 0905 	adds.w	r9, r9, r5
 800a776:	eb4a 0a06 	adc.w	sl, sl, r6
 800a77a:	f04f 0100 	mov.w	r1, #0
 800a77e:	f04f 0200 	mov.w	r2, #0
 800a782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a78a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a78e:	4689      	mov	r9, r1
 800a790:	4692      	mov	sl, r2
 800a792:	eb19 0005 	adds.w	r0, r9, r5
 800a796:	eb4a 0106 	adc.w	r1, sl, r6
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	461d      	mov	r5, r3
 800a7a0:	f04f 0600 	mov.w	r6, #0
 800a7a4:	196b      	adds	r3, r5, r5
 800a7a6:	eb46 0406 	adc.w	r4, r6, r6
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	4623      	mov	r3, r4
 800a7ae:	f7f5 fd1f 	bl	80001f0 <__aeabi_uldivmod>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	4b2c      	ldr	r3, [pc, #176]	; (800a86c <UART_SetConfig+0x384>)
 800a7ba:	fba3 1302 	umull	r1, r3, r3, r2
 800a7be:	095b      	lsrs	r3, r3, #5
 800a7c0:	2164      	movs	r1, #100	; 0x64
 800a7c2:	fb01 f303 	mul.w	r3, r1, r3
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	00db      	lsls	r3, r3, #3
 800a7ca:	3332      	adds	r3, #50	; 0x32
 800a7cc:	4a27      	ldr	r2, [pc, #156]	; (800a86c <UART_SetConfig+0x384>)
 800a7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d2:	095b      	lsrs	r3, r3, #5
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7da:	4498      	add	r8, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	461d      	mov	r5, r3
 800a7e0:	f04f 0600 	mov.w	r6, #0
 800a7e4:	46a9      	mov	r9, r5
 800a7e6:	46b2      	mov	sl, r6
 800a7e8:	eb19 0309 	adds.w	r3, r9, r9
 800a7ec:	eb4a 040a 	adc.w	r4, sl, sl
 800a7f0:	4699      	mov	r9, r3
 800a7f2:	46a2      	mov	sl, r4
 800a7f4:	eb19 0905 	adds.w	r9, r9, r5
 800a7f8:	eb4a 0a06 	adc.w	sl, sl, r6
 800a7fc:	f04f 0100 	mov.w	r1, #0
 800a800:	f04f 0200 	mov.w	r2, #0
 800a804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a808:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a80c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a810:	4689      	mov	r9, r1
 800a812:	4692      	mov	sl, r2
 800a814:	eb19 0005 	adds.w	r0, r9, r5
 800a818:	eb4a 0106 	adc.w	r1, sl, r6
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	461d      	mov	r5, r3
 800a822:	f04f 0600 	mov.w	r6, #0
 800a826:	196b      	adds	r3, r5, r5
 800a828:	eb46 0406 	adc.w	r4, r6, r6
 800a82c:	461a      	mov	r2, r3
 800a82e:	4623      	mov	r3, r4
 800a830:	f7f5 fcde 	bl	80001f0 <__aeabi_uldivmod>
 800a834:	4603      	mov	r3, r0
 800a836:	460c      	mov	r4, r1
 800a838:	461a      	mov	r2, r3
 800a83a:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <UART_SetConfig+0x384>)
 800a83c:	fba3 1302 	umull	r1, r3, r3, r2
 800a840:	095b      	lsrs	r3, r3, #5
 800a842:	2164      	movs	r1, #100	; 0x64
 800a844:	fb01 f303 	mul.w	r3, r1, r3
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	3332      	adds	r3, #50	; 0x32
 800a84e:	4a07      	ldr	r2, [pc, #28]	; (800a86c <UART_SetConfig+0x384>)
 800a850:	fba2 2303 	umull	r2, r3, r2, r3
 800a854:	095b      	lsrs	r3, r3, #5
 800a856:	f003 0207 	and.w	r2, r3, #7
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4442      	add	r2, r8
 800a860:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a862:	e1b2      	b.n	800abca <UART_SetConfig+0x6e2>
 800a864:	40011000 	.word	0x40011000
 800a868:	40011400 	.word	0x40011400
 800a86c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4ad7      	ldr	r2, [pc, #860]	; (800abd4 <UART_SetConfig+0x6ec>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d005      	beq.n	800a886 <UART_SetConfig+0x39e>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4ad6      	ldr	r2, [pc, #856]	; (800abd8 <UART_SetConfig+0x6f0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	f040 80d1 	bne.w	800aa28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a886:	f7fe f9d3 	bl	8008c30 <HAL_RCC_GetPCLK2Freq>
 800a88a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	469a      	mov	sl, r3
 800a890:	f04f 0b00 	mov.w	fp, #0
 800a894:	46d0      	mov	r8, sl
 800a896:	46d9      	mov	r9, fp
 800a898:	eb18 0308 	adds.w	r3, r8, r8
 800a89c:	eb49 0409 	adc.w	r4, r9, r9
 800a8a0:	4698      	mov	r8, r3
 800a8a2:	46a1      	mov	r9, r4
 800a8a4:	eb18 080a 	adds.w	r8, r8, sl
 800a8a8:	eb49 090b 	adc.w	r9, r9, fp
 800a8ac:	f04f 0100 	mov.w	r1, #0
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8c0:	4688      	mov	r8, r1
 800a8c2:	4691      	mov	r9, r2
 800a8c4:	eb1a 0508 	adds.w	r5, sl, r8
 800a8c8:	eb4b 0609 	adc.w	r6, fp, r9
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f04f 0200 	mov.w	r2, #0
 800a8d6:	f04f 0300 	mov.w	r3, #0
 800a8da:	f04f 0400 	mov.w	r4, #0
 800a8de:	0094      	lsls	r4, r2, #2
 800a8e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a8e4:	008b      	lsls	r3, r1, #2
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	4623      	mov	r3, r4
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	f7f5 fc7f 	bl	80001f0 <__aeabi_uldivmod>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	4bb8      	ldr	r3, [pc, #736]	; (800abdc <UART_SetConfig+0x6f4>)
 800a8fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a8fe:	095b      	lsrs	r3, r3, #5
 800a900:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	469b      	mov	fp, r3
 800a908:	f04f 0c00 	mov.w	ip, #0
 800a90c:	46d9      	mov	r9, fp
 800a90e:	46e2      	mov	sl, ip
 800a910:	eb19 0309 	adds.w	r3, r9, r9
 800a914:	eb4a 040a 	adc.w	r4, sl, sl
 800a918:	4699      	mov	r9, r3
 800a91a:	46a2      	mov	sl, r4
 800a91c:	eb19 090b 	adds.w	r9, r9, fp
 800a920:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a924:	f04f 0100 	mov.w	r1, #0
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a938:	4689      	mov	r9, r1
 800a93a:	4692      	mov	sl, r2
 800a93c:	eb1b 0509 	adds.w	r5, fp, r9
 800a940:	eb4c 060a 	adc.w	r6, ip, sl
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	4619      	mov	r1, r3
 800a94a:	f04f 0200 	mov.w	r2, #0
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	f04f 0400 	mov.w	r4, #0
 800a956:	0094      	lsls	r4, r2, #2
 800a958:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a95c:	008b      	lsls	r3, r1, #2
 800a95e:	461a      	mov	r2, r3
 800a960:	4623      	mov	r3, r4
 800a962:	4628      	mov	r0, r5
 800a964:	4631      	mov	r1, r6
 800a966:	f7f5 fc43 	bl	80001f0 <__aeabi_uldivmod>
 800a96a:	4603      	mov	r3, r0
 800a96c:	460c      	mov	r4, r1
 800a96e:	461a      	mov	r2, r3
 800a970:	4b9a      	ldr	r3, [pc, #616]	; (800abdc <UART_SetConfig+0x6f4>)
 800a972:	fba3 1302 	umull	r1, r3, r3, r2
 800a976:	095b      	lsrs	r3, r3, #5
 800a978:	2164      	movs	r1, #100	; 0x64
 800a97a:	fb01 f303 	mul.w	r3, r1, r3
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	3332      	adds	r3, #50	; 0x32
 800a984:	4a95      	ldr	r2, [pc, #596]	; (800abdc <UART_SetConfig+0x6f4>)
 800a986:	fba2 2303 	umull	r2, r3, r2, r3
 800a98a:	095b      	lsrs	r3, r3, #5
 800a98c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a990:	4498      	add	r8, r3
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	469b      	mov	fp, r3
 800a996:	f04f 0c00 	mov.w	ip, #0
 800a99a:	46d9      	mov	r9, fp
 800a99c:	46e2      	mov	sl, ip
 800a99e:	eb19 0309 	adds.w	r3, r9, r9
 800a9a2:	eb4a 040a 	adc.w	r4, sl, sl
 800a9a6:	4699      	mov	r9, r3
 800a9a8:	46a2      	mov	sl, r4
 800a9aa:	eb19 090b 	adds.w	r9, r9, fp
 800a9ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a9b2:	f04f 0100 	mov.w	r1, #0
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9c6:	4689      	mov	r9, r1
 800a9c8:	4692      	mov	sl, r2
 800a9ca:	eb1b 0509 	adds.w	r5, fp, r9
 800a9ce:	eb4c 060a 	adc.w	r6, ip, sl
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	f04f 0200 	mov.w	r2, #0
 800a9dc:	f04f 0300 	mov.w	r3, #0
 800a9e0:	f04f 0400 	mov.w	r4, #0
 800a9e4:	0094      	lsls	r4, r2, #2
 800a9e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9ea:	008b      	lsls	r3, r1, #2
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	4623      	mov	r3, r4
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	f7f5 fbfc 	bl	80001f0 <__aeabi_uldivmod>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	4b77      	ldr	r3, [pc, #476]	; (800abdc <UART_SetConfig+0x6f4>)
 800aa00:	fba3 1302 	umull	r1, r3, r3, r2
 800aa04:	095b      	lsrs	r3, r3, #5
 800aa06:	2164      	movs	r1, #100	; 0x64
 800aa08:	fb01 f303 	mul.w	r3, r1, r3
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	3332      	adds	r3, #50	; 0x32
 800aa12:	4a72      	ldr	r2, [pc, #456]	; (800abdc <UART_SetConfig+0x6f4>)
 800aa14:	fba2 2303 	umull	r2, r3, r2, r3
 800aa18:	095b      	lsrs	r3, r3, #5
 800aa1a:	f003 020f 	and.w	r2, r3, #15
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4442      	add	r2, r8
 800aa24:	609a      	str	r2, [r3, #8]
 800aa26:	e0d0      	b.n	800abca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa28:	f7fe f8ee 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800aa2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	469a      	mov	sl, r3
 800aa32:	f04f 0b00 	mov.w	fp, #0
 800aa36:	46d0      	mov	r8, sl
 800aa38:	46d9      	mov	r9, fp
 800aa3a:	eb18 0308 	adds.w	r3, r8, r8
 800aa3e:	eb49 0409 	adc.w	r4, r9, r9
 800aa42:	4698      	mov	r8, r3
 800aa44:	46a1      	mov	r9, r4
 800aa46:	eb18 080a 	adds.w	r8, r8, sl
 800aa4a:	eb49 090b 	adc.w	r9, r9, fp
 800aa4e:	f04f 0100 	mov.w	r1, #0
 800aa52:	f04f 0200 	mov.w	r2, #0
 800aa56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa62:	4688      	mov	r8, r1
 800aa64:	4691      	mov	r9, r2
 800aa66:	eb1a 0508 	adds.w	r5, sl, r8
 800aa6a:	eb4b 0609 	adc.w	r6, fp, r9
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	4619      	mov	r1, r3
 800aa74:	f04f 0200 	mov.w	r2, #0
 800aa78:	f04f 0300 	mov.w	r3, #0
 800aa7c:	f04f 0400 	mov.w	r4, #0
 800aa80:	0094      	lsls	r4, r2, #2
 800aa82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa86:	008b      	lsls	r3, r1, #2
 800aa88:	461a      	mov	r2, r3
 800aa8a:	4623      	mov	r3, r4
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	4631      	mov	r1, r6
 800aa90:	f7f5 fbae 	bl	80001f0 <__aeabi_uldivmod>
 800aa94:	4603      	mov	r3, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4b50      	ldr	r3, [pc, #320]	; (800abdc <UART_SetConfig+0x6f4>)
 800aa9c:	fba3 2302 	umull	r2, r3, r3, r2
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	469b      	mov	fp, r3
 800aaaa:	f04f 0c00 	mov.w	ip, #0
 800aaae:	46d9      	mov	r9, fp
 800aab0:	46e2      	mov	sl, ip
 800aab2:	eb19 0309 	adds.w	r3, r9, r9
 800aab6:	eb4a 040a 	adc.w	r4, sl, sl
 800aaba:	4699      	mov	r9, r3
 800aabc:	46a2      	mov	sl, r4
 800aabe:	eb19 090b 	adds.w	r9, r9, fp
 800aac2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aac6:	f04f 0100 	mov.w	r1, #0
 800aaca:	f04f 0200 	mov.w	r2, #0
 800aace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aad2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aad6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aada:	4689      	mov	r9, r1
 800aadc:	4692      	mov	sl, r2
 800aade:	eb1b 0509 	adds.w	r5, fp, r9
 800aae2:	eb4c 060a 	adc.w	r6, ip, sl
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	4619      	mov	r1, r3
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	f04f 0400 	mov.w	r4, #0
 800aaf8:	0094      	lsls	r4, r2, #2
 800aafa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aafe:	008b      	lsls	r3, r1, #2
 800ab00:	461a      	mov	r2, r3
 800ab02:	4623      	mov	r3, r4
 800ab04:	4628      	mov	r0, r5
 800ab06:	4631      	mov	r1, r6
 800ab08:	f7f5 fb72 	bl	80001f0 <__aeabi_uldivmod>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	460c      	mov	r4, r1
 800ab10:	461a      	mov	r2, r3
 800ab12:	4b32      	ldr	r3, [pc, #200]	; (800abdc <UART_SetConfig+0x6f4>)
 800ab14:	fba3 1302 	umull	r1, r3, r3, r2
 800ab18:	095b      	lsrs	r3, r3, #5
 800ab1a:	2164      	movs	r1, #100	; 0x64
 800ab1c:	fb01 f303 	mul.w	r3, r1, r3
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	011b      	lsls	r3, r3, #4
 800ab24:	3332      	adds	r3, #50	; 0x32
 800ab26:	4a2d      	ldr	r2, [pc, #180]	; (800abdc <UART_SetConfig+0x6f4>)
 800ab28:	fba2 2303 	umull	r2, r3, r2, r3
 800ab2c:	095b      	lsrs	r3, r3, #5
 800ab2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab32:	4498      	add	r8, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	469b      	mov	fp, r3
 800ab38:	f04f 0c00 	mov.w	ip, #0
 800ab3c:	46d9      	mov	r9, fp
 800ab3e:	46e2      	mov	sl, ip
 800ab40:	eb19 0309 	adds.w	r3, r9, r9
 800ab44:	eb4a 040a 	adc.w	r4, sl, sl
 800ab48:	4699      	mov	r9, r3
 800ab4a:	46a2      	mov	sl, r4
 800ab4c:	eb19 090b 	adds.w	r9, r9, fp
 800ab50:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab54:	f04f 0100 	mov.w	r1, #0
 800ab58:	f04f 0200 	mov.w	r2, #0
 800ab5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab68:	4689      	mov	r9, r1
 800ab6a:	4692      	mov	sl, r2
 800ab6c:	eb1b 0509 	adds.w	r5, fp, r9
 800ab70:	eb4c 060a 	adc.w	r6, ip, sl
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	f04f 0200 	mov.w	r2, #0
 800ab7e:	f04f 0300 	mov.w	r3, #0
 800ab82:	f04f 0400 	mov.w	r4, #0
 800ab86:	0094      	lsls	r4, r2, #2
 800ab88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab8c:	008b      	lsls	r3, r1, #2
 800ab8e:	461a      	mov	r2, r3
 800ab90:	4623      	mov	r3, r4
 800ab92:	4628      	mov	r0, r5
 800ab94:	4631      	mov	r1, r6
 800ab96:	f7f5 fb2b 	bl	80001f0 <__aeabi_uldivmod>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	461a      	mov	r2, r3
 800aba0:	4b0e      	ldr	r3, [pc, #56]	; (800abdc <UART_SetConfig+0x6f4>)
 800aba2:	fba3 1302 	umull	r1, r3, r3, r2
 800aba6:	095b      	lsrs	r3, r3, #5
 800aba8:	2164      	movs	r1, #100	; 0x64
 800abaa:	fb01 f303 	mul.w	r3, r1, r3
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	011b      	lsls	r3, r3, #4
 800abb2:	3332      	adds	r3, #50	; 0x32
 800abb4:	4a09      	ldr	r2, [pc, #36]	; (800abdc <UART_SetConfig+0x6f4>)
 800abb6:	fba2 2303 	umull	r2, r3, r2, r3
 800abba:	095b      	lsrs	r3, r3, #5
 800abbc:	f003 020f 	and.w	r2, r3, #15
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4442      	add	r2, r8
 800abc6:	609a      	str	r2, [r3, #8]
}
 800abc8:	e7ff      	b.n	800abca <UART_SetConfig+0x6e2>
 800abca:	bf00      	nop
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd4:	40011000 	.word	0x40011000
 800abd8:	40011400 	.word	0x40011400
 800abdc:	51eb851f 	.word	0x51eb851f

0800abe0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800abee:	2300      	movs	r3, #0
 800abf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d029      	beq.n	800ac4e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ac06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac0a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac14:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800ac1a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800ac20:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800ac26:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800ac2c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800ac32:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800ac38:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800ac3e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	e034      	b.n	800acb8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac5a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ac64:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ac6a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ac7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac82:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac8c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800ac92:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800ac98:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800ac9e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800aca4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b087      	sub	sp, #28
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d02e      	beq.n	800ad3e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800acec:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800acfc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800ad06:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800ad10:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ad1a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	695b      	ldr	r3, [r3, #20]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800ad24:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	609a      	str	r2, [r3, #8]
 800ad3c:	e03b      	b.n	800adb6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad4e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	695b      	ldr	r3, [r3, #20]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ad60:	4313      	orrs	r3, r2
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad74:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ad84:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ad8e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ad98:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ada2:	4313      	orrs	r3, r2
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ade0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800adea:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800adf2:	4313      	orrs	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800adfc:	f7f9 f80c 	bl	8003e18 <HAL_GetTick>
 800ae00:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800ae02:	e010      	b.n	800ae26 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0a:	d00c      	beq.n	800ae26 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d007      	beq.n	800ae22 <FMC_SDRAM_SendCommand+0x5e>
 800ae12:	f7f9 f801 	bl	8003e18 <HAL_GetTick>
 800ae16:	4602      	mov	r2, r0
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d201      	bcs.n	800ae26 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	e006      	b.n	800ae34 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b20      	cmp	r3, #32
 800ae30:	d0e8      	beq.n	800ae04 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	695a      	ldr	r2, [r3, #20]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae62:	b084      	sub	sp, #16
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	f107 001c 	add.w	r0, r7, #28
 800ae70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d122      	bne.n	800aec0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ae8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d105      	bne.n	800aeb4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f949 	bl	800b14c <USB_CoreReset>
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]
 800aebe:	e01a      	b.n	800aef6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f93d 	bl	800b14c <USB_CoreReset>
 800aed2:	4603      	mov	r3, r0
 800aed4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	639a      	str	r2, [r3, #56]	; 0x38
 800aee8:	e005      	b.n	800aef6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d10b      	bne.n	800af14 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	f043 0206 	orr.w	r2, r3, #6
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f043 0220 	orr.w	r2, r3, #32
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800af14:	7bfb      	ldrb	r3, [r7, #15]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af20:	b004      	add	sp, #16
 800af22:	4770      	bx	lr

0800af24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f043 0201 	orr.w	r2, r3, #1
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f023 0201 	bic.w	r2, r3, #1
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	2b01      	cmp	r3, #1
 800af84:	d106      	bne.n	800af94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	60da      	str	r2, [r3, #12]
 800af92:	e00b      	b.n	800afac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d106      	bne.n	800afa8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	60da      	str	r2, [r3, #12]
 800afa6:	e001      	b.n	800afac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e003      	b.n	800afb4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800afac:	2032      	movs	r0, #50	; 0x32
 800afae:	f7f8 ff3f 	bl	8003e30 <HAL_Delay>

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	019b      	lsls	r3, r3, #6
 800afce:	f043 0220 	orr.w	r2, r3, #32
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4a09      	ldr	r2, [pc, #36]	; (800b004 <USB_FlushTxFifo+0x48>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d901      	bls.n	800afe8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e006      	b.n	800aff6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	f003 0320 	and.w	r3, r3, #32
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d0f0      	beq.n	800afd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	00030d40 	.word	0x00030d40

0800b008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2210      	movs	r2, #16
 800b018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	3301      	adds	r3, #1
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4a09      	ldr	r2, [pc, #36]	; (800b048 <USB_FlushRxFifo+0x40>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d901      	bls.n	800b02c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e006      	b.n	800b03a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	f003 0310 	and.w	r3, r3, #16
 800b034:	2b10      	cmp	r3, #16
 800b036:	d0f0      	beq.n	800b01a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	00030d40 	.word	0x00030d40

0800b04c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b089      	sub	sp, #36	; 0x24
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4611      	mov	r1, r2
 800b058:	461a      	mov	r2, r3
 800b05a:	460b      	mov	r3, r1
 800b05c:	71fb      	strb	r3, [r7, #7]
 800b05e:	4613      	mov	r3, r2
 800b060:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b06a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d11a      	bne.n	800b0a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b072:	88bb      	ldrh	r3, [r7, #4]
 800b074:	3303      	adds	r3, #3
 800b076:	089b      	lsrs	r3, r3, #2
 800b078:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b07a:	2300      	movs	r3, #0
 800b07c:	61bb      	str	r3, [r7, #24]
 800b07e:	e00f      	b.n	800b0a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	031a      	lsls	r2, r3, #12
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	4413      	add	r3, r2
 800b088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b08c:	461a      	mov	r2, r3
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	3304      	adds	r3, #4
 800b098:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	3301      	adds	r3, #1
 800b09e:	61bb      	str	r3, [r7, #24]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d3eb      	bcc.n	800b080 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3724      	adds	r7, #36	; 0x24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b089      	sub	sp, #36	; 0x24
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	60f8      	str	r0, [r7, #12]
 800b0be:	60b9      	str	r1, [r7, #8]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b0cc:	88fb      	ldrh	r3, [r7, #6]
 800b0ce:	3303      	adds	r3, #3
 800b0d0:	089b      	lsrs	r3, r3, #2
 800b0d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61bb      	str	r3, [r7, #24]
 800b0d8:	e00b      	b.n	800b0f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	601a      	str	r2, [r3, #0]
    pDest++;
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	61bb      	str	r3, [r7, #24]
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d3ef      	bcc.n	800b0da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b0fa:	69fb      	ldr	r3, [r7, #28]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3724      	adds	r7, #36	; 0x24
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	4013      	ands	r3, r2
 800b11e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b120:	68fb      	ldr	r3, [r7, #12]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b12e:	b480      	push	{r7}
 800b130:	b083      	sub	sp, #12
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	f003 0301 	and.w	r3, r3, #1
}
 800b13e:	4618      	mov	r0, r3
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
	...

0800b14c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3301      	adds	r3, #1
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	4a13      	ldr	r2, [pc, #76]	; (800b1b0 <USB_CoreReset+0x64>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d901      	bls.n	800b16a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e01b      	b.n	800b1a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	daf2      	bge.n	800b158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	f043 0201 	orr.w	r2, r3, #1
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4a09      	ldr	r2, [pc, #36]	; (800b1b0 <USB_CoreReset+0x64>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d901      	bls.n	800b194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e006      	b.n	800b1a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d0f0      	beq.n	800b182 <USB_CoreReset+0x36>

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	00030d40 	.word	0x00030d40

0800b1b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	f107 001c 	add.w	r0, r7, #28
 800b1c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b202:	2b00      	cmp	r3, #0
 800b204:	d018      	beq.n	800b238 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d10a      	bne.n	800b222 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b21a:	f043 0304 	orr.w	r3, r3, #4
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	e014      	b.n	800b24c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b230:	f023 0304 	bic.w	r3, r3, #4
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	e009      	b.n	800b24c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b246:	f023 0304 	bic.w	r3, r3, #4
 800b24a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b24c:	2110      	movs	r1, #16
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff feb4 	bl	800afbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff fed7 	bl	800b008 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	e015      	b.n	800b28c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	4413      	add	r3, r2
 800b268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b26c:	461a      	mov	r2, r3
 800b26e:	f04f 33ff 	mov.w	r3, #4294967295
 800b272:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b280:	461a      	mov	r2, r3
 800b282:	2300      	movs	r3, #0
 800b284:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3301      	adds	r3, #1
 800b28a:	60fb      	str	r3, [r7, #12]
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	429a      	cmp	r2, r3
 800b292:	d3e5      	bcc.n	800b260 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b294:	2101      	movs	r1, #1
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f8ac 	bl	800b3f4 <USB_DriveVbus>

  HAL_Delay(200U);
 800b29c:	20c8      	movs	r0, #200	; 0xc8
 800b29e:	f7f8 fdc7 	bl	8003e30 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00b      	beq.n	800b2d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a14      	ldr	r2, [pc, #80]	; (800b318 <USB_HostInit+0x164>)
 800b2c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a13      	ldr	r2, [pc, #76]	; (800b31c <USB_HostInit+0x168>)
 800b2ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b2d2:	e009      	b.n	800b2e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2280      	movs	r2, #128	; 0x80
 800b2d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a10      	ldr	r2, [pc, #64]	; (800b320 <USB_HostInit+0x16c>)
 800b2de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a10      	ldr	r2, [pc, #64]	; (800b324 <USB_HostInit+0x170>)
 800b2e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d105      	bne.n	800b2fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	f043 0210 	orr.w	r2, r3, #16
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	699a      	ldr	r2, [r3, #24]
 800b2fe:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <USB_HostInit+0x174>)
 800b300:	4313      	orrs	r3, r2
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b312:	b004      	add	sp, #16
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	01000200 	.word	0x01000200
 800b31c:	00e00300 	.word	0x00e00300
 800b320:	00600080 	.word	0x00600080
 800b324:	004000e0 	.word	0x004000e0
 800b328:	a3200008 	.word	0xa3200008

0800b32c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b34a:	f023 0303 	bic.w	r3, r3, #3
 800b34e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	78fb      	ldrb	r3, [r7, #3]
 800b35a:	f003 0303 	and.w	r3, r3, #3
 800b35e:	68f9      	ldr	r1, [r7, #12]
 800b360:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b364:	4313      	orrs	r3, r2
 800b366:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b368:	78fb      	ldrb	r3, [r7, #3]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d107      	bne.n	800b37e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b374:	461a      	mov	r2, r3
 800b376:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b37a:	6053      	str	r3, [r2, #4]
 800b37c:	e009      	b.n	800b392 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b37e:	78fb      	ldrb	r3, [r7, #3]
 800b380:	2b02      	cmp	r3, #2
 800b382:	d106      	bne.n	800b392 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b38a:	461a      	mov	r2, r3
 800b38c:	f241 7370 	movw	r3, #6000	; 0x1770
 800b390:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b3c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b3ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b3d0:	2064      	movs	r0, #100	; 0x64
 800b3d2:	f7f8 fd2d 	bl	8003e30 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b3de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b3e4:	200a      	movs	r0, #10
 800b3e6:	f7f8 fd23 	bl	8003e30 <HAL_Delay>

  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b418:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b420:	2b00      	cmp	r3, #0
 800b422:	d109      	bne.n	800b438 <USB_DriveVbus+0x44>
 800b424:	78fb      	ldrb	r3, [r7, #3]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d106      	bne.n	800b438 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b432:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b436:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b442:	d109      	bne.n	800b458 <USB_DriveVbus+0x64>
 800b444:	78fb      	ldrb	r3, [r7, #3]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b456:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b466:	b480      	push	{r7}
 800b468:	b085      	sub	sp, #20
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	0c5b      	lsrs	r3, r3, #17
 800b484:	f003 0303 	and.w	r3, r3, #3
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	b29b      	uxth	r3, r3
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	70fb      	strb	r3, [r7, #3]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	70bb      	strb	r3, [r7, #2]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b4da:	78fb      	ldrb	r3, [r7, #3]
 800b4dc:	015a      	lsls	r2, r3, #5
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b4ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d87e      	bhi.n	800b5f4 <USB_HC_Init+0x13c>
 800b4f6:	a201      	add	r2, pc, #4	; (adr r2, 800b4fc <USB_HC_Init+0x44>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b50d 	.word	0x0800b50d
 800b500:	0800b5b7 	.word	0x0800b5b7
 800b504:	0800b50d 	.word	0x0800b50d
 800b508:	0800b579 	.word	0x0800b579
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	015a      	lsls	r2, r3, #5
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	4413      	add	r3, r2
 800b514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b518:	461a      	mov	r2, r3
 800b51a:	f240 439d 	movw	r3, #1181	; 0x49d
 800b51e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b520:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b524:	2b00      	cmp	r3, #0
 800b526:	da10      	bge.n	800b54a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b528:	78fb      	ldrb	r3, [r7, #3]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	78fa      	ldrb	r2, [r7, #3]
 800b538:	0151      	lsls	r1, r2, #5
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	440a      	add	r2, r1
 800b53e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b546:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800b548:	e057      	b.n	800b5fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b552:	2b00      	cmp	r3, #0
 800b554:	d051      	beq.n	800b5fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	015a      	lsls	r2, r3, #5
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	78fa      	ldrb	r2, [r7, #3]
 800b566:	0151      	lsls	r1, r2, #5
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	440a      	add	r2, r1
 800b56c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b570:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b574:	60d3      	str	r3, [r2, #12]
      break;
 800b576:	e040      	b.n	800b5fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b578:	78fb      	ldrb	r3, [r7, #3]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b584:	461a      	mov	r2, r3
 800b586:	f240 639d 	movw	r3, #1693	; 0x69d
 800b58a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b58c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b590:	2b00      	cmp	r3, #0
 800b592:	da34      	bge.n	800b5fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b594:	78fb      	ldrb	r3, [r7, #3]
 800b596:	015a      	lsls	r2, r3, #5
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	4413      	add	r3, r2
 800b59c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	78fa      	ldrb	r2, [r7, #3]
 800b5a4:	0151      	lsls	r1, r2, #5
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	440a      	add	r2, r1
 800b5aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b5b4:	e023      	b.n	800b5fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b5b6:	78fb      	ldrb	r3, [r7, #3]
 800b5b8:	015a      	lsls	r2, r3, #5
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	4413      	add	r3, r2
 800b5be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f240 2325 	movw	r3, #549	; 0x225
 800b5c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b5ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da17      	bge.n	800b602 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	015a      	lsls	r2, r3, #5
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	78fa      	ldrb	r2, [r7, #3]
 800b5e2:	0151      	lsls	r1, r2, #5
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	440a      	add	r2, r1
 800b5e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b5f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b5f2:	e006      	b.n	800b602 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5f8:	e004      	b.n	800b604 <USB_HC_Init+0x14c>
      break;
 800b5fa:	bf00      	nop
 800b5fc:	e002      	b.n	800b604 <USB_HC_Init+0x14c>
      break;
 800b5fe:	bf00      	nop
 800b600:	e000      	b.n	800b604 <USB_HC_Init+0x14c>
      break;
 800b602:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b60a:	699a      	ldr	r2, [r3, #24]
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	f003 030f 	and.w	r3, r3, #15
 800b612:	2101      	movs	r1, #1
 800b614:	fa01 f303 	lsl.w	r3, r1, r3
 800b618:	68b9      	ldr	r1, [r7, #8]
 800b61a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b61e:	4313      	orrs	r3, r2
 800b620:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b62e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b632:	2b00      	cmp	r3, #0
 800b634:	da03      	bge.n	800b63e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b63a:	613b      	str	r3, [r7, #16]
 800b63c:	e001      	b.n	800b642 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800b642:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d103      	bne.n	800b652 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b64a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	e001      	b.n	800b656 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b652:	2300      	movs	r3, #0
 800b654:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b656:	787b      	ldrb	r3, [r7, #1]
 800b658:	059b      	lsls	r3, r3, #22
 800b65a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b65e:	78bb      	ldrb	r3, [r7, #2]
 800b660:	02db      	lsls	r3, r3, #11
 800b662:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b666:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b66c:	049b      	lsls	r3, r3, #18
 800b66e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b672:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b674:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b676:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b67a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	0159      	lsls	r1, r3, #5
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	440b      	add	r3, r1
 800b688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b68c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b692:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b694:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b698:	2b03      	cmp	r3, #3
 800b69a:	d10f      	bne.n	800b6bc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b69c:	78fb      	ldrb	r3, [r7, #3]
 800b69e:	015a      	lsls	r2, r3, #5
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	0151      	lsls	r1, r2, #5
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	440a      	add	r2, r1
 800b6b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b6b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6ba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	371c      	adds	r7, #28
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop

0800b6cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08c      	sub	sp, #48	; 0x30
 800b6d0:	af02      	add	r7, sp, #8
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	785b      	ldrb	r3, [r3, #1]
 800b6e2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b6e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d028      	beq.n	800b748 <USB_HC_StartXfer+0x7c>
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	791b      	ldrb	r3, [r3, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d124      	bne.n	800b748 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10b      	bne.n	800b71c <USB_HC_StartXfer+0x50>
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	795b      	ldrb	r3, [r3, #5]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d107      	bne.n	800b71c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	785b      	ldrb	r3, [r3, #1]
 800b710:	4619      	mov	r1, r3
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fa30 	bl	800bb78 <USB_DoPing>
      return HAL_OK;
 800b718:	2300      	movs	r3, #0
 800b71a:	e114      	b.n	800b946 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800b71c:	79fb      	ldrb	r3, [r7, #7]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d112      	bne.n	800b748 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	015a      	lsls	r2, r3, #5
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	4413      	add	r3, r2
 800b72a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	69fa      	ldr	r2, [r7, #28]
 800b732:	0151      	lsls	r1, r2, #5
 800b734:	6a3a      	ldr	r2, [r7, #32]
 800b736:	440a      	add	r2, r1
 800b738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b73c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b740:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	2200      	movs	r2, #0
 800b746:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d018      	beq.n	800b782 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	8912      	ldrh	r2, [r2, #8]
 800b758:	4413      	add	r3, r2
 800b75a:	3b01      	subs	r3, #1
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	8912      	ldrh	r2, [r2, #8]
 800b760:	fbb3 f3f2 	udiv	r3, r3, r2
 800b764:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b766:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b768:	8b7b      	ldrh	r3, [r7, #26]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d90b      	bls.n	800b786 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b76e:	8b7b      	ldrh	r3, [r7, #26]
 800b770:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b772:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	8912      	ldrh	r2, [r2, #8]
 800b778:	fb02 f203 	mul.w	r2, r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	611a      	str	r2, [r3, #16]
 800b780:	e001      	b.n	800b786 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b782:	2301      	movs	r3, #1
 800b784:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	78db      	ldrb	r3, [r3, #3]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d006      	beq.n	800b79c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b78e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	8912      	ldrh	r2, [r2, #8]
 800b794:	fb02 f203 	mul.w	r2, r2, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b7a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7a6:	04d9      	lsls	r1, r3, #19
 800b7a8:	4b69      	ldr	r3, [pc, #420]	; (800b950 <USB_HC_StartXfer+0x284>)
 800b7aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b7ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	7a9b      	ldrb	r3, [r3, #10]
 800b7b2:	075b      	lsls	r3, r3, #29
 800b7b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b7b8:	69f9      	ldr	r1, [r7, #28]
 800b7ba:	0148      	lsls	r0, r1, #5
 800b7bc:	6a39      	ldr	r1, [r7, #32]
 800b7be:	4401      	add	r1, r0
 800b7c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b7c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b7c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	68d9      	ldr	r1, [r3, #12]
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7de:	460a      	mov	r2, r1
 800b7e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	bf0c      	ite	eq
 800b7f2:	2301      	moveq	r3, #1
 800b7f4:	2300      	movne	r3, #0
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	015a      	lsls	r2, r3, #5
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	4413      	add	r3, r2
 800b802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	69fa      	ldr	r2, [r7, #28]
 800b80a:	0151      	lsls	r1, r2, #5
 800b80c:	6a3a      	ldr	r2, [r7, #32]
 800b80e:	440a      	add	r2, r1
 800b810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b814:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b818:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	4413      	add	r3, r2
 800b822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	7e7b      	ldrb	r3, [r7, #25]
 800b82a:	075b      	lsls	r3, r3, #29
 800b82c:	69f9      	ldr	r1, [r7, #28]
 800b82e:	0148      	lsls	r0, r1, #5
 800b830:	6a39      	ldr	r1, [r7, #32]
 800b832:	4401      	add	r1, r0
 800b834:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b838:	4313      	orrs	r3, r2
 800b83a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	015a      	lsls	r2, r3, #5
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	4413      	add	r3, r2
 800b844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a42      	ldr	r2, [pc, #264]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b84c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b84e:	4b41      	ldr	r3, [pc, #260]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b856:	4a3f      	ldr	r2, [pc, #252]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b858:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	78db      	ldrb	r3, [r3, #3]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d006      	beq.n	800b870 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b862:	4b3c      	ldr	r3, [pc, #240]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b86a:	4a3a      	ldr	r2, [pc, #232]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b86c:	6013      	str	r3, [r2, #0]
 800b86e:	e005      	b.n	800b87c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b870:	4b38      	ldr	r3, [pc, #224]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b878:	4a36      	ldr	r2, [pc, #216]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b87a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b87c:	4b35      	ldr	r3, [pc, #212]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b884:	4a33      	ldr	r2, [pc, #204]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b886:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	015a      	lsls	r2, r3, #5
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	4413      	add	r3, r2
 800b890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b894:	461a      	mov	r2, r3
 800b896:	4b2f      	ldr	r3, [pc, #188]	; (800b954 <USB_HC_StartXfer+0x288>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e04f      	b.n	800b946 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	78db      	ldrb	r3, [r3, #3]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d14a      	bne.n	800b944 <USB_HC_StartXfer+0x278>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d046      	beq.n	800b944 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	79db      	ldrb	r3, [r3, #7]
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	d830      	bhi.n	800b920 <USB_HC_StartXfer+0x254>
 800b8be:	a201      	add	r2, pc, #4	; (adr r2, 800b8c4 <USB_HC_StartXfer+0x1f8>)
 800b8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c4:	0800b8d5 	.word	0x0800b8d5
 800b8c8:	0800b8f9 	.word	0x0800b8f9
 800b8cc:	0800b8d5 	.word	0x0800b8d5
 800b8d0:	0800b8f9 	.word	0x0800b8f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	3303      	adds	r3, #3
 800b8da:	089b      	lsrs	r3, r3, #2
 800b8dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b8de:	8afa      	ldrh	r2, [r7, #22]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d91c      	bls.n	800b924 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	f043 0220 	orr.w	r2, r3, #32
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b8f6:	e015      	b.n	800b924 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	3303      	adds	r3, #3
 800b8fe:	089b      	lsrs	r3, r3, #2
 800b900:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b902:	8afa      	ldrh	r2, [r7, #22]
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	429a      	cmp	r2, r3
 800b910:	d90a      	bls.n	800b928 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b91e:	e003      	b.n	800b928 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b920:	bf00      	nop
 800b922:	e002      	b.n	800b92a <USB_HC_StartXfer+0x25e>
        break;
 800b924:	bf00      	nop
 800b926:	e000      	b.n	800b92a <USB_HC_StartXfer+0x25e>
        break;
 800b928:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	68d9      	ldr	r1, [r3, #12]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	785a      	ldrb	r2, [r3, #1]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	b298      	uxth	r0, r3
 800b938:	2300      	movs	r3, #0
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	4603      	mov	r3, r0
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f7ff fb84 	bl	800b04c <USB_WritePacket>
  }

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3728      	adds	r7, #40	; 0x28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	1ff80000 	.word	0x1ff80000
 800b954:	2000056c 	.word	0x2000056c

0800b958 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b96a:	695b      	ldr	r3, [r3, #20]
 800b96c:	b29b      	uxth	r3, r3
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b087      	sub	sp, #28
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	0c9b      	lsrs	r3, r3, #18
 800b9a2:	f003 0303 	and.w	r3, r3, #3
 800b9a6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <USB_HC_Halt+0x3a>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d16c      	bne.n	800ba8e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	015a      	lsls	r2, r3, #5
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	0151      	lsls	r1, r2, #5
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	440a      	add	r2, r1
 800b9ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9d2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d143      	bne.n	800ba68 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	015a      	lsls	r2, r3, #5
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	0151      	lsls	r1, r2, #5
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	440a      	add	r2, r1
 800b9f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	0151      	lsls	r1, r2, #5
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	440a      	add	r2, r1
 800ba16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	015a      	lsls	r2, r3, #5
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	4413      	add	r3, r2
 800ba28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	0151      	lsls	r1, r2, #5
 800ba32:	693a      	ldr	r2, [r7, #16]
 800ba34:	440a      	add	r2, r1
 800ba36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba3e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	3301      	adds	r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba4c:	d81d      	bhi.n	800ba8a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	015a      	lsls	r2, r3, #5
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba64:	d0ec      	beq.n	800ba40 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ba66:	e080      	b.n	800bb6a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	0151      	lsls	r1, r2, #5
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	440a      	add	r2, r1
 800ba7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba86:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ba88:	e06f      	b.n	800bb6a <USB_HC_Halt+0x1f0>
          break;
 800ba8a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ba8c:	e06d      	b.n	800bb6a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	015a      	lsls	r2, r3, #5
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	4413      	add	r3, r2
 800ba96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	0151      	lsls	r1, r2, #5
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	440a      	add	r2, r1
 800baa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800baa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800baac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d143      	bne.n	800bb46 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	0151      	lsls	r1, r2, #5
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	440a      	add	r2, r1
 800bad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800badc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	0151      	lsls	r1, r2, #5
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	440a      	add	r2, r1
 800baf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800baf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bafc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	015a      	lsls	r2, r3, #5
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	4413      	add	r3, r2
 800bb06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	0151      	lsls	r1, r2, #5
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	440a      	add	r2, r1
 800bb14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb1c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	3301      	adds	r3, #1
 800bb22:	617b      	str	r3, [r7, #20]
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb2a:	d81d      	bhi.n	800bb68 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	015a      	lsls	r2, r3, #5
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	4413      	add	r3, r2
 800bb34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb42:	d0ec      	beq.n	800bb1e <USB_HC_Halt+0x1a4>
 800bb44:	e011      	b.n	800bb6a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	0151      	lsls	r1, r2, #5
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	440a      	add	r2, r1
 800bb5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	e000      	b.n	800bb6a <USB_HC_Halt+0x1f0>
          break;
 800bb68:	bf00      	nop
    }
  }

  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	371c      	adds	r7, #28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bb88:	78fb      	ldrb	r3, [r7, #3]
 800bb8a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	04da      	lsls	r2, r3, #19
 800bb94:	4b15      	ldr	r3, [pc, #84]	; (800bbec <USB_DoPing+0x74>)
 800bb96:	4013      	ands	r3, r2
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	0151      	lsls	r1, r2, #5
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	440a      	add	r2, r1
 800bba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bba8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	015a      	lsls	r2, r3, #5
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bbc0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbc8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	371c      	adds	r7, #28
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	1ff80000 	.word	0x1ff80000

0800bbf0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f7ff f9a0 	bl	800af46 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bc06:	2110      	movs	r1, #16
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff f9d7 	bl	800afbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff f9fa 	bl	800b008 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bc14:	2300      	movs	r3, #0
 800bc16:	613b      	str	r3, [r7, #16]
 800bc18:	e01f      	b.n	800bc5a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	015a      	lsls	r2, r3, #5
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	4413      	add	r3, r2
 800bc22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc38:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc40:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	015a      	lsls	r2, r3, #5
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4413      	add	r3, r2
 800bc4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc4e:	461a      	mov	r2, r3
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	3301      	adds	r3, #1
 800bc58:	613b      	str	r3, [r7, #16]
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	2b0f      	cmp	r3, #15
 800bc5e:	d9dc      	bls.n	800bc1a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bc60:	2300      	movs	r3, #0
 800bc62:	613b      	str	r3, [r7, #16]
 800bc64:	e034      	b.n	800bcd0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	015a      	lsls	r2, r3, #5
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc7c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc84:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc8c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	015a      	lsls	r2, r3, #5
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	4413      	add	r3, r2
 800bc96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	3301      	adds	r3, #1
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcac:	d80c      	bhi.n	800bcc8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	015a      	lsls	r2, r3, #5
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcc4:	d0ec      	beq.n	800bca0 <USB_StopHost+0xb0>
 800bcc6:	e000      	b.n	800bcca <USB_StopHost+0xda>
        break;
 800bcc8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	3301      	adds	r3, #1
 800bcce:	613b      	str	r3, [r7, #16]
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	2b0f      	cmp	r3, #15
 800bcd4:	d9c7      	bls.n	800bc66 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcdc:	461a      	mov	r2, r3
 800bcde:	f04f 33ff 	mov.w	r3, #4294967295
 800bce2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff f919 	bl	800af24 <USB_EnableGlobalInt>

  return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bcfc:	b590      	push	{r4, r7, lr}
 800bcfe:	b089      	sub	sp, #36	; 0x24
 800bd00:	af04      	add	r7, sp, #16
 800bd02:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bd04:	2301      	movs	r3, #1
 800bd06:	2202      	movs	r2, #2
 800bd08:	2102      	movs	r1, #2
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 fcba 	bl	800c684 <USBH_FindInterface>
 800bd10:	4603      	mov	r3, r0
 800bd12:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
 800bd16:	2bff      	cmp	r3, #255	; 0xff
 800bd18:	d002      	beq.n	800bd20 <USBH_CDC_InterfaceInit+0x24>
 800bd1a:	7bfb      	ldrb	r3, [r7, #15]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d901      	bls.n	800bd24 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bd20:	2302      	movs	r3, #2
 800bd22:	e13d      	b.n	800bfa0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	4619      	mov	r1, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fc8f 	bl	800c64c <USBH_SelectInterface>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bd38:	2302      	movs	r3, #2
 800bd3a:	e131      	b.n	800bfa0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bd42:	2050      	movs	r0, #80	; 0x50
 800bd44:	f004 fec0 	bl	8010ac8 <malloc>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd52:	69db      	ldr	r3, [r3, #28]
 800bd54:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	e11f      	b.n	800bfa0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bd60:	2250      	movs	r2, #80	; 0x50
 800bd62:	2100      	movs	r1, #0
 800bd64:	68b8      	ldr	r0, [r7, #8]
 800bd66:	f004 feca 	bl	8010afe <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	211a      	movs	r1, #26
 800bd70:	fb01 f303 	mul.w	r3, r1, r3
 800bd74:	4413      	add	r3, r2
 800bd76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	b25b      	sxtb	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	da15      	bge.n	800bdae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	211a      	movs	r1, #26
 800bd88:	fb01 f303 	mul.w	r3, r1, r3
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd92:	781a      	ldrb	r2, [r3, #0]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	211a      	movs	r1, #26
 800bd9e:	fb01 f303 	mul.w	r3, r1, r3
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bda8:	881a      	ldrh	r2, [r3, #0]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f002 f894 	bl	800dee2 <USBH_AllocPipe>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	7819      	ldrb	r1, [r3, #0]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	7858      	ldrb	r0, [r3, #1]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	8952      	ldrh	r2, [r2, #10]
 800bdda:	9202      	str	r2, [sp, #8]
 800bddc:	2203      	movs	r2, #3
 800bdde:	9201      	str	r2, [sp, #4]
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	4623      	mov	r3, r4
 800bde4:	4602      	mov	r2, r0
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f002 f84c 	bl	800de84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f004 fdb7 	bl	8010968 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	210a      	movs	r1, #10
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fc3f 	bl	800c684 <USBH_FindInterface>
 800be06:	4603      	mov	r3, r0
 800be08:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
 800be0c:	2bff      	cmp	r3, #255	; 0xff
 800be0e:	d002      	beq.n	800be16 <USBH_CDC_InterfaceInit+0x11a>
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d901      	bls.n	800be1a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800be16:	2302      	movs	r3, #2
 800be18:	e0c2      	b.n	800bfa0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	211a      	movs	r1, #26
 800be20:	fb01 f303 	mul.w	r3, r1, r3
 800be24:	4413      	add	r3, r2
 800be26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	b25b      	sxtb	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	da16      	bge.n	800be60 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be32:	7bfb      	ldrb	r3, [r7, #15]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	211a      	movs	r1, #26
 800be38:	fb01 f303 	mul.w	r3, r1, r3
 800be3c:	4413      	add	r3, r2
 800be3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be42:	781a      	ldrb	r2, [r3, #0]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be48:	7bfb      	ldrb	r3, [r7, #15]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	211a      	movs	r1, #26
 800be4e:	fb01 f303 	mul.w	r3, r1, r3
 800be52:	4413      	add	r3, r2
 800be54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800be58:	881a      	ldrh	r2, [r3, #0]
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	835a      	strh	r2, [r3, #26]
 800be5e:	e015      	b.n	800be8c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be60:	7bfb      	ldrb	r3, [r7, #15]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	211a      	movs	r1, #26
 800be66:	fb01 f303 	mul.w	r3, r1, r3
 800be6a:	4413      	add	r3, r2
 800be6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	211a      	movs	r1, #26
 800be7c:	fb01 f303 	mul.w	r3, r1, r3
 800be80:	4413      	add	r3, r2
 800be82:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800be86:	881a      	ldrh	r2, [r3, #0]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	211a      	movs	r1, #26
 800be92:	fb01 f303 	mul.w	r3, r1, r3
 800be96:	4413      	add	r3, r2
 800be98:	f203 3356 	addw	r3, r3, #854	; 0x356
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	b25b      	sxtb	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	da16      	bge.n	800bed2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	211a      	movs	r1, #26
 800beaa:	fb01 f303 	mul.w	r3, r1, r3
 800beae:	4413      	add	r3, r2
 800beb0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800beb4:	781a      	ldrb	r2, [r3, #0]
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800beba:	7bfb      	ldrb	r3, [r7, #15]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	211a      	movs	r1, #26
 800bec0:	fb01 f303 	mul.w	r3, r1, r3
 800bec4:	4413      	add	r3, r2
 800bec6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800beca:	881a      	ldrh	r2, [r3, #0]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	835a      	strh	r2, [r3, #26]
 800bed0:	e015      	b.n	800befe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bed2:	7bfb      	ldrb	r3, [r7, #15]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	211a      	movs	r1, #26
 800bed8:	fb01 f303 	mul.w	r3, r1, r3
 800bedc:	4413      	add	r3, r2
 800bede:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bee2:	781a      	ldrb	r2, [r3, #0]
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	211a      	movs	r1, #26
 800beee:	fb01 f303 	mul.w	r3, r1, r3
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bef8:	881a      	ldrh	r2, [r3, #0]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	7b9b      	ldrb	r3, [r3, #14]
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f001 ffec 	bl	800dee2 <USBH_AllocPipe>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	7bdb      	ldrb	r3, [r3, #15]
 800bf16:	4619      	mov	r1, r3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f001 ffe2 	bl	800dee2 <USBH_AllocPipe>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	461a      	mov	r2, r3
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	7b59      	ldrb	r1, [r3, #13]
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	7b98      	ldrb	r0, [r3, #14]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	8b12      	ldrh	r2, [r2, #24]
 800bf3e:	9202      	str	r2, [sp, #8]
 800bf40:	2202      	movs	r2, #2
 800bf42:	9201      	str	r2, [sp, #4]
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	4623      	mov	r3, r4
 800bf48:	4602      	mov	r2, r0
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f001 ff9a 	bl	800de84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	7b19      	ldrb	r1, [r3, #12]
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	7bd8      	ldrb	r0, [r3, #15]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	8b52      	ldrh	r2, [r2, #26]
 800bf68:	9202      	str	r2, [sp, #8]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	9201      	str	r2, [sp, #4]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	4623      	mov	r3, r4
 800bf72:	4602      	mov	r2, r0
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f001 ff85 	bl	800de84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	7b5b      	ldrb	r3, [r3, #13]
 800bf86:	2200      	movs	r2, #0
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f004 fcec 	bl	8010968 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	7b1b      	ldrb	r3, [r3, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f004 fce5 	bl	8010968 <USBH_LL_SetToggle>

  return USBH_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3714      	adds	r7, #20
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd90      	pop	{r4, r7, pc}

0800bfa8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00e      	beq.n	800bfe0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f001 ff7a 	bl	800dec2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f001 ffa5 	bl	800df24 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	7b1b      	ldrb	r3, [r3, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00e      	beq.n	800c006 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	7b1b      	ldrb	r3, [r3, #12]
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f001 ff67 	bl	800dec2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	7b1b      	ldrb	r3, [r3, #12]
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f001 ff92 	bl	800df24 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	7b5b      	ldrb	r3, [r3, #13]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00e      	beq.n	800c02c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	7b5b      	ldrb	r3, [r3, #13]
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f001 ff54 	bl	800dec2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	7b5b      	ldrb	r3, [r3, #13]
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f001 ff7f 	bl	800df24 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00b      	beq.n	800c050 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c03e:	69db      	ldr	r3, [r3, #28]
 800c040:	4618      	mov	r0, r3
 800c042:	f004 fd49 	bl	8010ad8 <free>
    phost->pActiveClass->pData = 0U;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c04c:	2200      	movs	r2, #0
 800c04e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b084      	sub	sp, #16
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3340      	adds	r3, #64	; 0x40
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f8b1 	bl	800c1da <GetLineCoding>
 800c078:	4603      	mov	r3, r0
 800c07a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c07c:	7afb      	ldrb	r3, [r7, #11]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d105      	bne.n	800c08e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c088:	2102      	movs	r1, #2
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c08e:	7afb      	ldrb	r3, [r7, #11]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0ae:	69db      	ldr	r3, [r3, #28]
 800c0b0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c0b8:	2b04      	cmp	r3, #4
 800c0ba:	d877      	bhi.n	800c1ac <USBH_CDC_Process+0x114>
 800c0bc:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <USBH_CDC_Process+0x2c>)
 800c0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c2:	bf00      	nop
 800c0c4:	0800c0d9 	.word	0x0800c0d9
 800c0c8:	0800c0df 	.word	0x0800c0df
 800c0cc:	0800c10f 	.word	0x0800c10f
 800c0d0:	0800c183 	.word	0x0800c183
 800c0d4:	0800c191 	.word	0x0800c191
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]
      break;
 800c0dc:	e06d      	b.n	800c1ba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f897 	bl	800c218 <SetLineCoding>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c0ee:	7bbb      	ldrb	r3, [r7, #14]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d104      	bne.n	800c0fe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c0fc:	e058      	b.n	800c1b0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c0fe:	7bbb      	ldrb	r3, [r7, #14]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d055      	beq.n	800c1b0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	2204      	movs	r2, #4
 800c108:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c10c:	e050      	b.n	800c1b0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	3340      	adds	r3, #64	; 0x40
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f860 	bl	800c1da <GetLineCoding>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d126      	bne.n	800c172 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c136:	791b      	ldrb	r3, [r3, #4]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d13b      	bne.n	800c1b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c146:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c148:	429a      	cmp	r2, r3
 800c14a:	d133      	bne.n	800c1b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c156:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c158:	429a      	cmp	r2, r3
 800c15a:	d12b      	bne.n	800c1b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c164:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c166:	429a      	cmp	r2, r3
 800c168:	d124      	bne.n	800c1b4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f984 	bl	800c478 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c170:	e020      	b.n	800c1b4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d01d      	beq.n	800c1b4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2204      	movs	r2, #4
 800c17c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c180:	e018      	b.n	800c1b4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f867 	bl	800c256 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f8f8 	bl	800c37e <CDC_ProcessReception>
      break;
 800c18e:	e014      	b.n	800c1ba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c190:	2100      	movs	r1, #0
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f001 f953 	bl	800d43e <USBH_ClrFeature>
 800c198:	4603      	mov	r3, r0
 800c19a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10a      	bne.n	800c1b8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c1aa:	e005      	b.n	800c1b8 <USBH_CDC_Process+0x120>

    default:
      break;
 800c1ac:	bf00      	nop
 800c1ae:	e004      	b.n	800c1ba <USBH_CDC_Process+0x122>
      break;
 800c1b0:	bf00      	nop
 800c1b2:	e002      	b.n	800c1ba <USBH_CDC_Process+0x122>
      break;
 800c1b4:	bf00      	nop
 800c1b6:	e000      	b.n	800c1ba <USBH_CDC_Process+0x122>
      break;
 800c1b8:	bf00      	nop

  }

  return status;
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b082      	sub	sp, #8
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	22a1      	movs	r2, #161	; 0xa1
 800c1e8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2221      	movs	r2, #33	; 0x21
 800c1ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2207      	movs	r2, #7
 800c200:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2207      	movs	r2, #7
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f001 faf8 	bl	800d7fe <USBH_CtlReq>
 800c20e:	4603      	mov	r3, r0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2221      	movs	r2, #33	; 0x21
 800c226:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2220      	movs	r2, #32
 800c22c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2207      	movs	r2, #7
 800c23e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2207      	movs	r2, #7
 800c244:	4619      	mov	r1, r3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f001 fad9 	bl	800d7fe <USBH_CtlReq>
 800c24c:	4603      	mov	r3, r0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b086      	sub	sp, #24
 800c25a:	af02      	add	r7, sp, #8
 800c25c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c268:	2300      	movs	r3, #0
 800c26a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c272:	2b01      	cmp	r3, #1
 800c274:	d002      	beq.n	800c27c <CDC_ProcessTransmission+0x26>
 800c276:	2b02      	cmp	r3, #2
 800c278:	d025      	beq.n	800c2c6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800c27a:	e07c      	b.n	800c376 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	8b12      	ldrh	r2, [r2, #24]
 800c284:	4293      	cmp	r3, r2
 800c286:	d90c      	bls.n	800c2a2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	69d9      	ldr	r1, [r3, #28]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	8b1a      	ldrh	r2, [r3, #24]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	7b58      	ldrb	r0, [r3, #13]
 800c294:	2301      	movs	r3, #1
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	4603      	mov	r3, r0
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 fdaf 	bl	800ddfe <USBH_BulkSendData>
 800c2a0:	e00c      	b.n	800c2bc <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	7b58      	ldrb	r0, [r3, #13]
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f001 fda1 	bl	800ddfe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c2c4:	e057      	b.n	800c376 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	7b5b      	ldrb	r3, [r3, #13]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f004 fb21 	bl	8010914 <USBH_LL_GetURBState>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c2d6:	7afb      	ldrb	r3, [r7, #11]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d136      	bne.n	800c34a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	8b12      	ldrh	r2, [r2, #24]
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d90e      	bls.n	800c306 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	8b12      	ldrh	r2, [r2, #24]
 800c2f0:	1a9a      	subs	r2, r3, r2
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	69db      	ldr	r3, [r3, #28]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	8b12      	ldrh	r2, [r2, #24]
 800c2fe:	441a      	add	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	61da      	str	r2, [r3, #28]
 800c304:	e002      	b.n	800c30c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c310:	2b00      	cmp	r3, #0
 800c312:	d004      	beq.n	800c31e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c31c:	e006      	b.n	800c32c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f892 	bl	800c450 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2204      	movs	r2, #4
 800c330:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c340:	2200      	movs	r2, #0
 800c342:	4619      	mov	r1, r3
 800c344:	f001 feea 	bl	800e11c <osMessagePut>
      break;
 800c348:	e014      	b.n	800c374 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800c34a:	7afb      	ldrb	r3, [r7, #11]
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d111      	bne.n	800c374 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2201      	movs	r2, #1
 800c354:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2204      	movs	r2, #4
 800c35c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c36c:	2200      	movs	r2, #0
 800c36e:	4619      	mov	r1, r3
 800c370:	f001 fed4 	bl	800e11c <osMessagePut>
      break;
 800c374:	bf00      	nop
  }
}
 800c376:	bf00      	nop
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b086      	sub	sp, #24
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c38c:	69db      	ldr	r3, [r3, #28]
 800c38e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c390:	2300      	movs	r3, #0
 800c392:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d002      	beq.n	800c3a4 <CDC_ProcessReception+0x26>
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	d00e      	beq.n	800c3c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c3a2:	e051      	b.n	800c448 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	6a19      	ldr	r1, [r3, #32]
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	8b5a      	ldrh	r2, [r3, #26]
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	7b1b      	ldrb	r3, [r3, #12]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f001 fd49 	bl	800de48 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c3be:	e043      	b.n	800c448 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	7b1b      	ldrb	r3, [r3, #12]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f004 faa4 	bl	8010914 <USBH_LL_GetURBState>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c3d0:	7cfb      	ldrb	r3, [r7, #19]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d137      	bne.n	800c446 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	7b1b      	ldrb	r3, [r3, #12]
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f004 fa07 	bl	80107f0 <USBH_LL_GetLastXferSize>
 800c3e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d016      	beq.n	800c41c <CDC_ProcessReception+0x9e>
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	8b5b      	ldrh	r3, [r3, #26]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d910      	bls.n	800c41c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	1ad2      	subs	r2, r2, r3
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	6a1a      	ldr	r2, [r3, #32]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	441a      	add	r2, r3
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2203      	movs	r2, #3
 800c416:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c41a:	e006      	b.n	800c42a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f81d 	bl	800c464 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2204      	movs	r2, #4
 800c42e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c43e:	2200      	movs	r2, #0
 800c440:	4619      	mov	r1, r3
 800c442:	f001 fe6b 	bl	800e11c <osMessagePut>
      break;
 800c446:	bf00      	nop
  }
}
 800c448:	bf00      	nop
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c48c:	b5b0      	push	{r4, r5, r7, lr}
 800c48e:	b090      	sub	sp, #64	; 0x40
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	4613      	mov	r3, r2
 800c498:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d101      	bne.n	800c4a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	e04d      	b.n	800c540 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	79fa      	ldrb	r2, [r7, #7]
 800c4a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f000 f847 	bl	800c550 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d003      	beq.n	800c4f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800c4f0:	4b15      	ldr	r3, [pc, #84]	; (800c548 <USBH_Init+0xbc>)
 800c4f2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800c4f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c4f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800c4fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c500:	2100      	movs	r1, #0
 800c502:	4618      	mov	r0, r3
 800c504:	f001 fde1 	bl	800e0ca <osMessageCreate>
 800c508:	4602      	mov	r2, r0
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800c510:	4b0e      	ldr	r3, [pc, #56]	; (800c54c <USBH_Init+0xc0>)
 800c512:	f107 0414 	add.w	r4, r7, #20
 800c516:	461d      	mov	r5, r3
 800c518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c51a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c51c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800c524:	f107 0314 	add.w	r3, r7, #20
 800c528:	68f9      	ldr	r1, [r7, #12]
 800c52a:	4618      	mov	r0, r3
 800c52c:	f001 fd6d 	bl	800e00a <osThreadCreate>
 800c530:	4602      	mov	r2, r0
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f004 f89d 	bl	8010678 <USBH_LL_Init>

  return USBH_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3740      	adds	r7, #64	; 0x40
 800c544:	46bd      	mov	sp, r7
 800c546:	bdb0      	pop	{r4, r5, r7, pc}
 800c548:	08010d4c 	.word	0x08010d4c
 800c54c:	08010d68 	.word	0x08010d68

0800c550 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c55c:	2300      	movs	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	e009      	b.n	800c576 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	33e0      	adds	r3, #224	; 0xe0
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	4413      	add	r3, r2
 800c56c:	2200      	movs	r2, #0
 800c56e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	60fb      	str	r3, [r7, #12]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b0e      	cmp	r3, #14
 800c57a:	d9f2      	bls.n	800c562 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c57c:	2300      	movs	r3, #0
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	e009      	b.n	800c596 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	4413      	add	r3, r2
 800c588:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c58c:	2200      	movs	r2, #0
 800c58e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3301      	adds	r3, #1
 800c594:	60fb      	str	r3, [r7, #12]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c59c:	d3f1      	bcc.n	800c582 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2240      	movs	r2, #64	; 0x40
 800c5c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d016      	beq.n	800c63a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c612:	2b00      	cmp	r3, #0
 800c614:	d10e      	bne.n	800c634 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c61c:	1c59      	adds	r1, r3, #1
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	33de      	adds	r3, #222	; 0xde
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]
 800c632:	e004      	b.n	800c63e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c634:	2302      	movs	r3, #2
 800c636:	73fb      	strb	r3, [r7, #15]
 800c638:	e001      	b.n	800c63e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c63a:	2302      	movs	r3, #2
 800c63c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	429a      	cmp	r2, r3
 800c666:	d204      	bcs.n	800c672 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	78fa      	ldrb	r2, [r7, #3]
 800c66c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c670:	e001      	b.n	800c676 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c672:	2302      	movs	r3, #2
 800c674:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c676:	7bfb      	ldrb	r3, [r7, #15]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c684:	b480      	push	{r7}
 800c686:	b087      	sub	sp, #28
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	4608      	mov	r0, r1
 800c68e:	4611      	mov	r1, r2
 800c690:	461a      	mov	r2, r3
 800c692:	4603      	mov	r3, r0
 800c694:	70fb      	strb	r3, [r7, #3]
 800c696:	460b      	mov	r3, r1
 800c698:	70bb      	strb	r3, [r7, #2]
 800c69a:	4613      	mov	r3, r2
 800c69c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c6ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c6ae:	e025      	b.n	800c6fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c6b0:	7dfb      	ldrb	r3, [r7, #23]
 800c6b2:	221a      	movs	r2, #26
 800c6b4:	fb02 f303 	mul.w	r3, r2, r3
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	4413      	add	r3, r2
 800c6be:	3302      	adds	r3, #2
 800c6c0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	795b      	ldrb	r3, [r3, #5]
 800c6c6:	78fa      	ldrb	r2, [r7, #3]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d002      	beq.n	800c6d2 <USBH_FindInterface+0x4e>
 800c6cc:	78fb      	ldrb	r3, [r7, #3]
 800c6ce:	2bff      	cmp	r3, #255	; 0xff
 800c6d0:	d111      	bne.n	800c6f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c6d6:	78ba      	ldrb	r2, [r7, #2]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d002      	beq.n	800c6e2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c6dc:	78bb      	ldrb	r3, [r7, #2]
 800c6de:	2bff      	cmp	r3, #255	; 0xff
 800c6e0:	d109      	bne.n	800c6f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c6e6:	787a      	ldrb	r2, [r7, #1]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d002      	beq.n	800c6f2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c6ec:	787b      	ldrb	r3, [r7, #1]
 800c6ee:	2bff      	cmp	r3, #255	; 0xff
 800c6f0:	d101      	bne.n	800c6f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
 800c6f4:	e006      	b.n	800c704 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c6fc:	7dfb      	ldrb	r3, [r7, #23]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d9d6      	bls.n	800c6b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c702:	23ff      	movs	r3, #255	; 0xff
}
 800c704:	4618      	mov	r0, r3
 800c706:	371c      	adds	r7, #28
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f003 fff3 	bl	8010704 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c71e:	2101      	movs	r1, #1
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f004 f90a 	bl	801093a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b088      	sub	sp, #32
 800c734:	af04      	add	r7, sp, #16
 800c736:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c738:	2302      	movs	r3, #2
 800c73a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d102      	bne.n	800c752 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2203      	movs	r2, #3
 800c750:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b0b      	cmp	r3, #11
 800c75a:	f200 823c 	bhi.w	800cbd6 <USBH_Process+0x4a6>
 800c75e:	a201      	add	r2, pc, #4	; (adr r2, 800c764 <USBH_Process+0x34>)
 800c760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c764:	0800c795 	.word	0x0800c795
 800c768:	0800c7e3 	.word	0x0800c7e3
 800c76c:	0800c867 	.word	0x0800c867
 800c770:	0800cb55 	.word	0x0800cb55
 800c774:	0800cbd7 	.word	0x0800cbd7
 800c778:	0800c927 	.word	0x0800c927
 800c77c:	0800cadf 	.word	0x0800cadf
 800c780:	0800c979 	.word	0x0800c979
 800c784:	0800c9b5 	.word	0x0800c9b5
 800c788:	0800c9ef 	.word	0x0800c9ef
 800c78c:	0800ca37 	.word	0x0800ca37
 800c790:	0800cb3d 	.word	0x0800cb3d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 821c 	beq.w	800cbda <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c7a8:	20c8      	movs	r0, #200	; 0xc8
 800c7aa:	f004 f910 	bl	80109ce <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f004 f803 	bl	80107ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c7d8:	2200      	movs	r2, #0
 800c7da:	4619      	mov	r1, r3
 800c7dc:	f001 fc9e 	bl	800e11c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c7e0:	e1fb      	b.n	800cbda <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d107      	bne.n	800c7fc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	701a      	strb	r2, [r3, #0]
 800c7fa:	e025      	b.n	800c848 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c806:	d914      	bls.n	800c832 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c80e:	3301      	adds	r3, #1
 800c810:	b2da      	uxtb	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d903      	bls.n	800c82a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	220d      	movs	r2, #13
 800c826:	701a      	strb	r2, [r3, #0]
 800c828:	e00e      	b.n	800c848 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	701a      	strb	r2, [r3, #0]
 800c830:	e00a      	b.n	800c848 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c838:	f103 020a 	add.w	r2, r3, #10
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c842:	200a      	movs	r0, #10
 800c844:	f004 f8c3 	bl	80109ce <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c85c:	2200      	movs	r2, #0
 800c85e:	4619      	mov	r1, r3
 800c860:	f001 fc5c 	bl	800e11c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c864:	e1c0      	b.n	800cbe8 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d005      	beq.n	800c87c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c876:	2104      	movs	r1, #4
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c87c:	2064      	movs	r0, #100	; 0x64
 800c87e:	f004 f8a6 	bl	80109ce <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f003 ff74 	bl	8010770 <USBH_LL_GetSpeed>
 800c888:	4603      	mov	r3, r0
 800c88a:	461a      	mov	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2205      	movs	r2, #5
 800c896:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c898:	2100      	movs	r1, #0
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f001 fb21 	bl	800dee2 <USBH_AllocPipe>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c8a8:	2180      	movs	r1, #128	; 0x80
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f001 fb19 	bl	800dee2 <USBH_AllocPipe>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7919      	ldrb	r1, [r3, #4]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c8cc:	b292      	uxth	r2, r2
 800c8ce:	9202      	str	r2, [sp, #8]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	9201      	str	r2, [sp, #4]
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2280      	movs	r2, #128	; 0x80
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f001 fad2 	bl	800de84 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7959      	ldrb	r1, [r3, #5]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c8f4:	b292      	uxth	r2, r2
 800c8f6:	9202      	str	r2, [sp, #8]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	9201      	str	r2, [sp, #4]
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	4603      	mov	r3, r0
 800c900:	2200      	movs	r2, #0
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f001 fabe 	bl	800de84 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c91c:	2200      	movs	r2, #0
 800c91e:	4619      	mov	r1, r3
 800c920:	f001 fbfc 	bl	800e11c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c924:	e160      	b.n	800cbe8 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f964 	bl	800cbf4 <USBH_HandleEnum>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c930:	7bbb      	ldrb	r3, [r7, #14]
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	f040 8152 	bne.w	800cbde <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d103      	bne.n	800c954 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2208      	movs	r2, #8
 800c950:	701a      	strb	r2, [r3, #0]
 800c952:	e002      	b.n	800c95a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2207      	movs	r2, #7
 800c958:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2205      	movs	r2, #5
 800c95e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c96e:	2200      	movs	r2, #0
 800c970:	4619      	mov	r1, r3
 800c972:	f001 fbd3 	bl	800e11c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c976:	e132      	b.n	800cbde <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f000 812f 	beq.w	800cbe2 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c98a:	2101      	movs	r1, #1
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2208      	movs	r2, #8
 800c994:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2205      	movs	r2, #5
 800c99a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	f001 fbb5 	bl	800e11c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c9b2:	e116      	b.n	800cbe2 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 fcf6 	bl	800d3b0 <USBH_SetCfg>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2209      	movs	r2, #9
 800c9ce:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	f001 fb98 	bl	800e11c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c9ec:	e0fc      	b.n	800cbe8 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c9f4:	f003 0320 	and.w	r3, r3, #32
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00a      	beq.n	800ca12 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c9fc:	2101      	movs	r1, #1
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fcf9 	bl	800d3f6 <USBH_SetFeature>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d106      	bne.n	800ca18 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	220a      	movs	r2, #10
 800ca0e:	701a      	strb	r2, [r3, #0]
 800ca10:	e002      	b.n	800ca18 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	220a      	movs	r2, #10
 800ca16:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	4619      	mov	r1, r3
 800ca30:	f001 fb74 	bl	800e11c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca34:	e0d8      	b.n	800cbe8 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d03f      	beq.n	800cac0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73fb      	strb	r3, [r7, #15]
 800ca4c:	e016      	b.n	800ca7c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ca4e:	7bfa      	ldrb	r2, [r7, #15]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	32de      	adds	r2, #222	; 0xde
 800ca54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca58:	791a      	ldrb	r2, [r3, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d108      	bne.n	800ca76 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ca64:	7bfa      	ldrb	r2, [r7, #15]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	32de      	adds	r2, #222	; 0xde
 800ca6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ca74:	e005      	b.n	800ca82 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	73fb      	strb	r3, [r7, #15]
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d0e5      	beq.n	800ca4e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d016      	beq.n	800caba <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	4798      	blx	r3
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d109      	bne.n	800cab2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2206      	movs	r2, #6
 800caa2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800caaa:	2103      	movs	r1, #3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	4798      	blx	r3
 800cab0:	e006      	b.n	800cac0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	220d      	movs	r2, #13
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	e002      	b.n	800cac0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	220d      	movs	r2, #13
 800cabe:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2205      	movs	r2, #5
 800cac4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cad4:	2200      	movs	r2, #0
 800cad6:	4619      	mov	r1, r3
 800cad8:	f001 fb20 	bl	800e11c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cadc:	e084      	b.n	800cbe8 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d017      	beq.n	800cb18 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	4798      	blx	r3
 800caf4:	4603      	mov	r3, r0
 800caf6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d103      	bne.n	800cb08 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	220b      	movs	r2, #11
 800cb04:	701a      	strb	r2, [r3, #0]
 800cb06:	e00a      	b.n	800cb1e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d106      	bne.n	800cb1e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	220d      	movs	r2, #13
 800cb14:	701a      	strb	r2, [r3, #0]
 800cb16:	e002      	b.n	800cb1e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	220d      	movs	r2, #13
 800cb1c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2205      	movs	r2, #5
 800cb22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb32:	2200      	movs	r2, #0
 800cb34:	4619      	mov	r1, r3
 800cb36:	f001 faf1 	bl	800e11c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb3a:	e055      	b.n	800cbe8 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d04f      	beq.n	800cbe6 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb4c:	695b      	ldr	r3, [r3, #20]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	4798      	blx	r3
      }
      break;
 800cb52:	e048      	b.n	800cbe6 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7ff fcf7 	bl	800c550 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d009      	beq.n	800cb80 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d005      	beq.n	800cb96 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb90:	2105      	movs	r1, #5
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d107      	bne.n	800cbb2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff fdb0 	bl	800c710 <USBH_Start>
 800cbb0:	e002      	b.n	800cbb8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f003 fda6 	bl	8010704 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f001 faa4 	bl	800e11c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cbd4:	e008      	b.n	800cbe8 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800cbd6:	bf00      	nop
 800cbd8:	e006      	b.n	800cbe8 <USBH_Process+0x4b8>
      break;
 800cbda:	bf00      	nop
 800cbdc:	e004      	b.n	800cbe8 <USBH_Process+0x4b8>
      break;
 800cbde:	bf00      	nop
 800cbe0:	e002      	b.n	800cbe8 <USBH_Process+0x4b8>
    break;
 800cbe2:	bf00      	nop
 800cbe4:	e000      	b.n	800cbe8 <USBH_Process+0x4b8>
      break;
 800cbe6:	bf00      	nop
  }
  return USBH_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop

0800cbf4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	af04      	add	r7, sp, #16
 800cbfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cc00:	2301      	movs	r3, #1
 800cc02:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	785b      	ldrb	r3, [r3, #1]
 800cc08:	2b07      	cmp	r3, #7
 800cc0a:	f200 8208 	bhi.w	800d01e <USBH_HandleEnum+0x42a>
 800cc0e:	a201      	add	r2, pc, #4	; (adr r2, 800cc14 <USBH_HandleEnum+0x20>)
 800cc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc14:	0800cc35 	.word	0x0800cc35
 800cc18:	0800ccf3 	.word	0x0800ccf3
 800cc1c:	0800cd5d 	.word	0x0800cd5d
 800cc20:	0800cdeb 	.word	0x0800cdeb
 800cc24:	0800ce55 	.word	0x0800ce55
 800cc28:	0800cec5 	.word	0x0800cec5
 800cc2c:	0800cf61 	.word	0x0800cf61
 800cc30:	0800cfdf 	.word	0x0800cfdf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cc34:	2108      	movs	r1, #8
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 faea 	bl	800d210 <USBH_Get_DevDesc>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d130      	bne.n	800cca8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	7919      	ldrb	r1, [r3, #4]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cc6a:	b292      	uxth	r2, r2
 800cc6c:	9202      	str	r2, [sp, #8]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	9201      	str	r2, [sp, #4]
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	4603      	mov	r3, r0
 800cc76:	2280      	movs	r2, #128	; 0x80
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f001 f903 	bl	800de84 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	7959      	ldrb	r1, [r3, #5]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc92:	b292      	uxth	r2, r2
 800cc94:	9202      	str	r2, [sp, #8]
 800cc96:	2200      	movs	r2, #0
 800cc98:	9201      	str	r2, [sp, #4]
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2200      	movs	r2, #0
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f001 f8ef 	bl	800de84 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cca6:	e1bc      	b.n	800d022 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cca8:	7bbb      	ldrb	r3, [r7, #14]
 800ccaa:	2b03      	cmp	r3, #3
 800ccac:	f040 81b9 	bne.w	800d022 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d903      	bls.n	800ccd2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	220d      	movs	r2, #13
 800ccce:	701a      	strb	r2, [r3, #0]
      break;
 800ccd0:	e1a7      	b.n	800d022 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	795b      	ldrb	r3, [r3, #5]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f001 f923 	bl	800df24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	791b      	ldrb	r3, [r3, #4]
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f001 f91d 	bl	800df24 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	701a      	strb	r2, [r3, #0]
      break;
 800ccf0:	e197      	b.n	800d022 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ccf2:	2112      	movs	r1, #18
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fa8b 	bl	800d210 <USBH_Get_DevDesc>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ccfe:	7bbb      	ldrb	r3, [r7, #14]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d103      	bne.n	800cd0c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2202      	movs	r2, #2
 800cd08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd0a:	e18c      	b.n	800d026 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	f040 8189 	bne.w	800d026 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	d903      	bls.n	800cd36 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	220d      	movs	r2, #13
 800cd32:	701a      	strb	r2, [r3, #0]
      break;
 800cd34:	e177      	b.n	800d026 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	795b      	ldrb	r3, [r3, #5]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f001 f8f1 	bl	800df24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	791b      	ldrb	r3, [r3, #4]
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f001 f8eb 	bl	800df24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	701a      	strb	r2, [r3, #0]
      break;
 800cd5a:	e164      	b.n	800d026 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cd5c:	2101      	movs	r1, #1
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fb02 	bl	800d368 <USBH_SetAddress>
 800cd64:	4603      	mov	r3, r0
 800cd66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d132      	bne.n	800cdd4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cd6e:	2002      	movs	r0, #2
 800cd70:	f003 fe2d 	bl	80109ce <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2201      	movs	r2, #1
 800cd78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2203      	movs	r2, #3
 800cd80:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	7919      	ldrb	r1, [r3, #4]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cd96:	b292      	uxth	r2, r2
 800cd98:	9202      	str	r2, [sp, #8]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	9201      	str	r2, [sp, #4]
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	4603      	mov	r3, r0
 800cda2:	2280      	movs	r2, #128	; 0x80
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f001 f86d 	bl	800de84 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7959      	ldrb	r1, [r3, #5]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cdbe:	b292      	uxth	r2, r2
 800cdc0:	9202      	str	r2, [sp, #8]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	9201      	str	r2, [sp, #4]
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2200      	movs	r2, #0
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f001 f859 	bl	800de84 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cdd2:	e12a      	b.n	800d02a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdd4:	7bbb      	ldrb	r3, [r7, #14]
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	f040 8127 	bne.w	800d02a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	220d      	movs	r2, #13
 800cde0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	705a      	strb	r2, [r3, #1]
      break;
 800cde8:	e11f      	b.n	800d02a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cdea:	2109      	movs	r1, #9
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 fa37 	bl	800d260 <USBH_Get_CfgDesc>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d103      	bne.n	800ce04 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2204      	movs	r2, #4
 800ce00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce02:	e114      	b.n	800d02e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce04:	7bbb      	ldrb	r3, [r7, #14]
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	f040 8111 	bne.w	800d02e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce12:	3301      	adds	r3, #1
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce22:	2b03      	cmp	r3, #3
 800ce24:	d903      	bls.n	800ce2e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	220d      	movs	r2, #13
 800ce2a:	701a      	strb	r2, [r3, #0]
      break;
 800ce2c:	e0ff      	b.n	800d02e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	795b      	ldrb	r3, [r3, #5]
 800ce32:	4619      	mov	r1, r3
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f001 f875 	bl	800df24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	791b      	ldrb	r3, [r3, #4]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f001 f86f 	bl	800df24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	701a      	strb	r2, [r3, #0]
      break;
 800ce52:	e0ec      	b.n	800d02e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f9ff 	bl	800d260 <USBH_Get_CfgDesc>
 800ce62:	4603      	mov	r3, r0
 800ce64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce66:	7bbb      	ldrb	r3, [r7, #14]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d103      	bne.n	800ce74 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2205      	movs	r2, #5
 800ce70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce72:	e0de      	b.n	800d032 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce74:	7bbb      	ldrb	r3, [r7, #14]
 800ce76:	2b03      	cmp	r3, #3
 800ce78:	f040 80db 	bne.w	800d032 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce82:	3301      	adds	r3, #1
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d903      	bls.n	800ce9e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	220d      	movs	r2, #13
 800ce9a:	701a      	strb	r2, [r3, #0]
      break;
 800ce9c:	e0c9      	b.n	800d032 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	795b      	ldrb	r3, [r3, #5]
 800cea2:	4619      	mov	r1, r3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f001 f83d 	bl	800df24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	791b      	ldrb	r3, [r3, #4]
 800ceae:	4619      	mov	r1, r3
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f001 f837 	bl	800df24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	701a      	strb	r2, [r3, #0]
      break;
 800cec2:	e0b6      	b.n	800d032 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d036      	beq.n	800cf3c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ceda:	23ff      	movs	r3, #255	; 0xff
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f9e3 	bl	800d2a8 <USBH_Get_StringDesc>
 800cee2:	4603      	mov	r3, r0
 800cee4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cee6:	7bbb      	ldrb	r3, [r7, #14]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d111      	bne.n	800cf10 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2206      	movs	r2, #6
 800cef0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2205      	movs	r2, #5
 800cef6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cf06:	2200      	movs	r2, #0
 800cf08:	4619      	mov	r1, r3
 800cf0a:	f001 f907 	bl	800e11c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cf0e:	e092      	b.n	800d036 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	f040 808f 	bne.w	800d036 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2206      	movs	r2, #6
 800cf1c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2205      	movs	r2, #5
 800cf22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cf32:	2200      	movs	r2, #0
 800cf34:	4619      	mov	r1, r3
 800cf36:	f001 f8f1 	bl	800e11c <osMessagePut>
      break;
 800cf3a:	e07c      	b.n	800d036 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2206      	movs	r2, #6
 800cf40:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2205      	movs	r2, #5
 800cf46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cf56:	2200      	movs	r2, #0
 800cf58:	4619      	mov	r1, r3
 800cf5a:	f001 f8df 	bl	800e11c <osMessagePut>
      break;
 800cf5e:	e06a      	b.n	800d036 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d027      	beq.n	800cfba <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cf76:	23ff      	movs	r3, #255	; 0xff
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 f995 	bl	800d2a8 <USBH_Get_StringDesc>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cf82:	7bbb      	ldrb	r3, [r7, #14]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d103      	bne.n	800cf90 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2207      	movs	r2, #7
 800cf8c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cf8e:	e054      	b.n	800d03a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf90:	7bbb      	ldrb	r3, [r7, #14]
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d151      	bne.n	800d03a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2207      	movs	r2, #7
 800cf9a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2205      	movs	r2, #5
 800cfa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	f001 f8b2 	bl	800e11c <osMessagePut>
      break;
 800cfb8:	e03f      	b.n	800d03a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2207      	movs	r2, #7
 800cfbe:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2205      	movs	r2, #5
 800cfc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	f001 f8a0 	bl	800e11c <osMessagePut>
      break;
 800cfdc:	e02d      	b.n	800d03a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d017      	beq.n	800d018 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cff4:	23ff      	movs	r3, #255	; 0xff
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f956 	bl	800d2a8 <USBH_Get_StringDesc>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d102      	bne.n	800d00c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d006:	2300      	movs	r3, #0
 800d008:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d00a:	e018      	b.n	800d03e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d00c:	7bbb      	ldrb	r3, [r7, #14]
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d115      	bne.n	800d03e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	73fb      	strb	r3, [r7, #15]
      break;
 800d016:	e012      	b.n	800d03e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d018:	2300      	movs	r3, #0
 800d01a:	73fb      	strb	r3, [r7, #15]
      break;
 800d01c:	e00f      	b.n	800d03e <USBH_HandleEnum+0x44a>

    default:
      break;
 800d01e:	bf00      	nop
 800d020:	e00e      	b.n	800d040 <USBH_HandleEnum+0x44c>
      break;
 800d022:	bf00      	nop
 800d024:	e00c      	b.n	800d040 <USBH_HandleEnum+0x44c>
      break;
 800d026:	bf00      	nop
 800d028:	e00a      	b.n	800d040 <USBH_HandleEnum+0x44c>
      break;
 800d02a:	bf00      	nop
 800d02c:	e008      	b.n	800d040 <USBH_HandleEnum+0x44c>
      break;
 800d02e:	bf00      	nop
 800d030:	e006      	b.n	800d040 <USBH_HandleEnum+0x44c>
      break;
 800d032:	bf00      	nop
 800d034:	e004      	b.n	800d040 <USBH_HandleEnum+0x44c>
      break;
 800d036:	bf00      	nop
 800d038:	e002      	b.n	800d040 <USBH_HandleEnum+0x44c>
      break;
 800d03a:	bf00      	nop
 800d03c:	e000      	b.n	800d040 <USBH_HandleEnum+0x44c>
      break;
 800d03e:	bf00      	nop
  }
  return Status;
 800d040:	7bfb      	ldrb	r3, [r7, #15]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop

0800d04c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	683a      	ldr	r2, [r7, #0]
 800d05a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d05e:	bf00      	nop
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b082      	sub	sp, #8
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d078:	1c5a      	adds	r2, r3, #1
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f804 	bl	800d08e <USBH_HandleSof>
}
 800d086:	bf00      	nop
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b082      	sub	sp, #8
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b0b      	cmp	r3, #11
 800d09e:	d10a      	bne.n	800d0b6 <USBH_HandleSof+0x28>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d005      	beq.n	800d0b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	4798      	blx	r3
  }
}
 800d0b6:	bf00      	nop
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	f001 f819 	bl	800e11c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d0ea:	bf00      	nop
}
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b083      	sub	sp, #12
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d102:	bf00      	nop
}
 800d104:	370c      	adds	r7, #12
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b082      	sub	sp, #8
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d142:	2200      	movs	r2, #0
 800d144:	4619      	mov	r1, r3
 800d146:	f000 ffe9 	bl	800e11c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f003 fae0 	bl	801073a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	791b      	ldrb	r3, [r3, #4]
 800d17e:	4619      	mov	r1, r3
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 fecf 	bl	800df24 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	795b      	ldrb	r3, [r3, #5]
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fec9 	bl	800df24 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2201      	movs	r2, #1
 800d196:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	f000 ffb7 	bl	800e11c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800d1c6:	f107 030c 	add.w	r3, r7, #12
 800d1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f000 ffe4 	bl	800e19c <osMessageGet>
    if (event.status == osEventMessage)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b10      	cmp	r3, #16
 800d1d8:	d1f2      	bne.n	800d1c0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff faa8 	bl	800c730 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d1e0:	e7ee      	b.n	800d1c0 <USBH_Process_OS+0x8>

0800d1e2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b082      	sub	sp, #8
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d1fe:	2200      	movs	r2, #0
 800d200:	4619      	mov	r1, r3
 800d202:	f000 ff8b 	bl	800e11c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af02      	add	r7, sp, #8
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d222:	78fb      	ldrb	r3, [r7, #3]
 800d224:	b29b      	uxth	r3, r3
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	4613      	mov	r3, r2
 800d22a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d22e:	2100      	movs	r1, #0
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 f864 	bl	800d2fe <USBH_GetDescriptor>
 800d236:	4603      	mov	r3, r0
 800d238:	73fb      	strb	r3, [r7, #15]
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10a      	bne.n	800d256 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d24c:	78fa      	ldrb	r2, [r7, #3]
 800d24e:	b292      	uxth	r2, r2
 800d250:	4619      	mov	r1, r3
 800d252:	f000 f918 	bl	800d486 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d256:	7bfb      	ldrb	r3, [r7, #15]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af02      	add	r7, sp, #8
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	331c      	adds	r3, #28
 800d270:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d272:	887b      	ldrh	r3, [r7, #2]
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d27c:	2100      	movs	r1, #0
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 f83d 	bl	800d2fe <USBH_GetDescriptor>
 800d284:	4603      	mov	r3, r0
 800d286:	72fb      	strb	r3, [r7, #11]
 800d288:	7afb      	ldrb	r3, [r7, #11]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d107      	bne.n	800d29e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d294:	887a      	ldrh	r2, [r7, #2]
 800d296:	68f9      	ldr	r1, [r7, #12]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 f964 	bl	800d566 <USBH_ParseCfgDesc>
  }

  return status;
 800d29e:	7afb      	ldrb	r3, [r7, #11]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af02      	add	r7, sp, #8
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	607a      	str	r2, [r7, #4]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	72fb      	strb	r3, [r7, #11]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d2bc:	7afb      	ldrb	r3, [r7, #11]
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d2c4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d2cc:	893b      	ldrh	r3, [r7, #8]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f000 f812 	bl	800d2fe <USBH_GetDescriptor>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	75fb      	strb	r3, [r7, #23]
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d107      	bne.n	800d2f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d2ea:	893a      	ldrh	r2, [r7, #8]
 800d2ec:	6879      	ldr	r1, [r7, #4]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 fa37 	bl	800d762 <USBH_ParseStringDesc>
  }

  return status;
 800d2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b084      	sub	sp, #16
 800d302:	af00      	add	r7, sp, #0
 800d304:	60f8      	str	r0, [r7, #12]
 800d306:	607b      	str	r3, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	72fb      	strb	r3, [r7, #11]
 800d30c:	4613      	mov	r3, r2
 800d30e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	789b      	ldrb	r3, [r3, #2]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d11c      	bne.n	800d352 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d318:	7afb      	ldrb	r3, [r7, #11]
 800d31a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2206      	movs	r2, #6
 800d328:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	893a      	ldrh	r2, [r7, #8]
 800d32e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d330:	893b      	ldrh	r3, [r7, #8]
 800d332:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d33a:	d104      	bne.n	800d346 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f240 4209 	movw	r2, #1033	; 0x409
 800d342:	829a      	strh	r2, [r3, #20]
 800d344:	e002      	b.n	800d34c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	8b3a      	ldrh	r2, [r7, #24]
 800d350:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d352:	8b3b      	ldrh	r3, [r7, #24]
 800d354:	461a      	mov	r2, r3
 800d356:	6879      	ldr	r1, [r7, #4]
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f000 fa50 	bl	800d7fe <USBH_CtlReq>
 800d35e:	4603      	mov	r3, r0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	460b      	mov	r3, r1
 800d372:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	789b      	ldrb	r3, [r3, #2]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d10f      	bne.n	800d39c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2205      	movs	r2, #5
 800d386:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d388:	78fb      	ldrb	r3, [r7, #3]
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d39c:	2200      	movs	r2, #0
 800d39e:	2100      	movs	r1, #0
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fa2c 	bl	800d7fe <USBH_CtlReq>
 800d3a6:	4603      	mov	r3, r0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	789b      	ldrb	r3, [r3, #2]
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d10e      	bne.n	800d3e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2209      	movs	r2, #9
 800d3ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	887a      	ldrh	r2, [r7, #2]
 800d3d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fa09 	bl	800d7fe <USBH_CtlReq>
 800d3ec:	4603      	mov	r3, r0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	460b      	mov	r3, r1
 800d400:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	789b      	ldrb	r3, [r3, #2]
 800d406:	2b01      	cmp	r3, #1
 800d408:	d10f      	bne.n	800d42a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2203      	movs	r2, #3
 800d414:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d416:	78fb      	ldrb	r3, [r7, #3]
 800d418:	b29a      	uxth	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d42a:	2200      	movs	r2, #0
 800d42c:	2100      	movs	r1, #0
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 f9e5 	bl	800d7fe <USBH_CtlReq>
 800d434:	4603      	mov	r3, r0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b082      	sub	sp, #8
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
 800d446:	460b      	mov	r3, r1
 800d448:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	789b      	ldrb	r3, [r3, #2]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d10f      	bne.n	800d472 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2202      	movs	r2, #2
 800d456:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d464:	78fb      	ldrb	r3, [r7, #3]
 800d466:	b29a      	uxth	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d472:	2200      	movs	r2, #0
 800d474:	2100      	movs	r1, #0
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f9c1 	bl	800d7fe <USBH_CtlReq>
 800d47c:	4603      	mov	r3, r0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	4613      	mov	r3, r2
 800d492:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	781a      	ldrb	r2, [r3, #0]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	785a      	ldrb	r2, [r3, #1]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	3302      	adds	r3, #2
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	3303      	adds	r3, #3
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	021b      	lsls	r3, r3, #8
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	791a      	ldrb	r2, [r3, #4]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	795a      	ldrb	r2, [r3, #5]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	799a      	ldrb	r2, [r3, #6]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	79da      	ldrb	r2, [r3, #7]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d4e0:	88fb      	ldrh	r3, [r7, #6]
 800d4e2:	2b08      	cmp	r3, #8
 800d4e4:	d939      	bls.n	800d55a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	3308      	adds	r3, #8
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	3309      	adds	r3, #9
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	021b      	lsls	r3, r3, #8
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	330a      	adds	r3, #10
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	b29a      	uxth	r2, r3
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	330b      	adds	r3, #11
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	b29b      	uxth	r3, r3
 800d512:	021b      	lsls	r3, r3, #8
 800d514:	b29b      	uxth	r3, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	b29a      	uxth	r2, r3
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	330c      	adds	r3, #12
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	b29a      	uxth	r2, r3
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	330d      	adds	r3, #13
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	021b      	lsls	r3, r3, #8
 800d530:	b29b      	uxth	r3, r3
 800d532:	4313      	orrs	r3, r2
 800d534:	b29a      	uxth	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	7b9a      	ldrb	r2, [r3, #14]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	7bda      	ldrb	r2, [r3, #15]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	7c1a      	ldrb	r2, [r3, #16]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	7c5a      	ldrb	r2, [r3, #17]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	745a      	strb	r2, [r3, #17]
  }
}
 800d55a:	bf00      	nop
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b08a      	sub	sp, #40	; 0x28
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	4613      	mov	r3, r2
 800d572:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d578:	2300      	movs	r3, #0
 800d57a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	781a      	ldrb	r2, [r3, #0]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	785a      	ldrb	r2, [r3, #1]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3302      	adds	r3, #2
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	3303      	adds	r3, #3
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	021b      	lsls	r3, r3, #8
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	791a      	ldrb	r2, [r3, #4]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	795a      	ldrb	r2, [r3, #5]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	799a      	ldrb	r2, [r3, #6]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	79da      	ldrb	r2, [r3, #7]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	7a1a      	ldrb	r2, [r3, #8]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d5dc:	88fb      	ldrh	r3, [r7, #6]
 800d5de:	2b09      	cmp	r3, #9
 800d5e0:	d95f      	bls.n	800d6a2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d5e2:	2309      	movs	r3, #9
 800d5e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d5ea:	e051      	b.n	800d690 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d5ec:	f107 0316 	add.w	r3, r7, #22
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5f4:	f000 f8e8 	bl	800d7c8 <USBH_GetNextDesc>
 800d5f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	785b      	ldrb	r3, [r3, #1]
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d146      	bne.n	800d690 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d606:	221a      	movs	r2, #26
 800d608:	fb02 f303 	mul.w	r3, r2, r3
 800d60c:	3308      	adds	r3, #8
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	4413      	add	r3, r2
 800d612:	3302      	adds	r3, #2
 800d614:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d618:	69f8      	ldr	r0, [r7, #28]
 800d61a:	f000 f846 	bl	800d6aa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d61e:	2300      	movs	r3, #0
 800d620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d624:	2300      	movs	r3, #0
 800d626:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d628:	e022      	b.n	800d670 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d62a:	f107 0316 	add.w	r3, r7, #22
 800d62e:	4619      	mov	r1, r3
 800d630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d632:	f000 f8c9 	bl	800d7c8 <USBH_GetNextDesc>
 800d636:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b05      	cmp	r3, #5
 800d63e:	d117      	bne.n	800d670 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d640:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d644:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d648:	3201      	adds	r2, #1
 800d64a:	00d2      	lsls	r2, r2, #3
 800d64c:	211a      	movs	r1, #26
 800d64e:	fb01 f303 	mul.w	r3, r1, r3
 800d652:	4413      	add	r3, r2
 800d654:	3308      	adds	r3, #8
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	4413      	add	r3, r2
 800d65a:	3304      	adds	r3, #4
 800d65c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d65e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d660:	69b8      	ldr	r0, [r7, #24]
 800d662:	f000 f851 	bl	800d708 <USBH_ParseEPDesc>
            ep_ix++;
 800d666:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d66a:	3301      	adds	r3, #1
 800d66c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	791b      	ldrb	r3, [r3, #4]
 800d674:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d678:	429a      	cmp	r2, r3
 800d67a:	d204      	bcs.n	800d686 <USBH_ParseCfgDesc+0x120>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	885a      	ldrh	r2, [r3, #2]
 800d680:	8afb      	ldrh	r3, [r7, #22]
 800d682:	429a      	cmp	r2, r3
 800d684:	d8d1      	bhi.n	800d62a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d686:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d68a:	3301      	adds	r3, #1
 800d68c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d694:	2b01      	cmp	r3, #1
 800d696:	d804      	bhi.n	800d6a2 <USBH_ParseCfgDesc+0x13c>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	885a      	ldrh	r2, [r3, #2]
 800d69c:	8afb      	ldrh	r3, [r7, #22]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d8a4      	bhi.n	800d5ec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d6a2:	bf00      	nop
 800d6a4:	3728      	adds	r7, #40	; 0x28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d6aa:	b480      	push	{r7}
 800d6ac:	b083      	sub	sp, #12
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
 800d6b2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	781a      	ldrb	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	785a      	ldrb	r2, [r3, #1]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	789a      	ldrb	r2, [r3, #2]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	78da      	ldrb	r2, [r3, #3]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	791a      	ldrb	r2, [r3, #4]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	795a      	ldrb	r2, [r3, #5]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	799a      	ldrb	r2, [r3, #6]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	79da      	ldrb	r2, [r3, #7]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	7a1a      	ldrb	r2, [r3, #8]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	721a      	strb	r2, [r3, #8]
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	781a      	ldrb	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	785a      	ldrb	r2, [r3, #1]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	789a      	ldrb	r2, [r3, #2]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	78da      	ldrb	r2, [r3, #3]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	3304      	adds	r3, #4
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	b29a      	uxth	r2, r3
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	3305      	adds	r3, #5
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	b29b      	uxth	r3, r3
 800d742:	021b      	lsls	r3, r3, #8
 800d744:	b29b      	uxth	r3, r3
 800d746:	4313      	orrs	r3, r2
 800d748:	b29a      	uxth	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	799a      	ldrb	r2, [r3, #6]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	719a      	strb	r2, [r3, #6]
}
 800d756:	bf00      	nop
 800d758:	370c      	adds	r7, #12
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d762:	b480      	push	{r7}
 800d764:	b087      	sub	sp, #28
 800d766:	af00      	add	r7, sp, #0
 800d768:	60f8      	str	r0, [r7, #12]
 800d76a:	60b9      	str	r1, [r7, #8]
 800d76c:	4613      	mov	r3, r2
 800d76e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	3301      	adds	r3, #1
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	2b03      	cmp	r3, #3
 800d778:	d120      	bne.n	800d7bc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	1e9a      	subs	r2, r3, #2
 800d780:	88fb      	ldrh	r3, [r7, #6]
 800d782:	4293      	cmp	r3, r2
 800d784:	bf28      	it	cs
 800d786:	4613      	movcs	r3, r2
 800d788:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3302      	adds	r3, #2
 800d78e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d790:	2300      	movs	r3, #0
 800d792:	82fb      	strh	r3, [r7, #22]
 800d794:	e00b      	b.n	800d7ae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d796:	8afb      	ldrh	r3, [r7, #22]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	4413      	add	r3, r2
 800d79c:	781a      	ldrb	r2, [r3, #0]
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d7a8:	8afb      	ldrh	r3, [r7, #22]
 800d7aa:	3302      	adds	r3, #2
 800d7ac:	82fb      	strh	r3, [r7, #22]
 800d7ae:	8afa      	ldrh	r2, [r7, #22]
 800d7b0:	8abb      	ldrh	r3, [r7, #20]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d3ef      	bcc.n	800d796 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	701a      	strb	r2, [r3, #0]
  }
}
 800d7bc:	bf00      	nop
 800d7be:	371c      	adds	r7, #28
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	881a      	ldrh	r2, [r3, #0]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	4413      	add	r3, r2
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3714      	adds	r7, #20
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b086      	sub	sp, #24
 800d802:	af00      	add	r7, sp, #0
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	60b9      	str	r1, [r7, #8]
 800d808:	4613      	mov	r3, r2
 800d80a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d80c:	2301      	movs	r3, #1
 800d80e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	789b      	ldrb	r3, [r3, #2]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d002      	beq.n	800d81e <USBH_CtlReq+0x20>
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d01d      	beq.n	800d858 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d81c:	e043      	b.n	800d8a6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	88fa      	ldrh	r2, [r7, #6]
 800d828:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2201      	movs	r2, #1
 800d82e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2202      	movs	r2, #2
 800d834:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d836:	2301      	movs	r3, #1
 800d838:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2203      	movs	r2, #3
 800d83e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d84e:	2200      	movs	r2, #0
 800d850:	4619      	mov	r1, r3
 800d852:	f000 fc63 	bl	800e11c <osMessagePut>
      break;
 800d856:	e026      	b.n	800d8a6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f000 f829 	bl	800d8b0 <USBH_HandleControl>
 800d85e:	4603      	mov	r3, r0
 800d860:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d862:	7dfb      	ldrb	r3, [r7, #23]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d002      	beq.n	800d86e <USBH_CtlReq+0x70>
 800d868:	7dfb      	ldrb	r3, [r7, #23]
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d106      	bne.n	800d87c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2201      	movs	r2, #1
 800d872:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	761a      	strb	r2, [r3, #24]
 800d87a:	e005      	b.n	800d888 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d87c:	7dfb      	ldrb	r3, [r7, #23]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d102      	bne.n	800d888 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2201      	movs	r2, #1
 800d886:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2203      	movs	r2, #3
 800d88c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d89c:	2200      	movs	r2, #0
 800d89e:	4619      	mov	r1, r3
 800d8a0:	f000 fc3c 	bl	800e11c <osMessagePut>
      break;
 800d8a4:	bf00      	nop
  }
  return status;
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af02      	add	r7, sp, #8
 800d8b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7e1b      	ldrb	r3, [r3, #24]
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	2b0a      	cmp	r3, #10
 800d8c8:	f200 822b 	bhi.w	800dd22 <USBH_HandleControl+0x472>
 800d8cc:	a201      	add	r2, pc, #4	; (adr r2, 800d8d4 <USBH_HandleControl+0x24>)
 800d8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d2:	bf00      	nop
 800d8d4:	0800d901 	.word	0x0800d901
 800d8d8:	0800d91b 	.word	0x0800d91b
 800d8dc:	0800d9bd 	.word	0x0800d9bd
 800d8e0:	0800d9e3 	.word	0x0800d9e3
 800d8e4:	0800da6f 	.word	0x0800da6f
 800d8e8:	0800da9b 	.word	0x0800da9b
 800d8ec:	0800db5d 	.word	0x0800db5d
 800d8f0:	0800db7f 	.word	0x0800db7f
 800d8f4:	0800dc11 	.word	0x0800dc11
 800d8f8:	0800dc39 	.word	0x0800dc39
 800d8fc:	0800dccb 	.word	0x0800dccb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f103 0110 	add.w	r1, r3, #16
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	795b      	ldrb	r3, [r3, #5]
 800d90a:	461a      	mov	r2, r3
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fa19 	bl	800dd44 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2202      	movs	r2, #2
 800d916:	761a      	strb	r2, [r3, #24]
      break;
 800d918:	e20e      	b.n	800dd38 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	795b      	ldrb	r3, [r3, #5]
 800d91e:	4619      	mov	r1, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f002 fff7 	bl	8010914 <USBH_LL_GetURBState>
 800d926:	4603      	mov	r3, r0
 800d928:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d92a:	7bbb      	ldrb	r3, [r7, #14]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d12c      	bne.n	800d98a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	7c1b      	ldrb	r3, [r3, #16]
 800d934:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d938:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8adb      	ldrh	r3, [r3, #22]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00a      	beq.n	800d958 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d942:	7b7b      	ldrb	r3, [r7, #13]
 800d944:	2b80      	cmp	r3, #128	; 0x80
 800d946:	d103      	bne.n	800d950 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2203      	movs	r2, #3
 800d94c:	761a      	strb	r2, [r3, #24]
 800d94e:	e00d      	b.n	800d96c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2205      	movs	r2, #5
 800d954:	761a      	strb	r2, [r3, #24]
 800d956:	e009      	b.n	800d96c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d958:	7b7b      	ldrb	r3, [r7, #13]
 800d95a:	2b80      	cmp	r3, #128	; 0x80
 800d95c:	d103      	bne.n	800d966 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2209      	movs	r2, #9
 800d962:	761a      	strb	r2, [r3, #24]
 800d964:	e002      	b.n	800d96c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2207      	movs	r2, #7
 800d96a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2203      	movs	r2, #3
 800d970:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d980:	2200      	movs	r2, #0
 800d982:	4619      	mov	r1, r3
 800d984:	f000 fbca 	bl	800e11c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d988:	e1cd      	b.n	800dd26 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
 800d98c:	2b04      	cmp	r3, #4
 800d98e:	d003      	beq.n	800d998 <USBH_HandleControl+0xe8>
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	2b02      	cmp	r3, #2
 800d994:	f040 81c7 	bne.w	800dd26 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	220b      	movs	r2, #11
 800d99c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	f000 fbb1 	bl	800e11c <osMessagePut>
      break;
 800d9ba:	e1b4      	b.n	800dd26 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6899      	ldr	r1, [r3, #8]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	899a      	ldrh	r2, [r3, #12]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	791b      	ldrb	r3, [r3, #4]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f9f4 	bl	800ddc2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2204      	movs	r2, #4
 800d9de:	761a      	strb	r2, [r3, #24]
      break;
 800d9e0:	e1aa      	b.n	800dd38 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	791b      	ldrb	r3, [r3, #4]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f002 ff93 	bl	8010914 <USBH_LL_GetURBState>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d110      	bne.n	800da1a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2209      	movs	r2, #9
 800d9fc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2203      	movs	r2, #3
 800da02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800da12:	2200      	movs	r2, #0
 800da14:	4619      	mov	r1, r3
 800da16:	f000 fb81 	bl	800e11c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800da1a:	7bbb      	ldrb	r3, [r7, #14]
 800da1c:	2b05      	cmp	r3, #5
 800da1e:	d110      	bne.n	800da42 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800da20:	2303      	movs	r3, #3
 800da22:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2203      	movs	r2, #3
 800da28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800da38:	2200      	movs	r2, #0
 800da3a:	4619      	mov	r1, r3
 800da3c:	f000 fb6e 	bl	800e11c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da40:	e173      	b.n	800dd2a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800da42:	7bbb      	ldrb	r3, [r7, #14]
 800da44:	2b04      	cmp	r3, #4
 800da46:	f040 8170 	bne.w	800dd2a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	220b      	movs	r2, #11
 800da4e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2203      	movs	r2, #3
 800da54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800da64:	2200      	movs	r2, #0
 800da66:	4619      	mov	r1, r3
 800da68:	f000 fb58 	bl	800e11c <osMessagePut>
      break;
 800da6c:	e15d      	b.n	800dd2a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6899      	ldr	r1, [r3, #8]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	899a      	ldrh	r2, [r3, #12]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	7958      	ldrb	r0, [r3, #5]
 800da7a:	2301      	movs	r3, #1
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4603      	mov	r3, r0
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 f979 	bl	800dd78 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2206      	movs	r2, #6
 800da96:	761a      	strb	r2, [r3, #24]
      break;
 800da98:	e14e      	b.n	800dd38 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	795b      	ldrb	r3, [r3, #5]
 800da9e:	4619      	mov	r1, r3
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f002 ff37 	bl	8010914 <USBH_LL_GetURBState>
 800daa6:	4603      	mov	r3, r0
 800daa8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800daaa:	7bbb      	ldrb	r3, [r7, #14]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d111      	bne.n	800dad4 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2207      	movs	r2, #7
 800dab4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2203      	movs	r2, #3
 800daba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800daca:	2200      	movs	r2, #0
 800dacc:	4619      	mov	r1, r3
 800dace:	f000 fb25 	bl	800e11c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dad2:	e12c      	b.n	800dd2e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800dad4:	7bbb      	ldrb	r3, [r7, #14]
 800dad6:	2b05      	cmp	r3, #5
 800dad8:	d113      	bne.n	800db02 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	220c      	movs	r2, #12
 800dade:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dae0:	2303      	movs	r3, #3
 800dae2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2203      	movs	r2, #3
 800dae8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800daf8:	2200      	movs	r2, #0
 800dafa:	4619      	mov	r1, r3
 800dafc:	f000 fb0e 	bl	800e11c <osMessagePut>
      break;
 800db00:	e115      	b.n	800dd2e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800db02:	7bbb      	ldrb	r3, [r7, #14]
 800db04:	2b02      	cmp	r3, #2
 800db06:	d111      	bne.n	800db2c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2205      	movs	r2, #5
 800db0c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2203      	movs	r2, #3
 800db12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800db22:	2200      	movs	r2, #0
 800db24:	4619      	mov	r1, r3
 800db26:	f000 faf9 	bl	800e11c <osMessagePut>
      break;
 800db2a:	e100      	b.n	800dd2e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800db2c:	7bbb      	ldrb	r3, [r7, #14]
 800db2e:	2b04      	cmp	r3, #4
 800db30:	f040 80fd 	bne.w	800dd2e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	220b      	movs	r2, #11
 800db38:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800db3a:	2302      	movs	r3, #2
 800db3c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2203      	movs	r2, #3
 800db42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800db52:	2200      	movs	r2, #0
 800db54:	4619      	mov	r1, r3
 800db56:	f000 fae1 	bl	800e11c <osMessagePut>
      break;
 800db5a:	e0e8      	b.n	800dd2e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	791b      	ldrb	r3, [r3, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	2100      	movs	r1, #0
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f92c 	bl	800ddc2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db70:	b29a      	uxth	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2208      	movs	r2, #8
 800db7a:	761a      	strb	r2, [r3, #24]

      break;
 800db7c:	e0dc      	b.n	800dd38 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	791b      	ldrb	r3, [r3, #4]
 800db82:	4619      	mov	r1, r3
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f002 fec5 	bl	8010914 <USBH_LL_GetURBState>
 800db8a:	4603      	mov	r3, r0
 800db8c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d113      	bne.n	800dbbc <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	220d      	movs	r2, #13
 800db98:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2203      	movs	r2, #3
 800dba2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	f000 fab1 	bl	800e11c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dbba:	e0ba      	b.n	800dd32 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800dbbc:	7bbb      	ldrb	r3, [r7, #14]
 800dbbe:	2b04      	cmp	r3, #4
 800dbc0:	d111      	bne.n	800dbe6 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	220b      	movs	r2, #11
 800dbc6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2203      	movs	r2, #3
 800dbcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dbdc:	2200      	movs	r2, #0
 800dbde:	4619      	mov	r1, r3
 800dbe0:	f000 fa9c 	bl	800e11c <osMessagePut>
      break;
 800dbe4:	e0a5      	b.n	800dd32 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800dbe6:	7bbb      	ldrb	r3, [r7, #14]
 800dbe8:	2b05      	cmp	r3, #5
 800dbea:	f040 80a2 	bne.w	800dd32 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2203      	movs	r2, #3
 800dbf6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc06:	2200      	movs	r2, #0
 800dc08:	4619      	mov	r1, r3
 800dc0a:	f000 fa87 	bl	800e11c <osMessagePut>
      break;
 800dc0e:	e090      	b.n	800dd32 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	795a      	ldrb	r2, [r3, #5]
 800dc14:	2301      	movs	r3, #1
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	4613      	mov	r3, r2
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f8aa 	bl	800dd78 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	220a      	movs	r2, #10
 800dc34:	761a      	strb	r2, [r3, #24]
      break;
 800dc36:	e07f      	b.n	800dd38 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	795b      	ldrb	r3, [r3, #5]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f002 fe68 	bl	8010914 <USBH_LL_GetURBState>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dc48:	7bbb      	ldrb	r3, [r7, #14]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d113      	bne.n	800dc76 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	220d      	movs	r2, #13
 800dc56:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2203      	movs	r2, #3
 800dc5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	4619      	mov	r1, r3
 800dc70:	f000 fa54 	bl	800e11c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dc74:	e05f      	b.n	800dd36 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dc76:	7bbb      	ldrb	r3, [r7, #14]
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d111      	bne.n	800dca0 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2209      	movs	r2, #9
 800dc80:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2203      	movs	r2, #3
 800dc86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dc96:	2200      	movs	r2, #0
 800dc98:	4619      	mov	r1, r3
 800dc9a:	f000 fa3f 	bl	800e11c <osMessagePut>
      break;
 800dc9e:	e04a      	b.n	800dd36 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
 800dca2:	2b04      	cmp	r3, #4
 800dca4:	d147      	bne.n	800dd36 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	220b      	movs	r2, #11
 800dcaa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2203      	movs	r2, #3
 800dcb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	f000 fa2a 	bl	800e11c <osMessagePut>
      break;
 800dcc8:	e035      	b.n	800dd36 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	7e5b      	ldrb	r3, [r3, #25]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	765a      	strb	r2, [r3, #25]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	7e5b      	ldrb	r3, [r3, #25]
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d806      	bhi.n	800dcec <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2201      	movs	r2, #1
 800dce2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dcea:	e025      	b.n	800dd38 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcf2:	2106      	movs	r1, #6
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	795b      	ldrb	r3, [r3, #5]
 800dd02:	4619      	mov	r1, r3
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f90d 	bl	800df24 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	791b      	ldrb	r3, [r3, #4]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 f907 	bl	800df24 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	73fb      	strb	r3, [r7, #15]
      break;
 800dd20:	e00a      	b.n	800dd38 <USBH_HandleControl+0x488>

    default:
      break;
 800dd22:	bf00      	nop
 800dd24:	e008      	b.n	800dd38 <USBH_HandleControl+0x488>
      break;
 800dd26:	bf00      	nop
 800dd28:	e006      	b.n	800dd38 <USBH_HandleControl+0x488>
      break;
 800dd2a:	bf00      	nop
 800dd2c:	e004      	b.n	800dd38 <USBH_HandleControl+0x488>
      break;
 800dd2e:	bf00      	nop
 800dd30:	e002      	b.n	800dd38 <USBH_HandleControl+0x488>
      break;
 800dd32:	bf00      	nop
 800dd34:	e000      	b.n	800dd38 <USBH_HandleControl+0x488>
      break;
 800dd36:	bf00      	nop
  }

  return status;
 800dd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop

0800dd44 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af04      	add	r7, sp, #16
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	4613      	mov	r3, r2
 800dd50:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd52:	79f9      	ldrb	r1, [r7, #7]
 800dd54:	2300      	movs	r3, #0
 800dd56:	9303      	str	r3, [sp, #12]
 800dd58:	2308      	movs	r3, #8
 800dd5a:	9302      	str	r3, [sp, #8]
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	9301      	str	r3, [sp, #4]
 800dd60:	2300      	movs	r3, #0
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	2300      	movs	r3, #0
 800dd66:	2200      	movs	r2, #0
 800dd68:	68f8      	ldr	r0, [r7, #12]
 800dd6a:	f002 fda2 	bl	80108b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af04      	add	r7, sp, #16
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	4611      	mov	r1, r2
 800dd84:	461a      	mov	r2, r3
 800dd86:	460b      	mov	r3, r1
 800dd88:	80fb      	strh	r3, [r7, #6]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd9c:	7979      	ldrb	r1, [r7, #5]
 800dd9e:	7e3b      	ldrb	r3, [r7, #24]
 800dda0:	9303      	str	r3, [sp, #12]
 800dda2:	88fb      	ldrh	r3, [r7, #6]
 800dda4:	9302      	str	r3, [sp, #8]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	9301      	str	r3, [sp, #4]
 800ddaa:	2301      	movs	r3, #1
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f002 fd7d 	bl	80108b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b088      	sub	sp, #32
 800ddc6:	af04      	add	r7, sp, #16
 800ddc8:	60f8      	str	r0, [r7, #12]
 800ddca:	60b9      	str	r1, [r7, #8]
 800ddcc:	4611      	mov	r1, r2
 800ddce:	461a      	mov	r2, r3
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	80fb      	strh	r3, [r7, #6]
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ddd8:	7979      	ldrb	r1, [r7, #5]
 800ddda:	2300      	movs	r3, #0
 800dddc:	9303      	str	r3, [sp, #12]
 800ddde:	88fb      	ldrh	r3, [r7, #6]
 800dde0:	9302      	str	r3, [sp, #8]
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	9301      	str	r3, [sp, #4]
 800dde6:	2301      	movs	r3, #1
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	2300      	movs	r3, #0
 800ddec:	2201      	movs	r2, #1
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f002 fd5f 	bl	80108b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ddf4:	2300      	movs	r3, #0

}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b088      	sub	sp, #32
 800de02:	af04      	add	r7, sp, #16
 800de04:	60f8      	str	r0, [r7, #12]
 800de06:	60b9      	str	r1, [r7, #8]
 800de08:	4611      	mov	r1, r2
 800de0a:	461a      	mov	r2, r3
 800de0c:	460b      	mov	r3, r1
 800de0e:	80fb      	strh	r3, [r7, #6]
 800de10:	4613      	mov	r3, r2
 800de12:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800de1e:	2300      	movs	r3, #0
 800de20:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800de22:	7979      	ldrb	r1, [r7, #5]
 800de24:	7e3b      	ldrb	r3, [r7, #24]
 800de26:	9303      	str	r3, [sp, #12]
 800de28:	88fb      	ldrh	r3, [r7, #6]
 800de2a:	9302      	str	r3, [sp, #8]
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	9301      	str	r3, [sp, #4]
 800de30:	2301      	movs	r3, #1
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	2302      	movs	r3, #2
 800de36:	2200      	movs	r2, #0
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f002 fd3a 	bl	80108b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b088      	sub	sp, #32
 800de4c:	af04      	add	r7, sp, #16
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	4611      	mov	r1, r2
 800de54:	461a      	mov	r2, r3
 800de56:	460b      	mov	r3, r1
 800de58:	80fb      	strh	r3, [r7, #6]
 800de5a:	4613      	mov	r3, r2
 800de5c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800de5e:	7979      	ldrb	r1, [r7, #5]
 800de60:	2300      	movs	r3, #0
 800de62:	9303      	str	r3, [sp, #12]
 800de64:	88fb      	ldrh	r3, [r7, #6]
 800de66:	9302      	str	r3, [sp, #8]
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	9301      	str	r3, [sp, #4]
 800de6c:	2301      	movs	r3, #1
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	2302      	movs	r3, #2
 800de72:	2201      	movs	r2, #1
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f002 fd1c 	bl	80108b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b086      	sub	sp, #24
 800de88:	af04      	add	r7, sp, #16
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	4608      	mov	r0, r1
 800de8e:	4611      	mov	r1, r2
 800de90:	461a      	mov	r2, r3
 800de92:	4603      	mov	r3, r0
 800de94:	70fb      	strb	r3, [r7, #3]
 800de96:	460b      	mov	r3, r1
 800de98:	70bb      	strb	r3, [r7, #2]
 800de9a:	4613      	mov	r3, r2
 800de9c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800de9e:	7878      	ldrb	r0, [r7, #1]
 800dea0:	78ba      	ldrb	r2, [r7, #2]
 800dea2:	78f9      	ldrb	r1, [r7, #3]
 800dea4:	8b3b      	ldrh	r3, [r7, #24]
 800dea6:	9302      	str	r3, [sp, #8]
 800dea8:	7d3b      	ldrb	r3, [r7, #20]
 800deaa:	9301      	str	r3, [sp, #4]
 800deac:	7c3b      	ldrb	r3, [r7, #16]
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	4603      	mov	r3, r0
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f002 fcaf 	bl	8010816 <USBH_LL_OpenPipe>

  return USBH_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b082      	sub	sp, #8
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	460b      	mov	r3, r1
 800decc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800dece:	78fb      	ldrb	r3, [r7, #3]
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f002 fcce 	bl	8010874 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b084      	sub	sp, #16
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
 800deea:	460b      	mov	r3, r1
 800deec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f836 	bl	800df60 <USBH_GetFreePipe>
 800def4:	4603      	mov	r3, r0
 800def6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800def8:	89fb      	ldrh	r3, [r7, #14]
 800defa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800defe:	4293      	cmp	r3, r2
 800df00:	d00a      	beq.n	800df18 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800df02:	78fa      	ldrb	r2, [r7, #3]
 800df04:	89fb      	ldrh	r3, [r7, #14]
 800df06:	f003 030f 	and.w	r3, r3, #15
 800df0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800df0e:	6879      	ldr	r1, [r7, #4]
 800df10:	33e0      	adds	r3, #224	; 0xe0
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	440b      	add	r3, r1
 800df16:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800df18:	89fb      	ldrh	r3, [r7, #14]
 800df1a:	b2db      	uxtb	r3, r3
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	460b      	mov	r3, r1
 800df2e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800df30:	78fb      	ldrb	r3, [r7, #3]
 800df32:	2b0a      	cmp	r3, #10
 800df34:	d80d      	bhi.n	800df52 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800df36:	78fb      	ldrb	r3, [r7, #3]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	33e0      	adds	r3, #224	; 0xe0
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	78fb      	ldrb	r3, [r7, #3]
 800df44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	33e0      	adds	r3, #224	; 0xe0
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	440b      	add	r3, r1
 800df50:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800df52:	2300      	movs	r3, #0
}
 800df54:	4618      	mov	r0, r3
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800df68:	2300      	movs	r3, #0
 800df6a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800df6c:	2300      	movs	r3, #0
 800df6e:	73fb      	strb	r3, [r7, #15]
 800df70:	e00f      	b.n	800df92 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800df72:	7bfb      	ldrb	r3, [r7, #15]
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	33e0      	adds	r3, #224	; 0xe0
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	4413      	add	r3, r2
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df82:	2b00      	cmp	r3, #0
 800df84:	d102      	bne.n	800df8c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800df86:	7bfb      	ldrb	r3, [r7, #15]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	e007      	b.n	800df9c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	3301      	adds	r3, #1
 800df90:	73fb      	strb	r3, [r7, #15]
 800df92:	7bfb      	ldrb	r3, [r7, #15]
 800df94:	2b0a      	cmp	r3, #10
 800df96:	d9ec      	bls.n	800df72 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800df98:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	4603      	mov	r3, r0
 800dfb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dfb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfba:	2b84      	cmp	r3, #132	; 0x84
 800dfbc:	d005      	beq.n	800dfca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dfbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	3303      	adds	r3, #3
 800dfc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dfca:	68fb      	ldr	r3, [r7, #12]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfde:	f3ef 8305 	mrs	r3, IPSR
 800dfe2:	607b      	str	r3, [r7, #4]
  return(result);
 800dfe4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	bf14      	ite	ne
 800dfea:	2301      	movne	r3, #1
 800dfec:	2300      	moveq	r3, #0
 800dfee:	b2db      	uxtb	r3, r3
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e000:	f001 f8f4 	bl	800f1ec <vTaskStartScheduler>
  
  return osOK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	bd80      	pop	{r7, pc}

0800e00a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e00a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e00c:	b089      	sub	sp, #36	; 0x24
 800e00e:	af04      	add	r7, sp, #16
 800e010:	6078      	str	r0, [r7, #4]
 800e012:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d020      	beq.n	800e05e <osThreadCreate+0x54>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	699b      	ldr	r3, [r3, #24]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d01c      	beq.n	800e05e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685c      	ldr	r4, [r3, #4]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681d      	ldr	r5, [r3, #0]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	691e      	ldr	r6, [r3, #16]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e036:	4618      	mov	r0, r3
 800e038:	f7ff ffb6 	bl	800dfa8 <makeFreeRtosPriority>
 800e03c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	695b      	ldr	r3, [r3, #20]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e046:	9202      	str	r2, [sp, #8]
 800e048:	9301      	str	r3, [sp, #4]
 800e04a:	9100      	str	r1, [sp, #0]
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	4632      	mov	r2, r6
 800e050:	4629      	mov	r1, r5
 800e052:	4620      	mov	r0, r4
 800e054:	f000 fefb 	bl	800ee4e <xTaskCreateStatic>
 800e058:	4603      	mov	r3, r0
 800e05a:	60fb      	str	r3, [r7, #12]
 800e05c:	e01c      	b.n	800e098 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685c      	ldr	r4, [r3, #4]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e06a:	b29e      	uxth	r6, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e072:	4618      	mov	r0, r3
 800e074:	f7ff ff98 	bl	800dfa8 <makeFreeRtosPriority>
 800e078:	4602      	mov	r2, r0
 800e07a:	f107 030c 	add.w	r3, r7, #12
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	9200      	str	r2, [sp, #0]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	4632      	mov	r2, r6
 800e086:	4629      	mov	r1, r5
 800e088:	4620      	mov	r0, r4
 800e08a:	f000 ff3a 	bl	800ef02 <xTaskCreate>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b01      	cmp	r3, #1
 800e092:	d001      	beq.n	800e098 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e094:	2300      	movs	r3, #0
 800e096:	e000      	b.n	800e09a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e098:	68fb      	ldr	r3, [r7, #12]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b084      	sub	sp, #16
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <osDelay+0x16>
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	e000      	b.n	800e0ba <osDelay+0x18>
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f001 f862 	bl	800f184 <vTaskDelay>
  
  return osOK;
 800e0c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e0ca:	b590      	push	{r4, r7, lr}
 800e0cc:	b085      	sub	sp, #20
 800e0ce:	af02      	add	r7, sp, #8
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d012      	beq.n	800e102 <osMessageCreate+0x38>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00e      	beq.n	800e102 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6818      	ldr	r0, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6859      	ldr	r1, [r3, #4]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	689a      	ldr	r2, [r3, #8]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68dc      	ldr	r4, [r3, #12]
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	4623      	mov	r3, r4
 800e0fa:	f000 f9df 	bl	800e4bc <xQueueGenericCreateStatic>
 800e0fe:	4603      	mov	r3, r0
 800e100:	e008      	b.n	800e114 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6818      	ldr	r0, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	4619      	mov	r1, r3
 800e10e:	f000 fa48 	bl	800e5a2 <xQueueGenericCreate>
 800e112:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e114:	4618      	mov	r0, r3
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd90      	pop	{r4, r7, pc}

0800e11c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b086      	sub	sp, #24
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e128:	2300      	movs	r3, #0
 800e12a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d101      	bne.n	800e13a <osMessagePut+0x1e>
    ticks = 1;
 800e136:	2301      	movs	r3, #1
 800e138:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e13a:	f7ff ff4d 	bl	800dfd8 <inHandlerMode>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d018      	beq.n	800e176 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e144:	f107 0210 	add.w	r2, r7, #16
 800e148:	f107 0108 	add.w	r1, r7, #8
 800e14c:	2300      	movs	r3, #0
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f000 fb80 	bl	800e854 <xQueueGenericSendFromISR>
 800e154:	4603      	mov	r3, r0
 800e156:	2b01      	cmp	r3, #1
 800e158:	d001      	beq.n	800e15e <osMessagePut+0x42>
      return osErrorOS;
 800e15a:	23ff      	movs	r3, #255	; 0xff
 800e15c:	e018      	b.n	800e190 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d014      	beq.n	800e18e <osMessagePut+0x72>
 800e164:	4b0c      	ldr	r3, [pc, #48]	; (800e198 <osMessagePut+0x7c>)
 800e166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e16a:	601a      	str	r2, [r3, #0]
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	f3bf 8f6f 	isb	sy
 800e174:	e00b      	b.n	800e18e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e176:	f107 0108 	add.w	r1, r7, #8
 800e17a:	2300      	movs	r3, #0
 800e17c:	697a      	ldr	r2, [r7, #20]
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	f000 fa6e 	bl	800e660 <xQueueGenericSend>
 800e184:	4603      	mov	r3, r0
 800e186:	2b01      	cmp	r3, #1
 800e188:	d001      	beq.n	800e18e <osMessagePut+0x72>
      return osErrorOS;
 800e18a:	23ff      	movs	r3, #255	; 0xff
 800e18c:	e000      	b.n	800e190 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3718      	adds	r7, #24
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	e000ed04 	.word	0xe000ed04

0800e19c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e19c:	b590      	push	{r4, r7, lr}
 800e19e:	b08b      	sub	sp, #44	; 0x2c
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10a      	bne.n	800e1cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e1b6:	2380      	movs	r3, #128	; 0x80
 800e1b8:	617b      	str	r3, [r7, #20]
    return event;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	461c      	mov	r4, r3
 800e1be:	f107 0314 	add.w	r3, r7, #20
 800e1c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e1ca:	e054      	b.n	800e276 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1da:	d103      	bne.n	800e1e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800e1e2:	e009      	b.n	800e1f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d006      	beq.n	800e1f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <osMessageGet+0x5c>
      ticks = 1;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e1f8:	f7ff feee 	bl	800dfd8 <inHandlerMode>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d01c      	beq.n	800e23c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e202:	f107 0220 	add.w	r2, r7, #32
 800e206:	f107 0314 	add.w	r3, r7, #20
 800e20a:	3304      	adds	r3, #4
 800e20c:	4619      	mov	r1, r3
 800e20e:	68b8      	ldr	r0, [r7, #8]
 800e210:	f000 fc90 	bl	800eb34 <xQueueReceiveFromISR>
 800e214:	4603      	mov	r3, r0
 800e216:	2b01      	cmp	r3, #1
 800e218:	d102      	bne.n	800e220 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e21a:	2310      	movs	r3, #16
 800e21c:	617b      	str	r3, [r7, #20]
 800e21e:	e001      	b.n	800e224 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e220:	2300      	movs	r3, #0
 800e222:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d01d      	beq.n	800e266 <osMessageGet+0xca>
 800e22a:	4b15      	ldr	r3, [pc, #84]	; (800e280 <osMessageGet+0xe4>)
 800e22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e230:	601a      	str	r2, [r3, #0]
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	e014      	b.n	800e266 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e23c:	f107 0314 	add.w	r3, r7, #20
 800e240:	3304      	adds	r3, #4
 800e242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e244:	4619      	mov	r1, r3
 800e246:	68b8      	ldr	r0, [r7, #8]
 800e248:	f000 fb98 	bl	800e97c <xQueueReceive>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d102      	bne.n	800e258 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e252:	2310      	movs	r3, #16
 800e254:	617b      	str	r3, [r7, #20]
 800e256:	e006      	b.n	800e266 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <osMessageGet+0xc6>
 800e25e:	2300      	movs	r3, #0
 800e260:	e000      	b.n	800e264 <osMessageGet+0xc8>
 800e262:	2340      	movs	r3, #64	; 0x40
 800e264:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	461c      	mov	r4, r3
 800e26a:	f107 0314 	add.w	r3, r7, #20
 800e26e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	372c      	adds	r7, #44	; 0x2c
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd90      	pop	{r4, r7, pc}
 800e27e:	bf00      	nop
 800e280:	e000ed04 	.word	0xe000ed04

0800e284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f103 0208 	add.w	r2, r3, #8
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f04f 32ff 	mov.w	r2, #4294967295
 800e29c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f103 0208 	add.w	r2, r3, #8
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f103 0208 	add.w	r2, r3, #8
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e2d2:	bf00      	nop
 800e2d4:	370c      	adds	r7, #12
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr

0800e2de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2de:	b480      	push	{r7}
 800e2e0:	b085      	sub	sp, #20
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
 800e2e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	689a      	ldr	r2, [r3, #8]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	1c5a      	adds	r2, r3, #1
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	601a      	str	r2, [r3, #0]
}
 800e31a:	bf00      	nop
 800e31c:	3714      	adds	r7, #20
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr

0800e326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e326:	b480      	push	{r7}
 800e328:	b085      	sub	sp, #20
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
 800e32e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33c:	d103      	bne.n	800e346 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	691b      	ldr	r3, [r3, #16]
 800e342:	60fb      	str	r3, [r7, #12]
 800e344:	e00c      	b.n	800e360 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	3308      	adds	r3, #8
 800e34a:	60fb      	str	r3, [r7, #12]
 800e34c:	e002      	b.n	800e354 <vListInsert+0x2e>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d2f6      	bcs.n	800e34e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	685a      	ldr	r2, [r3, #4]
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	683a      	ldr	r2, [r7, #0]
 800e36e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	68fa      	ldr	r2, [r7, #12]
 800e374:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	601a      	str	r2, [r3, #0]
}
 800e38c:	bf00      	nop
 800e38e:	3714      	adds	r7, #20
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	6892      	ldr	r2, [r2, #8]
 800e3ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	6852      	ldr	r2, [r2, #4]
 800e3b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d103      	bne.n	800e3cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	689a      	ldr	r2, [r3, #8]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	1e5a      	subs	r2, r3, #1
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d109      	bne.n	800e414 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	60bb      	str	r3, [r7, #8]
 800e412:	e7fe      	b.n	800e412 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e414:	f001 fd32 	bl	800fe7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e420:	68f9      	ldr	r1, [r7, #12]
 800e422:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e424:	fb01 f303 	mul.w	r3, r1, r3
 800e428:	441a      	add	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e444:	3b01      	subs	r3, #1
 800e446:	68f9      	ldr	r1, [r7, #12]
 800e448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e44a:	fb01 f303 	mul.w	r3, r1, r3
 800e44e:	441a      	add	r2, r3
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	22ff      	movs	r2, #255	; 0xff
 800e458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	22ff      	movs	r2, #255	; 0xff
 800e460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d114      	bne.n	800e494 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d01a      	beq.n	800e4a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3310      	adds	r3, #16
 800e476:	4618      	mov	r0, r3
 800e478:	f001 f91c 	bl	800f6b4 <xTaskRemoveFromEventList>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d012      	beq.n	800e4a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e482:	4b0d      	ldr	r3, [pc, #52]	; (800e4b8 <xQueueGenericReset+0xcc>)
 800e484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e488:	601a      	str	r2, [r3, #0]
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	e009      	b.n	800e4a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	3310      	adds	r3, #16
 800e498:	4618      	mov	r0, r3
 800e49a:	f7ff fef3 	bl	800e284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	3324      	adds	r3, #36	; 0x24
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7ff feee 	bl	800e284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e4a8:	f001 fd16 	bl	800fed8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e4ac:	2301      	movs	r3, #1
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	e000ed04 	.word	0xe000ed04

0800e4bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08e      	sub	sp, #56	; 0x38
 800e4c0:	af02      	add	r7, sp, #8
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d109      	bne.n	800e4e4 <xQueueGenericCreateStatic+0x28>
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4e2:	e7fe      	b.n	800e4e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d109      	bne.n	800e4fe <xQueueGenericCreateStatic+0x42>
 800e4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e4fc:	e7fe      	b.n	800e4fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d002      	beq.n	800e50a <xQueueGenericCreateStatic+0x4e>
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <xQueueGenericCreateStatic+0x52>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e000      	b.n	800e510 <xQueueGenericCreateStatic+0x54>
 800e50e:	2300      	movs	r3, #0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d109      	bne.n	800e528 <xQueueGenericCreateStatic+0x6c>
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	623b      	str	r3, [r7, #32]
 800e526:	e7fe      	b.n	800e526 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d102      	bne.n	800e534 <xQueueGenericCreateStatic+0x78>
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d101      	bne.n	800e538 <xQueueGenericCreateStatic+0x7c>
 800e534:	2301      	movs	r3, #1
 800e536:	e000      	b.n	800e53a <xQueueGenericCreateStatic+0x7e>
 800e538:	2300      	movs	r3, #0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d109      	bne.n	800e552 <xQueueGenericCreateStatic+0x96>
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	61fb      	str	r3, [r7, #28]
 800e550:	e7fe      	b.n	800e550 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e552:	2348      	movs	r3, #72	; 0x48
 800e554:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2b48      	cmp	r3, #72	; 0x48
 800e55a:	d009      	beq.n	800e570 <xQueueGenericCreateStatic+0xb4>
 800e55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e560:	f383 8811 	msr	BASEPRI, r3
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	61bb      	str	r3, [r7, #24]
 800e56e:	e7fe      	b.n	800e56e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e570:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00d      	beq.n	800e598 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e584:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	4613      	mov	r3, r2
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	68b9      	ldr	r1, [r7, #8]
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f000 f844 	bl	800e620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3730      	adds	r7, #48	; 0x30
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b08a      	sub	sp, #40	; 0x28
 800e5a6:	af02      	add	r7, sp, #8
 800e5a8:	60f8      	str	r0, [r7, #12]
 800e5aa:	60b9      	str	r1, [r7, #8]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d109      	bne.n	800e5ca <xQueueGenericCreate+0x28>
 800e5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ba:	f383 8811 	msr	BASEPRI, r3
 800e5be:	f3bf 8f6f 	isb	sy
 800e5c2:	f3bf 8f4f 	dsb	sy
 800e5c6:	613b      	str	r3, [r7, #16]
 800e5c8:	e7fe      	b.n	800e5c8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d102      	bne.n	800e5d6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	61fb      	str	r3, [r7, #28]
 800e5d4:	e004      	b.n	800e5e0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	fb02 f303 	mul.w	r3, r2, r3
 800e5de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	3348      	adds	r3, #72	; 0x48
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f001 fd63 	bl	80100b0 <pvPortMalloc>
 800e5ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d011      	beq.n	800e616 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	3348      	adds	r3, #72	; 0x48
 800e5fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e604:	79fa      	ldrb	r2, [r7, #7]
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	4613      	mov	r3, r2
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	68b9      	ldr	r1, [r7, #8]
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f000 f805 	bl	800e620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e616:	69bb      	ldr	r3, [r7, #24]
	}
 800e618:	4618      	mov	r0, r3
 800e61a:	3720      	adds	r7, #32
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
 800e62c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d103      	bne.n	800e63c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	69ba      	ldr	r2, [r7, #24]
 800e638:	601a      	str	r2, [r3, #0]
 800e63a:	e002      	b.n	800e642 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e64e:	2101      	movs	r1, #1
 800e650:	69b8      	ldr	r0, [r7, #24]
 800e652:	f7ff fecb 	bl	800e3ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
	...

0800e660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b08e      	sub	sp, #56	; 0x38
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
 800e66c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e66e:	2300      	movs	r3, #0
 800e670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d109      	bne.n	800e690 <xQueueGenericSend+0x30>
 800e67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e680:	f383 8811 	msr	BASEPRI, r3
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e68e:	e7fe      	b.n	800e68e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d103      	bne.n	800e69e <xQueueGenericSend+0x3e>
 800e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <xQueueGenericSend+0x42>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e000      	b.n	800e6a4 <xQueueGenericSend+0x44>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d109      	bne.n	800e6bc <xQueueGenericSend+0x5c>
 800e6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ac:	f383 8811 	msr	BASEPRI, r3
 800e6b0:	f3bf 8f6f 	isb	sy
 800e6b4:	f3bf 8f4f 	dsb	sy
 800e6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ba:	e7fe      	b.n	800e6ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d103      	bne.n	800e6ca <xQueueGenericSend+0x6a>
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d101      	bne.n	800e6ce <xQueueGenericSend+0x6e>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e000      	b.n	800e6d0 <xQueueGenericSend+0x70>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d109      	bne.n	800e6e8 <xQueueGenericSend+0x88>
 800e6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	623b      	str	r3, [r7, #32]
 800e6e6:	e7fe      	b.n	800e6e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6e8:	f001 f99c 	bl	800fa24 <xTaskGetSchedulerState>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d102      	bne.n	800e6f8 <xQueueGenericSend+0x98>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d101      	bne.n	800e6fc <xQueueGenericSend+0x9c>
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e000      	b.n	800e6fe <xQueueGenericSend+0x9e>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d109      	bne.n	800e716 <xQueueGenericSend+0xb6>
 800e702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e706:	f383 8811 	msr	BASEPRI, r3
 800e70a:	f3bf 8f6f 	isb	sy
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	61fb      	str	r3, [r7, #28]
 800e714:	e7fe      	b.n	800e714 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e716:	f001 fbb1 	bl	800fe7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e722:	429a      	cmp	r2, r3
 800e724:	d302      	bcc.n	800e72c <xQueueGenericSend+0xcc>
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b02      	cmp	r3, #2
 800e72a:	d129      	bne.n	800e780 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e72c:	683a      	ldr	r2, [r7, #0]
 800e72e:	68b9      	ldr	r1, [r7, #8]
 800e730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e732:	f000 fa7c 	bl	800ec2e <prvCopyDataToQueue>
 800e736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d010      	beq.n	800e762 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e742:	3324      	adds	r3, #36	; 0x24
 800e744:	4618      	mov	r0, r3
 800e746:	f000 ffb5 	bl	800f6b4 <xTaskRemoveFromEventList>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d013      	beq.n	800e778 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e750:	4b3f      	ldr	r3, [pc, #252]	; (800e850 <xQueueGenericSend+0x1f0>)
 800e752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e756:	601a      	str	r2, [r3, #0]
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	e00a      	b.n	800e778 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	2b00      	cmp	r3, #0
 800e766:	d007      	beq.n	800e778 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e768:	4b39      	ldr	r3, [pc, #228]	; (800e850 <xQueueGenericSend+0x1f0>)
 800e76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e778:	f001 fbae 	bl	800fed8 <vPortExitCritical>
				return pdPASS;
 800e77c:	2301      	movs	r3, #1
 800e77e:	e063      	b.n	800e848 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d103      	bne.n	800e78e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e786:	f001 fba7 	bl	800fed8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e78a:	2300      	movs	r3, #0
 800e78c:	e05c      	b.n	800e848 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e790:	2b00      	cmp	r3, #0
 800e792:	d106      	bne.n	800e7a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e794:	f107 0314 	add.w	r3, r7, #20
 800e798:	4618      	mov	r0, r3
 800e79a:	f000 ffed 	bl	800f778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7a2:	f001 fb99 	bl	800fed8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7a6:	f000 fd7f 	bl	800f2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7aa:	f001 fb67 	bl	800fe7c <vPortEnterCritical>
 800e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7b4:	b25b      	sxtb	r3, r3
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ba:	d103      	bne.n	800e7c4 <xQueueGenericSend+0x164>
 800e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7ca:	b25b      	sxtb	r3, r3
 800e7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d0:	d103      	bne.n	800e7da <xQueueGenericSend+0x17a>
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7da:	f001 fb7d 	bl	800fed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7de:	1d3a      	adds	r2, r7, #4
 800e7e0:	f107 0314 	add.w	r3, r7, #20
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f000 ffdc 	bl	800f7a4 <xTaskCheckForTimeOut>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d124      	bne.n	800e83c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7f4:	f000 fb13 	bl	800ee1e <prvIsQueueFull>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d018      	beq.n	800e830 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	3310      	adds	r3, #16
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	4611      	mov	r1, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f000 ff30 	bl	800f66c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e80e:	f000 fa9e 	bl	800ed4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e812:	f000 fd57 	bl	800f2c4 <xTaskResumeAll>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f47f af7c 	bne.w	800e716 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800e81e:	4b0c      	ldr	r3, [pc, #48]	; (800e850 <xQueueGenericSend+0x1f0>)
 800e820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	f3bf 8f4f 	dsb	sy
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	e772      	b.n	800e716 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e832:	f000 fa8c 	bl	800ed4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e836:	f000 fd45 	bl	800f2c4 <xTaskResumeAll>
 800e83a:	e76c      	b.n	800e716 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e83e:	f000 fa86 	bl	800ed4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e842:	f000 fd3f 	bl	800f2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3738      	adds	r7, #56	; 0x38
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	e000ed04 	.word	0xe000ed04

0800e854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b08e      	sub	sp, #56	; 0x38
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
 800e860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d109      	bne.n	800e880 <xQueueGenericSendFromISR+0x2c>
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	627b      	str	r3, [r7, #36]	; 0x24
 800e87e:	e7fe      	b.n	800e87e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d103      	bne.n	800e88e <xQueueGenericSendFromISR+0x3a>
 800e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <xQueueGenericSendFromISR+0x3e>
 800e88e:	2301      	movs	r3, #1
 800e890:	e000      	b.n	800e894 <xQueueGenericSendFromISR+0x40>
 800e892:	2300      	movs	r3, #0
 800e894:	2b00      	cmp	r3, #0
 800e896:	d109      	bne.n	800e8ac <xQueueGenericSendFromISR+0x58>
 800e898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	623b      	str	r3, [r7, #32]
 800e8aa:	e7fe      	b.n	800e8aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d103      	bne.n	800e8ba <xQueueGenericSendFromISR+0x66>
 800e8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d101      	bne.n	800e8be <xQueueGenericSendFromISR+0x6a>
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e000      	b.n	800e8c0 <xQueueGenericSendFromISR+0x6c>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d109      	bne.n	800e8d8 <xQueueGenericSendFromISR+0x84>
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	61fb      	str	r3, [r7, #28]
 800e8d6:	e7fe      	b.n	800e8d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8d8:	f001 fbac 	bl	8010034 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e8dc:	f3ef 8211 	mrs	r2, BASEPRI
 800e8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	61ba      	str	r2, [r7, #24]
 800e8f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e8f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e900:	429a      	cmp	r2, r3
 800e902:	d302      	bcc.n	800e90a <xQueueGenericSendFromISR+0xb6>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	2b02      	cmp	r3, #2
 800e908:	d12c      	bne.n	800e964 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e914:	683a      	ldr	r2, [r7, #0]
 800e916:	68b9      	ldr	r1, [r7, #8]
 800e918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e91a:	f000 f988 	bl	800ec2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e91e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e926:	d112      	bne.n	800e94e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d016      	beq.n	800e95e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	3324      	adds	r3, #36	; 0x24
 800e934:	4618      	mov	r0, r3
 800e936:	f000 febd 	bl	800f6b4 <xTaskRemoveFromEventList>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00e      	beq.n	800e95e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00b      	beq.n	800e95e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2201      	movs	r2, #1
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	e007      	b.n	800e95e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e94e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e952:	3301      	adds	r3, #1
 800e954:	b2db      	uxtb	r3, r3
 800e956:	b25a      	sxtb	r2, r3
 800e958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e95e:	2301      	movs	r3, #1
 800e960:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e962:	e001      	b.n	800e968 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e964:	2300      	movs	r3, #0
 800e966:	637b      	str	r3, [r7, #52]	; 0x34
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e974:	4618      	mov	r0, r3
 800e976:	3738      	adds	r7, #56	; 0x38
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b08c      	sub	sp, #48	; 0x30
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e988:	2300      	movs	r3, #0
 800e98a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	2b00      	cmp	r3, #0
 800e994:	d109      	bne.n	800e9aa <xQueueReceive+0x2e>
	__asm volatile
 800e996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99a:	f383 8811 	msr	BASEPRI, r3
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	623b      	str	r3, [r7, #32]
 800e9a8:	e7fe      	b.n	800e9a8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d103      	bne.n	800e9b8 <xQueueReceive+0x3c>
 800e9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <xQueueReceive+0x40>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e000      	b.n	800e9be <xQueueReceive+0x42>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d109      	bne.n	800e9d6 <xQueueReceive+0x5a>
 800e9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c6:	f383 8811 	msr	BASEPRI, r3
 800e9ca:	f3bf 8f6f 	isb	sy
 800e9ce:	f3bf 8f4f 	dsb	sy
 800e9d2:	61fb      	str	r3, [r7, #28]
 800e9d4:	e7fe      	b.n	800e9d4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9d6:	f001 f825 	bl	800fa24 <xTaskGetSchedulerState>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d102      	bne.n	800e9e6 <xQueueReceive+0x6a>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <xQueueReceive+0x6e>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	e000      	b.n	800e9ec <xQueueReceive+0x70>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d109      	bne.n	800ea04 <xQueueReceive+0x88>
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	61bb      	str	r3, [r7, #24]
 800ea02:	e7fe      	b.n	800ea02 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea04:	f001 fa3a 	bl	800fe7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d01f      	beq.n	800ea54 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea14:	68b9      	ldr	r1, [r7, #8]
 800ea16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea18:	f000 f973 	bl	800ed02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1e:	1e5a      	subs	r2, r3, #1
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00f      	beq.n	800ea4c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2e:	3310      	adds	r3, #16
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 fe3f 	bl	800f6b4 <xTaskRemoveFromEventList>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d007      	beq.n	800ea4c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea3c:	4b3c      	ldr	r3, [pc, #240]	; (800eb30 <xQueueReceive+0x1b4>)
 800ea3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	f3bf 8f4f 	dsb	sy
 800ea48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea4c:	f001 fa44 	bl	800fed8 <vPortExitCritical>
				return pdPASS;
 800ea50:	2301      	movs	r3, #1
 800ea52:	e069      	b.n	800eb28 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d103      	bne.n	800ea62 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea5a:	f001 fa3d 	bl	800fed8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	e062      	b.n	800eb28 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d106      	bne.n	800ea76 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea68:	f107 0310 	add.w	r3, r7, #16
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 fe83 	bl	800f778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea72:	2301      	movs	r3, #1
 800ea74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea76:	f001 fa2f 	bl	800fed8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea7a:	f000 fc15 	bl	800f2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea7e:	f001 f9fd 	bl	800fe7c <vPortEnterCritical>
 800ea82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea88:	b25b      	sxtb	r3, r3
 800ea8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea8e:	d103      	bne.n	800ea98 <xQueueReceive+0x11c>
 800ea90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea92:	2200      	movs	r2, #0
 800ea94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea9e:	b25b      	sxtb	r3, r3
 800eaa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa4:	d103      	bne.n	800eaae <xQueueReceive+0x132>
 800eaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eaae:	f001 fa13 	bl	800fed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eab2:	1d3a      	adds	r2, r7, #4
 800eab4:	f107 0310 	add.w	r3, r7, #16
 800eab8:	4611      	mov	r1, r2
 800eaba:	4618      	mov	r0, r3
 800eabc:	f000 fe72 	bl	800f7a4 <xTaskCheckForTimeOut>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d123      	bne.n	800eb0e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eac8:	f000 f993 	bl	800edf2 <prvIsQueueEmpty>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d017      	beq.n	800eb02 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ead2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead4:	3324      	adds	r3, #36	; 0x24
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	4611      	mov	r1, r2
 800eada:	4618      	mov	r0, r3
 800eadc:	f000 fdc6 	bl	800f66c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eae2:	f000 f934 	bl	800ed4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eae6:	f000 fbed 	bl	800f2c4 <xTaskResumeAll>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d189      	bne.n	800ea04 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800eaf0:	4b0f      	ldr	r3, [pc, #60]	; (800eb30 <xQueueReceive+0x1b4>)
 800eaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	e780      	b.n	800ea04 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eb02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb04:	f000 f923 	bl	800ed4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb08:	f000 fbdc 	bl	800f2c4 <xTaskResumeAll>
 800eb0c:	e77a      	b.n	800ea04 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eb0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb10:	f000 f91d 	bl	800ed4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb14:	f000 fbd6 	bl	800f2c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb1a:	f000 f96a 	bl	800edf2 <prvIsQueueEmpty>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f43f af6f 	beq.w	800ea04 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3730      	adds	r7, #48	; 0x30
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	e000ed04 	.word	0xe000ed04

0800eb34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b08e      	sub	sp, #56	; 0x38
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d109      	bne.n	800eb5e <xQueueReceiveFromISR+0x2a>
 800eb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4e:	f383 8811 	msr	BASEPRI, r3
 800eb52:	f3bf 8f6f 	isb	sy
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	623b      	str	r3, [r7, #32]
 800eb5c:	e7fe      	b.n	800eb5c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d103      	bne.n	800eb6c <xQueueReceiveFromISR+0x38>
 800eb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d101      	bne.n	800eb70 <xQueueReceiveFromISR+0x3c>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e000      	b.n	800eb72 <xQueueReceiveFromISR+0x3e>
 800eb70:	2300      	movs	r3, #0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d109      	bne.n	800eb8a <xQueueReceiveFromISR+0x56>
 800eb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	61fb      	str	r3, [r7, #28]
 800eb88:	e7fe      	b.n	800eb88 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb8a:	f001 fa53 	bl	8010034 <vPortValidateInterruptPriority>
	__asm volatile
 800eb8e:	f3ef 8211 	mrs	r2, BASEPRI
 800eb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	61ba      	str	r2, [r7, #24]
 800eba4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eba6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d02f      	beq.n	800ec16 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ebb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ebc0:	68b9      	ldr	r1, [r7, #8]
 800ebc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebc4:	f000 f89d 	bl	800ed02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebca:	1e5a      	subs	r2, r3, #1
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ebd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd8:	d112      	bne.n	800ec00 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d016      	beq.n	800ec10 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe4:	3310      	adds	r3, #16
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 fd64 	bl	800f6b4 <xTaskRemoveFromEventList>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d00e      	beq.n	800ec10 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00b      	beq.n	800ec10 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	601a      	str	r2, [r3, #0]
 800ebfe:	e007      	b.n	800ec10 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ec00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec04:	3301      	adds	r3, #1
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	b25a      	sxtb	r2, r3
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ec10:	2301      	movs	r3, #1
 800ec12:	637b      	str	r3, [r7, #52]	; 0x34
 800ec14:	e001      	b.n	800ec1a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ec16:	2300      	movs	r3, #0
 800ec18:	637b      	str	r3, [r7, #52]	; 0x34
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3738      	adds	r7, #56	; 0x38
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b086      	sub	sp, #24
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	60f8      	str	r0, [r7, #12]
 800ec36:	60b9      	str	r1, [r7, #8]
 800ec38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d10d      	bne.n	800ec68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d14d      	bne.n	800ecf0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f000 ff01 	bl	800fa60 <xTaskPriorityDisinherit>
 800ec5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2200      	movs	r2, #0
 800ec64:	609a      	str	r2, [r3, #8]
 800ec66:	e043      	b.n	800ecf0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d119      	bne.n	800eca2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6858      	ldr	r0, [r3, #4]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec76:	461a      	mov	r2, r3
 800ec78:	68b9      	ldr	r1, [r7, #8]
 800ec7a:	f001 ff35 	bl	8010ae8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	685a      	ldr	r2, [r3, #4]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec86:	441a      	add	r2, r3
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	685a      	ldr	r2, [r3, #4]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	689b      	ldr	r3, [r3, #8]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d32b      	bcc.n	800ecf0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	605a      	str	r2, [r3, #4]
 800eca0:	e026      	b.n	800ecf0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	68d8      	ldr	r0, [r3, #12]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecaa:	461a      	mov	r2, r3
 800ecac:	68b9      	ldr	r1, [r7, #8]
 800ecae:	f001 ff1b 	bl	8010ae8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	68da      	ldr	r2, [r3, #12]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecba:	425b      	negs	r3, r3
 800ecbc:	441a      	add	r2, r3
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	68da      	ldr	r2, [r3, #12]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d207      	bcs.n	800ecde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	689a      	ldr	r2, [r3, #8]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd6:	425b      	negs	r3, r3
 800ecd8:	441a      	add	r2, r3
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b02      	cmp	r3, #2
 800ece2:	d105      	bne.n	800ecf0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d002      	beq.n	800ecf0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	1c5a      	adds	r2, r3, #1
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ecf8:	697b      	ldr	r3, [r7, #20]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3718      	adds	r7, #24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d018      	beq.n	800ed46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	68da      	ldr	r2, [r3, #12]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed1c:	441a      	add	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	68da      	ldr	r2, [r3, #12]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d303      	bcc.n	800ed36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	68d9      	ldr	r1, [r3, #12]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed3e:	461a      	mov	r2, r3
 800ed40:	6838      	ldr	r0, [r7, #0]
 800ed42:	f001 fed1 	bl	8010ae8 <memcpy>
	}
}
 800ed46:	bf00      	nop
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed56:	f001 f891 	bl	800fe7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed62:	e011      	b.n	800ed88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d012      	beq.n	800ed92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3324      	adds	r3, #36	; 0x24
 800ed70:	4618      	mov	r0, r3
 800ed72:	f000 fc9f 	bl	800f6b4 <xTaskRemoveFromEventList>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ed7c:	f000 fd72 	bl	800f864 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
 800ed82:	3b01      	subs	r3, #1
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	dce9      	bgt.n	800ed64 <prvUnlockQueue+0x16>
 800ed90:	e000      	b.n	800ed94 <prvUnlockQueue+0x46>
					break;
 800ed92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	22ff      	movs	r2, #255	; 0xff
 800ed98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ed9c:	f001 f89c 	bl	800fed8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eda0:	f001 f86c 	bl	800fe7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edaa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edac:	e011      	b.n	800edd2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d012      	beq.n	800eddc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3310      	adds	r3, #16
 800edba:	4618      	mov	r0, r3
 800edbc:	f000 fc7a 	bl	800f6b4 <xTaskRemoveFromEventList>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800edc6:	f000 fd4d 	bl	800f864 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800edca:	7bbb      	ldrb	r3, [r7, #14]
 800edcc:	3b01      	subs	r3, #1
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	dce9      	bgt.n	800edae <prvUnlockQueue+0x60>
 800edda:	e000      	b.n	800edde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eddc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	22ff      	movs	r2, #255	; 0xff
 800ede2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ede6:	f001 f877 	bl	800fed8 <vPortExitCritical>
}
 800edea:	bf00      	nop
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b084      	sub	sp, #16
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800edfa:	f001 f83f 	bl	800fe7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d102      	bne.n	800ee0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ee06:	2301      	movs	r3, #1
 800ee08:	60fb      	str	r3, [r7, #12]
 800ee0a:	e001      	b.n	800ee10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee10:	f001 f862 	bl	800fed8 <vPortExitCritical>

	return xReturn;
 800ee14:	68fb      	ldr	r3, [r7, #12]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b084      	sub	sp, #16
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee26:	f001 f829 	bl	800fe7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d102      	bne.n	800ee3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee36:	2301      	movs	r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	e001      	b.n	800ee40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee40:	f001 f84a 	bl	800fed8 <vPortExitCritical>

	return xReturn;
 800ee44:	68fb      	ldr	r3, [r7, #12]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b08e      	sub	sp, #56	; 0x38
 800ee52:	af04      	add	r7, sp, #16
 800ee54:	60f8      	str	r0, [r7, #12]
 800ee56:	60b9      	str	r1, [r7, #8]
 800ee58:	607a      	str	r2, [r7, #4]
 800ee5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ee5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d109      	bne.n	800ee76 <xTaskCreateStatic+0x28>
	__asm volatile
 800ee62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee66:	f383 8811 	msr	BASEPRI, r3
 800ee6a:	f3bf 8f6f 	isb	sy
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	623b      	str	r3, [r7, #32]
 800ee74:	e7fe      	b.n	800ee74 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ee76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d109      	bne.n	800ee90 <xTaskCreateStatic+0x42>
 800ee7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee80:	f383 8811 	msr	BASEPRI, r3
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	f3bf 8f4f 	dsb	sy
 800ee8c:	61fb      	str	r3, [r7, #28]
 800ee8e:	e7fe      	b.n	800ee8e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ee90:	2358      	movs	r3, #88	; 0x58
 800ee92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	2b58      	cmp	r3, #88	; 0x58
 800ee98:	d009      	beq.n	800eeae <xTaskCreateStatic+0x60>
 800ee9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9e:	f383 8811 	msr	BASEPRI, r3
 800eea2:	f3bf 8f6f 	isb	sy
 800eea6:	f3bf 8f4f 	dsb	sy
 800eeaa:	61bb      	str	r3, [r7, #24]
 800eeac:	e7fe      	b.n	800eeac <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eeae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d01e      	beq.n	800eef4 <xTaskCreateStatic+0xa6>
 800eeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d01b      	beq.n	800eef4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eec4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec8:	2202      	movs	r2, #2
 800eeca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eece:	2300      	movs	r3, #0
 800eed0:	9303      	str	r3, [sp, #12]
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	9302      	str	r3, [sp, #8]
 800eed6:	f107 0314 	add.w	r3, r7, #20
 800eeda:	9301      	str	r3, [sp, #4]
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	68b9      	ldr	r1, [r7, #8]
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f000 f850 	bl	800ef8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eeec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeee:	f000 f8df 	bl	800f0b0 <prvAddNewTaskToReadyList>
 800eef2:	e001      	b.n	800eef8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800eef4:	2300      	movs	r3, #0
 800eef6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eef8:	697b      	ldr	r3, [r7, #20]
	}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3728      	adds	r7, #40	; 0x28
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b08c      	sub	sp, #48	; 0x30
 800ef06:	af04      	add	r7, sp, #16
 800ef08:	60f8      	str	r0, [r7, #12]
 800ef0a:	60b9      	str	r1, [r7, #8]
 800ef0c:	603b      	str	r3, [r7, #0]
 800ef0e:	4613      	mov	r3, r2
 800ef10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ef12:	88fb      	ldrh	r3, [r7, #6]
 800ef14:	009b      	lsls	r3, r3, #2
 800ef16:	4618      	mov	r0, r3
 800ef18:	f001 f8ca 	bl	80100b0 <pvPortMalloc>
 800ef1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d00e      	beq.n	800ef42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ef24:	2058      	movs	r0, #88	; 0x58
 800ef26:	f001 f8c3 	bl	80100b0 <pvPortMalloc>
 800ef2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d003      	beq.n	800ef3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	697a      	ldr	r2, [r7, #20]
 800ef36:	631a      	str	r2, [r3, #48]	; 0x30
 800ef38:	e005      	b.n	800ef46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ef3a:	6978      	ldr	r0, [r7, #20]
 800ef3c:	f001 f97e 	bl	801023c <vPortFree>
 800ef40:	e001      	b.n	800ef46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d017      	beq.n	800ef7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ef54:	88fa      	ldrh	r2, [r7, #6]
 800ef56:	2300      	movs	r3, #0
 800ef58:	9303      	str	r3, [sp, #12]
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	9302      	str	r3, [sp, #8]
 800ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef60:	9301      	str	r3, [sp, #4]
 800ef62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	68b9      	ldr	r1, [r7, #8]
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f000 f80e 	bl	800ef8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef70:	69f8      	ldr	r0, [r7, #28]
 800ef72:	f000 f89d 	bl	800f0b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ef76:	2301      	movs	r3, #1
 800ef78:	61bb      	str	r3, [r7, #24]
 800ef7a:	e002      	b.n	800ef82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ef82:	69bb      	ldr	r3, [r7, #24]
	}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3720      	adds	r7, #32
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b088      	sub	sp, #32
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
 800ef98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	461a      	mov	r2, r3
 800efa4:	21a5      	movs	r1, #165	; 0xa5
 800efa6:	f001 fdaa 	bl	8010afe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800efb4:	3b01      	subs	r3, #1
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	4413      	add	r3, r2
 800efba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	f023 0307 	bic.w	r3, r3, #7
 800efc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	f003 0307 	and.w	r3, r3, #7
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d009      	beq.n	800efe2 <prvInitialiseNewTask+0x56>
 800efce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	617b      	str	r3, [r7, #20]
 800efe0:	e7fe      	b.n	800efe0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d01f      	beq.n	800f028 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efe8:	2300      	movs	r3, #0
 800efea:	61fb      	str	r3, [r7, #28]
 800efec:	e012      	b.n	800f014 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	4413      	add	r3, r2
 800eff4:	7819      	ldrb	r1, [r3, #0]
 800eff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	4413      	add	r3, r2
 800effc:	3334      	adds	r3, #52	; 0x34
 800effe:	460a      	mov	r2, r1
 800f000:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	4413      	add	r3, r2
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d006      	beq.n	800f01c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	3301      	adds	r3, #1
 800f012:	61fb      	str	r3, [r7, #28]
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	2b0f      	cmp	r3, #15
 800f018:	d9e9      	bls.n	800efee <prvInitialiseNewTask+0x62>
 800f01a:	e000      	b.n	800f01e <prvInitialiseNewTask+0x92>
			{
				break;
 800f01c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f020:	2200      	movs	r2, #0
 800f022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f026:	e003      	b.n	800f030 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02a:	2200      	movs	r2, #0
 800f02c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f032:	2b06      	cmp	r3, #6
 800f034:	d901      	bls.n	800f03a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f036:	2306      	movs	r3, #6
 800f038:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f03e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f044:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f048:	2200      	movs	r2, #0
 800f04a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04e:	3304      	adds	r3, #4
 800f050:	4618      	mov	r0, r3
 800f052:	f7ff f937 	bl	800e2c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f058:	3318      	adds	r3, #24
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7ff f932 	bl	800e2c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f064:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f068:	f1c3 0207 	rsb	r2, r3, #7
 800f06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f074:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f078:	2200      	movs	r2, #0
 800f07a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07e:	2200      	movs	r2, #0
 800f080:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f084:	2200      	movs	r2, #0
 800f086:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	68f9      	ldr	r1, [r7, #12]
 800f08e:	69b8      	ldr	r0, [r7, #24]
 800f090:	f000 fdd0 	bl	800fc34 <pxPortInitialiseStack>
 800f094:	4602      	mov	r2, r0
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d002      	beq.n	800f0a6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0a6:	bf00      	nop
 800f0a8:	3720      	adds	r7, #32
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
	...

0800f0b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f0b8:	f000 fee0 	bl	800fe7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f0bc:	4b2a      	ldr	r3, [pc, #168]	; (800f168 <prvAddNewTaskToReadyList+0xb8>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	4a29      	ldr	r2, [pc, #164]	; (800f168 <prvAddNewTaskToReadyList+0xb8>)
 800f0c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f0c6:	4b29      	ldr	r3, [pc, #164]	; (800f16c <prvAddNewTaskToReadyList+0xbc>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d109      	bne.n	800f0e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f0ce:	4a27      	ldr	r2, [pc, #156]	; (800f16c <prvAddNewTaskToReadyList+0xbc>)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f0d4:	4b24      	ldr	r3, [pc, #144]	; (800f168 <prvAddNewTaskToReadyList+0xb8>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d110      	bne.n	800f0fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f0dc:	f000 fbe8 	bl	800f8b0 <prvInitialiseTaskLists>
 800f0e0:	e00d      	b.n	800f0fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f0e2:	4b23      	ldr	r3, [pc, #140]	; (800f170 <prvAddNewTaskToReadyList+0xc0>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d109      	bne.n	800f0fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f0ea:	4b20      	ldr	r3, [pc, #128]	; (800f16c <prvAddNewTaskToReadyList+0xbc>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d802      	bhi.n	800f0fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f0f8:	4a1c      	ldr	r2, [pc, #112]	; (800f16c <prvAddNewTaskToReadyList+0xbc>)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f0fe:	4b1d      	ldr	r3, [pc, #116]	; (800f174 <prvAddNewTaskToReadyList+0xc4>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3301      	adds	r3, #1
 800f104:	4a1b      	ldr	r2, [pc, #108]	; (800f174 <prvAddNewTaskToReadyList+0xc4>)
 800f106:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10c:	2201      	movs	r2, #1
 800f10e:	409a      	lsls	r2, r3
 800f110:	4b19      	ldr	r3, [pc, #100]	; (800f178 <prvAddNewTaskToReadyList+0xc8>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4313      	orrs	r3, r2
 800f116:	4a18      	ldr	r2, [pc, #96]	; (800f178 <prvAddNewTaskToReadyList+0xc8>)
 800f118:	6013      	str	r3, [r2, #0]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f11e:	4613      	mov	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	4a15      	ldr	r2, [pc, #84]	; (800f17c <prvAddNewTaskToReadyList+0xcc>)
 800f128:	441a      	add	r2, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	3304      	adds	r3, #4
 800f12e:	4619      	mov	r1, r3
 800f130:	4610      	mov	r0, r2
 800f132:	f7ff f8d4 	bl	800e2de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f136:	f000 fecf 	bl	800fed8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f13a:	4b0d      	ldr	r3, [pc, #52]	; (800f170 <prvAddNewTaskToReadyList+0xc0>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00e      	beq.n	800f160 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f142:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <prvAddNewTaskToReadyList+0xbc>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d207      	bcs.n	800f160 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f150:	4b0b      	ldr	r3, [pc, #44]	; (800f180 <prvAddNewTaskToReadyList+0xd0>)
 800f152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f160:	bf00      	nop
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	20000670 	.word	0x20000670
 800f16c:	20000570 	.word	0x20000570
 800f170:	2000067c 	.word	0x2000067c
 800f174:	2000068c 	.word	0x2000068c
 800f178:	20000678 	.word	0x20000678
 800f17c:	20000574 	.word	0x20000574
 800f180:	e000ed04 	.word	0xe000ed04

0800f184 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f18c:	2300      	movs	r3, #0
 800f18e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d016      	beq.n	800f1c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f196:	4b13      	ldr	r3, [pc, #76]	; (800f1e4 <vTaskDelay+0x60>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d009      	beq.n	800f1b2 <vTaskDelay+0x2e>
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	60bb      	str	r3, [r7, #8]
 800f1b0:	e7fe      	b.n	800f1b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800f1b2:	f000 f879 	bl	800f2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 fcd5 	bl	800fb68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f1be:	f000 f881 	bl	800f2c4 <xTaskResumeAll>
 800f1c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d107      	bne.n	800f1da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800f1ca:	4b07      	ldr	r3, [pc, #28]	; (800f1e8 <vTaskDelay+0x64>)
 800f1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1d0:	601a      	str	r2, [r3, #0]
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f1da:	bf00      	nop
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	20000698 	.word	0x20000698
 800f1e8:	e000ed04 	.word	0xe000ed04

0800f1ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b08a      	sub	sp, #40	; 0x28
 800f1f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f1fa:	463a      	mov	r2, r7
 800f1fc:	1d39      	adds	r1, r7, #4
 800f1fe:	f107 0308 	add.w	r3, r7, #8
 800f202:	4618      	mov	r0, r3
 800f204:	f7f1 fb0a 	bl	800081c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	9202      	str	r2, [sp, #8]
 800f210:	9301      	str	r3, [sp, #4]
 800f212:	2300      	movs	r3, #0
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	2300      	movs	r3, #0
 800f218:	460a      	mov	r2, r1
 800f21a:	491d      	ldr	r1, [pc, #116]	; (800f290 <vTaskStartScheduler+0xa4>)
 800f21c:	481d      	ldr	r0, [pc, #116]	; (800f294 <vTaskStartScheduler+0xa8>)
 800f21e:	f7ff fe16 	bl	800ee4e <xTaskCreateStatic>
 800f222:	4602      	mov	r2, r0
 800f224:	4b1c      	ldr	r3, [pc, #112]	; (800f298 <vTaskStartScheduler+0xac>)
 800f226:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f228:	4b1b      	ldr	r3, [pc, #108]	; (800f298 <vTaskStartScheduler+0xac>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d002      	beq.n	800f236 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f230:	2301      	movs	r3, #1
 800f232:	617b      	str	r3, [r7, #20]
 800f234:	e001      	b.n	800f23a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f236:	2300      	movs	r3, #0
 800f238:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d115      	bne.n	800f26c <vTaskStartScheduler+0x80>
 800f240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f244:	f383 8811 	msr	BASEPRI, r3
 800f248:	f3bf 8f6f 	isb	sy
 800f24c:	f3bf 8f4f 	dsb	sy
 800f250:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f252:	4b12      	ldr	r3, [pc, #72]	; (800f29c <vTaskStartScheduler+0xb0>)
 800f254:	f04f 32ff 	mov.w	r2, #4294967295
 800f258:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f25a:	4b11      	ldr	r3, [pc, #68]	; (800f2a0 <vTaskStartScheduler+0xb4>)
 800f25c:	2201      	movs	r2, #1
 800f25e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f260:	4b10      	ldr	r3, [pc, #64]	; (800f2a4 <vTaskStartScheduler+0xb8>)
 800f262:	2200      	movs	r2, #0
 800f264:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f266:	f000 fd6b 	bl	800fd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f26a:	e00d      	b.n	800f288 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f272:	d109      	bne.n	800f288 <vTaskStartScheduler+0x9c>
 800f274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	60fb      	str	r3, [r7, #12]
 800f286:	e7fe      	b.n	800f286 <vTaskStartScheduler+0x9a>
}
 800f288:	bf00      	nop
 800f28a:	3718      	adds	r7, #24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	08010d84 	.word	0x08010d84
 800f294:	0800f87d 	.word	0x0800f87d
 800f298:	20000694 	.word	0x20000694
 800f29c:	20000690 	.word	0x20000690
 800f2a0:	2000067c 	.word	0x2000067c
 800f2a4:	20000674 	.word	0x20000674

0800f2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f2ac:	4b04      	ldr	r3, [pc, #16]	; (800f2c0 <vTaskSuspendAll+0x18>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	4a03      	ldr	r2, [pc, #12]	; (800f2c0 <vTaskSuspendAll+0x18>)
 800f2b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f2b6:	bf00      	nop
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr
 800f2c0:	20000698 	.word	0x20000698

0800f2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f2d2:	4b41      	ldr	r3, [pc, #260]	; (800f3d8 <xTaskResumeAll+0x114>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d109      	bne.n	800f2ee <xTaskResumeAll+0x2a>
 800f2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2de:	f383 8811 	msr	BASEPRI, r3
 800f2e2:	f3bf 8f6f 	isb	sy
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	e7fe      	b.n	800f2ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f2ee:	f000 fdc5 	bl	800fe7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f2f2:	4b39      	ldr	r3, [pc, #228]	; (800f3d8 <xTaskResumeAll+0x114>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	4a37      	ldr	r2, [pc, #220]	; (800f3d8 <xTaskResumeAll+0x114>)
 800f2fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2fc:	4b36      	ldr	r3, [pc, #216]	; (800f3d8 <xTaskResumeAll+0x114>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d161      	bne.n	800f3c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f304:	4b35      	ldr	r3, [pc, #212]	; (800f3dc <xTaskResumeAll+0x118>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d05d      	beq.n	800f3c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f30c:	e02e      	b.n	800f36c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f30e:	4b34      	ldr	r3, [pc, #208]	; (800f3e0 <xTaskResumeAll+0x11c>)
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	3318      	adds	r3, #24
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7ff f83c 	bl	800e398 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	3304      	adds	r3, #4
 800f324:	4618      	mov	r0, r3
 800f326:	f7ff f837 	bl	800e398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f32e:	2201      	movs	r2, #1
 800f330:	409a      	lsls	r2, r3
 800f332:	4b2c      	ldr	r3, [pc, #176]	; (800f3e4 <xTaskResumeAll+0x120>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4313      	orrs	r3, r2
 800f338:	4a2a      	ldr	r2, [pc, #168]	; (800f3e4 <xTaskResumeAll+0x120>)
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f340:	4613      	mov	r3, r2
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	4413      	add	r3, r2
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	4a27      	ldr	r2, [pc, #156]	; (800f3e8 <xTaskResumeAll+0x124>)
 800f34a:	441a      	add	r2, r3
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	3304      	adds	r3, #4
 800f350:	4619      	mov	r1, r3
 800f352:	4610      	mov	r0, r2
 800f354:	f7fe ffc3 	bl	800e2de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f35c:	4b23      	ldr	r3, [pc, #140]	; (800f3ec <xTaskResumeAll+0x128>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f362:	429a      	cmp	r2, r3
 800f364:	d302      	bcc.n	800f36c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800f366:	4b22      	ldr	r3, [pc, #136]	; (800f3f0 <xTaskResumeAll+0x12c>)
 800f368:	2201      	movs	r2, #1
 800f36a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f36c:	4b1c      	ldr	r3, [pc, #112]	; (800f3e0 <xTaskResumeAll+0x11c>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d1cc      	bne.n	800f30e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f37a:	f000 fb33 	bl	800f9e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f37e:	4b1d      	ldr	r3, [pc, #116]	; (800f3f4 <xTaskResumeAll+0x130>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d010      	beq.n	800f3ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f38a:	f000 f837 	bl	800f3fc <xTaskIncrementTick>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d002      	beq.n	800f39a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800f394:	4b16      	ldr	r3, [pc, #88]	; (800f3f0 <xTaskResumeAll+0x12c>)
 800f396:	2201      	movs	r2, #1
 800f398:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1f1      	bne.n	800f38a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800f3a6:	4b13      	ldr	r3, [pc, #76]	; (800f3f4 <xTaskResumeAll+0x130>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f3ac:	4b10      	ldr	r3, [pc, #64]	; (800f3f0 <xTaskResumeAll+0x12c>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d009      	beq.n	800f3c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f3b8:	4b0f      	ldr	r3, [pc, #60]	; (800f3f8 <xTaskResumeAll+0x134>)
 800f3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3be:	601a      	str	r2, [r3, #0]
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f3c8:	f000 fd86 	bl	800fed8 <vPortExitCritical>

	return xAlreadyYielded;
 800f3cc:	68bb      	ldr	r3, [r7, #8]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20000698 	.word	0x20000698
 800f3dc:	20000670 	.word	0x20000670
 800f3e0:	20000630 	.word	0x20000630
 800f3e4:	20000678 	.word	0x20000678
 800f3e8:	20000574 	.word	0x20000574
 800f3ec:	20000570 	.word	0x20000570
 800f3f0:	20000684 	.word	0x20000684
 800f3f4:	20000680 	.word	0x20000680
 800f3f8:	e000ed04 	.word	0xe000ed04

0800f3fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b086      	sub	sp, #24
 800f400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f402:	2300      	movs	r3, #0
 800f404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f406:	4b4e      	ldr	r3, [pc, #312]	; (800f540 <xTaskIncrementTick+0x144>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f040 8087 	bne.w	800f51e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f410:	4b4c      	ldr	r3, [pc, #304]	; (800f544 <xTaskIncrementTick+0x148>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3301      	adds	r3, #1
 800f416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f418:	4a4a      	ldr	r2, [pc, #296]	; (800f544 <xTaskIncrementTick+0x148>)
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d11f      	bne.n	800f464 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f424:	4b48      	ldr	r3, [pc, #288]	; (800f548 <xTaskIncrementTick+0x14c>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d009      	beq.n	800f442 <xTaskIncrementTick+0x46>
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	603b      	str	r3, [r7, #0]
 800f440:	e7fe      	b.n	800f440 <xTaskIncrementTick+0x44>
 800f442:	4b41      	ldr	r3, [pc, #260]	; (800f548 <xTaskIncrementTick+0x14c>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	60fb      	str	r3, [r7, #12]
 800f448:	4b40      	ldr	r3, [pc, #256]	; (800f54c <xTaskIncrementTick+0x150>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a3e      	ldr	r2, [pc, #248]	; (800f548 <xTaskIncrementTick+0x14c>)
 800f44e:	6013      	str	r3, [r2, #0]
 800f450:	4a3e      	ldr	r2, [pc, #248]	; (800f54c <xTaskIncrementTick+0x150>)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6013      	str	r3, [r2, #0]
 800f456:	4b3e      	ldr	r3, [pc, #248]	; (800f550 <xTaskIncrementTick+0x154>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	3301      	adds	r3, #1
 800f45c:	4a3c      	ldr	r2, [pc, #240]	; (800f550 <xTaskIncrementTick+0x154>)
 800f45e:	6013      	str	r3, [r2, #0]
 800f460:	f000 fac0 	bl	800f9e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f464:	4b3b      	ldr	r3, [pc, #236]	; (800f554 <xTaskIncrementTick+0x158>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	693a      	ldr	r2, [r7, #16]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d348      	bcc.n	800f500 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f46e:	4b36      	ldr	r3, [pc, #216]	; (800f548 <xTaskIncrementTick+0x14c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d104      	bne.n	800f482 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f478:	4b36      	ldr	r3, [pc, #216]	; (800f554 <xTaskIncrementTick+0x158>)
 800f47a:	f04f 32ff 	mov.w	r2, #4294967295
 800f47e:	601a      	str	r2, [r3, #0]
					break;
 800f480:	e03e      	b.n	800f500 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f482:	4b31      	ldr	r3, [pc, #196]	; (800f548 <xTaskIncrementTick+0x14c>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f492:	693a      	ldr	r2, [r7, #16]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	429a      	cmp	r2, r3
 800f498:	d203      	bcs.n	800f4a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f49a:	4a2e      	ldr	r2, [pc, #184]	; (800f554 <xTaskIncrementTick+0x158>)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f4a0:	e02e      	b.n	800f500 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fe ff76 	bl	800e398 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d004      	beq.n	800f4be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	3318      	adds	r3, #24
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fe ff6d 	bl	800e398 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	409a      	lsls	r2, r3
 800f4c6:	4b24      	ldr	r3, [pc, #144]	; (800f558 <xTaskIncrementTick+0x15c>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	4a22      	ldr	r2, [pc, #136]	; (800f558 <xTaskIncrementTick+0x15c>)
 800f4ce:	6013      	str	r3, [r2, #0]
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	4a1f      	ldr	r2, [pc, #124]	; (800f55c <xTaskIncrementTick+0x160>)
 800f4de:	441a      	add	r2, r3
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	3304      	adds	r3, #4
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	4610      	mov	r0, r2
 800f4e8:	f7fe fef9 	bl	800e2de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f0:	4b1b      	ldr	r3, [pc, #108]	; (800f560 <xTaskIncrementTick+0x164>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d3b9      	bcc.n	800f46e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f4fe:	e7b6      	b.n	800f46e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f500:	4b17      	ldr	r3, [pc, #92]	; (800f560 <xTaskIncrementTick+0x164>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f506:	4915      	ldr	r1, [pc, #84]	; (800f55c <xTaskIncrementTick+0x160>)
 800f508:	4613      	mov	r3, r2
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4413      	add	r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	440b      	add	r3, r1
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b01      	cmp	r3, #1
 800f516:	d907      	bls.n	800f528 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800f518:	2301      	movs	r3, #1
 800f51a:	617b      	str	r3, [r7, #20]
 800f51c:	e004      	b.n	800f528 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f51e:	4b11      	ldr	r3, [pc, #68]	; (800f564 <xTaskIncrementTick+0x168>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3301      	adds	r3, #1
 800f524:	4a0f      	ldr	r2, [pc, #60]	; (800f564 <xTaskIncrementTick+0x168>)
 800f526:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f528:	4b0f      	ldr	r3, [pc, #60]	; (800f568 <xTaskIncrementTick+0x16c>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d001      	beq.n	800f534 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800f530:	2301      	movs	r3, #1
 800f532:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f534:	697b      	ldr	r3, [r7, #20]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	20000698 	.word	0x20000698
 800f544:	20000674 	.word	0x20000674
 800f548:	20000628 	.word	0x20000628
 800f54c:	2000062c 	.word	0x2000062c
 800f550:	20000688 	.word	0x20000688
 800f554:	20000690 	.word	0x20000690
 800f558:	20000678 	.word	0x20000678
 800f55c:	20000574 	.word	0x20000574
 800f560:	20000570 	.word	0x20000570
 800f564:	20000680 	.word	0x20000680
 800f568:	20000684 	.word	0x20000684

0800f56c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f572:	4b39      	ldr	r3, [pc, #228]	; (800f658 <vTaskSwitchContext+0xec>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d003      	beq.n	800f582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f57a:	4b38      	ldr	r3, [pc, #224]	; (800f65c <vTaskSwitchContext+0xf0>)
 800f57c:	2201      	movs	r2, #1
 800f57e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f580:	e065      	b.n	800f64e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800f582:	4b36      	ldr	r3, [pc, #216]	; (800f65c <vTaskSwitchContext+0xf0>)
 800f584:	2200      	movs	r2, #0
 800f586:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f588:	4b35      	ldr	r3, [pc, #212]	; (800f660 <vTaskSwitchContext+0xf4>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f58e:	61fb      	str	r3, [r7, #28]
 800f590:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800f594:	61bb      	str	r3, [r7, #24]
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	69ba      	ldr	r2, [r7, #24]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d111      	bne.n	800f5c4 <vTaskSwitchContext+0x58>
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	3304      	adds	r3, #4
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	69ba      	ldr	r2, [r7, #24]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d10b      	bne.n	800f5c4 <vTaskSwitchContext+0x58>
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	3308      	adds	r3, #8
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	69ba      	ldr	r2, [r7, #24]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d105      	bne.n	800f5c4 <vTaskSwitchContext+0x58>
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	330c      	adds	r3, #12
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	69ba      	ldr	r2, [r7, #24]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d008      	beq.n	800f5d6 <vTaskSwitchContext+0x6a>
 800f5c4:	4b26      	ldr	r3, [pc, #152]	; (800f660 <vTaskSwitchContext+0xf4>)
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	4b25      	ldr	r3, [pc, #148]	; (800f660 <vTaskSwitchContext+0xf4>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3334      	adds	r3, #52	; 0x34
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	f7f1 f910 	bl	80007f6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5d6:	4b23      	ldr	r3, [pc, #140]	; (800f664 <vTaskSwitchContext+0xf8>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	fab3 f383 	clz	r3, r3
 800f5e2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f5e4:	7afb      	ldrb	r3, [r7, #11]
 800f5e6:	f1c3 031f 	rsb	r3, r3, #31
 800f5ea:	617b      	str	r3, [r7, #20]
 800f5ec:	491e      	ldr	r1, [pc, #120]	; (800f668 <vTaskSwitchContext+0xfc>)
 800f5ee:	697a      	ldr	r2, [r7, #20]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	4413      	add	r3, r2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	440b      	add	r3, r1
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d109      	bne.n	800f614 <vTaskSwitchContext+0xa8>
	__asm volatile
 800f600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f604:	f383 8811 	msr	BASEPRI, r3
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	607b      	str	r3, [r7, #4]
 800f612:	e7fe      	b.n	800f612 <vTaskSwitchContext+0xa6>
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	4613      	mov	r3, r2
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	4413      	add	r3, r2
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4a12      	ldr	r2, [pc, #72]	; (800f668 <vTaskSwitchContext+0xfc>)
 800f620:	4413      	add	r3, r2
 800f622:	613b      	str	r3, [r7, #16]
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	685a      	ldr	r2, [r3, #4]
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	605a      	str	r2, [r3, #4]
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	685a      	ldr	r2, [r3, #4]
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	3308      	adds	r3, #8
 800f636:	429a      	cmp	r2, r3
 800f638:	d104      	bne.n	800f644 <vTaskSwitchContext+0xd8>
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	685a      	ldr	r2, [r3, #4]
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	605a      	str	r2, [r3, #4]
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	4a05      	ldr	r2, [pc, #20]	; (800f660 <vTaskSwitchContext+0xf4>)
 800f64c:	6013      	str	r3, [r2, #0]
}
 800f64e:	bf00      	nop
 800f650:	3720      	adds	r7, #32
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20000698 	.word	0x20000698
 800f65c:	20000684 	.word	0x20000684
 800f660:	20000570 	.word	0x20000570
 800f664:	20000678 	.word	0x20000678
 800f668:	20000574 	.word	0x20000574

0800f66c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d109      	bne.n	800f690 <vTaskPlaceOnEventList+0x24>
 800f67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	60fb      	str	r3, [r7, #12]
 800f68e:	e7fe      	b.n	800f68e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f690:	4b07      	ldr	r3, [pc, #28]	; (800f6b0 <vTaskPlaceOnEventList+0x44>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3318      	adds	r3, #24
 800f696:	4619      	mov	r1, r3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f7fe fe44 	bl	800e326 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f69e:	2101      	movs	r1, #1
 800f6a0:	6838      	ldr	r0, [r7, #0]
 800f6a2:	f000 fa61 	bl	800fb68 <prvAddCurrentTaskToDelayedList>
}
 800f6a6:	bf00      	nop
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20000570 	.word	0x20000570

0800f6b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b086      	sub	sp, #24
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d109      	bne.n	800f6de <xTaskRemoveFromEventList+0x2a>
 800f6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ce:	f383 8811 	msr	BASEPRI, r3
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	f3bf 8f4f 	dsb	sy
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	e7fe      	b.n	800f6dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	3318      	adds	r3, #24
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe fe58 	bl	800e398 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6e8:	4b1d      	ldr	r3, [pc, #116]	; (800f760 <xTaskRemoveFromEventList+0xac>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d11c      	bne.n	800f72a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	3304      	adds	r3, #4
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fe fe4f 	bl	800e398 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6fe:	2201      	movs	r2, #1
 800f700:	409a      	lsls	r2, r3
 800f702:	4b18      	ldr	r3, [pc, #96]	; (800f764 <xTaskRemoveFromEventList+0xb0>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4313      	orrs	r3, r2
 800f708:	4a16      	ldr	r2, [pc, #88]	; (800f764 <xTaskRemoveFromEventList+0xb0>)
 800f70a:	6013      	str	r3, [r2, #0]
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f710:	4613      	mov	r3, r2
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	4413      	add	r3, r2
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	4a13      	ldr	r2, [pc, #76]	; (800f768 <xTaskRemoveFromEventList+0xb4>)
 800f71a:	441a      	add	r2, r3
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	3304      	adds	r3, #4
 800f720:	4619      	mov	r1, r3
 800f722:	4610      	mov	r0, r2
 800f724:	f7fe fddb 	bl	800e2de <vListInsertEnd>
 800f728:	e005      	b.n	800f736 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	3318      	adds	r3, #24
 800f72e:	4619      	mov	r1, r3
 800f730:	480e      	ldr	r0, [pc, #56]	; (800f76c <xTaskRemoveFromEventList+0xb8>)
 800f732:	f7fe fdd4 	bl	800e2de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73a:	4b0d      	ldr	r3, [pc, #52]	; (800f770 <xTaskRemoveFromEventList+0xbc>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f740:	429a      	cmp	r2, r3
 800f742:	d905      	bls.n	800f750 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f744:	2301      	movs	r3, #1
 800f746:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f748:	4b0a      	ldr	r3, [pc, #40]	; (800f774 <xTaskRemoveFromEventList+0xc0>)
 800f74a:	2201      	movs	r2, #1
 800f74c:	601a      	str	r2, [r3, #0]
 800f74e:	e001      	b.n	800f754 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800f750:	2300      	movs	r3, #0
 800f752:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f754:	697b      	ldr	r3, [r7, #20]
}
 800f756:	4618      	mov	r0, r3
 800f758:	3718      	adds	r7, #24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	20000698 	.word	0x20000698
 800f764:	20000678 	.word	0x20000678
 800f768:	20000574 	.word	0x20000574
 800f76c:	20000630 	.word	0x20000630
 800f770:	20000570 	.word	0x20000570
 800f774:	20000684 	.word	0x20000684

0800f778 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f780:	4b06      	ldr	r3, [pc, #24]	; (800f79c <vTaskInternalSetTimeOutState+0x24>)
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f788:	4b05      	ldr	r3, [pc, #20]	; (800f7a0 <vTaskInternalSetTimeOutState+0x28>)
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	605a      	str	r2, [r3, #4]
}
 800f790:	bf00      	nop
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr
 800f79c:	20000688 	.word	0x20000688
 800f7a0:	20000674 	.word	0x20000674

0800f7a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b088      	sub	sp, #32
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d109      	bne.n	800f7c8 <xTaskCheckForTimeOut+0x24>
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	f383 8811 	msr	BASEPRI, r3
 800f7bc:	f3bf 8f6f 	isb	sy
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	613b      	str	r3, [r7, #16]
 800f7c6:	e7fe      	b.n	800f7c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d109      	bne.n	800f7e2 <xTaskCheckForTimeOut+0x3e>
 800f7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d2:	f383 8811 	msr	BASEPRI, r3
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	60fb      	str	r3, [r7, #12]
 800f7e0:	e7fe      	b.n	800f7e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f7e2:	f000 fb4b 	bl	800fe7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f7e6:	4b1d      	ldr	r3, [pc, #116]	; (800f85c <xTaskCheckForTimeOut+0xb8>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	69ba      	ldr	r2, [r7, #24]
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7fe:	d102      	bne.n	800f806 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f800:	2300      	movs	r3, #0
 800f802:	61fb      	str	r3, [r7, #28]
 800f804:	e023      	b.n	800f84e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	4b15      	ldr	r3, [pc, #84]	; (800f860 <xTaskCheckForTimeOut+0xbc>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d007      	beq.n	800f822 <xTaskCheckForTimeOut+0x7e>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	69ba      	ldr	r2, [r7, #24]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d302      	bcc.n	800f822 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f81c:	2301      	movs	r3, #1
 800f81e:	61fb      	str	r3, [r7, #28]
 800f820:	e015      	b.n	800f84e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	697a      	ldr	r2, [r7, #20]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d20b      	bcs.n	800f844 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	1ad2      	subs	r2, r2, r3
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7ff ff9d 	bl	800f778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f83e:	2300      	movs	r3, #0
 800f840:	61fb      	str	r3, [r7, #28]
 800f842:	e004      	b.n	800f84e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	2200      	movs	r2, #0
 800f848:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f84a:	2301      	movs	r3, #1
 800f84c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f84e:	f000 fb43 	bl	800fed8 <vPortExitCritical>

	return xReturn;
 800f852:	69fb      	ldr	r3, [r7, #28]
}
 800f854:	4618      	mov	r0, r3
 800f856:	3720      	adds	r7, #32
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	20000674 	.word	0x20000674
 800f860:	20000688 	.word	0x20000688

0800f864 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f864:	b480      	push	{r7}
 800f866:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f868:	4b03      	ldr	r3, [pc, #12]	; (800f878 <vTaskMissedYield+0x14>)
 800f86a:	2201      	movs	r2, #1
 800f86c:	601a      	str	r2, [r3, #0]
}
 800f86e:	bf00      	nop
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	20000684 	.word	0x20000684

0800f87c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f884:	f000 f854 	bl	800f930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f888:	4b07      	ldr	r3, [pc, #28]	; (800f8a8 <prvIdleTask+0x2c>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d907      	bls.n	800f8a0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f890:	4b06      	ldr	r3, [pc, #24]	; (800f8ac <prvIdleTask+0x30>)
 800f892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f896:	601a      	str	r2, [r3, #0]
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800f8a0:	f7f0 ffa2 	bl	80007e8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f8a4:	e7ee      	b.n	800f884 <prvIdleTask+0x8>
 800f8a6:	bf00      	nop
 800f8a8:	20000574 	.word	0x20000574
 800f8ac:	e000ed04 	.word	0xe000ed04

0800f8b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	607b      	str	r3, [r7, #4]
 800f8ba:	e00c      	b.n	800f8d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	4613      	mov	r3, r2
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	4413      	add	r3, r2
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	4a12      	ldr	r2, [pc, #72]	; (800f910 <prvInitialiseTaskLists+0x60>)
 800f8c8:	4413      	add	r3, r2
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fe fcda 	bl	800e284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	607b      	str	r3, [r7, #4]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2b06      	cmp	r3, #6
 800f8da:	d9ef      	bls.n	800f8bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f8dc:	480d      	ldr	r0, [pc, #52]	; (800f914 <prvInitialiseTaskLists+0x64>)
 800f8de:	f7fe fcd1 	bl	800e284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8e2:	480d      	ldr	r0, [pc, #52]	; (800f918 <prvInitialiseTaskLists+0x68>)
 800f8e4:	f7fe fcce 	bl	800e284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8e8:	480c      	ldr	r0, [pc, #48]	; (800f91c <prvInitialiseTaskLists+0x6c>)
 800f8ea:	f7fe fccb 	bl	800e284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f8ee:	480c      	ldr	r0, [pc, #48]	; (800f920 <prvInitialiseTaskLists+0x70>)
 800f8f0:	f7fe fcc8 	bl	800e284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8f4:	480b      	ldr	r0, [pc, #44]	; (800f924 <prvInitialiseTaskLists+0x74>)
 800f8f6:	f7fe fcc5 	bl	800e284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8fa:	4b0b      	ldr	r3, [pc, #44]	; (800f928 <prvInitialiseTaskLists+0x78>)
 800f8fc:	4a05      	ldr	r2, [pc, #20]	; (800f914 <prvInitialiseTaskLists+0x64>)
 800f8fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f900:	4b0a      	ldr	r3, [pc, #40]	; (800f92c <prvInitialiseTaskLists+0x7c>)
 800f902:	4a05      	ldr	r2, [pc, #20]	; (800f918 <prvInitialiseTaskLists+0x68>)
 800f904:	601a      	str	r2, [r3, #0]
}
 800f906:	bf00      	nop
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	20000574 	.word	0x20000574
 800f914:	20000600 	.word	0x20000600
 800f918:	20000614 	.word	0x20000614
 800f91c:	20000630 	.word	0x20000630
 800f920:	20000644 	.word	0x20000644
 800f924:	2000065c 	.word	0x2000065c
 800f928:	20000628 	.word	0x20000628
 800f92c:	2000062c 	.word	0x2000062c

0800f930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f936:	e019      	b.n	800f96c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f938:	f000 faa0 	bl	800fe7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f93c:	4b0f      	ldr	r3, [pc, #60]	; (800f97c <prvCheckTasksWaitingTermination+0x4c>)
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	3304      	adds	r3, #4
 800f948:	4618      	mov	r0, r3
 800f94a:	f7fe fd25 	bl	800e398 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f94e:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <prvCheckTasksWaitingTermination+0x50>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3b01      	subs	r3, #1
 800f954:	4a0a      	ldr	r2, [pc, #40]	; (800f980 <prvCheckTasksWaitingTermination+0x50>)
 800f956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f958:	4b0a      	ldr	r3, [pc, #40]	; (800f984 <prvCheckTasksWaitingTermination+0x54>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	3b01      	subs	r3, #1
 800f95e:	4a09      	ldr	r2, [pc, #36]	; (800f984 <prvCheckTasksWaitingTermination+0x54>)
 800f960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f962:	f000 fab9 	bl	800fed8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 f80e 	bl	800f988 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f96c:	4b05      	ldr	r3, [pc, #20]	; (800f984 <prvCheckTasksWaitingTermination+0x54>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1e1      	bne.n	800f938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f974:	bf00      	nop
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	20000644 	.word	0x20000644
 800f980:	20000670 	.word	0x20000670
 800f984:	20000658 	.word	0x20000658

0800f988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f996:	2b00      	cmp	r3, #0
 800f998:	d108      	bne.n	800f9ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f000 fc4c 	bl	801023c <vPortFree>
				vPortFree( pxTCB );
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 fc49 	bl	801023c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f9aa:	e017      	b.n	800f9dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d103      	bne.n	800f9be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fc40 	bl	801023c <vPortFree>
	}
 800f9bc:	e00e      	b.n	800f9dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f9c4:	2b02      	cmp	r3, #2
 800f9c6:	d009      	beq.n	800f9dc <prvDeleteTCB+0x54>
 800f9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9cc:	f383 8811 	msr	BASEPRI, r3
 800f9d0:	f3bf 8f6f 	isb	sy
 800f9d4:	f3bf 8f4f 	dsb	sy
 800f9d8:	60fb      	str	r3, [r7, #12]
 800f9da:	e7fe      	b.n	800f9da <prvDeleteTCB+0x52>
	}
 800f9dc:	bf00      	nop
 800f9de:	3710      	adds	r7, #16
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9ea:	4b0c      	ldr	r3, [pc, #48]	; (800fa1c <prvResetNextTaskUnblockTime+0x38>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d104      	bne.n	800f9fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9f4:	4b0a      	ldr	r3, [pc, #40]	; (800fa20 <prvResetNextTaskUnblockTime+0x3c>)
 800f9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9fc:	e008      	b.n	800fa10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9fe:	4b07      	ldr	r3, [pc, #28]	; (800fa1c <prvResetNextTaskUnblockTime+0x38>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	4a04      	ldr	r2, [pc, #16]	; (800fa20 <prvResetNextTaskUnblockTime+0x3c>)
 800fa0e:	6013      	str	r3, [r2, #0]
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr
 800fa1c:	20000628 	.word	0x20000628
 800fa20:	20000690 	.word	0x20000690

0800fa24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fa2a:	4b0b      	ldr	r3, [pc, #44]	; (800fa58 <xTaskGetSchedulerState+0x34>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d102      	bne.n	800fa38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa32:	2301      	movs	r3, #1
 800fa34:	607b      	str	r3, [r7, #4]
 800fa36:	e008      	b.n	800fa4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa38:	4b08      	ldr	r3, [pc, #32]	; (800fa5c <xTaskGetSchedulerState+0x38>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d102      	bne.n	800fa46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa40:	2302      	movs	r3, #2
 800fa42:	607b      	str	r3, [r7, #4]
 800fa44:	e001      	b.n	800fa4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa46:	2300      	movs	r3, #0
 800fa48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa4a:	687b      	ldr	r3, [r7, #4]
	}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr
 800fa58:	2000067c 	.word	0x2000067c
 800fa5c:	20000698 	.word	0x20000698

0800fa60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b086      	sub	sp, #24
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d06c      	beq.n	800fb50 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fa76:	4b39      	ldr	r3, [pc, #228]	; (800fb5c <xTaskPriorityDisinherit+0xfc>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	693a      	ldr	r2, [r7, #16]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d009      	beq.n	800fa94 <xTaskPriorityDisinherit+0x34>
 800fa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	60fb      	str	r3, [r7, #12]
 800fa92:	e7fe      	b.n	800fa92 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d109      	bne.n	800fab0 <xTaskPriorityDisinherit+0x50>
 800fa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa0:	f383 8811 	msr	BASEPRI, r3
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	60bb      	str	r3, [r7, #8]
 800faae:	e7fe      	b.n	800faae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fab4:	1e5a      	subs	r2, r3, #1
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d044      	beq.n	800fb50 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faca:	2b00      	cmp	r3, #0
 800facc:	d140      	bne.n	800fb50 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	3304      	adds	r3, #4
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe fc60 	bl	800e398 <uxListRemove>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d115      	bne.n	800fb0a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fae2:	491f      	ldr	r1, [pc, #124]	; (800fb60 <xTaskPriorityDisinherit+0x100>)
 800fae4:	4613      	mov	r3, r2
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	4413      	add	r3, r2
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	440b      	add	r3, r1
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d10a      	bne.n	800fb0a <xTaskPriorityDisinherit+0xaa>
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf8:	2201      	movs	r2, #1
 800fafa:	fa02 f303 	lsl.w	r3, r2, r3
 800fafe:	43da      	mvns	r2, r3
 800fb00:	4b18      	ldr	r3, [pc, #96]	; (800fb64 <xTaskPriorityDisinherit+0x104>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4013      	ands	r3, r2
 800fb06:	4a17      	ldr	r2, [pc, #92]	; (800fb64 <xTaskPriorityDisinherit+0x104>)
 800fb08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb16:	f1c3 0207 	rsb	r2, r3, #7
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb22:	2201      	movs	r2, #1
 800fb24:	409a      	lsls	r2, r3
 800fb26:	4b0f      	ldr	r3, [pc, #60]	; (800fb64 <xTaskPriorityDisinherit+0x104>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	4a0d      	ldr	r2, [pc, #52]	; (800fb64 <xTaskPriorityDisinherit+0x104>)
 800fb2e:	6013      	str	r3, [r2, #0]
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb34:	4613      	mov	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	4413      	add	r3, r2
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	4a08      	ldr	r2, [pc, #32]	; (800fb60 <xTaskPriorityDisinherit+0x100>)
 800fb3e:	441a      	add	r2, r3
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	3304      	adds	r3, #4
 800fb44:	4619      	mov	r1, r3
 800fb46:	4610      	mov	r0, r2
 800fb48:	f7fe fbc9 	bl	800e2de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb50:	697b      	ldr	r3, [r7, #20]
	}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3718      	adds	r7, #24
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	20000570 	.word	0x20000570
 800fb60:	20000574 	.word	0x20000574
 800fb64:	20000678 	.word	0x20000678

0800fb68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb72:	4b29      	ldr	r3, [pc, #164]	; (800fc18 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb78:	4b28      	ldr	r3, [pc, #160]	; (800fc1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	3304      	adds	r3, #4
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe fc0a 	bl	800e398 <uxListRemove>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d10b      	bne.n	800fba2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fb8a:	4b24      	ldr	r3, [pc, #144]	; (800fc1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb90:	2201      	movs	r2, #1
 800fb92:	fa02 f303 	lsl.w	r3, r2, r3
 800fb96:	43da      	mvns	r2, r3
 800fb98:	4b21      	ldr	r3, [pc, #132]	; (800fc20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	4a20      	ldr	r2, [pc, #128]	; (800fc20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fba0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba8:	d10a      	bne.n	800fbc0 <prvAddCurrentTaskToDelayedList+0x58>
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d007      	beq.n	800fbc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbb0:	4b1a      	ldr	r3, [pc, #104]	; (800fc1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	481a      	ldr	r0, [pc, #104]	; (800fc24 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fbba:	f7fe fb90 	bl	800e2de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fbbe:	e026      	b.n	800fc0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fbc8:	4b14      	ldr	r3, [pc, #80]	; (800fc1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	68ba      	ldr	r2, [r7, #8]
 800fbce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fbd0:	68ba      	ldr	r2, [r7, #8]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d209      	bcs.n	800fbec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbd8:	4b13      	ldr	r3, [pc, #76]	; (800fc28 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3304      	adds	r3, #4
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	4610      	mov	r0, r2
 800fbe6:	f7fe fb9e 	bl	800e326 <vListInsert>
}
 800fbea:	e010      	b.n	800fc0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbec:	4b0f      	ldr	r3, [pc, #60]	; (800fc2c <prvAddCurrentTaskToDelayedList+0xc4>)
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	4b0a      	ldr	r3, [pc, #40]	; (800fc1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	f7fe fb94 	bl	800e326 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fbfe:	4b0c      	ldr	r3, [pc, #48]	; (800fc30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68ba      	ldr	r2, [r7, #8]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d202      	bcs.n	800fc0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fc08:	4a09      	ldr	r2, [pc, #36]	; (800fc30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	6013      	str	r3, [r2, #0]
}
 800fc0e:	bf00      	nop
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	20000674 	.word	0x20000674
 800fc1c:	20000570 	.word	0x20000570
 800fc20:	20000678 	.word	0x20000678
 800fc24:	2000065c 	.word	0x2000065c
 800fc28:	2000062c 	.word	0x2000062c
 800fc2c:	20000628 	.word	0x20000628
 800fc30:	20000690 	.word	0x20000690

0800fc34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc34:	b480      	push	{r7}
 800fc36:	b085      	sub	sp, #20
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	3b04      	subs	r3, #4
 800fc44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fc4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3b04      	subs	r3, #4
 800fc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	f023 0201 	bic.w	r2, r3, #1
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	3b04      	subs	r3, #4
 800fc62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc64:	4a0c      	ldr	r2, [pc, #48]	; (800fc98 <pxPortInitialiseStack+0x64>)
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	3b14      	subs	r3, #20
 800fc6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	3b04      	subs	r3, #4
 800fc7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f06f 0202 	mvn.w	r2, #2
 800fc82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	3b20      	subs	r3, #32
 800fc88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	0800fc9d 	.word	0x0800fc9d

0800fc9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fca2:	2300      	movs	r3, #0
 800fca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fca6:	4b11      	ldr	r3, [pc, #68]	; (800fcec <prvTaskExitError+0x50>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcae:	d009      	beq.n	800fcc4 <prvTaskExitError+0x28>
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	60fb      	str	r3, [r7, #12]
 800fcc2:	e7fe      	b.n	800fcc2 <prvTaskExitError+0x26>
 800fcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fcd6:	bf00      	nop
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d0fc      	beq.n	800fcd8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fcde:	bf00      	nop
 800fce0:	3714      	adds	r7, #20
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	200000a8 	.word	0x200000a8

0800fcf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fcf0:	4b07      	ldr	r3, [pc, #28]	; (800fd10 <pxCurrentTCBConst2>)
 800fcf2:	6819      	ldr	r1, [r3, #0]
 800fcf4:	6808      	ldr	r0, [r1, #0]
 800fcf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfa:	f380 8809 	msr	PSP, r0
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f04f 0000 	mov.w	r0, #0
 800fd06:	f380 8811 	msr	BASEPRI, r0
 800fd0a:	4770      	bx	lr
 800fd0c:	f3af 8000 	nop.w

0800fd10 <pxCurrentTCBConst2>:
 800fd10:	20000570 	.word	0x20000570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd14:	bf00      	nop
 800fd16:	bf00      	nop

0800fd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd18:	4808      	ldr	r0, [pc, #32]	; (800fd3c <prvPortStartFirstTask+0x24>)
 800fd1a:	6800      	ldr	r0, [r0, #0]
 800fd1c:	6800      	ldr	r0, [r0, #0]
 800fd1e:	f380 8808 	msr	MSP, r0
 800fd22:	f04f 0000 	mov.w	r0, #0
 800fd26:	f380 8814 	msr	CONTROL, r0
 800fd2a:	b662      	cpsie	i
 800fd2c:	b661      	cpsie	f
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	f3bf 8f6f 	isb	sy
 800fd36:	df00      	svc	0
 800fd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd3a:	bf00      	nop
 800fd3c:	e000ed08 	.word	0xe000ed08

0800fd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd46:	4b44      	ldr	r3, [pc, #272]	; (800fe58 <xPortStartScheduler+0x118>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a44      	ldr	r2, [pc, #272]	; (800fe5c <xPortStartScheduler+0x11c>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d109      	bne.n	800fd64 <xPortStartScheduler+0x24>
 800fd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd54:	f383 8811 	msr	BASEPRI, r3
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	613b      	str	r3, [r7, #16]
 800fd62:	e7fe      	b.n	800fd62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd64:	4b3c      	ldr	r3, [pc, #240]	; (800fe58 <xPortStartScheduler+0x118>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a3d      	ldr	r2, [pc, #244]	; (800fe60 <xPortStartScheduler+0x120>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d109      	bne.n	800fd82 <xPortStartScheduler+0x42>
 800fd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd72:	f383 8811 	msr	BASEPRI, r3
 800fd76:	f3bf 8f6f 	isb	sy
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	60fb      	str	r3, [r7, #12]
 800fd80:	e7fe      	b.n	800fd80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd82:	4b38      	ldr	r3, [pc, #224]	; (800fe64 <xPortStartScheduler+0x124>)
 800fd84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	22ff      	movs	r2, #255	; 0xff
 800fd92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd9c:	78fb      	ldrb	r3, [r7, #3]
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	4b30      	ldr	r3, [pc, #192]	; (800fe68 <xPortStartScheduler+0x128>)
 800fda8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fdaa:	4b30      	ldr	r3, [pc, #192]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fdac:	2207      	movs	r2, #7
 800fdae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdb0:	e009      	b.n	800fdc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fdb2:	4b2e      	ldr	r3, [pc, #184]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	4a2c      	ldr	r2, [pc, #176]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fdba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fdbc:	78fb      	ldrb	r3, [r7, #3]
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	005b      	lsls	r3, r3, #1
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdc6:	78fb      	ldrb	r3, [r7, #3]
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdce:	2b80      	cmp	r3, #128	; 0x80
 800fdd0:	d0ef      	beq.n	800fdb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fdd2:	4b26      	ldr	r3, [pc, #152]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f1c3 0307 	rsb	r3, r3, #7
 800fdda:	2b04      	cmp	r3, #4
 800fddc:	d009      	beq.n	800fdf2 <xPortStartScheduler+0xb2>
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	60bb      	str	r3, [r7, #8]
 800fdf0:	e7fe      	b.n	800fdf0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fdf2:	4b1e      	ldr	r3, [pc, #120]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	021b      	lsls	r3, r3, #8
 800fdf8:	4a1c      	ldr	r2, [pc, #112]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fdfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fdfc:	4b1b      	ldr	r3, [pc, #108]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe04:	4a19      	ldr	r2, [pc, #100]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fe06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	b2da      	uxtb	r2, r3
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe10:	4b17      	ldr	r3, [pc, #92]	; (800fe70 <xPortStartScheduler+0x130>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4a16      	ldr	r2, [pc, #88]	; (800fe70 <xPortStartScheduler+0x130>)
 800fe16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe1c:	4b14      	ldr	r3, [pc, #80]	; (800fe70 <xPortStartScheduler+0x130>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4a13      	ldr	r2, [pc, #76]	; (800fe70 <xPortStartScheduler+0x130>)
 800fe22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe28:	f000 f8d6 	bl	800ffd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe2c:	4b11      	ldr	r3, [pc, #68]	; (800fe74 <xPortStartScheduler+0x134>)
 800fe2e:	2200      	movs	r2, #0
 800fe30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe32:	f000 f8f5 	bl	8010020 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe36:	4b10      	ldr	r3, [pc, #64]	; (800fe78 <xPortStartScheduler+0x138>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4a0f      	ldr	r2, [pc, #60]	; (800fe78 <xPortStartScheduler+0x138>)
 800fe3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe42:	f7ff ff69 	bl	800fd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe46:	f7ff fb91 	bl	800f56c <vTaskSwitchContext>
	prvTaskExitError();
 800fe4a:	f7ff ff27 	bl	800fc9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3718      	adds	r7, #24
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	e000ed00 	.word	0xe000ed00
 800fe5c:	410fc271 	.word	0x410fc271
 800fe60:	410fc270 	.word	0x410fc270
 800fe64:	e000e400 	.word	0xe000e400
 800fe68:	2000069c 	.word	0x2000069c
 800fe6c:	200006a0 	.word	0x200006a0
 800fe70:	e000ed20 	.word	0xe000ed20
 800fe74:	200000a8 	.word	0x200000a8
 800fe78:	e000ef34 	.word	0xe000ef34

0800fe7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe86:	f383 8811 	msr	BASEPRI, r3
 800fe8a:	f3bf 8f6f 	isb	sy
 800fe8e:	f3bf 8f4f 	dsb	sy
 800fe92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fe94:	4b0e      	ldr	r3, [pc, #56]	; (800fed0 <vPortEnterCritical+0x54>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	4a0d      	ldr	r2, [pc, #52]	; (800fed0 <vPortEnterCritical+0x54>)
 800fe9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fe9e:	4b0c      	ldr	r3, [pc, #48]	; (800fed0 <vPortEnterCritical+0x54>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d10e      	bne.n	800fec4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fea6:	4b0b      	ldr	r3, [pc, #44]	; (800fed4 <vPortEnterCritical+0x58>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d009      	beq.n	800fec4 <vPortEnterCritical+0x48>
 800feb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	603b      	str	r3, [r7, #0]
 800fec2:	e7fe      	b.n	800fec2 <vPortEnterCritical+0x46>
	}
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr
 800fed0:	200000a8 	.word	0x200000a8
 800fed4:	e000ed04 	.word	0xe000ed04

0800fed8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fede:	4b11      	ldr	r3, [pc, #68]	; (800ff24 <vPortExitCritical+0x4c>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d109      	bne.n	800fefa <vPortExitCritical+0x22>
 800fee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feea:	f383 8811 	msr	BASEPRI, r3
 800feee:	f3bf 8f6f 	isb	sy
 800fef2:	f3bf 8f4f 	dsb	sy
 800fef6:	607b      	str	r3, [r7, #4]
 800fef8:	e7fe      	b.n	800fef8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fefa:	4b0a      	ldr	r3, [pc, #40]	; (800ff24 <vPortExitCritical+0x4c>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	3b01      	subs	r3, #1
 800ff00:	4a08      	ldr	r2, [pc, #32]	; (800ff24 <vPortExitCritical+0x4c>)
 800ff02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff04:	4b07      	ldr	r3, [pc, #28]	; (800ff24 <vPortExitCritical+0x4c>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d104      	bne.n	800ff16 <vPortExitCritical+0x3e>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff16:	bf00      	nop
 800ff18:	370c      	adds	r7, #12
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	200000a8 	.word	0x200000a8
	...

0800ff30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff30:	f3ef 8009 	mrs	r0, PSP
 800ff34:	f3bf 8f6f 	isb	sy
 800ff38:	4b15      	ldr	r3, [pc, #84]	; (800ff90 <pxCurrentTCBConst>)
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	f01e 0f10 	tst.w	lr, #16
 800ff40:	bf08      	it	eq
 800ff42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4a:	6010      	str	r0, [r2, #0]
 800ff4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ff54:	f380 8811 	msr	BASEPRI, r0
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	f3bf 8f6f 	isb	sy
 800ff60:	f7ff fb04 	bl	800f56c <vTaskSwitchContext>
 800ff64:	f04f 0000 	mov.w	r0, #0
 800ff68:	f380 8811 	msr	BASEPRI, r0
 800ff6c:	bc09      	pop	{r0, r3}
 800ff6e:	6819      	ldr	r1, [r3, #0]
 800ff70:	6808      	ldr	r0, [r1, #0]
 800ff72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff76:	f01e 0f10 	tst.w	lr, #16
 800ff7a:	bf08      	it	eq
 800ff7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ff80:	f380 8809 	msr	PSP, r0
 800ff84:	f3bf 8f6f 	isb	sy
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	f3af 8000 	nop.w

0800ff90 <pxCurrentTCBConst>:
 800ff90:	20000570 	.word	0x20000570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ff94:	bf00      	nop
 800ff96:	bf00      	nop

0800ff98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa2:	f383 8811 	msr	BASEPRI, r3
 800ffa6:	f3bf 8f6f 	isb	sy
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ffb0:	f7ff fa24 	bl	800f3fc <xTaskIncrementTick>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d003      	beq.n	800ffc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ffba:	4b06      	ldr	r3, [pc, #24]	; (800ffd4 <SysTick_Handler+0x3c>)
 800ffbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffc0:	601a      	str	r2, [r3, #0]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ffcc:	bf00      	nop
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	e000ed04 	.word	0xe000ed04

0800ffd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ffd8:	b480      	push	{r7}
 800ffda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ffdc:	4b0b      	ldr	r3, [pc, #44]	; (801000c <vPortSetupTimerInterrupt+0x34>)
 800ffde:	2200      	movs	r2, #0
 800ffe0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ffe2:	4b0b      	ldr	r3, [pc, #44]	; (8010010 <vPortSetupTimerInterrupt+0x38>)
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ffe8:	4b0a      	ldr	r3, [pc, #40]	; (8010014 <vPortSetupTimerInterrupt+0x3c>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a0a      	ldr	r2, [pc, #40]	; (8010018 <vPortSetupTimerInterrupt+0x40>)
 800ffee:	fba2 2303 	umull	r2, r3, r2, r3
 800fff2:	099b      	lsrs	r3, r3, #6
 800fff4:	4a09      	ldr	r2, [pc, #36]	; (801001c <vPortSetupTimerInterrupt+0x44>)
 800fff6:	3b01      	subs	r3, #1
 800fff8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fffa:	4b04      	ldr	r3, [pc, #16]	; (801000c <vPortSetupTimerInterrupt+0x34>)
 800fffc:	2207      	movs	r2, #7
 800fffe:	601a      	str	r2, [r3, #0]
}
 8010000:	bf00      	nop
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	e000e010 	.word	0xe000e010
 8010010:	e000e018 	.word	0xe000e018
 8010014:	20000000 	.word	0x20000000
 8010018:	10624dd3 	.word	0x10624dd3
 801001c:	e000e014 	.word	0xe000e014

08010020 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010020:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010030 <vPortEnableVFP+0x10>
 8010024:	6801      	ldr	r1, [r0, #0]
 8010026:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801002a:	6001      	str	r1, [r0, #0]
 801002c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801002e:	bf00      	nop
 8010030:	e000ed88 	.word	0xe000ed88

08010034 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801003a:	f3ef 8305 	mrs	r3, IPSR
 801003e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2b0f      	cmp	r3, #15
 8010044:	d913      	bls.n	801006e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010046:	4a16      	ldr	r2, [pc, #88]	; (80100a0 <vPortValidateInterruptPriority+0x6c>)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	4413      	add	r3, r2
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010050:	4b14      	ldr	r3, [pc, #80]	; (80100a4 <vPortValidateInterruptPriority+0x70>)
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	7afa      	ldrb	r2, [r7, #11]
 8010056:	429a      	cmp	r2, r3
 8010058:	d209      	bcs.n	801006e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	607b      	str	r3, [r7, #4]
 801006c:	e7fe      	b.n	801006c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801006e:	4b0e      	ldr	r3, [pc, #56]	; (80100a8 <vPortValidateInterruptPriority+0x74>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010076:	4b0d      	ldr	r3, [pc, #52]	; (80100ac <vPortValidateInterruptPriority+0x78>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	429a      	cmp	r2, r3
 801007c:	d909      	bls.n	8010092 <vPortValidateInterruptPriority+0x5e>
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	603b      	str	r3, [r7, #0]
 8010090:	e7fe      	b.n	8010090 <vPortValidateInterruptPriority+0x5c>
	}
 8010092:	bf00      	nop
 8010094:	3714      	adds	r7, #20
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	e000e3f0 	.word	0xe000e3f0
 80100a4:	2000069c 	.word	0x2000069c
 80100a8:	e000ed0c 	.word	0xe000ed0c
 80100ac:	200006a0 	.word	0x200006a0

080100b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b08a      	sub	sp, #40	; 0x28
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80100b8:	2300      	movs	r3, #0
 80100ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80100bc:	f7ff f8f4 	bl	800f2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80100c0:	4b59      	ldr	r3, [pc, #356]	; (8010228 <pvPortMalloc+0x178>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d101      	bne.n	80100cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80100c8:	f000 f910 	bl	80102ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80100cc:	4b57      	ldr	r3, [pc, #348]	; (801022c <pvPortMalloc+0x17c>)
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	4013      	ands	r3, r2
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f040 808c 	bne.w	80101f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d01c      	beq.n	801011a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80100e0:	2208      	movs	r2, #8
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4413      	add	r3, r2
 80100e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f003 0307 	and.w	r3, r3, #7
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d013      	beq.n	801011a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f023 0307 	bic.w	r3, r3, #7
 80100f8:	3308      	adds	r3, #8
 80100fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f003 0307 	and.w	r3, r3, #7
 8010102:	2b00      	cmp	r3, #0
 8010104:	d009      	beq.n	801011a <pvPortMalloc+0x6a>
 8010106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	617b      	str	r3, [r7, #20]
 8010118:	e7fe      	b.n	8010118 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d068      	beq.n	80101f2 <pvPortMalloc+0x142>
 8010120:	4b43      	ldr	r3, [pc, #268]	; (8010230 <pvPortMalloc+0x180>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	429a      	cmp	r2, r3
 8010128:	d863      	bhi.n	80101f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801012a:	4b42      	ldr	r3, [pc, #264]	; (8010234 <pvPortMalloc+0x184>)
 801012c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801012e:	4b41      	ldr	r3, [pc, #260]	; (8010234 <pvPortMalloc+0x184>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010134:	e004      	b.n	8010140 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801013a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	429a      	cmp	r2, r3
 8010148:	d903      	bls.n	8010152 <pvPortMalloc+0xa2>
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d1f1      	bne.n	8010136 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010152:	4b35      	ldr	r3, [pc, #212]	; (8010228 <pvPortMalloc+0x178>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010158:	429a      	cmp	r2, r3
 801015a:	d04a      	beq.n	80101f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801015c:	6a3b      	ldr	r3, [r7, #32]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2208      	movs	r2, #8
 8010162:	4413      	add	r3, r2
 8010164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	6a3b      	ldr	r3, [r7, #32]
 801016c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010170:	685a      	ldr	r2, [r3, #4]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	1ad2      	subs	r2, r2, r3
 8010176:	2308      	movs	r3, #8
 8010178:	005b      	lsls	r3, r3, #1
 801017a:	429a      	cmp	r2, r3
 801017c:	d91e      	bls.n	80101bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801017e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4413      	add	r3, r2
 8010184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	f003 0307 	and.w	r3, r3, #7
 801018c:	2b00      	cmp	r3, #0
 801018e:	d009      	beq.n	80101a4 <pvPortMalloc+0xf4>
 8010190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010194:	f383 8811 	msr	BASEPRI, r3
 8010198:	f3bf 8f6f 	isb	sy
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	613b      	str	r3, [r7, #16]
 80101a2:	e7fe      	b.n	80101a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	685a      	ldr	r2, [r3, #4]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	1ad2      	subs	r2, r2, r3
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80101b6:	69b8      	ldr	r0, [r7, #24]
 80101b8:	f000 f8fa 	bl	80103b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80101bc:	4b1c      	ldr	r3, [pc, #112]	; (8010230 <pvPortMalloc+0x180>)
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	1ad3      	subs	r3, r2, r3
 80101c6:	4a1a      	ldr	r2, [pc, #104]	; (8010230 <pvPortMalloc+0x180>)
 80101c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80101ca:	4b19      	ldr	r3, [pc, #100]	; (8010230 <pvPortMalloc+0x180>)
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	4b1a      	ldr	r3, [pc, #104]	; (8010238 <pvPortMalloc+0x188>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d203      	bcs.n	80101de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80101d6:	4b16      	ldr	r3, [pc, #88]	; (8010230 <pvPortMalloc+0x180>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4a17      	ldr	r2, [pc, #92]	; (8010238 <pvPortMalloc+0x188>)
 80101dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80101de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e0:	685a      	ldr	r2, [r3, #4]
 80101e2:	4b12      	ldr	r3, [pc, #72]	; (801022c <pvPortMalloc+0x17c>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	431a      	orrs	r2, r3
 80101e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80101ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ee:	2200      	movs	r2, #0
 80101f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80101f2:	f7ff f867 	bl	800f2c4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d101      	bne.n	8010200 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80101fc:	f7f0 fb06 	bl	800080c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	f003 0307 	and.w	r3, r3, #7
 8010206:	2b00      	cmp	r3, #0
 8010208:	d009      	beq.n	801021e <pvPortMalloc+0x16e>
 801020a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	60fb      	str	r3, [r7, #12]
 801021c:	e7fe      	b.n	801021c <pvPortMalloc+0x16c>
	return pvReturn;
 801021e:	69fb      	ldr	r3, [r7, #28]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3728      	adds	r7, #40	; 0x28
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	200086ac 	.word	0x200086ac
 801022c:	200086b8 	.word	0x200086b8
 8010230:	200086b0 	.word	0x200086b0
 8010234:	200086a4 	.word	0x200086a4
 8010238:	200086b4 	.word	0x200086b4

0801023c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b086      	sub	sp, #24
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d046      	beq.n	80102dc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801024e:	2308      	movs	r3, #8
 8010250:	425b      	negs	r3, r3
 8010252:	697a      	ldr	r2, [r7, #20]
 8010254:	4413      	add	r3, r2
 8010256:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	685a      	ldr	r2, [r3, #4]
 8010260:	4b20      	ldr	r3, [pc, #128]	; (80102e4 <vPortFree+0xa8>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4013      	ands	r3, r2
 8010266:	2b00      	cmp	r3, #0
 8010268:	d109      	bne.n	801027e <vPortFree+0x42>
 801026a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026e:	f383 8811 	msr	BASEPRI, r3
 8010272:	f3bf 8f6f 	isb	sy
 8010276:	f3bf 8f4f 	dsb	sy
 801027a:	60fb      	str	r3, [r7, #12]
 801027c:	e7fe      	b.n	801027c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <vPortFree+0x5e>
 8010286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028a:	f383 8811 	msr	BASEPRI, r3
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	f3bf 8f4f 	dsb	sy
 8010296:	60bb      	str	r3, [r7, #8]
 8010298:	e7fe      	b.n	8010298 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	685a      	ldr	r2, [r3, #4]
 801029e:	4b11      	ldr	r3, [pc, #68]	; (80102e4 <vPortFree+0xa8>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4013      	ands	r3, r2
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d019      	beq.n	80102dc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d115      	bne.n	80102dc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	685a      	ldr	r2, [r3, #4]
 80102b4:	4b0b      	ldr	r3, [pc, #44]	; (80102e4 <vPortFree+0xa8>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	43db      	mvns	r3, r3
 80102ba:	401a      	ands	r2, r3
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80102c0:	f7fe fff2 	bl	800f2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	4b07      	ldr	r3, [pc, #28]	; (80102e8 <vPortFree+0xac>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4413      	add	r3, r2
 80102ce:	4a06      	ldr	r2, [pc, #24]	; (80102e8 <vPortFree+0xac>)
 80102d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80102d2:	6938      	ldr	r0, [r7, #16]
 80102d4:	f000 f86c 	bl	80103b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80102d8:	f7fe fff4 	bl	800f2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80102dc:	bf00      	nop
 80102de:	3718      	adds	r7, #24
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	200086b8 	.word	0x200086b8
 80102e8:	200086b0 	.word	0x200086b0

080102ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80102ec:	b480      	push	{r7}
 80102ee:	b085      	sub	sp, #20
 80102f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80102f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80102f8:	4b27      	ldr	r3, [pc, #156]	; (8010398 <prvHeapInit+0xac>)
 80102fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f003 0307 	and.w	r3, r3, #7
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00c      	beq.n	8010320 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	3307      	adds	r3, #7
 801030a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f023 0307 	bic.w	r3, r3, #7
 8010312:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	4a1f      	ldr	r2, [pc, #124]	; (8010398 <prvHeapInit+0xac>)
 801031c:	4413      	add	r3, r2
 801031e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010324:	4a1d      	ldr	r2, [pc, #116]	; (801039c <prvHeapInit+0xb0>)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801032a:	4b1c      	ldr	r3, [pc, #112]	; (801039c <prvHeapInit+0xb0>)
 801032c:	2200      	movs	r2, #0
 801032e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	68ba      	ldr	r2, [r7, #8]
 8010334:	4413      	add	r3, r2
 8010336:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010338:	2208      	movs	r2, #8
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	1a9b      	subs	r3, r3, r2
 801033e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f023 0307 	bic.w	r3, r3, #7
 8010346:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	4a15      	ldr	r2, [pc, #84]	; (80103a0 <prvHeapInit+0xb4>)
 801034c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801034e:	4b14      	ldr	r3, [pc, #80]	; (80103a0 <prvHeapInit+0xb4>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2200      	movs	r2, #0
 8010354:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010356:	4b12      	ldr	r3, [pc, #72]	; (80103a0 <prvHeapInit+0xb4>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2200      	movs	r2, #0
 801035c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	1ad2      	subs	r2, r2, r3
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801036c:	4b0c      	ldr	r3, [pc, #48]	; (80103a0 <prvHeapInit+0xb4>)
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	4a0a      	ldr	r2, [pc, #40]	; (80103a4 <prvHeapInit+0xb8>)
 801037a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	4a09      	ldr	r2, [pc, #36]	; (80103a8 <prvHeapInit+0xbc>)
 8010382:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010384:	4b09      	ldr	r3, [pc, #36]	; (80103ac <prvHeapInit+0xc0>)
 8010386:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801038a:	601a      	str	r2, [r3, #0]
}
 801038c:	bf00      	nop
 801038e:	3714      	adds	r7, #20
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr
 8010398:	200006a4 	.word	0x200006a4
 801039c:	200086a4 	.word	0x200086a4
 80103a0:	200086ac 	.word	0x200086ac
 80103a4:	200086b4 	.word	0x200086b4
 80103a8:	200086b0 	.word	0x200086b0
 80103ac:	200086b8 	.word	0x200086b8

080103b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80103b0:	b480      	push	{r7}
 80103b2:	b085      	sub	sp, #20
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80103b8:	4b28      	ldr	r3, [pc, #160]	; (801045c <prvInsertBlockIntoFreeList+0xac>)
 80103ba:	60fb      	str	r3, [r7, #12]
 80103bc:	e002      	b.n	80103c4 <prvInsertBlockIntoFreeList+0x14>
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	60fb      	str	r3, [r7, #12]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d8f7      	bhi.n	80103be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	4413      	add	r3, r2
 80103da:	687a      	ldr	r2, [r7, #4]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d108      	bne.n	80103f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	685a      	ldr	r2, [r3, #4]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	441a      	add	r2, r3
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	441a      	add	r2, r3
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	429a      	cmp	r2, r3
 8010404:	d118      	bne.n	8010438 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	4b15      	ldr	r3, [pc, #84]	; (8010460 <prvInsertBlockIntoFreeList+0xb0>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	429a      	cmp	r2, r3
 8010410:	d00d      	beq.n	801042e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	685a      	ldr	r2, [r3, #4]
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	441a      	add	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	681a      	ldr	r2, [r3, #0]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	601a      	str	r2, [r3, #0]
 801042c:	e008      	b.n	8010440 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801042e:	4b0c      	ldr	r3, [pc, #48]	; (8010460 <prvInsertBlockIntoFreeList+0xb0>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	601a      	str	r2, [r3, #0]
 8010436:	e003      	b.n	8010440 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010440:	68fa      	ldr	r2, [r7, #12]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	429a      	cmp	r2, r3
 8010446:	d002      	beq.n	801044e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801044e:	bf00      	nop
 8010450:	3714      	adds	r7, #20
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	200086a4 	.word	0x200086a4
 8010460:	200086ac 	.word	0x200086ac

08010464 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8010468:	2200      	movs	r2, #0
 801046a:	490e      	ldr	r1, [pc, #56]	; (80104a4 <MX_USB_HOST_Init+0x40>)
 801046c:	480e      	ldr	r0, [pc, #56]	; (80104a8 <MX_USB_HOST_Init+0x44>)
 801046e:	f7fc f80d 	bl	800c48c <USBH_Init>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d001      	beq.n	801047c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010478:	f7f0 fef4 	bl	8001264 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 801047c:	490b      	ldr	r1, [pc, #44]	; (80104ac <MX_USB_HOST_Init+0x48>)
 801047e:	480a      	ldr	r0, [pc, #40]	; (80104a8 <MX_USB_HOST_Init+0x44>)
 8010480:	f7fc f8ba 	bl	800c5f8 <USBH_RegisterClass>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801048a:	f7f0 feeb 	bl	8001264 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801048e:	4806      	ldr	r0, [pc, #24]	; (80104a8 <MX_USB_HOST_Init+0x44>)
 8010490:	f7fc f93e 	bl	800c710 <USBH_Start>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801049a:	f7f0 fee3 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801049e:	bf00      	nop
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	080104b1 	.word	0x080104b1
 80104a8:	20008a60 	.word	0x20008a60
 80104ac:	20000088 	.word	0x20000088

080104b0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	460b      	mov	r3, r1
 80104ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80104bc:	78fb      	ldrb	r3, [r7, #3]
 80104be:	3b01      	subs	r3, #1
 80104c0:	2b04      	cmp	r3, #4
 80104c2:	d819      	bhi.n	80104f8 <USBH_UserProcess+0x48>
 80104c4:	a201      	add	r2, pc, #4	; (adr r2, 80104cc <USBH_UserProcess+0x1c>)
 80104c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104ca:	bf00      	nop
 80104cc:	080104f9 	.word	0x080104f9
 80104d0:	080104e9 	.word	0x080104e9
 80104d4:	080104f9 	.word	0x080104f9
 80104d8:	080104f1 	.word	0x080104f1
 80104dc:	080104e1 	.word	0x080104e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80104e0:	4b09      	ldr	r3, [pc, #36]	; (8010508 <USBH_UserProcess+0x58>)
 80104e2:	2203      	movs	r2, #3
 80104e4:	701a      	strb	r2, [r3, #0]
  break;
 80104e6:	e008      	b.n	80104fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80104e8:	4b07      	ldr	r3, [pc, #28]	; (8010508 <USBH_UserProcess+0x58>)
 80104ea:	2202      	movs	r2, #2
 80104ec:	701a      	strb	r2, [r3, #0]
  break;
 80104ee:	e004      	b.n	80104fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80104f0:	4b05      	ldr	r3, [pc, #20]	; (8010508 <USBH_UserProcess+0x58>)
 80104f2:	2201      	movs	r2, #1
 80104f4:	701a      	strb	r2, [r3, #0]
  break;
 80104f6:	e000      	b.n	80104fa <USBH_UserProcess+0x4a>

  default:
  break;
 80104f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80104fa:	bf00      	nop
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	200086bc 	.word	0x200086bc

0801050c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b08a      	sub	sp, #40	; 0x28
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010514:	f107 0314 	add.w	r3, r7, #20
 8010518:	2200      	movs	r2, #0
 801051a:	601a      	str	r2, [r3, #0]
 801051c:	605a      	str	r2, [r3, #4]
 801051e:	609a      	str	r2, [r3, #8]
 8010520:	60da      	str	r2, [r3, #12]
 8010522:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a24      	ldr	r2, [pc, #144]	; (80105bc <HAL_HCD_MspInit+0xb0>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d141      	bne.n	80105b2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801052e:	2300      	movs	r3, #0
 8010530:	613b      	str	r3, [r7, #16]
 8010532:	4b23      	ldr	r3, [pc, #140]	; (80105c0 <HAL_HCD_MspInit+0xb4>)
 8010534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010536:	4a22      	ldr	r2, [pc, #136]	; (80105c0 <HAL_HCD_MspInit+0xb4>)
 8010538:	f043 0302 	orr.w	r3, r3, #2
 801053c:	6313      	str	r3, [r2, #48]	; 0x30
 801053e:	4b20      	ldr	r3, [pc, #128]	; (80105c0 <HAL_HCD_MspInit+0xb4>)
 8010540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010542:	f003 0302 	and.w	r3, r3, #2
 8010546:	613b      	str	r3, [r7, #16]
 8010548:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801054a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 801054e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010550:	2302      	movs	r3, #2
 8010552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010554:	2300      	movs	r3, #0
 8010556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010558:	2300      	movs	r3, #0
 801055a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801055c:	230c      	movs	r3, #12
 801055e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010560:	f107 0314 	add.w	r3, r7, #20
 8010564:	4619      	mov	r1, r3
 8010566:	4817      	ldr	r0, [pc, #92]	; (80105c4 <HAL_HCD_MspInit+0xb8>)
 8010568:	f7f4 fada 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 801056c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010572:	2300      	movs	r3, #0
 8010574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010576:	2300      	movs	r3, #0
 8010578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 801057a:	f107 0314 	add.w	r3, r7, #20
 801057e:	4619      	mov	r1, r3
 8010580:	4810      	ldr	r0, [pc, #64]	; (80105c4 <HAL_HCD_MspInit+0xb8>)
 8010582:	f7f4 facd 	bl	8004b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010586:	2300      	movs	r3, #0
 8010588:	60fb      	str	r3, [r7, #12]
 801058a:	4b0d      	ldr	r3, [pc, #52]	; (80105c0 <HAL_HCD_MspInit+0xb4>)
 801058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058e:	4a0c      	ldr	r2, [pc, #48]	; (80105c0 <HAL_HCD_MspInit+0xb4>)
 8010590:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010594:	6313      	str	r3, [r2, #48]	; 0x30
 8010596:	4b0a      	ldr	r3, [pc, #40]	; (80105c0 <HAL_HCD_MspInit+0xb4>)
 8010598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801059a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801059e:	60fb      	str	r3, [r7, #12]
 80105a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80105a2:	2200      	movs	r2, #0
 80105a4:	2100      	movs	r1, #0
 80105a6:	204d      	movs	r0, #77	; 0x4d
 80105a8:	f7f3 fd1c 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80105ac:	204d      	movs	r0, #77	; 0x4d
 80105ae:	f7f3 fd35 	bl	800401c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80105b2:	bf00      	nop
 80105b4:	3728      	adds	r7, #40	; 0x28
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	40040000 	.word	0x40040000
 80105c0:	40023800 	.word	0x40023800
 80105c4:	40020400 	.word	0x40020400

080105c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fc fd47 	bl	800d06a <USBH_LL_IncTimer>
}
 80105dc:	bf00      	nop
 80105de:	3708      	adds	r7, #8
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fc fd8b 	bl	800d10e <USBH_LL_Connect>
}
 80105f8:	bf00      	nop
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801060e:	4618      	mov	r0, r3
 8010610:	f7fc fda0 	bl	800d154 <USBH_LL_Disconnect>
}
 8010614:	bf00      	nop
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	460b      	mov	r3, r1
 8010626:	70fb      	strb	r3, [r7, #3]
 8010628:	4613      	mov	r3, r2
 801062a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010632:	4618      	mov	r0, r3
 8010634:	f7fc fdd5 	bl	800d1e2 <USBH_LL_NotifyURBChange>
#endif
}
 8010638:	bf00      	nop
 801063a:	3708      	adds	r7, #8
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801064e:	4618      	mov	r0, r3
 8010650:	f7fc fd35 	bl	800d0be <USBH_LL_PortEnabled>
}
 8010654:	bf00      	nop
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801066a:	4618      	mov	r0, r3
 801066c:	f7fc fd41 	bl	800d0f2 <USBH_LL_PortDisabled>
}
 8010670:	bf00      	nop
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010686:	2b00      	cmp	r3, #0
 8010688:	d132      	bne.n	80106f0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801068a:	4a1c      	ldr	r2, [pc, #112]	; (80106fc <USBH_LL_Init+0x84>)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4a19      	ldr	r2, [pc, #100]	; (80106fc <USBH_LL_Init+0x84>)
 8010696:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801069a:	4b18      	ldr	r3, [pc, #96]	; (80106fc <USBH_LL_Init+0x84>)
 801069c:	4a18      	ldr	r2, [pc, #96]	; (8010700 <USBH_LL_Init+0x88>)
 801069e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80106a0:	4b16      	ldr	r3, [pc, #88]	; (80106fc <USBH_LL_Init+0x84>)
 80106a2:	220c      	movs	r2, #12
 80106a4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80106a6:	4b15      	ldr	r3, [pc, #84]	; (80106fc <USBH_LL_Init+0x84>)
 80106a8:	2201      	movs	r2, #1
 80106aa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80106ac:	4b13      	ldr	r3, [pc, #76]	; (80106fc <USBH_LL_Init+0x84>)
 80106ae:	2200      	movs	r2, #0
 80106b0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80106b2:	4b12      	ldr	r3, [pc, #72]	; (80106fc <USBH_LL_Init+0x84>)
 80106b4:	2202      	movs	r2, #2
 80106b6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80106b8:	4b10      	ldr	r3, [pc, #64]	; (80106fc <USBH_LL_Init+0x84>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80106be:	4b0f      	ldr	r3, [pc, #60]	; (80106fc <USBH_LL_Init+0x84>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80106c4:	4b0d      	ldr	r3, [pc, #52]	; (80106fc <USBH_LL_Init+0x84>)
 80106c6:	2200      	movs	r2, #0
 80106c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80106ca:	4b0c      	ldr	r3, [pc, #48]	; (80106fc <USBH_LL_Init+0x84>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80106d0:	480a      	ldr	r0, [pc, #40]	; (80106fc <USBH_LL_Init+0x84>)
 80106d2:	f7f4 fcf2 	bl	80050ba <HAL_HCD_Init>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d001      	beq.n	80106e0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 80106dc:	f7f0 fdc2 	bl	8001264 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80106e0:	4806      	ldr	r0, [pc, #24]	; (80106fc <USBH_LL_Init+0x84>)
 80106e2:	f7f5 f8f5 	bl	80058d0 <HAL_HCD_GetCurrentFrame>
 80106e6:	4603      	mov	r3, r0
 80106e8:	4619      	mov	r1, r3
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7fc fcae 	bl	800d04c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80106f0:	2300      	movs	r3, #0
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	20008e44 	.word	0x20008e44
 8010700:	40040000 	.word	0x40040000

08010704 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010710:	2300      	movs	r3, #0
 8010712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801071a:	4618      	mov	r0, r3
 801071c:	f7f5 f860 	bl	80057e0 <HAL_HCD_Start>
 8010720:	4603      	mov	r3, r0
 8010722:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010724:	7bfb      	ldrb	r3, [r7, #15]
 8010726:	4618      	mov	r0, r3
 8010728:	f000 f95c 	bl	80109e4 <USBH_Get_USB_Status>
 801072c:	4603      	mov	r3, r0
 801072e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010730:	7bbb      	ldrb	r3, [r7, #14]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b084      	sub	sp, #16
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010742:	2300      	movs	r3, #0
 8010744:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010746:	2300      	movs	r3, #0
 8010748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010750:	4618      	mov	r0, r3
 8010752:	f7f5 f868 	bl	8005826 <HAL_HCD_Stop>
 8010756:	4603      	mov	r3, r0
 8010758:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801075a:	7bfb      	ldrb	r3, [r7, #15]
 801075c:	4618      	mov	r0, r3
 801075e:	f000 f941 	bl	80109e4 <USBH_Get_USB_Status>
 8010762:	4603      	mov	r3, r0
 8010764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010766:	7bbb      	ldrb	r3, [r7, #14]
}
 8010768:	4618      	mov	r0, r3
 801076a:	3710      	adds	r7, #16
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010778:	2301      	movs	r3, #1
 801077a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010782:	4618      	mov	r0, r3
 8010784:	f7f5 f8b2 	bl	80058ec <HAL_HCD_GetCurrentSpeed>
 8010788:	4603      	mov	r3, r0
 801078a:	2b01      	cmp	r3, #1
 801078c:	d007      	beq.n	801079e <USBH_LL_GetSpeed+0x2e>
 801078e:	2b01      	cmp	r3, #1
 8010790:	d302      	bcc.n	8010798 <USBH_LL_GetSpeed+0x28>
 8010792:	2b02      	cmp	r3, #2
 8010794:	d006      	beq.n	80107a4 <USBH_LL_GetSpeed+0x34>
 8010796:	e008      	b.n	80107aa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010798:	2300      	movs	r3, #0
 801079a:	73fb      	strb	r3, [r7, #15]
    break;
 801079c:	e008      	b.n	80107b0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801079e:	2301      	movs	r3, #1
 80107a0:	73fb      	strb	r3, [r7, #15]
    break;
 80107a2:	e005      	b.n	80107b0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80107a4:	2302      	movs	r3, #2
 80107a6:	73fb      	strb	r3, [r7, #15]
    break;
 80107a8:	e002      	b.n	80107b0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80107aa:	2301      	movs	r3, #1
 80107ac:	73fb      	strb	r3, [r7, #15]
    break;
 80107ae:	bf00      	nop
  }
  return  speed;
 80107b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b084      	sub	sp, #16
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107c6:	2300      	movs	r3, #0
 80107c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7f5 f845 	bl	8005860 <HAL_HCD_ResetPort>
 80107d6:	4603      	mov	r3, r0
 80107d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80107da:	7bfb      	ldrb	r3, [r7, #15]
 80107dc:	4618      	mov	r0, r3
 80107de:	f000 f901 	bl	80109e4 <USBH_Get_USB_Status>
 80107e2:	4603      	mov	r3, r0
 80107e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3710      	adds	r7, #16
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	460b      	mov	r3, r1
 80107fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010802:	78fa      	ldrb	r2, [r7, #3]
 8010804:	4611      	mov	r1, r2
 8010806:	4618      	mov	r0, r3
 8010808:	f7f5 f84d 	bl	80058a6 <HAL_HCD_HC_GetXferCount>
 801080c:	4603      	mov	r3, r0
}
 801080e:	4618      	mov	r0, r3
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010816:	b590      	push	{r4, r7, lr}
 8010818:	b089      	sub	sp, #36	; 0x24
 801081a:	af04      	add	r7, sp, #16
 801081c:	6078      	str	r0, [r7, #4]
 801081e:	4608      	mov	r0, r1
 8010820:	4611      	mov	r1, r2
 8010822:	461a      	mov	r2, r3
 8010824:	4603      	mov	r3, r0
 8010826:	70fb      	strb	r3, [r7, #3]
 8010828:	460b      	mov	r3, r1
 801082a:	70bb      	strb	r3, [r7, #2]
 801082c:	4613      	mov	r3, r2
 801082e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010834:	2300      	movs	r3, #0
 8010836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801083e:	787c      	ldrb	r4, [r7, #1]
 8010840:	78ba      	ldrb	r2, [r7, #2]
 8010842:	78f9      	ldrb	r1, [r7, #3]
 8010844:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010846:	9302      	str	r3, [sp, #8]
 8010848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801084c:	9301      	str	r3, [sp, #4]
 801084e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	4623      	mov	r3, r4
 8010856:	f7f4 fc92 	bl	800517e <HAL_HCD_HC_Init>
 801085a:	4603      	mov	r3, r0
 801085c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801085e:	7bfb      	ldrb	r3, [r7, #15]
 8010860:	4618      	mov	r0, r3
 8010862:	f000 f8bf 	bl	80109e4 <USBH_Get_USB_Status>
 8010866:	4603      	mov	r3, r0
 8010868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801086a:	7bbb      	ldrb	r3, [r7, #14]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3714      	adds	r7, #20
 8010870:	46bd      	mov	sp, r7
 8010872:	bd90      	pop	{r4, r7, pc}

08010874 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	460b      	mov	r3, r1
 801087e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010880:	2300      	movs	r3, #0
 8010882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010884:	2300      	movs	r3, #0
 8010886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801088e:	78fa      	ldrb	r2, [r7, #3]
 8010890:	4611      	mov	r1, r2
 8010892:	4618      	mov	r0, r3
 8010894:	f7f4 fd0b 	bl	80052ae <HAL_HCD_HC_Halt>
 8010898:	4603      	mov	r3, r0
 801089a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801089c:	7bfb      	ldrb	r3, [r7, #15]
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 f8a0 	bl	80109e4 <USBH_Get_USB_Status>
 80108a4:	4603      	mov	r3, r0
 80108a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80108b2:	b590      	push	{r4, r7, lr}
 80108b4:	b089      	sub	sp, #36	; 0x24
 80108b6:	af04      	add	r7, sp, #16
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	4608      	mov	r0, r1
 80108bc:	4611      	mov	r1, r2
 80108be:	461a      	mov	r2, r3
 80108c0:	4603      	mov	r3, r0
 80108c2:	70fb      	strb	r3, [r7, #3]
 80108c4:	460b      	mov	r3, r1
 80108c6:	70bb      	strb	r3, [r7, #2]
 80108c8:	4613      	mov	r3, r2
 80108ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108d0:	2300      	movs	r3, #0
 80108d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80108da:	787c      	ldrb	r4, [r7, #1]
 80108dc:	78ba      	ldrb	r2, [r7, #2]
 80108de:	78f9      	ldrb	r1, [r7, #3]
 80108e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80108e4:	9303      	str	r3, [sp, #12]
 80108e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80108e8:	9302      	str	r3, [sp, #8]
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	9301      	str	r3, [sp, #4]
 80108ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	4623      	mov	r3, r4
 80108f6:	f7f4 fcfd 	bl	80052f4 <HAL_HCD_HC_SubmitRequest>
 80108fa:	4603      	mov	r3, r0
 80108fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80108fe:	7bfb      	ldrb	r3, [r7, #15]
 8010900:	4618      	mov	r0, r3
 8010902:	f000 f86f 	bl	80109e4 <USBH_Get_USB_Status>
 8010906:	4603      	mov	r3, r0
 8010908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801090a:	7bbb      	ldrb	r3, [r7, #14]
}
 801090c:	4618      	mov	r0, r3
 801090e:	3714      	adds	r7, #20
 8010910:	46bd      	mov	sp, r7
 8010912:	bd90      	pop	{r4, r7, pc}

08010914 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	460b      	mov	r3, r1
 801091e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010926:	78fa      	ldrb	r2, [r7, #3]
 8010928:	4611      	mov	r1, r2
 801092a:	4618      	mov	r0, r3
 801092c:	f7f4 ffa6 	bl	800587c <HAL_HCD_HC_GetURBState>
 8010930:	4603      	mov	r3, r0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b082      	sub	sp, #8
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
 8010942:	460b      	mov	r3, r1
 8010944:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801094c:	2b00      	cmp	r3, #0
 801094e:	d103      	bne.n	8010958 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8010950:	78fb      	ldrb	r3, [r7, #3]
 8010952:	4618      	mov	r0, r3
 8010954:	f000 f872 	bl	8010a3c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010958:	20c8      	movs	r0, #200	; 0xc8
 801095a:	f7f3 fa69 	bl	8003e30 <HAL_Delay>
  return USBH_OK;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	460b      	mov	r3, r1
 8010972:	70fb      	strb	r3, [r7, #3]
 8010974:	4613      	mov	r3, r2
 8010976:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801097e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010980:	78fa      	ldrb	r2, [r7, #3]
 8010982:	68f9      	ldr	r1, [r7, #12]
 8010984:	4613      	mov	r3, r2
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4413      	add	r3, r2
 801098a:	00db      	lsls	r3, r3, #3
 801098c:	440b      	add	r3, r1
 801098e:	333b      	adds	r3, #59	; 0x3b
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00a      	beq.n	80109ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010996:	78fa      	ldrb	r2, [r7, #3]
 8010998:	68f9      	ldr	r1, [r7, #12]
 801099a:	4613      	mov	r3, r2
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	4413      	add	r3, r2
 80109a0:	00db      	lsls	r3, r3, #3
 80109a2:	440b      	add	r3, r1
 80109a4:	3350      	adds	r3, #80	; 0x50
 80109a6:	78ba      	ldrb	r2, [r7, #2]
 80109a8:	701a      	strb	r2, [r3, #0]
 80109aa:	e009      	b.n	80109c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80109ac:	78fa      	ldrb	r2, [r7, #3]
 80109ae:	68f9      	ldr	r1, [r7, #12]
 80109b0:	4613      	mov	r3, r2
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4413      	add	r3, r2
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	440b      	add	r3, r1
 80109ba:	3351      	adds	r3, #81	; 0x51
 80109bc:	78ba      	ldrb	r2, [r7, #2]
 80109be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3714      	adds	r7, #20
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr

080109ce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b082      	sub	sp, #8
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7f3 fa2a 	bl	8003e30 <HAL_Delay>
}
 80109dc:	bf00      	nop
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	4603      	mov	r3, r0
 80109ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80109ee:	2300      	movs	r3, #0
 80109f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80109f2:	79fb      	ldrb	r3, [r7, #7]
 80109f4:	2b03      	cmp	r3, #3
 80109f6:	d817      	bhi.n	8010a28 <USBH_Get_USB_Status+0x44>
 80109f8:	a201      	add	r2, pc, #4	; (adr r2, 8010a00 <USBH_Get_USB_Status+0x1c>)
 80109fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109fe:	bf00      	nop
 8010a00:	08010a11 	.word	0x08010a11
 8010a04:	08010a17 	.word	0x08010a17
 8010a08:	08010a1d 	.word	0x08010a1d
 8010a0c:	08010a23 	.word	0x08010a23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	73fb      	strb	r3, [r7, #15]
    break;
 8010a14:	e00b      	b.n	8010a2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010a16:	2302      	movs	r3, #2
 8010a18:	73fb      	strb	r3, [r7, #15]
    break;
 8010a1a:	e008      	b.n	8010a2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8010a20:	e005      	b.n	8010a2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010a22:	2302      	movs	r3, #2
 8010a24:	73fb      	strb	r3, [r7, #15]
    break;
 8010a26:	e002      	b.n	8010a2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010a28:	2302      	movs	r3, #2
 8010a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a2c:	bf00      	nop
  }
  return usb_status;
 8010a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3714      	adds	r7, #20
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b084      	sub	sp, #16
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	4603      	mov	r3, r0
 8010a44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010a46:	79fb      	ldrb	r3, [r7, #7]
 8010a48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8010a4a:	79fb      	ldrb	r3, [r7, #7]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d102      	bne.n	8010a56 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010a50:	2301      	movs	r3, #1
 8010a52:	73fb      	strb	r3, [r7, #15]
 8010a54:	e001      	b.n	8010a5a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010a56:	2300      	movs	r3, #0
 8010a58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8010a5a:	7bfb      	ldrb	r3, [r7, #15]
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	2110      	movs	r1, #16
 8010a60:	4803      	ldr	r0, [pc, #12]	; (8010a70 <MX_DriverVbusHS+0x34>)
 8010a62:	f7f4 fb11 	bl	8005088 <HAL_GPIO_WritePin>
}
 8010a66:	bf00      	nop
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	40020800 	.word	0x40020800

08010a74 <__errno>:
 8010a74:	4b01      	ldr	r3, [pc, #4]	; (8010a7c <__errno+0x8>)
 8010a76:	6818      	ldr	r0, [r3, #0]
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	200000ac 	.word	0x200000ac

08010a80 <__libc_init_array>:
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	4e0d      	ldr	r6, [pc, #52]	; (8010ab8 <__libc_init_array+0x38>)
 8010a84:	4c0d      	ldr	r4, [pc, #52]	; (8010abc <__libc_init_array+0x3c>)
 8010a86:	1ba4      	subs	r4, r4, r6
 8010a88:	10a4      	asrs	r4, r4, #2
 8010a8a:	2500      	movs	r5, #0
 8010a8c:	42a5      	cmp	r5, r4
 8010a8e:	d109      	bne.n	8010aa4 <__libc_init_array+0x24>
 8010a90:	4e0b      	ldr	r6, [pc, #44]	; (8010ac0 <__libc_init_array+0x40>)
 8010a92:	4c0c      	ldr	r4, [pc, #48]	; (8010ac4 <__libc_init_array+0x44>)
 8010a94:	f000 f8f6 	bl	8010c84 <_init>
 8010a98:	1ba4      	subs	r4, r4, r6
 8010a9a:	10a4      	asrs	r4, r4, #2
 8010a9c:	2500      	movs	r5, #0
 8010a9e:	42a5      	cmp	r5, r4
 8010aa0:	d105      	bne.n	8010aae <__libc_init_array+0x2e>
 8010aa2:	bd70      	pop	{r4, r5, r6, pc}
 8010aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010aa8:	4798      	blx	r3
 8010aaa:	3501      	adds	r5, #1
 8010aac:	e7ee      	b.n	8010a8c <__libc_init_array+0xc>
 8010aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ab2:	4798      	blx	r3
 8010ab4:	3501      	adds	r5, #1
 8010ab6:	e7f2      	b.n	8010a9e <__libc_init_array+0x1e>
 8010ab8:	08012ce0 	.word	0x08012ce0
 8010abc:	08012ce0 	.word	0x08012ce0
 8010ac0:	08012ce0 	.word	0x08012ce0
 8010ac4:	08012ce4 	.word	0x08012ce4

08010ac8 <malloc>:
 8010ac8:	4b02      	ldr	r3, [pc, #8]	; (8010ad4 <malloc+0xc>)
 8010aca:	4601      	mov	r1, r0
 8010acc:	6818      	ldr	r0, [r3, #0]
 8010ace:	f000 b86d 	b.w	8010bac <_malloc_r>
 8010ad2:	bf00      	nop
 8010ad4:	200000ac 	.word	0x200000ac

08010ad8 <free>:
 8010ad8:	4b02      	ldr	r3, [pc, #8]	; (8010ae4 <free+0xc>)
 8010ada:	4601      	mov	r1, r0
 8010adc:	6818      	ldr	r0, [r3, #0]
 8010ade:	f000 b817 	b.w	8010b10 <_free_r>
 8010ae2:	bf00      	nop
 8010ae4:	200000ac 	.word	0x200000ac

08010ae8 <memcpy>:
 8010ae8:	b510      	push	{r4, lr}
 8010aea:	1e43      	subs	r3, r0, #1
 8010aec:	440a      	add	r2, r1
 8010aee:	4291      	cmp	r1, r2
 8010af0:	d100      	bne.n	8010af4 <memcpy+0xc>
 8010af2:	bd10      	pop	{r4, pc}
 8010af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010afc:	e7f7      	b.n	8010aee <memcpy+0x6>

08010afe <memset>:
 8010afe:	4402      	add	r2, r0
 8010b00:	4603      	mov	r3, r0
 8010b02:	4293      	cmp	r3, r2
 8010b04:	d100      	bne.n	8010b08 <memset+0xa>
 8010b06:	4770      	bx	lr
 8010b08:	f803 1b01 	strb.w	r1, [r3], #1
 8010b0c:	e7f9      	b.n	8010b02 <memset+0x4>
	...

08010b10 <_free_r>:
 8010b10:	b538      	push	{r3, r4, r5, lr}
 8010b12:	4605      	mov	r5, r0
 8010b14:	2900      	cmp	r1, #0
 8010b16:	d045      	beq.n	8010ba4 <_free_r+0x94>
 8010b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b1c:	1f0c      	subs	r4, r1, #4
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	bfb8      	it	lt
 8010b22:	18e4      	addlt	r4, r4, r3
 8010b24:	f000 f8ac 	bl	8010c80 <__malloc_lock>
 8010b28:	4a1f      	ldr	r2, [pc, #124]	; (8010ba8 <_free_r+0x98>)
 8010b2a:	6813      	ldr	r3, [r2, #0]
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	b933      	cbnz	r3, 8010b3e <_free_r+0x2e>
 8010b30:	6063      	str	r3, [r4, #4]
 8010b32:	6014      	str	r4, [r2, #0]
 8010b34:	4628      	mov	r0, r5
 8010b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b3a:	f000 b8a2 	b.w	8010c82 <__malloc_unlock>
 8010b3e:	42a3      	cmp	r3, r4
 8010b40:	d90c      	bls.n	8010b5c <_free_r+0x4c>
 8010b42:	6821      	ldr	r1, [r4, #0]
 8010b44:	1862      	adds	r2, r4, r1
 8010b46:	4293      	cmp	r3, r2
 8010b48:	bf04      	itt	eq
 8010b4a:	681a      	ldreq	r2, [r3, #0]
 8010b4c:	685b      	ldreq	r3, [r3, #4]
 8010b4e:	6063      	str	r3, [r4, #4]
 8010b50:	bf04      	itt	eq
 8010b52:	1852      	addeq	r2, r2, r1
 8010b54:	6022      	streq	r2, [r4, #0]
 8010b56:	6004      	str	r4, [r0, #0]
 8010b58:	e7ec      	b.n	8010b34 <_free_r+0x24>
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	685a      	ldr	r2, [r3, #4]
 8010b5e:	b10a      	cbz	r2, 8010b64 <_free_r+0x54>
 8010b60:	42a2      	cmp	r2, r4
 8010b62:	d9fa      	bls.n	8010b5a <_free_r+0x4a>
 8010b64:	6819      	ldr	r1, [r3, #0]
 8010b66:	1858      	adds	r0, r3, r1
 8010b68:	42a0      	cmp	r0, r4
 8010b6a:	d10b      	bne.n	8010b84 <_free_r+0x74>
 8010b6c:	6820      	ldr	r0, [r4, #0]
 8010b6e:	4401      	add	r1, r0
 8010b70:	1858      	adds	r0, r3, r1
 8010b72:	4282      	cmp	r2, r0
 8010b74:	6019      	str	r1, [r3, #0]
 8010b76:	d1dd      	bne.n	8010b34 <_free_r+0x24>
 8010b78:	6810      	ldr	r0, [r2, #0]
 8010b7a:	6852      	ldr	r2, [r2, #4]
 8010b7c:	605a      	str	r2, [r3, #4]
 8010b7e:	4401      	add	r1, r0
 8010b80:	6019      	str	r1, [r3, #0]
 8010b82:	e7d7      	b.n	8010b34 <_free_r+0x24>
 8010b84:	d902      	bls.n	8010b8c <_free_r+0x7c>
 8010b86:	230c      	movs	r3, #12
 8010b88:	602b      	str	r3, [r5, #0]
 8010b8a:	e7d3      	b.n	8010b34 <_free_r+0x24>
 8010b8c:	6820      	ldr	r0, [r4, #0]
 8010b8e:	1821      	adds	r1, r4, r0
 8010b90:	428a      	cmp	r2, r1
 8010b92:	bf04      	itt	eq
 8010b94:	6811      	ldreq	r1, [r2, #0]
 8010b96:	6852      	ldreq	r2, [r2, #4]
 8010b98:	6062      	str	r2, [r4, #4]
 8010b9a:	bf04      	itt	eq
 8010b9c:	1809      	addeq	r1, r1, r0
 8010b9e:	6021      	streq	r1, [r4, #0]
 8010ba0:	605c      	str	r4, [r3, #4]
 8010ba2:	e7c7      	b.n	8010b34 <_free_r+0x24>
 8010ba4:	bd38      	pop	{r3, r4, r5, pc}
 8010ba6:	bf00      	nop
 8010ba8:	200086c0 	.word	0x200086c0

08010bac <_malloc_r>:
 8010bac:	b570      	push	{r4, r5, r6, lr}
 8010bae:	1ccd      	adds	r5, r1, #3
 8010bb0:	f025 0503 	bic.w	r5, r5, #3
 8010bb4:	3508      	adds	r5, #8
 8010bb6:	2d0c      	cmp	r5, #12
 8010bb8:	bf38      	it	cc
 8010bba:	250c      	movcc	r5, #12
 8010bbc:	2d00      	cmp	r5, #0
 8010bbe:	4606      	mov	r6, r0
 8010bc0:	db01      	blt.n	8010bc6 <_malloc_r+0x1a>
 8010bc2:	42a9      	cmp	r1, r5
 8010bc4:	d903      	bls.n	8010bce <_malloc_r+0x22>
 8010bc6:	230c      	movs	r3, #12
 8010bc8:	6033      	str	r3, [r6, #0]
 8010bca:	2000      	movs	r0, #0
 8010bcc:	bd70      	pop	{r4, r5, r6, pc}
 8010bce:	f000 f857 	bl	8010c80 <__malloc_lock>
 8010bd2:	4a21      	ldr	r2, [pc, #132]	; (8010c58 <_malloc_r+0xac>)
 8010bd4:	6814      	ldr	r4, [r2, #0]
 8010bd6:	4621      	mov	r1, r4
 8010bd8:	b991      	cbnz	r1, 8010c00 <_malloc_r+0x54>
 8010bda:	4c20      	ldr	r4, [pc, #128]	; (8010c5c <_malloc_r+0xb0>)
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	b91b      	cbnz	r3, 8010be8 <_malloc_r+0x3c>
 8010be0:	4630      	mov	r0, r6
 8010be2:	f000 f83d 	bl	8010c60 <_sbrk_r>
 8010be6:	6020      	str	r0, [r4, #0]
 8010be8:	4629      	mov	r1, r5
 8010bea:	4630      	mov	r0, r6
 8010bec:	f000 f838 	bl	8010c60 <_sbrk_r>
 8010bf0:	1c43      	adds	r3, r0, #1
 8010bf2:	d124      	bne.n	8010c3e <_malloc_r+0x92>
 8010bf4:	230c      	movs	r3, #12
 8010bf6:	6033      	str	r3, [r6, #0]
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	f000 f842 	bl	8010c82 <__malloc_unlock>
 8010bfe:	e7e4      	b.n	8010bca <_malloc_r+0x1e>
 8010c00:	680b      	ldr	r3, [r1, #0]
 8010c02:	1b5b      	subs	r3, r3, r5
 8010c04:	d418      	bmi.n	8010c38 <_malloc_r+0x8c>
 8010c06:	2b0b      	cmp	r3, #11
 8010c08:	d90f      	bls.n	8010c2a <_malloc_r+0x7e>
 8010c0a:	600b      	str	r3, [r1, #0]
 8010c0c:	50cd      	str	r5, [r1, r3]
 8010c0e:	18cc      	adds	r4, r1, r3
 8010c10:	4630      	mov	r0, r6
 8010c12:	f000 f836 	bl	8010c82 <__malloc_unlock>
 8010c16:	f104 000b 	add.w	r0, r4, #11
 8010c1a:	1d23      	adds	r3, r4, #4
 8010c1c:	f020 0007 	bic.w	r0, r0, #7
 8010c20:	1ac3      	subs	r3, r0, r3
 8010c22:	d0d3      	beq.n	8010bcc <_malloc_r+0x20>
 8010c24:	425a      	negs	r2, r3
 8010c26:	50e2      	str	r2, [r4, r3]
 8010c28:	e7d0      	b.n	8010bcc <_malloc_r+0x20>
 8010c2a:	428c      	cmp	r4, r1
 8010c2c:	684b      	ldr	r3, [r1, #4]
 8010c2e:	bf16      	itet	ne
 8010c30:	6063      	strne	r3, [r4, #4]
 8010c32:	6013      	streq	r3, [r2, #0]
 8010c34:	460c      	movne	r4, r1
 8010c36:	e7eb      	b.n	8010c10 <_malloc_r+0x64>
 8010c38:	460c      	mov	r4, r1
 8010c3a:	6849      	ldr	r1, [r1, #4]
 8010c3c:	e7cc      	b.n	8010bd8 <_malloc_r+0x2c>
 8010c3e:	1cc4      	adds	r4, r0, #3
 8010c40:	f024 0403 	bic.w	r4, r4, #3
 8010c44:	42a0      	cmp	r0, r4
 8010c46:	d005      	beq.n	8010c54 <_malloc_r+0xa8>
 8010c48:	1a21      	subs	r1, r4, r0
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f000 f808 	bl	8010c60 <_sbrk_r>
 8010c50:	3001      	adds	r0, #1
 8010c52:	d0cf      	beq.n	8010bf4 <_malloc_r+0x48>
 8010c54:	6025      	str	r5, [r4, #0]
 8010c56:	e7db      	b.n	8010c10 <_malloc_r+0x64>
 8010c58:	200086c0 	.word	0x200086c0
 8010c5c:	200086c4 	.word	0x200086c4

08010c60 <_sbrk_r>:
 8010c60:	b538      	push	{r3, r4, r5, lr}
 8010c62:	4c06      	ldr	r4, [pc, #24]	; (8010c7c <_sbrk_r+0x1c>)
 8010c64:	2300      	movs	r3, #0
 8010c66:	4605      	mov	r5, r0
 8010c68:	4608      	mov	r0, r1
 8010c6a:	6023      	str	r3, [r4, #0]
 8010c6c:	f7f0 fc66 	bl	800153c <_sbrk>
 8010c70:	1c43      	adds	r3, r0, #1
 8010c72:	d102      	bne.n	8010c7a <_sbrk_r+0x1a>
 8010c74:	6823      	ldr	r3, [r4, #0]
 8010c76:	b103      	cbz	r3, 8010c7a <_sbrk_r+0x1a>
 8010c78:	602b      	str	r3, [r5, #0]
 8010c7a:	bd38      	pop	{r3, r4, r5, pc}
 8010c7c:	20009108 	.word	0x20009108

08010c80 <__malloc_lock>:
 8010c80:	4770      	bx	lr

08010c82 <__malloc_unlock>:
 8010c82:	4770      	bx	lr

08010c84 <_init>:
 8010c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c86:	bf00      	nop
 8010c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c8a:	bc08      	pop	{r3}
 8010c8c:	469e      	mov	lr, r3
 8010c8e:	4770      	bx	lr

08010c90 <_fini>:
 8010c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c92:	bf00      	nop
 8010c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c96:	bc08      	pop	{r3}
 8010c98:	469e      	mov	lr, r3
 8010c9a:	4770      	bx	lr
